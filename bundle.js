!function(e){var t={};function i(s){if(t[s])return t[s].exports;var r=t[s]={i:s,l:!1,exports:{}};return e[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(s,r,function(t){return e[t]}.bind(null,r));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=3)}([function(e,t,i){},function(e,t){const i=document.getElementById("patientsGridlist"),s=i.querySelectorAll("vaadin-grid-column");s[0].headerRenderer=function(e){e.textContent="NAME"},s[0].renderer=function(e,t,i){e.textContent=i.item.name},s[1].headerRenderer=function(e){e.textContent="AGE"},s[1].renderer=function(e,t,i){e.textContent=i.item.age},setTimeout((function(){i.items=[{name:"John Do",age:50},{name:"Piet de Ro",age:67},{name:"Maria van Hooi",age:55}]}),5e3)},function(e,t){document.getElementById("startChatButton").addEventListener("click",(function(){const e=["?","?","?"];var t=(r=Math.floor(Math.random()*e.length),e[r]),s="";var r;location.hash||(location.hash=Math.floor(16777215*Math.random()).toString(16));const n=location.hash.substring(1),o=new ScaleDrone("DlXcL5SWK3O2nX0q"),a="observable-"+n;let l,h;function d(e){o.publish({room:a,message:e})}function c(e){console.log("Starting WebRTC in as",e?"offerer":"waiter"),i.onicecandidate=e=>{e.candidate&&d({candidate:e.candidate})},e?(s="DocterX",t="?",i.onnegotiationneeded=()=>{i.createOffer(u,e=>console.error(e))},h=i.createDataChannel("chat"),p()):(s="PatientY",t="?",i.ondatachannel=e=>{h=e.channel,p()}),i.ontrack=e=>{const t=e.streams[0];remoteVideo.srcObject&&remoteVideo.srcObject.id===t.id||(remoteVideo.srcObject=t)},l.on("data",(e,t)=>{t.id!==o.clientId&&(e.sdp?i.setRemoteDescription(new RTCSessionDescription(e.sdp),()=>{console.log("pc_peerConnection.remoteDescription.type",i.remoteDescription.type),"offer"===i.remoteDescription.type&&(console.log("Answering offer"),i.createAnswer(u,e=>console.error(e)))},e=>console.error(e)):e.candidate&&i.addIceCandidate(new RTCIceCandidate(e.candidate)))})}function u(e){i.setLocalDescription(e,()=>d({sdp:i.localDescription}),e=>console.error(e))}function p(){_(),h.onopen=_,h.onclose=_,h.onmessage=e=>m(JSON.parse(e.data),!1)}function _(){console.log("WebRTC channel state is:",h.readyState),"open"===h.readyState&&m({content:"WebRTC data channel is now open"})}function m(e,t){const i=document.querySelector('template[data-template="message"]'),s=i.content.querySelector(".message__nameChatWindow");(e.emoji||e.name)&&(s.innerText=e.emoji+" "+e.name),i.content.querySelector(".message__bubbleChatWindow").innerText=e.content;const r=document.importNode(i.content,!0),n=r.querySelector(".messageChatWindow");t?n.classList.add("message--mineChatWindow"):n.classList.add("message--theirsChatWindow");const o=document.querySelector(".messagesChatWindow");o.appendChild(r),o.scrollTop=o.scrollHeight-o.clientHeight}o.on("open",e=>{if(e)return console.error(e);l=o.subscribe(a),l.on("open",e=>{if(e)return console.error(e);console.log("Connected to signaling server")}),l.on("members",e=>{if(e.length>=3)return alert("The room is full");c(2===e.length)})}),document.querySelector("form").addEventListener("submit",()=>{const e=document.querySelector('input[type="text"]'),i=e.value;e.value="";const r={name:s,content:i,emoji:t};h.send(JSON.stringify(r)),m(r,!0)}),m({content:"Chat URL is "+location.href})})),document.getElementById("startVideoButton").addEventListener("click",(function(){navigator.mediaDevices.getUserMedia({audio:!0,video:!0}).then(e=>{localVideo.srcObject=e,e.getTracks().forEach(t=>i.addTrack(t,e))},console.log("error in video stream"))}));var i;i=new RTCPeerConnection({iceServers:[{urls:"stun:stun.l.google.com:19302"}]})},function(e,t,i){"use strict";i.r(t);i(0);class s extends HTMLElement{static get version(){return"1.6.0"}}customElements.define("vaadin-lumo-styles",s);
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let r,n=null,o=window.HTMLImports&&window.HTMLImports.whenReady||null;function a(e){requestAnimationFrame((function(){o?o(e):(n||(n=new Promise(e=>{r=e}),"complete"===document.readyState?r():document.addEventListener("readystatechange",()=>{"complete"===document.readyState&&r()})),n.then((function(){e&&e()})))}))}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/const l="__shadyCSSCachedStyle";let h=null,d=null;class c{constructor(){this.customStyles=[],this.enqueued=!1,a(()=>{window.ShadyCSS.flushCustomStyles&&window.ShadyCSS.flushCustomStyles()})}enqueueDocumentValidation(){!this.enqueued&&d&&(this.enqueued=!0,a(d))}addCustomStyle(e){e.__seenByShadyCSS||(e.__seenByShadyCSS=!0,this.customStyles.push(e),this.enqueueDocumentValidation())}getStyleForCustomStyle(e){if(e[l])return e[l];let t;return t=e.getStyle?e.getStyle():e,t}processStyles(){const e=this.customStyles;for(let t=0;t<e.length;t++){const i=e[t];if(i[l])continue;const s=this.getStyleForCustomStyle(i);if(s){const e=s.__appliedElement||s;h&&h(e),i[l]=e}}return e}}c.prototype.addCustomStyle=c.prototype.addCustomStyle,c.prototype.getStyleForCustomStyle=c.prototype.getStyleForCustomStyle,c.prototype.processStyles=c.prototype.processStyles,Object.defineProperties(c.prototype,{transformCallback:{get:()=>h,set(e){h=e}},validateCallback:{get:()=>d,set(e){let t=!1;d||(t=!0),d=e,t&&this.enqueueDocumentValidation()}}});
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
const u=/(?:^|[;\s{]\s*)(--[\w-]*?)\s*:\s*(?:((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};{])+)|\{([^}]*)\}(?:(?=[;\s}])|$))/gi,p=/(?:^|\W+)@apply\s*\(?([^);\n]*)\)?/gi,_=/@media\s(.*)/;
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
function m(e,t){for(let i in t)null===i?e.style.removeProperty(i):e.style.setProperty(i,t[i])}function f(e,t){const i=window.getComputedStyle(e).getPropertyValue(t);return i?i.trim():""}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
const g=!(window.ShadyDOM&&window.ShadyDOM.inUse);let y,b;function v(e){y=(!e||!e.shimcssproperties)&&(g||Boolean(!navigator.userAgent.match(/AppleWebKit\/601|Edge\/15/)&&window.CSS&&CSS.supports&&CSS.supports("box-shadow","0 0 0 var(--foo)")))}window.ShadyCSS&&void 0!==window.ShadyCSS.cssBuild&&(b=window.ShadyCSS.cssBuild);const w=Boolean(window.ShadyCSS&&window.ShadyCSS.disableRuntime);window.ShadyCSS&&void 0!==window.ShadyCSS.nativeCss?y=window.ShadyCSS.nativeCss:window.ShadyCSS?(v(window.ShadyCSS),window.ShadyCSS=void 0):v(window.WebComponents&&window.WebComponents.flags);const C=y,x=new c;
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/window.ShadyCSS||(window.ShadyCSS={prepareTemplate(e,t,i){},prepareTemplateDom(e,t){},prepareTemplateStyles(e,t,i){},styleSubtree(e,t){x.processStyles(),m(e,t)},styleElement(e){x.processStyles()},styleDocument(e){x.processStyles(),m(document.body,e)},getComputedStyleValue:(e,t)=>f(e,t),flushCustomStyles(){},nativeCss:C,nativeShadow:g,cssBuild:b,disableRuntime:w}),window.ShadyCSS.CustomStyleInterface=x,
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
window.JSCompiler_renameProperty=function(e,t){return e};
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let S,A,P=/(url\()([^)]*)(\))/g,E=/(^\/[^\/])|(^#)|(^[\w-\d]*:)/;function T(e,t){if(e&&E.test(e))return e;if("//"===e)return e;if(void 0===S){S=!1;try{const e=new URL("b","http://a");e.pathname="c%20d",S="http://a/c%20d"===e.href}catch(e){}}if(t||(t=document.baseURI||window.location.href),S)try{return new URL(e,t).href}catch(t){return e}return A||(A=document.implementation.createHTMLDocument("temp"),A.base=A.createElement("base"),A.head.appendChild(A.base),A.anchor=A.createElement("a"),A.body.appendChild(A.anchor)),A.base.href=t,A.anchor.href=e,A.anchor.href||e}function I(e,t){return e.replace(P,(function(e,i,s,r){return i+"'"+T(s.replace(/["']/g,""),t)+"'"+r}))}function O(e){return e.substring(0,e.lastIndexOf("/")+1)}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/const z=!window.ShadyDOM;Boolean(!window.ShadyCSS||window.ShadyCSS.nativeCss),window.customElements.polyfillWrapFlushCallback;let R=O(document.baseURI||window.location.href);let N=window.Polymer&&window.Polymer.sanitizeDOMValue||void 0;let k=!1;let L=!1;let D=!1;let M=!1;let F=!1;let H=!0;
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let B={},V={};function $(e,t){B[e]=V[e.toLowerCase()]=t}function j(e){return B[e]||V[e.toLowerCase()]}class q extends HTMLElement{static get observedAttributes(){return["id"]}static import(e,t){if(e){let i=j(e);return i&&t?i.querySelector(t):i}return null}attributeChangedCallback(e,t,i,s){t!==i&&this.register()}get assetpath(){if(!this.__assetpath){const e=window.HTMLImports&&HTMLImports.importForElement?HTMLImports.importForElement(this)||document:this.ownerDocument,t=T(this.getAttribute("assetpath")||"",e.baseURI);this.__assetpath=O(t)}return this.__assetpath}register(e){if(e=e||this.id){if(L&&void 0!==j(e))throw $(e,null),new Error(`strictTemplatePolicy: dom-module ${e} re-registered`);this.id=e,$(e,this),(t=this).querySelector("style")&&console.warn("dom-module %s has style outside template",t.id)}var t}}q.prototype.modules=B,customElements.define("dom-module",q);function W(e){return q.import(e)}function G(e){const t=I((e.body?e.body:e).textContent,e.baseURI),i=document.createElement("style");return i.textContent=t,i}function U(e){const t=e.trim().split(/\s+/),i=[];for(let e=0;e<t.length;e++)i.push(...Y(t[e]));return i}function Y(e){const t=W(e);if(!t)return console.warn("Could not find style data in module named",e),[];if(void 0===t._styles){const e=[];e.push(...X(t));const i=t.querySelector("template");i&&e.push(...J(i,t.assetpath)),t._styles=e}return t._styles}function J(e,t){if(!e._styles){const i=[],s=e.content.querySelectorAll("style");for(let e=0;e<s.length;e++){let r=s[e],n=r.getAttribute("include");n&&i.push(...U(n).filter((function(e,t,i){return i.indexOf(e)===t}))),t&&(r.textContent=I(r.textContent,t)),i.push(r)}e._styles=i}return e._styles}function X(e){const t=[],i=e.querySelectorAll("link[rel=import][type~=css]");for(let e=0;e<i.length;e++){let s=i[e];if(s.import){const e=s.import,i=s.hasAttribute("shady-unscoped");if(i&&!e._unscopedStyle){const t=G(e);t.setAttribute("shady-unscoped",""),e._unscopedStyle=t}else e._style||(e._style=G(e));t.push(i?e._unscopedStyle:e._style)}}return t}function K(e){let t=W(e);if(t&&void 0===t._cssText){let e=Z(t),i=t.querySelector("template");i&&(e+=function(e,t){let i="";const s=J(e,t);for(let e=0;e<s.length;e++){let t=s[e];t.parentNode&&t.parentNode.removeChild(t),i+=t.textContent}return i}(i,t.assetpath)),t._cssText=e||null}return t||console.warn("Could not find style data in module named",e),t&&t._cssText||""}function Z(e){let t="",i=X(e);for(let e=0;e<i.length;e++)t+=i[e].textContent;return t}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/const Q=window.ShadyCSS.CustomStyleInterface;class ee extends HTMLElement{constructor(){super(),this._style=null,Q.addCustomStyle(this)}getStyle(){if(this._style)return this._style;const e=this.querySelector("style");if(!e)return null;this._style=e;const t=e.getAttribute("include");return t&&(e.removeAttribute("include"),e.textContent=function(e){let t=e.trim().split(/\s+/),i="";for(let e=0;e<t.length;e++)i+=K(t[e]);return i}(t)+e.textContent),this.ownerDocument!==window.document&&window.document.head.appendChild(this),this._style}}window.customElements.define("custom-style",ee);const te=document.createElement("template");te.innerHTML='<custom-style>\n  <style>\n    html {\n      /* Base (background) */\n      --lumo-base-color: #FFF;\n\n      /* Tint */\n      --lumo-tint-5pct: hsla(0, 0%, 100%, 0.3);\n      --lumo-tint-10pct: hsla(0, 0%, 100%, 0.37);\n      --lumo-tint-20pct: hsla(0, 0%, 100%, 0.44);\n      --lumo-tint-30pct: hsla(0, 0%, 100%, 0.5);\n      --lumo-tint-40pct: hsla(0, 0%, 100%, 0.57);\n      --lumo-tint-50pct: hsla(0, 0%, 100%, 0.64);\n      --lumo-tint-60pct: hsla(0, 0%, 100%, 0.7);\n      --lumo-tint-70pct: hsla(0, 0%, 100%, 0.77);\n      --lumo-tint-80pct: hsla(0, 0%, 100%, 0.84);\n      --lumo-tint-90pct: hsla(0, 0%, 100%, 0.9);\n      --lumo-tint: #FFF;\n\n      /* Shade */\n      --lumo-shade-5pct: hsla(214, 61%, 25%, 0.05);\n      --lumo-shade-10pct: hsla(214, 57%, 24%, 0.1);\n      --lumo-shade-20pct: hsla(214, 53%, 23%, 0.16);\n      --lumo-shade-30pct: hsla(214, 50%, 22%, 0.26);\n      --lumo-shade-40pct: hsla(214, 47%, 21%, 0.38);\n      --lumo-shade-50pct: hsla(214, 45%, 20%, 0.5);\n      --lumo-shade-60pct: hsla(214, 43%, 19%, 0.61);\n      --lumo-shade-70pct: hsla(214, 42%, 18%, 0.72);\n      --lumo-shade-80pct: hsla(214, 41%, 17%, 0.83);\n      --lumo-shade-90pct: hsla(214, 40%, 16%, 0.94);\n      --lumo-shade: hsl(214, 35%, 15%);\n\n      /* Contrast */\n      --lumo-contrast-5pct: var(--lumo-shade-5pct);\n      --lumo-contrast-10pct: var(--lumo-shade-10pct);\n      --lumo-contrast-20pct: var(--lumo-shade-20pct);\n      --lumo-contrast-30pct: var(--lumo-shade-30pct);\n      --lumo-contrast-40pct: var(--lumo-shade-40pct);\n      --lumo-contrast-50pct: var(--lumo-shade-50pct);\n      --lumo-contrast-60pct: var(--lumo-shade-60pct);\n      --lumo-contrast-70pct: var(--lumo-shade-70pct);\n      --lumo-contrast-80pct: var(--lumo-shade-80pct);\n      --lumo-contrast-90pct: var(--lumo-shade-90pct);\n      --lumo-contrast: var(--lumo-shade);\n\n      /* Text */\n      --lumo-header-text-color: var(--lumo-contrast);\n      --lumo-body-text-color: var(--lumo-contrast-90pct);\n      --lumo-secondary-text-color: var(--lumo-contrast-70pct);\n      --lumo-tertiary-text-color: var(--lumo-contrast-50pct);\n      --lumo-disabled-text-color: var(--lumo-contrast-30pct);\n\n      /* Primary */\n      --lumo-primary-color: hsl(214, 90%, 52%);\n      --lumo-primary-color-50pct: hsla(214, 90%, 52%, 0.5);\n      --lumo-primary-color-10pct: hsla(214, 90%, 52%, 0.1);\n      --lumo-primary-text-color: var(--lumo-primary-color);\n      --lumo-primary-contrast-color: #FFF;\n\n      /* Error */\n      --lumo-error-color: hsl(3, 100%, 61%);\n      --lumo-error-color-50pct: hsla(3, 100%, 60%, 0.5);\n      --lumo-error-color-10pct: hsla(3, 100%, 60%, 0.1);\n      --lumo-error-text-color: hsl(3, 92%, 53%);\n      --lumo-error-contrast-color: #FFF;\n\n      /* Success */\n      --lumo-success-color: hsl(145, 80%, 42%); /* hsl(144,82%,37%); */\n      --lumo-success-color-50pct: hsla(145, 76%, 44%, 0.55);\n      --lumo-success-color-10pct: hsla(145, 76%, 44%, 0.12);\n      --lumo-success-text-color: hsl(145, 100%, 32%);\n      --lumo-success-contrast-color: #FFF;\n    }\n  </style>\n</custom-style><dom-module id="lumo-color">\n  <template>\n    <style>\n      [theme~="dark"] {\n        /* Base (background) */\n        --lumo-base-color: hsl(214, 35%, 21%);\n\n        /* Tint */\n        --lumo-tint-5pct: hsla(214, 65%, 85%, 0.06);\n        --lumo-tint-10pct: hsla(214, 60%, 80%, 0.14);\n        --lumo-tint-20pct: hsla(214, 64%, 82%, 0.23);\n        --lumo-tint-30pct: hsla(214, 69%, 84%, 0.32);\n        --lumo-tint-40pct: hsla(214, 73%, 86%, 0.41);\n        --lumo-tint-50pct: hsla(214, 78%, 88%, 0.5);\n        --lumo-tint-60pct: hsla(214, 82%, 90%, 0.6);\n        --lumo-tint-70pct: hsla(214, 87%, 92%, 0.7);\n        --lumo-tint-80pct: hsla(214, 91%, 94%, 0.8);\n        --lumo-tint-90pct: hsla(214, 96%, 96%, 0.9);\n        --lumo-tint: hsl(214, 100%, 98%);\n\n        /* Shade */\n        --lumo-shade-5pct: hsla(214, 0%, 0%, 0.07);\n        --lumo-shade-10pct: hsla(214, 4%, 2%, 0.15);\n        --lumo-shade-20pct: hsla(214, 8%, 4%, 0.23);\n        --lumo-shade-30pct: hsla(214, 12%, 6%, 0.32);\n        --lumo-shade-40pct: hsla(214, 16%, 8%, 0.41);\n        --lumo-shade-50pct: hsla(214, 20%, 10%, 0.5);\n        --lumo-shade-60pct: hsla(214, 24%, 12%, 0.6);\n        --lumo-shade-70pct: hsla(214, 28%, 13%, 0.7);\n        --lumo-shade-80pct: hsla(214, 32%, 13%, 0.8);\n        --lumo-shade-90pct: hsla(214, 33%, 13%, 0.9);\n        --lumo-shade: hsl(214, 33%, 13%);\n\n        /* Contrast */\n        --lumo-contrast-5pct: var(--lumo-tint-5pct);\n        --lumo-contrast-10pct: var(--lumo-tint-10pct);\n        --lumo-contrast-20pct: var(--lumo-tint-20pct);\n        --lumo-contrast-30pct: var(--lumo-tint-30pct);\n        --lumo-contrast-40pct: var(--lumo-tint-40pct);\n        --lumo-contrast-50pct: var(--lumo-tint-50pct);\n        --lumo-contrast-60pct: var(--lumo-tint-60pct);\n        --lumo-contrast-70pct: var(--lumo-tint-70pct);\n        --lumo-contrast-80pct: var(--lumo-tint-80pct);\n        --lumo-contrast-90pct: var(--lumo-tint-90pct);\n        --lumo-contrast: var(--lumo-tint);\n\n        /* Text */\n        --lumo-header-text-color: var(--lumo-contrast);\n        --lumo-body-text-color: var(--lumo-contrast-90pct);\n        --lumo-secondary-text-color: var(--lumo-contrast-70pct);\n        --lumo-tertiary-text-color: var(--lumo-contrast-50pct);\n        --lumo-disabled-text-color: var(--lumo-contrast-30pct);\n\n        /* Primary */\n        --lumo-primary-color: hsl(214, 86%, 55%);\n        --lumo-primary-color-50pct: hsla(214, 86%, 55%, 0.5);\n        --lumo-primary-color-10pct: hsla(214, 90%, 63%, 0.1);\n        --lumo-primary-text-color: hsl(214, 100%, 70%);\n        --lumo-primary-contrast-color: #FFF;\n\n        /* Error */\n        --lumo-error-color: hsl(3, 90%, 63%);\n        --lumo-error-color-50pct: hsla(3, 90%, 63%, 0.5);\n        --lumo-error-color-10pct: hsla(3, 90%, 63%, 0.1);\n        --lumo-error-text-color: hsl(3, 100%, 67%);\n\n        /* Success */\n        --lumo-success-color: hsl(145, 65%, 42%);\n        --lumo-success-color-50pct: hsla(145, 65%, 42%, 0.5);\n        --lumo-success-color-10pct: hsla(145, 65%, 42%, 0.1);\n        --lumo-success-text-color: hsl(145, 85%, 47%);\n      }\n\n      html {\n        color: var(--lumo-body-text-color);\n        background-color: var(--lumo-base-color);\n      }\n\n      [theme~="dark"] {\n        color: var(--lumo-body-text-color);\n        background-color: var(--lumo-base-color);\n      }\n\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6 {\n        color: var(--lumo-header-text-color);\n      }\n\n      a {\n        color: var(--lumo-primary-text-color);\n      }\n\n      blockquote {\n        color: var(--lumo-secondary-text-color);\n      }\n\n      code,\n      pre {\n        background-color: var(--lumo-contrast-10pct);\n        border-radius: var(--lumo-border-radius-m);\n      }\n    </style>\n  </template>\n</dom-module><dom-module id="lumo-color-legacy">\n  <template>\n    <style include="lumo-color">\n      :host {\n        color: var(--lumo-body-text-color) !important;\n        background-color: var(--lumo-base-color) !important;\n      }\n    </style>\n  </template>\n</dom-module>',document.head.appendChild(te.content);const ie=document.createElement("template");ie.innerHTML='<custom-style>\n  <style>\n    @font-face {\n      font-family: \'lumo-icons\';\n      src: url(data:application/font-woff;charset=utf-8;base64,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) format(\'woff\');\n      font-weight: normal;\n      font-style: normal;\n    }\n\n    html {\n      --lumo-icons-align-center: "\\ea01";\n      --lumo-icons-align-left: "\\ea02";\n      --lumo-icons-align-right: "\\ea03";\n      --lumo-icons-angle-down: "\\ea04";\n      --lumo-icons-angle-left: "\\ea05";\n      --lumo-icons-angle-right: "\\ea06";\n      --lumo-icons-angle-up: "\\ea07";\n      --lumo-icons-arrow-down: "\\ea08";\n      --lumo-icons-arrow-left: "\\ea09";\n      --lumo-icons-arrow-right: "\\ea0a";\n      --lumo-icons-arrow-up: "\\ea0b";\n      --lumo-icons-bar-chart: "\\ea0c";\n      --lumo-icons-bell: "\\ea0d";\n      --lumo-icons-calendar: "\\ea0e";\n      --lumo-icons-checkmark: "\\ea0f";\n      --lumo-icons-chevron-down: "\\ea10";\n      --lumo-icons-chevron-left: "\\ea11";\n      --lumo-icons-chevron-right: "\\ea12";\n      --lumo-icons-chevron-up: "\\ea13";\n      --lumo-icons-clock: "\\ea14";\n      --lumo-icons-cog: "\\ea15";\n      --lumo-icons-cross: "\\ea16";\n      --lumo-icons-download: "\\ea17";\n      --lumo-icons-dropdown: "\\ea18";\n      --lumo-icons-edit: "\\ea19";\n      --lumo-icons-error: "\\ea1a";\n      --lumo-icons-eye: "\\ea1b";\n      --lumo-icons-eye-disabled: "\\ea1c";\n      --lumo-icons-menu: "\\ea1d";\n      --lumo-icons-minus: "\\ea1e";\n      --lumo-icons-ordered-list: "\\ea1f";\n      --lumo-icons-phone: "\\ea20";\n      --lumo-icons-photo: "\\ea21";\n      --lumo-icons-play: "\\ea22";\n      --lumo-icons-plus: "\\ea23";\n      --lumo-icons-redo: "\\ea24";\n      --lumo-icons-reload: "\\ea25";\n      --lumo-icons-search: "\\ea26";\n      --lumo-icons-undo: "\\ea27";\n      --lumo-icons-unordered-list: "\\ea28";\n      --lumo-icons-upload: "\\ea29";\n      --lumo-icons-user: "\\ea2a";\n    }\n  </style>\n</custom-style>',document.head.appendChild(ie.content);const se=document.createElement("template");se.innerHTML="<custom-style>\n  <style>\n    html {\n      --lumo-size-xs: 1.625rem;\n      --lumo-size-s: 1.875rem;\n      --lumo-size-m: 2.25rem;\n      --lumo-size-l: 2.75rem;\n      --lumo-size-xl: 3.5rem;\n\n      /* Icons */\n      --lumo-icon-size-s: 1.25em;\n      --lumo-icon-size-m: 1.5em;\n      --lumo-icon-size-l: 2.25em;\n      /* For backwards compatibility */\n      --lumo-icon-size: var(--lumo-icon-size-m);\n    }\n  </style>\n</custom-style>",document.head.appendChild(se.content);const re=document.createElement("template");re.innerHTML="<custom-style>\n  <style>\n    html {\n      /* Square */\n      --lumo-space-xs: 0.25rem;\n      --lumo-space-s: 0.5rem;\n      --lumo-space-m: 1rem;\n      --lumo-space-l: 1.5rem;\n      --lumo-space-xl: 2.5rem;\n\n      /* Wide */\n      --lumo-space-wide-xs: calc(var(--lumo-space-xs) / 2) var(--lumo-space-xs);\n      --lumo-space-wide-s: calc(var(--lumo-space-s) / 2) var(--lumo-space-s);\n      --lumo-space-wide-m: calc(var(--lumo-space-m) / 2) var(--lumo-space-m);\n      --lumo-space-wide-l: calc(var(--lumo-space-l) / 2) var(--lumo-space-l);\n      --lumo-space-wide-xl: calc(var(--lumo-space-xl) / 2) var(--lumo-space-xl);\n\n      /* Tall */\n      --lumo-space-tall-xs: var(--lumo-space-xs) calc(var(--lumo-space-xs) / 2);\n      --lumo-space-tall-s: var(--lumo-space-s) calc(var(--lumo-space-s) / 2);\n      --lumo-space-tall-m: var(--lumo-space-m) calc(var(--lumo-space-m) / 2);\n      --lumo-space-tall-l: var(--lumo-space-l) calc(var(--lumo-space-l) / 2);\n      --lumo-space-tall-xl: var(--lumo-space-xl) calc(var(--lumo-space-xl) / 2);\n    }\n  </style>\n</custom-style>",document.head.appendChild(re.content);const ne=document.createElement("template");ne.innerHTML="<custom-style>\n  <style>\n    html {\n      /* Border radius */\n      --lumo-border-radius-s: 0.25em; /* Checkbox, badge, date-picker year indicator, etc */\n      --lumo-border-radius-m: var(--lumo-border-radius, 0.25em); /* Button, text field, menu overlay, etc */\n      --lumo-border-radius-l: 0.5em; /* Dialog, notification, etc */\n      --lumo-border-radius: 0.25em; /* Deprecated */\n\n      /* Shadow */\n      --lumo-box-shadow-xs: 0 1px 4px -1px var(--lumo-shade-50pct);\n      --lumo-box-shadow-s: 0 2px 4px -1px var(--lumo-shade-20pct), 0 3px 12px -1px var(--lumo-shade-30pct);\n      --lumo-box-shadow-m: 0 2px 6px -1px var(--lumo-shade-20pct), 0 8px 24px -4px var(--lumo-shade-40pct);\n      --lumo-box-shadow-l: 0 3px 18px -2px var(--lumo-shade-20pct), 0 12px 48px -6px var(--lumo-shade-40pct);\n      --lumo-box-shadow-xl: 0 4px 24px -3px var(--lumo-shade-20pct), 0 18px 64px -8px var(--lumo-shade-40pct);\n\n      /* Clickable element cursor */\n      --lumo-clickable-cursor: default;\n    }\n  </style>\n</custom-style>",document.head.appendChild(ne.content);const oe=document.createElement("template");oe.innerHTML='<custom-style>\n  <style>\n    html {\n      /* Font families */\n      --lumo-font-family: -apple-system, BlinkMacSystemFont, "Roboto", "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n\n      /* Font sizes */\n      --lumo-font-size-xxs: .75rem;\n      --lumo-font-size-xs: .8125rem;\n      --lumo-font-size-s: .875rem;\n      --lumo-font-size-m: 1rem;\n      --lumo-font-size-l: 1.125rem;\n      --lumo-font-size-xl: 1.375rem;\n      --lumo-font-size-xxl: 1.75rem;\n      --lumo-font-size-xxxl: 2.5rem;\n\n      /* Line heights */\n      --lumo-line-height-xs: 1.25;\n      --lumo-line-height-s: 1.375;\n      --lumo-line-height-m: 1.625;\n    }\n\n  </style>\n</custom-style><dom-module id="lumo-typography">\n  <template>\n    <style>\n      html {\n        font-family: var(--lumo-font-family);\n        font-size: var(--lumo-font-size, var(--lumo-font-size-m));\n        line-height: var(--lumo-line-height-m);\n        -webkit-text-size-adjust: 100%;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n      }\n\n      /* Can’t combine with the above selector because that doesn’t work in browsers without native shadow dom */\n      :host {\n        font-family: var(--lumo-font-family);\n        font-size: var(--lumo-font-size, var(--lumo-font-size-m));\n        line-height: var(--lumo-line-height-m);\n        -webkit-text-size-adjust: 100%;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n      }\n\n      small,\n      [theme~="font-size-s"] {\n        font-size: var(--lumo-font-size-s);\n        line-height: var(--lumo-line-height-s);\n      }\n\n      [theme~="font-size-xs"] {\n        font-size: var(--lumo-font-size-xs);\n        line-height: var(--lumo-line-height-xs);\n      }\n\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6 {\n        font-weight: 600;\n        line-height: var(--lumo-line-height-xs);\n        margin-top: 1.25em;\n      }\n\n      h1 {\n        font-size: var(--lumo-font-size-xxxl);\n        margin-bottom: 0.75em;\n      }\n\n      h2 {\n        font-size: var(--lumo-font-size-xxl);\n        margin-bottom: 0.5em;\n      }\n\n      h3 {\n        font-size: var(--lumo-font-size-xl);\n        margin-bottom: 0.5em;\n      }\n\n      h4 {\n        font-size: var(--lumo-font-size-l);\n        margin-bottom: 0.5em;\n      }\n\n      h5 {\n        font-size: var(--lumo-font-size-m);\n        margin-bottom: 0.25em;\n      }\n\n      h6 {\n        font-size: var(--lumo-font-size-xs);\n        margin-bottom: 0;\n        text-transform: uppercase;\n        letter-spacing: 0.03em;\n      }\n\n      p,\n      blockquote {\n        margin-top: 0.5em;\n        margin-bottom: 0.75em;\n      }\n\n      a {\n        text-decoration: none;\n      }\n\n      a:hover {\n        text-decoration: underline;\n      }\n\n      hr {\n        display: block;\n        align-self: stretch;\n        height: 1px;\n        border: 0;\n        padding: 0;\n        margin: var(--lumo-space-s) calc(var(--lumo-border-radius-m) / 2);\n        background-color: var(--lumo-contrast-10pct);\n      }\n\n      blockquote {\n        border-left: 2px solid var(--lumo-contrast-30pct);\n      }\n\n      b,\n      strong {\n        font-weight: 600;\n      }\n\n      /* RTL specific styles */\n\n      blockquote[dir="rtl"] {\n        border-left: none;\n        border-right: 2px solid var(--lumo-contrast-30pct);\n      }\n\n    </style>\n  </template>\n</dom-module>',document.head.appendChild(oe.content);
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
class ae{constructor(e){this.value=e.toString()}toString(){return this.value}}function le(e){if(e instanceof ae)return e.value;throw new Error("non-literal value passed to Polymer's htmlLiteral function: "+e)}const he=function(e,...t){const i=document.createElement("template");return i.innerHTML=t.reduce((t,i,s)=>t+function(e){if(e instanceof HTMLTemplateElement)return e.innerHTML;if(e instanceof ae)return le(e);throw new Error("non-template value passed to Polymer's html function: "+e)}(i)+e[s+1],e[0]),i},de=he`<dom-module id="lumo-checkbox" theme-for="vaadin-checkbox">
  <template>
    <style include="lumo-checkbox-style lumo-checkbox-effects">
      /* IE11 only */
      ::-ms-backdrop,
      [part="checkbox"] {
        line-height: 1;
      }
    </style>
  </template>
</dom-module><dom-module id="lumo-checkbox-style">
  <template>
    <style>
      :host {
        -webkit-tap-highlight-color: transparent;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        cursor: default;
        outline: none;
      }

      [part="label"]:not([empty]) {
        margin: 0.1875em 0.875em 0.1875em 0.375em;
      }

      [part="checkbox"] {
        width: calc(1em + 2px);
        height: calc(1em + 2px);
        margin: 0.1875em;
        position: relative;
        border-radius: var(--lumo-border-radius);
        background-color: var(--lumo-contrast-20pct);
        transition: transform 0.2s cubic-bezier(.12, .32, .54, 2), background-color 0.15s;
        pointer-events: none;
        line-height: 1.2;
      }

      :host([indeterminate]) [part="checkbox"],
      :host([checked]) [part="checkbox"] {
        background-color: var(--lumo-primary-color);
      }

      /* Needed to align the checkbox nicely on the baseline */
      [part="checkbox"]::before {
        content: "\\2003";
      }

      /* Checkmark */
      [part="checkbox"]::after {
        content: "";
        display: inline-block;
        width: 0;
        height: 0;
        border: 0 solid var(--lumo-primary-contrast-color);
        border-width: 0.1875em 0 0 0.1875em;
        box-sizing: border-box;
        transform-origin: 0 0;
        position: absolute;
        top: 0.8125em;
        left: 0.5em;
        transform: scale(0.55) rotate(-135deg);
        opacity: 0;
      }

      :host([checked]) [part="checkbox"]::after {
        opacity: 1;
        width: 0.625em;
        height: 1.0625em;
      }

      /* Indeterminate checkmark */

      :host([indeterminate]) [part="checkbox"]::after {
        transform: none;
        opacity: 1;
        top: 45%;
        height: 10%;
        left: 22%;
        right: 22%;
        width: auto;
        border: 0;
        background-color: var(--lumo-primary-contrast-color);
        transition: opacity 0.25s;
      }

      /* Focus ring */

      :host([focus-ring]) [part="checkbox"] {
        box-shadow: 0 0 0 3px var(--lumo-primary-color-50pct);
      }

      /* Disabled */

      :host([disabled]) {
        pointer-events: none;
        color: var(--lumo-disabled-text-color);
      }

      :host([disabled]) [part="label"] ::slotted(*) {
        color: inherit;
      }

      :host([disabled]) [part="checkbox"] {
        background-color: var(--lumo-contrast-10pct);
      }

      :host([disabled]) [part="checkbox"]::after {
        border-color: var(--lumo-contrast-30pct);
      }

      :host([indeterminate][disabled]) [part="checkbox"]::after {
        background-color: var(--lumo-contrast-30pct);
      }
    </style>
  </template>
</dom-module><dom-module id="lumo-checkbox-effects">
  <template>
    <style>
      /* Transition the checkmark if activated with the mouse (disabled for grid select-all this way) */
      :host(:hover) [part="checkbox"]::after {
        transition: width 0.1s, height 0.25s;
      }

      /* Used for activation "halo" */
      [part="checkbox"]::before {
        color: transparent;
        display: inline-block;
        width: 100%;
        height: 100%;
        border-radius: inherit;
        background-color: inherit;
        transform: scale(1.4);
        opacity: 0;
        transition: transform 0.1s, opacity 0.8s;
      }

      /* Hover */

      :host(:not([checked]):not([indeterminate]):not([disabled]):hover) [part="checkbox"] {
        background-color: var(--lumo-contrast-30pct);
      }

      /* Disable hover for touch devices */
      @media (pointer: coarse) {
        :host(:not([checked]):not([indeterminate]):not([disabled]):hover) [part="checkbox"] {
          background-color: var(--lumo-contrast-20pct);
        }
      }

      /* Active */

      :host([active]) [part="checkbox"] {
        transform: scale(0.9);
        transition-duration: 0.05s;
      }

      :host([active][checked]) [part="checkbox"] {
        transform: scale(1.1);
      }

      :host([active]:not([checked])) [part="checkbox"]::before {
        transition-duration: 0.01s, 0.01s;
        transform: scale(0);
        opacity: 0.4;
      }
    </style>
  </template>
</dom-module>`;document.head.appendChild(de.content);
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let ce=0;function ue(){}ue.prototype.__mixinApplications,ue.prototype.__mixinSet;const pe=function(e){let t=e.__mixinApplications;t||(t=new WeakMap,e.__mixinApplications=t);let i=ce++;return function(s){let r=s.__mixinSet;if(r&&r[i])return s;let n=t,o=n.get(s);o||(o=e(s),n.set(s,o));let a=Object.create(o.__mixinSet||r||null);return a[i]=!0,o.__mixinSet=a,o}},_e=window.ShadyDOM&&window.ShadyDOM.noPatch&&window.ShadyDOM.wrap?window.ShadyDOM.wrap:window.ShadyDOM?e=>ShadyDOM.patch(e):e=>e;
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
function me(e){return e.indexOf(".")>=0}function fe(e){let t=e.indexOf(".");return-1===t?e:e.slice(0,t)}function ge(e,t){return 0===e.indexOf(t+".")}function ye(e,t){return 0===t.indexOf(e+".")}function be(e,t,i){return t+i.slice(e.length)}function ve(e){if(Array.isArray(e)){let t=[];for(let i=0;i<e.length;i++){let s=e[i].toString().split(".");for(let e=0;e<s.length;e++)t.push(s[e])}return t.join(".")}return e}function we(e){return Array.isArray(e)?ve(e).split("."):e.toString().split(".")}function Ce(e,t,i){let s=e,r=we(t);for(let e=0;e<r.length;e++){if(!s)return;s=s[r[e]]}return i&&(i.path=r.join(".")),s}function xe(e,t,i){let s=e,r=we(t),n=r[r.length-1];if(r.length>1){for(let e=0;e<r.length-1;e++){if(s=s[r[e]],!s)return}s[n]=i}else s[t]=i;return r.join(".")}const Se={},Ae=/-[a-z]/g,Pe=/([A-Z])/g;
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/function Ee(e){return Se[e]||(Se[e]=e.indexOf("-")<0?e:e.replace(Ae,e=>e[1].toUpperCase()))}function Te(e){return Se[e]||(Se[e]=e.replace(Pe,"-$1").toLowerCase())}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/let Ie=0,Oe=0,ze=[],Re=0,Ne=document.createTextNode("");new window.MutationObserver((function(){const e=ze.length;for(let t=0;t<e;t++){let e=ze[t];if(e)try{e()}catch(e){setTimeout(()=>{throw e})}}ze.splice(0,e),Oe+=e})).observe(Ne,{characterData:!0});const ke={after:e=>({run:t=>window.setTimeout(t,e),cancel(e){window.clearTimeout(e)}}),run:(e,t)=>window.setTimeout(e,t),cancel(e){window.clearTimeout(e)}},Le={run:e=>window.requestAnimationFrame(e),cancel(e){window.cancelAnimationFrame(e)}},De={run:e=>window.requestIdleCallback?window.requestIdleCallback(e):window.setTimeout(e,16),cancel(e){window.cancelIdleCallback?window.cancelIdleCallback(e):window.clearTimeout(e)}},Me={run:e=>(Ne.textContent=Re++,ze.push(e),Ie++),cancel(e){const t=e-Oe;if(t>=0){if(!ze[t])throw new Error("invalid async handle: "+e);ze[t]=null}}},Fe=Me,He=pe(e=>class extends e{static createProperties(e){const t=this.prototype;for(let i in e)i in t||t._createPropertyAccessor(i)}static attributeNameForProperty(e){return e.toLowerCase()}static typeForProperty(e){}_createPropertyAccessor(e,t){this._addPropertyToAttributeMap(e),this.hasOwnProperty(JSCompiler_renameProperty("__dataHasAccessor",this))||(this.__dataHasAccessor=Object.assign({},this.__dataHasAccessor)),this.__dataHasAccessor[e]||(this.__dataHasAccessor[e]=!0,this._definePropertyAccessor(e,t))}_addPropertyToAttributeMap(e){if(this.hasOwnProperty(JSCompiler_renameProperty("__dataAttributes",this))||(this.__dataAttributes=Object.assign({},this.__dataAttributes)),!this.__dataAttributes[e]){const t=this.constructor.attributeNameForProperty(e);this.__dataAttributes[t]=e}}_definePropertyAccessor(e,t){Object.defineProperty(this,e,{get(){return this._getProperty(e)},set:t?function(){}:function(t){this._setProperty(e,t)}})}constructor(){super(),this.__dataEnabled=!1,this.__dataReady=!1,this.__dataInvalid=!1,this.__data={},this.__dataPending=null,this.__dataOld=null,this.__dataInstanceProps=null,this.__serializing=!1,this._initializeProperties()}ready(){this.__dataReady=!0,this._flushProperties()}_initializeProperties(){for(let e in this.__dataHasAccessor)this.hasOwnProperty(e)&&(this.__dataInstanceProps=this.__dataInstanceProps||{},this.__dataInstanceProps[e]=this[e],delete this[e])}_initializeInstanceProperties(e){Object.assign(this,e)}_setProperty(e,t){this._setPendingProperty(e,t)&&this._invalidateProperties()}_getProperty(e){return this.__data[e]}_setPendingProperty(e,t,i){let s=this.__data[e],r=this._shouldPropertyChange(e,t,s);return r&&(this.__dataPending||(this.__dataPending={},this.__dataOld={}),this.__dataOld&&!(e in this.__dataOld)&&(this.__dataOld[e]=s),this.__data[e]=t,this.__dataPending[e]=t),r}_invalidateProperties(){!this.__dataInvalid&&this.__dataReady&&(this.__dataInvalid=!0,Fe.run(()=>{this.__dataInvalid&&(this.__dataInvalid=!1,this._flushProperties())}))}_enableProperties(){this.__dataEnabled||(this.__dataEnabled=!0,this.__dataInstanceProps&&(this._initializeInstanceProperties(this.__dataInstanceProps),this.__dataInstanceProps=null),this.ready())}_flushProperties(){const e=this.__data,t=this.__dataPending,i=this.__dataOld;this._shouldPropertiesChange(e,t,i)&&(this.__dataPending=null,this.__dataOld=null,this._propertiesChanged(e,t,i))}_shouldPropertiesChange(e,t,i){return Boolean(t)}_propertiesChanged(e,t,i){}_shouldPropertyChange(e,t,i){return i!==t&&(i==i||t==t)}attributeChangedCallback(e,t,i,s){t!==i&&this._attributeToProperty(e,i),super.attributeChangedCallback&&super.attributeChangedCallback(e,t,i,s)}_attributeToProperty(e,t,i){if(!this.__serializing){const s=this.__dataAttributes,r=s&&s[e]||e;this[r]=this._deserializeValue(t,i||this.constructor.typeForProperty(r))}}_propertyToAttribute(e,t,i){this.__serializing=!0,i=arguments.length<3?this[e]:i,this._valueToNodeAttribute(this,i,t||this.constructor.attributeNameForProperty(e)),this.__serializing=!1}_valueToNodeAttribute(e,t,i){const s=this._serializeValue(t);"class"!==i&&"name"!==i&&"slot"!==i||(e=_e(e)),void 0===s?e.removeAttribute(i):e.setAttribute(i,s)}_serializeValue(e){switch(typeof e){case"boolean":return e?"":void 0;default:return null!=e?e.toString():void 0}}_deserializeValue(e,t){switch(t){case Boolean:return null!==e;case Number:return Number(e);default:return e}}}),Be={};let Ve=HTMLElement.prototype;for(;Ve;){let e=Object.getOwnPropertyNames(Ve);for(let t=0;t<e.length;t++)Be[e[t]]=!0;Ve=Object.getPrototypeOf(Ve)}const $e=pe(e=>{const t=He(e);return class extends t{static createPropertiesForAttributes(){let e=this.observedAttributes;for(let t=0;t<e.length;t++)this.prototype._createPropertyAccessor(Ee(e[t]))}static attributeNameForProperty(e){return Te(e)}_initializeProperties(){this.__dataProto&&(this._initializeProtoProperties(this.__dataProto),this.__dataProto=null),super._initializeProperties()}_initializeProtoProperties(e){for(let t in e)this._setProperty(t,e[t])}_ensureAttribute(e,t){const i=this;i.hasAttribute(e)||this._valueToNodeAttribute(i,t,e)}_serializeValue(e){switch(typeof e){case"object":if(e instanceof Date)return e.toString();if(e)try{return JSON.stringify(e)}catch(e){return""}default:return super._serializeValue(e)}}_deserializeValue(e,t){let i;switch(t){case Object:try{i=JSON.parse(e)}catch(t){i=e}break;case Array:try{i=JSON.parse(e)}catch(t){i=null,console.warn("Polymer::Attributes: couldn't decode Array as JSON: "+e)}break;case Date:i=isNaN(e)?String(e):Number(e),i=new Date(i);break;default:i=super._deserializeValue(e,t)}return i}_definePropertyAccessor(e,t){!function(e,t){if(!Be[t]){let i=e[t];void 0!==i&&(e.__data?e._setPendingProperty(t,i):(e.__dataProto?e.hasOwnProperty(JSCompiler_renameProperty("__dataProto",e))||(e.__dataProto=Object.create(e.__dataProto)):e.__dataProto={},e.__dataProto[t]=i))}}(this,e),super._definePropertyAccessor(e,t)}_hasAccessor(e){return this.__dataHasAccessor&&this.__dataHasAccessor[e]}_isPropertyPending(e){return Boolean(this.__dataPending&&e in this.__dataPending)}}}),je={"dom-if":!0,"dom-repeat":!0};
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/let qe=!1,We=!1;function Ge(e){(function(){if(!qe){qe=!0;const e=document.createElement("textarea");e.placeholder="a",We=e.placeholder===e.textContent}return We})()&&"textarea"===e.localName&&e.placeholder&&e.placeholder===e.textContent&&(e.textContent=null)}function Ue(e){let t=e.getAttribute("is");if(t&&je[t]){let i=e;for(i.removeAttribute("is"),e=i.ownerDocument.createElement(t),i.parentNode.replaceChild(e,i),e.appendChild(i);i.attributes.length;)e.setAttribute(i.attributes[0].name,i.attributes[0].value),i.removeAttribute(i.attributes[0].name)}return e}function Ye(e,t){let i=t.parentInfo&&Ye(e,t.parentInfo);if(!i)return e;for(let e=i.firstChild,s=0;e;e=e.nextSibling)if(t.parentIndex===s++)return e}function Je(e,t,i,s){s.id&&(t[s.id]=i)}function Xe(e,t,i){if(i.events&&i.events.length)for(let s,r=0,n=i.events;r<n.length&&(s=n[r]);r++)e._addMethodEventListenerToNode(t,s.name,s.value,e)}function Ke(e,t,i){i.templateInfo&&(t._templateInfo=i.templateInfo)}const Ze=pe(e=>class extends e{static _parseTemplate(e,t){if(!e._templateInfo){let i=e._templateInfo={};i.nodeInfoList=[],i.stripWhiteSpace=t&&t.stripWhiteSpace||e.hasAttribute("strip-whitespace"),this._parseTemplateContent(e,i,{parent:null})}return e._templateInfo}static _parseTemplateContent(e,t,i){return this._parseTemplateNode(e.content,t,i)}static _parseTemplateNode(e,t,i){let s=!1,r=e;return"template"!=r.localName||r.hasAttribute("preserve-content")?"slot"===r.localName&&(t.hasInsertionPoint=!0):s=this._parseTemplateNestedTemplate(r,t,i)||s,Ge(r),r.firstChild&&this._parseTemplateChildNodes(r,t,i),r.hasAttributes&&r.hasAttributes()&&(s=this._parseTemplateNodeAttributes(r,t,i)||s),s}static _parseTemplateChildNodes(e,t,i){if("script"!==e.localName&&"style"!==e.localName)for(let s,r=e.firstChild,n=0;r;r=s){if("template"==r.localName&&(r=Ue(r)),s=r.nextSibling,r.nodeType===Node.TEXT_NODE){let i=s;for(;i&&i.nodeType===Node.TEXT_NODE;)r.textContent+=i.textContent,s=i.nextSibling,e.removeChild(i),i=s;if(t.stripWhiteSpace&&!r.textContent.trim()){e.removeChild(r);continue}}let o={parentIndex:n,parentInfo:i};this._parseTemplateNode(r,t,o)&&(o.infoIndex=t.nodeInfoList.push(o)-1),r.parentNode&&n++}}static _parseTemplateNestedTemplate(e,t,i){let s=e,r=this._parseTemplate(s,t);return(r.content=s.content.ownerDocument.createDocumentFragment()).appendChild(s.content),i.templateInfo=r,!0}static _parseTemplateNodeAttributes(e,t,i){let s=!1,r=Array.from(e.attributes);for(let n,o=r.length-1;n=r[o];o--)s=this._parseTemplateNodeAttribute(e,t,i,n.name,n.value)||s;return s}static _parseTemplateNodeAttribute(e,t,i,s,r){return"on-"===s.slice(0,3)?(e.removeAttribute(s),i.events=i.events||[],i.events.push({name:s.slice(3),value:r}),!0):"id"===s&&(i.id=r,!0)}static _contentForTemplate(e){let t=e._templateInfo;return t&&t.content||e.content}_stampTemplate(e){e&&!e.content&&window.HTMLTemplateElement&&HTMLTemplateElement.decorate&&HTMLTemplateElement.decorate(e);let t=this.constructor._parseTemplate(e),i=t.nodeInfoList,s=t.content||e.content,r=document.importNode(s,!0);r.__noInsertionPoint=!t.hasInsertionPoint;let n=r.nodeList=new Array(i.length);r.$={};for(let e,t=0,s=i.length;t<s&&(e=i[t]);t++){let i=n[t]=Ye(r,e);Je(0,r.$,i,e),Ke(0,i,e),Xe(this,i,e)}return r=r,r}_addMethodEventListenerToNode(e,t,i,s){let r=function(e,t,i){return e=e._methodHost||e,function(t){e[i]?e[i](t,t.detail):console.warn("listener method `"+i+"` not defined")}}(s=s||e,0,i);return this._addEventListenerToNode(e,t,r),r}_addEventListenerToNode(e,t,i){e.addEventListener(t,i)}_removeEventListenerFromNode(e,t,i){e.removeEventListener(t,i)}});
/**
 * @fileoverview
 * @suppress {checkPrototypalTypes}
 * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt The complete set of authors may be found
 * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may
 * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by
 * Google as part of the polymer project is also subject to an additional IP
 * rights grant found at http://polymer.github.io/PATENTS.txt
 */let Qe=0;const et={COMPUTE:"__computeEffects",REFLECT:"__reflectEffects",NOTIFY:"__notifyEffects",PROPAGATE:"__propagateEffects",OBSERVE:"__observeEffects",READ_ONLY:"__readOnly"},tt=/[A-Z]/;function it(e,t){let i=e[t];if(i){if(!e.hasOwnProperty(t)){i=e[t]=Object.create(e[t]);for(let e in i){let t=i[e],s=i[e]=Array(t.length);for(let e=0;e<t.length;e++)s[e]=t[e]}}}else i=e[t]={};return i}function st(e,t,i,s,r,n){if(t){let o=!1,a=Qe++;for(let l in i)rt(e,t,a,l,i,s,r,n)&&(o=!0);return o}return!1}function rt(e,t,i,s,r,n,o,a){let l=!1,h=t[o?fe(s):s];if(h)for(let t,d=0,c=h.length;d<c&&(t=h[d]);d++)t.info&&t.info.lastRun===i||o&&!nt(s,t.trigger)||(t.info&&(t.info.lastRun=i),t.fn(e,s,r,n,t.info,o,a),l=!0);return l}function nt(e,t){if(t){let i=t.name;return i==e||!(!t.structured||!ge(i,e))||!(!t.wildcard||!ye(i,e))}return!0}function ot(e,t,i,s,r){let n="string"==typeof r.method?e[r.method]:r.method,o=r.property;n?n.call(e,e.__data[o],s[o]):r.dynamicFn||console.warn("observer method `"+r.method+"` not defined")}function at(e,t,i){let s=fe(t);if(s!==t){return lt(e,Te(s)+"-changed",i[t],t),!0}return!1}function lt(e,t,i,s){let r={value:i,queueProperty:!0};s&&(r.path=s),_e(e).dispatchEvent(new CustomEvent(t,{detail:r}))}function ht(e,t,i,s,r,n){let o=(n?fe(t):t)!=t?t:null,a=o?Ce(e,o):e.__data[t];o&&void 0===a&&(a=i[t]),lt(e,r.eventName,a,o)}function dt(e,t,i,s,r){let n=e.__data[t];N&&(n=N(n,r.attrName,"attribute",e)),e._propertyToAttribute(t,r.attrName,n)}function ct(e,t,i,s,r){let n=yt(e,t,i,s,r),o=r.methodInfo;e.__dataHasAccessor&&e.__dataHasAccessor[o]?e._setPendingProperty(o,n,!0):e[o]=n}function ut(e,t,i,s,r,n,o){i.bindings=i.bindings||[];let a={kind:s,target:r,parts:n,literal:o,isCompound:1!==n.length};if(i.bindings.push(a),function(e){return Boolean(e.target)&&"attribute"!=e.kind&&"text"!=e.kind&&!e.isCompound&&"{"===e.parts[0].mode}(a)){let{event:e,negate:t}=a.parts[0];a.listenerEvent=e||Te(r)+"-changed",a.listenerNegate=t}let l=t.nodeInfoList.length;for(let i=0;i<a.parts.length;i++){let s=a.parts[i];s.compoundIndex=i,pt(e,t,a,s,l)}}function pt(e,t,i,s,r){if(!s.literal)if("attribute"===i.kind&&"-"===i.target[0])console.warn("Cannot set attribute "+i.target+' because "-" is not a valid attribute starting character');else{let n=s.dependencies,o={index:r,binding:i,part:s,evaluator:e};for(let i=0;i<n.length;i++){let s=n[i];"string"==typeof s&&(s=xt(s),s.wildcard=!0),e._addTemplatePropertyEffect(t,s.rootProperty,{fn:_t,info:o,trigger:s})}}}function _t(e,t,i,s,r,n,o){let a=o[r.index],l=r.binding,h=r.part;if(n&&h.source&&t.length>h.source.length&&"property"==l.kind&&!l.isCompound&&a.__isPropertyEffectsClient&&a.__dataHasAccessor&&a.__dataHasAccessor[l.target]){let s=i[t];t=be(h.source,l.target,t),a._setPendingPropertyOrPath(t,s,!1,!0)&&e._enqueueClient(a)}else{!function(e,t,i,s,r){r=function(e,t,i,s){if(i.isCompound){let r=e.__dataCompoundStorage[i.target];r[s.compoundIndex]=t,t=r.join("")}"attribute"!==i.kind&&("textContent"!==i.target&&("value"!==i.target||"input"!==e.localName&&"textarea"!==e.localName)||(t=null==t?"":t));return t}(t,r,i,s),N&&(r=N(r,i.target,i.kind,t));if("attribute"==i.kind)e._valueToNodeAttribute(t,r,i.target);else{let s=i.target;t.__isPropertyEffectsClient&&t.__dataHasAccessor&&t.__dataHasAccessor[s]?t[et.READ_ONLY]&&t[et.READ_ONLY][s]||t._setPendingProperty(s,r)&&e._enqueueClient(t):e._setUnmanagedPropertyToNode(t,s,r)}}(e,a,l,h,r.evaluator._evaluateBinding(e,h,t,i,s,n))}}function mt(e,t){if(t.isCompound){let i=e.__dataCompoundStorage||(e.__dataCompoundStorage={}),s=t.parts,r=new Array(s.length);for(let e=0;e<s.length;e++)r[e]=s[e].literal;let n=t.target;i[n]=r,t.literal&&"property"==t.kind&&("className"===n&&(e=_e(e)),e[n]=t.literal)}}function ft(e,t,i){if(i.listenerEvent){let s=i.parts[0];e.addEventListener(i.listenerEvent,(function(e){!function(e,t,i,s,r){let n,o=e.detail,a=o&&o.path;a?(s=be(i,s,a),n=o&&o.value):n=e.currentTarget[i],n=r?!n:n,t[et.READ_ONLY]&&t[et.READ_ONLY][s]||!t._setPendingPropertyOrPath(s,n,!0,Boolean(a))||o&&o.queueProperty||t._invalidateProperties()}(e,t,i.target,s.source,s.negate)}))}}function gt(e,t,i,s,r,n){n=t.static||n&&("object"!=typeof n||n[t.methodName]);let o={methodName:t.methodName,args:t.args,methodInfo:r,dynamicFn:n};for(let r,n=0;n<t.args.length&&(r=t.args[n]);n++)r.literal||e._addPropertyEffect(r.rootProperty,i,{fn:s,info:o,trigger:r});n&&e._addPropertyEffect(t.methodName,i,{fn:s,info:o})}function yt(e,t,i,s,r){let n=e._methodHost||e,o=n[r.methodName];if(o){let s=e._marshalArgs(r.args,t,i);return o.apply(n,s)}r.dynamicFn||console.warn("method `"+r.methodName+"` not defined")}const bt=[],vt=new RegExp("(\\[\\[|{{)\\s*(?:(!)\\s*)?((?:[a-zA-Z_$][\\w.:$\\-*]*)\\s*(?:\\(\\s*(?:(?:(?:((?:[a-zA-Z_$][\\w.:$\\-*]*)|(?:[-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)|(?:(?:'(?:[^'\\\\]|\\\\.)*')|(?:\"(?:[^\"\\\\]|\\\\.)*\")))\\s*)(?:,\\s*(?:((?:[a-zA-Z_$][\\w.:$\\-*]*)|(?:[-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)|(?:(?:'(?:[^'\\\\]|\\\\.)*')|(?:\"(?:[^\"\\\\]|\\\\.)*\")))\\s*))*)?)\\)\\s*)?)(?:]]|}})","g");function wt(e){let t="";for(let i=0;i<e.length;i++){t+=e[i].literal||""}return t}function Ct(e){let t=e.match(/([^\s]+?)\(([\s\S]*)\)/);if(t){let e={methodName:t[1],static:!0,args:bt};if(t[2].trim()){return function(e,t){return t.args=e.map((function(e){let i=xt(e);return i.literal||(t.static=!1),i}),this),t}(t[2].replace(/\\,/g,"&comma;").split(","),e)}return e}return null}function xt(e){let t=e.trim().replace(/&comma;/g,",").replace(/\\(.)/g,"$1"),i={name:t,value:"",literal:!1},s=t[0];switch("-"===s&&(s=t[1]),s>="0"&&s<="9"&&(s="#"),s){case"'":case'"':i.value=t.slice(1,-1),i.literal=!0;break;case"#":i.value=Number(t),i.literal=!0}return i.literal||(i.rootProperty=fe(t),i.structured=me(t),i.structured&&(i.wildcard=".*"==t.slice(-2),i.wildcard&&(i.name=t.slice(0,-2)))),i}function St(e,t,i){let s=Ce(e,i);return void 0===s&&(s=t[i]),s}function At(e,t,i,s){e.notifyPath(i+".splices",{indexSplices:s}),e.notifyPath(i+".length",t.length)}function Pt(e,t,i,s,r,n){At(e,t,i,[{index:s,addedCount:r,removed:n,object:t,type:"splice"}])}const Et=pe(e=>{const t=Ze($e(e));return class extends t{constructor(){super(),this.__isPropertyEffectsClient=!0,this.__dataCounter=0,this.__dataClientsReady,this.__dataPendingClients,this.__dataToNotify,this.__dataLinkedPaths,this.__dataHasPaths,this.__dataCompoundStorage,this.__dataHost,this.__dataTemp,this.__dataClientsInitialized,this.__data,this.__dataPending,this.__dataOld,this.__computeEffects,this.__reflectEffects,this.__notifyEffects,this.__propagateEffects,this.__observeEffects,this.__readOnly,this.__templateInfo}get PROPERTY_EFFECT_TYPES(){return et}_initializeProperties(){super._initializeProperties(),Tt.registerHost(this),this.__dataClientsReady=!1,this.__dataPendingClients=null,this.__dataToNotify=null,this.__dataLinkedPaths=null,this.__dataHasPaths=!1,this.__dataCompoundStorage=this.__dataCompoundStorage||null,this.__dataHost=this.__dataHost||null,this.__dataTemp={},this.__dataClientsInitialized=!1}_initializeProtoProperties(e){this.__data=Object.create(e),this.__dataPending=Object.create(e),this.__dataOld={}}_initializeInstanceProperties(e){let t=this[et.READ_ONLY];for(let i in e)t&&t[i]||(this.__dataPending=this.__dataPending||{},this.__dataOld=this.__dataOld||{},this.__data[i]=this.__dataPending[i]=e[i])}_addPropertyEffect(e,t,i){this._createPropertyAccessor(e,t==et.READ_ONLY);let s=it(this,t)[e];s||(s=this[t][e]=[]),s.push(i)}_removePropertyEffect(e,t,i){let s=it(this,t)[e],r=s.indexOf(i);r>=0&&s.splice(r,1)}_hasPropertyEffect(e,t){let i=this[t];return Boolean(i&&i[e])}_hasReadOnlyEffect(e){return this._hasPropertyEffect(e,et.READ_ONLY)}_hasNotifyEffect(e){return this._hasPropertyEffect(e,et.NOTIFY)}_hasReflectEffect(e){return this._hasPropertyEffect(e,et.REFLECT)}_hasComputedEffect(e){return this._hasPropertyEffect(e,et.COMPUTE)}_setPendingPropertyOrPath(e,t,i,s){if(s||fe(Array.isArray(e)?e[0]:e)!==e){if(!s){let i=Ce(this,e);if(!(e=xe(this,e,t))||!super._shouldPropertyChange(e,t,i))return!1}if(this.__dataHasPaths=!0,this._setPendingProperty(e,t,i))return function(e,t,i){let s=e.__dataLinkedPaths;if(s){let r;for(let n in s){let o=s[n];ye(n,t)?(r=be(n,o,t),e._setPendingPropertyOrPath(r,i,!0,!0)):ye(o,t)&&(r=be(o,n,t),e._setPendingPropertyOrPath(r,i,!0,!0))}}}(this,e,t),!0}else{if(this.__dataHasAccessor&&this.__dataHasAccessor[e])return this._setPendingProperty(e,t,i);this[e]=t}return!1}_setUnmanagedPropertyToNode(e,t,i){i===e[t]&&"object"!=typeof i||("className"===t&&(e=_e(e)),e[t]=i)}_setPendingProperty(e,t,i){let s=this.__dataHasPaths&&me(e),r=s?this.__dataTemp:this.__data;return!!this._shouldPropertyChange(e,t,r[e])&&(this.__dataPending||(this.__dataPending={},this.__dataOld={}),e in this.__dataOld||(this.__dataOld[e]=this.__data[e]),s?this.__dataTemp[e]=t:this.__data[e]=t,this.__dataPending[e]=t,(s||this[et.NOTIFY]&&this[et.NOTIFY][e])&&(this.__dataToNotify=this.__dataToNotify||{},this.__dataToNotify[e]=i),!0)}_setProperty(e,t){this._setPendingProperty(e,t,!0)&&this._invalidateProperties()}_invalidateProperties(){this.__dataReady&&this._flushProperties()}_enqueueClient(e){this.__dataPendingClients=this.__dataPendingClients||[],e!==this&&this.__dataPendingClients.push(e)}_flushProperties(){this.__dataCounter++,super._flushProperties(),this.__dataCounter--}_flushClients(){this.__dataClientsReady?this.__enableOrFlushClients():(this.__dataClientsReady=!0,this._readyClients(),this.__dataReady=!0)}__enableOrFlushClients(){let e=this.__dataPendingClients;if(e){this.__dataPendingClients=null;for(let t=0;t<e.length;t++){let i=e[t];i.__dataEnabled?i.__dataPending&&i._flushProperties():i._enableProperties()}}}_readyClients(){this.__enableOrFlushClients()}setProperties(e,t){for(let i in e)!t&&this[et.READ_ONLY]&&this[et.READ_ONLY][i]||this._setPendingPropertyOrPath(i,e[i],!0);this._invalidateProperties()}ready(){this._flushProperties(),this.__dataClientsReady||this._flushClients(),this.__dataPending&&this._flushProperties()}_propertiesChanged(e,t,i){let s=this.__dataHasPaths;this.__dataHasPaths=!1,function(e,t,i,s){let r=e[et.COMPUTE];if(r){let n=t;for(;st(e,r,n,i,s);)Object.assign(i,e.__dataOld),Object.assign(t,e.__dataPending),n=e.__dataPending,e.__dataPending=null}}(this,t,i,s);let r=this.__dataToNotify;this.__dataToNotify=null,this._propagatePropertyChanges(t,i,s),this._flushClients(),st(this,this[et.REFLECT],t,i,s),st(this,this[et.OBSERVE],t,i,s),r&&function(e,t,i,s,r){let n,o,a=e[et.NOTIFY],l=Qe++;for(let o in t)t[o]&&(a&&rt(e,a,l,o,i,s,r)||r&&at(e,o,i))&&(n=!0);n&&(o=e.__dataHost)&&o._invalidateProperties&&o._invalidateProperties()}(this,r,t,i,s),1==this.__dataCounter&&(this.__dataTemp={})}_propagatePropertyChanges(e,t,i){this[et.PROPAGATE]&&st(this,this[et.PROPAGATE],e,t,i);let s=this.__templateInfo;for(;s;)st(this,s.propertyEffects,e,t,i,s.nodeList),s=s.nextTemplateInfo}linkPaths(e,t){e=ve(e),t=ve(t),this.__dataLinkedPaths=this.__dataLinkedPaths||{},this.__dataLinkedPaths[e]=t}unlinkPaths(e){e=ve(e),this.__dataLinkedPaths&&delete this.__dataLinkedPaths[e]}notifySplices(e,t){let i={path:""};At(this,Ce(this,e,i),i.path,t)}get(e,t){return Ce(t||this,e)}set(e,t,i){i?xe(i,e,t):this[et.READ_ONLY]&&this[et.READ_ONLY][e]||this._setPendingPropertyOrPath(e,t,!0)&&this._invalidateProperties()}push(e,...t){let i={path:""},s=Ce(this,e,i),r=s.length,n=s.push(...t);return t.length&&Pt(this,s,i.path,r,t.length,[]),n}pop(e){let t={path:""},i=Ce(this,e,t),s=Boolean(i.length),r=i.pop();return s&&Pt(this,i,t.path,i.length,0,[r]),r}splice(e,t,i,...s){let r,n={path:""},o=Ce(this,e,n);return t<0?t=o.length-Math.floor(-t):t&&(t=Math.floor(t)),r=2===arguments.length?o.splice(t):o.splice(t,i,...s),(s.length||r.length)&&Pt(this,o,n.path,t,s.length,r),r}shift(e){let t={path:""},i=Ce(this,e,t),s=Boolean(i.length),r=i.shift();return s&&Pt(this,i,t.path,0,0,[r]),r}unshift(e,...t){let i={path:""},s=Ce(this,e,i),r=s.unshift(...t);return t.length&&Pt(this,s,i.path,0,t.length,[]),r}notifyPath(e,t){let i;if(1==arguments.length){let s={path:""};t=Ce(this,e,s),i=s.path}else i=Array.isArray(e)?ve(e):e;this._setPendingPropertyOrPath(i,t,!0,!0)&&this._invalidateProperties()}_createReadOnlyProperty(e,t){var i;this._addPropertyEffect(e,et.READ_ONLY),t&&(this["_set"+(i=e,i[0].toUpperCase()+i.substring(1))]=function(t){this._setProperty(e,t)})}_createPropertyObserver(e,t,i){let s={property:e,method:t,dynamicFn:Boolean(i)};this._addPropertyEffect(e,et.OBSERVE,{fn:ot,info:s,trigger:{name:e}}),i&&this._addPropertyEffect(t,et.OBSERVE,{fn:ot,info:s,trigger:{name:t}})}_createMethodObserver(e,t){let i=Ct(e);if(!i)throw new Error("Malformed observer expression '"+e+"'");gt(this,i,et.OBSERVE,yt,null,t)}_createNotifyingProperty(e){this._addPropertyEffect(e,et.NOTIFY,{fn:ht,info:{eventName:Te(e)+"-changed",property:e}})}_createReflectedProperty(e){let t=this.constructor.attributeNameForProperty(e);"-"===t[0]?console.warn("Property "+e+" cannot be reflected to attribute "+t+' because "-" is not a valid starting attribute name. Use a lowercase first letter for the property instead.'):this._addPropertyEffect(e,et.REFLECT,{fn:dt,info:{attrName:t}})}_createComputedProperty(e,t,i){let s=Ct(t);if(!s)throw new Error("Malformed computed expression '"+t+"'");gt(this,s,et.COMPUTE,ct,e,i)}_marshalArgs(e,t,i){const s=this.__data,r=[];for(let n=0,o=e.length;n<o;n++){let{name:o,structured:a,wildcard:l,value:h,literal:d}=e[n];if(!d)if(l){const e=ye(o,t),r=St(s,i,e?t:o);h={path:e?t:o,value:r,base:e?Ce(s,o):r}}else h=a?St(s,i,o):s[o];r[n]=h}return r}static addPropertyEffect(e,t,i){this.prototype._addPropertyEffect(e,t,i)}static createPropertyObserver(e,t,i){this.prototype._createPropertyObserver(e,t,i)}static createMethodObserver(e,t){this.prototype._createMethodObserver(e,t)}static createNotifyingProperty(e){this.prototype._createNotifyingProperty(e)}static createReadOnlyProperty(e,t){this.prototype._createReadOnlyProperty(e,t)}static createReflectedProperty(e){this.prototype._createReflectedProperty(e)}static createComputedProperty(e,t,i){this.prototype._createComputedProperty(e,t,i)}static bindTemplate(e){return this.prototype._bindTemplate(e)}_bindTemplate(e,t){let i=this.constructor._parseTemplate(e),s=this.__templateInfo==i;if(!s)for(let e in i.propertyEffects)this._createPropertyAccessor(e);if(t&&(i=Object.create(i),i.wasPreBound=s,!s&&this.__templateInfo)){let e=this.__templateInfoLast||this.__templateInfo;return this.__templateInfoLast=e.nextTemplateInfo=i,i.previousTemplateInfo=e,i}return this.__templateInfo=i}static _addTemplatePropertyEffect(e,t,i){(e.hostProps=e.hostProps||{})[t]=!0;let s=e.propertyEffects=e.propertyEffects||{};(s[t]=s[t]||[]).push(i)}_stampTemplate(e){Tt.beginHosting(this);let t=super._stampTemplate(e);Tt.endHosting(this);let i=this._bindTemplate(e,!0);if(i.nodeList=t.nodeList,!i.wasPreBound){let e=i.childNodes=[];for(let i=t.firstChild;i;i=i.nextSibling)e.push(i)}return t.templateInfo=i,function(e,t){let{nodeList:i,nodeInfoList:s}=t;if(s.length)for(let t=0;t<s.length;t++){let r=s[t],n=i[t],o=r.bindings;if(o)for(let t=0;t<o.length;t++){let i=o[t];mt(n,i),ft(n,e,i)}n.__dataHost=e}}(this,i),this.__dataReady&&st(this,i.propertyEffects,this.__data,null,!1,i.nodeList),t}_removeBoundDom(e){let t=e.templateInfo;t.previousTemplateInfo&&(t.previousTemplateInfo.nextTemplateInfo=t.nextTemplateInfo),t.nextTemplateInfo&&(t.nextTemplateInfo.previousTemplateInfo=t.previousTemplateInfo),this.__templateInfoLast==t&&(this.__templateInfoLast=t.previousTemplateInfo),t.previousTemplateInfo=t.nextTemplateInfo=null;let i=t.childNodes;for(let e=0;e<i.length;e++){let t=i[e];t.parentNode.removeChild(t)}}static _parseTemplateNode(e,i,s){let r=t._parseTemplateNode.call(this,e,i,s);if(e.nodeType===Node.TEXT_NODE){let t=this._parseBindings(e.textContent,i);t&&(e.textContent=wt(t)||" ",ut(this,i,s,"text","textContent",t),r=!0)}return r}static _parseTemplateNodeAttribute(e,i,s,r,n){let o=this._parseBindings(n,i);if(o){let t=r,n="property";tt.test(r)?n="attribute":"$"==r[r.length-1]&&(r=r.slice(0,-1),n="attribute");let a=wt(o);return a&&"attribute"==n&&("class"==r&&e.hasAttribute("class")&&(a+=" "+e.getAttribute(r)),e.setAttribute(r,a)),"input"===e.localName&&"value"===t&&e.setAttribute(t,""),e.removeAttribute(t),"property"===n&&(r=Ee(r)),ut(this,i,s,n,r,o,a),!0}return t._parseTemplateNodeAttribute.call(this,e,i,s,r,n)}static _parseTemplateNestedTemplate(e,i,s){let r=t._parseTemplateNestedTemplate.call(this,e,i,s),n=s.templateInfo.hostProps;for(let e in n){ut(this,i,s,"property","_host_"+e,[{mode:"{",source:e,dependencies:[e]}])}return r}static _parseBindings(e,t){let i,s=[],r=0;for(;null!==(i=vt.exec(e));){i.index>r&&s.push({literal:e.slice(r,i.index)});let n=i[1][0],o=Boolean(i[2]),a=i[3].trim(),l=!1,h="",d=-1;"{"==n&&(d=a.indexOf("::"))>0&&(h=a.substring(d+2),a=a.substring(0,d),l=!0);let c=Ct(a),u=[];if(c){let{args:e,methodName:i}=c;for(let t=0;t<e.length;t++){let i=e[t];i.literal||u.push(i)}let s=t.dynamicFns;(s&&s[i]||c.static)&&(u.push(i),c.dynamicFn=!0)}else u.push(a);s.push({source:a,mode:n,negate:o,customEvent:l,signature:c,dependencies:u,event:h}),r=vt.lastIndex}if(r&&r<e.length){let t=e.substring(r);t&&s.push({literal:t})}return s.length?s:null}static _evaluateBinding(e,t,i,s,r,n){let o;return o=t.signature?yt(e,i,s,0,t.signature):i!=t.source?Ce(e,t.source):n&&me(i)?Ce(e,i):e.__data[i],t.negate&&(o=!o),o}}});const Tt=new class{constructor(){this.stack=[]}registerHost(e){if(this.stack.length){this.stack[this.stack.length-1]._enqueueClient(e)}}beginHosting(e){this.stack.push(e)}endHosting(e){let t=this.stack.length;t&&this.stack[t-1]==e&&this.stack.pop()}};
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/const It=[];const Ot=pe(e=>{const t=He(e);function i(e){const t=Object.getPrototypeOf(e);return t.prototype instanceof r?t:null}function s(e){if(!e.hasOwnProperty(JSCompiler_renameProperty("__ownProperties",e))){let t=null;if(e.hasOwnProperty(JSCompiler_renameProperty("properties",e))){const i=e.properties;i&&(t=
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
function(e){const t={};for(let i in e){const s=e[i];t[i]="function"==typeof s?{type:s}:s}return t}(i))}e.__ownProperties=t}return e.__ownProperties}class r extends t{static get observedAttributes(){if(!this.hasOwnProperty(JSCompiler_renameProperty("__observedAttributes",this))){e=this.prototype,It.push(e);const t=this._properties;this.__observedAttributes=t?Object.keys(t).map(e=>this.attributeNameForProperty(e)):[]}var e;return this.__observedAttributes}static finalize(){if(!this.hasOwnProperty(JSCompiler_renameProperty("__finalized",this))){const e=i(this);e&&e.finalize(),this.__finalized=!0,this._finalizeClass()}}static _finalizeClass(){const e=s(this);e&&this.createProperties(e)}static get _properties(){if(!this.hasOwnProperty(JSCompiler_renameProperty("__properties",this))){const e=i(this);this.__properties=Object.assign({},e&&e._properties,s(this))}return this.__properties}static typeForProperty(e){const t=this._properties[e];return t&&t.type}_initializeProperties(){this.constructor.finalize(),super._initializeProperties()}connectedCallback(){super.connectedCallback&&super.connectedCallback(),this._enableProperties()}disconnectedCallback(){super.disconnectedCallback&&super.disconnectedCallback()}}return r}),zt=window.ShadyCSS&&window.ShadyCSS.cssBuild,Rt=pe(e=>{const t=Ot(Et(e));function i(e,t,i,s){if(!zt){const r=t.content.querySelectorAll("style"),n=J(t),o=function(e){let t=W(e);return t?X(t):[]}(i),a=t.content.firstElementChild;for(let i=0;i<o.length;i++){let r=o[i];r.textContent=e._processStyleText(r.textContent,s),t.content.insertBefore(r,a)}let l=0;for(let t=0;t<n.length;t++){let i=n[t],o=r[l];o!==i?(i=i.cloneNode(!0),o.parentNode.insertBefore(i,o)):l++,i.textContent=e._processStyleText(i.textContent,s)}}window.ShadyCSS&&window.ShadyCSS.prepareTemplate(t,i)}return class extends t{static get polymerElementVersion(){return"3.3.1"}static _finalizeClass(){t._finalizeClass.call(this);const e=((i=this).hasOwnProperty(JSCompiler_renameProperty("__ownObservers",i))||(i.__ownObservers=i.hasOwnProperty(JSCompiler_renameProperty("observers",i))?i.observers:null),i.__ownObservers);var i;e&&this.createObservers(e,this._properties),this._prepareTemplate()}static _prepareTemplate(){let e=this.template;e&&("string"==typeof e?(console.error("template getter must return HTMLTemplateElement"),e=null):M||(e=e.cloneNode(!0))),this.prototype._template=e}static createProperties(e){for(let n in e)t=this.prototype,i=n,s=e[n],r=e,s.computed&&(s.readOnly=!0),s.computed&&(t._hasReadOnlyEffect(i)?console.warn(`Cannot redefine computed property '${i}'.`):t._createComputedProperty(i,s.computed,r)),s.readOnly&&!t._hasReadOnlyEffect(i)?t._createReadOnlyProperty(i,!s.computed):!1===s.readOnly&&t._hasReadOnlyEffect(i)&&console.warn(`Cannot make readOnly property '${i}' non-readOnly.`),s.reflectToAttribute&&!t._hasReflectEffect(i)?t._createReflectedProperty(i):!1===s.reflectToAttribute&&t._hasReflectEffect(i)&&console.warn(`Cannot make reflected property '${i}' non-reflected.`),s.notify&&!t._hasNotifyEffect(i)?t._createNotifyingProperty(i):!1===s.notify&&t._hasNotifyEffect(i)&&console.warn(`Cannot make notify property '${i}' non-notify.`),s.observer&&t._createPropertyObserver(i,s.observer,r[s.observer]),t._addPropertyToAttributeMap(i);var t,i,s,r}static createObservers(e,t){const i=this.prototype;for(let s=0;s<e.length;s++)i._createMethodObserver(e[s],t)}static get template(){return this.hasOwnProperty(JSCompiler_renameProperty("_template",this))||(this._template=this.prototype.hasOwnProperty(JSCompiler_renameProperty("_template",this.prototype))?this.prototype._template:function(e){let t=null;if(e&&(!L||D)&&(t=q.import(e,"template"),L&&!t))throw new Error("strictTemplatePolicy: expecting dom-module or null template for "+e);return t}(this.is)||Object.getPrototypeOf(this.prototype).constructor.template),this._template}static set template(e){this._template=e}static get importPath(){if(!this.hasOwnProperty(JSCompiler_renameProperty("_importPath",this))){const e=this.importMeta;if(e)this._importPath=O(e.url);else{const e=q.import(this.is);this._importPath=e&&e.assetpath||Object.getPrototypeOf(this.prototype).constructor.importPath}}return this._importPath}constructor(){super(),this._template,this._importPath,this.rootPath,this.importPath,this.root,this.$}_initializeProperties(){this.constructor.finalize(),this.constructor._finalizeTemplate(this.localName),super._initializeProperties(),this.rootPath=R,this.importPath=this.constructor.importPath;let e=function(e){if(!e.hasOwnProperty(JSCompiler_renameProperty("__propertyDefaults",e))){e.__propertyDefaults=null;let t=e._properties;for(let i in t){let s=t[i];"value"in s&&(e.__propertyDefaults=e.__propertyDefaults||{},e.__propertyDefaults[i]=s)}}return e.__propertyDefaults}(this.constructor);if(e)for(let t in e){let i=e[t];if(!this.hasOwnProperty(t)){let e="function"==typeof i.value?i.value.call(this):i.value;this._hasAccessor(t)?this._setPendingProperty(t,e,!0):this[t]=e}}}static _processStyleText(e,t){return I(e,t)}static _finalizeTemplate(e){const t=this.prototype._template;if(t&&!t.__polymerFinalized){t.__polymerFinalized=!0;const s=this.importPath;i(this,t,e,s?T(s):""),this.prototype._bindTemplate(t)}}connectedCallback(){window.ShadyCSS&&this._template&&window.ShadyCSS.styleElement(this),super.connectedCallback()}ready(){this._template&&(this.root=this._stampTemplate(this._template),this.$=this.root.$),super.ready()}_readyClients(){this._template&&(this.root=this._attachDom(this.root)),super._readyClients()}_attachDom(e){const t=_e(this);if(t.attachShadow)return e?(t.shadowRoot||(t.attachShadow({mode:"open",shadyUpgradeFragment:e}),t.shadowRoot.appendChild(e)),F&&window.ShadyDOM&&window.ShadyDOM.flushInitial(t.shadowRoot),t.shadowRoot):null;throw new Error("ShadowDOM not available. PolymerElement can create dom as children instead of in ShadowDOM by setting `this.root = this;` before `ready`.")}updateStyles(e){window.ShadyCSS&&window.ShadyCSS.styleSubtree(this,e)}resolveUrl(e,t){return!t&&this.importPath&&(t=T(this.importPath)),T(e,t)}static _parseTemplateContent(e,i,s){return i.dynamicFns=i.dynamicFns||this._properties,t._parseTemplateContent.call(this,e,i,s)}static _addTemplatePropertyEffect(e,i,s){return M&&!(i in this._properties)&&console.warn(`Property '${i}' used in template but not declared in 'properties'; attribute will not be observed.`),t._addTemplatePropertyEffect.call(this,e,i,s)}}}),Nt=Rt(HTMLElement);
/**
 * @fileoverview
 * @suppress {checkPrototypalTypes}
 * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt The complete set of authors may be found
 * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may
 * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by
 * Google as part of the polymer project is also subject to an additional IP
 * rights grant found at http://polymer.github.io/PATENTS.txt
 */
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
class kt{constructor(){this._asyncModule=null,this._callback=null,this._timer=null}setConfig(e,t){this._asyncModule=e,this._callback=t,this._timer=this._asyncModule.run(()=>{this._timer=null,Lt.delete(this),this._callback()})}cancel(){this.isActive()&&(this._cancelAsync(),Lt.delete(this))}_cancelAsync(){this.isActive()&&(this._asyncModule.cancel(this._timer),this._timer=null)}flush(){this.isActive()&&(this.cancel(),this._callback())}isActive(){return null!=this._timer}static debounce(e,t,i){return e instanceof kt?e._cancelAsync():e=new kt,e.setConfig(t,i),e}}let Lt=new Set;const Dt=function(e){Lt.add(e)},Mt=function(){const e=Boolean(Lt.size);return Lt.forEach(e=>{try{e.flush()}catch(e){setTimeout(()=>{throw e})}}),e};
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let Ft="string"==typeof document.head.style.touchAction,Ht="__polymerGesturesHandled",Bt="__polymerGesturesTouchAction",Vt=["mousedown","mousemove","mouseup","click"],$t=[0,1,4,2],jt=function(){try{return 1===new MouseEvent("test",{buttons:1}).buttons}catch(e){return!1}}();function qt(e){return Vt.indexOf(e)>-1}let Wt=!1;function Gt(e){if(!qt(e)&&"touchend"!==e)return Ft&&Wt&&k?{passive:!0}:void 0}!function(){try{let e=Object.defineProperty({},"passive",{get(){Wt=!0}});window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(e){}}();let Ut=navigator.userAgent.match(/iP(?:[oa]d|hone)|Android/);const Yt=[],Jt={button:!0,input:!0,keygen:!0,meter:!0,output:!0,textarea:!0,progress:!0,select:!0},Xt={button:!0,command:!0,fieldset:!0,input:!0,keygen:!0,optgroup:!0,option:!0,select:!0,textarea:!0};function Kt(e){let t=Array.prototype.slice.call(e.labels||[]);if(!t.length){t=[];let i=e.getRootNode();if(e.id){let s=i.querySelectorAll(`label[for = ${e.id}]`);for(let e=0;e<s.length;e++)t.push(s[e])}}return t}let Zt=function(e){let t=e.sourceCapabilities;var i;if((!t||t.firesTouchEvents)&&(e[Ht]={skip:!0},"click"===e.type)){let t=!1,s=ri(e);for(let e=0;e<s.length;e++){if(s[e].nodeType===Node.ELEMENT_NODE)if("label"===s[e].localName)Yt.push(s[e]);else if(i=s[e],Jt[i.localName]){let i=Kt(s[e]);for(let e=0;e<i.length;e++)t=t||Yt.indexOf(i[e])>-1}if(s[e]===ti.mouse.target)return}if(t)return;e.preventDefault(),e.stopPropagation()}};function Qt(e){let t=Ut?["click"]:Vt;for(let i,s=0;s<t.length;s++)i=t[s],e?(Yt.length=0,document.addEventListener(i,Zt,!0)):document.removeEventListener(i,Zt,!0)}function ei(e){let t=e.type;if(!qt(t))return!1;if("mousemove"===t){let t=void 0===e.buttons?1:e.buttons;return e instanceof window.MouseEvent&&!jt&&(t=$t[e.which]||0),Boolean(1&t)}return 0===(void 0===e.button?0:e.button)}let ti={mouse:{target:null,mouseIgnoreJob:null},touch:{x:0,y:0,id:-1,scrollDecided:!1}};function ii(e,t,i){e.movefn=t,e.upfn=i,document.addEventListener("mousemove",t),document.addEventListener("mouseup",i)}function si(e){document.removeEventListener("mousemove",e.movefn),document.removeEventListener("mouseup",e.upfn),e.movefn=null,e.upfn=null}H&&document.addEventListener("touchend",(function(e){if(!H)return;ti.mouse.mouseIgnoreJob||Qt(!0),ti.mouse.target=ri(e)[0],ti.mouse.mouseIgnoreJob=kt.debounce(ti.mouse.mouseIgnoreJob,ke.after(2500),(function(){Qt(),ti.mouse.target=null,ti.mouse.mouseIgnoreJob=null}))}),!!Wt&&{passive:!0});const ri=window.ShadyDOM&&window.ShadyDOM.noPatch?window.ShadyDOM.composedPath:e=>e.composedPath&&e.composedPath()||[],ni={},oi=[];function ai(e){const t=ri(e);return t.length>0?t[0]:e.target}function li(e){let t,i=e.type,s=e.currentTarget.__polymerGestures;if(!s)return;let r=s[i];if(r){if(!e[Ht]&&(e[Ht]={},"touch"===i.slice(0,5))){let t=(e=e).changedTouches[0];if("touchstart"===i&&1===e.touches.length&&(ti.touch.id=t.identifier),ti.touch.id!==t.identifier)return;Ft||"touchstart"!==i&&"touchmove"!==i||function(e){let t=e.changedTouches[0],i=e.type;if("touchstart"===i)ti.touch.x=t.clientX,ti.touch.y=t.clientY,ti.touch.scrollDecided=!1;else if("touchmove"===i){if(ti.touch.scrollDecided)return;ti.touch.scrollDecided=!0;let i=function(e){let t="auto",i=ri(e);for(let e,s=0;s<i.length;s++)if(e=i[s],e[Bt]){t=e[Bt];break}return t}(e),s=!1,r=Math.abs(ti.touch.x-t.clientX),n=Math.abs(ti.touch.y-t.clientY);e.cancelable&&("none"===i?s=!0:"pan-x"===i?s=n>r:"pan-y"===i&&(s=r>n)),s?e.preventDefault():_i("track")}}(e)}if(t=e[Ht],!t.skip){for(let i,s=0;s<oi.length;s++)i=oi[s],r[i.name]&&!t[i.name]&&i.flow&&i.flow.start.indexOf(e.type)>-1&&i.reset&&i.reset();for(let s,n=0;n<oi.length;n++)s=oi[n],r[s.name]&&!t[s.name]&&(t[s.name]=!0,s[i](e))}}}function hi(e,t,i){return!!ni[t]&&(function(e,t,i){let s=ni[t],r=s.deps,n=s.name,o=e.__polymerGestures;o||(e.__polymerGestures=o={});for(let t,i,s=0;s<r.length;s++)t=r[s],Ut&&qt(t)&&"click"!==t||(i=o[t],i||(o[t]=i={_count:0}),0===i._count&&e.addEventListener(t,li,Gt(t)),i[n]=(i[n]||0)+1,i._count=(i._count||0)+1);e.addEventListener(t,i),s.touchAction&&ui(e,s.touchAction)}(e,t,i),!0)}function di(e,t,i){return!!ni[t]&&(function(e,t,i){let s=ni[t],r=s.deps,n=s.name,o=e.__polymerGestures;if(o)for(let t,i,s=0;s<r.length;s++)t=r[s],i=o[t],i&&i[n]&&(i[n]=(i[n]||1)-1,i._count=(i._count||1)-1,0===i._count&&e.removeEventListener(t,li,Gt(t)));e.removeEventListener(t,i)}(e,t,i),!0)}function ci(e){oi.push(e);for(let t=0;t<e.emits.length;t++)ni[e.emits[t]]=e}function ui(e,t){Ft&&e instanceof HTMLElement&&Me.run(()=>{e.style.touchAction=t}),e[Bt]=t}function pi(e,t,i){let s=new Event(t,{bubbles:!0,cancelable:!0,composed:!0});if(s.detail=i,_e(e).dispatchEvent(s),s.defaultPrevented){let e=i.preventer||i.sourceEvent;e&&e.preventDefault&&e.preventDefault()}}function _i(e){let t=function(e){for(let t,i=0;i<oi.length;i++){t=oi[i];for(let i,s=0;s<t.emits.length;s++)if(i=t.emits[s],i===e)return t}return null}(e);t.info&&(t.info.prevent=!0)}function mi(e,t,i,s){t&&pi(t,e,{x:i.clientX,y:i.clientY,sourceEvent:i,preventer:s,prevent:function(e){return _i(e)}})}function fi(e,t,i){if(e.prevent)return!1;if(e.started)return!0;let s=Math.abs(e.x-t),r=Math.abs(e.y-i);return s>=5||r>=5}function gi(e,t,i){if(!t)return;let s,r=e.moves[e.moves.length-2],n=e.moves[e.moves.length-1],o=n.x-e.x,a=n.y-e.y,l=0;r&&(s=n.x-r.x,l=n.y-r.y),pi(t,"track",{state:e.state,x:i.clientX,y:i.clientY,dx:o,dy:a,ddx:s,ddy:l,sourceEvent:i,hover:function(){return function(e,t){let i=document.elementFromPoint(e,t),s=i;for(;s&&s.shadowRoot&&!window.ShadyDOM;){let r=s;if(s=s.shadowRoot.elementFromPoint(e,t),r===s)break;s&&(i=s)}return i}(i.clientX,i.clientY)}})}function yi(e,t,i){let s=Math.abs(t.clientX-e.x),r=Math.abs(t.clientY-e.y),n=ai(i||t);!n||Xt[n.localName]&&n.hasAttribute("disabled")||(isNaN(s)||isNaN(r)||s<=25&&r<=25||function(e){if("click"===e.type){if(0===e.detail)return!0;let t=ai(e);if(!t.nodeType||t.nodeType!==Node.ELEMENT_NODE)return!0;let i=t.getBoundingClientRect(),s=e.pageX,r=e.pageY;return!(s>=i.left&&s<=i.right&&r>=i.top&&r<=i.bottom)}return!1}(t))&&(e.prevent||pi(n,"tap",{x:t.clientX,y:t.clientY,sourceEvent:t,preventer:i}))}ci({name:"downup",deps:["mousedown","touchstart","touchend"],flow:{start:["mousedown","touchstart"],end:["mouseup","touchend"]},emits:["down","up"],info:{movefn:null,upfn:null},reset:function(){si(this.info)},mousedown:function(e){if(!ei(e))return;let t=ai(e),i=this;ii(this.info,(function(e){ei(e)||(mi("up",t,e),si(i.info))}),(function(e){ei(e)&&mi("up",t,e),si(i.info)})),mi("down",t,e)},touchstart:function(e){mi("down",ai(e),e.changedTouches[0],e)},touchend:function(e){mi("up",ai(e),e.changedTouches[0],e)}}),ci({name:"track",touchAction:"none",deps:["mousedown","touchstart","touchmove","touchend"],flow:{start:["mousedown","touchstart"],end:["mouseup","touchend"]},emits:["track"],info:{x:0,y:0,state:"start",started:!1,moves:[],addMove:function(e){this.moves.length>2&&this.moves.shift(),this.moves.push(e)},movefn:null,upfn:null,prevent:!1},reset:function(){this.info.state="start",this.info.started=!1,this.info.moves=[],this.info.x=0,this.info.y=0,this.info.prevent=!1,si(this.info)},mousedown:function(e){if(!ei(e))return;let t=ai(e),i=this,s=function(e){let s=e.clientX,r=e.clientY;fi(i.info,s,r)&&(i.info.state=i.info.started?"mouseup"===e.type?"end":"track":"start","start"===i.info.state&&_i("tap"),i.info.addMove({x:s,y:r}),ei(e)||(i.info.state="end",si(i.info)),t&&gi(i.info,t,e),i.info.started=!0)};ii(this.info,s,(function(e){i.info.started&&s(e),si(i.info)})),this.info.x=e.clientX,this.info.y=e.clientY},touchstart:function(e){let t=e.changedTouches[0];this.info.x=t.clientX,this.info.y=t.clientY},touchmove:function(e){let t=ai(e),i=e.changedTouches[0],s=i.clientX,r=i.clientY;fi(this.info,s,r)&&("start"===this.info.state&&_i("tap"),this.info.addMove({x:s,y:r}),gi(this.info,t,i),this.info.state="track",this.info.started=!0)},touchend:function(e){let t=ai(e),i=e.changedTouches[0];this.info.started&&(this.info.state="end",this.info.addMove({x:i.clientX,y:i.clientY}),gi(this.info,t,i))}}),ci({name:"tap",deps:["mousedown","click","touchstart","touchend"],flow:{start:["mousedown","touchstart"],end:["click","touchend"]},emits:["tap"],info:{x:NaN,y:NaN,prevent:!1},reset:function(){this.info.x=NaN,this.info.y=NaN,this.info.prevent=!1},mousedown:function(e){ei(e)&&(this.info.x=e.clientX,this.info.y=e.clientY)},click:function(e){ei(e)&&yi(this.info,e)},touchstart:function(e){const t=e.changedTouches[0];this.info.x=t.clientX,this.info.y=t.clientY},touchend:function(e){yi(this.info,e.changedTouches[0],e)}});const bi=pe(e=>class extends e{_addEventListenerToNode(e,t,i){hi(e,t,i)||super._addEventListenerToNode(e,t,i)}_removeEventListenerFromNode(e,t,i){di(e,t,i)||super._removeEventListenerFromNode(e,t,i)}}),vi=e=>class extends e{static get properties(){return{theme:{type:String,readOnly:!0}}}attributeChangedCallback(e,t,i){super.attributeChangedCallback(e,t,i),"theme"===e&&this._setTheme(i)}},wi=e=>class extends(vi(e)){static finalize(){super.finalize();const e=this.prototype._template,t=this.template&&this.template.parentElement&&this.template.parentElement.id===this.is,i=Object.getPrototypeOf(this.prototype)._template;i&&!t&&Array.from(i.content.querySelectorAll("style[include]")).forEach(t=>{this._includeStyle(t.getAttribute("include"),e)}),this._includeMatchingThemes(e)}static _includeMatchingThemes(e){const t=q.prototype.modules;let i=!1;const s=this.is+"-default-theme";Object.keys(t).sort((e,t)=>{const i=0===e.indexOf("vaadin-"),s=0===t.indexOf("vaadin-"),r=["lumo-","material-"],n=r.filter(t=>0===e.indexOf(t)).length>0,o=r.filter(e=>0===t.indexOf(e)).length>0;return i!==s?i?-1:1:n!==o?n?-1:1:0}).forEach(r=>{if(r!==s){const s=t[r].getAttribute("theme-for");s&&s.split(" ").forEach(t=>{new RegExp("^"+t.split("*").join(".*")+"$").test(this.is)&&(i=!0,this._includeStyle(r,e))})}}),!i&&t[s]&&this._includeStyle(s,e)}static _includeStyle(e,t){if(t&&!t.content.querySelector(`style[include="${e}"]`)){const i=document.createElement("style");i.setAttribute("include",e),t.content.appendChild(i)}}}
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/,Ci=e=>class extends((e=>class extends e{static get properties(){var e={tabindex:{type:Number,value:0,reflectToAttribute:!0,observer:"_tabindexChanged"}};return window.ShadyDOM&&(e.tabIndex=e.tabindex),e}})(e)){static get properties(){return{autofocus:{type:Boolean},_previousTabIndex:{type:Number},disabled:{type:Boolean,observer:"_disabledChanged",reflectToAttribute:!0},_isShiftTabbing:{type:Boolean}}}ready(){this.addEventListener("focusin",e=>{e.composedPath()[0]===this?this._focus(e):-1===e.composedPath().indexOf(this.focusElement)||this.disabled||this._setFocused(!0)}),this.addEventListener("focusout",e=>this._setFocused(!1)),super.ready();const e=e=>{e.composed||e.target.dispatchEvent(new CustomEvent(e.type,{bubbles:!0,composed:!0,cancelable:!1}))};this.shadowRoot.addEventListener("focusin",e),this.shadowRoot.addEventListener("focusout",e),this.addEventListener("keydown",e=>{if(!e.defaultPrevented&&9===e.keyCode)if(e.shiftKey)this._isShiftTabbing=!0,HTMLElement.prototype.focus.apply(this),this._setFocused(!1),setTimeout(()=>this._isShiftTabbing=!1,0);else{const e=window.navigator.userAgent.match(/Firefox\/(\d\d\.\d)/);if(e&&parseFloat(e[1])>=63&&parseFloat(e[1])<66&&this.parentNode&&this.nextSibling){const e=document.createElement("input");e.style.position="absolute",e.style.opacity=0,e.tabIndex=this.tabIndex,this.parentNode.insertBefore(e,this.nextSibling),e.focus(),e.addEventListener("focusout",()=>this.parentNode.removeChild(e))}}}),!this.autofocus||this.focused||this.disabled||window.requestAnimationFrame(()=>{this._focus(),this._setFocused(!0),this.setAttribute("focus-ring","")}),this._boundKeydownListener=this._bodyKeydownListener.bind(this),this._boundKeyupListener=this._bodyKeyupListener.bind(this)}connectedCallback(){super.connectedCallback(),document.body.addEventListener("keydown",this._boundKeydownListener,!0),document.body.addEventListener("keyup",this._boundKeyupListener,!0)}disconnectedCallback(){super.disconnectedCallback(),document.body.removeEventListener("keydown",this._boundKeydownListener,!0),document.body.removeEventListener("keyup",this._boundKeyupListener,!0),this.hasAttribute("focused")&&this._setFocused(!1)}_setFocused(e){e?this.setAttribute("focused",""):this.removeAttribute("focused"),e&&this._tabPressed?this.setAttribute("focus-ring",""):this.removeAttribute("focus-ring")}_bodyKeydownListener(e){this._tabPressed=9===e.keyCode}_bodyKeyupListener(){this._tabPressed=!1}get focusElement(){return window.console.warn(`Please implement the 'focusElement' property in <${this.localName}>`),this}_focus(e){this._isShiftTabbing||(this.focusElement.focus(),this._setFocused(!0))}focus(){this.focusElement&&!this.disabled&&(this.focusElement.focus(),this._setFocused(!0))}blur(){this.focusElement.blur(),this._setFocused(!1)}_disabledChanged(e){this.focusElement.disabled=e,e?(this.blur(),this._previousTabIndex=this.tabindex,this.tabindex=-1,this.setAttribute("aria-disabled","true")):(void 0!==this._previousTabIndex&&(this.tabindex=this._previousTabIndex),this.removeAttribute("aria-disabled"))}_tabindexChanged(e){void 0!==e&&(this.focusElement.tabIndex=e),this.disabled&&this.tabindex&&(-1!==this.tabindex&&(this._previousTabIndex=this.tabindex),this.tabindex=e=void 0),window.ShadyDOM&&this.setProperties({tabIndex:e,tabindex:e})}click(){this.disabled||super.click()}}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/,xi=function(){let e,t;do{e=window.ShadyDOM&&ShadyDOM.flush(),window.ShadyCSS&&window.ShadyCSS.ScopingShim&&window.ShadyCSS.ScopingShim.flush(),t=Mt()}while(e||t)},Si=function(e,t,i){const{scrollLeft:s}=i;if("rtl"!==t||!e)return s;switch(e){case"negative":return i.scrollWidth-i.clientWidth+s;case"reverse":return i.scrollWidth-i.clientWidth-s}return s},Ai=function(e,t,i,s){if("rtl"===t&&e)switch(e){case"negative":i.scrollLeft=i.clientWidth-i.scrollWidth+s;break;case"reverse":i.scrollLeft=i.scrollWidth-i.clientWidth-s;break;default:i.scrollLeft=s}else i.scrollLeft=s},Pi=[],Ei=function(){if(!window.document.body)return"indeterminate";const e=window.document.createElement("div");e.textContent="ABCD",e.dir="rtl",e.style.fontSize="14px",e.style.width="4px",e.style.height="1px",e.style.position="absolute",e.style.top="-1000px",e.style.overflow="scroll",document.body.appendChild(e);let t="reverse";return e.scrollLeft>0?t="default":(e.scrollLeft=1,0===e.scrollLeft&&(t="negative")),document.body.removeChild(e),t}();new MutationObserver((function(){const e=Ii();Pi.forEach(t=>{Ti(t,e)})})).observe(document.documentElement,{attributes:!0,attributeFilter:["dir"]});const Ti=function(e,t){t?e.setAttribute("dir",t):e.removeAttribute("dir")},Ii=function(){return document.documentElement.getAttribute("dir")},Oi=e=>class extends e{static get properties(){return{dir:{type:String,readOnly:!0}}}connectedCallback(){super.connectedCallback(),this.hasAttribute("dir")||(this.__subscribe(),Ti(this,Ii()))}attributeChangedCallback(e,t,i){if(super.attributeChangedCallback(e,t,i),"dir"!==e)return;const s=i===Ii()&&-1===Pi.indexOf(this),r=!i&&t&&-1===Pi.indexOf(this),n=i!==Ii()&&t===Ii();s||r?(this.__subscribe(),Ti(this,Ii())):n&&this.__subscribe(!1)}disconnectedCallback(){super.disconnectedCallback(),this.__subscribe(!1),this.removeAttribute("dir")}__subscribe(e=!0){e?-1===Pi.indexOf(this)&&Pi.push(this):Pi.indexOf(this)>-1&&Pi.splice(Pi.indexOf(this),1)}__getNormalizedScrollLeft(e){return Si(Ei,this.getAttribute("dir")||"ltr",e)}__setNormalizedScrollLeft(e,t){return Ai(Ei,this.getAttribute("dir")||"ltr",e,t)}},zi=/\/\*\*\s+vaadin-dev-mode:start([\s\S]*)vaadin-dev-mode:end\s+\*\*\//i,Ri=window.Vaadin&&window.Vaadin.Flow&&window.Vaadin.Flow.clients;function Ni(e,t){if("function"!=typeof e)return;const i=zi.exec(e.toString());if(i)try{e=new Function(i[1])}catch(e){console.log("vaadin-development-mode-detector: uncommentAndRun() failed",e)}return e(t)}window.Vaadin=window.Vaadin||{};const ki=function(e,t){if(window.Vaadin.developmentMode)return Ni(e,t)};function Li(){}void 0===window.Vaadin.developmentMode&&(window.Vaadin.developmentMode=function(){try{return!!localStorage.getItem("vaadin.developmentmode.force")||["localhost","127.0.0.1"].indexOf(window.location.hostname)>=0&&(Ri?!function(){if(Ri){if(Object.keys(Ri).map(e=>Ri[e]).filter(e=>e.productionMode).length>0)return!0}return!1}():!Ni((function(){return!0})))}catch(e){return!1}}());const Di=function(){return ki(Li)};let Mi;window.Vaadin||(window.Vaadin={}),window.Vaadin.registrations=window.Vaadin.registrations||[],window.Vaadin.developmentModeCallback=window.Vaadin.developmentModeCallback||{},window.Vaadin.developmentModeCallback["vaadin-usage-statistics"]=function(){Di&&Di()};const Fi=new Set,Hi=e=>class extends(Oi(e)){static finalize(){super.finalize();const{is:e}=this;e&&!Fi.has(e)&&(window.Vaadin.registrations.push(this),Fi.add(e),window.Vaadin.developmentModeCallback&&(Mi=kt.debounce(Mi,De,()=>{window.Vaadin.developmentModeCallback["vaadin-usage-statistics"]()}),Dt(Mi)))}constructor(){super(),null===document.doctype&&console.warn('Vaadin components require the "standards mode" declaration. Please add <!DOCTYPE html> to the HTML document.')}}
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/;class Bi extends(Hi(Ci(wi(bi(Nt))))){static get template(){return he`
    <style>
      :host {
        display: inline-block;
      }

      :host([hidden]) {
        display: none !important;
      }

      label {
        display: inline-flex;
        align-items: baseline;
        outline: none;
      }

      [part="checkbox"] {
        position: relative;
        display: inline-block;
        flex: none;
      }

      input[type="checkbox"] {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: inherit;
        margin: 0;
      }

      :host([disabled]) {
        -webkit-tap-highlight-color: transparent;
      }
    </style>

    <label>
      <span part="checkbox">
        <input type="checkbox" checked="{{checked::change}}" disabled\$="[[disabled]]" indeterminate="{{indeterminate::change}}" role="presentation" tabindex="-1">
      </span>

      <span part="label">
        <slot></slot>
      </span>
    </label>
`}static get is(){return"vaadin-checkbox"}static get version(){return"2.2.13"}static get properties(){return{checked:{type:Boolean,value:!1,notify:!0,observer:"_checkedChanged",reflectToAttribute:!0},indeterminate:{type:Boolean,notify:!0,observer:"_indeterminateChanged",reflectToAttribute:!0,value:!1},value:{type:String,value:"on"},_nativeCheckbox:{type:Object}}}constructor(){super(),this.name}get name(){return this.checked?this._storedName:""}set name(e){this._storedName=e}ready(){super.ready(),this.setAttribute("role","checkbox"),this._nativeCheckbox=this.shadowRoot.querySelector('input[type="checkbox"]'),this.addEventListener("click",this._handleClick.bind(this)),this._addActiveListeners();const e=this.getAttribute("name");e&&(this.name=e),this.shadowRoot.querySelector('[part~="label"]').querySelector("slot").addEventListener("slotchange",this._updateLabelAttribute.bind(this)),this._updateLabelAttribute()}_updateLabelAttribute(){const e=this.shadowRoot.querySelector('[part~="label"]'),t=e.firstElementChild.assignedNodes();this._isAssignedNodesEmpty(t)?e.setAttribute("empty",""):e.removeAttribute("empty")}_isAssignedNodesEmpty(e){return 0===e.length||1==e.length&&e[0].nodeType==Node.TEXT_NODE&&""===e[0].textContent.trim()}_checkedChanged(e){this.indeterminate?this.setAttribute("aria-checked","mixed"):this.setAttribute("aria-checked",Boolean(e))}_indeterminateChanged(e){e?this.setAttribute("aria-checked","mixed"):this.setAttribute("aria-checked",this.checked)}_addActiveListeners(){this._addEventListenerToNode(this,"down",e=>{this.__interactionsAllowed(e)&&this.setAttribute("active","")}),this._addEventListenerToNode(this,"up",()=>this.removeAttribute("active")),this.addEventListener("keydown",e=>{this.__interactionsAllowed(e)&&32===e.keyCode&&(e.preventDefault(),this.setAttribute("active",""))}),this.addEventListener("keyup",e=>{this.__interactionsAllowed(e)&&32===e.keyCode&&(e.preventDefault(),this._toggleChecked(),this.removeAttribute("active"),this.indeterminate&&(this.indeterminate=!1))})}get focusElement(){return this.shadowRoot.querySelector("input")}__interactionsAllowed(e){return!this.disabled&&"a"!==e.target.localName}_handleClick(e){this.__interactionsAllowed(e)&&(this.indeterminate?(this.indeterminate=!1,e.preventDefault(),this._toggleChecked()):e.composedPath()[0]!==this._nativeCheckbox&&(e.preventDefault(),this._toggleChecked()))}_toggleChecked(){this.checked=!this.checked,this.dispatchEvent(new CustomEvent("change",{composed:!1,bubbles:!0}))}}customElements.define(Bi.is,Bi);const Vi=he`<dom-module id="lumo-grid" theme-for="vaadin-grid">
  <template>
    <style>
      :host {
        font-family: var(--lumo-font-family);
        font-size: var(--lumo-font-size-m);
        line-height: var(--lumo-line-height-s);
        color: var(--lumo-body-text-color);
        background-color: var(--lumo-base-color);
        box-sizing: border-box;
        -webkit-text-size-adjust: 100%;
        -webkit-tap-highlight-color: transparent;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;

        /* For internal use only */
        --_lumo-grid-border-color: var(--lumo-contrast-20pct);
        --_lumo-grid-secondary-border-color: var(--lumo-contrast-10pct);
        --_lumo-grid-border-width: 1px;
        --_lumo-grid-selected-row-color: var(--lumo-primary-color-10pct);
      }

      /* No (outer) border */

      :host(:not([theme~="no-border"])) {
        border: var(--_lumo-grid-border-width) solid var(--_lumo-grid-border-color);
      }

      /* Cell styles */

      [part~="cell"] {
        min-height: var(--lumo-size-m);
        background-color: var(--lumo-base-color);
      }

      [part~="cell"] ::slotted(vaadin-grid-cell-content) {
        cursor: default;
        padding: var(--lumo-space-xs) var(--lumo-space-m);
      }

      /* Apply row borders by default and introduce the "no-row-borders" variant */
      :host(:not([theme~="no-row-borders"])) [part~="cell"]:not([part~="details-cell"]) {
        border-top: var(--_lumo-grid-border-width) solid var(--_lumo-grid-secondary-border-color);
      }

      /* Hide first body row top border */
      :host(:not([theme~="no-row-borders"])) [part="row"][first] [part~="cell"]:not([part~="details-cell"]) {
        border-top: 0;
        min-height: calc(var(--lumo-size-m) - var(--_lumo-grid-border-width));
      }

      /* Focus-ring */

      [part~="cell"]:focus {
        outline: none;
      }

      :host([navigating]) [part~="cell"]:focus::before {
        content: "";
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        pointer-events: none;
        box-shadow: inset 0 0 0 2px var(--lumo-primary-color-50pct);
      }

      /* Drag and Drop styles */
      :host([dragover])::after {
        content: "";
        position: absolute;
        z-index: 100;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        pointer-events: none;
        box-shadow: inset 0 0 0 2px var(--lumo-primary-color-50pct);
      }

      [part~="row"][dragover] {
        z-index: 100 !important;
      }

      [part~="row"][dragover] [part~="cell"] {
        overflow: visible;
      }

      [part~="row"][dragover] [part~="cell"]::after {
        content: "";
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        height: calc(var(--_lumo-grid-border-width) + 2px);
        pointer-events: none;
        background: var(--lumo-primary-color-50pct);
      }

      :host([theme~="no-row-borders"]) [dragover] [part~="cell"]::after {
        height: 2px;
      }

      [part~="row"][dragover="below"] [part~="cell"]::after {
        top: 100%;
        bottom: auto;
        margin-top: -1px;
      }

      [part~="row"][dragover="above"] [part~="cell"]::after {
        top: auto;
        bottom: 100%;
        margin-bottom: -1px;
      }

      [part~="row"][details-opened][dragover="below"] [part~="cell"]:not([part~="details-cell"])::after,
      [part~="row"][details-opened][dragover="above"] [part~="details-cell"]::after {
        display: none;
      }

      [part~="row"][dragover][dragover="on-top"] [part~="cell"]::after {
        height: 100%;
      }

      [part~="row"][dragstart] {
        /* Add bottom-space to the row so the drag number doesn't get clipped. Needed for IE/Edge */
        border-bottom: 100px solid transparent;
        z-index: 100 !important;
        opacity: 0.9;
      }

      [part~="row"][dragstart] [part~="cell"] {
        border: none !important;
        box-shadow: none !important;
      }

      [part~="row"][dragstart] [part~="cell"][last-column] {
        border-radius: 0 var(--lumo-border-radius-s) var(--lumo-border-radius-s) 0;
      }

      [part~="row"][dragstart] [part~="cell"][first-column] {
        border-radius: var(--lumo-border-radius-s) 0 0 var(--lumo-border-radius-s);
      }

      [ios] [part~="row"][dragstart] [part~="cell"] {
        background: var(--lumo-primary-color-50pct);
      }

      #scroller:not([ios]) [part~="row"][dragstart]:not([dragstart=""])::after {
        display: block;
        position: absolute;
        left: var(--_grid-drag-start-x);
        top: var(--_grid-drag-start-y);
        z-index: 100;
        content: attr(dragstart);
        align-items: center;
        justify-content: center;
        box-sizing: border-box;
        padding: calc(var(--lumo-space-xs) * 0.8);
        color: var(--lumo-error-contrast-color);
        background-color: var(--lumo-error-color);
        border-radius: var(--lumo-border-radius-m);
        font-family: var(--lumo-font-family);
        font-size: var(--lumo-font-size-xxs);
        line-height: 1;
        font-weight: 500;
        text-transform: initial;
        letter-spacing: initial;
        min-width: calc(var(--lumo-size-s) * 0.7);
        text-align: center;
      }

      /* Headers and footers */

      [part~="header-cell"] ::slotted(vaadin-grid-cell-content),
      [part~="footer-cell"] ::slotted(vaadin-grid-cell-content),
      [part~="reorder-ghost"] {
        font-size: var(--lumo-font-size-s);
        font-weight: 500;
      }

      [part~="footer-cell"] ::slotted(vaadin-grid-cell-content) {
        font-weight: 400;
      }

      [part="row"]:only-child [part~="header-cell"] {
        min-height: var(--lumo-size-xl);
      }

      /* Header borders */

      /* Hide first header row top border */
      :host(:not([theme~="no-row-borders"])) [part="row"]:first-child [part~="header-cell"] {
        border-top: 0;
      }

      [part="row"]:last-child [part~="header-cell"] {
        border-bottom: var(--_lumo-grid-border-width) solid transparent;
      }

      :host(:not([theme~="no-row-borders"])) [part="row"]:last-child [part~="header-cell"] {
        border-bottom-color: var(--_lumo-grid-secondary-border-color);
      }

      /* Overflow uses a stronger border color */
      :host([overflow~="top"]) [part="row"]:last-child [part~="header-cell"] {
        border-bottom-color: var(--_lumo-grid-border-color);
      }

      /* Footer borders */

      [part="row"]:first-child [part~="footer-cell"] {
        border-top: var(--_lumo-grid-border-width) solid transparent;
      }

      :host(:not([theme~="no-row-borders"])) [part="row"]:first-child [part~="footer-cell"] {
        border-top-color: var(--_lumo-grid-secondary-border-color);
      }

      /* Overflow uses a stronger border color */
      :host([overflow~="bottom"]) [part="row"]:first-child [part~="footer-cell"] {
        border-top-color: var(--_lumo-grid-border-color);
      }

      /* Column reordering */

      :host([reordering]) [part~="cell"] {
        background: linear-gradient(var(--lumo-shade-20pct), var(--lumo-shade-20pct)) var(--lumo-base-color);
      }

      :host([reordering]) [part~="cell"][reorder-status="allowed"] {
        background: var(--lumo-base-color);
      }

      :host([reordering]) [part~="cell"][reorder-status="dragging"] {
        background: linear-gradient(var(--lumo-contrast-5pct), var(--lumo-contrast-5pct)) var(--lumo-base-color);
      }

      [part~="reorder-ghost"] {
        opacity: 0.85;
        box-shadow: var(--lumo-box-shadow-s);
        /* TODO Use the same styles as for the cell element (reorder-ghost copies styles from the cell element) */
        padding: var(--lumo-space-s) var(--lumo-space-m) !important;
      }

      /* Column resizing */

      [part="resize-handle"] {
        width: 3px;
        background-color: var(--lumo-primary-color-50pct);
        opacity: 0;
        transition: opacity 0.2s;
      }

      :host(:not([reordering])) *:not([column-resizing]) [part~="cell"]:hover [part="resize-handle"],
      [part="resize-handle"]:active {
        opacity: 1;
        transition-delay: 0.15s;
      }

      /* Column borders */

      :host([theme~="column-borders"]) [part~="cell"]:not([last-column]):not([part~="details-cell"]) {
        border-right: var(--_lumo-grid-border-width) solid var(--_lumo-grid-secondary-border-color);
      }

      /* Frozen columns */

      [last-frozen] {
        border-right: var(--_lumo-grid-border-width) solid transparent;
        overflow: hidden;
      }

      :host([overflow~="left"]) [part~="cell"][last-frozen]:not([part~="details-cell"]) {
        border-right-color: var(--_lumo-grid-border-color);
      }

      /* Row stripes */

      :host([theme~="row-stripes"]) [part~="row"]:not([odd]) [part~="body-cell"],
      :host([theme~="row-stripes"]) [part~="row"]:not([odd]) [part~="details-cell"] {
        background-image: linear-gradient(var(--lumo-contrast-5pct), var(--lumo-contrast-5pct));
        background-repeat: repeat-x;
      }

      /* Selected row */

      /* Raise the selected rows above unselected rows (so that box-shadow can cover unselected rows) */
      :host(:not([reordering])) [part~="row"][selected] {
        z-index: 1;
      }

      :host(:not([reordering])) [part~="row"][selected] [part~="body-cell"]:not([part~="details-cell"]) {
        background-image: linear-gradient(var(--_lumo-grid-selected-row-color), var(--_lumo-grid-selected-row-color));
        background-repeat: repeat;
      }

      /* Cover the border of an unselected row */
      :host(:not([theme~="no-row-borders"])) [part~="row"][selected] [part~="cell"]:not([part~="details-cell"]) {
        box-shadow: 0 var(--_lumo-grid-border-width) 0 0 var(--_lumo-grid-selected-row-color);
      }

      /* Compact */

      :host([theme~="compact"]) [part="row"]:only-child [part~="header-cell"] {
        min-height: var(--lumo-size-m);
      }

      :host([theme~="compact"]) [part~="cell"] {
        min-height: var(--lumo-size-s);
      }

      :host([theme~="compact"]) [part="row"][first] [part~="cell"]:not([part~="details-cell"]) {
        min-height: calc(var(--lumo-size-s) - var(--_lumo-grid-border-width));
      }

      :host([theme~="compact"]) [part~="cell"] ::slotted(vaadin-grid-cell-content) {
        padding: var(--lumo-space-xs) var(--lumo-space-s);
      }

      /* Wrap cell contents */

      :host([theme~="wrap-cell-content"]) [part~="cell"] ::slotted(vaadin-grid-cell-content) {
        white-space: normal;
      }
    </style>
  </template>
</dom-module><dom-module theme-for="vaadin-checkbox" id="vaadin-grid-select-all-checkbox-lumo">
  <template>
    <style>
      :host(.vaadin-grid-select-all-checkbox) {
        font-size: var(--lumo-font-size-m);
      }
   </style>
  </template>
</dom-module>`;document.head.appendChild(Vi.content);
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
class $i{constructor(){this.start=0,this.end=0,this.previous=null,this.parent=null,this.rules=null,this.parsedCssText="",this.cssText="",this.atRule=!1,this.type=0,this.keyframesName="",this.selector="",this.parsedSelector=""}}function ji(e){return function e(t,i){let s=i.substring(t.start,t.end-1);if(t.parsedCssText=t.cssText=s.trim(),t.parent){let e=t.previous?t.previous.end:t.parent.start;s=i.substring(e,t.start-1),s=function(e){return e.replace(/\\([0-9a-f]{1,6})\s/gi,(function(){let e=arguments[1],t=6-e.length;for(;t--;)e="0"+e;return"\\"+e}))}(s),s=s.replace(Yi.multipleSpaces," "),s=s.substring(s.lastIndexOf(";")+1);let r=t.parsedSelector=t.selector=s.trim();t.atRule=0===r.indexOf(Ki),t.atRule?0===r.indexOf(Xi)?t.type=Wi.MEDIA_RULE:r.match(Yi.keyframesRule)&&(t.type=Wi.KEYFRAMES_RULE,t.keyframesName=t.selector.split(Yi.multipleSpaces).pop()):0===r.indexOf(Ji)?t.type=Wi.MIXIN_RULE:t.type=Wi.STYLE_RULE}let r=t.rules;if(r)for(let t,s=0,n=r.length;s<n&&(t=r[s]);s++)e(t,i);return t}(function(e){let t=new $i;t.start=0,t.end=e.length;let i=t;for(let s=0,r=e.length;s<r;s++)if(e[s]===Gi){i.rules||(i.rules=[]);let e=i,t=e.rules[e.rules.length-1]||null;i=new $i,i.start=s+1,i.parent=e,i.previous=t,e.rules.push(i)}else e[s]===Ui&&(i.end=s+1,i=i.parent||t);return t}(e=e.replace(Yi.comments,"").replace(Yi.port,"")),e)}function qi(e,t,i=""){let s="";if(e.cssText||e.rules){let i=e.rules;if(i&&!function(e){let t=e[0];return Boolean(t)&&Boolean(t.selector)&&0===t.selector.indexOf(Ji)}(i))for(let e,r=0,n=i.length;r<n&&(e=i[r]);r++)s=qi(e,t,s);else s=t?e.cssText:function(e){return function(e){return e.replace(Yi.mixinApply,"").replace(Yi.varApply,"")}(e=function(e){return e.replace(Yi.customProp,"").replace(Yi.mixinProp,"")}(e))}(e.cssText),s=s.trim(),s&&(s="  "+s+"\n")}return s&&(e.selector&&(i+=e.selector+" "+Gi+"\n"),i+=s,e.selector&&(i+=Ui+"\n\n")),i}const Wi={STYLE_RULE:1,KEYFRAMES_RULE:7,MEDIA_RULE:4,MIXIN_RULE:1e3},Gi="{",Ui="}",Yi={comments:/\/\*[^*]*\*+([^/*][^*]*\*+)*\//gim,port:/@import[^;]*;/gim,customProp:/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\n]|$)/gim,mixinProp:/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\n]|$)?/gim,mixinApply:/@apply\s*\(?[^);]*\)?\s*(?:[;\n]|$)?/gim,varApply:/[^;:]*?:[^;]*?var\([^;]*\)(?:[;\n]|$)?/gim,keyframesRule:/^@[^\s]*keyframes/,multipleSpaces:/\s+/g},Ji="--",Xi="@media",Ki="@",Zi=new Set;function Qi(e){const t=e.textContent;if(!Zi.has(t)){Zi.add(t);const e=document.createElement("style");e.setAttribute("shady-unscoped",""),e.textContent=t,document.head.appendChild(e)}}function es(e){return e.hasAttribute("shady-unscoped")}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/function ts(e,t){return e?("string"==typeof e&&(e=ji(e)),t&&ss(e,t),qi(e,C)):""}function is(e){return!e.__cssRules&&e.textContent&&(e.__cssRules=ji(e.textContent)),e.__cssRules||null}function ss(e,t,i,s){if(!e)return;let r=!1,n=e.type;if(s&&n===Wi.MEDIA_RULE){let t=e.selector.match(_);t&&(window.matchMedia(t[1]).matches||(r=!0))}n===Wi.STYLE_RULE?t(e):i&&n===Wi.KEYFRAMES_RULE?i(e):n===Wi.MIXIN_RULE&&(r=!0);let o=e.rules;if(o&&!r)for(let e,r=0,n=o.length;r<n&&(e=o[r]);r++)ss(e,t,i,s)}function rs(e,t){let i=0;for(let s=t,r=e.length;s<r;s++)if("("===e[s])i++;else if(")"===e[s]&&0==--i)return s;return-1}window.ShadyDOM&&window.ShadyDOM.wrap;function ns(e){if(void 0!==b)return b;if(void 0===e.__cssBuild){const t=e.getAttribute("css-build");if(t)e.__cssBuild=t;else{const t=function(e){const t="template"===e.localName?e.content.firstChild:e.firstChild;if(t instanceof Comment){const e=t.textContent.trim().split(":");if("css-build"===e[0])return e[1]}return""}(e);""!==t&&function(e){const t="template"===e.localName?e.content.firstChild:e.firstChild;t.parentNode.removeChild(t)}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/(e),e.__cssBuild=t}}return e.__cssBuild||""}function os(e){return""!==ns(e)}const as=/;\s*/m,ls=/^\s*(initial)|(inherit)\s*$/,hs=/\s*!important/;class ds{constructor(){this._map={}}set(e,t){e=e.trim(),this._map[e]={properties:t,dependants:{}}}get(e){return e=e.trim(),this._map[e]||null}}let cs=null;class us{constructor(){this._currentElement=null,this._measureElement=null,this._map=new ds}detectMixin(e){return function(e){const t=p.test(e)||u.test(e);return p.lastIndex=0,u.lastIndex=0,t}(e)}gatherStyles(e){const t=function(e){const t=[],i=e.querySelectorAll("style");for(let e=0;e<i.length;e++){const s=i[e];es(s)?g||(Qi(s),s.parentNode.removeChild(s)):(t.push(s.textContent),s.parentNode.removeChild(s))}return t.join("").trim()}(e.content);if(t){const i=document.createElement("style");return i.textContent=t,e.content.insertBefore(i,e.content.firstChild),i}return null}transformTemplate(e,t){void 0===e._gatheredStyle&&(e._gatheredStyle=this.gatherStyles(e));const i=e._gatheredStyle;return i?this.transformStyle(i,t):null}transformStyle(e,t=""){let i=is(e);return this.transformRules(i,t),e.textContent=ts(i),i}transformCustomStyle(e){let t=is(e);return ss(t,e=>{":root"===e.selector&&(e.selector="html"),this.transformRule(e)}),e.textContent=ts(t),t}transformRules(e,t){this._currentElement=t,ss(e,e=>{this.transformRule(e)}),this._currentElement=null}transformRule(e){e.cssText=this.transformCssText(e.parsedCssText,e),":root"===e.selector&&(e.selector=":host > *")}transformCssText(e,t){return e=e.replace(u,(e,i,s,r)=>this._produceCssProperties(e,i,s,r,t)),this._consumeCssProperties(e,t)}_getInitialValueForProperty(e){return this._measureElement||(this._measureElement=document.createElement("meta"),this._measureElement.setAttribute("apply-shim-measure",""),this._measureElement.style.all="initial",document.head.appendChild(this._measureElement)),window.getComputedStyle(this._measureElement).getPropertyValue(e)}_fallbacksFromPreviousRules(e){let t=e;for(;t.parent;)t=t.parent;const i={};let s=!1;return ss(t,t=>{s=s||t===e,s||t.selector===e.selector&&Object.assign(i,this._cssTextToMap(t.parsedCssText))}),i}_consumeCssProperties(e,t){let i=null;for(;i=p.exec(e);){let s=i[0],r=i[1],n=i.index,o=n+s.indexOf("@apply"),a=n+s.length,l=e.slice(0,o),h=e.slice(a),d=t?this._fallbacksFromPreviousRules(t):{};Object.assign(d,this._cssTextToMap(l));let c=this._atApplyToCssProperties(r,d);e=`${l}${c}${h}`,p.lastIndex=n+c.length}return e}_atApplyToCssProperties(e,t){e=e.replace(as,"");let i=[],s=this._map.get(e);if(s||(this._map.set(e,{}),s=this._map.get(e)),s){let r,n,o;this._currentElement&&(s.dependants[this._currentElement]=!0);const a=s.properties;for(r in a)o=t&&t[r],n=[r,": var(",e,"_-_",r],o&&n.push(",",o.replace(hs,"")),n.push(")"),hs.test(a[r])&&n.push(" !important"),i.push(n.join(""))}return i.join("; ")}_replaceInitialOrInherit(e,t){let i=ls.exec(t);return i&&(t=i[1]?this._getInitialValueForProperty(e):"apply-shim-inherit"),t}_cssTextToMap(e,t=!1){let i,s,r=e.split(";"),n={};for(let e,o,a=0;a<r.length;a++)e=r[a],e&&(o=e.split(":"),o.length>1&&(i=o[0].trim(),s=o.slice(1).join(":"),t&&(s=this._replaceInitialOrInherit(i,s)),n[i]=s));return n}_invalidateMixinEntry(e){if(cs)for(let t in e.dependants)t!==this._currentElement&&cs(t)}_produceCssProperties(e,t,i,s,r){if(i&&function e(t,i){let s=t.indexOf("var(");if(-1===s)return i(t,"","","");let r=rs(t,s+3),n=t.substring(s+4,r),o=t.substring(0,s),a=e(t.substring(r+1),i),l=n.indexOf(",");return-1===l?i(o,n.trim(),"",a):i(o,n.substring(0,l).trim(),n.substring(l+1).trim(),a)}(i,(e,t)=>{t&&this._map.get(t)&&(s=`@apply ${t};`)}),!s)return e;let n=this._consumeCssProperties(""+s,r),o=e.slice(0,e.indexOf("--")),a=this._cssTextToMap(n,!0),l=a,h=this._map.get(t),d=h&&h.properties;d?l=Object.assign(Object.create(d),a):this._map.set(t,l);let c,u,p=[],_=!1;for(c in l)u=a[c],void 0===u&&(u="initial"),d&&!(c in d)&&(_=!0),p.push(`${t}_-_${c}: ${u}`);return _&&this._invalidateMixinEntry(h),h&&(h.properties=l),i&&(o=`${e};${o}`),`${o}${p.join("; ")};`}}us.prototype.detectMixin=us.prototype.detectMixin,us.prototype.transformStyle=us.prototype.transformStyle,us.prototype.transformCustomStyle=us.prototype.transformCustomStyle,us.prototype.transformRules=us.prototype.transformRules,us.prototype.transformRule=us.prototype.transformRule,us.prototype.transformTemplate=us.prototype.transformTemplate,us.prototype._separator="_-_",Object.defineProperty(us.prototype,"invalidCallback",{get:()=>cs,set(e){cs=e}});var ps=us;
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/var _s={};
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/const ms="_applyShimCurrentVersion",fs="_applyShimNextVersion",gs=Promise.resolve();function ys(e){let t=_s[e];t&&function(e){e[ms]=e[ms]||0,e._applyShimValidatingVersion=e._applyShimValidatingVersion||0,e[fs]=(e[fs]||0)+1}(t)}function bs(e){return e[ms]===e[fs]}function vs(e){return!bs(e)&&e._applyShimValidatingVersion===e[fs]}function ws(e){e._applyShimValidatingVersion=e[fs],e._validating||(e._validating=!0,gs.then((function(){e[ms]=e[fs],e._validating=!1})))}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
const Cs=new ps;class xs{constructor(){this.customStyleInterface=null,Cs.invalidCallback=ys}ensure(){this.customStyleInterface||window.ShadyCSS.CustomStyleInterface&&(this.customStyleInterface=window.ShadyCSS.CustomStyleInterface,this.customStyleInterface.transformCallback=e=>{Cs.transformCustomStyle(e)},this.customStyleInterface.validateCallback=()=>{requestAnimationFrame(()=>{this.customStyleInterface.enqueued&&this.flushCustomStyles()})})}prepareTemplate(e,t){if(this.ensure(),os(e))return;_s[t]=e;let i=Cs.transformTemplate(e,t);e._styleAst=i}flushCustomStyles(){if(this.ensure(),!this.customStyleInterface)return;let e=this.customStyleInterface.processStyles();if(this.customStyleInterface.enqueued){for(let t=0;t<e.length;t++){let i=e[t],s=this.customStyleInterface.getStyleForCustomStyle(i);s&&Cs.transformCustomStyle(s)}this.customStyleInterface.enqueued=!1}}styleSubtree(e,t){if(this.ensure(),t&&m(e,t),e.shadowRoot){this.styleElement(e);let t=e.shadowRoot.children||e.shadowRoot.childNodes;for(let e=0;e<t.length;e++)this.styleSubtree(t[e])}else{let t=e.children||e.childNodes;for(let e=0;e<t.length;e++)this.styleSubtree(t[e])}}styleElement(e){this.ensure();let{is:t}=function(e){let t=e.localName,i="",s="";return t?t.indexOf("-")>-1?i=t:(s=t,i=e.getAttribute&&e.getAttribute("is")||""):(i=e.is,s=e.extends),{is:i,typeExtension:s}}(e),i=_s[t];if((!i||!os(i))&&i&&!bs(i)){vs(i)||(this.prepareTemplate(i,t),ws(i));let s=e.shadowRoot;if(s){let e=s.querySelector("style");e&&(e.__cssRules=i._styleAst,e.textContent=ts(i._styleAst))}}}styleDocument(e){this.ensure(),this.styleSubtree(document.body,e)}}if(!window.ShadyCSS||!window.ShadyCSS.ScopingShim){const e=new xs;let t=window.ShadyCSS&&window.ShadyCSS.CustomStyleInterface;window.ShadyCSS={prepareTemplate(t,i,s){e.flushCustomStyles(),e.prepareTemplate(t,i)},prepareTemplateStyles(e,t,i){window.ShadyCSS.prepareTemplate(e,t,i)},prepareTemplateDom(e,t){},styleSubtree(t,i){e.flushCustomStyles(),e.styleSubtree(t,i)},styleElement(t){e.flushCustomStyles(),e.styleElement(t)},styleDocument(t){e.flushCustomStyles(),e.styleDocument(t)},getComputedStyleValue:(e,t)=>f(e,t),flushCustomStyles(){e.flushCustomStyles()},nativeCss:C,nativeShadow:g,cssBuild:b,disableRuntime:w},t&&(window.ShadyCSS.CustomStyleInterface=t)}window.ShadyCSS.ApplyShim=Cs;
/**
 * @fileoverview
 * @suppress {checkPrototypalTypes}
 * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt The complete set of authors may be found
 * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may
 * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by
 * Google as part of the polymer project is also subject to an additional IP
 * rights grant found at http://polymer.github.io/PATENTS.txt
 */
const Ss=/:host\(:dir\((ltr|rtl)\)\)/g,As=/([\s\w-#\.\[\]\*]*):dir\((ltr|rtl)\)/g,Ps=/:dir\((?:ltr|rtl)\)/,Es=Boolean(window.ShadyDOM&&window.ShadyDOM.inUse),Ts=[];let Is=null,Os="";function zs(){Os=document.documentElement.getAttribute("dir")}function Rs(e){if(!e.__autoDirOptOut){e.setAttribute("dir",Os)}}function Ns(){zs(),Os=document.documentElement.getAttribute("dir");for(let e=0;e<Ts.length;e++)Rs(Ts[e])}const ks=pe(e=>{Es||Is||(zs(),Is=new MutationObserver(Ns),Is.observe(document.documentElement,{attributes:!0,attributeFilter:["dir"]}));const t=$e(e);class i extends t{static _processStyleText(e,i){return e=t._processStyleText.call(this,e,i),!Es&&Ps.test(e)&&(e=this._replaceDirInCssText(e),this.__activateDir=!0),e}static _replaceDirInCssText(e){let t=e;return t=t.replace(Ss,':host([dir="$1"])'),t=t.replace(As,':host([dir="$2"]) $1'),t}constructor(){super(),this.__autoDirOptOut=!1}ready(){super.ready(),this.__autoDirOptOut=this.hasAttribute("dir")}connectedCallback(){t.prototype.connectedCallback&&super.connectedCallback(),this.constructor.__activateDir&&(Is&&Is.takeRecords().length&&Ns(),Ts.push(this),Rs(this))}disconnectedCallback(){if(t.prototype.disconnectedCallback&&super.disconnectedCallback(),this.constructor.__activateDir){const e=Ts.indexOf(this);e>-1&&Ts.splice(e,1)}}}return i.__activateDir=!1,i});
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/let Ls=!1,Ds=[],Ms=[];function Fs(){Ls=!0,requestAnimationFrame((function(){Ls=!1,Hs(Ds),setTimeout((function(){!function(e){for(let t=0,i=e.length;t<i;t++)Bs(e.shift())}(Ms)}))}))}function Hs(e){for(;e.length;)Bs(e.shift())}function Bs(e){const t=e[0],i=e[1],s=e[2];try{i.apply(t,s)}catch(e){setTimeout(()=>{throw e})}}function Vs(e,t,i){Ls||Fs(),Ms.push([e,t,i])}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/function $s(){document.body.removeAttribute("unresolved")}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
function js(e,t,i){return{index:e,removed:t,addedCount:i}}"interactive"===document.readyState||"complete"===document.readyState?$s():window.addEventListener("DOMContentLoaded",$s);function qs(e,t,i,s,r,n){let o,a=0,l=0,h=Math.min(i-t,n-r);if(0==t&&0==r&&(a=function(e,t,i){for(let s=0;s<i;s++)if(!Gs(e[s],t[s]))return s;return i}(e,s,h)),i==e.length&&n==s.length&&(l=function(e,t,i){let s=e.length,r=t.length,n=0;for(;n<i&&Gs(e[--s],t[--r]);)n++;return n}(e,s,h-a)),r+=a,n-=l,(i-=l)-(t+=a)==0&&n-r==0)return[];if(t==i){for(o=js(t,[],0);r<n;)o.removed.push(s[r++]);return[o]}if(r==n)return[js(t,[],i-t)];let d=function(e){let t=e.length-1,i=e[0].length-1,s=e[t][i],r=[];for(;t>0||i>0;){if(0==t){r.push(2),i--;continue}if(0==i){r.push(3),t--;continue}let n,o=e[t-1][i-1],a=e[t-1][i],l=e[t][i-1];n=a<l?a<o?a:o:l<o?l:o,n==o?(o==s?r.push(0):(r.push(1),s=o),t--,i--):n==a?(r.push(3),t--,s=a):(r.push(2),i--,s=l)}return r.reverse(),r}(function(e,t,i,s,r,n){let o=n-r+1,a=i-t+1,l=new Array(o);for(let e=0;e<o;e++)l[e]=new Array(a),l[e][0]=e;for(let e=0;e<a;e++)l[0][e]=e;for(let i=1;i<o;i++)for(let n=1;n<a;n++)if(Gs(e[t+n-1],s[r+i-1]))l[i][n]=l[i-1][n-1];else{let e=l[i-1][n]+1,t=l[i][n-1]+1;l[i][n]=e<t?e:t}return l}(e,t,i,s,r,n));o=void 0;let c=[],u=t,p=r;for(let e=0;e<d.length;e++)switch(d[e]){case 0:o&&(c.push(o),o=void 0),u++,p++;break;case 1:o||(o=js(u,[],0)),o.addedCount++,u++,o.removed.push(s[p]),p++;break;case 2:o||(o=js(u,[],0)),o.addedCount++,u++;break;case 3:o||(o=js(u,[],0)),o.removed.push(s[p]),p++}return o&&c.push(o),c}function Ws(e,t){return qs(e,0,e.length,t,0,t.length)}function Gs(e,t){return e===t}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/function Us(e){return"slot"===e.localName}let Ys=class{static getFlattenedNodes(e){const t=_e(e);return Us(e)?(e=e,t.assignedNodes({flatten:!0})):Array.from(t.childNodes).map(e=>Us(e)?_e(e=e).assignedNodes({flatten:!0}):[e]).reduce((e,t)=>e.concat(t),[])}constructor(e,t){this._shadyChildrenObserver=null,this._nativeChildrenObserver=null,this._connected=!1,this._target=e,this.callback=t,this._effectiveNodes=[],this._observer=null,this._scheduled=!1,this._boundSchedule=()=>{this._schedule()},this.connect(),this._schedule()}connect(){Us(this._target)?this._listenSlots([this._target]):_e(this._target).children&&(this._listenSlots(_e(this._target).children),window.ShadyDOM?this._shadyChildrenObserver=window.ShadyDOM.observeChildren(this._target,e=>{this._processMutations(e)}):(this._nativeChildrenObserver=new MutationObserver(e=>{this._processMutations(e)}),this._nativeChildrenObserver.observe(this._target,{childList:!0}))),this._connected=!0}disconnect(){Us(this._target)?this._unlistenSlots([this._target]):_e(this._target).children&&(this._unlistenSlots(_e(this._target).children),window.ShadyDOM&&this._shadyChildrenObserver?(window.ShadyDOM.unobserveChildren(this._shadyChildrenObserver),this._shadyChildrenObserver=null):this._nativeChildrenObserver&&(this._nativeChildrenObserver.disconnect(),this._nativeChildrenObserver=null)),this._connected=!1}_schedule(){this._scheduled||(this._scheduled=!0,Me.run(()=>this.flush()))}_processMutations(e){this._processSlotMutations(e),this.flush()}_processSlotMutations(e){if(e)for(let t=0;t<e.length;t++){let i=e[t];i.addedNodes&&this._listenSlots(i.addedNodes),i.removedNodes&&this._unlistenSlots(i.removedNodes)}}flush(){if(!this._connected)return!1;window.ShadyDOM&&ShadyDOM.flush(),this._nativeChildrenObserver?this._processSlotMutations(this._nativeChildrenObserver.takeRecords()):this._shadyChildrenObserver&&this._processSlotMutations(this._shadyChildrenObserver.takeRecords()),this._scheduled=!1;let e={target:this._target,addedNodes:[],removedNodes:[]},t=this.constructor.getFlattenedNodes(this._target),i=Ws(t,this._effectiveNodes);for(let t,s=0;s<i.length&&(t=i[s]);s++)for(let i,s=0;s<t.removed.length&&(i=t.removed[s]);s++)e.removedNodes.push(i);for(let s,r=0;r<i.length&&(s=i[r]);r++)for(let i=s.index;i<s.index+s.addedCount;i++)e.addedNodes.push(t[i]);this._effectiveNodes=t;let s=!1;return(e.addedNodes.length||e.removedNodes.length)&&(s=!0,this.callback.call(this._target,e)),s}_listenSlots(e){for(let t=0;t<e.length;t++){let i=e[t];Us(i)&&i.addEventListener("slotchange",this._boundSchedule)}}_unlistenSlots(e){for(let t=0;t<e.length;t++){let i=e[t];Us(i)&&i.removeEventListener("slotchange",this._boundSchedule)}}};
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/const Js=Element.prototype,Xs=Js.matches||Js.matchesSelector||Js.mozMatchesSelector||Js.msMatchesSelector||Js.oMatchesSelector||Js.webkitMatchesSelector,Ks=function(e,t){return Xs.call(e,t)};class Zs{constructor(e){window.ShadyDOM&&window.ShadyDOM.inUse&&window.ShadyDOM.patch(e),this.node=e}observeNodes(e){return new Ys(this.node,e)}unobserveNodes(e){e.disconnect()}notifyObserver(){}deepContains(e){if(_e(this.node).contains(e))return!0;let t=e,i=e.ownerDocument;for(;t&&t!==i&&t!==this.node;)t=_e(t).parentNode||_e(t).host;return t===this.node}getOwnerRoot(){return _e(this.node).getRootNode()}getDistributedNodes(){return"slot"===this.node.localName?_e(this.node).assignedNodes({flatten:!0}):[]}getDestinationInsertionPoints(){let e=[],t=_e(this.node).assignedSlot;for(;t;)e.push(t),t=_e(t).assignedSlot;return e}importNode(e,t){let i=this.node instanceof Document?this.node:this.node.ownerDocument;return _e(i).importNode(e,t)}getEffectiveChildNodes(){return Ys.getFlattenedNodes(this.node)}queryDistributedElements(e){let t=this.getEffectiveChildNodes(),i=[];for(let s,r=0,n=t.length;r<n&&(s=t[r]);r++)s.nodeType===Node.ELEMENT_NODE&&Ks(s,e)&&i.push(s);return i}get activeElement(){let e=this.node;return void 0!==e._activeElement?e._activeElement:e.activeElement}}function Qs(e,t){for(let i=0;i<t.length;i++){let s=t[i];Object.defineProperty(e,s,{get:function(){return this.node[s]},configurable:!0})}}class er{constructor(e){this.event=e}get rootTarget(){return this.path[0]}get localTarget(){return this.event.target}get path(){return this.event.composedPath()}}Zs.prototype.cloneNode,Zs.prototype.appendChild,Zs.prototype.insertBefore,Zs.prototype.removeChild,Zs.prototype.replaceChild,Zs.prototype.setAttribute,Zs.prototype.removeAttribute,Zs.prototype.querySelector,Zs.prototype.querySelectorAll,Zs.prototype.parentNode,Zs.prototype.firstChild,Zs.prototype.lastChild,Zs.prototype.nextSibling,Zs.prototype.previousSibling,Zs.prototype.firstElementChild,Zs.prototype.lastElementChild,Zs.prototype.nextElementSibling,Zs.prototype.previousElementSibling,Zs.prototype.childNodes,Zs.prototype.children,Zs.prototype.classList,Zs.prototype.textContent,Zs.prototype.innerHTML;let tr=Zs;if(window.ShadyDOM&&window.ShadyDOM.inUse&&window.ShadyDOM.noPatch&&window.ShadyDOM.Wrapper){class e extends window.ShadyDOM.Wrapper{}Object.getOwnPropertyNames(Zs.prototype).forEach(t=>{"activeElement"!=t&&(e.prototype[t]=Zs.prototype[t])}),Qs(e.prototype,["classList"]),tr=e,Object.defineProperties(er.prototype,{localTarget:{get(){const e=this.event.currentTarget,t=e&&ir(e).getOwnerRoot(),i=this.path;for(let e=0;e<i.length;e++){const s=i[e];if(ir(s).getOwnerRoot()===t)return s}},configurable:!0},path:{get(){return window.ShadyDOM.composedPath(this.event)},configurable:!0}})}else!function(e,t){for(let i=0;i<t.length;i++){let s=t[i];e[s]=function(){return this.node[s].apply(this.node,arguments)}}}(Zs.prototype,["cloneNode","appendChild","insertBefore","removeChild","replaceChild","setAttribute","removeAttribute","querySelector","querySelectorAll"]),Qs(Zs.prototype,["parentNode","firstChild","lastChild","nextSibling","previousSibling","firstElementChild","lastElementChild","nextElementSibling","previousElementSibling","childNodes","children","classList"]),function(e,t){for(let i=0;i<t.length;i++){let s=t[i];Object.defineProperty(e,s,{get:function(){return this.node[s]},set:function(e){this.node[s]=e},configurable:!0})}}(Zs.prototype,["textContent","innerHTML","className"]);const ir=function(e){if((e=e||document)instanceof tr)return e;if(e instanceof er)return e;let t=e.__domApi;return t||(t=e instanceof Event?new er(e):new tr(e),e.__domApi=t),t},sr=window.ShadyDOM,rr=window.ShadyCSS;function nr(e,t){return _e(e).getRootNode()===t}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let or=window.ShadyCSS;const ar=pe(e=>{const t=ks(bi(Rt(e))),i={x:"pan-x",y:"pan-y",none:"none",all:"auto"};class s extends t{constructor(){super(),this.isAttached,this.__boundListeners,this._debouncers}static get importMeta(){return this.prototype.importMeta}created(){}connectedCallback(){super.connectedCallback(),this.isAttached=!0,this.attached()}attached(){}disconnectedCallback(){super.disconnectedCallback(),this.isAttached=!1,this.detached()}detached(){}attributeChangedCallback(e,t,i,s){t!==i&&(super.attributeChangedCallback(e,t,i,s),this.attributeChanged(e,t,i))}attributeChanged(e,t,i){}_initializeProperties(){let e=Object.getPrototypeOf(this);e.hasOwnProperty(JSCompiler_renameProperty("__hasRegisterFinished",e))||(this._registered(),e.__hasRegisterFinished=!0),super._initializeProperties(),this.root=this,this.created(),this._applyListeners()}_registered(){}ready(){this._ensureAttributes(),super.ready()}_ensureAttributes(){}_applyListeners(){}serialize(e){return this._serializeValue(e)}deserialize(e,t){return this._deserializeValue(e,t)}reflectPropertyToAttribute(e,t,i){this._propertyToAttribute(e,t,i)}serializeValueToAttribute(e,t,i){this._valueToNodeAttribute(i||this,e,t)}extend(e,t){if(!e||!t)return e||t;let i=Object.getOwnPropertyNames(t);for(let s,r=0;r<i.length&&(s=i[r]);r++){let i=Object.getOwnPropertyDescriptor(t,s);i&&Object.defineProperty(e,s,i)}return e}mixin(e,t){for(let i in t)e[i]=t[i];return e}chainObject(e,t){return e&&t&&e!==t&&(e.__proto__=t),e}instanceTemplate(e){let t=this.constructor._contentForTemplate(e);return document.importNode(t,!0)}fire(e,t,i){i=i||{},t=null==t?{}:t;let s=new Event(e,{bubbles:void 0===i.bubbles||i.bubbles,cancelable:Boolean(i.cancelable),composed:void 0===i.composed||i.composed});s.detail=t;let r=i.node||this;return _e(r).dispatchEvent(s),s}listen(e,t,i){e=e||this;let s=this.__boundListeners||(this.__boundListeners=new WeakMap),r=s.get(e);r||(r={},s.set(e,r));let n=t+i;r[n]||(r[n]=this._addMethodEventListenerToNode(e,t,i,this))}unlisten(e,t,i){e=e||this;let s=this.__boundListeners&&this.__boundListeners.get(e),r=t+i,n=s&&s[r];n&&(this._removeEventListenerFromNode(e,t,n),s[r]=null)}setScrollDirection(e,t){ui(t||this,i[e]||"auto")}$$(e){return this.root.querySelector(e)}get domHost(){let e=_e(this).getRootNode();return e instanceof DocumentFragment?e.host:e}distributeContent(){const e=ir(this);window.ShadyDOM&&e.shadowRoot&&ShadyDOM.flush()}getEffectiveChildNodes(){return ir(this).getEffectiveChildNodes()}queryDistributedElements(e){return ir(this).queryDistributedElements(e)}getEffectiveChildren(){return this.getEffectiveChildNodes().filter((function(e){return e.nodeType===Node.ELEMENT_NODE}))}getEffectiveTextContent(){let e=this.getEffectiveChildNodes(),t=[];for(let i,s=0;i=e[s];s++)i.nodeType!==Node.COMMENT_NODE&&t.push(i.textContent);return t.join("")}queryEffectiveChildren(e){let t=this.queryDistributedElements(e);return t&&t[0]}queryAllEffectiveChildren(e){return this.queryDistributedElements(e)}getContentChildNodes(e){let t=this.root.querySelector(e||"slot");return t?ir(t).getDistributedNodes():[]}getContentChildren(e){return this.getContentChildNodes(e).filter((function(e){return e.nodeType===Node.ELEMENT_NODE}))}isLightDescendant(e){return this!==e&&_e(this).contains(e)&&_e(this).getRootNode()===_e(e).getRootNode()}isLocalDescendant(e){return this.root===_e(e).getRootNode()}scopeSubtree(e,t=!1){return function(e,t=!1){if(!sr||!rr)return null;if(!sr.handlesDynamicScoping)return null;const i=rr.ScopingShim;if(!i)return null;const s=i.scopeForNode(e),r=_e(e).getRootNode(),n=e=>{if(!nr(e,r))return;const t=Array.from(sr.nativeMethods.querySelectorAll.call(e,"*"));t.push(e);for(let e=0;e<t.length;e++){const n=t[e];if(!nr(n,r))continue;const o=i.currentScopeForNode(n);o!==s&&(""!==o&&i.unscopeNode(n,o),i.scopeNode(n,s))}};if(n(e),t){const t=new MutationObserver(e=>{for(let t=0;t<e.length;t++){const i=e[t];for(let e=0;e<i.addedNodes.length;e++){const t=i.addedNodes[e];t.nodeType===Node.ELEMENT_NODE&&n(t)}}});return t.observe(e,{childList:!0,subtree:!0}),t}return null}(e,t)}getComputedStyleValue(e){return or.getComputedStyleValue(this,e)}debounce(e,t,i){return this._debouncers=this._debouncers||{},this._debouncers[e]=kt.debounce(this._debouncers[e],i>0?ke.after(i):Me,t.bind(this))}isDebouncerActive(e){this._debouncers=this._debouncers||{};let t=this._debouncers[e];return!(!t||!t.isActive())}flushDebouncer(e){this._debouncers=this._debouncers||{};let t=this._debouncers[e];t&&t.flush()}cancelDebouncer(e){this._debouncers=this._debouncers||{};let t=this._debouncers[e];t&&t.cancel()}async(e,t){return t>0?ke.run(e.bind(this),t):~Me.run(e.bind(this))}cancelAsync(e){e<0?Me.cancel(~e):ke.cancel(e)}create(e,t){let i=document.createElement(e);if(t)if(i.setProperties)i.setProperties(t);else for(let e in t)i[e]=t[e];return i}elementMatches(e,t){return Ks(t||this,e)}toggleAttribute(e,t){let i=this;return 3===arguments.length&&(i=arguments[2]),1==arguments.length&&(t=!i.hasAttribute(e)),t?(_e(i).setAttribute(e,""),!0):(_e(i).removeAttribute(e),!1)}toggleClass(e,t,i){i=i||this,1==arguments.length&&(t=!i.classList.contains(e)),t?i.classList.add(e):i.classList.remove(e)}transform(e,t){(t=t||this).style.webkitTransform=e,t.style.transform=e}translate3d(e,t,i,s){s=s||this,this.transform("translate3d("+e+","+t+","+i+")",s)}arrayDelete(e,t){let i;if(Array.isArray(e)){if(i=e.indexOf(t),i>=0)return e.splice(i,1)}else{if(i=Ce(this,e).indexOf(t),i>=0)return this.splice(e,i,1)}return null}_logger(e,t){switch(Array.isArray(t)&&1===t.length&&Array.isArray(t[0])&&(t=t[0]),e){case"log":case"warn":case"error":console[e](...t)}}_log(...e){this._logger("log",e)}_warn(...e){this._logger("warn",e)}_error(...e){this._logger("error",e)}_logf(e,...t){return["[%s::%s]",this.is,e,...t]}}return s.prototype.is="",s}),lr={attached:!0,detached:!0,ready:!0,created:!0,beforeRegister:!0,registered:!0,attributeChanged:!0,listeners:!0,hostAttributes:!0},hr={attached:!0,detached:!0,ready:!0,created:!0,beforeRegister:!0,registered:!0,attributeChanged:!0,behaviors:!0,_noAccessors:!0},dr=Object.assign({listeners:!0,hostAttributes:!0,properties:!0,observers:!0},hr);
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/function cr(e,t,i,s){!function(e,t,i){const s=e._noAccessors,r=Object.getOwnPropertyNames(e);for(let n=0;n<r.length;n++){let o=r[n];if(!(o in i))if(s)t[o]=e[o];else{let i=Object.getOwnPropertyDescriptor(e,o);i&&(i.configurable=!0,Object.defineProperty(t,o,i))}}}(t,e,s);for(let e in lr)t[e]&&(i[e]=i[e]||[],i[e].push(t[e]))}function ur(e,t){for(const i in t){const s=e[i],r=t[i];e[i]=!("value"in r)&&s&&"value"in s?Object.assign({value:s.value},r):r}}function pr(e,t,i){let s;const r={};class n extends t{static _finalizeClass(){if(this.hasOwnProperty(JSCompiler_renameProperty("generatedFrom",this))){if(s)for(let e,t=0;t<s.length;t++)e=s[t],e.properties&&this.createProperties(e.properties),e.observers&&this.createObservers(e.observers,e.properties);e.properties&&this.createProperties(e.properties),e.observers&&this.createObservers(e.observers,e.properties),this._prepareTemplate()}else t._finalizeClass.call(this)}static get properties(){const t={};if(s)for(let e=0;e<s.length;e++)ur(t,s[e].properties);return ur(t,e.properties),t}static get observers(){let t=[];if(s)for(let e,i=0;i<s.length;i++)e=s[i],e.observers&&(t=t.concat(e.observers));return e.observers&&(t=t.concat(e.observers)),t}created(){super.created();const e=r.created;if(e)for(let t=0;t<e.length;t++)e[t].call(this)}_registered(){const e=n.prototype;if(!e.hasOwnProperty(JSCompiler_renameProperty("__hasRegisterFinished",e))){e.__hasRegisterFinished=!0,super._registered(),M&&o(e);const t=Object.getPrototypeOf(this);let i=r.beforeRegister;if(i)for(let e=0;e<i.length;e++)i[e].call(t);if(i=r.registered,i)for(let e=0;e<i.length;e++)i[e].call(t)}}_applyListeners(){super._applyListeners();const e=r.listeners;if(e)for(let t=0;t<e.length;t++){const i=e[t];if(i)for(let e in i)this._addMethodEventListenerToNode(this,e,i[e])}}_ensureAttributes(){const e=r.hostAttributes;if(e)for(let t=e.length-1;t>=0;t--){const i=e[t];for(let e in i)this._ensureAttribute(e,i[e])}super._ensureAttributes()}ready(){super.ready();let e=r.ready;if(e)for(let t=0;t<e.length;t++)e[t].call(this)}attached(){super.attached();let e=r.attached;if(e)for(let t=0;t<e.length;t++)e[t].call(this)}detached(){super.detached();let e=r.detached;if(e)for(let t=0;t<e.length;t++)e[t].call(this)}attributeChanged(e,t,i){super.attributeChanged();let s=r.attributeChanged;if(s)for(let r=0;r<s.length;r++)s[r].call(this,e,t,i)}}if(i){Array.isArray(i)||(i=[i]);let e=t.prototype.behaviors;s=function e(t,i,s){i=i||[];for(let r=t.length-1;r>=0;r--){let n=t[r];n?Array.isArray(n)?e(n,i):i.indexOf(n)<0&&(!s||s.indexOf(n)<0)&&i.unshift(n):console.warn("behavior is null, check for missing or 404 import")}return i}(i,null,e),n.prototype.behaviors=e?e.concat(i):s}const o=t=>{s&&function(e,t,i){for(let s=0;s<t.length;s++)cr(e,t[s],i,dr)}(t,s,r),cr(t,e,r,hr)};return M||o(n.prototype),n.generatedFrom=e,n}const _r=function(e,t){e||console.warn("Polymer.Class requires `info` argument");let i=t?t(ar(HTMLElement)):ar(HTMLElement);return i=pr(e,i,e.behaviors),i.is=i.prototype.is=e.is,i},mr=function(e){let t;return t="function"==typeof e?e:mr.Class(e),customElements.define(t.is,t),t};
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
function fr(e,t,i,s,r){let n;r&&(n="object"==typeof i&&null!==i,n&&(s=e.__dataTemp[t]));let o=s!==i&&(s==s||i==i);return n&&o&&(e.__dataTemp[t]=i),o}mr.Class=_r;const gr=pe(e=>class extends e{_shouldPropertyChange(e,t,i){return fr(this,e,t,i,!0)}}),yr=pe(e=>class extends e{static get properties(){return{mutableData:Boolean}}_shouldPropertyChange(e,t,i){return fr(this,e,t,i,this.mutableData)}});gr._mutablePropertyChange=fr;
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let br=null;function vr(){return br}vr.prototype=Object.create(HTMLTemplateElement.prototype,{constructor:{value:vr,writable:!0}});const wr=Et(vr),Cr=gr(wr);const xr=Et(class{});class Sr extends xr{constructor(e){super(),this._configureProperties(e),this.root=this._stampTemplate(this.__dataHost);let t=[];this.children=t;for(let e=this.root.firstChild;e;e=e.nextSibling)t.push(e),e.__templatizeInstance=this;this.__templatizeOwner&&this.__templatizeOwner.__hideTemplateChildren__&&this._showHideChildren(!0);let i=this.__templatizeOptions;(e&&i.instanceProps||!i.instanceProps)&&this._enableProperties()}_configureProperties(e){if(this.__templatizeOptions.forwardHostProp)for(let e in this.__hostProps)this._setPendingProperty(e,this.__dataHost["_host_"+e]);for(let t in e)this._setPendingProperty(t,e[t])}forwardHostProp(e,t){this._setPendingPropertyOrPath(e,t,!1,!0)&&this.__dataHost._enqueueClient(this)}_addEventListenerToNode(e,t,i){if(this._methodHost&&this.__templatizeOptions.parentModel)this._methodHost._addEventListenerToNode(e,t,e=>{e.model=this,i(e)});else{let s=this.__dataHost.__dataHost;s&&s._addEventListenerToNode(e,t,i)}}_showHideChildren(e){let t=this.children;for(let i=0;i<t.length;i++){let s=t[i];if(Boolean(e)!=Boolean(s.__hideTemplateChildren__))if(s.nodeType===Node.TEXT_NODE)e?(s.__polymerTextContent__=s.textContent,s.textContent=""):s.textContent=s.__polymerTextContent__;else if("slot"===s.localName)if(e)s.__polymerReplaced__=document.createComment("hidden-slot"),_e(_e(s).parentNode).replaceChild(s.__polymerReplaced__,s);else{const e=s.__polymerReplaced__;e&&_e(_e(e).parentNode).replaceChild(s,e)}else s.style&&(e?(s.__polymerDisplay__=s.style.display,s.style.display="none"):s.style.display=s.__polymerDisplay__);s.__hideTemplateChildren__=e,s._showHideChildren&&s._showHideChildren(e)}}_setUnmanagedPropertyToNode(e,t,i){e.__hideTemplateChildren__&&e.nodeType==Node.TEXT_NODE&&"textContent"==t?e.__polymerTextContent__=i:super._setUnmanagedPropertyToNode(e,t,i)}get parentModel(){let e=this.__parentModel;if(!e){let t;e=this;do{e=e.__dataHost.__dataHost}while((t=e.__templatizeOptions)&&!t.parentModel);this.__parentModel=e}return e}dispatchEvent(e){return!0}}Sr.prototype.__dataHost,Sr.prototype.__templatizeOptions,Sr.prototype._methodHost,Sr.prototype.__templatizeOwner,Sr.prototype.__hostProps;const Ar=gr(Sr);function Pr(e){let t=e.__dataHost;return t&&t._methodHost||t}function Er(e,t,i){let s=i.mutableData?Ar:Sr;zr.mixin&&(s=zr.mixin(s));let r=class extends s{};return r.prototype.__templatizeOptions=i,r.prototype._bindTemplate(e),function(e,t,i,s){let r=i.hostProps||{};for(let t in s.instanceProps){delete r[t];let i=s.notifyInstanceProp;i&&e.prototype._addPropertyEffect(t,e.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,{fn:Or(t,i)})}if(s.forwardHostProp&&t.__dataHost)for(let t in r)i.hasHostProps||(i.hasHostProps=!0),e.prototype._addPropertyEffect(t,e.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,{fn:function(e,t,i){e.__dataHost._setPendingPropertyOrPath("_host_"+t,i[t],!0,!0)}})}(r,e,t,i),r}function Tr(e,t,i){let s=i.forwardHostProp;if(s&&t.hasHostProps){let r=t.templatizeTemplateClass;if(!r){let e=i.mutableData?Cr:wr;r=t.templatizeTemplateClass=class extends e{};let n=t.hostProps;for(let e in n)r.prototype._addPropertyEffect("_host_"+e,r.prototype.PROPERTY_EFFECT_TYPES.PROPAGATE,{fn:Ir(e,s)}),r.prototype._createNotifyingProperty("_host_"+e)}!function(e,t){br=e,Object.setPrototypeOf(e,t.prototype),new t,br=null}(e,r),e.__dataProto&&Object.assign(e.__data,e.__dataProto),e.__dataTemp={},e.__dataPending=null,e.__dataOld=null,e._enableProperties()}}function Ir(e,t){return function(e,i,s){t.call(e.__templatizeOwner,i.substring("_host_".length),s[i])}}function Or(e,t){return function(e,i,s){t.call(e.__templatizeOwner,e,i,s[i])}}function zr(e,t,i){if(L&&!Pr(e))throw new Error("strictTemplatePolicy: template owner not trusted");if(i=i||{},e.__templatizeOwner)throw new Error("A <template> can only be templatized once");e.__templatizeOwner=t;let s=(t?t.constructor:Sr)._parseTemplate(e),r=s.templatizeInstanceClass;r||(r=Er(e,s,i),s.templatizeInstanceClass=r),Tr(e,s,i);let n=class extends r{};return n.prototype._methodHost=Pr(e),n.prototype.__dataHost=e,n.prototype.__templatizeOwner=t,n.prototype.__hostProps=s.hostProps,n=n,n}function Rr(e,t){let i;for(;t;)if(i=t.__templatizeInstance){if(i.__dataHost==e)return i;t=i.__dataHost}else t=_e(t).parentNode;return null}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let Nr=!1;function kr(){if(M&&!z){if(!Nr){Nr=!0;const e=document.createElement("style");e.textContent="dom-bind,dom-if,dom-repeat{display:none;}",document.head.appendChild(e)}return!0}return!1}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/const Lr=bi(yr(Et(HTMLElement)));customElements.define("dom-bind",class extends Lr{static get observedAttributes(){return["mutable-data"]}constructor(){if(super(),L)throw new Error("strictTemplatePolicy: dom-bind not allowed");this.root=null,this.$=null,this.__children=null}attributeChangedCallback(e,t,i,s){this.mutableData=!0}connectedCallback(){kr()||(this.style.display="none"),this.render()}disconnectedCallback(){this.__removeChildren()}__insertChildren(){_e(_e(this).parentNode).insertBefore(this.root,this)}__removeChildren(){if(this.__children)for(let e=0;e<this.__children.length;e++)this.root.appendChild(this.__children[e])}render(){let e;if(!this.__children){if(e=e||this.querySelector("template"),!e){let t=new MutationObserver(()=>{if(e=this.querySelector("template"),!e)throw new Error("dom-bind requires a <template> child");t.disconnect(),this.render()});return void t.observe(this,{childList:!0})}this.root=this._stampTemplate(e),this.$=this.root.$,this.__children=[];for(let e=this.root.firstChild;e;e=e.nextSibling)this.__children[this.__children.length]=e;this._enableProperties()}this.__insertChildren(),this.dispatchEvent(new CustomEvent("dom-change",{bubbles:!0,composed:!0}))}});
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
const Dr=yr(Nt);class Mr extends Dr{static get is(){return"dom-repeat"}static get template(){return null}static get properties(){return{items:{type:Array},as:{type:String,value:"item"},indexAs:{type:String,value:"index"},itemsIndexAs:{type:String,value:"itemsIndex"},sort:{type:Function,observer:"__sortChanged"},filter:{type:Function,observer:"__filterChanged"},observe:{type:String,observer:"__observeChanged"},delay:Number,renderedItemCount:{type:Number,notify:!0,readOnly:!0},initialCount:{type:Number,observer:"__initializeChunking"},targetFramerate:{type:Number,value:20},_targetFrameTime:{type:Number,computed:"__computeFrameTime(targetFramerate)"}}}static get observers(){return["__itemsChanged(items.*)"]}constructor(){super(),this.__instances=[],this.__limit=1/0,this.__pool=[],this.__renderDebouncer=null,this.__itemsIdxToInstIdx={},this.__chunkCount=null,this.__lastChunkTime=null,this.__sortFn=null,this.__filterFn=null,this.__observePaths=null,this.__ctor=null,this.__isDetached=!0,this.template=null}disconnectedCallback(){super.disconnectedCallback(),this.__isDetached=!0;for(let e=0;e<this.__instances.length;e++)this.__detachInstance(e)}connectedCallback(){if(super.connectedCallback(),kr()||(this.style.display="none"),this.__isDetached){this.__isDetached=!1;let e=_e(_e(this).parentNode);for(let t=0;t<this.__instances.length;t++)this.__attachInstance(t,e)}}__ensureTemplatized(){if(!this.__ctor){let e=this.template=this.querySelector("template");if(!e){let e=new MutationObserver(()=>{if(!this.querySelector("template"))throw new Error("dom-repeat requires a <template> child");e.disconnect(),this.__render()});return e.observe(this,{childList:!0}),!1}let t={};t[this.as]=!0,t[this.indexAs]=!0,t[this.itemsIndexAs]=!0,this.__ctor=zr(e,this,{mutableData:this.mutableData,parentModel:!0,instanceProps:t,forwardHostProp:function(e,t){let i=this.__instances;for(let s,r=0;r<i.length&&(s=i[r]);r++)s.forwardHostProp(e,t)},notifyInstanceProp:function(e,t,i){if((s=this.as)===(r=t)||ge(s,r)||ye(s,r)){let s=e[this.itemsIndexAs];t==this.as&&(this.items[s]=i);let r=be(this.as,`${JSCompiler_renameProperty("items",this)}.${s}`,t);this.notifyPath(r,i)}var s,r}})}return!0}__getMethodHost(){return this.__dataHost._methodHost||this.__dataHost}__functionFromPropertyValue(e){if("string"==typeof e){let t=e,i=this.__getMethodHost();return function(){return i[t].apply(i,arguments)}}return e}__sortChanged(e){this.__sortFn=this.__functionFromPropertyValue(e),this.items&&this.__debounceRender(this.__render)}__filterChanged(e){this.__filterFn=this.__functionFromPropertyValue(e),this.items&&this.__debounceRender(this.__render)}__computeFrameTime(e){return Math.ceil(1e3/e)}__initializeChunking(){this.initialCount&&(this.__limit=this.initialCount,this.__chunkCount=this.initialCount,this.__lastChunkTime=performance.now())}__tryRenderChunk(){this.items&&this.__limit<this.items.length&&this.__debounceRender(this.__requestRenderChunk)}__requestRenderChunk(){requestAnimationFrame(()=>this.__renderChunk())}__renderChunk(){let e=performance.now(),t=this._targetFrameTime/(e-this.__lastChunkTime);this.__chunkCount=Math.round(this.__chunkCount*t)||1,this.__limit+=this.__chunkCount,this.__lastChunkTime=e,this.__debounceRender(this.__render)}__observeChanged(){this.__observePaths=this.observe&&this.observe.replace(".*",".").split(" ")}__itemsChanged(e){this.items&&!Array.isArray(this.items)&&console.warn("dom-repeat expected array for `items`, found",this.items),this.__handleItemPath(e.path,e.value)||(this.__initializeChunking(),this.__debounceRender(this.__render))}__handleObservedPaths(e){if(this.__sortFn||this.__filterFn)if(e){if(this.__observePaths){let t=this.__observePaths;for(let i=0;i<t.length;i++)0===e.indexOf(t[i])&&this.__debounceRender(this.__render,this.delay)}}else this.__debounceRender(this.__render,this.delay)}__debounceRender(e,t=0){this.__renderDebouncer=kt.debounce(this.__renderDebouncer,t>0?ke.after(t):Me,e.bind(this)),Dt(this.__renderDebouncer)}render(){this.__debounceRender(this.__render),xi()}__render(){this.__ensureTemplatized()&&(this.__applyFullRefresh(),this.__pool.length=0,this._setRenderedItemCount(this.__instances.length),this.dispatchEvent(new CustomEvent("dom-change",{bubbles:!0,composed:!0})),this.__tryRenderChunk())}__applyFullRefresh(){let e=this.items||[],t=new Array(e.length);for(let i=0;i<e.length;i++)t[i]=i;this.__filterFn&&(t=t.filter((t,i,s)=>this.__filterFn(e[t],i,s))),this.__sortFn&&t.sort((t,i)=>this.__sortFn(e[t],e[i]));const i=this.__itemsIdxToInstIdx={};let s=0;const r=Math.min(t.length,this.__limit);for(;s<r;s++){let r=this.__instances[s],n=t[s],o=e[n];i[n]=s,r?(r._setPendingProperty(this.as,o),r._setPendingProperty(this.indexAs,s),r._setPendingProperty(this.itemsIndexAs,n),r._flushProperties()):this.__insertInstance(o,s,n)}for(let e=this.__instances.length-1;e>=s;e--)this.__detachAndRemoveInstance(e)}__detachInstance(e){let t=this.__instances[e];const i=_e(t.root);for(let e=0;e<t.children.length;e++){let s=t.children[e];i.appendChild(s)}return t}__attachInstance(e,t){let i=this.__instances[e];t.insertBefore(i.root,this)}__detachAndRemoveInstance(e){let t=this.__detachInstance(e);t&&this.__pool.push(t),this.__instances.splice(e,1)}__stampInstance(e,t,i){let s={};return s[this.as]=e,s[this.indexAs]=t,s[this.itemsIndexAs]=i,new this.__ctor(s)}__insertInstance(e,t,i){let s=this.__pool.pop();s?(s._setPendingProperty(this.as,e),s._setPendingProperty(this.indexAs,t),s._setPendingProperty(this.itemsIndexAs,i),s._flushProperties()):s=this.__stampInstance(e,t,i);let r=this.__instances[t+1],n=r?r.children[0]:this;return _e(_e(this).parentNode).insertBefore(s.root,n),this.__instances[t]=s,s}_showHideChildren(e){for(let t=0;t<this.__instances.length;t++)this.__instances[t]._showHideChildren(e)}__handleItemPath(e,t){let i=e.slice(6),s=i.indexOf("."),r=s<0?i:i.substring(0,s);if(r==parseInt(r,10)){let e=s<0?"":i.substring(s+1);this.__handleObservedPaths(e);let n=this.__itemsIdxToInstIdx[r],o=this.__instances[n];if(o){let i=this.as+(e?"."+e:"");o._setPendingPropertyOrPath(i,t,!1,!0),o._flushProperties()}return!0}}itemForElement(e){let t=this.modelForElement(e);return t&&t[this.as]}indexForElement(e){let t=this.modelForElement(e);return t&&t[this.indexAs]}modelForElement(e){return Rr(this.template,e)}}customElements.define(Mr.is,Mr);
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
class Fr extends Nt{static get is(){return"dom-if"}static get template(){return null}static get properties(){return{if:{type:Boolean,observer:"__debounceRender"},restamp:{type:Boolean,observer:"__debounceRender"}}}constructor(){super(),this.__renderDebouncer=null,this.__invalidProps=null,this.__instance=null,this._lastIf=!1,this.__ctor=null,this.__hideTemplateChildren__=!1}__debounceRender(){this.__renderDebouncer=kt.debounce(this.__renderDebouncer,Me,()=>this.__render()),Dt(this.__renderDebouncer)}disconnectedCallback(){super.disconnectedCallback();const e=_e(this).parentNode;e&&(e.nodeType!=Node.DOCUMENT_FRAGMENT_NODE||_e(e).host)||this.__teardownInstance()}connectedCallback(){super.connectedCallback(),kr()||(this.style.display="none"),this.if&&this.__debounceRender()}render(){xi()}__render(){if(this.if){if(!this.__ensureInstance())return;this._showHideChildren()}else this.restamp&&this.__teardownInstance();!this.restamp&&this.__instance&&this._showHideChildren(),this.if!=this._lastIf&&(this.dispatchEvent(new CustomEvent("dom-change",{bubbles:!0,composed:!0})),this._lastIf=this.if)}__ensureInstance(){let e=_e(this).parentNode;if(e){if(!this.__ctor){let e=_e(this).querySelector("template");if(!e){let e=new MutationObserver(()=>{if(!_e(this).querySelector("template"))throw new Error("dom-if requires a <template> child");e.disconnect(),this.__render()});return e.observe(this,{childList:!0}),!1}this.__ctor=zr(e,this,{mutableData:!0,forwardHostProp:function(e,t){this.__instance&&(this.if?this.__instance.forwardHostProp(e,t):(this.__invalidProps=this.__invalidProps||Object.create(null),this.__invalidProps[fe(e)]=!0))}})}if(this.__instance){this.__syncHostProperties();let t=this.__instance.children;if(t&&t.length){if(_e(this).previousSibling!==t[t.length-1])for(let i,s=0;s<t.length&&(i=t[s]);s++)_e(e).insertBefore(i,this)}}else this.__instance=new this.__ctor,_e(e).insertBefore(this.__instance.root,this)}return!0}__syncHostProperties(){let e=this.__invalidProps;if(e){for(let t in e)this.__instance._setPendingProperty(t,this.__dataHost[t]);this.__invalidProps=null,this.__instance._flushProperties()}}__teardownInstance(){if(this.__instance){let e=this.__instance.children;if(e&&e.length){let t=_e(e[0]).parentNode;if(t){t=_e(t);for(let i,s=0;s<e.length&&(i=e[s]);s++)t.removeChild(i)}}this.__instance=null,this.__invalidProps=null}}_showHideChildren(){let e=this.__hideTemplateChildren__||!this.if;this.__instance&&this.__instance._showHideChildren(e)}}customElements.define(Fr.is,Fr);
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let Hr,Br=pe(e=>{let t=Rt(e);return class extends t{static get properties(){return{items:{type:Array},multi:{type:Boolean,value:!1},selected:{type:Object,notify:!0},selectedItem:{type:Object,notify:!0},toggle:{type:Boolean,value:!1}}}static get observers(){return["__updateSelection(multi, items.*)"]}constructor(){super(),this.__lastItems=null,this.__lastMulti=null,this.__selectedMap=null}__updateSelection(e,t){let i=t.path;if(i==JSCompiler_renameProperty("items",this)){let i=t.base||[],s=this.__lastItems;if(e!==this.__lastMulti&&this.clearSelection(),s){let e=Ws(i,s);this.__applySplices(e)}this.__lastItems=i,this.__lastMulti=e}else if(t.path==JSCompiler_renameProperty("items",this)+".splices")this.__applySplices(t.value.indexSplices);else{let e=i.slice((JSCompiler_renameProperty("items",this)+".").length),t=parseInt(e,10);e.indexOf(".")<0&&e==t&&this.__deselectChangedIdx(t)}}__applySplices(e){let t=this.__selectedMap;for(let i=0;i<e.length;i++){let s=e[i];t.forEach((e,i)=>{e<s.index||(e>=s.index+s.removed.length?t.set(i,e+s.addedCount-s.removed.length):t.set(i,-1))});for(let e=0;e<s.addedCount;e++){let i=s.index+e;t.has(this.items[i])&&t.set(this.items[i],i)}}this.__updateLinks();let i=0;t.forEach((e,s)=>{e<0?(this.multi?this.splice(JSCompiler_renameProperty("selected",this),i,1):this.selected=this.selectedItem=null,t.delete(s)):i++})}__updateLinks(){if(this.__dataLinkedPaths={},this.multi){let e=0;this.__selectedMap.forEach(t=>{t>=0&&this.linkPaths(`${JSCompiler_renameProperty("items",this)}.${t}`,`${JSCompiler_renameProperty("selected",this)}.${e++}`)})}else this.__selectedMap.forEach(e=>{this.linkPaths(JSCompiler_renameProperty("selected",this),`${JSCompiler_renameProperty("items",this)}.${e}`),this.linkPaths(JSCompiler_renameProperty("selectedItem",this),`${JSCompiler_renameProperty("items",this)}.${e}`)})}clearSelection(){this.__dataLinkedPaths={},this.__selectedMap=new Map,this.selected=this.multi?[]:null,this.selectedItem=null}isSelected(e){return this.__selectedMap.has(e)}isIndexSelected(e){return this.isSelected(this.items[e])}__deselectChangedIdx(e){let t=this.__selectedIndexForItemIndex(e);if(t>=0){let e=0;this.__selectedMap.forEach((i,s)=>{t==e++&&this.deselect(s)})}}__selectedIndexForItemIndex(e){let t=this.__dataLinkedPaths[`${JSCompiler_renameProperty("items",this)}.${e}`];if(t)return parseInt(t.slice((JSCompiler_renameProperty("selected",this)+".").length),10)}deselect(e){let t=this.__selectedMap.get(e);if(t>=0){let i;this.__selectedMap.delete(e),this.multi&&(i=this.__selectedIndexForItemIndex(t)),this.__updateLinks(),this.multi?this.splice(JSCompiler_renameProperty("selected",this),i,1):this.selected=this.selectedItem=null}}deselectIndex(e){this.deselect(this.items[e])}select(e){this.selectIndex(this.items.indexOf(e))}selectIndex(e){let t=this.items[e];this.isSelected(t)?this.toggle&&this.deselectIndex(e):(this.multi||this.__selectedMap.clear(),this.__selectedMap.set(t,e),this.__updateLinks(),this.multi?this.push(JSCompiler_renameProperty("selected",this),t):this.selected=this.selectedItem=t)}}})(Nt);class Vr extends Br{static get is(){return"array-selector"}static get template(){return null}}customElements.define(Vr.is,Vr),Hr=gr._mutablePropertyChange;Boolean;const $r=ar(HTMLElement).prototype;
/**
@license
Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
part of the polymer project is also subject to an additional IP rights grant
found at http://polymer.github.io/PATENTS.txt
*/
var jr=new Set;const qr={properties:{_parentResizable:{type:Object,observer:"_parentResizableChanged"},_notifyingDescendant:{type:Boolean,value:!1}},listeners:{"iron-request-resize-notifications":"_onIronRequestResizeNotifications"},created:function(){this._interestedResizables=[],this._boundNotifyResize=this.notifyResize.bind(this),this._boundOnDescendantIronResize=this._onDescendantIronResize.bind(this)},attached:function(){this._requestResizeNotifications()},detached:function(){this._parentResizable?this._parentResizable.stopResizeNotificationsFor(this):(jr.delete(this),window.removeEventListener("resize",this._boundNotifyResize)),this._parentResizable=null},notifyResize:function(){this.isAttached&&(this._interestedResizables.forEach((function(e){this.resizerShouldNotify(e)&&this._notifyDescendant(e)}),this),this._fireResize())},assignParentResizable:function(e){this._parentResizable&&this._parentResizable.stopResizeNotificationsFor(this),this._parentResizable=e,e&&-1===e._interestedResizables.indexOf(this)&&(e._interestedResizables.push(this),e._subscribeIronResize(this))},stopResizeNotificationsFor:function(e){var t=this._interestedResizables.indexOf(e);t>-1&&(this._interestedResizables.splice(t,1),this._unsubscribeIronResize(e))},_subscribeIronResize:function(e){e.addEventListener("iron-resize",this._boundOnDescendantIronResize)},_unsubscribeIronResize:function(e){e.removeEventListener("iron-resize",this._boundOnDescendantIronResize)},resizerShouldNotify:function(e){return!0},_onDescendantIronResize:function(e){this._notifyingDescendant?e.stopPropagation():z||this._fireResize()},_fireResize:function(){this.fire("iron-resize",null,{node:this,bubbles:!1})},_onIronRequestResizeNotifications:function(e){var t=ir(e).rootTarget;t!==this&&(t.assignParentResizable(this),this._notifyDescendant(t),e.stopPropagation())},_parentResizableChanged:function(e){e&&window.removeEventListener("resize",this._boundNotifyResize)},_notifyDescendant:function(e){this.isAttached&&(this._notifyingDescendant=!0,e.notifyResize(),this._notifyingDescendant=!1)},_requestResizeNotifications:function(){if(this.isAttached)if("loading"===document.readyState){var e=this._requestResizeNotifications.bind(this);document.addEventListener("readystatechange",(function t(){document.removeEventListener("readystatechange",t),e()}))}else this._findParent(),this._parentResizable?this._parentResizable._interestedResizables.forEach((function(e){e!==this&&e._findParent()}),this):(jr.forEach((function(e){e!==this&&e._findParent()}),this),window.addEventListener("resize",this._boundNotifyResize),this.notifyResize())},_findParent:function(){this.assignParentResizable(null),this.fire("iron-request-resize-notifications",null,{node:this,bubbles:!0,cancelable:!0}),this._parentResizable?jr.delete(this):jr.add(this)}},Wr={properties:{scrollTarget:{type:HTMLElement,value:function(){return this._defaultScrollTarget}}},observers:["_scrollTargetChanged(scrollTarget, isAttached)"],_shouldHaveListener:!0,_scrollTargetChanged:function(e,t){if(this._oldScrollTarget&&(this._toggleScrollListener(!1,this._oldScrollTarget),this._oldScrollTarget=null),t)if("document"===e)this.scrollTarget=this._doc;else if("string"==typeof e){var i=this.domHost;this.scrollTarget=i&&i.$?i.$[e]:ir(this.ownerDocument).querySelector("#"+e)}else this._isValidScrollTarget()&&(this._oldScrollTarget=e,this._toggleScrollListener(this._shouldHaveListener,e))},_scrollHandler:function(){},get _defaultScrollTarget(){return this._doc},get _doc(){return this.ownerDocument.documentElement},get _scrollTop(){return this._isValidScrollTarget()?this.scrollTarget===this._doc?window.pageYOffset:this.scrollTarget.scrollTop:0},get _scrollLeft(){return this._isValidScrollTarget()?this.scrollTarget===this._doc?window.pageXOffset:this.scrollTarget.scrollLeft:0},set _scrollTop(e){this.scrollTarget===this._doc?window.scrollTo(window.pageXOffset,e):this._isValidScrollTarget()&&(this.scrollTarget.scrollTop=e)},set _scrollLeft(e){this.scrollTarget===this._doc?window.scrollTo(e,window.pageYOffset):this._isValidScrollTarget()&&(this.scrollTarget.scrollLeft=e)},scroll:function(e,t){var i;"object"==typeof e?(i=e.left,t=e.top):i=e,i=i||0,t=t||0,this.scrollTarget===this._doc?window.scrollTo(i,t):this._isValidScrollTarget()&&(this.scrollTarget.scrollLeft=i,this.scrollTarget.scrollTop=t)},get _scrollTargetWidth(){return this._isValidScrollTarget()?this.scrollTarget===this._doc?window.innerWidth:this.scrollTarget.offsetWidth:0},get _scrollTargetHeight(){return this._isValidScrollTarget()?this.scrollTarget===this._doc?window.innerHeight:this.scrollTarget.offsetHeight:0},_isValidScrollTarget:function(){return this.scrollTarget instanceof HTMLElement},_toggleScrollListener:function(e,t){var i=t===this._doc?window:t;e?this._boundScrollHandler||(this._boundScrollHandler=this._scrollHandler.bind(this),i.addEventListener("scroll",this._boundScrollHandler)):this._boundScrollHandler&&(i.removeEventListener("scroll",this._boundScrollHandler),this._boundScrollHandler=null)},toggleScrollListener:function(e){this._shouldHaveListener=e,this._toggleScrollListener(e,this.scrollTarget)}};
/**
@license
Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
part of the polymer project is also subject to an additional IP rights grant
found at http://polymer.github.io/PATENTS.txt
*/
/**
@license
Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
var Gr=navigator.userAgent.match(/iP(?:hone|ad;(?: U;)? CPU) OS (\d+)/),Ur=Gr&&Gr[1]>=8,Yr=Le,Jr=De,Xr=Me;const Kr=_r({behaviors:[qr,Wr],_ratio:.5,_scrollerPaddingTop:0,_scrollPosition:0,_physicalSize:0,_physicalAverage:0,_physicalAverageCount:0,_physicalTop:0,_virtualCount:0,_estScrollHeight:0,_scrollHeight:0,_viewportHeight:0,_viewportWidth:0,_physicalItems:null,_physicalSizes:null,_firstVisibleIndexVal:null,_collection:null,_lastVisibleIndexVal:null,_maxPages:2,_focusedVirtualIndex:-1,_itemsPerRow:1,_rowHeight:0,_templateCost:0,get _physicalBottom(){return this._physicalTop+this._physicalSize},get _scrollBottom(){return this._scrollPosition+this._viewportHeight},get _virtualEnd(){return this._virtualStart+this._physicalCount-1},get _hiddenContentSize(){return(this.grid?this._physicalRows*this._rowHeight:this._physicalSize)-this._viewportHeight},get _maxScrollTop(){return this._estScrollHeight-this._viewportHeight+this._scrollOffset},get _maxVirtualStart(){var e=this._convertIndexToCompleteRow(this._virtualCount);return Math.max(0,e-this._physicalCount)},set _virtualStart(e){e=this._clamp(e,0,this._maxVirtualStart),this.grid&&(e-=e%this._itemsPerRow),this._virtualStartVal=e},get _virtualStart(){return this._virtualStartVal||0},set _physicalStart(e){(e%=this._physicalCount)<0&&(e=this._physicalCount+e),this.grid&&(e-=e%this._itemsPerRow),this._physicalStartVal=e},get _physicalStart(){return this._physicalStartVal||0},get _physicalEnd(){return(this._physicalStart+this._physicalCount-1)%this._physicalCount},set _physicalCount(e){this._physicalCountVal=e},get _physicalCount(){return this._physicalCountVal||0},get _optPhysicalSize(){return 0===this._viewportHeight?1/0:this._viewportHeight*this._maxPages},get _isVisible(){return Boolean(this.offsetWidth||this.offsetHeight)},get firstVisibleIndex(){var e=this._firstVisibleIndexVal;if(null==e){var t=this._physicalTop+this._scrollOffset;e=this._iterateItems((function(e,i){return(t+=this._getPhysicalSizeIncrement(e))>this._scrollPosition?this.grid?i-i%this._itemsPerRow:i:this.grid&&this._virtualCount-1===i?i-i%this._itemsPerRow:void 0}))||0,this._firstVisibleIndexVal=e}return e},get lastVisibleIndex(){var e=this._lastVisibleIndexVal;if(null==e){if(this.grid)e=Math.min(this._virtualCount,this.firstVisibleIndex+this._estRowsInView*this._itemsPerRow-1);else{var t=this._physicalTop+this._scrollOffset;this._iterateItems((function(i,s){t<this._scrollBottom&&(e=s),t+=this._getPhysicalSizeIncrement(i)}))}this._lastVisibleIndexVal=e}return e},get _scrollOffset(){return this._scrollerPaddingTop},attached:function(){this._debounce("_render",this._render,Yr),this.listen(this,"iron-resize","_resizeHandler")},detached:function(){this.unlisten(this,"iron-resize","_resizeHandler")},updateViewportBoundaries:function(){var e=window.getComputedStyle(this);this._scrollerPaddingTop=this.scrollTarget===this?0:parseInt(e["padding-top"],10),this._isRTL=Boolean("rtl"===e.direction),this._viewportWidth=this.$.items.offsetWidth,this._viewportHeight=this._scrollTargetHeight,this.grid&&this._updateGridMetrics()},_scrollHandler:function(){var e=Math.max(0,Math.min(this._maxScrollTop,this._scrollTop)),t=e-this._scrollPosition,i=t>=0;if(this._scrollPosition=e,this._firstVisibleIndexVal=null,this._lastVisibleIndexVal=null,Math.abs(t)>this._physicalSize&&this._physicalSize>0){t-=this._scrollOffset;var s=Math.round(t/this._physicalAverage)*this._itemsPerRow;this._virtualStart=this._virtualStart+s,this._physicalStart=this._physicalStart+s,this._physicalTop=Math.floor(this._virtualStart/this._itemsPerRow)*this._physicalAverage,this._update()}else if(this._physicalCount>0){var r=this._getReusables(i);i?(this._physicalTop=r.physicalTop,this._virtualStart=this._virtualStart+r.indexes.length,this._physicalStart=this._physicalStart+r.indexes.length):(this._virtualStart=this._virtualStart-r.indexes.length,this._physicalStart=this._physicalStart-r.indexes.length),this._update(r.indexes,i?null:r.indexes),this._debounce("_increasePoolIfNeeded",this._increasePoolIfNeeded.bind(this,0),Xr)}},_getReusables:function(e){var t,i,s,r=[],n=this._hiddenContentSize*this._ratio,o=this._virtualStart,a=this._virtualEnd,l=this._physicalCount,h=this._physicalTop+this._scrollOffset,d=this._physicalBottom+this._scrollOffset,c=this._scrollTop,u=this._scrollBottom;for(e?(t=this._physicalStart,i=c-h):(t=this._physicalEnd,i=d-u);i-=s=this._getPhysicalSizeIncrement(t),!(r.length>=l||i<=n);)if(e){if(a+r.length+1>=this._virtualCount)break;if(h+s>=c-this._scrollOffset)break;r.push(t),h+=s,t=(t+1)%l}else{if(o-r.length<=0)break;if(h+this._physicalSize-s<=u)break;r.push(t),h-=s,t=0===t?l-1:t-1}return{indexes:r,physicalTop:h-this._scrollOffset}},_update:function(e,t){if(!(e&&0===e.length||0===this._physicalCount)){if(this._manageFocus(),this._assignModels(e),this._updateMetrics(e),t)for(;t.length;){var i=t.pop();this._physicalTop-=this._getPhysicalSizeIncrement(i)}this._positionItems(),this._updateScrollerSize()}},_isClientFull:function(){return 0!=this._scrollBottom&&this._physicalBottom-1>=this._scrollBottom&&this._physicalTop<=this._scrollPosition},_increasePoolIfNeeded:function(e){var t=this._clamp(this._physicalCount+e,3,this._virtualCount-this._virtualStart),i=(t=this._convertIndexToCompleteRow(t))-this._physicalCount,s=Math.round(.5*this._physicalCount);if(!(i<0)){if(i>0){var r=window.performance.now();[].push.apply(this._physicalItems,this._createPool(i));for(var n=0;n<i;n++)this._physicalSizes.push(0);this._physicalCount=this._physicalCount+i,this._physicalStart>this._physicalEnd&&this._isIndexRendered(this._focusedVirtualIndex)&&this._getPhysicalIndex(this._focusedVirtualIndex)<this._physicalEnd&&(this._physicalStart=this._physicalStart+i),this._update(),this._templateCost=(window.performance.now()-r)/i,s=Math.round(.5*this._physicalCount)}this._virtualEnd>=this._virtualCount-1||0===s||(this._isClientFull()?this._physicalSize<this._optPhysicalSize&&this._debounce("_increasePoolIfNeeded",this._increasePoolIfNeeded.bind(this,this._clamp(Math.round(50/this._templateCost),1,s)),Jr):this._debounce("_increasePoolIfNeeded",this._increasePoolIfNeeded.bind(this,s),Xr))}},_render:function(){if(this.isAttached&&this._isVisible)if(0!==this._physicalCount){var e=this._getReusables(!0);this._physicalTop=e.physicalTop,this._virtualStart=this._virtualStart+e.indexes.length,this._physicalStart=this._physicalStart+e.indexes.length,this._update(e.indexes),this._update(),this._increasePoolIfNeeded(0)}else this._virtualCount>0&&(this.updateViewportBoundaries(),this._increasePoolIfNeeded(3))},_itemsChanged:function(e){"items"===e.path&&(this._virtualStart=0,this._physicalTop=0,this._virtualCount=this.items?this.items.length:0,this._collection=(this.items,null),this._physicalIndexForKey={},this._firstVisibleIndexVal=null,this._lastVisibleIndexVal=null,this._physicalCount=this._physicalCount||0,this._physicalItems=this._physicalItems||[],this._physicalSizes=this._physicalSizes||[],this._physicalStart=0,this._scrollTop>this._scrollOffset&&this._resetScrollPosition(0),this._removeFocusedItem(),this._debounce("_render",this._render,Yr))},_iterateItems:function(e,t){var i,s,r,n;if(2===arguments.length&&t){for(n=0;n<t.length;n++)if(i=t[n],s=this._computeVidx(i),null!=(r=e.call(this,i,s)))return r}else{for(i=this._physicalStart,s=this._virtualStart;i<this._physicalCount;i++,s++)if(null!=(r=e.call(this,i,s)))return r;for(i=0;i<this._physicalStart;i++,s++)if(null!=(r=e.call(this,i,s)))return r}},_computeVidx:function(e){return e>=this._physicalStart?this._virtualStart+(e-this._physicalStart):this._virtualStart+(this._physicalCount-this._physicalStart)+e},_updateMetrics:function(e){xi();var t=0,i=0,s=this._physicalAverageCount,r=this._physicalAverage;this._iterateItems((function(e,s){i+=this._physicalSizes[e],this._physicalSizes[e]=this._physicalItems[e].offsetHeight,t+=this._physicalSizes[e],this._physicalAverageCount+=this._physicalSizes[e]?1:0}),e),this.grid?(this._updateGridMetrics(),this._physicalSize=Math.ceil(this._physicalCount/this._itemsPerRow)*this._rowHeight):(i=1===this._itemsPerRow?i:Math.ceil(this._physicalCount/this._itemsPerRow)*this._rowHeight,this._physicalSize=this._physicalSize+t-i,this._itemsPerRow=1),this._physicalAverageCount!==s&&(this._physicalAverage=Math.round((r*s+t)/this._physicalAverageCount))},_positionItems:function(){this._adjustScrollPosition();var e=this._physicalTop;this._iterateItems((function(t,i){this.translate3d(0,e+"px",0,this._physicalItems[t]),e+=this._physicalSizes[t]}))},_getPhysicalSizeIncrement:function(e){return this.grid?this._computeVidx(e)%this._itemsPerRow!=this._itemsPerRow-1?0:this._rowHeight:this._physicalSizes[e]},_adjustScrollPosition:function(){var e=0===this._virtualStart?this._physicalTop:Math.min(this._scrollPosition+this._physicalTop,0);if(0!==e){this._physicalTop=this._physicalTop-e;var t=this._scrollTop;!Ur&&t>0&&this._resetScrollPosition(t-e)}},_resetScrollPosition:function(e){this.scrollTarget&&e>=0&&(this._scrollTop=e,this._scrollPosition=this._scrollTop)},_updateScrollerSize:function(e){this.grid?this._estScrollHeight=this._virtualRowCount*this._rowHeight:this._estScrollHeight=this._physicalBottom+Math.max(this._virtualCount-this._physicalCount-this._virtualStart,0)*this._physicalAverage,((e=(e=(e=e||0===this._scrollHeight)||this._scrollPosition>=this._estScrollHeight-this._physicalSize)||this.grid&&this.$.items.style.height<this._estScrollHeight)||Math.abs(this._estScrollHeight-this._scrollHeight)>=this._viewportHeight)&&(this.$.items.style.height=this._estScrollHeight+"px",this._scrollHeight=this._estScrollHeight)},scrollToIndex:function(e){if(!("number"!=typeof e||e<0||e>this.items.length-1)&&(xi(),0!==this._physicalCount)){e=this._clamp(e,0,this._virtualCount-1),(!this._isIndexRendered(e)||e>=this._maxVirtualStart)&&(this._virtualStart=this.grid?e-2*this._itemsPerRow:e-1),this._manageFocus(),this._assignModels(),this._updateMetrics(),this._physicalTop=Math.floor(this._virtualStart/this._itemsPerRow)*this._physicalAverage;for(var t=this._physicalStart,i=this._virtualStart,s=0,r=this._hiddenContentSize;i<e&&s<=r;)s+=this._getPhysicalSizeIncrement(t),t=(t+1)%this._physicalCount,i++;this._updateScrollerSize(!0),this._positionItems(),this._resetScrollPosition(this._physicalTop+this._scrollOffset+s),this._increasePoolIfNeeded(0),this._firstVisibleIndexVal=null,this._lastVisibleIndexVal=null}},_resetAverage:function(){this._physicalAverage=0,this._physicalAverageCount=0},_resizeHandler:function(){this._debounce("_render",(function(){this._firstVisibleIndexVal=null,this._lastVisibleIndexVal=null,this.updateViewportBoundaries(),this._isVisible?(this.toggleScrollListener(!0),this._resetAverage(),this._render()):this.toggleScrollListener(!1)}),Yr)},_convertIndexToCompleteRow:function(e){return this._itemsPerRow=this._itemsPerRow||1,this.grid?Math.ceil(e/this._itemsPerRow)*this._itemsPerRow:e},_isIndexRendered:function(e){return e>=this._virtualStart&&e<=this._virtualEnd},_getPhysicalIndex:function(e){return(this._physicalStart+(e-this._virtualStart))%this._physicalCount},_clamp:function(e,t,i){return Math.min(i,Math.max(t,e))},_debounce:function(e,t,i){this._debouncers=this._debouncers||{},this._debouncers[e]=kt.debounce(this._debouncers[e],i,t.bind(this)),Dt(this._debouncers[e])}});
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/class Zr extends Kr{static get is(){return"vaadin-grid-scroller"}static get properties(){return{size:{type:Number,notify:!0},_vidxOffset:{value:0}}}static get observers(){return["_effectiveSizeChanged(_effectiveSize)"]}connectedCallback(){super.connectedCallback(),this._scrollHandler()}_updateScrollerItem(e,t){}_afterScroll(){}_getRowTarget(){}_createScrollerRows(){}_canPopulate(){}scrollToIndex(e){this._warnPrivateAPIAccess("scrollToIndex"),e>0&&(this._pendingScrollToIndex=null),!parseInt(this.$.items.style.borderTopWidth)&&e>0&&(this._pendingScrollToIndex=e),this._scrollingToIndex=!0,e=Math.min(Math.max(e,0),this._effectiveSize-1),this.$.table.scrollTop=e/this._effectiveSize*(this.$.table.scrollHeight-this.$.table.offsetHeight),this._scrollHandler(),this._accessIronListAPI(()=>this._maxScrollTop)&&this._virtualCount<this._effectiveSize&&this._adjustVirtualIndexOffset(1e6),this._accessIronListAPI(()=>super.scrollToIndex(e-this._vidxOffset)),this._scrollHandler();const t=Array.from(this.$.items.children).filter(t=>t.index===e)[0];if(t){const e=t.getBoundingClientRect().top-this.$.header.getBoundingClientRect().bottom;Math.abs(e)>1&&(this.$.table.scrollTop+=e,this._scrollHandler())}this._scrollingToIndex=!1}_effectiveSizeChanged(e){let t,i=0;if(this._iterateItems((e,s)=>{if(s===this._firstVisibleIndex){const s=this._physicalItems[e];t=s.index,i=s.getBoundingClientRect().top}}),this.items&&e<this.items.length&&(this._scrollTop=0),!Array.isArray(this.items)){const t=this._edge||this._ie?3e4:1e5;this.items={length:Math.min(e,t)}}this._accessIronListAPI(()=>super._itemsChanged({path:"items"})),this._virtualCount=Math.min(this.items.length,e)||0,0===this._scrollTop&&(this._accessIronListAPI(()=>this._scrollToIndex(Math.min(e-1,t))),this._iterateItems((e,s)=>{const r=this._physicalItems[e];if(r.index===t&&(this.$.table.scrollTop+=Math.round(r.getBoundingClientRect().top-i)),r.index===this._focusedItemIndex&&this._itemsFocusable&&this.$.items.contains(this.shadowRoot.activeElement)){const e=Array.from(this._itemsFocusable.parentElement.children).indexOf(this._itemsFocusable);r.children[e].focus()}})),this._assignModels(),requestAnimationFrame(()=>this._update())}_positionItems(){let e;this._adjustScrollPosition(),isNaN(this._physicalTop)&&(e=!0,this._physicalTop=0);let t=this._physicalTop;this._iterateItems((e,i)=>{this._physicalItems[e].style.transform=`translateY(${t}px)`,t+=this._physicalSizes[e]}),e&&this._scrollToIndex(0)}_increasePoolIfNeeded(e){0===e&&this._scrollingToIndex||!this._canPopulate()||!this._effectiveSize||(this._initialPoolCreated?this._optPhysicalSize!==1/0&&(this._debounceIncreasePool=kt.debounce(this._debounceIncreasePool,Le,()=>{this._updateMetrics();const e=this._optPhysicalSize-this._physicalSize;let t=Math.ceil(e/this._physicalAverage);this._physicalCount+t>this._effectiveSize&&(t=Math.max(0,this._effectiveSize-this._physicalCount)),this._physicalSize&&t>0&&(super._increasePoolIfNeeded(t),this.__reorderChildNodes())})):(this._initialPoolCreated=!0,super._increasePoolIfNeeded(25)))}__reorderChildNodes(){const e=Array.from(this.$.items.childNodes);!!e.reduce((e,t,i,s)=>{if(0===i||s[i-1].index===t.index-1)return e},!0)||e.sort((e,t)=>e.index-t.index).forEach(e=>this.$.items.appendChild(e))}_createPool(e){const t=document.createDocumentFragment(),i=this._createScrollerRows(e);i.forEach(e=>t.appendChild(e)),this._getRowTarget().appendChild(t);const s=this.querySelector("[slot]");if(s){const e=s.getAttribute("slot");s.setAttribute("slot","foo-bar"),s.setAttribute("slot",e)}return this._updateHeaderFooterMetrics(),Vs(this,()=>this.notifyResize()),i}_assignModels(e){this._iterateItems((e,t)=>{const i=this._physicalItems[e];this._toggleAttribute("hidden",t>=this._effectiveSize,i),this._updateScrollerItem(i,t+(this._vidxOffset||0))},e)}_scrollHandler(){const e=this.$.table.scrollTop-this._scrollPosition;this._accessIronListAPI(super._scrollHandler);const t=this._vidxOffset;this._accessIronListAPI(()=>this._maxScrollTop)&&this._virtualCount<this._effectiveSize&&this._adjustVirtualIndexOffset(e),this._vidxOffset!==t&&this._update(),this._afterScroll()}_adjustVirtualIndexOffset(e){if(Math.abs(e)>1e4){if(this._noScale)return void(this._noScale=!1);const e=this.$.table.scrollTop/(this.$.table.scrollHeight-this.$.table.offsetHeight),t=e*this._effectiveSize;this._vidxOffset=Math.round(t-e*this._virtualCount)}else{const e=this._vidxOffset||0,t=1e3,i=100;0===this._scrollTop?(this._vidxOffset=0,e!==this._vidxOffset&&super.scrollToIndex(0)):this.firstVisibleIndex<t&&this._vidxOffset>0&&(this._vidxOffset-=Math.min(this._vidxOffset,i),e!==this._vidxOffset&&super.scrollToIndex(this.firstVisibleIndex+(e-this._vidxOffset)),this._noScale=!0);const s=this._effectiveSize-this._virtualCount;this._scrollTop>=this._maxScrollTop&&this._maxScrollTop>0?(this._vidxOffset=s,e!==this._vidxOffset&&super.scrollToIndex(this._virtualCount)):this.firstVisibleIndex>this._virtualCount-t&&this._vidxOffset<s&&(this._vidxOffset+=Math.min(s-this._vidxOffset,i),e!==this._vidxOffset&&super.scrollToIndex(this.firstVisibleIndex-(this._vidxOffset-e)),this._noScale=!0)}}_accessIronListAPI(e){this._warnPrivateAPIAccessAsyncEnabled=!1;const t=e.apply(this);return this._debouncerWarnPrivateAPIAccess=kt.debounce(this._debouncerWarnPrivateAPIAccess,Le,()=>this._warnPrivateAPIAccessAsyncEnabled=!0),t}_debounceRender(e,t){super._debounceRender(()=>this._accessIronListAPI(e),t)}_warnPrivateAPIAccess(e){this._warnPrivateAPIAccessAsyncEnabled&&console.warn(`Accessing private API (${e})!`)}_render(){this._accessIronListAPI(super._render)}_createFocusBackfillItem(){}_multiSelectionChanged(){}clearSelection(){}_itemsChanged(){}_manageFocus(){}_removeFocusedItem(){}get _firstVisibleIndex(){return this._accessIronListAPI(()=>super.firstVisibleIndex)}get _lastVisibleIndex(){return this._accessIronListAPI(()=>super.lastVisibleIndex)}_scrollToIndex(e){this._accessIronListAPI(()=>this.scrollToIndex(e))}get firstVisibleIndex(){return this._warnPrivateAPIAccess("firstVisibleIndex"),super.firstVisibleIndex}set firstVisibleIndex(e){this._warnPrivateAPIAccess("firstVisibleIndex"),super.firstVisibleIndex=e}get lastVisibleIndex(){return this._warnPrivateAPIAccess("lastVisibleIndex"),super.lastVisibleIndex}set lastVisibleIndex(e){this._warnPrivateAPIAccess("lastVisibleIndex"),super.lastVisibleIndex=e}updateViewportBoundaries(){this._warnPrivateAPIAccess("updateViewportBoundaries"),super.updateViewportBoundaries.apply(this,arguments)}_resizeHandler(){super._resizeHandler(),xi()}}customElements.define(Zr.is,Zr);
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/
const Qr=e=>class extends e{static get observers(){return["_a11yUpdateGridSize(size, _columnTree, _columnTree.*)"]}_a11yGetHeaderRowCount(e){return e.filter(e=>e.some(e=>e._headerTemplate||e.headerRenderer||e.path||e.header)).length}_a11yGetFooterRowCount(e){return e.filter(e=>e.some(e=>e._headerTemplate||e.headerRenderer)).length}_a11yUpdateGridSize(e,t){if(void 0===e||void 0===t)return;const i=t[t.length-1];this.$.table.setAttribute("aria-rowcount",e+this._a11yGetHeaderRowCount(t)+this._a11yGetFooterRowCount(t)),this.$.table.setAttribute("aria-colcount",i&&i.length||0),this._a11yUpdateHeaderRows(),this._a11yUpdateFooterRows()}_a11yUpdateHeaderRows(){Array.from(this.$.header.children).forEach((e,t)=>e.setAttribute("aria-rowindex",t+1))}_a11yUpdateFooterRows(){Array.from(this.$.footer.children).forEach((e,t)=>e.setAttribute("aria-rowindex",this._a11yGetHeaderRowCount(this._columnTree)+this.size+t+1))}_a11yUpdateRowRowindex(e,t){e.setAttribute("aria-rowindex",t+this._a11yGetHeaderRowCount(this._columnTree)+1)}_a11yUpdateRowSelected(e,t){e.setAttribute("aria-selected",Boolean(t)),Array.from(e.children).forEach(e=>e.setAttribute("aria-selected",Boolean(t)))}_a11yUpdateRowLevel(e,t){e.setAttribute("aria-level",t+1)}_a11yUpdateRowDetailsOpened(e,t){Array.from(e.children).forEach(e=>{"boolean"==typeof t?e.setAttribute("aria-expanded",t):e.hasAttribute("aria-expanded")&&e.removeAttribute("aria-expanded")})}_a11ySetRowDetailsCell(e,t){Array.from(e.children).forEach(e=>{e!==t&&e.setAttribute("aria-controls",t.id)})}_a11yUpdateCellColspan(e,t){e.setAttribute("aria-colspan",Number(t))}_a11yUpdateSorters(){Array.from(this.querySelectorAll("vaadin-grid-sorter")).forEach(e=>{let t=e.parentNode;for(;t&&"vaadin-grid-cell-content"!==t.localName;)t=t.parentNode;if(t&&t.assignedSlot){t.assignedSlot.parentNode.setAttribute("aria-sort",{asc:"ascending",desc:"descending"}[String(e.direction)]||"none")}})}}
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/,en=e=>class extends e{static get properties(){return{activeItem:{type:Object,notify:!0,value:null}}}ready(){super.ready(),this.$.scroller.addEventListener("click",this._onClick.bind(this)),this.addEventListener("cell-activate",this._activateItem.bind(this))}_activateItem(e){const t=e.detail.model,i=t?t.item:null;i&&(this.activeItem=this._itemsEqual(this.activeItem,i)?null:i)}_onClick(e){if(e.defaultPrevented)return;const t=e.composedPath(),i=t[t.indexOf(this.$.table)-3];if(!i||i.getAttribute("part").indexOf("details-cell")>-1)return;const s=i._content,r=this.getRootNode().activeElement;s.contains(r)&&(!this._ie||this._isFocusable(r))||this._isFocusable(e.target)||this.dispatchEvent(new CustomEvent("cell-activate",{detail:{model:this.__getRowModel(i.parentElement)}}))}_isFocusable(e){if(!e.parentNode)return!1;const t=-1!==Array.from(e.parentNode.querySelectorAll("[tabindex], button, input, select, textarea, object, iframe, label, a[href], area[href]")).filter(e=>"cell body-cell"!==e.getAttribute("part")).indexOf(e);return!e.disabled&&t}}
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/,tn=e=>class extends e{static get properties(){return{items:Array}}static get observers(){return["_itemsChanged(items, items.*, isAttached)"]}_itemsChanged(e,t,i){if(i){if(!Array.isArray(e))return null==e&&(this.size=0),void(this.dataProvider===this._arrayDataProvider&&(this.dataProvider=void 0));this.size=e.length,this.dataProvider=this.dataProvider||this._arrayDataProvider,this.clearCache(),this._ensureFirstPageLoaded()}}_arrayDataProvider(e,t){let i=(Array.isArray(this.items)?this.items:[]).slice(0);this._filters&&this._checkPaths(this._filters,"filtering",i)&&(i=this._filter(i)),this.size=i.length,e.sortOrders.length&&this._checkPaths(this._sorters,"sorting",i)&&(i=i.sort(this._multiSort.bind(this)));const s=e.page*e.pageSize,r=s+e.pageSize;t(i.slice(s,r),i.length)}_checkPaths(e,t,i){if(!i.length)return!1;let s=!0;for(var r in e){const n=e[r].path;if(!n||-1===n.indexOf("."))continue;const o=n.replace(/\.[^\.]*$/,"");void 0===$r.get(o,i[0])&&(console.warn(`Path "${n}" used for ${t} does not exist in all of the items, ${t} is disabled.`),s=!1)}return s}_multiSort(e,t){return this._sorters.map(i=>"asc"===i.direction?this._compare($r.get(i.path,e),$r.get(i.path,t)):"desc"===i.direction?this._compare($r.get(i.path,t),$r.get(i.path,e)):0).reduce((e,t)=>e||t,0)}_normalizeEmptyValue(e){return[void 0,null].indexOf(e)>=0?"":isNaN(e)?e.toString():e}_compare(e,t){return(e=this._normalizeEmptyValue(e))<(t=this._normalizeEmptyValue(t))?-1:e>t?1:0}_filter(e){return e.filter((e,t)=>0===this._filters.filter(t=>{const i=this._normalizeEmptyValue($r.get(t.path,e)),s=this._normalizeEmptyValue(t.value).toString().toLowerCase();return-1===i.toString().toLowerCase().indexOf(s)}).length)}}
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/,sn=e=>class extends(bi(e)){ready(){super.ready();const e=this.$.scroller;hi(e,"track",this._onHeaderTrack.bind(this)),e.addEventListener("touchmove",t=>e.hasAttribute("column-resizing")&&t.preventDefault()),e.addEventListener("contextmenu",e=>"resize-handle"==e.target.getAttribute("part")&&e.preventDefault()),e.addEventListener("mousedown",e=>"resize-handle"===e.target.getAttribute("part")&&e.preventDefault())}_onHeaderTrack(e){const t=e.target;if("resize-handle"===t.getAttribute("part")){let n=t.parentElement._column;for(this._toggleAttribute("column-resizing",!0,this.$.scroller);"vaadin-grid-column-group"===n.localName;)n=Array.prototype.slice.call(n._childColumns,0).sort((function(e,t){return e._order-t._order})).filter((function(e){return!e.hidden})).pop();const o=Array.from(this.$.header.querySelectorAll('[part~="row"]:last-child [part~="cell"]'));var i=o.filter(e=>e._column===n)[0];if(i.offsetWidth){var s=window.getComputedStyle(i),r=10+parseInt(s.paddingLeft)+parseInt(s.paddingRight)+parseInt(s.borderLeftWidth)+parseInt(s.borderRightWidth)+parseInt(s.marginLeft)+parseInt(s.marginRight);n.width=Math.max(r,i.offsetWidth+e.detail.x-i.getBoundingClientRect().right)+"px",n.flexGrow=0}o.sort((function(e,t){return e._column._order-t._column._order})).forEach((function(e,t,s){t<s.indexOf(i)&&(e._column.width=e.offsetWidth+"px",e._column.flexGrow=0)})),"end"===e.detail.state&&(this._toggleAttribute("column-resizing",!1,this.$.scroller),this.dispatchEvent(new CustomEvent("column-resize",{detail:{resizedColumn:n}}))),this._resizeHandler()}}}
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/,rn=class e{constructor(e,t,i){this.grid=e,this.parentCache=t,this.parentItem=i,this.itemCaches={},this.items={},this.effectiveSize=0,this.size=0,this.pendingRequests={}}isLoading(){return Object.keys(this.pendingRequests).length||Object.keys(this.itemCaches).filter(e=>this.itemCaches[e].isLoading())[0]}getItemForIndex(e){const{cache:t,scaledIndex:i}=this.getCacheAndIndex(e);return t.items[i]}updateSize(){this.effectiveSize=!this.parentItem||this.grid._isExpanded(this.parentItem)?this.size+Object.keys(this.itemCaches).reduce((e,t)=>{const i=this.itemCaches[t];return i.updateSize(),e+i.effectiveSize},0):0}ensureSubCacheForScaledIndex(t){if(!this.itemCaches[t]){const i=new e(this.grid,this,this.items[t]);this.itemCaches[t]=i,this.grid._loadPage(0,i)}}getCacheAndIndex(e){let t=e;const i=Object.keys(this.itemCaches);for(var s=0;s<i.length;s++){const e=Number(i[s]),r=this.itemCaches[e];if(t<=e)return{cache:this,scaledIndex:t};if(t<=e+r.effectiveSize)return r.getCacheAndIndex(t-e-1);t-=r.effectiveSize}return{cache:this,scaledIndex:t}}},nn=e=>class extends e{static get properties(){return{pageSize:{type:Number,value:50,observer:"_pageSizeChanged"},dataProvider:{type:Object,notify:!0,observer:"_dataProviderChanged"},loading:{type:Boolean,notify:!0,readOnly:!0,reflectToAttribute:!0},_cache:{type:Object,value:function(){return new rn(this)}},itemIdPath:{type:String,value:null},expandedItems:{type:Object,notify:!0,value:()=>[]}}}static get observers(){return["_sizeChanged(size)","_itemIdPathChanged(itemIdPath)","_expandedItemsChanged(expandedItems.*)"]}_sizeChanged(e){const t=e-this._cache.size;this._cache.size+=t,this._cache.effectiveSize+=t,this._effectiveSize=this._cache.effectiveSize}_updateRowItem(e,t){t.children.forEach(t=>{t._instance&&(t._instance.item=e)})}_getItem(e,t){if(e>=this._effectiveSize)return;t.index=e;const{cache:i,scaledIndex:s}=this._cache.getCacheAndIndex(e),r=i.items[s];r?(this._toggleAttribute("loading",!1,t),this._updateItem(t,r),this._isExpanded(r)&&i.ensureSubCacheForScaledIndex(s)):(this._toggleAttribute("loading",!0,t),this._loadPage(this._getPageForIndex(s),i))}_pagesForPhysicalItems(){return[this._getPageForIndex(this._firstVisibleIndex+this._vidxOffset)].concat(this._physicalItems.filter(e=>e.index).items(e=>this._getPageForIndex(e.index))).reduce((e,t)=>(-1===e.indexOf(t)&&e.push(t),e),[])}_expandedInstanceChangedCallback(e,t){void 0!==e.item&&(t?this.expandItem(e.item):this.collapseItem(e.item))}getItemId(e){return this.itemIdPath?this.get(this.itemIdPath,e):e}_isExpanded(e){return this.__expandedKeys.has(this.getItemId(e))}_expandedItemsChanged(e){this.__cacheExpandedKeys(),this._cache.updateSize(),this._effectiveSize=this._cache.effectiveSize,this._assignModels()}_itemIdPathChanged(e){this.__cacheExpandedKeys()}__cacheExpandedKeys(){this.expandedItems&&(this.__expandedKeys=new Set,this.expandedItems.forEach(e=>{this.__expandedKeys.add(this.getItemId(e))}))}expandItem(e){this._isExpanded(e)||this.push("expandedItems",e)}collapseItem(e){this._isExpanded(e)&&this.splice("expandedItems",this._getItemIndexInArray(e,this.expandedItems),1)}_getIndexLevel(e){let{cache:t}=this._cache.getCacheAndIndex(e),i=0;for(;t.parentCache;)t=t.parentCache,i++;return i}_canPopulate(){return this._hasData&&this._columnTree}_loadPage(e,t){if(!t.pendingRequests[e]&&this.dataProvider){this._setLoading(!0),t.pendingRequests[e]=!0;const i={page:e,pageSize:this.pageSize,sortOrders:this._mapSorters(),filters:this._mapFilters(),parentItem:t.parentItem};this.dataProvider(i,(s,r)=>{void 0!==r?t.size=r:i.parentItem&&(t.size=s.length);const n=Array.from(this.$.items.children).map(e=>e._item);s.forEach((i,s)=>{const r=e*this.pageSize+s;t.items[r]=i,this._isExpanded(i)&&n.indexOf(i)>-1&&t.ensureSubCacheForScaledIndex(r)}),this._hasData=!0,delete t.pendingRequests[e],this._setLoading(!1),this._cache.updateSize(),this._effectiveSize=this._cache.effectiveSize,Array.from(this.$.items.children).filter(e=>!e.hidden).forEach(e=>{const t=this._cache.getItemForIndex(e.index);t&&(this._toggleAttribute("loading",!1,e),this._updateItem(e,t))}),this._increasePoolIfNeeded(0),this.__itemsReceived()})}}_getPageForIndex(e){return Math.floor(e/this.pageSize)}clearCache(){this._cache=new rn(this),Array.from(this.$.items.children).forEach(e=>{Array.from(e.children).forEach(e=>{e._instance&&e._instance._setPendingProperty("item",{},!1)})}),this._cache.size=this.size||0,this._cache.updateSize(),this._hasData=!1,this._assignModels(),this._effectiveSize||this._loadPage(0,this._cache)}_flushItemsDebouncer(){this._debouncerLoad&&this._debouncerLoad.flush()}_pageSizeChanged(e,t){void 0!==t&&e!==t&&this.clearCache()}_checkSize(){void 0===this.size&&0===this._effectiveSize&&console.warn("The <vaadin-grid> needs the total number of items in order to display rows. Set the total number of items to the `size` property, or provide the total number of items in the second argument of the `dataProvider`’s `callback` call.")}_dataProviderChanged(e,t){void 0!==t&&this.clearCache(),e&&this.items&&this.items.length&&this._scrollToIndex(this._firstVisibleIndex),this._ensureFirstPageLoaded(),this._debouncerCheckSize=kt.debounce(this._debouncerCheckSize,ke.after(2e3),this._checkSize.bind(this)),this._scrollHandler()}_ensureFirstPageLoaded(){this._hasData||this._loadPage(0,this._cache,()=>{const e=this._hasData;this._hasData=!0,e||this.notifyResize()})}_itemsEqual(e,t){return this.getItemId(e)===this.getItemId(t)}_getItemIndexInArray(e,t){let i=-1;return t.forEach((t,s)=>{this._itemsEqual(t,e)&&(i=s)}),i}}
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/,on=e=>class extends e{ready(){super.ready(),this._addNodeObserver()}_hasColumnGroups(e){for(let t=0;t<e.length;t++)if("vaadin-grid-column-group"===e[t].localName)return!0;return!1}_getChildColumns(e){return Ys.getFlattenedNodes(e).filter(this._isColumnElement)}_flattenColumnGroups(e){return e.map(e=>"vaadin-grid-column-group"===e.localName?this._getChildColumns(e):[e]).reduce((e,t)=>e.concat(t),[])}_getColumnTree(){for(var e=[],t=Ys.getFlattenedNodes(this).filter(this._isColumnElement);e.push(t),this._hasColumnGroups(t);)t=this._flattenColumnGroups(t);return e}_updateColumnTree(){var e=this._getColumnTree();this._arrayEquals(e,this._columnTree)||(this._columnTree=e)}_addNodeObserver(){this._observer=new Ys(this,e=>{const t=e.addedNodes.filter(e=>"template"===e.localName&&e.classList.contains("row-details"))[0];t&&this._rowDetailsTemplate!==t&&(this._rowDetailsTemplate=t),(e.addedNodes.filter(this._isColumnElement).length>0||e.removedNodes.filter(this._isColumnElement).length>0)&&this._updateColumnTree(),this._debouncerCheckImports=kt.debounce(this._debouncerCheckImports,ke.after(2e3),this._checkImports.bind(this)),this._ensureFirstPageLoaded()})}_arrayEquals(e,t){if(!e||!t||e.length!=t.length)return!1;for(var i=0,s=e.length;i<s;i++)if(e[i]instanceof Array&&t[i]instanceof Array){if(!this._arrayEquals(e[i],t[i]))return!1}else if(e[i]!=t[i])return!1;return!0}_checkImports(){["vaadin-grid-column-group","vaadin-grid-filter","vaadin-grid-filter-column","vaadin-grid-tree-toggle","vaadin-grid-selection-column","vaadin-grid-sort-column","vaadin-grid-sorter"].forEach(e=>{var t=this.querySelector(e);!t||t instanceof Nt||console.warn(`Make sure you have imported the required module for <${e}> element.`)})}_updateFirstAndLastColumn(){Array.from(this.shadowRoot.querySelectorAll("tr")).forEach(e=>this._updateFirstAndLastColumnForRow(e))}_updateFirstAndLastColumnForRow(e){Array.from(e.querySelectorAll('[part~="cell"]:not([part~="details-cell"])')).sort((e,t)=>e._column._order-t._column._order).forEach((e,t,i)=>{this._toggleAttribute("first-column",0===t,e),this._toggleAttribute("last-column",t===i.length-1,e)})}_isColumnElement(e){return e.nodeType===Node.ELEMENT_NODE&&/\bcolumn\b/.test(e.localName)}}
/**
@license
Copyright (c) 2018 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/,an=e=>class extends e{getEventContext(e){const t={},i=e.composedPath(),s=i[i.indexOf(this.$.table)-3];return s?(t.section=["body","header","footer","details"].filter(e=>s.getAttribute("part").indexOf(e)>-1)[0],s._column&&(t.column=s._column),"body"!==t.section&&"details"!==t.section||Object.assign(t,this.__getRowModel(s.parentElement)),t):t}}
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/,ln=e=>class extends e{static get properties(){return{_filters:{type:Array,value:function(){return[]}}}}ready(){super.ready(),this.addEventListener("filter-changed",this._filterChanged.bind(this))}_filterChanged(e){-1===this._filters.indexOf(e.target)&&this._filters.push(e.target),e.stopPropagation(),this.dataProvider&&this.clearCache()}_mapFilters(){return this._filters.map(e=>({path:e.path,value:e.value}))}}
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/;class hn extends class extends Nt{}{static get is(){return"vaadin-grid-templatizer"}static get properties(){return{dataHost:Object,template:Object,_templateInstances:{type:Array,value:function(){return[]}},_parentPathValues:{value:function(){return{}}},_grid:Object}}static get observers(){return["_templateInstancesChanged(_templateInstances.*, _parentPathValues.*)"]}constructor(){super(),this._instanceProps={detailsOpened:!0,index:!0,item:!0,selected:!0,expanded:!0,level:!0}}createInstance(){this._ensureTemplatized();const e=new this._TemplateClass({});return this.addInstance(e),e}addInstance(e){-1===this._templateInstances.indexOf(e)&&(this._templateInstances.push(e),requestAnimationFrame(()=>this.notifyPath("_templateInstances.*",this._templateInstances)))}removeInstance(e){const t=this._templateInstances.indexOf(e);this.splice("_templateInstances",t,1)}_ensureTemplatized(){this._TemplateClass||(this._TemplateClass=zr(this.template,this,{instanceProps:this._instanceProps,parentModel:!0,forwardHostProp:function(e,t){this._forwardParentProp(e,t),this._templateInstances&&this._templateInstances.forEach(i=>i.notifyPath(e,t))},notifyInstanceProp:function(e,t,i){if("index"===t||"item"===t)return;const s=`__${t}__`;if(e[s]===i)return;e[s]=i;const r=Array.from(this._grid.$.items.children).filter(t=>this._grid._itemsEqual(t._item,e.item))[0];r&&Array.from(r.children).forEach(e=>{e._instance&&(e._instance[s]=i,e._instance.notifyPath(t,i))});if(Array.isArray(this._grid.items)&&0===t.indexOf("item.")){const s=this._grid.items.indexOf(e.item),r=t.slice("item.".length);this._grid.notifyPath(`items.${s}.${r}`,i)}const n=`_${t}InstanceChangedCallback`;this._grid&&this._grid[n]&&this._grid[n](e,i)}}))}_forwardParentProp(e,t){this._parentPathValues[e]=t,this._templateInstances.forEach(i=>i.notifyPath(e,t))}_templateInstancesChanged(e,t){let i,s;if("_templateInstances"===e.path)i=0,s=this._templateInstances.length;else{if("_templateInstances.splices"!==e.path)return;i=e.value.index,s=e.value.addedCount}Object.keys(this._parentPathValues||{}).forEach(e=>{for(var t=i;t<i+s;t++)this._templateInstances[t].set(e,this._parentPathValues[e])})}}customElements.define(hn.is,hn);
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/
const dn=e=>class extends e{static get properties(){return{detailsOpenedItems:{type:Array,value:function(){return[]}},_rowDetailsTemplate:Object,rowDetailsRenderer:Function,_detailsCells:{type:Array}}}static get observers(){return["_detailsOpenedItemsChanged(detailsOpenedItems.*, _rowDetailsTemplate, rowDetailsRenderer)","_rowDetailsTemplateOrRendererChanged(_rowDetailsTemplate, rowDetailsRenderer)"]}_rowDetailsTemplateOrRendererChanged(e,t){if(e&&t)throw new Error("You should only use either a renderer or a template for row details");if(e||t){if(e&&!e.templatizer){var i=new hn;i._grid=this,i.dataHost=this.dataHost,i.template=e,e.templatizer=i}this._columnTree&&Array.from(this.$.items.children).forEach(e=>{e.querySelector("[part~=details-cell]")||(this._updateRow(e,this._columnTree[this._columnTree.length-1]),this._a11yUpdateRowDetailsOpened(e,!1)),delete e.querySelector("[part~=details-cell]")._instance}),this.detailsOpenedItems.length&&(Array.from(this.$.items.children).forEach(this._toggleDetailsCell,this),this._update())}}_detailsOpenedItemsChanged(e,t,i){"detailsOpenedItems.length"!==e.path&&e.value&&Array.from(this.$.items.children).forEach(e=>{this._toggleDetailsCell(e,e._item),this._a11yUpdateRowDetailsOpened(e,this._isDetailsOpened(e._item)),this._toggleAttribute("details-opened",this._isDetailsOpened(e._item),e)})}_configureDetailsCell(e){e.setAttribute("part","cell details-cell"),this._toggleAttribute("frozen",!0,e)}_toggleDetailsCell(e,t){const i=e.querySelector('[part~="details-cell"]');if(!i)return;const s=!this._isDetailsOpened(t),r=!!i.hidden!==s;(i._instance||i._renderer)&&i.hidden===s||(i.hidden=s,s?e.style.removeProperty("padding-bottom"):(this.rowDetailsRenderer?(i._renderer=this.rowDetailsRenderer,i._renderer.call(this,i._content,this,{index:e.index,item:t})):this._rowDetailsTemplate&&!i._instance&&(i._instance=this._rowDetailsTemplate.templatizer.createInstance(),i._content.innerHTML="",i._content.appendChild(i._instance.root),this._updateItem(e,t)),xi(),e.style.setProperty("padding-bottom",i.offsetHeight+"px"),requestAnimationFrame(()=>this.notifyResize()))),r&&(this._updateMetrics(),this._positionItems())}_updateDetailsCellHeights(){Array.from(this.$.items.querySelectorAll('[part~="details-cell"]:not([hidden])')).forEach(e=>{e.parentElement.style.setProperty("padding-bottom",e.offsetHeight+"px")})}_isDetailsOpened(e){return this.detailsOpenedItems&&-1!==this._getItemIndexInArray(e,this.detailsOpenedItems)}openItemDetails(e){this._isDetailsOpened(e)||this.push("detailsOpenedItems",e)}closeItemDetails(e){this._isDetailsOpened(e)&&this.splice("detailsOpenedItems",this._getItemIndexInArray(e,this.detailsOpenedItems),1)}_detailsOpenedInstanceChangedCallback(e,t){super._detailsOpenedInstanceChangedCallback&&super._detailsOpenedInstanceChangedCallback(e,t),t?this.openItemDetails(e.item):this.closeItemDetails(e.item)}}
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/,cn=e=>class extends e{get _timeouts(){return{SCROLL_PERIOD:1e3,WHEEL_SCROLLING:200,SCROLLING:100,IGNORE_WHEEL:500}}static get properties(){return{_frozenCells:{type:Array,value:function(){return[]}},_scrollbarWidth:{type:Number,value:function(){var e=document.createElement("div");e.style.width="100px",e.style.height="100px",e.style.overflow="scroll",e.style.position="absolute",e.style.top="-9999px",document.body.appendChild(e);var t=e.offsetWidth-e.clientWidth;return document.body.removeChild(e),t}},_rowWithFocusedElement:Element,_deltaYAcc:{type:Number,value:0}}}static get observers(){return["_scrollHeightUpdated(_estScrollHeight)","_scrollViewportHeightUpdated(_viewportHeight)"]}set _scrollTop(e){this.$.table.scrollTop=e}get _scrollTop(){return this.$.table.scrollTop}constructor(){super(),this._scrollLineHeight=this._getScrollLineHeight()}_getScrollLineHeight(){const e=document.createElement("div");e.style.fontSize="initial",e.style.display="none",document.body.appendChild(e);const t=window.getComputedStyle(e).fontSize;return document.body.removeChild(e),t?window.parseInt(t):void 0}_scrollViewportHeightUpdated(e){this._scrollPageHeight=e-this.$.header.clientHeight-this.$.footer.clientHeight-this._scrollLineHeight}ready(){super.ready(),this.scrollTarget=this.$.table,this.addEventListener("wheel",e=>{this._wheelScrolling=!0,this._debouncerWheelScrolling=kt.debounce(this._debouncerWheelScrolling,ke.after(this._timeouts.WHEEL_SCROLLING),()=>this._wheelScrolling=!1),this._onWheel(e)}),this.$.table.addEventListener("scroll",e=>{this.$.outerscroller.outerScrolling&&e.stopImmediatePropagation()},!0),this.$.items.addEventListener("focusin",e=>{const t=e.composedPath().indexOf(this.$.items);this._rowWithFocusedElement=e.composedPath()[t-1]}),this.$.items.addEventListener("focusout",()=>this._rowWithFocusedElement=void 0)}scrollToIndex(e){this._accessIronListAPI(()=>super.scrollToIndex(e))}_onWheel(e){if(e.ctrlKey||this._hasScrolledAncestor(e.target,e.deltaX,e.deltaY))return;const t=this.$.table;let i=e.deltaY;if(e.deltaMode===WheelEvent.DOM_DELTA_LINE?i*=this._scrollLineHeight:e.deltaMode===WheelEvent.DOM_DELTA_PAGE&&(i*=this._scrollPageHeight),this._wheelAnimationFrame)return this._deltaYAcc+=i,void e.preventDefault();i+=this._deltaYAcc,this._deltaYAcc=0,this._wheelAnimationFrame=!0,this._debouncerWheelAnimationFrame=kt.debounce(this._debouncerWheelAnimationFrame,Le,()=>this._wheelAnimationFrame=!1);var s=Math.abs(e.deltaX)+Math.abs(i);this._canScroll(t,e.deltaX,i)?(e.preventDefault(),t.scrollTop+=i,t.scrollLeft+=e.deltaX,this._scrollHandler(),this._hasResidualMomentum=!0,this._ignoreNewWheel=!0,this._debouncerIgnoreNewWheel=kt.debounce(this._debouncerIgnoreNewWheel,ke.after(this._timeouts.IGNORE_WHEEL),()=>this._ignoreNewWheel=!1)):this._hasResidualMomentum&&s<=this._previousMomentum||this._ignoreNewWheel?e.preventDefault():s>this._previousMomentum&&(this._hasResidualMomentum=!1),this._previousMomentum=s}_hasScrolledAncestor(e,t,i){return"vaadin-grid-cell-content"!==e.localName&&(!(!this._canScroll(e,t,i)||-1===["auto","scroll"].indexOf(getComputedStyle(e).overflow))||(e!==this&&e.parentElement?this._hasScrolledAncestor(e.parentElement,t,i):void 0))}_canScroll(e,t,i){return i>0&&e.scrollTop<e.scrollHeight-e.offsetHeight||i<0&&e.scrollTop>0||t>0&&e.scrollLeft<e.scrollWidth-e.offsetWidth||t<0&&e.scrollLeft>0}_scheduleScrolling(){this._scrollingFrame||(this._scrollingFrame=requestAnimationFrame(()=>this._toggleAttribute("scrolling",!0,this.$.scroller))),this._debounceScrolling=kt.debounce(this._debounceScrolling,ke.after(this._timeouts.SCROLLING),()=>{cancelAnimationFrame(this._scrollingFrame),delete this._scrollingFrame,this._toggleAttribute("scrolling",!1,this.$.scroller),this.$.outerscroller.outerScrolling||this._reorderRows()}),this._scrollPeriodFrame||(this._scrollPeriodFrame=requestAnimationFrame(()=>this._toggleAttribute("scroll-period",!0,this.$.scroller))),this._debounceScrollPeriod=kt.debounce(this._debounceScrollPeriod,ke.after(this._timeouts.SCROLL_PERIOD),()=>{cancelAnimationFrame(this._scrollPeriodFrame),delete this._scrollPeriodFrame,this._toggleAttribute("scroll-period",!1,this.$.scroller)})}_afterScroll(){this._translateStationaryElements(),this.hasAttribute("reordering")||this._scheduleScrolling();const e=this.$.outerscroller;if(this._ios||!this._wheelScrolling&&!e.passthrough||e.syncOuterScroller(),this._ios){const t=Math.max(-e.scrollTop,0)||Math.min(0,e.scrollHeight-e.scrollTop-e.offsetHeight);this.$.items.style.transform=`translateY(${t}px)`}this._updateOverflow()}_updateOverflow(){let e="";const t=this.$.table;t.scrollTop<t.scrollHeight-t.clientHeight&&(e+=" bottom"),t.scrollTop>0&&(e+=" top"),t.scrollLeft<t.scrollWidth-t.clientWidth&&(e+=" right"),t.scrollLeft>0&&(e+=" left"),this._debounceOverflow=kt.debounce(this._debounceOverflow,Le,()=>{const t=e.trim();t.length>0&&this.getAttribute("overflow")!==t?this.setAttribute("overflow",t):0==t.length&&this.hasAttribute("overflow")&&this.removeAttribute("overflow")})}_reorderRows(){const e=this.$.items,t=e.querySelectorAll("tr");if(!t.length)return;const i=this._virtualStart+this._vidxOffset,s=this._rowWithFocusedElement||Array.from(t).filter(e=>!e.hidden)[0];if(!s)return;const r=s.index-i,n=Array.from(t).indexOf(s)-r;if(n>0)for(let i=0;i<n;i++)e.appendChild(t[i]);else if(n<0)for(let i=t.length+n;i<t.length;i++)e.insertBefore(t[i],t[0])}_frozenCellsChanged(){this._debouncerCacheElements=kt.debounce(this._debouncerCacheElements,Me,()=>{Array.from(this.root.querySelectorAll('[part~="cell"]')).forEach((function(e){e.style.transform=""})),this._frozenCells=Array.prototype.slice.call(this.$.table.querySelectorAll("[frozen]")),this._translateStationaryElements()}),this._updateLastFrozen()}_updateLastFrozen(){if(!this._columnTree)return;const e=this._columnTree[this._columnTree.length-1].slice(0);e.sort((e,t)=>e._order-t._order);const t=e.reduce((e,t,i)=>(t._lastFrozen=!1,t.frozen&&!t.hidden?i:e),void 0);void 0!==t&&(e[t]._lastFrozen=!0)}_translateStationaryElements(){this._edge&&!this._scrollbarWidth?(this.$.items.style.transform=this._getTranslate(-this._scrollLeft||0,-this._scrollTop||0),this.$.footer.style.transform=this.$.header.style.transform=this._getTranslate(-this._scrollLeft||0,0)):this.$.footer.style.transform=this.$.header.style.transform=this._getTranslate(0,this._scrollTop);for(var e=this._getTranslate(this._scrollLeft,0),t=0;t<this._frozenCells.length;t++)this._frozenCells[t].style.transform=e}_getTranslate(e,t){return"translate("+e+"px,"+t+"px)"}_scrollHeightUpdated(e){this.$.outersizer.style.top=this.$.fixedsizer.style.top=e+"px"}}
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/,un=e=>class extends e{static get properties(){return{selectedItems:{type:Object,notify:!0,value:()=>[]}}}static get observers(){return["_selectedItemsChanged(selectedItems.*)"]}_isSelected(e){return this.selectedItems&&this._getItemIndexInArray(e,this.selectedItems)>-1}selectItem(e){this._isSelected(e)||this.push("selectedItems",e)}deselectItem(e){const t=this._getItemIndexInArray(e,this.selectedItems);t>-1&&this.splice("selectedItems",t,1)}_toggleItem(e){-1===this._getItemIndexInArray(e,this.selectedItems)?this.selectItem(e):this.deselectItem(e)}_selectedItemsChanged(e){!this.$.items.children.length||"selectedItems"!==e.path&&"selectedItems.splices"!==e.path||Array.from(this.$.items.children).forEach(e=>{this._updateItem(e,e._item)})}_selectedInstanceChangedCallback(e,t){super._selectedInstanceChangedCallback&&super._selectedInstanceChangedCallback(e,t),t?this.selectItem(e.item):this.deselectItem(e.item)}}
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/,pn=e=>class extends e{static get properties(){return{multiSort:{type:Boolean,value:!1},_sorters:{type:Array,value:function(){return[]}},_previousSorters:{type:Array,value:function(){return[]}}}}ready(){super.ready(),this.addEventListener("sorter-changed",this._onSorterChanged),window.ShadyDOM&&Me.run(()=>{const e=this.querySelectorAll("vaadin-grid-sorter");Array.from(e).forEach(e=>{e instanceof Nt&&e.dispatchEvent(new CustomEvent("sorter-changed",{bubbles:!0,composed:!0}))})})}_onSorterChanged(e){const t=e.target;this._removeArrayItem(this._sorters,t),t._order=null,this.multiSort?(t.direction&&this._sorters.unshift(t),this._sorters.forEach((e,t)=>e._order=this._sorters.length>1?t:null,this)):t.direction&&(this._sorters.forEach(e=>{e._order=null,e.direction=null}),this._sorters=[t]),e.stopPropagation(),this.dataProvider&&JSON.stringify(this._previousSorters)!==JSON.stringify(this._mapSorters())&&this.clearCache(),this._a11yUpdateSorters(),this._previousSorters=this._mapSorters()}_mapSorters(){return this._sorters.map(e=>({path:e.path,direction:e.direction}))}_removeArrayItem(e,t){const i=e.indexOf(t);i>-1&&e.splice(i,1)}}
/**
@license
Copyright (c) 2018 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/,_n=e=>class extends e{static get properties(){return{cellClassNameGenerator:Function}}static get observers(){return["__cellClassNameGeneratorChanged(cellClassNameGenerator)"]}__cellClassNameGeneratorChanged(e){this.generateCellClassNames()}generateCellClassNames(){Array.from(this.$.items.children).filter(e=>!e.hidden).forEach(e=>this._generateCellClassNames(e,this.__getRowModel(e)))}_generateCellClassNames(e,t){Array.from(e.children).forEach(e=>{if(e.__generatedClasses&&e.__generatedClasses.forEach(t=>e.classList.remove(t)),this.cellClassNameGenerator){const i=this.cellClassNameGenerator(e._column,t);e.__generatedClasses=i&&i.split(" ").filter(e=>e.length>0),e.__generatedClasses&&e.__generatedClasses.forEach(t=>e.classList.add(t))}})}}
/**
@license
Copyright (c) 2019 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/,mn="between",fn="on-top-or-between",gn="on-grid",yn="on-top",bn="above",vn="below",wn="empty",Cn=e=>class extends e{static get properties(){return{dropMode:String,rowsDraggable:Boolean,dragFilter:Function,dropFilter:Function,__dndAutoScrollThreshold:{value:50}}}static get observers(){return["_dragDropAccessChanged(rowsDraggable, dropMode, dragFilter, dropFilter)"]}ready(){super.ready(),this.$.table.addEventListener("dragstart",this._onDragStart.bind(this)),this.$.table.addEventListener("dragend",this._onDragEnd.bind(this)),this.$.table.addEventListener("dragover",this._onDragOver.bind(this)),this.$.table.addEventListener("dragleave",this._onDragLeave.bind(this)),this.$.table.addEventListener("drop",this._onDrop.bind(this)),this.$.table.addEventListener("dragenter",e=>{this.dropMode&&(e.preventDefault(),e.stopPropagation())})}_onDragStart(e){if(this.rowsDraggable){let t=e.target;if("vaadin-grid-cell-content"===t.localName&&(t=t.assignedSlot.parentNode.parentNode),t.parentNode!==this.$.items)return;if(e.stopPropagation(),this._toggleAttribute("dragging-rows",!0,this),this._safari){const e=t.style.transform;t.style.top=/translateY\((.*)\)/.exec(e)[1],t.style.transform="none",requestAnimationFrame(()=>{t.style.top="",t.style.transform=e})}const i=t.getBoundingClientRect();window.ShadyDOM||(this._ios?e.dataTransfer.setDragImage(t):e.dataTransfer.setDragImage(t,e.clientX-i.left,e.clientY-i.top));let s=[t];this._isSelected(t._item)&&(s=this.__getViewportRows().filter(e=>this._isSelected(e._item)).filter(e=>!this.dragFilter||this.dragFilter(this.__getRowModel(e)))),e.dataTransfer.setData("text",this.__formatDefaultTransferData(s)),t.setAttribute("dragstart",s.length>1?s.length:""),this.updateStyles({"--_grid-drag-start-x":e.clientX-i.left+20+"px","--_grid-drag-start-y":e.clientY-i.top+10+"px"}),requestAnimationFrame(()=>{t.removeAttribute("dragstart"),this.updateStyles({"--_grid-drag-start-x":"","--_grid-drag-start-y":""})});const r=new CustomEvent("grid-dragstart",{detail:{draggedItems:s.map(e=>e._item),setDragData:(t,i)=>e.dataTransfer.setData(t,i),setDraggedItemsCount:e=>t.setAttribute("dragstart",e)}});r.originalEvent=e,this.dispatchEvent(r)}}_onDragEnd(e){this._toggleAttribute("dragging-rows",!1,this),e.stopPropagation();const t=new CustomEvent("grid-dragend");t.originalEvent=e,this.dispatchEvent(t)}_onDragLeave(e){e.stopPropagation(),this._clearDragStyles()}_onDragOver(e){if(this.dropMode){if(this._dropLocation=void 0,this._dragOverItem=void 0,this.__dndAutoScroll(e.clientY))return void this._clearDragStyles();let t=e.composedPath().filter(e=>"tr"===e.localName)[0];if(this._effectiveSize&&this.dropMode!==gn)if(t&&t.parentNode===this.$.items){const i=t.getBoundingClientRect();if(this._dropLocation=yn,this.dropMode===mn){const t=e.clientY-i.top<i.bottom-e.clientY;this._dropLocation=t?bn:vn}else this.dropMode===fn&&(e.clientY-i.top<i.height/3?this._dropLocation=bn:e.clientY-i.top>i.height/3*2&&(this._dropLocation=vn))}else{if(t)return;if(this.dropMode!==mn&&this.dropMode!==fn)return;t=Array.from(this.$.items.children).filter(e=>!e.hidden).pop(),this._dropLocation=vn}else this._dropLocation=wn;if(t&&t.hasAttribute("drop-disabled"))return void(this._dropLocation=void 0);e.stopPropagation(),e.preventDefault(),this._dropLocation===wn?this._toggleAttribute("dragover",!0,this):t?(this._dragOverItem=t._item,t.getAttribute("dragover")!==this._dropLocation&&t.setAttribute("dragover",this._dropLocation)):this._clearDragStyles()}}__dndAutoScroll(e){if(this.__dndAutoScrolling)return!0;const t=this.$.header.getBoundingClientRect().bottom,i=this.$.footer.getBoundingClientRect().top,s=t-e+this.__dndAutoScrollThreshold,r=e-i+this.__dndAutoScrollThreshold;let n=0;if(r>0?n=2*r:s>0&&(n=2*-s),n){const e=this.$.table.scrollTop;if(this.$.table.scrollTop+=n,e!==this.$.table.scrollTop)return this.__dndAutoScrolling=!0,setTimeout(()=>this.__dndAutoScrolling=!1,20),this._scrollHandler(),!0}}__getViewportRows(){const e=this.$.header.getBoundingClientRect().bottom,t=this.$.footer.getBoundingClientRect().top;return Array.from(this.$.items.children).filter(i=>{const s=i.getBoundingClientRect();return s.bottom>e&&s.top<t})}_clearDragStyles(){this.removeAttribute("dragover"),Array.from(this.$.items.children).forEach(e=>e.removeAttribute("dragover"))}_onDrop(e){if(this.dropMode){e.stopPropagation(),e.preventDefault();const t=e.dataTransfer.types&&Array.from(e.dataTransfer.types).map(t=>({type:t,data:e.dataTransfer.getData(t)}));this._clearDragStyles();const i=new CustomEvent("grid-drop",{bubbles:e.bubbles,cancelable:e.cancelable,detail:{dropTargetItem:this._dragOverItem,dropLocation:this._dropLocation,dragData:t}});i.originalEvent=e,this.dispatchEvent(i)}}__formatDefaultTransferData(e){return e.map(e=>Array.from(e.children).filter(e=>!e.hidden&&-1===e.getAttribute("part").indexOf("details-cell")).sort((e,t)=>e._column._order>t._column._order?1:-1).map(e=>e._content.textContent.trim()).filter(e=>e).join("\t")).join("\n")}_dragDropAccessChanged(e,t,i,s){this.filterDragAndDrop()}filterDragAndDrop(){Array.from(this.$.items.children).filter(e=>!e.hidden).forEach(e=>{this._filterDragAndDrop(e,this.__getRowModel(e))})}_filterDragAndDrop(e,t){const i=!this.rowsDraggable||this.dragFilter&&!this.dragFilter(t),s=!this.dropMode||this.dropFilter&&!this.dropFilter(t);(window.ShadyDOM?[e]:Array.from(e.children).map(e=>e._content)).forEach(e=>{i?e.removeAttribute("draggable"):e.setAttribute("draggable",!0)}),this._toggleAttribute("drag-disabled",i,e),this._toggleAttribute("drop-disabled",s,e)}}
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/,xn=e=>class extends e{static get properties(){return{_headerFocusable:{type:Object,observer:"_focusableChanged"},_itemsFocusable:{type:Object,observer:"_focusableChanged"},_footerFocusable:{type:Object,observer:"_focusableChanged"},_navigatingIsHidden:Boolean,_focusedItemIndex:{type:Number,value:0},_focusedColumnOrder:Number}}ready(){super.ready(),this._ios||this._android||(this.addEventListener("keydown",this._onKeyDown),this.addEventListener("focusin",this._onFocusIn),this.addEventListener("focusout",this._onFocusOut),this.$.table.addEventListener("focusin",this._onCellFocusIn.bind(this)),this.$.table.addEventListener("focusout",this._onCellFocusOut.bind(this)),this.addEventListener("mousedown",()=>{this._toggleAttribute("navigating",!1,this),this._isMousedown=!0}),this.addEventListener("mouseup",()=>this._isMousedown=!1))}_focusableChanged(e,t){t&&t.setAttribute("tabindex","-1"),e&&e.setAttribute("tabindex","0")}_onKeyDown(e){let t,i=e.key;switch("Up"!==i&&"Down"!==i&&"Left"!==i&&"Right"!==i||(i="Arrow"+i),"Esc"===i&&(i="Escape"),"Spacebar"===i&&(i=" "),i){case"ArrowUp":case"ArrowDown":case"ArrowLeft":case"ArrowRight":case"PageUp":case"PageDown":case"Home":case"End":t="Navigation";break;case"Enter":case"Escape":case"F2":t="Interaction";break;case"Tab":t="Tab";break;case" ":t="Space"}this._detectInteracting(e),this.hasAttribute("interacting")&&"Interaction"!==t&&(t=void 0),t&&this[`_on${t}KeyDown`](e,i)}_ensureScrolledToIndex(e){Array.from(this.$.items.children).filter(t=>t.index===e)[0]||this._scrollToIndex(e)}_onNavigationKeyDown(e,t){function i(e){return Array.prototype.indexOf.call(e.parentNode.children,e)}e.preventDefault();const s=this._lastVisibleIndex-this._firstVisibleIndex-1;let r=0,n=0;switch(t){case"ArrowRight":r=1;break;case"ArrowLeft":r=-1;break;case"Home":r=-1/0,e.ctrlKey&&(n=-1/0);break;case"End":r=1/0,e.ctrlKey&&(n=1/0);break;case"ArrowDown":n=1;break;case"ArrowUp":n=-1;break;case"PageDown":n=s;break;case"PageUp":n=-s}const o=e.composedPath()[0],a=i(o),l=this._elementMatches(o,'[part~="details-cell"]'),h=o.parentNode,d=h.parentNode,c=(d===this.$.items?this._effectiveSize:d.children.length)-1,u=d===this.$.items?void 0!==this._focusedItemIndex?this._focusedItemIndex:h.index:i(h);let p=Math.max(0,Math.min(u+n,c)),_=!1;if(d===this.$.items){const e=h._item,t=this._cache.getItemForIndex(p);_=l?0===n:1===n&&this._isDetailsOpened(e)||-1===n&&p!==u&&this._isDetailsOpened(t),_!==l&&(1===n&&_||-1===n&&!_)&&(p=u)}if(d!==this.$.items)if(p>u)for(;p<c&&d.children[p].hidden;)p++;else if(p<u)for(;p>0&&d.children[p].hidden;)p--;void 0===this._focusedColumnOrder&&(this._focusedColumnOrder=l?0:this._getColumns(d,u)[a]._order);const m=this._getColumns(d,p),f=m.filter(e=>!e.hidden).map(e=>e._order).sort((e,t)=>e-t),g=f.length-1,y=f.indexOf(f.slice(0).sort((e,t)=>Math.abs(e-this._focusedColumnOrder)-Math.abs(t-this._focusedColumnOrder))[0]),b=0===n&&l?y:Math.max(0,Math.min(y+r,g));b!==y&&(this._focusedColumnOrder=void 0),d===this.$.items&&this._ensureScrolledToIndex(p),this._toggleAttribute("navigating",!0,this);const v=m.reduce((e,t,i)=>(e[t._order]=i,e),{})[f[b]],w=d===this.$.items?Array.from(d.children).filter(e=>e.index===p)[0]:d.children[p];if(!w)return;const C=_?Array.from(w.children).filter(e=>this._elementMatches(e,'[part~="details-cell"]'))[0]:w.children[v];if(this._scrollHorizontallyToCell(C),d===this.$.items&&(this._focusedItemIndex=p),d===this.$.items){const e=C.getBoundingClientRect(),t=this.$.footer.getBoundingClientRect().top,i=this.$.header.getBoundingClientRect().bottom;e.bottom>t?(this.$.table.scrollTop+=e.bottom-t,this._scrollHandler()):e.top<i&&(this.$.table.scrollTop-=i-e.top,this._scrollHandler())}C.focus()}_parseEventPath(e){const t=e.indexOf(this.$.table);return{rowGroup:e[t-1],row:e[t-2],cell:e[t-3]}}_onInteractionKeyDown(e,t){const i=e.composedPath()[0],s="input"===i.localName&&!/^(button|checkbox|color|file|image|radio|range|reset|submit)$/i.test(i.type);let r;switch(t){case"Enter":r=!this.hasAttribute("interacting")||!s;break;case"Escape":r=!1;break;case"F2":r=!this.hasAttribute("interacting")}const{cell:n}=this._parseEventPath(e.composedPath());if(this.hasAttribute("interacting")!==r)if(r){const t=n._content.querySelector("[focus-target]")||n._content.firstElementChild;t&&(e.preventDefault(),t.focus(),this._toggleAttribute("interacting",!0,this),this._toggleAttribute("navigating",!1,this))}else e.preventDefault(),this._focusedColumnOrder=void 0,n.focus(),this._toggleAttribute("interacting",!1,this),this._toggleAttribute("navigating",!0,this)}_predictFocusStepTarget(e,t){const i=[this.$.table,this._headerFocusable,this._itemsFocusable,this._footerFocusable,this.$.focusexit];let s=i.indexOf(e);for(s+=t;s>=0&&s<=i.length-1&&(!i[s]||i[s].parentNode.hidden);)s+=t;return i[s]}_onTabKeyDown(e){const t=this._predictFocusStepTarget(e.composedPath()[0],e.shiftKey?-1:1);if(t===this.$.table)this.$.table.focus();else if(t===this.$.focusexit)this.$.focusexit.focus();else if(t===this._itemsFocusable){let i=t;const s=this._itemsFocusable.parentNode;if(this._ensureScrolledToIndex(this._focusedItemIndex),s.index!==this._focusedItemIndex){const e=Array.from(s.children).indexOf(this._itemsFocusable),t=Array.from(this.$.items.children).filter(e=>e.index===this._focusedItemIndex)[0];t&&(i=t.children[e])}e.preventDefault(),i.focus()}else e.preventDefault(),t.focus();this._toggleAttribute("navigating",!0,this)}_onSpaceKeyDown(e){e.preventDefault();const t=e.composedPath()[0];if(t._content&&t._content.firstElementChild){const e=this.hasAttribute("navigating");t._content.firstElementChild.click(),this._toggleAttribute("navigating",e,this)}else this.dispatchEvent(new CustomEvent("cell-activate",{detail:{model:this.__getRowModel(t.parentElement)}}))}_onFocusIn(e){this._isMousedown||this._toggleAttribute("navigating",!0,this);const t=e.composedPath()[0];t===this.$.table||t===this.$.focusexit?(this._predictFocusStepTarget(t,t===this.$.table?1:-1).focus(),this._toggleAttribute("interacting",!1,this)):this._detectInteracting(e)}_onFocusOut(e){this._toggleAttribute("navigating",!1,this),this._detectInteracting(e)}_onCellFocusIn(e){if(this._detectInteracting(e),3===e.composedPath().indexOf(this.$.table)){const t=e.composedPath()[0];this._activeRowGroup=t.parentNode.parentNode,this._activeRowGroup===this.$.header?this._headerFocusable=t:this._activeRowGroup===this.$.items?this._itemsFocusable=t:this._activeRowGroup===this.$.footer&&(this._footerFocusable=t),t._content.dispatchEvent(new CustomEvent("cell-focusin",{bubbles:!1}))}this._detectFocusedItemIndex(e)}_onCellFocusOut(e){if(3===e.composedPath().indexOf(this.$.table)){e.composedPath()[0]._content.dispatchEvent(new CustomEvent("cell-focusout",{bubbles:!1}))}}_detectInteracting(e){this._toggleAttribute("interacting",e.composedPath().some(e=>"vaadin-grid-cell-content"===e.localName),this)}_detectFocusedItemIndex(e){const{rowGroup:t,row:i}=this._parseEventPath(e.composedPath());t===this.$.items&&(this._focusedItemIndex=i.index)}_preventScrollerRotatingCellFocus(e,t){e.index===this._focusedItemIndex&&this.hasAttribute("navigating")&&this._activeRowGroup===this.$.items&&(this._navigatingIsHidden=!0,this._toggleAttribute("navigating",!1,this)),t===this._focusedItemIndex&&this._navigatingIsHidden&&(this._navigatingIsHidden=!1,this._toggleAttribute("navigating",!0,this))}_getColumns(e,t){let i=this._columnTree.length-1;return e===this.$.header?i=t:e===this.$.footer&&(i=this._columnTree.length-1-t),this._columnTree[i]}_resetKeyboardNavigation(){if(this.$.header.firstElementChild&&(this._headerFocusable=Array.from(this.$.header.firstElementChild.children).filter(e=>!e.hidden)[0]),this.$.items.firstElementChild){const e=this._iterateItems((e,t)=>{if(this._firstVisibleIndex===t)return this.$.items.children[e]});e&&(this._itemsFocusable=Array.from(e.children).filter(e=>!e.hidden)[0])}this.$.footer.firstElementChild&&(this._footerFocusable=Array.from(this.$.footer.firstElementChild.children).filter(e=>!e.hidden)[0])}_scrollHorizontallyToCell(e){if(e.hasAttribute("frozen")||this._elementMatches(e,'[part~="details-cell"]'))return;const t=e.getBoundingClientRect(),i=e.parentNode,s=Array.from(i.children).indexOf(e),r=this.$.table.getBoundingClientRect();let n=r.left,o=r.right;for(let e=s-1;e>=0;e--){const t=i.children[e];if(!t.hasAttribute("hidden")&&!this._elementMatches(t,'[part~="details-cell"]')&&t.hasAttribute("frozen")){n=t.getBoundingClientRect().right;break}}for(let e=s+1;e<i.children.length;e++){const t=i.children[e];if(!t.hasAttribute("hidden")&&!this._elementMatches(t,'[part~="details-cell"]')&&t.hasAttribute("frozen")){o=t.getBoundingClientRect().left;break}}t.left<n&&(this.$.table.scrollLeft+=Math.round(t.left-n)),t.right>o&&(this.$.table.scrollLeft+=Math.round(t.right-o))}_elementMatches(e,t){return e.matches?e.matches(t):-1!==Array.from(e.parentNode.querySelectorAll(t)).indexOf(e)}}
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/,Sn=e=>class extends(bi(e)){static get properties(){return{columnReorderingAllowed:{type:Boolean,value:!1},_orderBaseScope:{type:Number,value:1e7}}}static get observers(){return["_updateOrders(_columnTree, _columnTree.*)"]}ready(){super.ready(),hi(this,"track",this._onTrackEvent),this._reorderGhost=this.shadowRoot.querySelector('[part="reorder-ghost"]'),this.addEventListener("touchstart",this._onTouchStart.bind(this)),this.addEventListener("touchmove",this._onTouchMove.bind(this)),this.addEventListener("touchend",this._onTouchEnd.bind(this)),this.addEventListener("contextmenu",this._onContextMenu.bind(this))}_onContextMenu(e){this.hasAttribute("reordering")&&e.preventDefault()}_onTouchStart(e){this._startTouchReorderTimeout=setTimeout(()=>{this._onTrackStart({detail:{x:e.touches[0].clientX,y:e.touches[0].clientY}})},100)}_onTouchMove(e){this._draggedColumn&&e.preventDefault(),clearTimeout(this._startTouchReorderTimeout)}_onTouchEnd(){clearTimeout(this._startTouchReorderTimeout),this._onTrackEnd()}_onTrackEvent(e){if("start"===e.detail.state){const t=e.composedPath(),i=t[t.indexOf(this.$.header)-2];if(!i||!i._content)return;const s=this.getRootNode().activeElement;if(i._content.contains(this.getRootNode().activeElement)&&(!this._ie||!this._isFocusable(s)))return;if(this.$.scroller.hasAttribute("column-resizing"))return;this._touchDevice||this._onTrackStart(e)}else"track"===e.detail.state?this._onTrack(e):"end"===e.detail.state&&this._onTrackEnd(e)}_onTrackStart(e){if(!this.columnReorderingAllowed)return;const t=e.path||ir(e).path;if(t&&t.filter(e=>e.hasAttribute&&e.hasAttribute("draggable"))[0])return;const i=this._cellFromPoint(e.detail.x,e.detail.y);if(i&&-1!==i.getAttribute("part").indexOf("header-cell")){for(this._toggleAttribute("reordering",!0,this),this._draggedColumn=i._column;1===this._draggedColumn.parentElement.childElementCount;)this._draggedColumn=this._draggedColumn.parentElement;this._setSiblingsReorderStatus(this._draggedColumn,"allowed"),this._draggedColumn._reorderStatus="dragging",this._updateGhost(i),this._reorderGhost.style.visibility="visible",this._updateGhostPosition(e.detail.x,this._touchDevice?e.detail.y-50:e.detail.y),this._autoScroller()}}_onTrack(e){if(!this._draggedColumn)return;const t=this._cellFromPoint(e.detail.x,e.detail.y);if(!t)return;const i=this._getTargetColumn(t,this._draggedColumn);this._isSwapAllowed(this._draggedColumn,i)&&this._isSwappableByPosition(i,e.detail.x)&&this._swapColumnOrders(this._draggedColumn,i),this._updateGhostPosition(e.detail.x,this._touchDevice?e.detail.y-50:e.detail.y),this._lastDragClientX=e.detail.x}_onTrackEnd(){this._draggedColumn&&(this._toggleAttribute("reordering",!1,this),this._draggedColumn._reorderStatus="",this._setSiblingsReorderStatus(this._draggedColumn,""),this._draggedColumn=null,this._lastDragClientX=null,this._reorderGhost.style.visibility="hidden",this.dispatchEvent(new CustomEvent("column-reorder",{detail:{columns:this._getColumnsInOrder()}})))}_getColumnsInOrder(){return this._columnTree.slice(0).pop().filter(e=>!e.hidden).sort((e,t)=>e._order-t._order)}_cellFromPoint(e,t){let i;if(e=e||0,t=t||0,this._draggedColumn||this._toggleAttribute("no-content-pointer-events",!0,this.$.scroller),z?i=this.shadowRoot.elementFromPoint(e,t):(i=document.elementFromPoint(e,t),"vaadin-grid-cell-content"===i.localName&&(i=i.assignedSlot.parentNode)),this._toggleAttribute("no-content-pointer-events",!1,this.$.scroller),i&&i._column)return i}_updateGhostPosition(e,t){const i=this._reorderGhost.getBoundingClientRect(),s=e-i.width/2,r=t-i.height/2,n=parseInt(this._reorderGhost._left||0),o=parseInt(this._reorderGhost._top||0);this._reorderGhost._left=n-(i.left-s),this._reorderGhost._top=o-(i.top-r),this._reorderGhost.style.transform=`translate(${this._reorderGhost._left}px, ${this._reorderGhost._top}px)`}_getInnerText(e){return e.localName?"none"===getComputedStyle(e).display?"":Array.from(e.childNodes).map(e=>this._getInnerText(e)).join(""):e.textContent}_updateGhost(e){const t=this._reorderGhost;t.textContent=this._getInnerText(e._content);const i=window.getComputedStyle(e);return["boxSizing","display","width","height","background","alignItems","padding","border","flex-direction","overflow"].forEach(e=>t.style[e]=i[e]),t}_updateOrders(e,t){void 0!==e&&void 0!==t&&(e[0].forEach((e,t)=>e._order=0),e[0].forEach((e,t)=>e._order=(t+1)*this._orderBaseScope))}_setSiblingsReorderStatus(e,t){Array.from(e.parentNode.children).filter(t=>/column/.test(t.localName)&&this._isSwapAllowed(t,e)).forEach(e=>e._reorderStatus=t)}_autoScroller(){if(this._lastDragClientX){const e=this._lastDragClientX-this.getBoundingClientRect().right+50,t=this.getBoundingClientRect().left-this._lastDragClientX+50;e>0?this.$.table.scrollLeft+=e/10:t>0&&(this.$.table.scrollLeft-=t/10),this._scrollHandler()}this._draggedColumn&&this.async(this._autoScroller,10)}_isSwapAllowed(e,t){if(e&&t){const i=e!==t,s=e.parentElement===t.parentElement,r=e.frozen===t.frozen;return i&&s&&r}}_isSwappableByPosition(e,t){const i=Array.from(this.$.header.querySelectorAll('tr:not([hidden]) [part~="cell"]')).filter(t=>e.contains(t._column))[0],s=this.$.header.querySelector("tr:not([hidden]) [reorder-status=dragging]").getBoundingClientRect(),r=i.getBoundingClientRect();return r.left>s.left?t>r.right-s.width:t<r.left+s.width}_swapColumnOrders(e,t){const i=e._order;e._order=t._order,t._order=i,this._updateLastFrozen(),this._updateFirstAndLastColumn()}_getTargetColumn(e,t){if(e&&t){let i=e._column;for(;i.parentElement!==t.parentElement&&i!==this;)i=i.parentElement;return i.parentElement===t.parentElement?i:e._column}}}
/**
@license
Copyright (c) 2018 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/,An=e=>class extends e{static get properties(){return{resizable:{type:Boolean,value:function(){if("vaadin-grid-column-group"===this.localName)return;const e=this.parentNode;return e&&"vaadin-grid-column-group"===e.localName&&e.resizable||!1}},_headerTemplate:{type:Object},_footerTemplate:{type:Object},frozen:{type:Boolean,value:!1},hidden:{type:Boolean},header:{type:String},textAlign:{type:String},_lastFrozen:{type:Boolean,value:!1},_order:Number,_reorderStatus:Boolean,_emptyCells:Array,_headerCell:Object,_footerCell:Object,_grid:Object,headerRenderer:Function,footerRenderer:Function}}static get observers(){return["_widthChanged(width, _headerCell, _footerCell, _cells.*)","_frozenChanged(frozen, _headerCell, _footerCell, _cells.*)","_flexGrowChanged(flexGrow, _headerCell, _footerCell, _cells.*)","_pathOrHeaderChanged(path, header, _headerCell, _footerCell, _cells.*, renderer, headerRenderer, _bodyTemplate, _headerTemplate)","_textAlignChanged(textAlign, _cells.*, _headerCell, _footerCell)","_orderChanged(_order, _headerCell, _footerCell, _cells.*)","_lastFrozenChanged(_lastFrozen)","_setBodyTemplateOrRenderer(_bodyTemplate, renderer, _cells, _cells.*)","_setHeaderTemplateOrRenderer(_headerTemplate, headerRenderer, _headerCell)","_setFooterTemplateOrRenderer(_footerTemplate, footerRenderer, _footerCell)","_resizableChanged(resizable, _headerCell)","_reorderStatusChanged(_reorderStatus, _headerCell, _footerCell, _cells.*)","_hiddenChanged(hidden, _headerCell, _footerCell, _cells.*)"]}connectedCallback(){super.connectedCallback(),this._bodyTemplate&&(this._bodyTemplate.templatizer._grid=this._grid),this._headerTemplate&&(this._headerTemplate.templatizer._grid=this._grid),this._footerTemplate&&(this._footerTemplate.templatizer._grid=this._grid),this._templateObserver.flush(),this._bodyTemplate||this._templateObserver.callback(),requestAnimationFrame(()=>{this._allCells.forEach(e=>{e._content.parentNode||this._grid&&this._grid.appendChild(e._content)})})}disconnectedCallback(){super.disconnectedCallback(),requestAnimationFrame(()=>{this._findHostGrid()||this._allCells.forEach(e=>{e._content.parentNode&&e._content.parentNode.removeChild(e._content)})}),this._gridValue=void 0}_findHostGrid(){let e=this;for(;e&&!/^vaadin.*grid(-pro)?$/.test(e.localName);)e=e.assignedSlot?e.assignedSlot.parentNode:e.parentNode;return e||void 0}get _grid(){return this._gridValue||(this._gridValue=this._findHostGrid()),this._gridValue}get _allCells(){return[].concat(this._cells||[]).concat(this._emptyCells||[]).concat(this._headerCell).concat(this._footerCell).filter(e=>e)}constructor(){super(),this._templateObserver=new Ys(this,e=>{this._headerTemplate=this._prepareHeaderTemplate(),this._footerTemplate=this._prepareFooterTemplate(),this._bodyTemplate=this._prepareBodyTemplate()})}_prepareHeaderTemplate(){return this._prepareTemplatizer(this._findTemplate(!0)||null,{})}_prepareFooterTemplate(){return this._prepareTemplatizer(this._findTemplate(!1,!0)||null,{})}_prepareBodyTemplate(){return this._prepareTemplatizer(this._findTemplate()||null)}_prepareTemplatizer(e,t){if(e&&!e.templatizer){const i=new hn;i._grid=this._grid,i.dataHost=this.dataHost,i._instanceProps=t||i._instanceProps,i.template=e,e.templatizer=i}return e}_renderHeaderAndFooter(){this.headerRenderer&&this.__runRenderer(this.headerRenderer,this._headerCell),this.footerRenderer&&this.__runRenderer(this.footerRenderer,this._footerCell)}__runRenderer(e,t,i){const s=[t._content,this];i&&i.item&&s.push(i),e.apply(this,s)}__setColumnTemplateOrRenderer(e,t,i){if(e&&t)throw new Error("You should only use either a renderer or a template");i.forEach(i=>{const s=this._grid.__getRowModel(i.parentElement);if(t)i._renderer=t,(s.item||t===this.headerRenderer||t===this.footerRenderer)&&this.__runRenderer(t,i,s);else if(i._template!==e){i._template=e,i._content.innerHTML="",e.templatizer._grid=e.templatizer._grid||this._grid;const t=e.templatizer.createInstance();i._content.appendChild(t.root),i._instance=t,s.item&&i._instance.setProperties(s)}})}_setBodyTemplateOrRenderer(e,t,i,s){(e||t)&&i&&this.__setColumnTemplateOrRenderer(e,t,i)}_setHeaderTemplateOrRenderer(e,t,i){(e||t)&&i&&this.__setColumnTemplateOrRenderer(e,t,[i])}_setFooterTemplateOrRenderer(e,t,i){(e||t)&&i&&(this.__setColumnTemplateOrRenderer(e,t,[i]),this._grid.__updateHeaderFooterRowVisibility(i.parentElement))}_selectFirstTemplate(e=!1,t=!1){return Ys.getFlattenedNodes(this).filter(i=>"template"===i.localName&&i.classList.contains("header")===e&&i.classList.contains("footer")===t)[0]}_findTemplate(e,t){const i=this._selectFirstTemplate(e,t);return i&&this.dataHost&&(i._rootDataHost=this.dataHost._rootDataHost||this.dataHost),i}_flexGrowChanged(e,t,i,s){this.parentElement&&this.parentElement._columnPropChanged&&this.parentElement._columnPropChanged("flexGrow"),this._allCells.forEach(t=>t.style.flexGrow=e)}_orderChanged(e,t,i,s){this._allCells.forEach(t=>t.style.order=e)}_widthChanged(e,t,i,s){this.parentElement&&this.parentElement._columnPropChanged&&this.parentElement._columnPropChanged("width"),this._allCells.forEach(t=>t.style.width=e),this._grid&&this._grid.__forceReflow&&this._grid.__forceReflow()}_frozenChanged(e,t,i,s){this.parentElement&&this.parentElement._columnPropChanged&&this.parentElement._columnPropChanged("frozen",e),this._allCells.forEach(t=>this._toggleAttribute("frozen",e,t)),this._grid&&this._grid._frozenCellsChanged&&this._grid._frozenCellsChanged()}_lastFrozenChanged(e){this._allCells.forEach(t=>this._toggleAttribute("last-frozen",e,t)),this.parentElement&&this.parentElement._columnPropChanged&&(this.parentElement._lastFrozen=e)}_pathOrHeaderChanged(e,t,i,s,r,n,o,a,l){const h=void 0!==t;if(!o&&!l&&h&&i&&this.__setTextContent(i._content,t),e&&r.value){if(!n&&!a){const t=(t,i,{item:s})=>this.__setTextContent(t,this.get(e,s));this.__setColumnTemplateOrRenderer(void 0,t,r.value)}o||l||h||!i||null===t||this.__setTextContent(i._content,this._generateHeader(e))}i&&this._grid.__updateHeaderFooterRowVisibility(i.parentElement)}__setTextContent(e,t){e.textContent!==t&&(e.textContent=t)}_generateHeader(e){return e.substr(e.lastIndexOf(".")+1).replace(/([A-Z])/g,"-$1").toLowerCase().replace(/-/g," ").replace(/^./,e=>e.toUpperCase())}_toggleAttribute(e,t,i){i.hasAttribute(e)===!t&&(t?i.setAttribute(e,""):i.removeAttribute(e))}_reorderStatusChanged(e,t,i,s){this._allCells.forEach(t=>t.setAttribute("reorder-status",e))}_resizableChanged(e,t){void 0!==e&&void 0!==t&&t&&[t].concat(this._emptyCells).forEach(t=>{if(t){const i=t.querySelector('[part~="resize-handle"]');if(i&&t.removeChild(i),e){const e=document.createElement("div");e.setAttribute("part","resize-handle"),t.appendChild(e)}}})}_textAlignChanged(e,t,i,s){if(void 0===e)return;if(-1===["start","end","center"].indexOf(e))return void console.warn('textAlign can only be set as "start", "end" or "center"');let r;"ltr"===getComputedStyle(this._grid).direction?"start"===e?r="left":"end"===e&&(r="right"):"start"===e?r="right":"end"===e&&(r="left"),this._allCells.forEach(t=>{t._content.style.textAlign=e,getComputedStyle(t._content).textAlign!==e&&(t._content.style.textAlign=r)})}_hiddenChanged(e,t,i,s){this.parentElement&&this.parentElement._columnPropChanged&&this.parentElement._columnPropChanged("hidden",e),this._allCells.forEach(t=>this._toggleAttribute("hidden",e,t)),!!e!=!!this._previousHidden&&this._grid&&(this._grid._updateLastFrozen&&this._grid._updateLastFrozen(),this._grid.notifyResize&&this._grid.notifyResize(),this._grid._resetKeyboardNavigation&&this._grid._resetKeyboardNavigation()),this._previousHidden=e}};class Pn extends(An(Nt)){static get is(){return"vaadin-grid-column"}static get properties(){return{width:{type:String,value:"100px"},flexGrow:{type:Number,value:1},renderer:Function,path:{type:String},autoWidth:{type:Boolean,value:!1},_bodyTemplate:{type:Object},_cells:Array}}}customElements.define(Pn.is,Pn);
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/
class En extends class extends Nt{}{static get template(){return he`
    <style>
      :host {
        display: block;
        height: 100%;
        width: 100%;
        position: absolute;
        top: 0;
        box-sizing: border-box;
        overflow: auto;
      }

      :host([passthrough]) {
        pointer-events: none;
      }
    </style>

    <slot></slot>
`}static get is(){return"vaadin-grid-outer-scroller"}static get properties(){return{scrollTarget:{type:Object},scrollHandler:{type:Object},passthrough:{type:Boolean,reflectToAttribute:!0,value:!0},outerScrolling:Boolean,noScrollbars:Boolean,_touchDevice:Boolean}}ready(){super.ready(),this.addEventListener("scroll",()=>this._syncScrollTarget()),this.parentElement.addEventListener("mousemove",this._onMouseMove.bind(this)),this.style.webkitOverflowScrolling="touch",this.addEventListener("mousedown",e=>this.outerScrolling=!0),this.addEventListener("mouseup",e=>{this.outerScrolling=!1,this.scrollHandler._scrollHandler()})}_onMouseMove(e){this._touchDevice||(this.noScrollbars&&this.parentElement.hasAttribute("scroll-period")?this.passthrough=e.offsetY<=this.clientHeight-20&&e.offsetX<=this.clientWidth-20:this.passthrough=e.offsetY<=this.clientHeight&&e.offsetX<=this.clientWidth)}syncOuterScroller(){this.scrollTop=this.scrollTarget.scrollTop,this.scrollLeft=this.scrollTarget.scrollLeft}_syncScrollTarget(){requestAnimationFrame(()=>{this.scrollTarget.scrollTop=this.scrollTop,this.scrollTarget.scrollLeft=this.scrollLeft,this.scrollHandler._scrollHandler()})}}customElements.define(En.is,En);
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/
const Tn=document.createElement("dom-module");Tn.appendChild(he`
  <style>
    @keyframes vaadin-grid-appear {
      to {
        opacity: 1;
      }
    }

    :host {
      display: block;
      animation: 1ms vaadin-grid-appear;
      height: 400px;
      flex: 1 1 auto;
      align-self: stretch;
      position: relative;
    }

    :host([hidden]) {
      display: none !important;
    }

    #scroller {
      display: block;
      transform: translateY(0);
      width: auto;
      height: auto;
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
    }

    :host([height-by-rows]) {
      height: auto;
      align-self: flex-start;
      flex-grow: 0;
      width: 100%;
    }

    :host([height-by-rows]) #scroller {
      width: 100%;
      height: 100%;
      position: relative;
    }

    #table {
      display: block;
      width: 100%;
      height: 100%;
      overflow: auto;
      z-index: -2;
      position: relative;
      outline: none;
    }

    #header {
      display: block;
      position: absolute;
      top: 0;
      width: 100%;
    }

    th {
      text-align: inherit;
    }

    /* Safari doesn't work with "inherit" */
    [safari] th {
      text-align: initial;
    }

    #footer {
      display: block;
      position: absolute;
      bottom: 0;
      width: 100%;
    }

    #items {
      display: block;
      width: 100%;
      position: relative;
      z-index: -1;
    }

    #items,
    #outersizer,
    #fixedsizer {
      border-top: 0 solid transparent;
      border-bottom: 0 solid transparent;
    }

    [part~="row"] {
      display: flex;
      width: 100%;
      box-sizing: border-box;
      margin: 0;
    }

    [part~="row"][loading] [part~="body-cell"] ::slotted(vaadin-grid-cell-content) {
      opacity: 0;
    }

    #items [part~="row"] {
      position: absolute;
    }

    #items [part~="row"]:empty {
      height: 1em;
    }

    [part~="cell"]:not([part~="details-cell"]) {
      flex-shrink: 0;
      flex-grow: 1;
      box-sizing: border-box;
      display: flex;
      width: 100%;
      position: relative;
      align-items: center;
      padding: 0;
      white-space: nowrap;
    }

    [part~="details-cell"] {
      position: absolute;
      bottom: 0;
      width: 100%;
      box-sizing: border-box;
      padding: 0;
    }

    [part~="cell"] ::slotted(vaadin-grid-cell-content) {
      display: block;
      width: 100%;
      box-sizing: border-box;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    [hidden] {
      display: none !important;
    }

    [frozen] {
      z-index: 2;
      will-change: transform;
    }

    #outerscroller {
      /* Needed (at least) for Android Chrome */
      z-index: 0;
    }

    #scroller:not([safari]) #outerscroller {
      /* Needed for Android Chrome (#1020). Can't be applied to Safari
      since it would re-introduce the sub-pixel overflow bug (#853) */
      will-change: transform;
    }

    [no-scrollbars]:not([safari]):not([firefox]) #outerscroller,
    [no-scrollbars][safari] #table,
    [no-scrollbars][firefox] #table {
      overflow: hidden;
    }

    [no-scrollbars]:not([safari]):not([firefox]) #outerscroller {
      pointer-events: none;
    }

    /* Reordering styles */
    :host([reordering]) [part~="cell"] ::slotted(vaadin-grid-cell-content),
    :host([reordering]) [part~="resize-handle"],
    #scroller[no-content-pointer-events] [part~="cell"] ::slotted(vaadin-grid-cell-content) {
      pointer-events: none;
    }

    [part~="reorder-ghost"] {
      visibility: hidden;
      position: fixed;
      pointer-events: none;
      opacity: 0.5;

      /* Prevent overflowing the grid in Firefox */
      top: 0;
      left: 0;
    }

    :host([reordering]) {
      -moz-user-select: none;
      -webkit-user-select: none;
      user-select: none;
    }

    #scroller[ie][column-reordering-allowed] [part~="header-cell"] {
      -ms-user-select: none;
    }

    :host([reordering]) #outerscroller {
      -webkit-overflow-scrolling: auto !important;
    }

    /* Resizing styles */
    [part~="resize-handle"] {
      position: absolute;
      top: 0;
      right: 0;
      height: 100%;
      cursor: col-resize;
      z-index: 1;
    }

    [part~="resize-handle"]::before {
      position: absolute;
      content: "";
      height: 100%;
      width: 35px;
      transform: translateX(-50%);
    }

    [last-column] [part~="resize-handle"]::before,
    [last-frozen] [part~="resize-handle"]::before {
      width: 18px;
      transform: none;
      right: 0;
    }

    #scroller[column-resizing] {
      -ms-user-select: none;
      -moz-user-select: none;
      -webkit-user-select: none;
      user-select: none;
    }

    /* Sizer styles */
    .sizer {
      display: flex;
      position: relative;
      width: 100%;
      visibility: hidden;
    }

    .sizer [part~="details-cell"] {
      display: none !important;
    }

    .sizer [part~="cell"][hidden] {
      display: none !important;
    }

    .sizer [part~="cell"] {
      display: block;
      flex-shrink: 0;
      line-height: 0;
      margin-top: -1em;
      height: 0 !important;
      min-height: 0 !important;
      max-height: 0 !important;
      padding: 0 !important;
    }

    .sizer [part~="cell"]::before {
      content: "-";
    }

    .sizer [part~="cell"] ::slotted(vaadin-grid-cell-content) {
      display: none !important;
    }

    /* Fixed mode (Tablet Edge) */
    #fixedsizer {
      position: absolute;
    }

    :not([edge][no-scrollbars]) #fixedsizer {
      display: none;
    }

    [edge][no-scrollbars] {
      /* Any value other than ‘none’ for the transform results in the creation of both a stacking context and
      a containing block. The object acts as a containing block for fixed positioned descendants. */
      transform: translateZ(0);
      overflow: hidden;
    }

    [edge][no-scrollbars] #header,
    [edge][no-scrollbars] #footer {
      position: fixed;
    }

    [edge][no-scrollbars] #items {
      position: fixed;
      width: 100%;
      will-change: transform;
    }
  </style>
`);const In=/^((?!chrome|android).)*safari/i.test(navigator.userAgent),On=navigator.userAgent.toLowerCase().indexOf("firefox")>-1;if(In||On){const e=document.createElement("style");e.textContent="\n    [scrolling][safari] #outerscroller,\n    [scrolling][firefox] #outerscroller {\n      pointer-events: auto;\n    }\n\n    [ios] #outerscroller {\n      pointer-events: auto;\n      z-index: -3;\n    }\n\n    [ios][scrolling] #outerscroller {\n      z-index: 0;\n    }\n\n    [ios] [frozen] {\n      will-change: auto;\n    }\n  ",Tn.querySelector("template").content.appendChild(e)}Tn.register("vaadin-grid-styles");
/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/
const zn=(()=>{try{return document.createEvent("TouchEvent"),!0}catch(e){return!1}})();class Rn extends(Hi(wi(nn(tn(on(en(cn(un(pn(dn(xn(Qr(ln(Sn(sn(an(Cn(_n(Zr))))))))))))))))))){static get template(){return he`
    <style include="vaadin-grid-styles"></style>

    <div id="scroller" no-scrollbars\$="[[!_scrollbarWidth]]" wheel-scrolling\$="[[_wheelScrolling]]" safari\$="[[_safari]]" ios\$="[[_ios]]" loading\$="[[loading]]" edge\$="[[_edge]]" firefox\$="[[_firefox]]" ie\$="[[_ie]]" column-reordering-allowed\$="[[columnReorderingAllowed]]">

      <table id="table" role="grid" aria-multiselectable="true" tabindex="0">
        <caption id="fixedsizer" class="sizer" part="row"></caption>
        <thead id="header" role="rowgroup"></thead>
        <tbody id="items" role="rowgroup"></tbody>
        <tfoot id="footer" role="rowgroup"></tfoot>
      </table>

      <div part="reorder-ghost"></div>
      <vaadin-grid-outer-scroller id="outerscroller" _touch-device="[[_touchDevice]]" scroll-target="[[scrollTarget]]" scroll-handler="[[_this]]" no-scrollbars="[[!_scrollbarWidth]]">
        <div id="outersizer" class="sizer" part="row"></div>
      </vaadin-grid-outer-scroller>
    </div>

    <!-- The template needs at least one slot or else shady doesn't distribute -->
    <slot name="nodistribute"></slot>

    <div id="focusexit" tabindex="0"></div>
`}static get is(){return"vaadin-grid"}static get version(){return"5.5.3"}static get observers(){return["_columnTreeChanged(_columnTree, _columnTree.*)"]}static get properties(){return{_this:{type:Object,value:function(){return this}},_safari:{type:Boolean,value:/^((?!chrome|android).)*safari/i.test(navigator.userAgent)},_ios:{type:Boolean,value:/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream||"MacIntel"===navigator.platform&&navigator.maxTouchPoints>1},_edge:{type:Boolean,value:"undefined"!=typeof CSS&&CSS.supports("(-ms-ime-align:auto)")},_ie:{type:Boolean,value:!(!navigator.userAgent.match(/Trident/)||navigator.userAgent.match(/MSIE/))},_firefox:{type:Boolean,value:navigator.userAgent.toLowerCase().indexOf("firefox")>-1},_android:{type:Boolean,value:/android/i.test(navigator.userAgent)},_touchDevice:{type:Boolean,value:zn},heightByRows:{type:Boolean,value:!1,reflectToAttribute:!0,observer:"_heightByRowsChanged"},_recalculateColumnWidthOnceLoadingFinished:{type:Boolean,value:!0}}}constructor(){super(),this.addEventListener("animationend",this._onAnimationEnd)}connectedCallback(){super.connectedCallback(),this.recalculateColumnWidths()}__hasRowsWithClientHeight(){return!!Array.from(this.$.items.children).filter(e=>e.clientHeight).length}__itemsReceived(){this._recalculateColumnWidthOnceLoadingFinished&&!this._cache.isLoading()&&this.__hasRowsWithClientHeight()&&(this._recalculateColumnWidthOnceLoadingFinished=!1,this.recalculateColumnWidths())}_recalculateColumnWidths(e){e.forEach(e=>{e.width="auto",e._origFlexGrow=e.flexGrow,e.flexGrow=0}),e.forEach(e=>{e._currentWidth=0,e._allCells.forEach(t=>{const i=Math.ceil(t.getBoundingClientRect().width);e._currentWidth=Math.max(e._currentWidth,i)})}),e.forEach(e=>{e.width=e._currentWidth+"px",e.flexGrow=e._origFlexGrow,e._currentWidth=void 0,e._origFlexGrow=void 0})}recalculateColumnWidths(){if(this._columnTree)if(this._cache.isLoading())this._recalculateColumnWidthOnceLoadingFinished=!0;else{const e=this._getColumns().filter(e=>!e.hidden&&e.autoWidth);this._recalculateColumnWidths(e)}}_createScrollerRows(e){const t=[];for(var i=0;i<e;i++){const e=document.createElement("tr");e.setAttribute("part","row"),e.setAttribute("role","row"),this._columnTree&&this._updateRow(e,this._columnTree[this._columnTree.length-1],"body",!1,!0),t.push(e)}var s,r,n;return this._columnTree&&this._columnTree[this._columnTree.length-1].forEach(e=>e.notifyPath&&e.notifyPath("_cells.*",e._cells)),s=this,r=()=>{this._updateFirstAndLastColumn(),this._resetKeyboardNavigation()},Ls||Fs(),Ds.push([s,r,n]),t}_getRowTarget(){return this.$.items}_createCell(e){const t="vaadin-grid-cell-content-"+(this._contentIndex=this._contentIndex+1||0),i=document.createElement("vaadin-grid-cell-content");i.setAttribute("slot",t);const s=document.createElement(e);s.id=t.replace("-content-","-"),s.setAttribute("tabindex","-1"),s.setAttribute("role","td"===e?"gridcell":"columnheader");const r=document.createElement("slot");return r.setAttribute("name",t),s.appendChild(r),s._content=i,i.addEventListener("mousedown",()=>{if(window.chrome){const e=()=>{i.contains(this.getRootNode().activeElement)||s.focus(),document.removeEventListener("mouseup",e,!0)};document.addEventListener("mouseup",e,!0)}else setTimeout(()=>{i.contains(this.getRootNode().activeElement)||s.focus()})}),s}_updateRow(e,t,i,s,r){i=i||"body";const n=document.createDocumentFragment();Array.from(e.children).forEach(e=>e._vacant=!0),e.innerHTML="","outersizer"!==e.id&&"fixedsizer"!==e.id&&(e.hidden=!0),t.forEach((o,a)=>{let l;if("body"===i){if(o._cells=o._cells||[],l=o._cells.filter(e=>e._vacant)[0],l||(l=this._createCell("td"),o._cells.push(l)),l.setAttribute("part","cell body-cell"),e.appendChild(l),a===t.length-1&&(this._rowDetailsTemplate||this.rowDetailsRenderer)){this._detailsCells=this._detailsCells||[];const t=this._detailsCells.filter(e=>e._vacant)[0]||this._createCell("td");-1===this._detailsCells.indexOf(t)&&this._detailsCells.push(t),t._content.parentElement||n.appendChild(t._content),this._configureDetailsCell(t),e.appendChild(t),this._a11ySetRowDetailsCell(e,t),t._vacant=!1}o.notifyPath&&!r&&o.notifyPath("_cells.*",o._cells)}else{const t="header"===i?"th":"td";s||"vaadin-grid-column-group"===o.localName?(l=o[`_${i}Cell`]||this._createCell(t),l._column=o,e.appendChild(l),o[`_${i}Cell`]=l):(o._emptyCells=o._emptyCells||[],l=o._emptyCells.filter(e=>e._vacant)[0]||this._createCell(t),l._column=o,e.appendChild(l),-1===o._emptyCells.indexOf(l)&&o._emptyCells.push(l)),l.setAttribute("part",`cell ${i}-cell`),this.__updateHeaderFooterRowVisibility(e)}l._content.parentElement||n.appendChild(l._content),l._vacant=!1,l._column=o}),this.appendChild(n),this._frozenCellsChanged(),this._updateFirstAndLastColumnForRow(e)}__updateHeaderFooterRowVisibility(e){if(!e)return;const t=Array.from(e.children).filter(t=>{const i=t._column;if(i._emptyCells&&i._emptyCells.indexOf(t)>-1)return!1;if(e.parentElement===this.$.header){if(i.headerRenderer||i._headerTemplate)return!0;if(null===i.header)return!1;if(i.path||void 0!==i.header)return!0}else if(i.footerRenderer||i._footerTemplate)return!0});e.hidden!==!t.length&&(e.hidden=!t.length,this.notifyResize())}_updateScrollerItem(e,t){this._preventScrollerRotatingCellFocus(e,t),this._columnTree&&(this._toggleAttribute("first",0===t,e),this._toggleAttribute("odd",t%2,e),this._a11yUpdateRowRowindex(e,t),this._getItem(t,e))}_columnTreeChanged(e,t){for(Array.from(this.$.items.children).forEach(t=>this._updateRow(t,e[e.length-1]));this.$.header.children.length<e.length;){const e=document.createElement("tr");e.setAttribute("part","row"),e.setAttribute("role","row"),this.$.header.appendChild(e);const t=document.createElement("tr");t.setAttribute("part","row"),t.setAttribute("role","row"),this.$.footer.appendChild(t)}for(;this.$.header.children.length>e.length;)this.$.header.removeChild(this.$.header.firstElementChild),this.$.footer.removeChild(this.$.footer.firstElementChild);Array.from(this.$.header.children).forEach((t,i)=>this._updateRow(t,e[i],"header",i===e.length-1)),Array.from(this.$.footer.children).forEach((t,i)=>this._updateRow(t,e[e.length-1-i],"footer",0===i)),this._updateRow(this.$.outersizer,e[e.length-1]),this._updateRow(this.$.fixedsizer,e[e.length-1]),this._resizeHandler(),this._frozenCellsChanged(),this._updateFirstAndLastColumn(),this._resetKeyboardNavigation(),this._a11yUpdateHeaderRows(),this._a11yUpdateFooterRows(),this.recalculateColumnWidths()}_updateItem(e,t){e._item=t;const i=this.__getRowModel(e);this._toggleAttribute("selected",i.selected,e),this._a11yUpdateRowSelected(e,i.selected),this._a11yUpdateRowLevel(e,i.level),this._toggleAttribute("expanded",i.expanded,e),(this._rowDetailsTemplate||this.rowDetailsRenderer)&&this._toggleDetailsCell(e,t),this._generateCellClassNames(e,i),this._filterDragAndDrop(e,i),Array.from(e.children).forEach(e=>{if(e._renderer){const t=e._column||this;e._renderer.call(t,e._content,t,i)}else e._instance&&(e._instance.__detailsOpened__=i.detailsOpened,e._instance.__selected__=i.selected,e._instance.__level__=i.level,e._instance.__expanded__=i.expanded,e._instance.setProperties(i))}),this._debouncerUpdateHeights=kt.debounce(this._debouncerUpdateHeights,ke.after(1),()=>{this._updateMetrics(),this._positionItems(),this._updateScrollerSize()})}_resizeHandler(){this._updateDetailsCellHeights(),this._accessIronListAPI(super._resizeHandler,!0),this._updateHeaderFooterMetrics()}_updateHeaderFooterMetrics(){const e=this.$.header.clientHeight+"px",t=this.$.footer.clientHeight+"px";[this.$.outersizer,this.$.fixedsizer,this.$.items].forEach(i=>{i.style.borderTopWidth=e,i.style.borderBottomWidth=t}),Vs(this.$.header,()=>{this._pendingScrollToIndex&&this._scrollToIndex(this._pendingScrollToIndex)})}_onAnimationEnd(e){0===e.animationName.indexOf("vaadin-grid-appear")&&(this._render(),this._updateHeaderFooterMetrics(),e.stopPropagation(),this.notifyResize(),this.__itemsReceived())}_toggleAttribute(e,t,i){i.hasAttribute(e)===!t&&(t?i.setAttribute(e,""):i.removeAttribute(e))}__getRowModel(e){return{index:e.index,item:e._item,level:this._getIndexLevel(e.index),expanded:this._isExpanded(e._item),selected:this._isSelected(e._item),detailsOpened:!(!this._rowDetailsTemplate&&!this.rowDetailsRenderer)&&this._isDetailsOpened(e._item)}}render(){this._columnTree&&(this._columnTree.forEach(e=>{e.forEach(e=>e._renderHeaderAndFooter())}),this._update())}notifyResize(){super.notifyResize()}_heightByRowsChanged(e,t){(e||t)&&this.notifyResize()}__forceReflow(){this._debouncerForceReflow=kt.debounce(this._debouncerForceReflow,Le,()=>{this.$.scroller.style.overflow="hidden",setTimeout(()=>this.$.scroller.style.overflow="")})}}customElements.define(Rn.is,Rn);var Nn={UserData:{email:"ria.verhoof@chello.nl",name:"Ria",surname:"Verhoof",country:"NL",age:69,weight:99,length:180,children:2,urine_loss_period:"",life_impact:3,targetFibers:4},SystemData:{app_version_code:80,app_version_name:"V77",sensor_fw_version:272,sensor_mac_address:"98:a3:8f:6d:ee:66"},LogsData:[{type:"leak",value:10,date:"10 January 2020 12:00",extra_info:"400"},{type:"dry",value:0,date:"10 January 2020 14:00",extra_info:""},{type:"drink",value:200,date:"10 January 2020 14:00",extra_info:"coffee"}]};Nn.UserData.age,Object.keys(Nn.UserData).forEach((function(e,t){console.log("test");var i=document.createElement("H3");i.innerText=e+" : ",i.style.cssText="display: inline-block;",document.getElementById("patientInfo").appendChild(i);var s=document.createElement("H4");s.innerText=" "+Nn.UserData[e],s.style.cssText="display: inline-block;",document.getElementById("patientInfo").appendChild(s);var r=document.createElement("BR");document.getElementById("patientInfo").appendChild(r)}));i(1),i(2);window.addEventListener("load",()=>{!async function(){if("serviceWorker"in navigator)try{await navigator.serviceWorker.register("./sw.js")}catch(e){console.log("ServiceWorker registration failed. Sorry about that.",e)}else console.log("Your browser does not support ServiceWorker.")}()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhdGllbnRzTGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY2hhdC9jaGF0V2luZG93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdmFhZGluL3ZhYWRpbi1sdW1vLXN0eWxlcy92ZXJzaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9zaGFkeWNzcy9zcmMvZG9jdW1lbnQtd2FpdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvc2hhZHljc3Mvc3JjL2N1c3RvbS1zdHlsZS1pbnRlcmZhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3NoYWR5Y3NzL3NyYy9jb21tb24tcmVnZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3NoYWR5Y3NzL3NyYy9jb21tb24tdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3NoYWR5Y3NzL3NyYy9zdHlsZS1zZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvc2hhZHljc3MvZW50cnlwb2ludHMvY3VzdG9tLXN0eWxlLWludGVyZmFjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvYm9vdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvcmVzb2x2ZS11cmwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL3NldHRpbmdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi9lbGVtZW50cy9kb20tbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi91dGlscy9zdHlsZS1nYXRoZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL2VsZW1lbnRzL2N1c3RvbS1zdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZhYWRpbi92YWFkaW4tbHVtby1zdHlsZXMvY29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2YWFkaW4vdmFhZGluLWx1bW8tc3R5bGVzL2ZvbnQtaWNvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2YWFkaW4vdmFhZGluLWx1bW8tc3R5bGVzL3NpemluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZhYWRpbi92YWFkaW4tbHVtby1zdHlsZXMvc3BhY2luZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZhYWRpbi92YWFkaW4tbHVtby1zdHlsZXMvc3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2YWFkaW4vdmFhZGluLWx1bW8tc3R5bGVzL3R5cG9ncmFwaHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL2h0bWwtdGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdmFhZGluL3ZhYWRpbi1jaGVja2JveC90aGVtZS9sdW1vL3ZhYWRpbi1jaGVja2JveC1zdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL21peGluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi91dGlscy93cmFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi91dGlscy9wYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi91dGlscy9jYXNlLW1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvYXN5bmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL21peGlucy9wcm9wZXJ0aWVzLWNoYW5nZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL21peGlucy9wcm9wZXJ0eS1hY2Nlc3NvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL21peGlucy90ZW1wbGF0ZS1zdGFtcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvcG9seW1lci9saWIvbWl4aW5zL3Byb3BlcnR5LWVmZmVjdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL3RlbGVtZXRyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvcG9seW1lci9saWIvbWl4aW5zL3Byb3BlcnRpZXMtbWl4aW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL21peGlucy9lbGVtZW50LW1peGluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL3BvbHltZXItZWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvZGVib3VuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL2dlc3R1cmVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi9taXhpbnMvZ2VzdHVyZS1ldmVudC1saXN0ZW5lcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2YWFkaW4vdmFhZGluLXRoZW1hYmxlLW1peGluL3ZhYWRpbi10aGVtZS1wcm9wZXJ0eS1taXhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZhYWRpbi92YWFkaW4tdGhlbWFibGUtbWl4aW4vdmFhZGluLXRoZW1hYmxlLW1peGluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdmFhZGluL3ZhYWRpbi1jb250cm9sLXN0YXRlLW1peGluL3ZhYWRpbi1jb250cm9sLXN0YXRlLW1peGluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi91dGlscy9mbHVzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZhYWRpbi92YWFkaW4tZWxlbWVudC1taXhpbi92YWFkaW4tZGlyLWhlbHBlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZhYWRpbi92YWFkaW4tZWxlbWVudC1taXhpbi92YWFkaW4tZGlyLW1peGluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdmFhZGluL3ZhYWRpbi1kZXZlbG9wbWVudC1tb2RlLWRldGVjdG9yL3ZhYWRpbi1kZXZlbG9wbWVudC1tb2RlLWRldGVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdmFhZGluL3ZhYWRpbi11c2FnZS1zdGF0aXN0aWNzL3ZhYWRpbi11c2FnZS1zdGF0aXN0aWNzLWNvbGxlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2YWFkaW4vdmFhZGluLWVsZW1lbnQtbWl4aW4vdmFhZGluLWVsZW1lbnQtbWl4aW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2YWFkaW4vdmFhZGluLWNoZWNrYm94L3NyYy92YWFkaW4tY2hlY2tib3guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2YWFkaW4vdmFhZGluLWdyaWQvdGhlbWUvbHVtby92YWFkaW4tZ3JpZC1zdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3NoYWR5Y3NzL3NyYy9jc3MtcGFyc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3NoYWR5Y3NzL3NyYy91bnNjb3BlZC1zdHlsZS1oYW5kbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9zaGFkeWNzcy9zcmMvc3R5bGUtdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvc2hhZHljc3Mvc3JjL2FwcGx5LXNoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3NoYWR5Y3NzL3NyYy90ZW1wbGF0ZS1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3NoYWR5Y3NzL3NyYy9hcHBseS1zaGltLXV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9zaGFkeWNzcy9lbnRyeXBvaW50cy9hcHBseS1zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi9taXhpbnMvZGlyLW1peGluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi91dGlscy9yZW5kZXItc3RhdHVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi91dGlscy91bnJlc29sdmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi91dGlscy9hcnJheS1zcGxpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL2ZsYXR0ZW5lZC1ub2Rlcy1vYnNlcnZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvcG9seW1lci9saWIvbGVnYWN5L3BvbHltZXIuZG9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi91dGlscy9zY29wZS1zdWJ0cmVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi9sZWdhY3kvbGVnYWN5LWVsZW1lbnQtbWl4aW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL2xlZ2FjeS9jbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvcG9seW1lci9saWIvbGVnYWN5L3BvbHltZXItZm4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL21peGlucy9tdXRhYmxlLWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL3RlbXBsYXRpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL2hpZGUtdGVtcGxhdGUtY29udHJvbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL2VsZW1lbnRzL2RvbS1iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi9lbGVtZW50cy9kb20tcmVwZWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi9lbGVtZW50cy9kb20taWYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL2VsZW1lbnRzL2FycmF5LXNlbGVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi9sZWdhY3kvbXV0YWJsZS1kYXRhLWJlaGF2aW9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL3BvbHltZXItbGVnYWN5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9pcm9uLXJlc2l6YWJsZS1iZWhhdmlvci9pcm9uLXJlc2l6YWJsZS1iZWhhdmlvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvaXJvbi1zY3JvbGwtdGFyZ2V0LWJlaGF2aW9yL2lyb24tc2Nyb2xsLXRhcmdldC1iZWhhdmlvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZhYWRpbi92YWFkaW4tZ3JpZC9zcmMvaXJvbi1saXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdmFhZGluL3ZhYWRpbi1ncmlkL3NyYy92YWFkaW4tZ3JpZC1zY3JvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZhYWRpbi92YWFkaW4tZ3JpZC9zcmMvdmFhZGluLWdyaWQtYTExeS1taXhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZhYWRpbi92YWFkaW4tZ3JpZC9zcmMvdmFhZGluLWdyaWQtYWN0aXZlLWl0ZW0tbWl4aW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2YWFkaW4vdmFhZGluLWdyaWQvc3JjL3ZhYWRpbi1ncmlkLWFycmF5LWRhdGEtcHJvdmlkZXItbWl4aW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2YWFkaW4vdmFhZGluLWdyaWQvc3JjL3ZhYWRpbi1ncmlkLWNvbHVtbi1yZXNpemluZy1taXhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZhYWRpbi92YWFkaW4tZ3JpZC9zcmMvdmFhZGluLWdyaWQtZGF0YS1wcm92aWRlci1taXhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZhYWRpbi92YWFkaW4tZ3JpZC9zcmMvdmFhZGluLWdyaWQtZHluYW1pYy1jb2x1bW5zLW1peGluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdmFhZGluL3ZhYWRpbi1ncmlkL3NyYy92YWFkaW4tZ3JpZC1ldmVudC1jb250ZXh0LW1peGluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdmFhZGluL3ZhYWRpbi1ncmlkL3NyYy92YWFkaW4tZ3JpZC1maWx0ZXItbWl4aW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2YWFkaW4vdmFhZGluLWdyaWQvc3JjL3ZhYWRpbi1ncmlkLXRlbXBsYXRpemVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdmFhZGluL3ZhYWRpbi1ncmlkL3NyYy92YWFkaW4tZ3JpZC1yb3ctZGV0YWlscy1taXhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZhYWRpbi92YWFkaW4tZ3JpZC9zcmMvdmFhZGluLWdyaWQtc2Nyb2xsLW1peGluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdmFhZGluL3ZhYWRpbi1ncmlkL3NyYy92YWFkaW4tZ3JpZC1zZWxlY3Rpb24tbWl4aW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2YWFkaW4vdmFhZGluLWdyaWQvc3JjL3ZhYWRpbi1ncmlkLXNvcnQtbWl4aW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2YWFkaW4vdmFhZGluLWdyaWQvc3JjL3ZhYWRpbi1ncmlkLXN0eWxpbmctbWl4aW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2YWFkaW4vdmFhZGluLWdyaWQvc3JjL3ZhYWRpbi1ncmlkLWRyYWctYW5kLWRyb3AtbWl4aW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2YWFkaW4vdmFhZGluLWdyaWQvc3JjL3ZhYWRpbi1ncmlkLWtleWJvYXJkLW5hdmlnYXRpb24tbWl4aW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2YWFkaW4vdmFhZGluLWdyaWQvc3JjL3ZhYWRpbi1ncmlkLWNvbHVtbi1yZW9yZGVyaW5nLW1peGluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdmFhZGluL3ZhYWRpbi1ncmlkL3NyYy92YWFkaW4tZ3JpZC1jb2x1bW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2YWFkaW4vdmFhZGluLWdyaWQvc3JjL3ZhYWRpbi1ncmlkLW91dGVyLXNjcm9sbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdmFhZGluL3ZhYWRpbi1ncmlkL3NyYy92YWFkaW4tZ3JpZC1zdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2YWFkaW4vdmFhZGluLWdyaWQvc3JjL3ZhYWRpbi1ncmlkLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2V4YW1wbGVEYXRhU291cmNlLnRzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImdyaWRfYmFjayIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJjb2x1bW5zIiwicXVlcnlTZWxlY3RvckFsbCIsImhlYWRlclJlbmRlcmVyIiwicm9vdCIsInRleHRDb250ZW50IiwicmVuZGVyZXIiLCJjb2x1bW4iLCJyb3dEYXRhIiwiaXRlbSIsImFnZSIsInNldFRpbWVvdXQiLCJpdGVtcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJwb3NzaWJsZUVtb2ppcyIsImVtb2ppIiwicmFuZG9tSW5kZXgiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJsZW5ndGgiLCJjaGF0TmFtZVVzZXIiLCJsb2NhdGlvbiIsImhhc2giLCJ0b1N0cmluZyIsImNoYXRIYXNoIiwic3Vic3RyaW5nIiwiZHJvbmUiLCJTY2FsZURyb25lIiwicm9vbU5hbWUiLCJyb29tIiwiZGF0YUNoYW5uZWwiLCJzZW5kU2lnbmFsaW5nTWVzc2FnZSIsIm1lc3NhZ2UiLCJwdWJsaXNoIiwic3RhcnRXZWJSVEMiLCJpc09mZmVyZXIiLCJjb25zb2xlIiwibG9nIiwicGNfcGVlckNvbm5lY3Rpb24iLCJvbmljZWNhbmRpZGF0ZSIsImV2ZW50IiwiY2FuZGlkYXRlIiwib25uZWdvdGlhdGlvbm5lZWRlZCIsImNyZWF0ZU9mZmVyIiwibG9jYWxEZXNjQ3JlYXRlZCIsImVycm9yIiwiY3JlYXRlRGF0YUNoYW5uZWwiLCJzZXR1cERhdGFDaGFubmVsIiwib25kYXRhY2hhbm5lbCIsImNoYW5uZWwiLCJvbnRyYWNrIiwic3RyZWFtIiwic3RyZWFtcyIsInJlbW90ZVZpZGVvIiwic3JjT2JqZWN0IiwiaWQiLCJvbiIsImNsaWVudCIsImNsaWVudElkIiwic2RwIiwic2V0UmVtb3RlRGVzY3JpcHRpb24iLCJSVENTZXNzaW9uRGVzY3JpcHRpb24iLCJyZW1vdGVEZXNjcmlwdGlvbiIsInR5cGUiLCJjcmVhdGVBbnN3ZXIiLCJhZGRJY2VDYW5kaWRhdGUiLCJSVENJY2VDYW5kaWRhdGUiLCJkZXNjIiwic2V0TG9jYWxEZXNjcmlwdGlvbiIsImxvY2FsRGVzY3JpcHRpb24iLCJjaGVja0RhdGFDaGFubmVsU3RhdGUiLCJvbm9wZW4iLCJvbmNsb3NlIiwib25tZXNzYWdlIiwiaW5zZXJ0TWVzc2FnZVRvRE9NIiwiSlNPTiIsInBhcnNlIiwiZGF0YSIsInJlYWR5U3RhdGUiLCJjb250ZW50Iiwib3B0aW9ucyIsImlzRnJvbU1lIiwidGVtcGxhdGUiLCJxdWVyeVNlbGVjdG9yIiwibmFtZUVsIiwiaW5uZXJUZXh0IiwiY2xvbmUiLCJpbXBvcnROb2RlIiwibWVzc2FnZUVsIiwiY2xhc3NMaXN0IiwiYWRkIiwibWVzc2FnZXNFbCIsImFwcGVuZENoaWxkIiwic2Nyb2xsVG9wIiwic2Nyb2xsSGVpZ2h0IiwiY2xpZW50SGVpZ2h0Iiwic3Vic2NyaWJlIiwibWVtYmVycyIsImFsZXJ0IiwiaW5wdXQiLCJzZW5kIiwic3RyaW5naWZ5IiwiaHJlZiIsIm5hdmlnYXRvciIsIm1lZGlhRGV2aWNlcyIsImdldFVzZXJNZWRpYSIsImF1ZGlvIiwidmlkZW8iLCJ0aGVuIiwibG9jYWxWaWRlbyIsImdldFRyYWNrcyIsImZvckVhY2giLCJ0cmFjayIsImFkZFRyYWNrIiwiUlRDUGVlckNvbm5lY3Rpb24iLCJpY2VTZXJ2ZXJzIiwidXJscyIsIkx1bW8iLCJIVE1MRWxlbWVudCIsImN1c3RvbUVsZW1lbnRzIiwiZGVmaW5lIiwicmVzb2x2ZUZuIiwicmVhZHlQcm9taXNlIiwid2hlblJlYWR5Iiwid2luZG93IiwiZG9jdW1lbnRXYWl0IiwiY2FsbGJhY2siLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJQcm9taXNlIiwicmVzb2x2ZSIsIkNBQ0hFRF9TVFlMRSIsInRyYW5zZm9ybUZuIiwidmFsaWRhdGVGbiIsInRoaXMiLCJzdHlsZSIsInB1c2giLCJlbnF1ZXVlRG9jdW1lbnRWYWxpZGF0aW9uIiwiY3VzdG9tU3R5bGUiLCJjcyIsImdldFN0eWxlRm9yQ3VzdG9tU3R5bGUiLCJzdHlsZVRvVHJhbnNmb3JtIiwiYWRkQ3VzdG9tU3R5bGUiLCJwcm9jZXNzU3R5bGVzIiwiZGVmaW5lUHJvcGVydGllcyIsImZuIiwibmVlZHNFbnF1ZXVlIiwiVkFSX0FTU0lHTiIsIk1JWElOX01BVENIIiwiTUVESUFfTUFUQ0giLCJ1cGRhdGVOYXRpdmVQcm9wZXJ0aWVzIiwiZWxlbWVudCIsInByb3BlcnRpZXMiLCJyZW1vdmVQcm9wZXJ0eSIsInNldFByb3BlcnR5IiwiZ2V0Q29tcHV0ZWRTdHlsZVZhbHVlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJ0cmltIiwibmF0aXZlU2hhZG93IiwibmF0aXZlQ3NzVmFyaWFibGVzXyIsImNhbGNDc3NWYXJpYWJsZXMiLCJzZXR0aW5ncyIsIkJvb2xlYW4iLCJ1c2VyQWdlbnQiLCJtYXRjaCIsIkNTUyIsInN1cHBvcnRzIiwiU2hhZHlDU1MiLCJ1bmRlZmluZWQiLCJjc3NCdWlsZCIsImRpc2FibGVSdW50aW1lIiwibmF0aXZlQ3NzIiwibmF0aXZlQ3NzVmFyaWFibGVzIiwiY3VzdG9tU3R5bGVJbnRlcmZhY2UiLCJlbGVtZW50TmFtZSIsImVsZW1lbnRFeHRlbmRzIiwiYm9keSIsIkN1c3RvbVN0eWxlSW50ZXJmYWNlIiwiSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSIsInByb3AiLCJvYmoiLCJ3b3JraW5nVVJMIiwicmVzb2x2ZURvYyIsIkNTU19VUkxfUlgiLCJBQlNfVVJMIiwicmVzb2x2ZVVybCIsInVybCIsImJhc2VVUkkiLCJ0ZXN0IiwidSIsIlVSTCIsInBhdGhuYW1lIiwiZSIsImltcGxlbWVudGF0aW9uIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiYmFzZSIsImNyZWF0ZUVsZW1lbnQiLCJoZWFkIiwiYW5jaG9yIiwicmVzb2x2ZUNzcyIsImNzc1RleHQiLCJyZXBsYWNlIiwicHJlIiwicG9zdCIsInBhdGhGcm9tVXJsIiwibGFzdEluZGV4T2YiLCJ1c2VTaGFkb3ciLCJyb290UGF0aCIsInNhbml0aXplRE9NVmFsdWUiLCJQb2x5bWVyIiwicGFzc2l2ZVRvdWNoR2VzdHVyZXMiLCJzdHJpY3RUZW1wbGF0ZVBvbGljeSIsImFsbG93VGVtcGxhdGVGcm9tRG9tTW9kdWxlIiwibGVnYWN5T3B0aW1pemF0aW9ucyIsInN5bmNJbml0aWFsUmVuZGVyIiwiY2FuY2VsU3ludGhldGljQ2xpY2tFdmVudHMiLCJsY01vZHVsZXMiLCJzZXRNb2R1bGUiLCJ0b0xvd2VyQ2FzZSIsImZpbmRNb2R1bGUiLCJzZWxlY3RvciIsIm9sZCIsIm5hbWVzcGFjZSIsInJlZ2lzdGVyIiwiX19hc3NldHBhdGgiLCJvd25lciIsIkhUTUxJbXBvcnRzIiwiaW1wb3J0Rm9yRWxlbWVudCIsIm93bmVyRG9jdW1lbnQiLCJnZXRBdHRyaWJ1dGUiLCJFcnJvciIsImluc3QiLCJ3YXJuIiwiaW1wb3J0TW9kdWxlIiwiaW1wb3J0Iiwic3R5bGVGb3JJbXBvcnQiLCJpbXBvcnREb2MiLCJpbXBvcnRDc3MiLCJzdHlsZXNGcm9tTW9kdWxlcyIsIm1vZHVsZUlkcyIsInNwbGl0Iiwic3R5bGVzIiwic3R5bGVzRnJvbU1vZHVsZSIsIl9zdHlsZXMiLCJfc3R5bGVzRnJvbU1vZHVsZUltcG9ydHMiLCJzdHlsZXNGcm9tVGVtcGxhdGUiLCJhc3NldHBhdGgiLCJlJCIsImluY2x1ZGUiLCJmaWx0ZXIiLCJpbmRleCIsInNlbGYiLCJpbmRleE9mIiwicCQiLCJ1bnNjb3BlZCIsImhhc0F0dHJpYnV0ZSIsIl91bnNjb3BlZFN0eWxlIiwic2V0QXR0cmlidXRlIiwiX3N0eWxlIiwiY3NzRnJvbU1vZHVsZSIsIl9jc3NUZXh0IiwiX2Nzc0Zyb21Nb2R1bGVJbXBvcnRzIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiY3NzRnJvbVRlbXBsYXRlIiwic3VwZXIiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjc3NGcm9tTW9kdWxlcyIsIiRfZG9jdW1lbnRDb250YWluZXIiLCJpbm5lckhUTUwiLCJMaXRlcmFsU3RyaW5nIiwic3RyaW5nIiwibGl0ZXJhbFZhbHVlIiwiaHRtbCIsInN0cmluZ3MiLCJ2YWx1ZXMiLCJyZWR1Y2UiLCJhY2MiLCJ2IiwiaWR4IiwiSFRNTFRlbXBsYXRlRWxlbWVudCIsImh0bWxWYWx1ZSIsIk1peGluRnVuY3Rpb24iLCJfX21peGluQXBwbGljYXRpb25zIiwiX19taXhpblNldCIsImRlZHVwaW5nTWl4aW4iLCJtaXhpbiIsIm1peGluQXBwbGljYXRpb25zIiwiV2Vha01hcCIsIm1peGluRGVkdXBlSWQiLCJiYXNlU2V0IiwibWFwIiwiZXh0ZW5kZWQiLCJzZXQiLCJtaXhpblNldCIsIndyYXAiLCJTaGFkeURPTSIsImlzUGF0aCIsInBhdGgiLCJkb3RJbmRleCIsInNsaWNlIiwiaXNBbmNlc3RvciIsImlzRGVzY2VuZGFudCIsInRyYW5zbGF0ZSIsIm5ld0Jhc2UiLCJub3JtYWxpemUiLCJBcnJheSIsImlzQXJyYXkiLCJwYXJ0cyIsImFyZ3MiLCJqIiwiam9pbiIsImluZm8iLCJsYXN0IiwiY2FzZU1hcCIsIkRBU0hfVE9fQ0FNRUwiLCJDQU1FTF9UT19EQVNIIiwiZGFzaFRvQ2FtZWxDYXNlIiwiZGFzaCIsInRvVXBwZXJDYXNlIiwiY2FtZWxUb0Rhc2hDYXNlIiwiY2FtZWwiLCJtaWNyb3Rhc2tDdXJySGFuZGxlIiwibWljcm90YXNrTGFzdEhhbmRsZSIsIm1pY3JvdGFza0NhbGxiYWNrcyIsIm1pY3JvdGFza05vZGVDb250ZW50IiwibWljcm90YXNrTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiTXV0YXRpb25PYnNlcnZlciIsImxlbiIsImNiIiwic3BsaWNlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJ0aW1lT3V0IiwiYWZ0ZXIiLCJkZWxheSIsInJ1biIsImhhbmRsZSIsImNsZWFyVGltZW91dCIsImFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJpZGxlUGVyaW9kIiwicmVxdWVzdElkbGVDYWxsYmFjayIsImNhbmNlbElkbGVDYWxsYmFjayIsIm1pY3JvVGFzayIsIm1pY3JvdGFzayIsInN1cGVyQ2xhc3MiLCJwcm9wcyIsInByb3RvIiwiX2NyZWF0ZVByb3BlcnR5QWNjZXNzb3IiLCJyZWFkT25seSIsIl9hZGRQcm9wZXJ0eVRvQXR0cmlidXRlTWFwIiwiX19kYXRhSGFzQWNjZXNzb3IiLCJhc3NpZ24iLCJfZGVmaW5lUHJvcGVydHlBY2Nlc3NvciIsIl9fZGF0YUF0dHJpYnV0ZXMiLCJhdHRyIiwiY29uc3RydWN0b3IiLCJhdHRyaWJ1dGVOYW1lRm9yUHJvcGVydHkiLCJfZ2V0UHJvcGVydHkiLCJfc2V0UHJvcGVydHkiLCJfX2RhdGFFbmFibGVkIiwiX19kYXRhUmVhZHkiLCJfX2RhdGFJbnZhbGlkIiwiX19kYXRhIiwiX19kYXRhUGVuZGluZyIsIl9fZGF0YU9sZCIsIl9fZGF0YUluc3RhbmNlUHJvcHMiLCJfX3NlcmlhbGl6aW5nIiwiX2luaXRpYWxpemVQcm9wZXJ0aWVzIiwiX2ZsdXNoUHJvcGVydGllcyIsIl9zZXRQZW5kaW5nUHJvcGVydHkiLCJfaW52YWxpZGF0ZVByb3BlcnRpZXMiLCJleHQiLCJjaGFuZ2VkIiwiX3Nob3VsZFByb3BlcnR5Q2hhbmdlIiwiX2luaXRpYWxpemVJbnN0YW5jZVByb3BlcnRpZXMiLCJyZWFkeSIsImNoYW5nZWRQcm9wcyIsIl9zaG91bGRQcm9wZXJ0aWVzQ2hhbmdlIiwiX3Byb3BlcnRpZXNDaGFuZ2VkIiwiY3VycmVudFByb3BzIiwib2xkUHJvcHMiLCJfYXR0cmlidXRlVG9Qcm9wZXJ0eSIsImF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayIsImF0dHJpYnV0ZSIsIl9kZXNlcmlhbGl6ZVZhbHVlIiwidHlwZUZvclByb3BlcnR5IiwiYXJndW1lbnRzIiwiX3ZhbHVlVG9Ob2RlQXR0cmlidXRlIiwibm9kZSIsInN0ciIsIl9zZXJpYWxpemVWYWx1ZSIsIk51bWJlciIsIm5hdGl2ZVByb3BlcnRpZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0UHJvdG90eXBlT2YiLCJhJCIsIm9ic2VydmVkQXR0cmlidXRlcyIsIl9fZGF0YVByb3RvIiwiX2luaXRpYWxpemVQcm90b1Byb3BlcnRpZXMiLCJlbCIsIkRhdGUiLCJ4Iiwib3V0VmFsdWUiLCJpc05hTiIsIlN0cmluZyIsIm1vZGVsIiwic2F2ZUFjY2Vzc29yVmFsdWUiLCJ0ZW1wbGF0ZUV4dGVuc2lvbnMiLCJwbGFjZWhvbGRlckJ1Z0RldGVjdCIsInBsYWNlaG9sZGVyQnVnIiwiZml4UGxhY2Vob2xkZXIiLCJwbGFjZWhvbGRlciIsImhhc1BsYWNlaG9sZGVyQnVnIiwibG9jYWxOYW1lIiwid3JhcFRlbXBsYXRlRXh0ZW5zaW9uIiwiaXMiLCJyZXBsYWNlQ2hpbGQiLCJhdHRyaWJ1dGVzIiwiZmluZFRlbXBsYXRlTm9kZSIsIm5vZGVJbmZvIiwicGFyZW50IiwicGFyZW50SW5mbyIsImZpcnN0Q2hpbGQiLCJuZXh0U2libGluZyIsInBhcmVudEluZGV4IiwiYXBwbHlJZFRvTWFwIiwiYXBwbHlFdmVudExpc3RlbmVyIiwiZXZlbnRzIiwiX2FkZE1ldGhvZEV2ZW50TGlzdGVuZXJUb05vZGUiLCJhcHBseVRlbXBsYXRlQ29udGVudCIsInRlbXBsYXRlSW5mbyIsIl90ZW1wbGF0ZUluZm8iLCJUZW1wbGF0ZVN0YW1wIiwib3V0ZXJUZW1wbGF0ZUluZm8iLCJub2RlSW5mb0xpc3QiLCJzdHJpcFdoaXRlU3BhY2UiLCJfcGFyc2VUZW1wbGF0ZUNvbnRlbnQiLCJfcGFyc2VUZW1wbGF0ZU5vZGUiLCJub3RlZCIsImhhc0luc2VydGlvblBvaW50IiwiX3BhcnNlVGVtcGxhdGVOZXN0ZWRUZW1wbGF0ZSIsIl9wYXJzZVRlbXBsYXRlQ2hpbGROb2RlcyIsImhhc0F0dHJpYnV0ZXMiLCJfcGFyc2VUZW1wbGF0ZU5vZGVBdHRyaWJ1dGVzIiwibmV4dCIsIm5vZGVUeXBlIiwiTm9kZSIsIlRFWFRfTk9ERSIsImNoaWxkSW5mbyIsImluZm9JbmRleCIsIl9wYXJzZVRlbXBsYXRlIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImF0dHJzIiwiZnJvbSIsImEiLCJfcGFyc2VUZW1wbGF0ZU5vZGVBdHRyaWJ1dGUiLCJkZWNvcmF0ZSIsImRvbSIsIl9fbm9JbnNlcnRpb25Qb2ludCIsIm5vZGVzIiwibm9kZUxpc3QiLCIkIiwiZXZlbnROYW1lIiwibWV0aG9kTmFtZSIsImNvbnRleHQiLCJoYW5kbGVyIiwiX21ldGhvZEhvc3QiLCJkZXRhaWwiLCJjcmVhdGVOb2RlRXZlbnRIYW5kbGVyIiwiX2FkZEV2ZW50TGlzdGVuZXJUb05vZGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiVFlQRVMiLCJDT01QVVRFIiwiUkVGTEVDVCIsIk5PVElGWSIsIlBST1BBR0FURSIsIk9CU0VSVkUiLCJSRUFEX09OTFkiLCJjYXBpdGFsQXR0cmlidXRlUmVnZXgiLCJlbnN1cmVPd25FZmZlY3RNYXAiLCJlZmZlY3RzIiwicHJvdG9GeCIsImluc3RGeCIsInJ1bkVmZmVjdHMiLCJoYXNQYXRocyIsImV4dHJhQXJncyIsInJhbiIsInJ1bkVmZmVjdHNGb3JQcm9wZXJ0eSIsImRlZHVwZUlkIiwiZnhzIiwiZngiLCJsYXN0UnVuIiwicGF0aE1hdGNoZXNUcmlnZ2VyIiwidHJpZ2dlciIsInRyaWdnZXJQYXRoIiwic3RydWN0dXJlZCIsIndpbGRjYXJkIiwicnVuT2JzZXJ2ZXJFZmZlY3QiLCJtZXRob2QiLCJjaGFuZ2VkUHJvcCIsImR5bmFtaWNGbiIsIm5vdGlmeVBhdGgiLCJyb290UHJvcGVydHkiLCJkaXNwYXRjaE5vdGlmeUV2ZW50IiwicXVldWVQcm9wZXJ0eSIsImRpc3BhdGNoRXZlbnQiLCJDdXN0b21FdmVudCIsInJ1bk5vdGlmeUVmZmVjdCIsInJ1blJlZmxlY3RFZmZlY3QiLCJhdHRyTmFtZSIsIl9wcm9wZXJ0eVRvQXR0cmlidXRlIiwicnVuQ29tcHV0ZWRFZmZlY3QiLCJyZXN1bHQiLCJydW5NZXRob2RFZmZlY3QiLCJjb21wdXRlZFByb3AiLCJtZXRob2RJbmZvIiwiYWRkQmluZGluZyIsImtpbmQiLCJ0YXJnZXQiLCJsaXRlcmFsIiwiYmluZGluZ3MiLCJiaW5kaW5nIiwiaXNDb21wb3VuZCIsInNob3VsZEFkZExpc3RlbmVyIiwibmVnYXRlIiwibGlzdGVuZXJFdmVudCIsImxpc3RlbmVyTmVnYXRlIiwicGFydCIsImNvbXBvdW5kSW5kZXgiLCJhZGRFZmZlY3RGb3JCaW5kaW5nUGFydCIsImRlcGVuZGVuY2llcyIsImV2YWx1YXRvciIsInBhcnNlQXJnIiwiX2FkZFRlbXBsYXRlUHJvcGVydHlFZmZlY3QiLCJydW5CaW5kaW5nRWZmZWN0Iiwic291cmNlIiwiX19pc1Byb3BlcnR5RWZmZWN0c0NsaWVudCIsIl9zZXRQZW5kaW5nUHJvcGVydHlPclBhdGgiLCJfZW5xdWV1ZUNsaWVudCIsInN0b3JhZ2UiLCJfX2RhdGFDb21wb3VuZFN0b3JhZ2UiLCJjb21wdXRlQmluZGluZ1ZhbHVlIiwiX3NldFVubWFuYWdlZFByb3BlcnR5VG9Ob2RlIiwiYXBwbHlCaW5kaW5nVmFsdWUiLCJfZXZhbHVhdGVCaW5kaW5nIiwic2V0dXBDb21wb3VuZFN0b3JhZ2UiLCJsaXRlcmFscyIsImFkZE5vdGlmeUxpc3RlbmVyIiwiZnJvbVByb3AiLCJ0b1BhdGgiLCJmcm9tUGF0aCIsImN1cnJlbnRUYXJnZXQiLCJoYW5kbGVOb3RpZmljYXRpb24iLCJjcmVhdGVNZXRob2RFZmZlY3QiLCJzaWciLCJlZmZlY3RGbiIsInN0YXRpYyIsImFyZyIsIl9hZGRQcm9wZXJ0eUVmZmVjdCIsIl9tYXJzaGFsQXJncyIsImFwcGx5IiwiZW1wdHlBcnJheSIsImJpbmRpbmdSZWdleCIsIlJlZ0V4cCIsIk9QRU5fQlJBQ0tFVCIsImxpdGVyYWxGcm9tUGFydHMiLCJwYXJzZU1ldGhvZCIsImV4cHJlc3Npb24iLCJhcmdMaXN0IiwicmF3QXJnIiwicGFyc2VBcmdzIiwiZmMiLCJnZXRBcmdWYWx1ZSIsIm5vdGlmeVNwbGljZXMiLCJhcnJheSIsInNwbGljZXMiLCJpbmRleFNwbGljZXMiLCJub3RpZnlTcGxpY2UiLCJhZGRlZENvdW50IiwicmVtb3ZlZCIsInByb3BlcnR5RWZmZWN0c0Jhc2UiLCJfX2RhdGFDb3VudGVyIiwiX19kYXRhQ2xpZW50c1JlYWR5IiwiX19kYXRhUGVuZGluZ0NsaWVudHMiLCJfX2RhdGFUb05vdGlmeSIsIl9fZGF0YUxpbmtlZFBhdGhzIiwiX19kYXRhSGFzUGF0aHMiLCJfX2RhdGFIb3N0IiwiX19kYXRhVGVtcCIsIl9fZGF0YUNsaWVudHNJbml0aWFsaXplZCIsIl9fY29tcHV0ZUVmZmVjdHMiLCJfX3JlZmxlY3RFZmZlY3RzIiwiX19ub3RpZnlFZmZlY3RzIiwiX19wcm9wYWdhdGVFZmZlY3RzIiwiX19vYnNlcnZlRWZmZWN0cyIsIl9fcmVhZE9ubHkiLCJfX3RlbXBsYXRlSW5mbyIsImhvc3RTdGFjayIsInJlZ2lzdGVySG9zdCIsImVmZmVjdCIsIl9oYXNQcm9wZXJ0eUVmZmVjdCIsInNob3VsZE5vdGlmeSIsImlzUGF0aE5vdGlmaWNhdGlvbiIsImxpbmtzIiwibGluayIsImIiLCJjb21wdXRlTGlua2VkUGF0aHMiLCJwcm9wSXNQYXRoIiwicHJldlByb3BzIiwiX19lbmFibGVPckZsdXNoQ2xpZW50cyIsIl9yZWFkeUNsaWVudHMiLCJjbGllbnRzIiwiX2VuYWJsZVByb3BlcnRpZXMiLCJzZXRSZWFkT25seSIsIl9mbHVzaENsaWVudHMiLCJjb21wdXRlRWZmZWN0cyIsImlucHV0UHJvcHMiLCJydW5Db21wdXRlZEVmZmVjdHMiLCJub3RpZnlQcm9wcyIsIl9wcm9wYWdhdGVQcm9wZXJ0eUNoYW5nZXMiLCJub3RpZmllZCIsImhvc3QiLCJydW5Ob3RpZnlFZmZlY3RzIiwicHJvcGVydHlFZmZlY3RzIiwibmV4dFRlbXBsYXRlSW5mbyIsInRvIiwicmV0IiwiaGFkTGVuZ3RoIiwicG9wIiwic3RhcnQiLCJkZWxldGVDb3VudCIsInNoaWZ0IiwidW5zaGlmdCIsInByb3BQYXRoIiwicHJvdGVjdGVkU2V0dGVyIiwibWF0Y2hlcyIsInBhdGhWYWx1ZSIsIl9jcmVhdGVQcm9wZXJ0eU9ic2VydmVyIiwiX2NyZWF0ZU1ldGhvZE9ic2VydmVyIiwiX2NyZWF0ZU5vdGlmeWluZ1Byb3BlcnR5IiwiX2NyZWF0ZVJlYWRPbmx5UHJvcGVydHkiLCJfY3JlYXRlUmVmbGVjdGVkUHJvcGVydHkiLCJfY3JlYXRlQ29tcHV0ZWRQcm9wZXJ0eSIsIl9iaW5kVGVtcGxhdGUiLCJpbnN0YW5jZUJpbmRpbmciLCJ3YXNQcmVCb3VuZCIsIl9fdGVtcGxhdGVJbmZvTGFzdCIsInByZXZpb3VzVGVtcGxhdGVJbmZvIiwiaG9zdFByb3BzIiwiYmVnaW5Ib3N0aW5nIiwiX3N0YW1wVGVtcGxhdGUiLCJlbmRIb3N0aW5nIiwiY2hpbGROb2RlcyIsInNldHVwQmluZGluZ3MiLCJfcGFyc2VCaW5kaW5ncyIsIm9yaWdOYW1lIiwidGV4dCIsImxhc3RJbmRleCIsImV4ZWMiLCJjdXN0b21FdmVudCIsIm5vdGlmeUV2ZW50IiwiY29sb24iLCJzaWduYXR1cmUiLCJkeW5hbWljRm5zIiwic3RhY2siLCJzdGFja0xlbiIsInJlZ2lzdHJhdGlvbnMiLCJzdXBlclByb3BlcnRpZXNDbGFzcyIsInN1cGVyQ3RvciIsIlByb3BlcnRpZXNNaXhpbiIsIm93blByb3BlcnRpZXMiLCJvdXRwdXQiLCJub3JtYWxpemVQcm9wZXJ0aWVzIiwiX19vd25Qcm9wZXJ0aWVzIiwiX3Byb3BlcnRpZXMiLCJfX29ic2VydmVkQXR0cmlidXRlcyIsImtleXMiLCJmaW5hbGl6ZSIsIl9fZmluYWxpemVkIiwiX2ZpbmFsaXplQ2xhc3MiLCJjcmVhdGVQcm9wZXJ0aWVzIiwiX19wcm9wZXJ0aWVzIiwiY29ubmVjdGVkQ2FsbGJhY2siLCJkaXNjb25uZWN0ZWRDYWxsYmFjayIsImJ1aWx0Q1NTIiwiRWxlbWVudE1peGluIiwicG9seW1lckVsZW1lbnRCYXNlIiwicHJvY2Vzc0VsZW1lbnRTdHlsZXMiLCJrbGFzcyIsInRlbXBsYXRlU3R5bGVzIiwic3R5bGVzV2l0aEltcG9ydHMiLCJsaW5rZWRTdHlsZXMiLCJzdHlsZXNGcm9tTW9kdWxlSW1wb3J0cyIsImZpcnN0VGVtcGxhdGVDaGlsZCIsImZpcnN0RWxlbWVudENoaWxkIiwiX3Byb2Nlc3NTdHlsZVRleHQiLCJpbnNlcnRCZWZvcmUiLCJ0ZW1wbGF0ZVN0eWxlSW5kZXgiLCJ0ZW1wbGF0ZVN0eWxlIiwiY2xvbmVOb2RlIiwicHJlcGFyZVRlbXBsYXRlIiwib2JzZXJ2ZXJzIiwiX19vd25PYnNlcnZlcnMiLCJjcmVhdGVPYnNlcnZlcnMiLCJfcHJlcGFyZVRlbXBsYXRlIiwiX3RlbXBsYXRlIiwiYWxsUHJvcHMiLCJjb21wdXRlZCIsIl9oYXNSZWFkT25seUVmZmVjdCIsInJlZmxlY3RUb0F0dHJpYnV0ZSIsIl9oYXNSZWZsZWN0RWZmZWN0Iiwibm90aWZ5IiwiX2hhc05vdGlmeUVmZmVjdCIsIm9ic2VydmVyIiwiZ2V0VGVtcGxhdGVGcm9tRG9tTW9kdWxlIiwibWV0YSIsImltcG9ydE1ldGEiLCJfaW1wb3J0UGF0aCIsImltcG9ydFBhdGgiLCJfZmluYWxpemVUZW1wbGF0ZSIsIl9fcHJvcGVydHlEZWZhdWx0cyIsInByb3BlcnR5RGVmYXVsdHMiLCJfaGFzQWNjZXNzb3IiLCJfX3BvbHltZXJGaW5hbGl6ZWQiLCJzdHlsZUVsZW1lbnQiLCJfYXR0YWNoRG9tIiwiYXR0YWNoU2hhZG93Iiwic2hhZG93Um9vdCIsInNoYWR5VXBncmFkZUZyYWdtZW50IiwiZmx1c2hJbml0aWFsIiwic3R5bGVTdWJ0cmVlIiwiRGVib3VuY2VyIiwiX2FzeW5jTW9kdWxlIiwiX2NhbGxiYWNrIiwiX3RpbWVyIiwiYXN5bmNNb2R1bGUiLCJkZWJvdW5jZXJRdWV1ZSIsImRlbGV0ZSIsImlzQWN0aXZlIiwiX2NhbmNlbEFzeW5jIiwiY2FuY2VsIiwiZGVib3VuY2VyIiwic2V0Q29uZmlnIiwiU2V0IiwiZW5xdWV1ZURlYm91bmNlciIsImZsdXNoRGVib3VuY2VycyIsImRpZEZsdXNoIiwic2l6ZSIsImZsdXNoIiwiSEFTX05BVElWRV9UQSIsInRvdWNoQWN0aW9uIiwiSEFORExFRF9PQkoiLCJUT1VDSF9BQ1RJT04iLCJNT1VTRV9FVkVOVFMiLCJNT1VTRV9XSElDSF9UT19CVVRUT05TIiwiTU9VU0VfSEFTX0JVVFRPTlMiLCJNb3VzZUV2ZW50IiwiYnV0dG9ucyIsImlzTW91c2VFdmVudCIsInN1cHBvcnRzUGFzc2l2ZSIsIlBBU1NJVkVfVE9VQ0giLCJwYXNzaXZlIiwib3B0cyIsIklTX1RPVUNIX09OTFkiLCJjbGlja2VkTGFiZWxzIiwibGFiZWxsYWJsZSIsImNhbkJlRGlzYWJsZWQiLCJtYXRjaGluZ0xhYmVscyIsImxhYmVscyIsImdldFJvb3ROb2RlIiwibWF0Y2hpbmciLCJtb3VzZUNhbmNlbGxlciIsIm1vdXNlRXZlbnQiLCJzYyIsInNvdXJjZUNhcGFiaWxpdGllcyIsImZpcmVzVG91Y2hFdmVudHMiLCJza2lwIiwiY2xpY2tGcm9tTGFiZWwiLCJnZXRDb21wb3NlZFBhdGgiLCJFTEVNRU5UX05PREUiLCJvd25lckxhYmVscyIsIlBPSU5URVJTVEFURSIsIm1vdXNlIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJzZXR1cFRlYXJkb3duTW91c2VDYW5jZWxsZXIiLCJzZXR1cCIsImVuIiwiaGFzTGVmdE1vdXNlQnV0dG9uIiwiZXYiLCJ3aGljaCIsImJ1dHRvbiIsIm1vdXNlSWdub3JlSm9iIiwidG91Y2giLCJ5Iiwic2Nyb2xsRGVjaWRlZCIsInRyYWNrRG9jdW1lbnQiLCJzdGF0ZU9iaiIsIm1vdmVmbiIsInVwZm4iLCJ1bnRyYWNrRG9jdW1lbnQiLCJkZWJvdW5jZSIsIm5vUGF0Y2giLCJjb21wb3NlZFBhdGgiLCJnZXN0dXJlcyIsInJlY29nbml6ZXJzIiwiX2ZpbmRPcmlnaW5hbFRhcmdldCIsIl9oYW5kbGVOYXRpdmUiLCJoYW5kbGVkIiwiZ29iaiIsImdzIiwiY2hhbmdlZFRvdWNoZXMiLCJ0b3VjaGVzIiwiaWRlbnRpZmllciIsImNsaWVudFgiLCJjbGllbnRZIiwidGEiLCJmaXJzdFRvdWNoQWN0aW9uIiwic2hvdWxkUHJldmVudCIsImR4IiwiYWJzIiwiZHkiLCJjYW5jZWxhYmxlIiwicHJldmVudCIsIl9oYW5kbGVUb3VjaEFjdGlvbiIsImZsb3ciLCJyZXNldCIsImFkZExpc3RlbmVyIiwiZXZUeXBlIiwicmVjb2duaXplciIsImRlcHMiLCJkZXAiLCJnZCIsIl9jb3VudCIsInNldFRvdWNoQWN0aW9uIiwiX2FkZCIsInJlbW92ZUxpc3RlbmVyIiwiX3JlbW92ZSIsInJlY29nIiwiZW1pdHMiLCJfZmlyZSIsIkV2ZW50IiwiYnViYmxlcyIsImNvbXBvc2VkIiwiZGVmYXVsdFByZXZlbnRlZCIsInByZXZlbnRlciIsInNvdXJjZUV2ZW50IiwiZXZOYW1lIiwiX2ZpbmRSZWNvZ25pemVyQnlFdmVudCIsImRvd251cEZpcmUiLCJ0cmFja0hhc01vdmVkRW5vdWdoIiwic3RhcnRlZCIsInRyYWNrRmlyZSIsImRkeCIsInNlY29uZGxhc3QiLCJtb3ZlcyIsImxhc3Rtb3ZlIiwiZGR5Iiwic3RhdGUiLCJob3ZlciIsImVsZW1lbnRGcm9tUG9pbnQiLCJvbGROZXh0IiwiZGVlcFRhcmdldEZpbmQiLCJ0cmFja0ZvcndhcmQiLCJiY3IiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJwYWdlWCIsInBhZ2VZIiwibGVmdCIsInJpZ2h0IiwidG9wIiwiYm90dG9tIiwiaXNTeW50aGV0aWNDbGljayIsImVuZCIsIm1vdXNlZG93biIsInRvdWNoc3RhcnQiLCJ0b3VjaGVuZCIsImFkZE1vdmUiLCJtb3ZlIiwiY3QiLCJ0b3VjaG1vdmUiLCJOYU4iLCJjbGljayIsIl9yZW1vdmVFdmVudExpc3RlbmVyRnJvbU5vZGUiLCJUaGVtZVByb3BlcnR5TWl4aW4iLCJ0aGVtZSIsIm9sZFZhbHVlIiwibmV3VmFsdWUiLCJfc2V0VGhlbWUiLCJUaGVtYWJsZU1peGluIiwiaGFzT3duVGVtcGxhdGUiLCJwYXJlbnRFbGVtZW50IiwiaW5oZXJpdGVkVGVtcGxhdGUiLCJfaW5jbHVkZVN0eWxlIiwiX2luY2x1ZGVNYXRjaGluZ1RoZW1lcyIsImhhc1RoZW1lcyIsImRlZmF1bHRNb2R1bGVOYW1lIiwic29ydCIsIm1vZHVsZU5hbWVBIiwibW9kdWxlTmFtZUIiLCJ2YWFkaW5BIiwidmFhZGluQiIsInZhYWRpblRoZW1lUHJlZml4ZXMiLCJ2YWFkaW5UaGVtZUEiLCJwcmVmaXgiLCJ2YWFkaW5UaGVtZUIiLCJtb2R1bGVOYW1lIiwidGhlbWVGb3IiLCJ0aGVtZUZvclRva2VuIiwic3R5bGVFbCIsIkNvbnRyb2xTdGF0ZU1peGluIiwidGFiaW5kZXgiLCJUYWJJbmRleE1peGluIiwiYXV0b2ZvY3VzIiwiX3ByZXZpb3VzVGFiSW5kZXgiLCJkaXNhYmxlZCIsIl9pc1NoaWZ0VGFiYmluZyIsIl9mb2N1cyIsImZvY3VzRWxlbWVudCIsIl9zZXRGb2N1c2VkIiwiZW5zdXJlRXZlbnRDb21wb3NlZCIsImtleUNvZGUiLCJzaGlmdEtleSIsImZvY3VzIiwiZmlyZWZveCIsInBhcnNlRmxvYXQiLCJmYWtlVGFyZ2V0IiwicG9zaXRpb24iLCJvcGFjaXR5IiwidGFiSW5kZXgiLCJmb2N1c2VkIiwiX2JvdW5kS2V5ZG93bkxpc3RlbmVyIiwiX2JvZHlLZXlkb3duTGlzdGVuZXIiLCJfYm91bmRLZXl1cExpc3RlbmVyIiwiX2JvZHlLZXl1cExpc3RlbmVyIiwiX3RhYlByZXNzZWQiLCJibHVyIiwic2V0UHJvcGVydGllcyIsInNoYWR5RE9NIiwiZGVib3VuY2VycyIsIlNjb3BpbmdTaGltIiwiRGlySGVscGVyIiwic2Nyb2xsVHlwZSIsImRpcmVjdGlvbiIsInNjcm9sbExlZnQiLCJzY3JvbGxXaWR0aCIsImNsaWVudFdpZHRoIiwiZGlyZWN0aW9uU3Vic2NyaWJlcnMiLCJkdW1teSIsImRpciIsImZvbnRTaXplIiwid2lkdGgiLCJoZWlnaHQiLCJvdmVyZmxvdyIsImNhY2hlZFR5cGUiLCJkb2N1bWVudERpciIsImdldERvY3VtZW50RGlyIiwiYWxpZ25EaXJzIiwiZG9jdW1lbnRFbGVtZW50IiwiYXR0cmlidXRlRmlsdGVyIiwiRGlyTWl4aW4iLCJfX3N1YnNjcmliZSIsIm5ld1ZhbHVlRXFsRG9jRGlyIiwibmV3VmFsdWVFbXB0aWVkIiwibmV3RGlmZlZhbHVlIiwiREVWX01PREVfQ09ERV9SRUdFWFAiLCJGbG93Q2xpZW50cyIsIlZhYWRpbiIsIkZsb3ciLCJ1bmNvbW1lbnRBbmRSdW4iLCJGdW5jdGlvbiIsInJ1bklmRGV2ZWxvcG1lbnRNb2RlIiwiZGV2ZWxvcG1lbnRNb2RlIiwibWF5YmVHYXRoZXJBbmRTZW5kU3RhdHMiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiaG9zdG5hbWUiLCJwcm9kdWN0aW9uTW9kZSIsImlzRmxvd1Byb2R1Y3Rpb25Nb2RlIiwiaXNEZXZlbG9wbWVudE1vZGUiLCJ1c2FnZVN0YXRpc3RpY3MiLCJzdGF0c0pvYiIsImRldmVsb3BtZW50TW9kZUNhbGxiYWNrIiwicmVnaXN0ZXJlZCIsImhhcyIsImRvY3R5cGUiLCJjaGVja2VkIiwiaW5kZXRlcm1pbmF0ZSIsIl9uYXRpdmVDaGVja2JveCIsIl9zdG9yZWROYW1lIiwiX2hhbmRsZUNsaWNrIiwiX2FkZEFjdGl2ZUxpc3RlbmVycyIsIl91cGRhdGVMYWJlbEF0dHJpYnV0ZSIsImxhYmVsIiwiYXNzaWduZWROb2RlcyIsIl9pc0Fzc2lnbmVkTm9kZXNFbXB0eSIsIl9faW50ZXJhY3Rpb25zQWxsb3dlZCIsIl90b2dnbGVDaGVja2VkIiwiU3R5bGVOb2RlIiwicGFyc2VDc3MiLCJzcyIsImNvZGUiLCJyZXBlYXQiLCJfZXhwYW5kVW5pY29kZUVzY2FwZXMiLCJSWCIsIm11bHRpcGxlU3BhY2VzIiwiQVRfU1RBUlQiLCJNRURJQV9TVEFSVCIsInR5cGVzIiwiTUVESUFfUlVMRSIsImtleWZyYW1lc1J1bGUiLCJLRVlGUkFNRVNfUlVMRSIsIlZBUl9TVEFSVCIsIk1JWElOX1JVTEUiLCJTVFlMRV9SVUxFIiwiciQiLCJPUEVOX0JSQUNFIiwicHJldmlvdXMiLCJDTE9TRV9CUkFDRSIsImxleCIsImNvbW1lbnRzIiwicG9ydCIsInByZXNlcnZlUHJvcGVydGllcyIsInJ1bGVzIiwiX2hhc01peGluUnVsZXMiLCJtaXhpbkFwcGx5IiwidmFyQXBwbHkiLCJyZW1vdmVDdXN0b21Qcm9wQXBwbHkiLCJjdXN0b21Qcm9wIiwibWl4aW5Qcm9wIiwicmVtb3ZlQ3VzdG9tUHJvcEFzc2lnbm1lbnQiLCJyZW1vdmVDdXN0b21Qcm9wcyIsInN0eWxlVGV4dFNldCIsInByb2Nlc3NVbnNjb3BlZFN0eWxlIiwibmV3U3R5bGUiLCJpc1Vuc2NvcGVkU3R5bGUiLCJ0b0Nzc1RleHQiLCJmb3JFYWNoUnVsZSIsInJ1bGVzRm9yU3R5bGUiLCJzdHlsZVJ1bGVDYWxsYmFjayIsImtleWZyYW1lc1J1bGVDYWxsYmFjayIsIm9ubHlBY3RpdmVSdWxlcyIsInNraXBSdWxlcyIsIm1hdGNoTWVkaWEiLCJmaW5kTWF0Y2hpbmdQYXJlbiIsImxldmVsIiwiZ2V0Q3NzQnVpbGQiLCJfX2Nzc0J1aWxkIiwiYXR0clZhbHVlIiwiYnVpbGRDb21tZW50IiwiQ29tbWVudCIsImNvbW1lbnRQYXJ0cyIsImdldEJ1aWxkQ29tbWVudCIsInJlbW92ZUJ1aWxkQ29tbWVudCIsImVsZW1lbnRIYXNCdWlsdENzcyIsIkFQUExZX05BTUVfQ0xFQU4iLCJJTklUSUFMX0lOSEVSSVQiLCJJTVBPUlRBTlQiLCJNaXhpbk1hcCIsIl9tYXAiLCJkZXBlbmRhbnRzIiwiaW52YWxpZENhbGxiYWNrIiwiX2N1cnJlbnRFbGVtZW50IiwiX21lYXN1cmVFbGVtZW50IiwiZGV0ZWN0TWl4aW4iLCJzdHlsZVRleHQiLCJzdHlsZVRleHRQYXJ0cyIsImdhdGhlclN0eWxlVGV4dCIsIl9nYXRoZXJlZFN0eWxlIiwiZ2F0aGVyU3R5bGVzIiwidHJhbnNmb3JtU3R5bGUiLCJhc3QiLCJ0cmFuc2Zvcm1SdWxlcyIsInJ1bGUiLCJ0cmFuc2Zvcm1SdWxlIiwidHJhbnNmb3JtQ3NzVGV4dCIsIm1hdGNoVGV4dCIsInByb3BlcnR5TmFtZSIsInZhbHVlUHJvcGVydHkiLCJ2YWx1ZU1peGluIiwiX3Byb2R1Y2VDc3NQcm9wZXJ0aWVzIiwiX2NvbnN1bWVDc3NQcm9wZXJ0aWVzIiwiYWxsIiwic3RhcnRSdWxlIiwidG9wUnVsZSIsImZhbGxiYWNrcyIsInNlZW5TdGFydFJ1bGUiLCJfY3NzVGV4dFRvTWFwIiwibWl4aW5OYW1lIiwiYXBwbHlQb3MiLCJhZnRlckFwcGx5UG9zIiwidGV4dEJlZm9yZUFwcGx5IiwidGV4dEFmdGVyQXBwbHkiLCJkZWZhdWx0cyIsIl9mYWxsYmFja3NGcm9tUHJldmlvdXNSdWxlcyIsInJlcGxhY2VtZW50IiwiX2F0QXBwbHlUb0Nzc1Byb3BlcnRpZXMiLCJ2YXJzIiwibWl4aW5FbnRyeSIsImYiLCJfZ2V0SW5pdGlhbFZhbHVlRm9yUHJvcGVydHkiLCJyZXBsYWNlSW5pdGlhbE9ySW5oZXJpdCIsIm91dCIsInNwIiwiX3JlcGxhY2VJbml0aWFsT3JJbmhlcml0IiwicHJvY2Vzc1ZhcmlhYmxlQW5kRmFsbGJhY2siLCJpbm5lciIsInN1ZmZpeCIsImNvbW1hIiwibWl4aW5Bc1Byb3BlcnRpZXMiLCJtaXhpblZhbHVlcyIsImNvbWJpbmVkUHJvcHMiLCJuZWVkVG9JbnZhbGlkYXRlIiwiX2ludmFsaWRhdGVNaXhpbkVudHJ5IiwidHJhbnNmb3JtQ3VzdG9tU3R5bGUiLCJ0cmFuc2Zvcm1UZW1wbGF0ZSIsIkNVUlJFTlRfVkVSU0lPTiIsIk5FWFRfVkVSU0lPTiIsInByb21pc2UiLCJpbnZhbGlkYXRlIiwiaW52YWxpZGF0ZVRlbXBsYXRlIiwidGVtcGxhdGVJc1ZhbGlkIiwidGVtcGxhdGVJc1ZhbGlkYXRpbmciLCJzdGFydFZhbGlkYXRpbmdUZW1wbGF0ZSIsIl92YWxpZGF0aW5nIiwiYXBwbHlTaGltIiwiZmx1c2hDdXN0b21TdHlsZXMiLCJlbnN1cmUiLCJzaGFkb3dDaGlsZHJlbiIsImNoaWxkcmVuIiwidHlwZUV4dGVuc2lvbiIsImV4dGVuZHMiLCJnZXRJc0V4dGVuZHMiLCJhcHBseVNoaW1JbnRlcmZhY2UiLCJzdHlsZURvY3VtZW50IiwiQXBwbHlTaGltIiwiSE9TVF9ESVIiLCJFTF9ESVIiLCJESVJfQ0hFQ0siLCJTSElNX1NIQURPVyIsIkRJUl9JTlNUQU5DRVMiLCJnZXRSVEwiLCJzZXRSVEwiLCJpbnN0YW5jZSIsIl9fYXV0b0Rpck9wdE91dCIsInVwZGF0ZURpcmVjdGlvbiIsImVsZW1lbnRCYXNlIiwiRGlyIiwiX3JlcGxhY2VEaXJJbkNzc1RleHQiLCJfX2FjdGl2YXRlRGlyIiwicmVwbGFjZWRUZXh0IiwidGFrZVJlY29yZHMiLCJzY2hlZHVsZWQiLCJiZWZvcmVSZW5kZXJRdWV1ZSIsImFmdGVyUmVuZGVyUXVldWUiLCJzY2hlZHVsZSIsImZsdXNoUXVldWUiLCJxdWV1ZSIsImNhbGxNZXRob2QiLCJydW5RdWV1ZSIsImFmdGVyTmV4dFJlbmRlciIsIm5ld1NwbGljZSIsImNhbGNTcGxpY2VzIiwiY3VycmVudCIsImN1cnJlbnRTdGFydCIsImN1cnJlbnRFbmQiLCJvbGRTdGFydCIsIm9sZEVuZCIsInByZWZpeENvdW50Iiwic3VmZml4Q291bnQiLCJtaW5MZW5ndGgiLCJtaW4iLCJzZWFyY2hMZW5ndGgiLCJlcXVhbHMiLCJzaGFyZWRQcmVmaXgiLCJpbmRleDEiLCJpbmRleDIiLCJjb3VudCIsInNoYXJlZFN1ZmZpeCIsIm9wcyIsImRpc3RhbmNlcyIsImVkaXRzIiwibm9ydGhXZXN0Iiwid2VzdCIsIm5vcnRoIiwicmV2ZXJzZSIsInNwbGljZU9wZXJhdGlvbnNGcm9tRWRpdERpc3RhbmNlcyIsInJvd0NvdW50IiwiY29sdW1uQ291bnQiLCJjYWxjRWRpdERpc3RhbmNlcyIsIm9sZEluZGV4IiwiY2FsY3VsYXRlU3BsaWNlcyIsImN1cnJlbnRWYWx1ZSIsInByZXZpb3VzVmFsdWUiLCJpc1Nsb3QiLCJGbGF0dGVuZWROb2Rlc09ic2VydmVyIiwid3JhcHBlZCIsImZsYXR0ZW4iLCJjb25jYXQiLCJfc2hhZHlDaGlsZHJlbk9ic2VydmVyIiwiX25hdGl2ZUNoaWxkcmVuT2JzZXJ2ZXIiLCJfY29ubmVjdGVkIiwiX3RhcmdldCIsIl9lZmZlY3RpdmVOb2RlcyIsIl9vYnNlcnZlciIsIl9zY2hlZHVsZWQiLCJfYm91bmRTY2hlZHVsZSIsIl9zY2hlZHVsZSIsImNvbm5lY3QiLCJfbGlzdGVuU2xvdHMiLCJvYnNlcnZlQ2hpbGRyZW4iLCJtdXRhdGlvbnMiLCJfcHJvY2Vzc011dGF0aW9ucyIsImNoaWxkTGlzdCIsIl91bmxpc3RlblNsb3RzIiwidW5vYnNlcnZlQ2hpbGRyZW4iLCJkaXNjb25uZWN0IiwiX3Byb2Nlc3NTbG90TXV0YXRpb25zIiwibXV0YXRpb24iLCJhZGRlZE5vZGVzIiwicmVtb3ZlZE5vZGVzIiwibmV3Tm9kZXMiLCJnZXRGbGF0dGVuZWROb2RlcyIsIkVsZW1lbnQiLCJub3JtYWxpemVkTWF0Y2hlc1NlbGVjdG9yIiwibWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwib2JzZXJ2ZXJIYW5kbGUiLCJjb250YWlucyIsImRvYyIsImlwJCIsImFzc2lnbmVkU2xvdCIsImRlZXAiLCJEb2N1bWVudCIsImMkIiwiZ2V0RWZmZWN0aXZlQ2hpbGROb2RlcyIsImxpc3QiLCJfYWN0aXZlRWxlbWVudCIsImFjdGl2ZUVsZW1lbnQiLCJmb3J3YXJkUmVhZE9ubHlQcm9wZXJ0aWVzIiwiY29uZmlndXJhYmxlIiwiRXZlbnRBcGkiLCJsYXN0Q2hpbGQiLCJwcmV2aW91c1NpYmxpbmciLCJsYXN0RWxlbWVudENoaWxkIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwicHJldmlvdXNFbGVtZW50U2libGluZyIsIkRvbUFwaUltcGwiLCJXcmFwcGVyIiwibG9jYWxUYXJnZXQiLCJjdXJyZW50Um9vdCIsImdldE93bmVyUm9vdCIsIm1ldGhvZHMiLCJmb3J3YXJkTWV0aG9kcyIsImZvcndhcmRQcm9wZXJ0aWVzIiwiaGVscGVyIiwic2FtZVNjb3BlIiwic2NvcGUiLCJzdHlsZUludGVyZmFjZSIsIkxlZ2FjeUVsZW1lbnRNaXhpbiIsImxlZ2FjeUVsZW1lbnRCYXNlIiwiRElSRUNUSU9OX01BUCIsIkxlZ2FjeUVsZW1lbnQiLCJpc0F0dGFjaGVkIiwiX19ib3VuZExpc3RlbmVycyIsIl9kZWJvdW5jZXJzIiwiYXR0YWNoZWQiLCJkZXRhY2hlZCIsImF0dHJpYnV0ZUNoYW5nZWQiLCJfcmVnaXN0ZXJlZCIsIl9faGFzUmVnaXN0ZXJGaW5pc2hlZCIsImNyZWF0ZWQiLCJfYXBwbHlMaXN0ZW5lcnMiLCJfZW5zdXJlQXR0cmlidXRlcyIsImFwaSIsIm4kIiwicGQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX3Byb3RvX18iLCJfY29udGVudEZvclRlbXBsYXRlIiwiaGJsIiwiYmwiLCJzbGN0ciIsIkRvY3VtZW50RnJhZ21lbnQiLCJkb21BcGkiLCJxdWVyeURpc3RyaWJ1dGVkRWxlbWVudHMiLCJjbiIsInRjIiwiQ09NTUVOVF9OT0RFIiwiZ2V0RGlzdHJpYnV0ZWROb2RlcyIsImdldENvbnRlbnRDaGlsZE5vZGVzIiwiY29udGFpbmVyIiwic2hvdWxkT2JzZXJ2ZSIsImNvbnRhaW5lclNjb3BlIiwic2NvcGlmeSIsImVsZW1lbnRzIiwiY3VycmVudFNjb3BlIiwibW8iLCJteG5zIiwibXhuIiwiYWRkZWROb2RlIiwic3VidHJlZSIsInNjb3BlU3VidHJlZSIsImpvYk5hbWUiLCJ3YWl0Iiwid2FpdFRpbWUiLCJ0YWciLCJlbHQiLCJib29sIiwicmVtb3ZlIiwidHJhbnNmb3JtVGV4dCIsIndlYmtpdFRyYW5zZm9ybSIsInRyYW5zZm9ybSIsInoiLCJhcnJheU9yUGF0aCIsIl9sb2dnZXIiLCJsaWZlY3ljbGVQcm9wcyIsImJlZm9yZVJlZ2lzdGVyIiwibGlzdGVuZXJzIiwiaG9zdEF0dHJpYnV0ZXMiLCJleGNsdWRlT25JbmZvIiwiYmVoYXZpb3JzIiwiX25vQWNjZXNzb3JzIiwiZXhjbHVkZU9uQmVoYXZpb3JzIiwiYXBwbHlJbmZvIiwibGlmZWN5Y2xlIiwiZXhjbHVkZVByb3BzIiwibm9BY2Nlc3NvcnMiLCJwcm9wZXJ0eU5hbWVzIiwiY29weVByb3BlcnRpZXMiLCJtZXJnZVByb3BlcnRpZXMiLCJ0YXJnZXRJbmZvIiwic291cmNlSW5mbyIsIkdlbmVyYXRlQ2xhc3NGcm9tSW5mbyIsIkJhc2UiLCJiZWhhdmlvckxpc3QiLCJQb2x5bWVyR2VuZXJhdGVkIiwiZ2VuZXJhdGVkUHJvdG8iLCJjb3B5UHJvcGVydGllc1RvUHJvdG8iLCJfZW5zdXJlQXR0cmlidXRlIiwic3VwZXJCZWhhdmlvcnMiLCJmbGF0dGVuQmVoYXZpb3JzIiwiZXhjbHVkZSIsImFwcGx5QmVoYXZpb3JzIiwiZ2VuZXJhdGVkRnJvbSIsIkNsYXNzIiwibXV0YWJsZVByb3BlcnR5Q2hhbmdlIiwibXV0YWJsZURhdGEiLCJpc09iamVjdCIsInNob3VsZENoYW5nZSIsIk11dGFibGVEYXRhIiwiT3B0aW9uYWxNdXRhYmxlRGF0YSIsIl9tdXRhYmxlUHJvcGVydHlDaGFuZ2UiLCJuZXdJbnN0YW5jZSIsIkhUTUxUZW1wbGF0ZUVsZW1lbnRFeHRlbnNpb24iLCJ3cml0YWJsZSIsIkRhdGFUZW1wbGF0ZSIsIk11dGFibGVEYXRhVGVtcGxhdGUiLCJ0ZW1wbGF0ZUluc3RhbmNlQmFzZSIsIl9jb25maWd1cmVQcm9wZXJ0aWVzIiwiX190ZW1wbGF0aXplSW5zdGFuY2UiLCJfX3RlbXBsYXRpemVPd25lciIsIl9faGlkZVRlbXBsYXRlQ2hpbGRyZW5fXyIsIl9zaG93SGlkZUNoaWxkcmVuIiwiX190ZW1wbGF0aXplT3B0aW9ucyIsImluc3RhbmNlUHJvcHMiLCJmb3J3YXJkSG9zdFByb3AiLCJocHJvcCIsIl9faG9zdFByb3BzIiwiaXByb3AiLCJwYXJlbnRNb2RlbCIsInRlbXBsYXRlSG9zdCIsImhpZGUiLCJfX3BvbHltZXJUZXh0Q29udGVudF9fIiwiX19wb2x5bWVyUmVwbGFjZWRfXyIsImNyZWF0ZUNvbW1lbnQiLCJfX3BvbHltZXJEaXNwbGF5X18iLCJkaXNwbGF5IiwiX19wYXJlbnRNb2RlbCIsIk11dGFibGVUZW1wbGF0ZUluc3RhbmNlQmFzZSIsImZpbmRNZXRob2RIb3N0IiwiY3JlYXRlVGVtcGxhdGl6ZXJDbGFzcyIsInRlbXBsYXRpemVyQmFzZSIsInRlbXBsYXRpemUiLCJ1c2VyTm90aWZ5SW5zdGFuY2VQcm9wIiwibm90aWZ5SW5zdGFuY2VQcm9wIiwiUFJPUEVSVFlfRUZGRUNUX1RZUEVTIiwiY3JlYXRlTm90aWZ5SW5zdGFuY2VQcm9wRWZmZWN0IiwiaGFzSG9zdFByb3BzIiwiYWRkTm90aWZ5RWZmZWN0cyIsImFkZFByb3BhZ2F0ZUVmZmVjdHMiLCJ1c2VyRm9yd2FyZEhvc3RQcm9wIiwidGVtcGxhdGl6ZVRlbXBsYXRlQ2xhc3MiLCJ0ZW1wbGF0aXplZEJhc2UiLCJjcmVhdGVGb3J3YXJkSG9zdFByb3BFZmZlY3QiLCJzZXRQcm90b3R5cGVPZiIsInVwZ3JhZGVUZW1wbGF0ZSIsImhvc3RQcm9wIiwiaW5zdFByb3AiLCJiYXNlQ2xhc3MiLCJ0ZW1wbGF0aXplSW5zdGFuY2VDbGFzcyIsIm1vZGVsRm9yRWxlbWVudCIsImVsZW1lbnRzSGlkZGVuIiwiaGlkZUVsZW1lbnRzR2xvYmFsbHkiLCJkb21CaW5kQmFzZSIsIl9fY2hpbGRyZW4iLCJyZW5kZXIiLCJfX3JlbW92ZUNoaWxkcmVuIiwiX19pbnNlcnRDaGlsZHJlbiIsImRvbVJlcGVhdEJhc2UiLCJhcyIsImluZGV4QXMiLCJpdGVtc0luZGV4QXMiLCJyZW5kZXJlZEl0ZW1Db3VudCIsImluaXRpYWxDb3VudCIsInRhcmdldEZyYW1lcmF0ZSIsIl90YXJnZXRGcmFtZVRpbWUiLCJfX2luc3RhbmNlcyIsIl9fbGltaXQiLCJJbmZpbml0eSIsIl9fcG9vbCIsIl9fcmVuZGVyRGVib3VuY2VyIiwiX19pdGVtc0lkeFRvSW5zdElkeCIsIl9fY2h1bmtDb3VudCIsIl9fbGFzdENodW5rVGltZSIsIl9fc29ydEZuIiwiX19maWx0ZXJGbiIsIl9fb2JzZXJ2ZVBhdGhzIiwiX19jdG9yIiwiX19pc0RldGFjaGVkIiwiX19kZXRhY2hJbnN0YW5jZSIsIndyYXBwZWRQYXJlbnQiLCJfX2F0dGFjaEluc3RhbmNlIiwiX19yZW5kZXIiLCJpJCIsImZ1bmN0aW9uT3JNZXRob2ROYW1lIiwiX19nZXRNZXRob2RIb3N0IiwiX19mdW5jdGlvbkZyb21Qcm9wZXJ0eVZhbHVlIiwiX19kZWJvdW5jZVJlbmRlciIsInJhdGUiLCJjZWlsIiwicGVyZm9ybWFuY2UiLCJub3ciLCJfX3JlcXVlc3RSZW5kZXJDaHVuayIsIl9fcmVuZGVyQ2h1bmsiLCJjdXJyQ2h1bmtUaW1lIiwicmF0aW8iLCJyb3VuZCIsImNoYW5nZSIsIl9faGFuZGxlSXRlbVBhdGgiLCJfX2luaXRpYWxpemVDaHVua2luZyIsInBhdGhzIiwiX19lbnN1cmVUZW1wbGF0aXplZCIsIl9fYXBwbHlGdWxsUmVmcmVzaCIsIl9zZXRSZW5kZXJlZEl0ZW1Db3VudCIsIl9fdHJ5UmVuZGVyQ2h1bmsiLCJpc250SWR4VG9JdGVtc0lkeCIsIml0ZW1zSWR4VG9JbnN0SWR4IiwiaW5zdElkeCIsImxpbWl0IiwiaXRlbUlkeCIsIl9faW5zZXJ0SW5zdGFuY2UiLCJfX2RldGFjaEFuZFJlbW92ZUluc3RhbmNlIiwid3JhcHBlZFJvb3QiLCJfX3N0YW1wSW5zdGFuY2UiLCJiZWZvcmVSb3ciLCJiZWZvcmVOb2RlIiwiaGlkZGVuIiwiaXRlbXNQYXRoIiwiZG90IiwiaXRlbXNJZHgiLCJwYXJzZUludCIsIml0ZW1TdWJQYXRoIiwiX19oYW5kbGVPYnNlcnZlZFBhdGhzIiwiaXRlbVBhdGgiLCJpZiIsInJlc3RhbXAiLCJfX2ludmFsaWRQcm9wcyIsIl9faW5zdGFuY2UiLCJfbGFzdElmIiwiRE9DVU1FTlRfRlJBR01FTlRfTk9ERSIsIl9fdGVhcmRvd25JbnN0YW5jZSIsIl9fZW5zdXJlSW5zdGFuY2UiLCJfX3N5bmNIb3N0UHJvcGVydGllcyIsImJhc2VBcnJheVNlbGVjdG9yIiwibXVsdGkiLCJzZWxlY3RlZCIsInNlbGVjdGVkSXRlbSIsInRvZ2dsZSIsIl9fbGFzdEl0ZW1zIiwiX19sYXN0TXVsdGkiLCJfX3NlbGVjdGVkTWFwIiwiaXRlbXNJbmZvIiwibmV3SXRlbXMiLCJsYXN0SXRlbXMiLCJjbGVhclNlbGVjdGlvbiIsIl9fYXBwbHlTcGxpY2VzIiwiX19kZXNlbGVjdENoYW5nZWRJZHgiLCJfX3VwZGF0ZUxpbmtzIiwic2lkeCIsImxpbmtQYXRocyIsIk1hcCIsImlzU2VsZWN0ZWQiLCJfX3NlbGVjdGVkSW5kZXhGb3JJdGVtSW5kZXgiLCJkZXNlbGVjdCIsInNlbGVjdEluZGV4IiwiZGVzZWxlY3RJbmRleCIsImNsZWFyIiwiQXJyYXlTZWxlY3RvciIsIk9SUEhBTlMiLCJJcm9uUmVzaXphYmxlQmVoYXZpb3IiLCJfcGFyZW50UmVzaXphYmxlIiwiX25vdGlmeWluZ0Rlc2NlbmRhbnQiLCJfaW50ZXJlc3RlZFJlc2l6YWJsZXMiLCJfYm91bmROb3RpZnlSZXNpemUiLCJub3RpZnlSZXNpemUiLCJfYm91bmRPbkRlc2NlbmRhbnRJcm9uUmVzaXplIiwiX29uRGVzY2VuZGFudElyb25SZXNpemUiLCJfcmVxdWVzdFJlc2l6ZU5vdGlmaWNhdGlvbnMiLCJzdG9wUmVzaXplTm90aWZpY2F0aW9uc0ZvciIsInJlc2l6YWJsZSIsInJlc2l6ZXJTaG91bGROb3RpZnkiLCJfbm90aWZ5RGVzY2VuZGFudCIsIl9maXJlUmVzaXplIiwiYXNzaWduUGFyZW50UmVzaXphYmxlIiwicGFyZW50UmVzaXphYmxlIiwiX3N1YnNjcmliZUlyb25SZXNpemUiLCJfdW5zdWJzY3JpYmVJcm9uUmVzaXplIiwiZmlyZSIsIl9vbklyb25SZXF1ZXN0UmVzaXplTm90aWZpY2F0aW9ucyIsIl9wYXJlbnRSZXNpemFibGVDaGFuZ2VkIiwiZGVzY2VuZGFudCIsInJlYWR5c3RhdGVjaGFuZ2VkIiwiX2ZpbmRQYXJlbnQiLCJvcnBoYW4iLCJJcm9uU2Nyb2xsVGFyZ2V0QmVoYXZpb3IiLCJzY3JvbGxUYXJnZXQiLCJfZGVmYXVsdFNjcm9sbFRhcmdldCIsIl9zaG91bGRIYXZlTGlzdGVuZXIiLCJfc2Nyb2xsVGFyZ2V0Q2hhbmdlZCIsIl9vbGRTY3JvbGxUYXJnZXQiLCJfdG9nZ2xlU2Nyb2xsTGlzdGVuZXIiLCJfZG9jIiwiZG9tSG9zdCIsIl9pc1ZhbGlkU2Nyb2xsVGFyZ2V0IiwiX3Njcm9sbEhhbmRsZXIiLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0Iiwic2Nyb2xsVG8iLCJzY3JvbGwiLCJsZWZ0T3JPcHRpb25zIiwiaW5uZXJXaWR0aCIsIm9mZnNldFdpZHRoIiwiaW5uZXJIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJ5ZXMiLCJldmVudFRhcmdldCIsIl9ib3VuZFNjcm9sbEhhbmRsZXIiLCJ0b2dnbGVTY3JvbGxMaXN0ZW5lciIsIklPUyIsIklPU19UT1VDSF9TQ1JPTExJTkciLCJBTklNQVRJT05fRlJBTUUiLCJJRExFX1RJTUUiLCJNSUNST19UQVNLIiwiUG9seW1lcklyb25MaXN0IiwiX3JhdGlvIiwiX3Njcm9sbGVyUGFkZGluZ1RvcCIsIl9zY3JvbGxQb3NpdGlvbiIsIl9waHlzaWNhbFNpemUiLCJfcGh5c2ljYWxBdmVyYWdlIiwiX3BoeXNpY2FsQXZlcmFnZUNvdW50IiwiX3BoeXNpY2FsVG9wIiwiX3ZpcnR1YWxDb3VudCIsIl9lc3RTY3JvbGxIZWlnaHQiLCJfc2Nyb2xsSGVpZ2h0IiwiX3ZpZXdwb3J0SGVpZ2h0IiwiX3ZpZXdwb3J0V2lkdGgiLCJfcGh5c2ljYWxJdGVtcyIsIl9waHlzaWNhbFNpemVzIiwiX2ZpcnN0VmlzaWJsZUluZGV4VmFsIiwiX2NvbGxlY3Rpb24iLCJfbGFzdFZpc2libGVJbmRleFZhbCIsIl9tYXhQYWdlcyIsIl9mb2N1c2VkVmlydHVhbEluZGV4IiwiX2l0ZW1zUGVyUm93IiwiX3Jvd0hlaWdodCIsIl90ZW1wbGF0ZUNvc3QiLCJfdmlydHVhbFN0YXJ0IiwiX3BoeXNpY2FsQ291bnQiLCJncmlkIiwiX3BoeXNpY2FsUm93cyIsIl9zY3JvbGxPZmZzZXQiLCJ2aXJ0dWFsQ291bnQiLCJfY29udmVydEluZGV4VG9Db21wbGV0ZVJvdyIsIm1heCIsInZhbCIsIl9jbGFtcCIsIl9tYXhWaXJ0dWFsU3RhcnQiLCJfdmlydHVhbFN0YXJ0VmFsIiwiX3BoeXNpY2FsU3RhcnRWYWwiLCJfcGh5c2ljYWxTdGFydCIsIl9waHlzaWNhbENvdW50VmFsIiwicGh5c2ljYWxPZmZzZXQiLCJfaXRlcmF0ZUl0ZW1zIiwicGlkeCIsInZpZHgiLCJfZ2V0UGh5c2ljYWxTaXplSW5jcmVtZW50IiwiZmlyc3RWaXNpYmxlSW5kZXgiLCJfZXN0Um93c0luVmlldyIsIl9zY3JvbGxCb3R0b20iLCJfZGVib3VuY2UiLCJfcmVuZGVyIiwibGlzdGVuIiwidW5saXN0ZW4iLCJ1cGRhdGVWaWV3cG9ydEJvdW5kYXJpZXMiLCJfaXNSVEwiLCJfc2Nyb2xsVGFyZ2V0SGVpZ2h0IiwiX3VwZGF0ZUdyaWRNZXRyaWNzIiwiX21heFNjcm9sbFRvcCIsIl9zY3JvbGxUb3AiLCJkZWx0YSIsImlzU2Nyb2xsaW5nRG93biIsImlkeEFkanVzdG1lbnQiLCJfdXBkYXRlIiwicmV1c2FibGVzIiwiX2dldFJldXNhYmxlcyIsInBoeXNpY2FsVG9wIiwiaW5kZXhlcyIsIl9pbmNyZWFzZVBvb2xJZk5lZWRlZCIsImZyb21Ub3AiLCJpdGgiLCJvZmZzZXRDb250ZW50IiwicGh5c2ljYWxJdGVtSGVpZ2h0IiwiaWR4cyIsInByb3RlY3RlZE9mZnNldENvbnRlbnQiLCJfaGlkZGVuQ29udGVudFNpemUiLCJ2aXJ0dWFsU3RhcnQiLCJ2aXJ0dWFsRW5kIiwiX3ZpcnR1YWxFbmQiLCJwaHlzaWNhbENvdW50IiwiX3BoeXNpY2FsQm90dG9tIiwic2Nyb2xsQm90dG9tIiwiX3BoeXNpY2FsRW5kIiwiaXRlbVNldCIsIm1vdmluZ1VwIiwiX21hbmFnZUZvY3VzIiwiX2Fzc2lnbk1vZGVscyIsIl91cGRhdGVNZXRyaWNzIiwiX3Bvc2l0aW9uSXRlbXMiLCJfdXBkYXRlU2Nyb2xsZXJTaXplIiwiX2lzQ2xpZW50RnVsbCIsIm5leHRQaHlzaWNhbENvdW50IiwibmV4dEluY3JlYXNlIiwidHMiLCJfY3JlYXRlUG9vbCIsIl9pc0luZGV4UmVuZGVyZWQiLCJfZ2V0UGh5c2ljYWxJbmRleCIsIl9vcHRQaHlzaWNhbFNpemUiLCJfaXNWaXNpYmxlIiwiX2l0ZW1zQ2hhbmdlZCIsIl9waHlzaWNhbEluZGV4Rm9yS2V5IiwiX3Jlc2V0U2Nyb2xsUG9zaXRpb24iLCJfcmVtb3ZlRm9jdXNlZEl0ZW0iLCJydG4iLCJfY29tcHV0ZVZpZHgiLCJuZXdQaHlzaWNhbFNpemUiLCJvbGRQaHlzaWNhbFNpemUiLCJwcmV2QXZnQ291bnQiLCJwcmV2UGh5c2ljYWxBdmciLCJfYWRqdXN0U2Nyb2xsUG9zaXRpb24iLCJ0cmFuc2xhdGUzZCIsImRlbHRhSGVpZ2h0IiwicG9zIiwiZm9yY2VVcGRhdGUiLCJfdmlydHVhbFJvd0NvdW50Iiwic2Nyb2xsVG9JbmRleCIsImN1cnJlbnRUb3BJdGVtIiwiY3VycmVudFZpcnR1YWxJdGVtIiwidGFyZ2V0T2Zmc2V0VG9wIiwiaGlkZGVuQ29udGVudFNpemUiLCJfcmVzZXRBdmVyYWdlIiwiX3Jlc2l6ZUhhbmRsZXIiLCJfdmlkeE9mZnNldCIsIl93YXJuUHJpdmF0ZUFQSUFjY2VzcyIsIl9wZW5kaW5nU2Nyb2xsVG9JbmRleCIsImJvcmRlclRvcFdpZHRoIiwiX3Njcm9sbGluZ1RvSW5kZXgiLCJfZWZmZWN0aXZlU2l6ZSIsInRhYmxlIiwiX2FjY2Vzc0lyb25MaXN0QVBJIiwiX2FkanVzdFZpcnR1YWxJbmRleE9mZnNldCIsInJvdyIsImNoaWxkIiwiaGVhZGVyT2Zmc2V0IiwiaGVhZGVyIiwiZnZpIiwiZnZpT2Zmc2V0IiwiX2ZpcnN0VmlzaWJsZUluZGV4IiwibWF4VmlydHVhbEl0ZW1zIiwiX2VkZ2UiLCJfaWUiLCJfc2Nyb2xsVG9JbmRleCIsIl9mb2N1c2VkSXRlbUluZGV4IiwiX2l0ZW1zRm9jdXNhYmxlIiwiY2VsbEluZGV4IiwicmVQb3NpdGlvbiIsIl9jYW5Qb3B1bGF0ZSIsIl9pbml0aWFsUG9vbENyZWF0ZWQiLCJfZGVib3VuY2VJbmNyZWFzZVBvb2wiLCJyZW1haW5pbmdQaHlzaWNhbFNpemUiLCJlc3RpbWF0ZWRNaXNzaW5nUm93Q291bnQiLCJfX3Jlb3JkZXJDaGlsZE5vZGVzIiwiaW5PcmRlciIsImN1cnJlbnRJbmRleCIsInJvdzEiLCJyb3cyIiwiZnJhZ21lbnQiLCJwaHlzaWNhbEl0ZW1zIiwiX2NyZWF0ZVNjcm9sbGVyUm93cyIsIl9nZXRSb3dUYXJnZXQiLCJzbG90IiwiX3VwZGF0ZUhlYWRlckZvb3Rlck1ldHJpY3MiLCJfdG9nZ2xlQXR0cmlidXRlIiwiX3VwZGF0ZVNjcm9sbGVySXRlbSIsIm9sZE9mZnNldCIsIl9hZnRlclNjcm9sbCIsIl9ub1NjYWxlIiwic2NhbGUiLCJvZmZzZXQiLCJ0aHJlc2hvbGQiLCJtYXhTaGlmdCIsIm1heE9mZnNldCIsIl93YXJuUHJpdmF0ZUFQSUFjY2Vzc0FzeW5jRW5hYmxlZCIsInJldHVyblZhbHVlIiwiX2RlYm91bmNlcldhcm5Qcml2YXRlQVBJQWNjZXNzIiwiX2RlYm91bmNlUmVuZGVyIiwiYXBpTmFtZSIsImxhc3RWaXNpYmxlSW5kZXgiLCJBMTF5TWl4aW4iLCJfY29sdW1uVHJlZSIsInNvbWUiLCJjb2wiLCJfaGVhZGVyVGVtcGxhdGUiLCJib2R5Q29sdW1ucyIsIl9hMTF5R2V0SGVhZGVyUm93Q291bnQiLCJfYTExeUdldEZvb3RlclJvd0NvdW50IiwiX2ExMXlVcGRhdGVIZWFkZXJSb3dzIiwiX2ExMXlVcGRhdGVGb290ZXJSb3dzIiwiaGVhZGVyUm93IiwiZm9vdGVyIiwiZm9vdGVyUm93IiwiY2VsbCIsImRldGFpbHNPcGVuZWQiLCJkZXRhaWxzQ2VsbCIsImNvbHNwYW4iLCJzb3J0ZXIiLCJjZWxsQ29udGVudCIsIkFjdGl2ZUl0ZW1NaXhpbiIsImFjdGl2ZUl0ZW0iLCJzY3JvbGxlciIsIl9vbkNsaWNrIiwiX2FjdGl2YXRlSXRlbSIsImNsaWNrZWRJdGVtIiwiX2l0ZW1zRXF1YWwiLCJfY29udGVudCIsIl9pc0ZvY3VzYWJsZSIsIl9fZ2V0Um93TW9kZWwiLCJpc0ZvY3VzYWJsZUVsZW1lbnQiLCJkYXRhUHJvdmlkZXIiLCJfYXJyYXlEYXRhUHJvdmlkZXIiLCJjbGVhckNhY2hlIiwiX2Vuc3VyZUZpcnN0UGFnZUxvYWRlZCIsIl9maWx0ZXJzIiwiX2NoZWNrUGF0aHMiLCJfZmlsdGVyIiwic29ydE9yZGVycyIsIl9zb3J0ZXJzIiwiX211bHRpU29ydCIsInBhZ2UiLCJwYWdlU2l6ZSIsImFycmF5VG9DaGVjayIsImFjdGlvbiIsInBhcmVudFByb3BlcnR5IiwiX2NvbXBhcmUiLCJfbm9ybWFsaXplRW1wdHlWYWx1ZSIsImZpbHRlclZhbHVlTG93ZXJjYXNlIiwiX29uSGVhZGVyVHJhY2siLCJfY29sdW1uIiwiX2NoaWxkQ29sdW1ucyIsIl9vcmRlciIsImNvbHVtblJvd0NlbGxzIiwidGFyZ2V0Q2VsbCIsIm1pbldpZHRoIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJib3JkZXJMZWZ0V2lkdGgiLCJib3JkZXJSaWdodFdpZHRoIiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwiZmxleEdyb3ciLCJyZXNpemVkQ29sdW1uIiwiSXRlbUNhY2hlIiwicGFyZW50Q2FjaGUiLCJwYXJlbnRJdGVtIiwiaXRlbUNhY2hlcyIsImVmZmVjdGl2ZVNpemUiLCJwZW5kaW5nUmVxdWVzdHMiLCJpc0xvYWRpbmciLCJjYWNoZSIsInNjYWxlZEluZGV4IiwiZ2V0Q2FjaGVBbmRJbmRleCIsIl9pc0V4cGFuZGVkIiwicHJldiIsImN1cnIiLCJzdWJDYWNoZSIsInVwZGF0ZVNpemUiLCJfbG9hZFBhZ2UiLCJ0aGlzTGV2ZWxJbmRleCIsImV4cGFuZGVkSW5kZXgiLCJsb2FkaW5nIiwiX2NhY2hlIiwiaXRlbUlkUGF0aCIsImV4cGFuZGVkSXRlbXMiLCJfaW5zdGFuY2UiLCJfdXBkYXRlSXRlbSIsImVuc3VyZVN1YkNhY2hlRm9yU2NhbGVkSW5kZXgiLCJfZ2V0UGFnZUZvckluZGV4IiwiZXhwYW5kSXRlbSIsImNvbGxhcHNlSXRlbSIsIl9fZXhwYW5kZWRLZXlzIiwiZ2V0SXRlbUlkIiwiX19jYWNoZUV4cGFuZGVkS2V5cyIsIl9nZXRJdGVtSW5kZXhJbkFycmF5IiwiX2hhc0RhdGEiLCJfc2V0TG9hZGluZyIsInBhcmFtcyIsIl9tYXBTb3J0ZXJzIiwiZmlsdGVycyIsIl9tYXBGaWx0ZXJzIiwiY3VycmVudEl0ZW1zIiwiX2l0ZW0iLCJpdGVtc0luZGV4IiwiaXRlbUluZGV4IiwiY2FjaGVkSXRlbSIsImdldEl0ZW1Gb3JJbmRleCIsIl9faXRlbXNSZWNlaXZlZCIsIl9kZWJvdW5jZXJMb2FkIiwib2xkUGFnZVNpemUiLCJvbGREYXRhUHJvdmlkZXIiLCJfZGVib3VuY2VyQ2hlY2tTaXplIiwiX2NoZWNrU2l6ZSIsImhhZERhdGEiLCJpdGVtMSIsIml0ZW0yIiwiX2FkZE5vZGVPYnNlcnZlciIsIl9pc0NvbHVtbkVsZW1lbnQiLCJfZ2V0Q2hpbGRDb2x1bW5zIiwiX2hhc0NvbHVtbkdyb3VwcyIsIl9mbGF0dGVuQ29sdW1uR3JvdXBzIiwiY29sdW1uVHJlZSIsIl9nZXRDb2x1bW5UcmVlIiwiX2FycmF5RXF1YWxzIiwicm93RGV0YWlsc1RlbXBsYXRlIiwiX3Jvd0RldGFpbHNUZW1wbGF0ZSIsIl91cGRhdGVDb2x1bW5UcmVlIiwiX2RlYm91bmNlckNoZWNrSW1wb3J0cyIsIl9jaGVja0ltcG9ydHMiLCJhcnIxIiwiYXJyMiIsIl91cGRhdGVGaXJzdEFuZExhc3RDb2x1bW5Gb3JSb3ciLCJFdmVudENvbnRleHRNaXhpbiIsInNlY3Rpb24iLCJGaWx0ZXJNaXhpbiIsIl9maWx0ZXJDaGFuZ2VkIiwiZGF0YUhvc3QiLCJfdGVtcGxhdGVJbnN0YW5jZXMiLCJfcGFyZW50UGF0aFZhbHVlcyIsIl9ncmlkIiwiX2luc3RhbmNlUHJvcHMiLCJleHBhbmRlZCIsIl9lbnN1cmVUZW1wbGF0aXplZCIsIl9UZW1wbGF0ZUNsYXNzIiwiYWRkSW5zdGFuY2UiLCJfZm9yd2FyZFBhcmVudFByb3AiLCJvcmlnaW5hbFByb3AiLCJncmlkQ2FsbGJhY2siLCJrZXlOYW1lIiwiZGV0YWlsc09wZW5lZEl0ZW1zIiwicm93RGV0YWlsc1JlbmRlcmVyIiwiX2RldGFpbHNDZWxscyIsInRlbXBsYXRpemVyIiwiX3VwZGF0ZVJvdyIsIl9hMTF5VXBkYXRlUm93RGV0YWlsc09wZW5lZCIsIl90b2dnbGVEZXRhaWxzQ2VsbCIsImNoYW5nZVJlY29yZCIsIl9pc0RldGFpbHNPcGVuZWQiLCJkZXRhaWxzSGlkZGVuIiwiaGlkZGVuQ2hhbmdlZCIsIl9yZW5kZXJlciIsImNyZWF0ZUluc3RhbmNlIiwiX2RldGFpbHNPcGVuZWRJbnN0YW5jZUNoYW5nZWRDYWxsYmFjayIsIm9wZW5JdGVtRGV0YWlscyIsImNsb3NlSXRlbURldGFpbHMiLCJTQ1JPTExfUEVSSU9EIiwiV0hFRUxfU0NST0xMSU5HIiwiU0NST0xMSU5HIiwiSUdOT1JFX1dIRUVMIiwiX2Zyb3plbkNlbGxzIiwiX3Njcm9sbGJhcldpZHRoIiwic2Nyb2xsRGl2Iiwic2Nyb2xsYmFyV2lkdGgiLCJfcm93V2l0aEZvY3VzZWRFbGVtZW50IiwiX2RlbHRhWUFjYyIsIl9zY3JvbGxMaW5lSGVpZ2h0IiwiX2dldFNjcm9sbExpbmVIZWlnaHQiLCJfc2Nyb2xsUGFnZUhlaWdodCIsIl93aGVlbFNjcm9sbGluZyIsIl9kZWJvdW5jZXJXaGVlbFNjcm9sbGluZyIsIl90aW1lb3V0cyIsIl9vbldoZWVsIiwib3V0ZXJzY3JvbGxlciIsIm91dGVyU2Nyb2xsaW5nIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiY3RybEtleSIsIl9oYXNTY3JvbGxlZEFuY2VzdG9yIiwiZGVsdGFYIiwiZGVsdGFZIiwiZGVsdGFNb2RlIiwiV2hlZWxFdmVudCIsIkRPTV9ERUxUQV9MSU5FIiwiRE9NX0RFTFRBX1BBR0UiLCJfd2hlZWxBbmltYXRpb25GcmFtZSIsIl9kZWJvdW5jZXJXaGVlbEFuaW1hdGlvbkZyYW1lIiwibW9tZW50dW0iLCJfY2FuU2Nyb2xsIiwiX2hhc1Jlc2lkdWFsTW9tZW50dW0iLCJfaWdub3JlTmV3V2hlZWwiLCJfZGVib3VuY2VySWdub3JlTmV3V2hlZWwiLCJfcHJldmlvdXNNb21lbnR1bSIsIl9zY3JvbGxpbmdGcmFtZSIsIl9kZWJvdW5jZVNjcm9sbGluZyIsIl9yZW9yZGVyUm93cyIsIl9zY3JvbGxQZXJpb2RGcmFtZSIsIl9kZWJvdW5jZVNjcm9sbFBlcmlvZCIsIl90cmFuc2xhdGVTdGF0aW9uYXJ5RWxlbWVudHMiLCJfc2NoZWR1bGVTY3JvbGxpbmciLCJvcyIsIl9pb3MiLCJwYXNzdGhyb3VnaCIsInN5bmNPdXRlclNjcm9sbGVyIiwib3ZlclNjcm9sbCIsIl91cGRhdGVPdmVyZmxvdyIsIl9kZWJvdW5jZU92ZXJmbG93IiwiYWRqdXN0ZWRWaXJ0dWFsU3RhcnQiLCJ0YXJnZXRSb3ciLCJ0YXJnZXRQaHlzaWNhbEluZGV4IiwiX2RlYm91bmNlckNhY2hlRWxlbWVudHMiLCJfdXBkYXRlTGFzdEZyb3plbiIsImNvbHVtbnNSb3ciLCJsYXN0RnJvemVuIiwiX2xhc3RGcm96ZW4iLCJmcm96ZW4iLCJfZ2V0VHJhbnNsYXRlIiwiX3Njcm9sbExlZnQiLCJmcm96ZW5DZWxsVHJhbnNmb3JtIiwib3V0ZXJzaXplciIsImZpeGVkc2l6ZXIiLCJTZWxlY3Rpb25NaXhpbiIsInNlbGVjdGVkSXRlbXMiLCJfaXNTZWxlY3RlZCIsInNlbGVjdEl0ZW0iLCJkZXNlbGVjdEl0ZW0iLCJfc2VsZWN0ZWRJbnN0YW5jZUNoYW5nZWRDYWxsYmFjayIsIm11bHRpU29ydCIsIl9wcmV2aW91c1NvcnRlcnMiLCJfb25Tb3J0ZXJDaGFuZ2VkIiwic29ydGVycyIsIl9yZW1vdmVBcnJheUl0ZW0iLCJfYTExeVVwZGF0ZVNvcnRlcnMiLCJTdHlsaW5nTWl4aW4iLCJjZWxsQ2xhc3NOYW1lR2VuZXJhdG9yIiwiY2VsbENsYXNzR2VuZXJhdG9yIiwiZ2VuZXJhdGVDZWxsQ2xhc3NOYW1lcyIsIl9nZW5lcmF0ZUNlbGxDbGFzc05hbWVzIiwiX19nZW5lcmF0ZWRDbGFzc2VzIiwiY2xhc3NOYW1lIiwiRHJvcE1vZGUiLCJEcm9wTG9jYXRpb24iLCJEcmFnQW5kRHJvcE1peGluIiwiZHJvcE1vZGUiLCJyb3dzRHJhZ2dhYmxlIiwiZHJhZ0ZpbHRlciIsImRyb3BGaWx0ZXIiLCJfX2RuZEF1dG9TY3JvbGxUaHJlc2hvbGQiLCJfb25EcmFnU3RhcnQiLCJfb25EcmFnRW5kIiwiX29uRHJhZ092ZXIiLCJfb25EcmFnTGVhdmUiLCJfb25Ecm9wIiwiX3NhZmFyaSIsInJvd1JlY3QiLCJkYXRhVHJhbnNmZXIiLCJzZXREcmFnSW1hZ2UiLCJyb3dzIiwiX19nZXRWaWV3cG9ydFJvd3MiLCJzZXREYXRhIiwiX19mb3JtYXREZWZhdWx0VHJhbnNmZXJEYXRhIiwidXBkYXRlU3R5bGVzIiwiZHJhZ2dlZEl0ZW1zIiwic2V0RHJhZ0RhdGEiLCJzZXREcmFnZ2VkSXRlbXNDb3VudCIsIm9yaWdpbmFsRXZlbnQiLCJfY2xlYXJEcmFnU3R5bGVzIiwiX2Ryb3BMb2NhdGlvbiIsIl9kcmFnT3Zlckl0ZW0iLCJfX2RuZEF1dG9TY3JvbGwiLCJkcm9wQWJvdmUiLCJfX2RuZEF1dG9TY3JvbGxpbmciLCJoZWFkZXJCb3R0b20iLCJmb290ZXJUb3AiLCJ0b3BEaWZmIiwiYm90dG9tRGlmZiIsInNjcm9sbFRvcERlbHRhIiwiZHJhZ0RhdGEiLCJnZXREYXRhIiwiZHJvcFRhcmdldEl0ZW0iLCJkcm9wTG9jYXRpb24iLCJmaWx0ZXJEcmFnQW5kRHJvcCIsIl9maWx0ZXJEcmFnQW5kRHJvcCIsImRyYWdEaXNhYmxlZCIsImRyb3BEaXNhYmxlZCIsIktleWJvYXJkTmF2aWdhdGlvbk1peGluIiwiX2hlYWRlckZvY3VzYWJsZSIsIl9mb290ZXJGb2N1c2FibGUiLCJfbmF2aWdhdGluZ0lzSGlkZGVuIiwiX2ZvY3VzZWRDb2x1bW5PcmRlciIsIl9hbmRyb2lkIiwiX29uS2V5RG93biIsIl9vbkZvY3VzSW4iLCJfb25Gb2N1c091dCIsIl9vbkNlbGxGb2N1c0luIiwiX29uQ2VsbEZvY3VzT3V0IiwiX2lzTW91c2Vkb3duIiwiZm9jdXNhYmxlIiwib2xkRm9jdXNhYmxlIiwia2V5R3JvdXAiLCJfZGV0ZWN0SW50ZXJhY3RpbmciLCJpbmRleE9mQ2hpbGRFbGVtZW50IiwidmlzaWJsZUl0ZW1zQ291bnQiLCJfbGFzdFZpc2libGVJbmRleCIsImFjdGl2ZUNlbGwiLCJjb2x1bW5JbmRleCIsImlzUm93RGV0YWlscyIsIl9lbGVtZW50TWF0Y2hlcyIsImFjdGl2ZVJvdyIsImFjdGl2ZVJvd0dyb3VwIiwibWF4Um93SW5kZXgiLCJyb3dJbmRleCIsImRzdFJvd0luZGV4IiwiZHN0SXNSb3dEZXRhaWxzIiwiZHN0SXRlbSIsIl9nZXRDb2x1bW5zIiwiZHN0Q29sdW1ucyIsImRzdFNvcnRlZENvbHVtbk9yZGVycyIsIm1heE9yZGVyZWRDb2x1bW5JbmRleCIsIm9yZGVyZWRDb2x1bW5JbmRleCIsImRzdE9yZGVyZWRDb2x1bW5JbmRleCIsIl9lbnN1cmVTY3JvbGxlZFRvSW5kZXgiLCJkc3RDb2x1bW5JbmRleCIsImRzdFJvdyIsImRzdENlbGwiLCJfc2Nyb2xsSG9yaXpvbnRhbGx5VG9DZWxsIiwiZHN0UmVjdCIsInRhYmxlSW5kZXgiLCJyb3dHcm91cCIsImxvY2FsVGFyZ2V0SXNUZXh0SW5wdXQiLCJ3YW50SW50ZXJhY3RpbmciLCJfcGFyc2VFdmVudFBhdGgiLCJmb2N1c1RhcmdldCIsInNyY0VsZW1lbnQiLCJzdGVwIiwidGFiT3JkZXIiLCJmb2N1c2V4aXQiLCJfcHJlZGljdEZvY3VzU3RlcFRhcmdldCIsIml0ZW1zRm9jdXNUYXJnZXQiLCJmb2N1c2VkSXRlbVJvdyIsIndhc05hdmlnYXRpbmciLCJyb290VGFyZ2V0IiwiX2FjdGl2ZVJvd0dyb3VwIiwiX2RldGVjdEZvY3VzZWRJdGVtSW5kZXgiLCJjb2x1bW5UcmVlTGV2ZWwiLCJmaXJzdFZpc2libGVJbmRleFJvdyIsImRzdENlbGxSZWN0IiwiZHN0Q2VsbEluZGV4IiwidGFibGVSZWN0IiwibGVmdEJvdW5kYXJ5IiwicmlnaHRCb3VuZGFyeSIsInF1ZXJ5IiwiY29sdW1uUmVvcmRlcmluZ0FsbG93ZWQiLCJfb3JkZXJCYXNlU2NvcGUiLCJfb25UcmFja0V2ZW50IiwiX3Jlb3JkZXJHaG9zdCIsIl9vblRvdWNoU3RhcnQiLCJfb25Ub3VjaE1vdmUiLCJfb25Ub3VjaEVuZCIsIl9vbkNvbnRleHRNZW51IiwiX3N0YXJ0VG91Y2hSZW9yZGVyVGltZW91dCIsIl9vblRyYWNrU3RhcnQiLCJfZHJhZ2dlZENvbHVtbiIsIl9vblRyYWNrRW5kIiwiaGVhZGVyQ2VsbCIsIl90b3VjaERldmljZSIsIl9vblRyYWNrIiwiX2NlbGxGcm9tUG9pbnQiLCJjaGlsZEVsZW1lbnRDb3VudCIsIl9zZXRTaWJsaW5nc1Jlb3JkZXJTdGF0dXMiLCJfcmVvcmRlclN0YXR1cyIsIl91cGRhdGVHaG9zdCIsInZpc2liaWxpdHkiLCJfdXBkYXRlR2hvc3RQb3NpdGlvbiIsIl9hdXRvU2Nyb2xsZXIiLCJ0YXJnZXRDb2x1bW4iLCJfZ2V0VGFyZ2V0Q29sdW1uIiwiX2lzU3dhcEFsbG93ZWQiLCJfaXNTd2FwcGFibGVCeVBvc2l0aW9uIiwiX3N3YXBDb2x1bW5PcmRlcnMiLCJfbGFzdERyYWdDbGllbnRYIiwiX2dldENvbHVtbnNJbk9yZGVyIiwiZXZlbnRDbGllbnRYIiwiZXZlbnRDbGllbnRZIiwiZ2hvc3RSZWN0IiwidGFyZ2V0TGVmdCIsInRhcmdldFRvcCIsIl9sZWZ0IiwiX3RvcCIsIl9nZXRJbm5lclRleHQiLCJnaG9zdCIsInN0YXR1cyIsInNpYmxpbmciLCJyaWdodERpZmYiLCJsZWZ0RGlmZiIsImFzeW5jIiwiY29sdW1uMSIsImNvbHVtbjIiLCJkaWZmZXJlbnRDb2x1bW5zIiwic2FtZVBhcmVudCIsInNhbWVGcm96ZW4iLCJzb3VyY2VDZWxsUmVjdCIsInRhcmdldFJlY3QiLCJfdXBkYXRlRmlyc3RBbmRMYXN0Q29sdW1uIiwiZHJhZ2dlZENvbHVtbiIsIl9mb290ZXJUZW1wbGF0ZSIsInRleHRBbGlnbiIsIl9lbXB0eUNlbGxzIiwiX2hlYWRlckNlbGwiLCJfZm9vdGVyQ2VsbCIsImZvb3RlclJlbmRlcmVyIiwiX2JvZHlUZW1wbGF0ZSIsIl90ZW1wbGF0ZU9ic2VydmVyIiwiX2FsbENlbGxzIiwiX2ZpbmRIb3N0R3JpZCIsIl9ncmlkVmFsdWUiLCJfY2VsbHMiLCJfcHJlcGFyZUhlYWRlclRlbXBsYXRlIiwiX3ByZXBhcmVGb290ZXJUZW1wbGF0ZSIsIl9wcmVwYXJlQm9keVRlbXBsYXRlIiwiX3ByZXBhcmVUZW1wbGF0aXplciIsIl9maW5kVGVtcGxhdGUiLCJfX3J1blJlbmRlcmVyIiwiY2VsbHMiLCJfX3NldENvbHVtblRlbXBsYXRlT3JSZW5kZXJlciIsImhlYWRlclRlbXBsYXRlIiwiZm9vdGVyVGVtcGxhdGUiLCJmb290ZXJDZWxsIiwiX191cGRhdGVIZWFkZXJGb290ZXJSb3dWaXNpYmlsaXR5IiwiX3NlbGVjdEZpcnN0VGVtcGxhdGUiLCJfcm9vdERhdGFIb3N0IiwiX2NvbHVtblByb3BDaGFuZ2VkIiwib3JkZXIiLCJfX2ZvcmNlUmVmbG93IiwiX2Zyb3plbkNlbGxzQ2hhbmdlZCIsImJvZHlUZW1wbGF0ZSIsImhhc0hlYWRlclRleHQiLCJfX3NldFRleHRDb250ZW50IiwicGF0aFJlbmRlcmVyIiwiX2dlbmVyYXRlSGVhZGVyIiwic3Vic3RyIiwicmVvcmRlclN0YXR1cyIsImV4aXN0aW5nSGFuZGxlIiwidGV4dEFsaWduRmFsbGJhY2siLCJfcHJldmlvdXNIaWRkZW4iLCJfcmVzZXRLZXlib2FyZE5hdmlnYXRpb24iLCJhdXRvV2lkdGgiLCJzY3JvbGxIYW5kbGVyIiwibm9TY3JvbGxiYXJzIiwiX3N5bmNTY3JvbGxUYXJnZXQiLCJfb25Nb3VzZU1vdmUiLCJ3ZWJraXRPdmVyZmxvd1Njcm9sbGluZyIsIl8iLCJvZmZzZXRZIiwib2Zmc2V0WCIsIlZhYWRpbkdyaWRTdHlsZXMiLCJzYWZhcmkiLCJzY3JvbGxpbmdTdHlsZXMiLCJUT1VDSF9ERVZJQ0UiLCJjcmVhdGVFdmVudCIsIl90aGlzIiwiTVNTdHJlYW0iLCJwbGF0Zm9ybSIsIm1heFRvdWNoUG9pbnRzIiwiX2ZpcmVmb3giLCJoZWlnaHRCeVJvd3MiLCJfcmVjYWxjdWxhdGVDb2x1bW5XaWR0aE9uY2VMb2FkaW5nRmluaXNoZWQiLCJfb25BbmltYXRpb25FbmQiLCJyZWNhbGN1bGF0ZUNvbHVtbldpZHRocyIsIl9faGFzUm93c1dpdGhDbGllbnRIZWlnaHQiLCJjb2xzIiwiX29yaWdGbGV4R3JvdyIsIl9jdXJyZW50V2lkdGgiLCJjZWxsV2lkdGgiLCJfcmVjYWxjdWxhdGVDb2x1bW5XaWR0aHMiLCJ0YWdOYW1lIiwic2xvdE5hbWUiLCJfY29udGVudEluZGV4IiwiY2hyb21lIiwibW91c2VVcExpc3RlbmVyIiwiaXNDb2x1bW5Sb3ciLCJub05vdGlmeSIsImNvbnRlbnRzRnJhZ21lbnQiLCJfdmFjYW50IiwiX2NyZWF0ZUNlbGwiLCJfY29uZmlndXJlRGV0YWlsc0NlbGwiLCJfYTExeVNldFJvd0RldGFpbHNDZWxsIiwidmlzaWJsZVJvd0NlbGxzIiwiX3ByZXZlbnRTY3JvbGxlclJvdGF0aW5nQ2VsbEZvY3VzIiwiX2ExMXlVcGRhdGVSb3dSb3dpbmRleCIsIl9nZXRJdGVtIiwiX2ExMXlVcGRhdGVSb3dTZWxlY3RlZCIsIl9hMTF5VXBkYXRlUm93TGV2ZWwiLCJfX2RldGFpbHNPcGVuZWRfXyIsIl9fc2VsZWN0ZWRfXyIsIl9fbGV2ZWxfXyIsIl9fZXhwYW5kZWRfXyIsIl9kZWJvdW5jZXJVcGRhdGVIZWlnaHRzIiwiX3VwZGF0ZURldGFpbHNDZWxsSGVpZ2h0cyIsImhlYWRlckhlaWdodCIsImZvb3RlckhlaWdodCIsImJvcmRlckJvdHRvbVdpZHRoIiwiYW5pbWF0aW9uTmFtZSIsIl9nZXRJbmRleExldmVsIiwiX3JlbmRlckhlYWRlckFuZEZvb3RlciIsIl9kZWJvdW5jZXJGb3JjZVJlZmxvdyIsImpzb25BcnJheURhdGFTb3VyY2UiLCJVc2VyRGF0YSIsImtleUluZGV4Iiwibm9kZTIiLCJub2RlMyIsInNlcnZpY2VXb3JrZXIiLCJyZWdpc3RlclNXIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FB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QU96WSxTQUFTc00sY0FBYyxNQUNsQ21NLEVBQUtsVCxVQUFZakcsRUFBTSxNQUN2Qm1aLEVBQUtqUSxNQUFNa0UsUUFBVSx5QkFDckIxTSxTQUFTQyxlQUFlLGVBQWU2RixZQUFZMlMsR0FFbkQsSUFBSTgwRCxFQUFRdnRFLFNBQVNzTSxjQUFjLE1BRW5DaWhFLEVBQU1ob0UsVUFBWSxJQUFNNm5FLEdBQW9CQyxTQUFTL3RFLEdBQ3JEaXVFLEVBQU0va0UsTUFBTWtFLFFBQVUseUJBQ3RCMU0sU0FBU0MsZUFBZSxlQUFlNkYsWUFBWXluRSxHQUVuRCxJQUFJQyxFQUFReHRFLFNBQVNzTSxjQUFjLE1BQ25DdE0sU0FBU0MsZUFBZSxlQUFlNkYsWUFBWTBuRSxNLFVFaEJ2RDFsRSxPQUFPaEgsaUJBQWlCLE9BQVEsTUFJaEN1bEUsaUJBQ0ksR0FBSSxrQkFBbUI1L0QsVUFDckIsVUFDUUEsVUFBVWduRSxjQUFjeC9ELFNBQVMsV0FDdkMsTUFBTy9CLEdBQ1A1SixRQUFRQyxJQUFJLHVEQUF3RDJKLFFBR3RFNUosUUFBUUMsSUFBSSxnREFYZG1yRSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMyk7XG4iLCJcclxuY29uc3QgZ3JpZF9iYWNrID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhdGllbnRzR3JpZGxpc3QnKTtcclxuXHJcbmNvbnN0IGNvbHVtbnMgPSBncmlkX2JhY2sucXVlcnlTZWxlY3RvckFsbCgndmFhZGluLWdyaWQtY29sdW1uJyk7XHJcblxyXG5jb2x1bW5zWzBdLmhlYWRlclJlbmRlcmVyID0gZnVuY3Rpb24ocm9vdCkge1xyXG4gIHJvb3QudGV4dENvbnRlbnQgPSAnTkFNRSc7XHJcbn07XHJcbmNvbHVtbnNbMF0ucmVuZGVyZXIgPSBmdW5jdGlvbihyb290LCBjb2x1bW4sIHJvd0RhdGEpIHtcclxuICByb290LnRleHRDb250ZW50ID0gcm93RGF0YS5pdGVtLm5hbWU7XHJcbn07XHJcblxyXG5jb2x1bW5zWzFdLmhlYWRlclJlbmRlcmVyID0gZnVuY3Rpb24ocm9vdCkge1xyXG4gIHJvb3QudGV4dENvbnRlbnQgPSAnQUdFJztcclxufTtcclxuY29sdW1uc1sxXS5yZW5kZXJlciA9IGZ1bmN0aW9uKHJvb3QsIGNvbHVtbiwgcm93RGF0YSkge1xyXG4gIHJvb3QudGV4dENvbnRlbnQgPSByb3dEYXRhLml0ZW0uYWdlO1xyXG59O1xyXG5cclxuc2V0VGltZW91dChmdW5jdGlvbigpIHsgXHJcbiAgZ3JpZF9iYWNrLml0ZW1zID0gW3snbmFtZSc6ICdKb2huIERvJywgJ2FnZSc6IDUwfSxcclxuICB7J25hbWUnOiAnUGlldCBkZSBSbycsICdhZ2UnOiA2N30sXHJcbiAgeyduYW1lJzogJ01hcmlhIHZhbiBIb29pJywgJ2FnZSc6IDU1fV07XHJcblxyXG4gfSwgNTAwMCk7IiwiZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdGFydENoYXRCdXR0b25cIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFjdGl2YXRlQ2hhdCk7XHJcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3RhcnRWaWRlb0J1dHRvblwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIixzZXR1cFZpZGVvU3RyZWFtVG9SZW1vdGUpO1xyXG5cclxuY29uc3QgcGNfY29uZmlndXJhdGlvbiA9IHtcclxuICBpY2VTZXJ2ZXJzOiBbe1xyXG4gICAgdXJsczogJ3N0dW46c3R1bi5sLmdvb2dsZS5jb206MTkzMDInXHJcbiAgfV1cclxufTtcclxuICAvLyBSVENQZWVyQ29ubmVjdGlvblxyXG4gIHZhciBwY19wZWVyQ29ubmVjdGlvbjsgLy8gdG9kbzogY2hhbmdlIGludG8gbG9uZ2VyIG5hbWVcclxuICBwY19wZWVyQ29ubmVjdGlvbiA9IG5ldyBSVENQZWVyQ29ubmVjdGlvbihwY19jb25maWd1cmF0aW9uKTtcclxuXHJcbmZ1bmN0aW9uIGFjdGl2YXRlQ2hhdCgpXHJcbntcclxuXHJcbmNvbnN0IHBvc3NpYmxlRW1vamlzID0gW1xyXG4gICAgJz8nLCc/JywnPydcclxuICBdO1xyXG4gIGZ1bmN0aW9uIHJhbmRvbUVtb2ppKCkge1xyXG4gICAgdmFyIHJhbmRvbUluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcG9zc2libGVFbW9qaXMubGVuZ3RoKTtcclxuICAgIHJldHVybiBwb3NzaWJsZUVtb2ppc1tyYW5kb21JbmRleF07XHJcbiAgfVxyXG4gIHZhciBlbW9qaSA9IHJhbmRvbUVtb2ppKCk7XHJcbiAgdmFyIGNoYXROYW1lVXNlciA9IFwiXCI7XHJcblxyXG4gIC8vIEdlbmVyYXRlIHJhbmRvbSBjaGF0IGhhc2ggaWYgbmVlZGVkXHJcbiAgaWYgKCFsb2NhdGlvbi5oYXNoKSB7XHJcbiAgICBsb2NhdGlvbi5oYXNoID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMHhGRkZGRkYpLnRvU3RyaW5nKDE2KTtcclxuICB9XHJcbiAgY29uc3QgY2hhdEhhc2ggPSBsb2NhdGlvbi5oYXNoLnN1YnN0cmluZygxKTtcclxuICBcclxuICAvLyBUT0RPOiBSZXBsYWNlIHdpdGggeW91ciBvd24gY2hhbm5lbCBJRFxyXG4gIGNvbnN0IGRyb25lID0gbmV3IFNjYWxlRHJvbmUoJ0RsWGNMNVNXSzNPMm5YMHEnKTtcclxuICAvLyBTY2FsZWRyb25lIHJvb20gbmFtZSBuZWVkcyB0byBiZSBwcmVmaXhlZCB3aXRoICdvYnNlcnZhYmxlLSdcclxuICBjb25zdCByb29tTmFtZSA9ICdvYnNlcnZhYmxlLScgKyBjaGF0SGFzaDtcclxuICAvLyBTY2FsZWRyb25lIHJvb20gdXNlZCBmb3Igc2lnbmFsaW5nXHJcbiAgbGV0IHJvb207XHJcblxyXG4gIC8vIFJUQ0RhdGFDaGFubmVsXHJcbiAgbGV0IGRhdGFDaGFubmVsO1xyXG4gIFxyXG4gIC8vIFdhaXQgZm9yIFNjYWxlZHJvbmUgc2lnbmFsbGluZyBzZXJ2ZXIgdG8gY29ubmVjdFxyXG4gIGRyb25lLm9uKCdvcGVuJywgZXJyb3IgPT4ge1xyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgIH1cclxuICAgIHJvb20gPSBkcm9uZS5zdWJzY3JpYmUocm9vbU5hbWUpO1xyXG4gICAgcm9vbS5vbignb3BlbicsIGVycm9yID0+IHtcclxuICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnNvbGUubG9nKCdDb25uZWN0ZWQgdG8gc2lnbmFsaW5nIHNlcnZlcicpO1xyXG4gICAgfSk7XHJcbiAgICAvLyBXZSdyZSBjb25uZWN0ZWQgdG8gdGhlIHJvb20gYW5kIHJlY2VpdmVkIGFuIGFycmF5IG9mICdtZW1iZXJzJ1xyXG4gICAgLy8gY29ubmVjdGVkIHRvIHRoZSByb29tIChpbmNsdWRpbmcgdXMpLiBTaWduYWxpbmcgc2VydmVyIGlzIHJlYWR5LlxyXG4gICAgcm9vbS5vbignbWVtYmVycycsIG1lbWJlcnMgPT4ge1xyXG4gICAgICBpZiAobWVtYmVycy5sZW5ndGggPj0gMykge1xyXG4gICAgICAgIHJldHVybiBhbGVydCgnVGhlIHJvb20gaXMgZnVsbCcpO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIElmIHdlIGFyZSB0aGUgc2Vjb25kIHVzZXIgdG8gY29ubmVjdCB0byB0aGUgcm9vbSB3ZSB3aWxsIGJlIGNyZWF0aW5nIHRoZSBvZmZlclxyXG4gICAgICBjb25zdCBpc09mZmVyZXIgPSBtZW1iZXJzLmxlbmd0aCA9PT0gMjtcclxuICAgICAgc3RhcnRXZWJSVEMoaXNPZmZlcmVyKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG4gIFxyXG4gIC8vIFNlbmQgc2lnbmFsaW5nIGRhdGEgdmlhIFNjYWxlZHJvbmVcclxuICBmdW5jdGlvbiBzZW5kU2lnbmFsaW5nTWVzc2FnZShtZXNzYWdlKSB7XHJcbiAgICBkcm9uZS5wdWJsaXNoKHtcclxuICAgICAgcm9vbTogcm9vbU5hbWUsXHJcbiAgICAgIG1lc3NhZ2VcclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBzdGFydFdlYlJUQyhpc09mZmVyZXIpIHtcclxuICAgIGNvbnNvbGUubG9nKCdTdGFydGluZyBXZWJSVEMgaW4gYXMnLCBpc09mZmVyZXIgPyAnb2ZmZXJlcicgOiAnd2FpdGVyJyk7XHJcbiAgICBcclxuICBcclxuICAgIC8vICdvbmljZWNhbmRpZGF0ZScgbm90aWZpZXMgdXMgd2hlbmV2ZXIgYW4gSUNFIGFnZW50IG5lZWRzIHRvIGRlbGl2ZXIgYVxyXG4gICAgLy8gbWVzc2FnZSB0byB0aGUgb3RoZXIgcGVlciB0aHJvdWdoIHRoZSBzaWduYWxpbmcgc2VydmVyXHJcbiAgICBwY19wZWVyQ29ubmVjdGlvbi5vbmljZWNhbmRpZGF0ZSA9IGV2ZW50ID0+IHtcclxuICAgICAgaWYgKGV2ZW50LmNhbmRpZGF0ZSkge1xyXG4gICAgICAgIHNlbmRTaWduYWxpbmdNZXNzYWdlKHsnY2FuZGlkYXRlJzogZXZlbnQuY2FuZGlkYXRlfSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgXHJcbiAgXHJcbiAgICBpZiAoaXNPZmZlcmVyKSB7XHJcbiAgICAgIC8vIElmIHVzZXIgaXMgb2ZmZXJlciBsZXQgdGhlbSBjcmVhdGUgYSBuZWdvdGlhdGlvbiBvZmZlciBhbmQgc2V0IHVwIHRoZSBkYXRhIGNoYW5uZWxcclxuICAgICAgY2hhdE5hbWVVc2VyID0gJ0RvY3RlclgnO1xyXG4gICAgICBlbW9qaSA9ICc/JztcclxuXHJcbiAgICAgIHBjX3BlZXJDb25uZWN0aW9uLm9ubmVnb3RpYXRpb25uZWVkZWQgPSAoKSA9PiB7XHJcbiAgICAgICAgcGNfcGVlckNvbm5lY3Rpb24uY3JlYXRlT2ZmZXIobG9jYWxEZXNjQ3JlYXRlZCwgZXJyb3IgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gICAgICB9XHJcbiAgICAgIGRhdGFDaGFubmVsID0gcGNfcGVlckNvbm5lY3Rpb24uY3JlYXRlRGF0YUNoYW5uZWwoJ2NoYXQnKTtcclxuICAgICAgc2V0dXBEYXRhQ2hhbm5lbCgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY2hhdE5hbWVVc2VyID0gJ1BhdGllbnRZJztcclxuICAgICAgZW1vamkgPSAnPyc7XHJcbiAgICAgIFxyXG4gICAgICAvLyBJZiB1c2VyIGlzIG5vdCB0aGUgb2ZmZXJlciBsZXQgd2FpdCBmb3IgYSBkYXRhIGNoYW5uZWxcclxuICAgICAgcGNfcGVlckNvbm5lY3Rpb24ub25kYXRhY2hhbm5lbCA9IGV2ZW50ID0+IHtcclxuICAgICAgICBkYXRhQ2hhbm5lbCA9IGV2ZW50LmNoYW5uZWw7XHJcbiAgICAgICAgc2V0dXBEYXRhQ2hhbm5lbCgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAgLy8gV2hlbiBhIHJlbW90ZSBzdHJlYW0gYXJyaXZlcyBkaXNwbGF5IGl0IGluIHRoZSAjcmVtb3RlVmlkZW8gZWxlbWVudFxyXG4gIHBjX3BlZXJDb25uZWN0aW9uLm9udHJhY2sgPSBldmVudCA9PiB7XHJcbiAgICBjb25zdCBzdHJlYW0gPSBldmVudC5zdHJlYW1zWzBdO1xyXG4gICAgaWYgKCFyZW1vdGVWaWRlby5zcmNPYmplY3QgfHwgcmVtb3RlVmlkZW8uc3JjT2JqZWN0LmlkICE9PSBzdHJlYW0uaWQpIHtcclxuICAgICAgcmVtb3RlVmlkZW8uc3JjT2JqZWN0ID0gc3RyZWFtO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gICAgc3RhcnRMaXN0ZW50aW5nVG9TaWduYWxzKCk7XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIHN0YXJ0TGlzdGVudGluZ1RvU2lnbmFscygpIHtcclxuICAgIC8vIExpc3RlbiB0byBzaWduYWxpbmcgZGF0YSBmcm9tIFNjYWxlZHJvbmVcclxuICAgIHJvb20ub24oJ2RhdGEnLCAobWVzc2FnZSwgY2xpZW50KSA9PiB7XHJcbiAgICAgIC8vIE1lc3NhZ2Ugd2FzIHNlbnQgYnkgdXNcclxuICAgICAgaWYgKGNsaWVudC5pZCA9PT0gZHJvbmUuY2xpZW50SWQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgaWYgKG1lc3NhZ2Uuc2RwKSB7XHJcbiAgICAgICAgLy8gVGhpcyBpcyBjYWxsZWQgYWZ0ZXIgcmVjZWl2aW5nIGFuIG9mZmVyIG9yIGFuc3dlciBmcm9tIGFub3RoZXIgcGVlclxyXG4gICAgICAgIHBjX3BlZXJDb25uZWN0aW9uLnNldFJlbW90ZURlc2NyaXB0aW9uKG5ldyBSVENTZXNzaW9uRGVzY3JpcHRpb24obWVzc2FnZS5zZHApLCAoKSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygncGNfcGVlckNvbm5lY3Rpb24ucmVtb3RlRGVzY3JpcHRpb24udHlwZScsIHBjX3BlZXJDb25uZWN0aW9uLnJlbW90ZURlc2NyaXB0aW9uLnR5cGUpO1xyXG4gICAgICAgICAgLy8gV2hlbiByZWNlaXZpbmcgYW4gb2ZmZXIgbGV0cyBhbnN3ZXIgaXRcclxuICAgICAgICAgIGlmIChwY19wZWVyQ29ubmVjdGlvbi5yZW1vdGVEZXNjcmlwdGlvbi50eXBlID09PSAnb2ZmZXInKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdBbnN3ZXJpbmcgb2ZmZXInKTtcclxuICAgICAgICAgICAgcGNfcGVlckNvbm5lY3Rpb24uY3JlYXRlQW5zd2VyKGxvY2FsRGVzY0NyZWF0ZWQsIGVycm9yID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LCBlcnJvciA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAgICAgIH0gZWxzZSBpZiAobWVzc2FnZS5jYW5kaWRhdGUpIHtcclxuICAgICAgICAvLyBBZGQgdGhlIG5ldyBJQ0UgY2FuZGlkYXRlIHRvIG91ciBjb25uZWN0aW9ucyByZW1vdGUgZGVzY3JpcHRpb25cclxuICAgICAgICBwY19wZWVyQ29ubmVjdGlvbi5hZGRJY2VDYW5kaWRhdGUobmV3IFJUQ0ljZUNhbmRpZGF0ZShtZXNzYWdlLmNhbmRpZGF0ZSkpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gbG9jYWxEZXNjQ3JlYXRlZChkZXNjKSB7XHJcbiAgICBwY19wZWVyQ29ubmVjdGlvbi5zZXRMb2NhbERlc2NyaXB0aW9uKFxyXG4gICAgICBkZXNjLFxyXG4gICAgICAoKSA9PiBzZW5kU2lnbmFsaW5nTWVzc2FnZSh7J3NkcCc6IHBjX3BlZXJDb25uZWN0aW9uLmxvY2FsRGVzY3JpcHRpb259KSxcclxuICAgICAgZXJyb3IgPT4gY29uc29sZS5lcnJvcihlcnJvcilcclxuICAgICk7XHJcbiAgfVxyXG4gIFxyXG4gIC8vIEhvb2sgdXAgZGF0YSBjaGFubmVsIGV2ZW50IGhhbmRsZXJzXHJcbiAgZnVuY3Rpb24gc2V0dXBEYXRhQ2hhbm5lbCgpIHtcclxuICAgIGNoZWNrRGF0YUNoYW5uZWxTdGF0ZSgpO1xyXG4gICAgZGF0YUNoYW5uZWwub25vcGVuID0gY2hlY2tEYXRhQ2hhbm5lbFN0YXRlO1xyXG4gICAgZGF0YUNoYW5uZWwub25jbG9zZSA9IGNoZWNrRGF0YUNoYW5uZWxTdGF0ZTtcclxuICAgIGRhdGFDaGFubmVsLm9ubWVzc2FnZSA9IGV2ZW50ID0+XHJcbiAgICAgIGluc2VydE1lc3NhZ2VUb0RPTShKU09OLnBhcnNlKGV2ZW50LmRhdGEpLCBmYWxzZSlcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gY2hlY2tEYXRhQ2hhbm5lbFN0YXRlKCkge1xyXG4gICAgY29uc29sZS5sb2coJ1dlYlJUQyBjaGFubmVsIHN0YXRlIGlzOicsIGRhdGFDaGFubmVsLnJlYWR5U3RhdGUpO1xyXG4gICAgaWYgKGRhdGFDaGFubmVsLnJlYWR5U3RhdGUgPT09ICdvcGVuJykge1xyXG4gICAgICBpbnNlcnRNZXNzYWdlVG9ET00oe2NvbnRlbnQ6ICdXZWJSVEMgZGF0YSBjaGFubmVsIGlzIG5vdyBvcGVuJ30pO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBpbnNlcnRNZXNzYWdlVG9ET00ob3B0aW9ucywgaXNGcm9tTWUpIHtcclxuICAgIGNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigndGVtcGxhdGVbZGF0YS10ZW1wbGF0ZT1cIm1lc3NhZ2VcIl0nKTtcclxuICAgIGNvbnN0IG5hbWVFbCA9IHRlbXBsYXRlLmNvbnRlbnQucXVlcnlTZWxlY3RvcignLm1lc3NhZ2VfX25hbWVDaGF0V2luZG93Jyk7XHJcbiAgICBpZiAob3B0aW9ucy5lbW9qaSB8fCBvcHRpb25zLm5hbWUpIHtcclxuICAgICAgbmFtZUVsLmlubmVyVGV4dCA9IG9wdGlvbnMuZW1vamkgKyAnICcgKyBvcHRpb25zLm5hbWU7XHJcbiAgICB9XHJcbiAgICB0ZW1wbGF0ZS5jb250ZW50LnF1ZXJ5U2VsZWN0b3IoJy5tZXNzYWdlX19idWJibGVDaGF0V2luZG93JykuaW5uZXJUZXh0ID0gb3B0aW9ucy5jb250ZW50O1xyXG4gICAgY29uc3QgY2xvbmUgPSBkb2N1bWVudC5pbXBvcnROb2RlKHRlbXBsYXRlLmNvbnRlbnQsIHRydWUpO1xyXG4gICAgY29uc3QgbWVzc2FnZUVsID0gY2xvbmUucXVlcnlTZWxlY3RvcignLm1lc3NhZ2VDaGF0V2luZG93Jyk7XHJcbiAgICBpZiAoaXNGcm9tTWUpIHtcclxuICAgICAgbWVzc2FnZUVsLmNsYXNzTGlzdC5hZGQoJ21lc3NhZ2UtLW1pbmVDaGF0V2luZG93Jyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBtZXNzYWdlRWwuY2xhc3NMaXN0LmFkZCgnbWVzc2FnZS0tdGhlaXJzQ2hhdFdpbmRvdycpO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgY29uc3QgbWVzc2FnZXNFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tZXNzYWdlc0NoYXRXaW5kb3cnKTtcclxuICAgIG1lc3NhZ2VzRWwuYXBwZW5kQ2hpbGQoY2xvbmUpO1xyXG4gIFxyXG4gICAgLy8gU2Nyb2xsIHRvIGJvdHRvbVxyXG4gICAgbWVzc2FnZXNFbC5zY3JvbGxUb3AgPSBtZXNzYWdlc0VsLnNjcm9sbEhlaWdodCAtIG1lc3NhZ2VzRWwuY2xpZW50SGVpZ2h0O1xyXG4gIH1cclxuICBcclxuICBjb25zdCBmb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZm9ybScpO1xyXG4gIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKCkgPT4ge1xyXG4gICAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFt0eXBlPVwidGV4dFwiXScpO1xyXG4gICAgY29uc3QgdmFsdWUgPSBpbnB1dC52YWx1ZTtcclxuICAgIGlucHV0LnZhbHVlID0gJyc7XHJcbiAgXHJcbiAgICBsZXQgbmFtZSA9IGNoYXROYW1lVXNlcjtcclxuICAgIGNvbnN0IGRhdGEgPSB7XHJcbiAgICAgIG5hbWUsXHJcbiAgICAgIGNvbnRlbnQ6IHZhbHVlLFxyXG4gICAgICBlbW9qaSxcclxuICAgIH07XHJcbiAgXHJcbiAgICBkYXRhQ2hhbm5lbC5zZW5kKEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcclxuICBcclxuICAgIGluc2VydE1lc3NhZ2VUb0RPTShkYXRhLCB0cnVlKTtcclxuICB9KTtcclxuICBcclxuICBpbnNlcnRNZXNzYWdlVG9ET00oe2NvbnRlbnQ6ICdDaGF0IFVSTCBpcyAnICsgbG9jYXRpb24uaHJlZn0pO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gc2V0dXBWaWRlb1N0cmVhbVRvUmVtb3RlKClcclxue1xyXG4gIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKHtcclxuICAgIGF1ZGlvOiB0cnVlLFxyXG4gICAgdmlkZW86IHRydWUsXHJcbiAgfSkudGhlbihzdHJlYW0gPT4ge1xyXG4gICAgLy8gRGlzcGxheSB5b3VyIGxvY2FsIHZpZGVvIGluICNsb2NhbFZpZGVvIGVsZW1lbnRcclxuICAgIGxvY2FsVmlkZW8uc3JjT2JqZWN0ID0gc3RyZWFtO1xyXG4gICAgLy8gQWRkIHlvdXIgc3RyZWFtIHRvIGJlIHNlbnQgdG8gdGhlIGNvbm5ldGluZyBwZWVyXHJcbiAgICBzdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaCh0cmFjayA9PiBwY19wZWVyQ29ubmVjdGlvbi5hZGRUcmFjayh0cmFjaywgc3RyZWFtKSk7XHJcbiAgfSwgY29uc29sZS5sb2coXCJlcnJvciBpbiB2aWRlbyBzdHJlYW1cIikpO1xyXG59XHJcbiIsImNsYXNzIEx1bW8gZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIHN0YXRpYyBnZXQgdmVyc2lvbigpIHtcbiAgICByZXR1cm4gJzEuNi4wJztcbiAgfVxufVxuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ3ZhYWRpbi1sdW1vLXN0eWxlcycsIEx1bW8pO1xuXG5leHBvcnQgeyBMdW1vIH07XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7UHJvbWlzZTx2b2lkPn0gKi9cbmxldCByZWFkeVByb21pc2UgPSBudWxsO1xuXG4vKiogQHR5cGUgez9mdW5jdGlvbig/ZnVuY3Rpb24oKSl9ICovXG5sZXQgd2hlblJlYWR5ID0gd2luZG93WydIVE1MSW1wb3J0cyddICYmIHdpbmRvd1snSFRNTEltcG9ydHMnXVsnd2hlblJlYWR5J10gfHwgbnVsbDtcblxuLyoqIEB0eXBlIHtmdW5jdGlvbigpfSAqL1xubGV0IHJlc29sdmVGbjtcblxuLyoqXG4gKiBAcGFyYW0gez9mdW5jdGlvbigpfSBjYWxsYmFja1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkb2N1bWVudFdhaXQoY2FsbGJhY2spIHtcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCkge1xuICAgIGlmICh3aGVuUmVhZHkpIHtcbiAgICAgIHdoZW5SZWFkeShjYWxsYmFjaylcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFyZWFkeVByb21pc2UpIHtcbiAgICAgICAgcmVhZHlQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtyZXNvbHZlRm4gPSByZXNvbHZlfSk7XG4gICAgICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICAgICAgcmVzb2x2ZUZuKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncmVhZHlzdGF0ZWNoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICAgICAgICAgIHJlc29sdmVGbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZWFkeVByb21pc2UudGhlbihmdW5jdGlvbigpeyBjYWxsYmFjayAmJiBjYWxsYmFjaygpOyB9KTtcbiAgICB9XG4gIH0pO1xufVxuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgZG9jdW1lbnRXYWl0IGZyb20gJy4vZG9jdW1lbnQtd2FpdC5qcyc7XG5cbi8qKlxuICogQHR5cGVkZWYge0hUTUxTdHlsZUVsZW1lbnQgfCB7Z2V0U3R5bGU6IGZ1bmN0aW9uKCk6SFRNTFN0eWxlRWxlbWVudH19XG4gKi9cbmV4cG9ydCBsZXQgQ3VzdG9tU3R5bGVQcm92aWRlcjtcblxuY29uc3QgU0VFTl9NQVJLRVIgPSAnX19zZWVuQnlTaGFkeUNTUyc7XG5jb25zdCBDQUNIRURfU1RZTEUgPSAnX19zaGFkeUNTU0NhY2hlZFN0eWxlJztcblxuLyoqIEB0eXBlIHs/ZnVuY3Rpb24oIUhUTUxTdHlsZUVsZW1lbnQpfSAqL1xubGV0IHRyYW5zZm9ybUZuID0gbnVsbDtcblxuLyoqIEB0eXBlIHs/ZnVuY3Rpb24oKX0gKi9cbmxldCB2YWxpZGF0ZUZuID0gbnVsbDtcblxuLyoqXG5UaGlzIGludGVyZmFjZSBpcyBwcm92aWRlZCB0byBhZGQgZG9jdW1lbnQtbGV2ZWwgPHN0eWxlPiBlbGVtZW50cyB0byBTaGFkeUNTUyBmb3IgcHJvY2Vzc2luZy5cblRoZXNlIHN0eWxlcyBtdXN0IGJlIHByb2Nlc3NlZCBieSBTaGFkeUNTUyB0byBzaW11bGF0ZSBTaGFkb3dSb290IHVwcGVyLWJvdW5kIGVuY2Fwc3VsYXRpb24gZnJvbSBvdXRzaWRlIHN0eWxlc1xuSW4gYWRkaXRpb24sIHRoZXNlIHN0eWxlcyBtYXkgYWxzbyBuZWVkIHRvIGJlIHByb2Nlc3NlZCBmb3IgQGFwcGx5IHJ1bGVzIGFuZCBDU1MgQ3VzdG9tIFByb3BlcnRpZXNcblxuVG8gYWRkIGRvY3VtZW50LWxldmVsIHN0eWxlcyB0byBTaGFkeUNTUywgb25lIGNhbiBjYWxsIGBTaGFkeUNTUy5hZGREb2N1bWVudFN0eWxlKHN0eWxlRWxlbWVudClgIG9yIGBTaGFkeUNTUy5hZGREb2N1bWVudFN0eWxlKHtnZXRTdHlsZTogKCkgPT4gc3R5bGVFbGVtZW50fSlgXG5cbkluIGFkZGl0aW9uLCBpZiB0aGUgcHJvY2VzcyB1c2VkIHRvIGRpc2NvdmVyIGRvY3VtZW50LWxldmVsIHN0eWxlcyBjYW4gYmUgc3luY2hyb25vdXNseSBmbHVzaGVkLCBvbmUgc2hvdWxkIHNldCBgU2hhZHlDU1MuZG9jdW1lbnRTdHlsZUZsdXNoYC5cblRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgd2hlbiBjYWxjdWxhdGluZyBzdHlsZXMuXG5cbkFuIGV4YW1wbGUgdXNhZ2Ugb2YgdGhlIGRvY3VtZW50LWxldmVsIHN0eWxpbmcgYXBpIGNhbiBiZSBmb3VuZCBpbiBgZXhhbXBsZXMvZG9jdW1lbnQtc3R5bGUtbGliLmpzYFxuXG5AdW5yZXN0cmljdGVkXG4qL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ3VzdG9tU3R5bGVJbnRlcmZhY2Uge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvKiogQHR5cGUgeyFBcnJheTwhQ3VzdG9tU3R5bGVQcm92aWRlcj59ICovXG4gICAgdGhpc1snY3VzdG9tU3R5bGVzJ10gPSBbXTtcbiAgICB0aGlzWydlbnF1ZXVlZCddID0gZmFsc2U7XG4gICAgLy8gTk9URShkZnJlZWRtKTogdXNlIHF1b3RlcyBoZXJlIHRvIHByZXZlbnQgY2xvc3VyZSBpbmxpbmluZyB0byBgZnVuY3Rpb24oKXt9YDtcbiAgICBkb2N1bWVudFdhaXQoKCkgPT4ge1xuICAgICAgaWYgKHdpbmRvd1snU2hhZHlDU1MnXVsnZmx1c2hDdXN0b21TdHlsZXMnXSkge1xuICAgICAgICB3aW5kb3dbJ1NoYWR5Q1NTJ11bJ2ZsdXNoQ3VzdG9tU3R5bGVzJ10oKTtcbiAgICAgIH1cbiAgICB9KVxuICB9XG4gIC8qKlxuICAgKiBRdWV1ZSBhIHZhbGlkYXRpb24gZm9yIG5ldyBjdXN0b20gc3R5bGVzIHRvIGJhdGNoIHN0eWxlIHJlY2FsY3VsYXRpb25zXG4gICAqL1xuICBlbnF1ZXVlRG9jdW1lbnRWYWxpZGF0aW9uKCkge1xuICAgIGlmICh0aGlzWydlbnF1ZXVlZCddIHx8ICF2YWxpZGF0ZUZuKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXNbJ2VucXVldWVkJ10gPSB0cnVlO1xuICAgIGRvY3VtZW50V2FpdCh2YWxpZGF0ZUZuKTtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHshSFRNTFN0eWxlRWxlbWVudH0gc3R5bGVcbiAgICovXG4gIGFkZEN1c3RvbVN0eWxlKHN0eWxlKSB7XG4gICAgaWYgKCFzdHlsZVtTRUVOX01BUktFUl0pIHtcbiAgICAgIHN0eWxlW1NFRU5fTUFSS0VSXSA9IHRydWU7XG4gICAgICB0aGlzWydjdXN0b21TdHlsZXMnXS5wdXNoKHN0eWxlKTtcbiAgICAgIHRoaXMuZW5xdWV1ZURvY3VtZW50VmFsaWRhdGlvbigpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHshQ3VzdG9tU3R5bGVQcm92aWRlcn0gY3VzdG9tU3R5bGVcbiAgICogQHJldHVybiB7SFRNTFN0eWxlRWxlbWVudH1cbiAgICovXG4gIGdldFN0eWxlRm9yQ3VzdG9tU3R5bGUoY3VzdG9tU3R5bGUpIHtcbiAgICBpZiAoY3VzdG9tU3R5bGVbQ0FDSEVEX1NUWUxFXSkge1xuICAgICAgcmV0dXJuIGN1c3RvbVN0eWxlW0NBQ0hFRF9TVFlMRV07XG4gICAgfVxuICAgIGxldCBzdHlsZTtcbiAgICBpZiAoY3VzdG9tU3R5bGVbJ2dldFN0eWxlJ10pIHtcbiAgICAgIHN0eWxlID0gY3VzdG9tU3R5bGVbJ2dldFN0eWxlJ10oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUgPSBjdXN0b21TdHlsZTtcbiAgICB9XG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG4gIC8qKlxuICAgKiBAcmV0dXJuIHshQXJyYXk8IUN1c3RvbVN0eWxlUHJvdmlkZXI+fVxuICAgKi9cbiAgcHJvY2Vzc1N0eWxlcygpIHtcbiAgICBjb25zdCBjcyA9IHRoaXNbJ2N1c3RvbVN0eWxlcyddO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGN1c3RvbVN0eWxlID0gY3NbaV07XG4gICAgICBpZiAoY3VzdG9tU3R5bGVbQ0FDSEVEX1NUWUxFXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHN0eWxlID0gdGhpcy5nZXRTdHlsZUZvckN1c3RvbVN0eWxlKGN1c3RvbVN0eWxlKTtcbiAgICAgIGlmIChzdHlsZSkge1xuICAgICAgICAvLyBIVE1MSW1wb3J0cyBwb2x5ZmlsbCBtYXkgaGF2ZSBjbG9uZWQgdGhlIHN0eWxlIGludG8gdGhlIG1haW4gZG9jdW1lbnQsXG4gICAgICAgIC8vIHdoaWNoIGlzIHJlZmVyZW5jZWQgd2l0aCBfX2FwcGxpZWRFbGVtZW50LlxuICAgICAgICBjb25zdCBzdHlsZVRvVHJhbnNmb3JtID0gLyoqIEB0eXBlIHshSFRNTFN0eWxlRWxlbWVudH0gKi8oc3R5bGVbJ19fYXBwbGllZEVsZW1lbnQnXSB8fCBzdHlsZSk7XG4gICAgICAgIGlmICh0cmFuc2Zvcm1Gbikge1xuICAgICAgICAgIHRyYW5zZm9ybUZuKHN0eWxlVG9UcmFuc2Zvcm0pO1xuICAgICAgICB9XG4gICAgICAgIGN1c3RvbVN0eWxlW0NBQ0hFRF9TVFlMRV0gPSBzdHlsZVRvVHJhbnNmb3JtO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY3M7XG4gIH1cbn1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1hc3NpZ24gKi9cbkN1c3RvbVN0eWxlSW50ZXJmYWNlLnByb3RvdHlwZVsnYWRkQ3VzdG9tU3R5bGUnXSA9IEN1c3RvbVN0eWxlSW50ZXJmYWNlLnByb3RvdHlwZS5hZGRDdXN0b21TdHlsZTtcbkN1c3RvbVN0eWxlSW50ZXJmYWNlLnByb3RvdHlwZVsnZ2V0U3R5bGVGb3JDdXN0b21TdHlsZSddID0gQ3VzdG9tU3R5bGVJbnRlcmZhY2UucHJvdG90eXBlLmdldFN0eWxlRm9yQ3VzdG9tU3R5bGU7XG5DdXN0b21TdHlsZUludGVyZmFjZS5wcm90b3R5cGVbJ3Byb2Nlc3NTdHlsZXMnXSA9IEN1c3RvbVN0eWxlSW50ZXJmYWNlLnByb3RvdHlwZS5wcm9jZXNzU3R5bGVzO1xuLyogZXNsaW50LWVuYWJsZSBuby1zZWxmLWFzc2lnbiAqL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhDdXN0b21TdHlsZUludGVyZmFjZS5wcm90b3R5cGUsIHtcbiAgJ3RyYW5zZm9ybUNhbGxiYWNrJzoge1xuICAgIC8qKiBAcmV0dXJuIHs/ZnVuY3Rpb24oIUhUTUxTdHlsZUVsZW1lbnQpfSAqL1xuICAgIGdldCgpIHtcbiAgICAgIHJldHVybiB0cmFuc2Zvcm1GbjtcbiAgICB9LFxuICAgIC8qKiBAcGFyYW0gez9mdW5jdGlvbighSFRNTFN0eWxlRWxlbWVudCl9IGZuICovXG4gICAgc2V0KGZuKSB7XG4gICAgICB0cmFuc2Zvcm1GbiA9IGZuO1xuICAgIH1cbiAgfSxcbiAgJ3ZhbGlkYXRlQ2FsbGJhY2snOiB7XG4gICAgLyoqIEByZXR1cm4gez9mdW5jdGlvbigpfSAqL1xuICAgIGdldCgpIHtcbiAgICAgIHJldHVybiB2YWxpZGF0ZUZuO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/ZnVuY3Rpb24oKX0gZm5cbiAgICAgKiBAdGhpcyB7Q3VzdG9tU3R5bGVJbnRlcmZhY2V9XG4gICAgICovXG4gICAgc2V0KGZuKSB7XG4gICAgICBsZXQgbmVlZHNFbnF1ZXVlID0gZmFsc2U7XG4gICAgICBpZiAoIXZhbGlkYXRlRm4pIHtcbiAgICAgICAgbmVlZHNFbnF1ZXVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhbGlkYXRlRm4gPSBmbjtcbiAgICAgIGlmIChuZWVkc0VucXVldWUpIHtcbiAgICAgICAgdGhpcy5lbnF1ZXVlRG9jdW1lbnRWYWxpZGF0aW9uKCk7XG4gICAgICB9XG4gICAgfSxcbiAgfVxufSlcblxuLyoqIEB0eXBlZGVmIHt7XG4gKiBjdXN0b21TdHlsZXM6ICFBcnJheTwhQ3VzdG9tU3R5bGVQcm92aWRlcj4sXG4gKiBhZGRDdXN0b21TdHlsZTogZnVuY3Rpb24oIUN1c3RvbVN0eWxlUHJvdmlkZXIpLFxuICogZ2V0U3R5bGVGb3JDdXN0b21TdHlsZTogZnVuY3Rpb24oIUN1c3RvbVN0eWxlUHJvdmlkZXIpOiBIVE1MU3R5bGVFbGVtZW50LFxuICogZmluZFN0eWxlczogZnVuY3Rpb24oKSxcbiAqIHRyYW5zZm9ybUNhbGxiYWNrOiA/ZnVuY3Rpb24oIUhUTUxTdHlsZUVsZW1lbnQpLFxuICogdmFsaWRhdGVDYWxsYmFjazogP2Z1bmN0aW9uKClcbiAqIH19XG4gKi9cbmV4cG9ydCBjb25zdCBDdXN0b21TdHlsZUludGVyZmFjZUludGVyZmFjZSA9IHt9O1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuZXhwb3J0IGNvbnN0IFZBUl9BU1NJR04gPSAvKD86XnxbO1xcc3tdXFxzKikoLS1bXFx3LV0qPylcXHMqOlxccyooPzooKD86Jyg/OlxcXFwnfC4pKj8nfFwiKD86XFxcXFwifC4pKj9cInxcXChbXildKj9cXCl8W159O3tdKSspfFxceyhbXn1dKilcXH0oPzooPz1bO1xcc31dKXwkKSkvZ2k7XG5leHBvcnQgY29uc3QgTUlYSU5fTUFUQ0ggPSAvKD86XnxcXFcrKUBhcHBseVxccypcXCg/KFteKTtcXG5dKilcXCk/L2dpO1xuZXhwb3J0IGNvbnN0IFZBUl9DT05TVU1FRCA9IC8oLS1bXFx3LV0rKVxccyooWzosOyldfCQpL2dpO1xuZXhwb3J0IGNvbnN0IEFOSU1BVElPTl9NQVRDSCA9IC8oYW5pbWF0aW9uXFxzKjopfChhbmltYXRpb24tbmFtZVxccyo6KS87XG5leHBvcnQgY29uc3QgTUVESUFfTUFUQ0ggPSAvQG1lZGlhXFxzKC4qKS87XG5leHBvcnQgY29uc3QgSVNfVkFSID0gL14tLS87XG5leHBvcnQgY29uc3QgQlJBQ0tFVEVEID0gL1xce1tefV0qXFx9L2c7XG5leHBvcnQgY29uc3QgSE9TVF9QUkVGSVggPSAnKD86XnxbXi4jWzpdKSc7XG5leHBvcnQgY29uc3QgSE9TVF9TVUZGSVggPSAnKCR8Wy46W1xcXFxzPit+XSknO1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgeyBNSVhJTl9NQVRDSCwgVkFSX0FTU0lHTiB9IGZyb20gJy4vY29tbW9uLXJlZ2V4LmpzJztcblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0PX0gcHJvcGVydGllc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlTmF0aXZlUHJvcGVydGllcyhlbGVtZW50LCBwcm9wZXJ0aWVzKSB7XG4gIC8vIHJlbW92ZSBwcmV2aW91cyBwcm9wZXJ0aWVzXG4gIGZvciAobGV0IHAgaW4gcHJvcGVydGllcykge1xuICAgIC8vIE5PVEU6IGZvciBiYyB3aXRoIHNoaW0sIGRvbid0IGFwcGx5IG51bGwgdmFsdWVzLlxuICAgIGlmIChwID09PSBudWxsKSB7XG4gICAgICBlbGVtZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5KHApO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KHAsIHByb3BlcnRpZXNbcF0pO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlVmFsdWUoZWxlbWVudCwgcHJvcGVydHkpIHtcbiAgLyoqXG4gICAqIEBjb25zdCB7c3RyaW5nfVxuICAgKi9cbiAgY29uc3QgdmFsdWUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5nZXRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5KTtcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybiAnJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdmFsdWUudHJpbSgpO1xuICB9XG59XG5cbi8qKlxuICogcmV0dXJuIHRydWUgaWYgYGNzc1RleHRgIGNvbnRhaW5zIGEgbWl4aW4gZGVmaW5pdGlvbiBvciBjb25zdW1wdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IGNzc1RleHRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXRlY3RNaXhpbihjc3NUZXh0KSB7XG4gIGNvbnN0IGhhcyA9IE1JWElOX01BVENILnRlc3QoY3NzVGV4dCkgfHwgVkFSX0FTU0lHTi50ZXN0KGNzc1RleHQpO1xuICAvLyByZXNldCBzdGF0ZSBvZiB0aGUgcmVnZXhlc1xuICBNSVhJTl9NQVRDSC5sYXN0SW5kZXggPSAwO1xuICBWQVJfQVNTSUdOLmxhc3RJbmRleCA9IDA7XG4gIHJldHVybiBoYXM7XG59XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBjb25zdCBuYXRpdmVTaGFkb3cgPSAhKHdpbmRvd1snU2hhZHlET00nXSAmJiB3aW5kb3dbJ1NoYWR5RE9NJ11bJ2luVXNlJ10pO1xubGV0IG5hdGl2ZUNzc1ZhcmlhYmxlc187XG5cbi8qKlxuICogQHBhcmFtIHsoU2hhZHlDU1NPcHRpb25zIHwgU2hhZHlDU1NJbnRlcmZhY2UpPX0gc2V0dGluZ3NcbiAqL1xuZnVuY3Rpb24gY2FsY0Nzc1ZhcmlhYmxlcyhzZXR0aW5ncykge1xuICBpZiAoc2V0dGluZ3MgJiYgc2V0dGluZ3NbJ3NoaW1jc3Nwcm9wZXJ0aWVzJ10pIHtcbiAgICBuYXRpdmVDc3NWYXJpYWJsZXNfID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgLy8gY2hyb21lIDQ5IGhhcyBzZW1pLXdvcmtpbmcgY3NzIHZhcnMsIGNoZWNrIGlmIGJveC1zaGFkb3cgd29ya3NcbiAgICAvLyBzYWZhcmkgOS4xIGhhcyBhIHJlY2FsYyBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTU3ODJcbiAgICAvLyBIb3dldmVyLCBzaGltIGNzcyBjdXN0b20gcHJvcGVydGllcyBhcmUgb25seSBzdXBwb3J0ZWQgd2l0aCBTaGFkeURPTSBlbmFibGVkLFxuICAgIC8vIHNvIGZhbGwgYmFjayBvbiBuYXRpdmUgaWYgd2UgZG8gbm90IGRldGVjdCBTaGFkeURPTVxuICAgIC8vIEVkZ2UgMTU6IGN1c3RvbSBwcm9wZXJ0aWVzIHVzZWQgaW4gOjpiZWZvcmUgYW5kIDo6YWZ0ZXIgd2lsbCBhbHNvIGJlIHVzZWQgaW4gdGhlIHBhcmVudCBlbGVtZW50XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubWljcm9zb2Z0LmNvbS9lbi11cy9taWNyb3NvZnQtZWRnZS9wbGF0Zm9ybS9pc3N1ZXMvMTI0MTQyNTcvXG4gICAgbmF0aXZlQ3NzVmFyaWFibGVzXyA9IG5hdGl2ZVNoYWRvdyB8fCBCb29sZWFuKCFuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9BcHBsZVdlYktpdFxcLzYwMXxFZGdlXFwvMTUvKSAmJlxuICAgICAgd2luZG93LkNTUyAmJiBDU1Muc3VwcG9ydHMgJiYgQ1NTLnN1cHBvcnRzKCdib3gtc2hhZG93JywgJzAgMCAwIHZhcigtLWZvbyknKSk7XG4gIH1cbn1cblxuLyoqIEB0eXBlIHtzdHJpbmcgfCB1bmRlZmluZWR9ICovXG5leHBvcnQgbGV0IGNzc0J1aWxkO1xuaWYgKHdpbmRvdy5TaGFkeUNTUyAmJiB3aW5kb3cuU2hhZHlDU1MuY3NzQnVpbGQgIT09IHVuZGVmaW5lZCkge1xuICBjc3NCdWlsZCA9IHdpbmRvdy5TaGFkeUNTUy5jc3NCdWlsZDtcbn1cblxuLyoqIEB0eXBlIHtib29sZWFufSAqL1xuZXhwb3J0IGNvbnN0IGRpc2FibGVSdW50aW1lID0gQm9vbGVhbih3aW5kb3cuU2hhZHlDU1MgJiYgd2luZG93LlNoYWR5Q1NTLmRpc2FibGVSdW50aW1lKTtcblxuaWYgKHdpbmRvdy5TaGFkeUNTUyAmJiB3aW5kb3cuU2hhZHlDU1MubmF0aXZlQ3NzICE9PSB1bmRlZmluZWQpIHtcbiAgbmF0aXZlQ3NzVmFyaWFibGVzXyA9IHdpbmRvdy5TaGFkeUNTUy5uYXRpdmVDc3M7XG59IGVsc2UgaWYgKHdpbmRvdy5TaGFkeUNTUykge1xuICBjYWxjQ3NzVmFyaWFibGVzKHdpbmRvdy5TaGFkeUNTUyk7XG4gIC8vIHJlc2V0IHdpbmRvdyB2YXJpYWJsZSB0byBsZXQgU2hhZHlDU1MgQVBJIHRha2UgaXRzIHBsYWNlXG4gIHdpbmRvdy5TaGFkeUNTUyA9IHVuZGVmaW5lZDtcbn0gZWxzZSB7XG4gIGNhbGNDc3NWYXJpYWJsZXMod2luZG93WydXZWJDb21wb25lbnRzJ10gJiYgd2luZG93WydXZWJDb21wb25lbnRzJ11bJ2ZsYWdzJ10pO1xufVxuXG4vLyBIYWNrIGZvciB0eXBlIGVycm9yIHVuZGVyIG5ldyB0eXBlIGluZmVyZW5jZSB3aGljaCBkb2Vzbid0IGxpa2UgdGhhdFxuLy8gbmF0aXZlQ3NzVmFyaWFibGVzIGlzIHVwZGF0ZWQgaW4gYSBmdW5jdGlvbiBhbmQgYXNzaWducyB0aGUgdHlwZVxuLy8gYGZ1bmN0aW9uKCk6ID9gIGluc3RlYWQgb2YgYGJvb2xlYW5gLlxuZXhwb3J0IGNvbnN0IG5hdGl2ZUNzc1ZhcmlhYmxlcyA9IC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8obmF0aXZlQ3NzVmFyaWFibGVzXyk7IiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQ3VzdG9tU3R5bGVJbnRlcmZhY2UgZnJvbSAnLi4vc3JjL2N1c3RvbS1zdHlsZS1pbnRlcmZhY2UuanMnO1xuaW1wb3J0IHtnZXRDb21wdXRlZFN0eWxlVmFsdWUsIHVwZGF0ZU5hdGl2ZVByb3BlcnRpZXN9IGZyb20gJy4uL3NyYy9jb21tb24tdXRpbHMuanMnO1xuaW1wb3J0IHtuYXRpdmVDc3NWYXJpYWJsZXMsIG5hdGl2ZVNoYWRvdywgY3NzQnVpbGQsIGRpc2FibGVSdW50aW1lfSBmcm9tICcuLi9zcmMvc3R5bGUtc2V0dGluZ3MuanMnO1xuXG5jb25zdCBjdXN0b21TdHlsZUludGVyZmFjZSA9IG5ldyBDdXN0b21TdHlsZUludGVyZmFjZSgpO1xuXG5pZiAoIXdpbmRvdy5TaGFkeUNTUykge1xuICB3aW5kb3cuU2hhZHlDU1MgPSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZWxlbWVudE5hbWVcbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IGVsZW1lbnRFeHRlbmRzXG4gICAgICovXG4gICAgcHJlcGFyZVRlbXBsYXRlKHRlbXBsYXRlLCBlbGVtZW50TmFtZSwgZWxlbWVudEV4dGVuZHMpIHt9LCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0geyFIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50TmFtZVxuICAgICAqL1xuICAgIHByZXBhcmVUZW1wbGF0ZURvbSh0ZW1wbGF0ZSwgZWxlbWVudE5hbWUpIHt9LCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0geyFIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50TmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gZWxlbWVudEV4dGVuZHNcbiAgICAgKi9cbiAgICBwcmVwYXJlVGVtcGxhdGVTdHlsZXModGVtcGxhdGUsIGVsZW1lbnROYW1lLCBlbGVtZW50RXh0ZW5kcykge30sIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gcHJvcGVydGllc1xuICAgICAqL1xuICAgIHN0eWxlU3VidHJlZShlbGVtZW50LCBwcm9wZXJ0aWVzKSB7XG4gICAgICBjdXN0b21TdHlsZUludGVyZmFjZS5wcm9jZXNzU3R5bGVzKCk7XG4gICAgICB1cGRhdGVOYXRpdmVQcm9wZXJ0aWVzKGVsZW1lbnQsIHByb3BlcnRpZXMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAgICAgKi9cbiAgICBzdHlsZUVsZW1lbnQoZWxlbWVudCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICBjdXN0b21TdHlsZUludGVyZmFjZS5wcm9jZXNzU3R5bGVzKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gcHJvcGVydGllc1xuICAgICAqL1xuICAgIHN0eWxlRG9jdW1lbnQocHJvcGVydGllcykge1xuICAgICAgY3VzdG9tU3R5bGVJbnRlcmZhY2UucHJvY2Vzc1N0eWxlcygpO1xuICAgICAgdXBkYXRlTmF0aXZlUHJvcGVydGllcyhkb2N1bWVudC5ib2R5LCBwcm9wZXJ0aWVzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5XG4gICAgICogQHJldHVybiB7c3RyaW5nfVxuICAgICAqL1xuICAgIGdldENvbXB1dGVkU3R5bGVWYWx1ZShlbGVtZW50LCBwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGVWYWx1ZShlbGVtZW50LCBwcm9wZXJ0eSk7XG4gICAgfSxcblxuICAgIGZsdXNoQ3VzdG9tU3R5bGVzKCkge30sXG4gICAgbmF0aXZlQ3NzOiBuYXRpdmVDc3NWYXJpYWJsZXMsXG4gICAgbmF0aXZlU2hhZG93OiBuYXRpdmVTaGFkb3csXG4gICAgY3NzQnVpbGQ6IGNzc0J1aWxkLFxuICAgIGRpc2FibGVSdW50aW1lOiBkaXNhYmxlUnVudGltZSxcbiAgfVxufVxuXG53aW5kb3cuU2hhZHlDU1MuQ3VzdG9tU3R5bGVJbnRlcmZhY2UgPSBjdXN0b21TdHlsZUludGVyZmFjZTsiLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuLyoqXG4gKiBXaGVuIHVzaW5nIENsb3N1cmUgQ29tcGlsZXIsIEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkocHJvcGVydHksIG9iamVjdCkgaXMgcmVwbGFjZWQgYnkgdGhlIG11bmdlZCBuYW1lIGZvciBvYmplY3RbcHJvcGVydHldXG4gKiBXZSBjYW5ub3QgYWxpYXMgdGhpcyBmdW5jdGlvbiwgc28gd2UgaGF2ZSB0byB1c2UgYSBzbWFsbCBzaGltIHRoYXQgaGFzIHRoZSBzYW1lIGJlaGF2aW9yIHdoZW4gbm90IGNvbXBpbGluZy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcCBQcm9wZXJ0eSBuYW1lXG4gKiBAcGFyYW0gez9PYmplY3R9IG9iaiBSZWZlcmVuY2Ugb2JqZWN0XG4gKiBAcmV0dXJuIHtzdHJpbmd9IFBvdGVudGlhbGx5IHJlbmFtZWQgcHJvcGVydHkgbmFtZVxuICovXG53aW5kb3cuSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSA9IGZ1bmN0aW9uKHByb3AsIG9iaikge1xuICByZXR1cm4gcHJvcDtcbn07XG4vKiBlc2xpbnQtZW5hYmxlICovXG5cbmV4cG9ydCB7fTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgJy4vYm9vdC5qcyc7XG5cbmxldCBDU1NfVVJMX1JYID0gLyh1cmxcXCgpKFteKV0qKShcXCkpL2c7XG5sZXQgQUJTX1VSTCA9IC8oXlxcL1teXFwvXSl8KF4jKXwoXltcXHctXFxkXSo6KS87XG5sZXQgd29ya2luZ1VSTDtcbmxldCByZXNvbHZlRG9jO1xuLyoqXG4gKiBSZXNvbHZlcyB0aGUgZ2l2ZW4gVVJMIGFnYWluc3QgdGhlIHByb3ZpZGVkIGBiYXNlVXJpJy5cbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyBmdW5jdGlvbiBwZXJmb3JtcyBubyByZXNvbHV0aW9uIGZvciBVUkxzIHRoYXQgc3RhcnRcbiAqIHdpdGggYC9gIChhYnNvbHV0ZSBVUkxzKSBvciBgI2AgKGhhc2ggaWRlbnRpZmllcnMpLiAgRm9yIGdlbmVyYWwgcHVycG9zZVxuICogVVJMIHJlc29sdXRpb24sIHVzZSBgd2luZG93LlVSTGAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBJbnB1dCBVUkwgdG8gcmVzb2x2ZVxuICogQHBhcmFtIHs/c3RyaW5nPX0gYmFzZVVSSSBCYXNlIFVSSSB0byByZXNvbHZlIHRoZSBVUkwgYWdhaW5zdFxuICogQHJldHVybiB7c3RyaW5nfSByZXNvbHZlZCBVUkxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVVcmwodXJsLCBiYXNlVVJJKSB7XG4gIGlmICh1cmwgJiYgQUJTX1VSTC50ZXN0KHVybCkpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIGlmICh1cmwgPT09ICcvLycpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIC8vIExhenkgZmVhdHVyZSBkZXRlY3Rpb24uXG4gIGlmICh3b3JraW5nVVJMID09PSB1bmRlZmluZWQpIHtcbiAgICB3b3JraW5nVVJMID0gZmFsc2U7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHUgPSBuZXcgVVJMKCdiJywgJ2h0dHA6Ly9hJyk7XG4gICAgICB1LnBhdGhuYW1lID0gJ2MlMjBkJztcbiAgICAgIHdvcmtpbmdVUkwgPSAodS5ocmVmID09PSAnaHR0cDovL2EvYyUyMGQnKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBzaWxlbnRseSBmYWlsXG4gICAgfVxuICB9XG4gIGlmICghYmFzZVVSSSkge1xuICAgIGJhc2VVUkkgPSBkb2N1bWVudC5iYXNlVVJJIHx8IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB9XG4gIGlmICh3b3JraW5nVVJMKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAobmV3IFVSTCh1cmwsIGJhc2VVUkkpKS5ocmVmO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIEJhZCB1cmwgb3IgYmFzZVVSSSBzdHJ1Y3R1cmUuIERvIG5vdCBhdHRlbXB0IHRvIHJlc29sdmUuXG4gICAgICByZXR1cm4gdXJsO1xuICAgIH1cbiAgfVxuICAvLyBGYWxsYmFjayB0byBjcmVhdGluZyBhbiBhbmNob3IgaW50byBhIGRpc2Nvbm5lY3RlZCBkb2N1bWVudC5cbiAgaWYgKCFyZXNvbHZlRG9jKSB7XG4gICAgcmVzb2x2ZURvYyA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCgndGVtcCcpO1xuICAgIHJlc29sdmVEb2MuYmFzZSA9IHJlc29sdmVEb2MuY3JlYXRlRWxlbWVudCgnYmFzZScpO1xuICAgIHJlc29sdmVEb2MuaGVhZC5hcHBlbmRDaGlsZChyZXNvbHZlRG9jLmJhc2UpO1xuICAgIHJlc29sdmVEb2MuYW5jaG9yID0gcmVzb2x2ZURvYy5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgcmVzb2x2ZURvYy5ib2R5LmFwcGVuZENoaWxkKHJlc29sdmVEb2MuYW5jaG9yKTtcbiAgfVxuICByZXNvbHZlRG9jLmJhc2UuaHJlZiA9IGJhc2VVUkk7XG4gIHJlc29sdmVEb2MuYW5jaG9yLmhyZWYgPSB1cmw7XG4gIHJldHVybiByZXNvbHZlRG9jLmFuY2hvci5ocmVmIHx8IHVybDtcblxufVxuXG4vKipcbiAqIFJlc29sdmVzIGFueSByZWxhdGl2ZSBVUkwncyBpbiB0aGUgZ2l2ZW4gQ1NTIHRleHQgYWdhaW5zdCB0aGUgcHJvdmlkZWRcbiAqIGBvd25lckRvY3VtZW50YCdzIGBiYXNlVVJJYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY3NzVGV4dCBDU1MgdGV4dCB0byBwcm9jZXNzXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSSSBCYXNlIFVSSSB0byByZXNvbHZlIHRoZSBVUkwgYWdhaW5zdFxuICogQHJldHVybiB7c3RyaW5nfSBQcm9jZXNzZWQgQ1NTIHRleHQgd2l0aCByZXNvbHZlZCBVUkwnc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUNzcyhjc3NUZXh0LCBiYXNlVVJJKSB7XG4gIHJldHVybiBjc3NUZXh0LnJlcGxhY2UoQ1NTX1VSTF9SWCwgZnVuY3Rpb24obSwgcHJlLCB1cmwsIHBvc3QpIHtcbiAgICByZXR1cm4gcHJlICsgJ1xcJycgK1xuICAgICAgcmVzb2x2ZVVybCh1cmwucmVwbGFjZSgvW1wiJ10vZywgJycpLCBiYXNlVVJJKSArXG4gICAgICAnXFwnJyArIHBvc3Q7XG4gIH0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBwYXRoIGZyb20gYSBnaXZlbiBgdXJsYC4gVGhlIHBhdGggaW5jbHVkZXMgdGhlIHRyYWlsaW5nXG4gKiBgL2AgZnJvbSB0aGUgdXJsLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgSW5wdXQgVVJMIHRvIHRyYW5zZm9ybVxuICogQHJldHVybiB7c3RyaW5nfSByZXNvbHZlZCBwYXRoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXRoRnJvbVVybCh1cmwpIHtcbiAgcmV0dXJuIHVybC5zdWJzdHJpbmcoMCwgdXJsLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcbn1cbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgJy4vYm9vdC5qcyc7XG5cbmltcG9ydCB7IHBhdGhGcm9tVXJsIH0gZnJvbSAnLi9yZXNvbHZlLXVybC5qcyc7XG5leHBvcnQgY29uc3QgdXNlU2hhZG93ID0gISh3aW5kb3cuU2hhZHlET00pO1xuZXhwb3J0IGNvbnN0IHVzZU5hdGl2ZUNTU1Byb3BlcnRpZXMgPSBCb29sZWFuKCF3aW5kb3cuU2hhZHlDU1MgfHwgd2luZG93LlNoYWR5Q1NTLm5hdGl2ZUNzcyk7XG5leHBvcnQgY29uc3QgdXNlTmF0aXZlQ3VzdG9tRWxlbWVudHMgPSAhKHdpbmRvdy5jdXN0b21FbGVtZW50cy5wb2x5ZmlsbFdyYXBGbHVzaENhbGxiYWNrKTtcblxuXG4vKipcbiAqIEdsb2JhbGx5IHNldHRhYmxlIHByb3BlcnR5IHRoYXQgaXMgYXV0b21hdGljYWxseSBhc3NpZ25lZCB0b1xuICogYEVsZW1lbnRNaXhpbmAgaW5zdGFuY2VzLCB1c2VmdWwgZm9yIGJpbmRpbmcgaW4gdGVtcGxhdGVzIHRvXG4gKiBtYWtlIFVSTCdzIHJlbGF0aXZlIHRvIGFuIGFwcGxpY2F0aW9uJ3Mgcm9vdC4gIERlZmF1bHRzIHRvIHRoZSBtYWluXG4gKiBkb2N1bWVudCBVUkwsIGJ1dCBjYW4gYmUgb3ZlcnJpZGRlbiBieSB1c2Vycy4gIEl0IG1heSBiZSB1c2VmdWwgdG8gc2V0XG4gKiBgcm9vdFBhdGhgIHRvIHByb3ZpZGUgYSBzdGFibGUgYXBwbGljYXRpb24gbW91bnQgcGF0aCB3aGVuXG4gKiB1c2luZyBjbGllbnQgc2lkZSByb3V0aW5nLlxuICovXG5leHBvcnQgbGV0IHJvb3RQYXRoID0gcGF0aEZyb21VcmwoZG9jdW1lbnQuYmFzZVVSSSB8fCB3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbi8qKlxuICogU2V0cyB0aGUgZ2xvYmFsIHJvb3RQYXRoIHByb3BlcnR5IHVzZWQgYnkgYEVsZW1lbnRNaXhpbmAgYW5kXG4gKiBhdmFpbGFibGUgdmlhIGByb290UGF0aGAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIG5ldyByb290IHBhdGhcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmV4cG9ydCBjb25zdCBzZXRSb290UGF0aCA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgcm9vdFBhdGggPSBwYXRoO1xufTtcblxuLyoqXG4gKiBBIGdsb2JhbCBjYWxsYmFjayB1c2VkIHRvIHNhbml0aXplIGFueSB2YWx1ZSBiZWZvcmUgaW5zZXJ0aW5nIGl0IGludG8gdGhlIERPTS5cbiAqIFRoZSBjYWxsYmFjayBzaWduYXR1cmUgaXM6XG4gKlxuICogIGZ1bmN0aW9uIHNhbml0aXplRE9NVmFsdWUodmFsdWUsIG5hbWUsIHR5cGUsIG5vZGUpIHsgLi4uIH1cbiAqXG4gKiBXaGVyZTpcbiAqXG4gKiBgdmFsdWVgIGlzIHRoZSB2YWx1ZSB0byBzYW5pdGl6ZS5cbiAqIGBuYW1lYCBpcyB0aGUgbmFtZSBvZiBhbiBhdHRyaWJ1dGUgb3IgcHJvcGVydHkgKGZvciBleGFtcGxlLCBocmVmKS5cbiAqIGB0eXBlYCBpbmRpY2F0ZXMgd2hlcmUgdGhlIHZhbHVlIGlzIGJlaW5nIGluc2VydGVkOiBvbmUgb2YgcHJvcGVydHksIGF0dHJpYnV0ZSwgb3IgdGV4dC5cbiAqIGBub2RlYCBpcyB0aGUgbm9kZSB3aGVyZSB0aGUgdmFsdWUgaXMgYmVpbmcgaW5zZXJ0ZWQuXG4gKlxuICogQHR5cGUgeyhmdW5jdGlvbigqLHN0cmluZyxzdHJpbmcsTm9kZSk6Kil8dW5kZWZpbmVkfVxuICovXG5leHBvcnQgbGV0IHNhbml0aXplRE9NVmFsdWUgPSB3aW5kb3cuUG9seW1lciAmJiB3aW5kb3cuUG9seW1lci5zYW5pdGl6ZURPTVZhbHVlIHx8IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBTZXRzIHRoZSBnbG9iYWwgc2FuaXRpemVET01WYWx1ZSBhdmFpbGFibGUgdmlhIHRoaXMgbW9kdWxlJ3MgZXhwb3J0ZWRcbiAqIGBzYW5pdGl6ZURPTVZhbHVlYCB2YXJpYWJsZS5cbiAqXG4gKiBAcGFyYW0geyhmdW5jdGlvbigqLHN0cmluZyxzdHJpbmcsTm9kZSk6Kil8dW5kZWZpbmVkfSBuZXdTYW5pdGl6ZURPTVZhbHVlIHRoZSBnbG9iYWwgc2FuaXRpemVET01WYWx1ZSBjYWxsYmFja1xuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZXhwb3J0IGNvbnN0IHNldFNhbml0aXplRE9NVmFsdWUgPSBmdW5jdGlvbihuZXdTYW5pdGl6ZURPTVZhbHVlKSB7XG4gIHNhbml0aXplRE9NVmFsdWUgPSBuZXdTYW5pdGl6ZURPTVZhbHVlO1xufTtcblxuLyoqXG4gKiBHbG9iYWxseSBzZXR0YWJsZSBwcm9wZXJ0eSB0byBtYWtlIFBvbHltZXIgR2VzdHVyZXMgdXNlIHBhc3NpdmUgVG91Y2hFdmVudCBsaXN0ZW5lcnMgd2hlbiByZWNvZ25pemluZyBnZXN0dXJlcy5cbiAqIFdoZW4gc2V0IHRvIGB0cnVlYCwgZ2VzdHVyZXMgbWFkZSBmcm9tIHRvdWNoIHdpbGwgbm90IGJlIGFibGUgdG8gcHJldmVudCBzY3JvbGxpbmcsIGFsbG93aW5nIGZvciBzbW9vdGhlclxuICogc2Nyb2xsaW5nIHBlcmZvcm1hbmNlLlxuICogRGVmYXVsdHMgdG8gYGZhbHNlYCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG4gKi9cbmV4cG9ydCBsZXQgcGFzc2l2ZVRvdWNoR2VzdHVyZXMgPSBmYWxzZTtcblxuLyoqXG4gKiBTZXRzIGBwYXNzaXZlVG91Y2hHZXN0dXJlc2AgZ2xvYmFsbHkgZm9yIGFsbCBlbGVtZW50cyB1c2luZyBQb2x5bWVyIEdlc3R1cmVzLlxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdXNlUGFzc2l2ZSBlbmFibGUgb3IgZGlzYWJsZSBwYXNzaXZlIHRvdWNoIGdlc3R1cmVzIGdsb2JhbGx5XG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5leHBvcnQgY29uc3Qgc2V0UGFzc2l2ZVRvdWNoR2VzdHVyZXMgPSBmdW5jdGlvbih1c2VQYXNzaXZlKSB7XG4gIHBhc3NpdmVUb3VjaEdlc3R1cmVzID0gdXNlUGFzc2l2ZTtcbn07XG5cbi8qKlxuICogU2V0dGluZyB0byBlbnN1cmUgUG9seW1lciB0ZW1wbGF0ZSBldmFsdWF0aW9uIG9ubHkgb2NjdXJzIGJhc2VkIG9uIHRlbXBhdGVzXG4gKiBkZWZpbmVkIGluIHRydXN0ZWQgc2NyaXB0LiAgV2hlbiB0cnVlLCBgPGRvbS1tb2R1bGU+YCByZS1yZWdpc3RyYXRpb24gaXNcbiAqIGRpc2FsbG93ZWQsIGA8ZG9tLWJpbmQ+YCBpcyBkaXNhYmxlZCwgYW5kIGA8ZG9tLWlmPmAvYDxkb20tcmVwZWF0PmBcbiAqIHRlbXBsYXRlcyB3aWxsIG9ubHkgZXZhbHVhdGUgaW4gdGhlIGNvbnRleHQgb2YgYSB0cnVzdGVkIGVsZW1lbnQgdGVtcGxhdGUuXG4gKi9cbmV4cG9ydCBsZXQgc3RyaWN0VGVtcGxhdGVQb2xpY3kgPSBmYWxzZTtcblxuLyoqXG4gKiBTZXRzIGBzdHJpY3RUZW1wbGF0ZVBvbGljeWAgZ2xvYmFsbHkgZm9yIGFsbCBlbGVtZW50c1xuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdXNlU3RyaWN0UG9saWN5IGVuYWJsZSBvciBkaXNhYmxlIHN0cmljdCB0ZW1wbGF0ZSBwb2xpY3lcbiAqICAgZ2xvYmFsbHlcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmV4cG9ydCBjb25zdCBzZXRTdHJpY3RUZW1wbGF0ZVBvbGljeSA9IGZ1bmN0aW9uKHVzZVN0cmljdFBvbGljeSkge1xuICBzdHJpY3RUZW1wbGF0ZVBvbGljeSA9IHVzZVN0cmljdFBvbGljeTtcbn07XG5cbi8qKlxuICogU2V0dGluZyB0byBlbmFibGUgZG9tLW1vZHVsZSBsb29rdXAgZnJvbSBQb2x5bWVyLkVsZW1lbnQuICBCeSBkZWZhdWx0LFxuICogdGVtcGxhdGVzIG11c3QgYmUgZGVmaW5lZCBpbiBzY3JpcHQgdXNpbmcgdGhlIGBzdGF0aWMgZ2V0IHRlbXBsYXRlKClgXG4gKiBnZXR0ZXIgYW5kIHRoZSBgaHRtbGAgdGFnIGZ1bmN0aW9uLiAgVG8gZW5hYmxlIGxlZ2FjeSBsb2FkaW5nIG9mIHRlbXBsYXRlc1xuICogdmlhIGRvbS1tb2R1bGUsIHNldCB0aGlzIGZsYWcgdG8gdHJ1ZS5cbiAqL1xuZXhwb3J0IGxldCBhbGxvd1RlbXBsYXRlRnJvbURvbU1vZHVsZSA9IGZhbHNlO1xuXG4vKipcbiAqIFNldHMgYGxvb2t1cFRlbXBsYXRlRnJvbURvbU1vZHVsZWAgZ2xvYmFsbHkgZm9yIGFsbCBlbGVtZW50c1xuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYWxsb3dEb21Nb2R1bGUgZW5hYmxlIG9yIGRpc2FibGUgdGVtcGxhdGUgbG9va3VwXG4gKiAgIGdsb2JhbGx5XG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5leHBvcnQgY29uc3Qgc2V0QWxsb3dUZW1wbGF0ZUZyb21Eb21Nb2R1bGUgPSBmdW5jdGlvbihhbGxvd0RvbU1vZHVsZSkge1xuICBhbGxvd1RlbXBsYXRlRnJvbURvbU1vZHVsZSA9IGFsbG93RG9tTW9kdWxlO1xufTtcblxuLyoqXG4gKiBTZXR0aW5nIHRvIHNraXAgcHJvY2Vzc2luZyBzdHlsZSBpbmNsdWRlcyBhbmQgcmUtd3JpdGluZyB1cmxzIGluIGNzcyBzdHlsZXMuXG4gKiBOb3JtYWxseSBcImluY2x1ZGVkXCIgc3R5bGVzIGFyZSBwdWxsZWQgaW50byB0aGUgZWxlbWVudCBhbmQgYWxsIHVybHMgaW4gc3R5bGVzXG4gKiBhcmUgcmUtd3JpdHRlbiB0byBiZSByZWxhdGl2ZSB0byB0aGUgY29udGFpbmluZyBzY3JpcHQgdXJsLlxuICogSWYgbm8gaW5jbHVkZXMgb3IgcmVsYXRpdmUgdXJscyBhcmUgdXNlZCBpbiBzdHlsZXMsIHRoZXNlIHN0ZXBzIGNhbiBiZVxuICogc2tpcHBlZCBhcyBhbiBvcHRpbWl6YXRpb24uXG4gKi9cbmV4cG9ydCBsZXQgbGVnYWN5T3B0aW1pemF0aW9ucyA9IGZhbHNlO1xuXG4vKipcbiAqIFNldHMgYGxlZ2FjeU9wdGltaXphdGlvbnNgIGdsb2JhbGx5IGZvciBhbGwgZWxlbWVudHMgdG8gZW5hYmxlIG9wdGltaXphdGlvbnNcbiAqIHdoZW4gb25seSBsZWdhY3kgYmFzZWQgZWxlbWVudHMgYXJlIHVzZWQuXG4gKlxuICogQHBhcmFtIHtib29sZWFufSB1c2VMZWdhY3lPcHRpbWl6YXRpb25zIGVuYWJsZSBvciBkaXNhYmxlIGxlZ2FjeSBvcHRpbWl6YXRpb25zXG4gKiBpbmNsdWRlcyBhbmQgdXJsIHJld3JpdGluZ1xuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZXhwb3J0IGNvbnN0IHNldExlZ2FjeU9wdGltaXphdGlvbnMgPSBmdW5jdGlvbih1c2VMZWdhY3lPcHRpbWl6YXRpb25zKSB7XG4gIGxlZ2FjeU9wdGltaXphdGlvbnMgPSB1c2VMZWdhY3lPcHRpbWl6YXRpb25zO1xufTtcblxuLyoqXG4gKiBTZXR0aW5nIHRvIHBlcmZvcm0gaW5pdGlhbCByZW5kZXJpbmcgc3luY2hyb25vdXNseSB3aGVuIHJ1bm5pbmcgdW5kZXIgU2hhZHlET00uXG4gKiBUaGlzIG1hdGNoZXMgdGhlIGJlaGF2aW9yIG9mIFBvbHltZXIgMS5cbiAqL1xuZXhwb3J0IGxldCBzeW5jSW5pdGlhbFJlbmRlciA9IGZhbHNlO1xuXG4vKipcbiAqIFNldHMgYHN5bmNJbml0aWFsUmVuZGVyYCBnbG9iYWxseSBmb3IgYWxsIGVsZW1lbnRzIHRvIGVuYWJsZSBzeW5jaHJvbm91c1xuICogaW5pdGlhbCByZW5kZXJpbmcuXG4gKlxuICogQHBhcmFtIHtib29sZWFufSB1c2VTeW5jSW5pdGlhbFJlbmRlciBlbmFibGUgb3IgZGlzYWJsZSBzeW5jaHJvbm91cyBpbml0aWFsXG4gKiByZW5kZXJpbmcgZ2xvYmFsbHkuXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5leHBvcnQgY29uc3Qgc2V0U3luY0luaXRpYWxSZW5kZXIgPSBmdW5jdGlvbih1c2VTeW5jSW5pdGlhbFJlbmRlcikge1xuICBzeW5jSW5pdGlhbFJlbmRlciA9IHVzZVN5bmNJbml0aWFsUmVuZGVyO1xufTtcblxuLyoqXG4gKiBTZXR0aW5nIHRvIGNhbmNlbCBzeW50aGV0aWMgY2xpY2sgZXZlbnRzIGZpcmVkIGJ5IG9sZGVyIG1vYmlsZSBicm93c2Vycy4gTW9kZXJuIGJyb3dzZXJzXG4gKiBubyBsb25nZXIgZmlyZSBzeW50aGV0aWMgY2xpY2sgZXZlbnRzLCBhbmQgdGhlIGNhbmNlbGxhdGlvbiBiZWhhdmlvciBjYW4gaW50ZXJmZXJlXG4gKiB3aGVuIHByb2dyYW1tYXRpY2FsbHkgY2xpY2tpbmcgb24gZWxlbWVudHMuXG4gKi9cbmV4cG9ydCBsZXQgY2FuY2VsU3ludGhldGljQ2xpY2tFdmVudHMgPSB0cnVlO1xuXG4vKipcbiAqIFNldHMgYHNldENhbmNlbFN5bnRoZXRpY0V2ZW50c2AgZ2xvYmFsbHkgZm9yIGFsbCBlbGVtZW50cyB0byBjYW5jZWwgc3ludGhldGljIGNsaWNrIGV2ZW50cy5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHVzZUNhbmNlbFN5bnRoZXRpY0NsaWNrRXZlbnRzIGVuYWJsZSBvciBkaXNhYmxlIGNhbmNlbGxpbmcgc3ludGhldGljXG4gKiBldmVudHNcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmV4cG9ydCBjb25zdCBzZXRDYW5jZWxTeW50aGV0aWNDbGlja0V2ZW50cyA9IGZ1bmN0aW9uKHVzZUNhbmNlbFN5bnRoZXRpY0NsaWNrRXZlbnRzKSB7XG4gIGNhbmNlbFN5bnRoZXRpY0NsaWNrRXZlbnRzID0gdXNlQ2FuY2VsU3ludGhldGljQ2xpY2tFdmVudHM7XG59O1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbmltcG9ydCAnLi4vdXRpbHMvYm9vdC5qcyc7XG5cbmltcG9ydCB7IHJlc29sdmVVcmwsIHBhdGhGcm9tVXJsIH0gZnJvbSAnLi4vdXRpbHMvcmVzb2x2ZS11cmwuanMnO1xuaW1wb3J0IHsgc3RyaWN0VGVtcGxhdGVQb2xpY3kgfSBmcm9tICcuLi91dGlscy9zZXR0aW5ncy5qcyc7XG5cbmxldCBtb2R1bGVzID0ge307XG5sZXQgbGNNb2R1bGVzID0ge307XG4vKipcbiAqIFNldHMgYSBkb20tbW9kdWxlIGludG8gdGhlIGdsb2JhbCByZWdpc3RyeSBieSBpZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgZG9tLW1vZHVsZSBpZFxuICogQHBhcmFtIHtEb21Nb2R1bGV9IG1vZHVsZSBkb20tbW9kdWxlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5mdW5jdGlvbiBzZXRNb2R1bGUoaWQsIG1vZHVsZSkge1xuICAvLyBzdG9yZSBpZCBzZXBhcmF0ZSBmcm9tIGxvd2VyY2FzZWQgaWQgc28gdGhhdFxuICAvLyBpbiBhbGwgY2FzZXMgbWl4ZWRDYXNlIGlkIHdpbGwgc3RvcmVkIGRpc3RpbmN0bHlcbiAgLy8gYW5kIGxvd2VyY2FzZSB2ZXJzaW9uIGlzIGEgZmFsbGJhY2tcbiAgbW9kdWxlc1tpZF0gPSBsY01vZHVsZXNbaWQudG9Mb3dlckNhc2UoKV0gPSBtb2R1bGU7XG59XG4vKipcbiAqIFJldHJpZXZlcyBhIGRvbS1tb2R1bGUgZnJvbSB0aGUgZ2xvYmFsIHJlZ2lzdHJ5IGJ5IGlkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBkb20tbW9kdWxlIGlkXG4gKiBAcmV0dXJuIHtEb21Nb2R1bGUhfSBkb20tbW9kdWxlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGZpbmRNb2R1bGUoaWQpIHtcbiAgcmV0dXJuIG1vZHVsZXNbaWRdIHx8IGxjTW9kdWxlc1tpZC50b0xvd2VyQ2FzZSgpXTtcbn1cblxuZnVuY3Rpb24gc3R5bGVPdXRzaWRlVGVtcGxhdGVDaGVjayhpbnN0KSB7XG4gIGlmIChpbnN0LnF1ZXJ5U2VsZWN0b3IoJ3N0eWxlJykpIHtcbiAgICBjb25zb2xlLndhcm4oJ2RvbS1tb2R1bGUgJXMgaGFzIHN0eWxlIG91dHNpZGUgdGVtcGxhdGUnLCBpbnN0LmlkKTtcbiAgfVxufVxuXG4vKipcbiAqIFRoZSBgZG9tLW1vZHVsZWAgZWxlbWVudCByZWdpc3RlcnMgdGhlIGRvbSBpdCBjb250YWlucyB0byB0aGUgbmFtZSBnaXZlblxuICogYnkgdGhlIG1vZHVsZSdzIGlkIGF0dHJpYnV0ZS4gSXQgcHJvdmlkZXMgYSB1bmlmaWVkIGRhdGFiYXNlIG9mIGRvbVxuICogYWNjZXNzaWJsZSB2aWEgaXRzIHN0YXRpYyBgaW1wb3J0YCBBUEkuXG4gKlxuICogQSBrZXkgdXNlIGNhc2Ugb2YgYGRvbS1tb2R1bGVgIGlzIGZvciBwcm92aWRpbmcgY3VzdG9tIGVsZW1lbnQgYDx0ZW1wbGF0ZT5gc1xuICogdmlhIEhUTUwgaW1wb3J0cyB0aGF0IGFyZSBwYXJzZWQgYnkgdGhlIG5hdGl2ZSBIVE1MIHBhcnNlciwgdGhhdCBjYW4gYmVcbiAqIHJlbG9jYXRlZCBkdXJpbmcgYSBidW5kbGluZyBwYXNzIGFuZCBzdGlsbCBsb29rZWQgdXAgYnkgYGlkYC5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqICAgICA8ZG9tLW1vZHVsZSBpZD1cImZvb1wiPlxuICogICAgICAgPGltZyBzcmM9XCJzdHVmZi5wbmdcIj5cbiAqICAgICA8L2RvbS1tb2R1bGU+XG4gKlxuICogVGhlbiBpbiBjb2RlIGluIHNvbWUgb3RoZXIgbG9jYXRpb24gdGhhdCBjYW5ub3QgYWNjZXNzIHRoZSBkb20tbW9kdWxlIGFib3ZlXG4gKlxuICogICAgIGxldCBpbWcgPSBjdXN0b21FbGVtZW50cy5nZXQoJ2RvbS1tb2R1bGUnKS5pbXBvcnQoJ2ZvbycsICdpbWcnKTtcbiAqXG4gKiBAY3VzdG9tRWxlbWVudFxuICogQGV4dGVuZHMgSFRNTEVsZW1lbnRcbiAqIEBzdW1tYXJ5IEN1c3RvbSBlbGVtZW50IHRoYXQgcHJvdmlkZXMgYSByZWdpc3RyeSBvZiByZWxvY2F0YWJsZSBET00gY29udGVudFxuICogICBieSBgaWRgIHRoYXQgaXMgYWdub3N0aWMgdG8gYnVuZGxpbmcuXG4gKiBAdW5yZXN0cmljdGVkXG4gKi9cbmV4cG9ydCBjbGFzcyBEb21Nb2R1bGUgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHsgcmV0dXJuIFsnaWQnXTsgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgdGhlIGVsZW1lbnQgc3BlY2lmaWVkIGJ5IHRoZSBjc3MgYHNlbGVjdG9yYCBpbiB0aGUgbW9kdWxlXG4gICAqIHJlZ2lzdGVyZWQgYnkgYGlkYC4gRm9yIGV4YW1wbGUsIHRoaXMuaW1wb3J0KCdmb28nLCAnaW1nJyk7XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgaWQgb2YgdGhlIGRvbS1tb2R1bGUgaW4gd2hpY2ggdG8gc2VhcmNoLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHNlbGVjdG9yIFRoZSBjc3Mgc2VsZWN0b3IgYnkgd2hpY2ggdG8gZmluZCB0aGUgZWxlbWVudC5cbiAgICogQHJldHVybiB7RWxlbWVudH0gUmV0dXJucyB0aGUgZWxlbWVudCB3aGljaCBtYXRjaGVzIGBzZWxlY3RvcmAgaW4gdGhlXG4gICAqIG1vZHVsZSByZWdpc3RlcmVkIGF0IHRoZSBzcGVjaWZpZWQgYGlkYC5cbiAgICpcbiAgICogQGV4cG9ydFxuICAgKiBAbm9jb2xsYXBzZSBSZWZlcnJlZCB0byBpbmRpcmVjdGx5IGluIHN0eWxlLWdhdGhlci5qc1xuICAgKi9cbiAgc3RhdGljIGltcG9ydChpZCwgc2VsZWN0b3IpIHtcbiAgICBpZiAoaWQpIHtcbiAgICAgIGxldCBtID0gZmluZE1vZHVsZShpZCk7XG4gICAgICBpZiAobSAmJiBzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gbS5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIGF0dHJpYnV0ZS5cbiAgICogQHBhcmFtIHs/c3RyaW5nfSBvbGQgT2xkIHZhbHVlIG9mIGF0dHJpYnV0ZS5cbiAgICogQHBhcmFtIHs/c3RyaW5nfSB2YWx1ZSBDdXJyZW50IHZhbHVlIG9mIGF0dHJpYnV0ZS5cbiAgICogQHBhcmFtIHs/c3RyaW5nfSBuYW1lc3BhY2UgQXR0cmlidXRlIG5hbWVzcGFjZS5cbiAgICogQHJldHVybiB7dm9pZH1cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sobmFtZSwgb2xkLCB2YWx1ZSwgbmFtZXNwYWNlKSB7XG4gICAgaWYgKG9sZCAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMucmVnaXN0ZXIoKTtcbiAgICB9XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtYXJncyAqL1xuXG4gIC8qKlxuICAgKiBUaGUgYWJzb2x1dGUgVVJMIG9mIHRoZSBvcmlnaW5hbCBsb2NhdGlvbiBvZiB0aGlzIGBkb20tbW9kdWxlYC5cbiAgICpcbiAgICogVGhpcyB2YWx1ZSB3aWxsIGRpZmZlciBmcm9tIHRoaXMgZWxlbWVudCdzIGBvd25lckRvY3VtZW50YCBpbiB0aGVcbiAgICogZm9sbG93aW5nIHdheXM6XG4gICAqIC0gVGFrZXMgaW50byBhY2NvdW50IGFueSBgYXNzZXRwYXRoYCBhdHRyaWJ1dGUgYWRkZWQgZHVyaW5nIGJ1bmRsaW5nXG4gICAqICAgdG8gaW5kaWNhdGUgdGhlIG9yaWdpbmFsIGxvY2F0aW9uIHJlbGF0aXZlIHRvIHRoZSBidW5kbGVkIGxvY2F0aW9uXG4gICAqIC0gVXNlcyB0aGUgSFRNTEltcG9ydHMgcG9seWZpbGwncyBgaW1wb3J0Rm9yRWxlbWVudGAgQVBJIHRvIGVuc3VyZVxuICAgKiAgIHRoZSBwYXRoIGlzIHJlbGF0aXZlIHRvIHRoZSBpbXBvcnQgZG9jdW1lbnQncyBsb2NhdGlvbiBzaW5jZVxuICAgKiAgIGBvd25lckRvY3VtZW50YCBpcyBub3QgY3VycmVudGx5IHBvbHlmaWxsZWRcbiAgICovXG4gIGdldCBhc3NldHBhdGgoKSB7XG4gICAgLy8gRG9uJ3Qgb3ZlcnJpZGUgZXhpc3RpbmcgYXNzZXRwYXRoLlxuICAgIGlmICghdGhpcy5fX2Fzc2V0cGF0aCkge1xuICAgICAgLy8gbm90ZTogYXNzZXRwYXRoIHNldCB2aWEgYW4gYXR0cmlidXRlIG11c3QgYmUgcmVsYXRpdmUgdG8gdGhpc1xuICAgICAgLy8gZWxlbWVudCdzIGxvY2F0aW9uOyBhY2NvbW9kYXRlIHBvbHlmaWxsZWQgSFRNTEltcG9ydHNcbiAgICAgIGNvbnN0IG93bmVyID0gd2luZG93LkhUTUxJbXBvcnRzICYmIEhUTUxJbXBvcnRzLmltcG9ydEZvckVsZW1lbnQgP1xuICAgICAgICBIVE1MSW1wb3J0cy5pbXBvcnRGb3JFbGVtZW50KHRoaXMpIHx8IGRvY3VtZW50IDogdGhpcy5vd25lckRvY3VtZW50O1xuICAgICAgY29uc3QgdXJsID0gcmVzb2x2ZVVybChcbiAgICAgICAgdGhpcy5nZXRBdHRyaWJ1dGUoJ2Fzc2V0cGF0aCcpIHx8ICcnLCBvd25lci5iYXNlVVJJKTtcbiAgICAgIHRoaXMuX19hc3NldHBhdGggPSBwYXRoRnJvbVVybCh1cmwpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fX2Fzc2V0cGF0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgdGhlIGRvbS1tb2R1bGUgYXQgYSBnaXZlbiBpZC4gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgY2FsbGVkXG4gICAqIHdoZW4gYSBkb20tbW9kdWxlIGlzIGltcGVyYXRpdmVseSBjcmVhdGVkLiBGb3JcbiAgICogZXhhbXBsZSwgYGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RvbS1tb2R1bGUnKS5yZWdpc3RlcignZm9vJylgLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IGlkIFRoZSBpZCBhdCB3aGljaCB0byByZWdpc3RlciB0aGUgZG9tLW1vZHVsZS5cbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIHJlZ2lzdGVyKGlkKSB7XG4gICAgaWQgPSBpZCB8fCB0aGlzLmlkO1xuICAgIGlmIChpZCkge1xuICAgICAgLy8gVW5kZXIgc3RyaWN0VGVtcGxhdGVQb2xpY3ksIHJlamVjdCBhbmQgbnVsbCBvdXQgYW55IHJlLXJlZ2lzdGVyZWRcbiAgICAgIC8vIGRvbS1tb2R1bGUgc2luY2UgaXQgaXMgYW1iaWd1b3VzIHdoZXRoZXIgZmlyc3QtaW4gb3IgbGFzdC1pbiBpcyB0cnVzdGVkXG4gICAgICBpZiAoc3RyaWN0VGVtcGxhdGVQb2xpY3kgJiYgZmluZE1vZHVsZShpZCkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzZXRNb2R1bGUoaWQsIG51bGwpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHN0cmljdFRlbXBsYXRlUG9saWN5OiBkb20tbW9kdWxlICR7aWR9IHJlLXJlZ2lzdGVyZWRgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgIHNldE1vZHVsZShpZCwgdGhpcyk7XG4gICAgICBzdHlsZU91dHNpZGVUZW1wbGF0ZUNoZWNrKHRoaXMpO1xuICAgIH1cbiAgfVxufVxuXG5Eb21Nb2R1bGUucHJvdG90eXBlWydtb2R1bGVzJ10gPSBtb2R1bGVzO1xuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ2RvbS1tb2R1bGUnLCBEb21Nb2R1bGUpO1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuLyoqXG4gKiBNb2R1bGUgd2l0aCB1dGlsaXRpZXMgZm9yIGNvbGxlY3Rpb24gQ1NTIHRleHQgZnJvbSBgPHRlbXBsYXRlcz5gLCBleHRlcm5hbFxuICogc3R5bGVzaGVldHMsIGFuZCBgZG9tLW1vZHVsZWBzLlxuICpcbiAqIEBzdW1tYXJ5IE1vZHVsZSB3aXRoIHV0aWxpdGllcyBmb3IgY29sbGVjdGlvbiBDU1MgdGV4dCBmcm9tIHZhcmlvdXMgc291cmNlcy5cbiAqL1xuXG5pbXBvcnQgeyBEb21Nb2R1bGUgfSBmcm9tICcuLi9lbGVtZW50cy9kb20tbW9kdWxlLmpzJztcbmltcG9ydCB7IHJlc29sdmVDc3MgfSBmcm9tICcuL3Jlc29sdmUtdXJsLmpzJztcblxuY29uc3QgTU9EVUxFX1NUWUxFX0xJTktfU0VMRUNUT1IgPSAnbGlua1tyZWw9aW1wb3J0XVt0eXBlfj1jc3NdJztcbmNvbnN0IElOQ0xVREVfQVRUUiA9ICdpbmNsdWRlJztcbmNvbnN0IFNIQURZX1VOU0NPUEVEX0FUVFIgPSAnc2hhZHktdW5zY29wZWQnO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVJZCAuXG4gKiBAcmV0dXJuIHs/RG9tTW9kdWxlfSAuXG4gKi9cbmZ1bmN0aW9uIGltcG9ydE1vZHVsZShtb2R1bGVJZCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHs/RG9tTW9kdWxlfSAqLyhEb21Nb2R1bGUuaW1wb3J0KG1vZHVsZUlkKSk7XG59XG5cbmZ1bmN0aW9uIHN0eWxlRm9ySW1wb3J0KGltcG9ydERvYykge1xuICAvLyBOT1RFOiBwb2x5ZmlsbCBhZmZvcmRhbmNlLlxuICAvLyB1bmRlciB0aGUgSFRNTEltcG9ydHMgcG9seWZpbGwsIHRoZXJlIHdpbGwgYmUgbm8gJ2JvZHknLFxuICAvLyBidXQgdGhlIGltcG9ydCBwc2V1ZG8tZG9jIGNhbiBiZSB1c2VkIGRpcmVjdGx5LlxuICBsZXQgY29udGFpbmVyID0gaW1wb3J0RG9jLmJvZHkgPyBpbXBvcnREb2MuYm9keSA6IGltcG9ydERvYztcbiAgY29uc3QgaW1wb3J0Q3NzID0gcmVzb2x2ZUNzcyhjb250YWluZXIudGV4dENvbnRlbnQsXG4gICAgaW1wb3J0RG9jLmJhc2VVUkkpO1xuICBjb25zdCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHN0eWxlLnRleHRDb250ZW50ID0gaW1wb3J0Q3NzO1xuICByZXR1cm4gc3R5bGU7XG59XG5cbi8qKiBAdHlwZWRlZiB7e2Fzc2V0cGF0aDogc3RyaW5nfX0gKi9cbmxldCB0ZW1wbGF0ZVdpdGhBc3NldFBhdGg7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuXG4vKipcbiAqIFJldHVybnMgYSBsaXN0IG9mIDxzdHlsZT4gZWxlbWVudHMgaW4gYSBzcGFjZS1zZXBhcmF0ZWQgbGlzdCBvZiBgZG9tLW1vZHVsZWBzLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IG1vZHVsZUlkcyBMaXN0IG9mIGRvbS1tb2R1bGUgaWQncyB3aXRoaW4gd2hpY2ggdG9cbiAqIHNlYXJjaCBmb3IgY3NzLlxuICogQHJldHVybiB7IUFycmF5PCFIVE1MU3R5bGVFbGVtZW50Pn0gQXJyYXkgb2YgY29udGFpbmVkIDxzdHlsZT4gZWxlbWVudHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0eWxlc0Zyb21Nb2R1bGVzKG1vZHVsZUlkcykge1xuIGNvbnN0IG1vZHVsZXMgPSBtb2R1bGVJZHMudHJpbSgpLnNwbGl0KC9cXHMrLyk7XG4gY29uc3Qgc3R5bGVzID0gW107XG4gZm9yIChsZXQgaT0wOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuICAgc3R5bGVzLnB1c2goLi4uc3R5bGVzRnJvbU1vZHVsZShtb2R1bGVzW2ldKSk7XG4gfVxuIHJldHVybiBzdHlsZXM7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGxpc3Qgb2YgPHN0eWxlPiBlbGVtZW50cyBpbiBhIGdpdmVuIGBkb20tbW9kdWxlYC5cbiAqIFN0eWxlcyBpbiBhIGBkb20tbW9kdWxlYCBjYW4gY29tZSBlaXRoZXIgZnJvbSBgPHN0eWxlPmBzIHdpdGhpbiB0aGVcbiAqIGZpcnN0IGA8dGVtcGxhdGU+YCwgb3IgZWxzZSBmcm9tIG9uZSBvciBtb3JlXG4gKiBgPGxpbmsgcmVsPVwiaW1wb3J0XCIgdHlwZT1cImNzc1wiPmAgbGlua3Mgb3V0c2lkZSB0aGUgdGVtcGxhdGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1vZHVsZUlkIGRvbS1tb2R1bGUgaWQgdG8gZ2F0aGVyIHN0eWxlcyBmcm9tXG4gKiBAcmV0dXJuIHshQXJyYXk8IUhUTUxTdHlsZUVsZW1lbnQ+fSBBcnJheSBvZiBjb250YWluZWQgc3R5bGVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3R5bGVzRnJvbU1vZHVsZShtb2R1bGVJZCkge1xuICBjb25zdCBtID0gaW1wb3J0TW9kdWxlKG1vZHVsZUlkKTtcblxuICBpZiAoIW0pIHtcbiAgICBjb25zb2xlLndhcm4oJ0NvdWxkIG5vdCBmaW5kIHN0eWxlIGRhdGEgaW4gbW9kdWxlIG5hbWVkJywgbW9kdWxlSWQpO1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGlmIChtLl9zdHlsZXMgPT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IHN0eWxlcyA9IFtdO1xuICAgIC8vIG1vZHVsZSBpbXBvcnRzOiA8bGluayByZWw9XCJpbXBvcnRcIiB0eXBlPVwiY3NzXCI+XG4gICAgc3R5bGVzLnB1c2goLi4uX3N0eWxlc0Zyb21Nb2R1bGVJbXBvcnRzKG0pKTtcbiAgICAvLyBpbmNsdWRlIGNzcyBmcm9tIHRoZSBmaXJzdCB0ZW1wbGF0ZSBpbiB0aGUgbW9kdWxlXG4gICAgY29uc3QgdGVtcGxhdGUgPSAvKiogQHR5cGUgez9IVE1MVGVtcGxhdGVFbGVtZW50fSAqLyhcbiAgICAgICAgbS5xdWVyeVNlbGVjdG9yKCd0ZW1wbGF0ZScpKTtcbiAgICBpZiAodGVtcGxhdGUpIHtcbiAgICAgIHN0eWxlcy5wdXNoKC4uLnN0eWxlc0Zyb21UZW1wbGF0ZSh0ZW1wbGF0ZSxcbiAgICAgICAgLyoqIEB0eXBlIHt0ZW1wbGF0ZVdpdGhBc3NldFBhdGh9ICovKG0pLmFzc2V0cGF0aCkpO1xuICAgIH1cblxuICAgIG0uX3N0eWxlcyA9IHN0eWxlcztcbiAgfVxuXG4gIHJldHVybiBtLl9zdHlsZXM7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYDxzdHlsZT5gIGVsZW1lbnRzIHdpdGhpbiBhIGdpdmVuIHRlbXBsYXRlLlxuICpcbiAqIEBwYXJhbSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlIFRlbXBsYXRlIHRvIGdhdGhlciBzdHlsZXMgZnJvbVxuICogQHBhcmFtIHtzdHJpbmc9fSBiYXNlVVJJIGJhc2VVUkkgZm9yIHN0eWxlIGNvbnRlbnRcbiAqIEByZXR1cm4geyFBcnJheTwhSFRNTFN0eWxlRWxlbWVudD59IEFycmF5IG9mIHN0eWxlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gc3R5bGVzRnJvbVRlbXBsYXRlKHRlbXBsYXRlLCBiYXNlVVJJKSB7XG4gIGlmICghdGVtcGxhdGUuX3N0eWxlcykge1xuICAgIGNvbnN0IHN0eWxlcyA9IFtdO1xuICAgIC8vIGlmIGVsZW1lbnQgaXMgYSB0ZW1wbGF0ZSwgZ2V0IGNvbnRlbnQgZnJvbSBpdHMgLmNvbnRlbnRcbiAgICBjb25zdCBlJCA9IHRlbXBsYXRlLmNvbnRlbnQucXVlcnlTZWxlY3RvckFsbCgnc3R5bGUnKTtcbiAgICBmb3IgKGxldCBpPTA7IGkgPCBlJC5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGUgPSBlJFtpXTtcbiAgICAgIC8vIHN1cHBvcnQgc3R5bGUgc2hhcmluZyBieSBhbGxvd2luZyBzdHlsZXMgdG8gXCJpbmNsdWRlXCJcbiAgICAgIC8vIG90aGVyIGRvbS1tb2R1bGVzIHRoYXQgY29udGFpbiBzdHlsaW5nXG4gICAgICBsZXQgaW5jbHVkZSA9IGUuZ2V0QXR0cmlidXRlKElOQ0xVREVfQVRUUik7XG4gICAgICBpZiAoaW5jbHVkZSkge1xuICAgICAgICBzdHlsZXMucHVzaCguLi5zdHlsZXNGcm9tTW9kdWxlcyhpbmNsdWRlKS5maWx0ZXIoZnVuY3Rpb24oaXRlbSwgaW5kZXgsIHNlbGYpIHtcbiAgICAgICAgICByZXR1cm4gc2VsZi5pbmRleE9mKGl0ZW0pID09PSBpbmRleDtcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgICAgaWYgKGJhc2VVUkkpIHtcbiAgICAgICAgZS50ZXh0Q29udGVudCA9XG4gICAgICAgICAgICByZXNvbHZlQ3NzKGUudGV4dENvbnRlbnQsIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoYmFzZVVSSSkpO1xuICAgICAgfVxuICAgICAgc3R5bGVzLnB1c2goZSk7XG4gICAgfVxuICAgIHRlbXBsYXRlLl9zdHlsZXMgPSBzdHlsZXM7XG4gIH1cbiAgcmV0dXJuIHRlbXBsYXRlLl9zdHlsZXM7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGxpc3Qgb2YgPHN0eWxlPiBlbGVtZW50cyAgZnJvbSBzdHlsZXNoZWV0cyBsb2FkZWQgdmlhIGA8bGluayByZWw9XCJpbXBvcnRcIiB0eXBlPVwiY3NzXCI+YCBsaW5rcyB3aXRoaW4gdGhlIHNwZWNpZmllZCBgZG9tLW1vZHVsZWAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1vZHVsZUlkIElkIG9mIGBkb20tbW9kdWxlYCB0byBnYXRoZXIgQ1NTIGZyb21cbiAqIEByZXR1cm4geyFBcnJheTwhSFRNTFN0eWxlRWxlbWVudD59IEFycmF5IG9mIGNvbnRhaW5lZCBzdHlsZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHlsZXNGcm9tTW9kdWxlSW1wb3J0cyhtb2R1bGVJZCkge1xuIGxldCBtID0gaW1wb3J0TW9kdWxlKG1vZHVsZUlkKTtcbiByZXR1cm4gbSA/IF9zdHlsZXNGcm9tTW9kdWxlSW1wb3J0cyhtKSA6IFtdO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7IUhUTUxFbGVtZW50fSBtb2R1bGUgZG9tLW1vZHVsZSBlbGVtZW50IHRoYXQgY291bGQgY29udGFpbiBgPGxpbmsgcmVsPVwiaW1wb3J0XCIgdHlwZT1cImNzc1wiPmAgc3R5bGVzXG4gKiBAcmV0dXJuIHshQXJyYXk8IUhUTUxTdHlsZUVsZW1lbnQ+fSBBcnJheSBvZiBjb250YWluZWQgc3R5bGVzXG4gKi9cbmZ1bmN0aW9uIF9zdHlsZXNGcm9tTW9kdWxlSW1wb3J0cyhtb2R1bGUpIHtcbiAgY29uc3Qgc3R5bGVzID0gW107XG4gIGNvbnN0IHAkID0gbW9kdWxlLnF1ZXJ5U2VsZWN0b3JBbGwoTU9EVUxFX1NUWUxFX0xJTktfU0VMRUNUT1IpO1xuICBmb3IgKGxldCBpPTA7IGkgPCBwJC5sZW5ndGg7IGkrKykge1xuICAgIGxldCBwID0gcCRbaV07XG4gICAgaWYgKHAuaW1wb3J0KSB7XG4gICAgICBjb25zdCBpbXBvcnREb2MgPSBwLmltcG9ydDtcbiAgICAgIGNvbnN0IHVuc2NvcGVkID0gcC5oYXNBdHRyaWJ1dGUoU0hBRFlfVU5TQ09QRURfQVRUUik7XG4gICAgICBpZiAodW5zY29wZWQgJiYgIWltcG9ydERvYy5fdW5zY29wZWRTdHlsZSkge1xuICAgICAgICBjb25zdCBzdHlsZSA9IHN0eWxlRm9ySW1wb3J0KGltcG9ydERvYyk7XG4gICAgICAgIHN0eWxlLnNldEF0dHJpYnV0ZShTSEFEWV9VTlNDT1BFRF9BVFRSLCAnJyk7XG4gICAgICAgIGltcG9ydERvYy5fdW5zY29wZWRTdHlsZSA9IHN0eWxlO1xuICAgICAgfSBlbHNlIGlmICghaW1wb3J0RG9jLl9zdHlsZSkge1xuICAgICAgICBpbXBvcnREb2MuX3N0eWxlID0gc3R5bGVGb3JJbXBvcnQoaW1wb3J0RG9jKTtcbiAgICAgIH1cbiAgICAgIHN0eWxlcy5wdXNoKHVuc2NvcGVkID8gaW1wb3J0RG9jLl91bnNjb3BlZFN0eWxlIDogaW1wb3J0RG9jLl9zdHlsZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHlsZXM7XG59XG5cbi8qKlxuICpcbiAqIFJldHVybnMgQ1NTIHRleHQgb2Ygc3R5bGVzIGluIGEgc3BhY2Utc2VwYXJhdGVkIGxpc3Qgb2YgYGRvbS1tb2R1bGVgcy5cbiAqIE5vdGU6IFRoaXMgbWV0aG9kIGlzIGRlcHJlY2F0ZWQsIHVzZSBgc3R5bGVzRnJvbU1vZHVsZXNgIGluc3RlYWQuXG4gKlxuICogQGRlcHJlY2F0ZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVJZHMgTGlzdCBvZiBkb20tbW9kdWxlIGlkJ3Mgd2l0aGluIHdoaWNoIHRvXG4gKiBzZWFyY2ggZm9yIGNzcy5cbiAqIEByZXR1cm4ge3N0cmluZ30gQ29uY2F0ZW5hdGVkIENTUyBjb250ZW50IGZyb20gc3BlY2lmaWVkIGBkb20tbW9kdWxlYHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNzc0Zyb21Nb2R1bGVzKG1vZHVsZUlkcykge1xuIGxldCBtb2R1bGVzID0gbW9kdWxlSWRzLnRyaW0oKS5zcGxpdCgvXFxzKy8pO1xuIGxldCBjc3NUZXh0ID0gJyc7XG4gZm9yIChsZXQgaT0wOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuICAgY3NzVGV4dCArPSBjc3NGcm9tTW9kdWxlKG1vZHVsZXNbaV0pO1xuIH1cbiByZXR1cm4gY3NzVGV4dDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIENTUyB0ZXh0IG9mIHN0eWxlcyBpbiBhIGdpdmVuIGBkb20tbW9kdWxlYC4gIENTUyBpbiBhIGBkb20tbW9kdWxlYFxuICogY2FuIGNvbWUgZWl0aGVyIGZyb20gYDxzdHlsZT5gcyB3aXRoaW4gdGhlIGZpcnN0IGA8dGVtcGxhdGU+YCwgb3IgZWxzZVxuICogZnJvbSBvbmUgb3IgbW9yZSBgPGxpbmsgcmVsPVwiaW1wb3J0XCIgdHlwZT1cImNzc1wiPmAgbGlua3Mgb3V0c2lkZSB0aGVcbiAqIHRlbXBsYXRlLlxuICpcbiAqIEFueSBgPHN0eWxlcz5gIHByb2Nlc3NlZCBhcmUgcmVtb3ZlZCBmcm9tIHRoZWlyIG9yaWdpbmFsIGxvY2F0aW9uLlxuICogTm90ZTogVGhpcyBtZXRob2QgaXMgZGVwcmVjYXRlZCwgdXNlIGBzdHlsZUZyb21Nb2R1bGVgIGluc3RlYWQuXG4gKlxuICogQGRlcHJlY2F0ZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVJZCBkb20tbW9kdWxlIGlkIHRvIGdhdGhlciBzdHlsZXMgZnJvbVxuICogQHJldHVybiB7c3RyaW5nfSBDb25jYXRlbmF0ZWQgQ1NTIGNvbnRlbnQgZnJvbSBzcGVjaWZpZWQgYGRvbS1tb2R1bGVgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjc3NGcm9tTW9kdWxlKG1vZHVsZUlkKSB7XG4gIGxldCBtID0gaW1wb3J0TW9kdWxlKG1vZHVsZUlkKTtcbiAgaWYgKG0gJiYgbS5fY3NzVGV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gbW9kdWxlIGltcG9ydHM6IDxsaW5rIHJlbD1cImltcG9ydFwiIHR5cGU9XCJjc3NcIj5cbiAgICBsZXQgY3NzVGV4dCA9IF9jc3NGcm9tTW9kdWxlSW1wb3J0cyhtKTtcbiAgICAvLyBpbmNsdWRlIGNzcyBmcm9tIHRoZSBmaXJzdCB0ZW1wbGF0ZSBpbiB0aGUgbW9kdWxlXG4gICAgbGV0IHQgPSAvKiogQHR5cGUgez9IVE1MVGVtcGxhdGVFbGVtZW50fSAqLyhtLnF1ZXJ5U2VsZWN0b3IoJ3RlbXBsYXRlJykpO1xuICAgIGlmICh0KSB7XG4gICAgICBjc3NUZXh0ICs9IGNzc0Zyb21UZW1wbGF0ZSh0LFxuICAgICAgICAvKiogQHR5cGUge3RlbXBsYXRlV2l0aEFzc2V0UGF0aH0gKi8obSkuYXNzZXRwYXRoKTtcbiAgICB9XG4gICAgbS5fY3NzVGV4dCA9IGNzc1RleHQgfHwgbnVsbDtcbiAgfVxuICBpZiAoIW0pIHtcbiAgICBjb25zb2xlLndhcm4oJ0NvdWxkIG5vdCBmaW5kIHN0eWxlIGRhdGEgaW4gbW9kdWxlIG5hbWVkJywgbW9kdWxlSWQpO1xuICB9XG4gIHJldHVybiBtICYmIG0uX2Nzc1RleHQgfHwgJyc7XG59XG5cbi8qKlxuICogUmV0dXJucyBDU1MgdGV4dCBvZiBgPHN0eWxlcz5gIHdpdGhpbiBhIGdpdmVuIHRlbXBsYXRlLlxuICpcbiAqIEFueSBgPHN0eWxlcz5gIHByb2Nlc3NlZCBhcmUgcmVtb3ZlZCBmcm9tIHRoZWlyIG9yaWdpbmFsIGxvY2F0aW9uLlxuICogTm90ZTogVGhpcyBtZXRob2QgaXMgZGVwcmVjYXRlZCwgdXNlIGBzdHlsZUZyb21UZW1wbGF0ZWAgaW5zdGVhZC5cbiAqXG4gKiBAZGVwcmVjYXRlZFxuICogQHBhcmFtIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGUgVGVtcGxhdGUgdG8gZ2F0aGVyIHN0eWxlcyBmcm9tXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSSSBCYXNlIFVSSSB0byByZXNvbHZlIHRoZSBVUkwgYWdhaW5zdFxuICogQHJldHVybiB7c3RyaW5nfSBDb25jYXRlbmF0ZWQgQ1NTIGNvbnRlbnQgZnJvbSBzcGVjaWZpZWQgdGVtcGxhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNzc0Zyb21UZW1wbGF0ZSh0ZW1wbGF0ZSwgYmFzZVVSSSkge1xuICBsZXQgY3NzVGV4dCA9ICcnO1xuICBjb25zdCBlJCA9IHN0eWxlc0Zyb21UZW1wbGF0ZSh0ZW1wbGF0ZSwgYmFzZVVSSSk7XG4gIC8vIGlmIGVsZW1lbnQgaXMgYSB0ZW1wbGF0ZSwgZ2V0IGNvbnRlbnQgZnJvbSBpdHMgLmNvbnRlbnRcbiAgZm9yIChsZXQgaT0wOyBpIDwgZSQubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgZSA9IGUkW2ldO1xuICAgIGlmIChlLnBhcmVudE5vZGUpIHtcbiAgICAgIGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlKTtcbiAgICB9XG4gICAgY3NzVGV4dCArPSBlLnRleHRDb250ZW50O1xuICB9XG4gIHJldHVybiBjc3NUZXh0O1xufVxuXG4vKipcbiAqIFJldHVybnMgQ1NTIHRleHQgZnJvbSBzdHlsZXNoZWV0cyBsb2FkZWQgdmlhIGA8bGluayByZWw9XCJpbXBvcnRcIiB0eXBlPVwiY3NzXCI+YFxuICogbGlua3Mgd2l0aGluIHRoZSBzcGVjaWZpZWQgYGRvbS1tb2R1bGVgLlxuICpcbiAqIE5vdGU6IFRoaXMgbWV0aG9kIGlzIGRlcHJlY2F0ZWQsIHVzZSBgc3R5bGVzRnJvbU1vZHVsZUltcG9ydHNgIGluc3RlYWQuXG4gKlxuICogQGRlcHJlY2F0ZWRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbW9kdWxlSWQgSWQgb2YgYGRvbS1tb2R1bGVgIHRvIGdhdGhlciBDU1MgZnJvbVxuICogQHJldHVybiB7c3RyaW5nfSBDb25jYXRlbmF0ZWQgQ1NTIGNvbnRlbnQgZnJvbSBsaW5rcyBpbiBzcGVjaWZpZWQgYGRvbS1tb2R1bGVgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjc3NGcm9tTW9kdWxlSW1wb3J0cyhtb2R1bGVJZCkge1xuICBsZXQgbSA9IGltcG9ydE1vZHVsZShtb2R1bGVJZCk7XG4gIHJldHVybiBtID8gX2Nzc0Zyb21Nb2R1bGVJbXBvcnRzKG0pIDogJyc7XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqIEBwYXJhbSB7IUhUTUxFbGVtZW50fSBtb2R1bGUgZG9tLW1vZHVsZSBlbGVtZW50IHRoYXQgY291bGQgY29udGFpbiBgPGxpbmsgcmVsPVwiaW1wb3J0XCIgdHlwZT1cImNzc1wiPmAgc3R5bGVzXG4gKiBAcmV0dXJuIHtzdHJpbmd9IENvbmNhdGVuYXRlZCBDU1MgY29udGVudCBmcm9tIGxpbmtzIGluIHRoZSBkb20tbW9kdWxlXG4gKi9cbmZ1bmN0aW9uIF9jc3NGcm9tTW9kdWxlSW1wb3J0cyhtb2R1bGUpIHtcbiAgbGV0IGNzc1RleHQgPSAnJztcbiAgbGV0IHN0eWxlcyA9IF9zdHlsZXNGcm9tTW9kdWxlSW1wb3J0cyhtb2R1bGUpO1xuICBmb3IgKGxldCBpPTA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjc3NUZXh0ICs9IHN0eWxlc1tpXS50ZXh0Q29udGVudDtcbiAgfVxuICByZXR1cm4gY3NzVGV4dDtcbn1cbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgJ0B3ZWJjb21wb25lbnRzL3NoYWR5Y3NzL2VudHJ5cG9pbnRzL2N1c3RvbS1zdHlsZS1pbnRlcmZhY2UuanMnO1xuXG5pbXBvcnQgeyBjc3NGcm9tTW9kdWxlcyB9IGZyb20gJy4uL3V0aWxzL3N0eWxlLWdhdGhlci5qcyc7XG5cbmNvbnN0IGF0dHIgPSAnaW5jbHVkZSc7XG5cbmNvbnN0IEN1c3RvbVN0eWxlSW50ZXJmYWNlID0gd2luZG93LlNoYWR5Q1NTLkN1c3RvbVN0eWxlSW50ZXJmYWNlO1xuXG4vKipcbiAqIEN1c3RvbSBlbGVtZW50IGZvciBkZWZpbmluZyBzdHlsZXMgaW4gdGhlIG1haW4gZG9jdW1lbnQgdGhhdCBjYW4gdGFrZVxuICogYWR2YW50YWdlIG9mIFtzaGFkeSBET01dKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJjb21wb25lbnRzL3NoYWR5Y3NzKSBzaGltc1xuICogZm9yIHN0eWxlIGVuY2Fwc3VsYXRpb24sIGN1c3RvbSBwcm9wZXJ0aWVzLCBhbmQgY3VzdG9tIG1peGlucy5cbiAqXG4gKiAtIERvY3VtZW50IHN0eWxlcyBkZWZpbmVkIGluIGEgYDxjdXN0b20tc3R5bGU+YCBhcmUgc2hpbW1lZCB0byBlbnN1cmUgdGhleVxuICogICBkbyBub3QgbGVhayBpbnRvIGxvY2FsIERPTSB3aGVuIHJ1bm5pbmcgb24gYnJvd3NlcnMgd2l0aG91dCBuYXRpdmVcbiAqICAgU2hhZG93IERPTS5cbiAqIC0gQ3VzdG9tIHByb3BlcnRpZXMgY2FuIGJlIGRlZmluZWQgaW4gYSBgPGN1c3RvbS1zdHlsZT5gLiBVc2UgdGhlIGBodG1sYCBzZWxlY3RvclxuICogICB0byBkZWZpbmUgY3VzdG9tIHByb3BlcnRpZXMgdGhhdCBhcHBseSB0byBhbGwgY3VzdG9tIGVsZW1lbnRzLlxuICogLSBDdXN0b20gbWl4aW5zIGNhbiBiZSBkZWZpbmVkIGluIGEgYDxjdXN0b20tc3R5bGU+YCwgaWYgeW91IGltcG9ydCB0aGUgb3B0aW9uYWxcbiAqICAgW2FwcGx5IHNoaW1dKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJjb21wb25lbnRzL3NoYWR5Y3NzI2Fib3V0LWFwcGx5c2hpbSlcbiAqICAgKGBzaGFkeWNzcy9hcHBseS1zaGltLmh0bWxgKS5cbiAqXG4gKiBUbyB1c2U6XG4gKlxuICogLSBJbXBvcnQgYGN1c3RvbS1zdHlsZS5odG1sYC5cbiAqIC0gUGxhY2UgYSBgPGN1c3RvbS1zdHlsZT5gIGVsZW1lbnQgaW4gdGhlIG1haW4gZG9jdW1lbnQsIHdyYXBwaW5nIGFuIGlubGluZSBgPHN0eWxlPmAgdGFnIHRoYXRcbiAqICAgY29udGFpbnMgdGhlIENTUyBydWxlcyB5b3Ugd2FudCB0byBzaGltLlxuICpcbiAqIEZvciBleGFtcGxlOlxuICpcbiAqIGBgYGh0bWxcbiAqIDwhLS0gaW1wb3J0IGFwcGx5IHNoaW0tLW9ubHkgcmVxdWlyZWQgaWYgdXNpbmcgbWl4aW5zIC0tPlxuICogPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cImJvd2VyX2NvbXBvbmVudHMvc2hhZHljc3MvYXBwbHktc2hpbS5odG1sXCI+XG4gKiA8IS0tIGltcG9ydCBjdXN0b20tc3R5bGUgZWxlbWVudCAtLT5cbiAqIDxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCJib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL2VsZW1lbnRzL2N1c3RvbS1zdHlsZS5odG1sXCI+XG4gKlxuICogPGN1c3RvbS1zdHlsZT5cbiAqICAgPHN0eWxlPlxuICogICAgIGh0bWwge1xuICogICAgICAgLS1jdXN0b20tY29sb3I6IGJsdWU7XG4gKiAgICAgICAtLWN1c3RvbS1taXhpbjoge1xuICogICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAqICAgICAgICAgY29sb3I6IHJlZDtcbiAqICAgICAgIH07XG4gKiAgICAgfVxuICogICA8L3N0eWxlPlxuICogPC9jdXN0b20tc3R5bGU+XG4gKiBgYGBcbiAqXG4gKiBAY3VzdG9tRWxlbWVudFxuICogQGV4dGVuZHMgSFRNTEVsZW1lbnRcbiAqIEBzdW1tYXJ5IEN1c3RvbSBlbGVtZW50IGZvciBkZWZpbmluZyBzdHlsZXMgaW4gdGhlIG1haW4gZG9jdW1lbnQgdGhhdCBjYW5cbiAqICAgdGFrZSBhZHZhbnRhZ2Ugb2YgUG9seW1lcidzIHN0eWxlIHNjb3BpbmcgYW5kIGN1c3RvbSBwcm9wZXJ0aWVzIHNoaW1zLlxuICovXG5leHBvcnQgY2xhc3MgQ3VzdG9tU3R5bGUgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc3R5bGUgPSBudWxsO1xuICAgIEN1c3RvbVN0eWxlSW50ZXJmYWNlLmFkZEN1c3RvbVN0eWxlKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBsaWdodC1ET00gYDxzdHlsZT5gIGNoaWxkIHRoaXMgZWxlbWVudCB3cmFwcy4gIFVwb24gZmlyc3RcbiAgICogY2FsbCBhbnkgc3R5bGUgbW9kdWxlcyByZWZlcmVuY2VkIHZpYSB0aGUgYGluY2x1ZGVgIGF0dHJpYnV0ZSB3aWxsIGJlXG4gICAqIGNvbmNhdGVuYXRlZCB0byB0aGlzIGVsZW1lbnQncyBgPHN0eWxlPmAuXG4gICAqXG4gICAqIEBleHBvcnRcbiAgICogQHJldHVybiB7SFRNTFN0eWxlRWxlbWVudH0gVGhpcyBlbGVtZW50J3MgbGlnaHQtRE9NIGA8c3R5bGU+YFxuICAgKi9cbiAgZ2V0U3R5bGUoKSB7XG4gICAgaWYgKHRoaXMuX3N0eWxlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc3R5bGU7XG4gICAgfVxuICAgIGNvbnN0IHN0eWxlID0gLyoqIEB0eXBlIHtIVE1MU3R5bGVFbGVtZW50fSAqLyh0aGlzLnF1ZXJ5U2VsZWN0b3IoJ3N0eWxlJykpO1xuICAgIGlmICghc3R5bGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB0aGlzLl9zdHlsZSA9IHN0eWxlO1xuICAgIGNvbnN0IGluY2x1ZGUgPSBzdHlsZS5nZXRBdHRyaWJ1dGUoYXR0cik7XG4gICAgaWYgKGluY2x1ZGUpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZShhdHRyKTtcbiAgICAgIC8qKiBAc3VwcHJlc3Mge2RlcHJlY2F0ZWR9ICovXG4gICAgICBzdHlsZS50ZXh0Q29udGVudCA9IGNzc0Zyb21Nb2R1bGVzKGluY2x1ZGUpICsgc3R5bGUudGV4dENvbnRlbnQ7XG4gICAgfVxuICAgIC8qXG4gICAgSFRNTCBJbXBvcnRzIHN0eWxpbmcgdGhlIG1haW4gZG9jdW1lbnQgYXJlIGRlcHJlY2F0ZWQgaW4gQ2hyb21lXG4gICAgaHR0cHM6Ly9jcmJ1Zy5jb20vNTIzOTUyXG5cbiAgICBJZiB0aGlzIGVsZW1lbnQgaXMgbm90IGluIHRoZSBtYWluIGRvY3VtZW50LCB0aGVuIGl0IG11c3QgYmUgaW4gYW4gSFRNTCBJbXBvcnQgZG9jdW1lbnQuXG4gICAgSW4gdGhhdCBjYXNlLCBtb3ZlIHRoZSBjdXN0b20gc3R5bGUgdG8gdGhlIG1haW4gZG9jdW1lbnQuXG5cbiAgICBUaGUgb3JkZXJpbmcgb2YgYDxjdXN0b20tc3R5bGU+YCBzaG91bGQgc3RheSB0aGUgc2FtZSBhcyB3aGVuIGxvYWRlZCBieSBIVE1MIEltcG9ydHMsIGJ1dCB0aGVyZSBtYXkgYmUgb2RkXG4gICAgY2FzZXMgb2Ygb3JkZXJpbmcgdy5yLnQgdGhlIG1haW4gZG9jdW1lbnQgc3R5bGVzLlxuICAgICovXG4gICAgaWYgKHRoaXMub3duZXJEb2N1bWVudCAhPT0gd2luZG93LmRvY3VtZW50KSB7XG4gICAgICB3aW5kb3cuZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3N0eWxlO1xuICB9XG59XG5cbndpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ2N1c3RvbS1zdHlsZScsIEN1c3RvbVN0eWxlKTtcbiIsImltcG9ydCAnLi92ZXJzaW9uLmpzJztcbmltcG9ydCAnQHBvbHltZXIvcG9seW1lci9saWIvZWxlbWVudHMvY3VzdG9tLXN0eWxlLmpzJztcbmltcG9ydCAnQHBvbHltZXIvcG9seW1lci9saWIvZWxlbWVudHMvZG9tLW1vZHVsZS5qcyc7XG5jb25zdCAkX2RvY3VtZW50Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcblxuJF9kb2N1bWVudENvbnRhaW5lci5pbm5lckhUTUwgPSBgPGN1c3RvbS1zdHlsZT5cbiAgPHN0eWxlPlxuICAgIGh0bWwge1xuICAgICAgLyogQmFzZSAoYmFja2dyb3VuZCkgKi9cbiAgICAgIC0tbHVtby1iYXNlLWNvbG9yOiAjRkZGO1xuXG4gICAgICAvKiBUaW50ICovXG4gICAgICAtLWx1bW8tdGludC01cGN0OiBoc2xhKDAsIDAlLCAxMDAlLCAwLjMpO1xuICAgICAgLS1sdW1vLXRpbnQtMTBwY3Q6IGhzbGEoMCwgMCUsIDEwMCUsIDAuMzcpO1xuICAgICAgLS1sdW1vLXRpbnQtMjBwY3Q6IGhzbGEoMCwgMCUsIDEwMCUsIDAuNDQpO1xuICAgICAgLS1sdW1vLXRpbnQtMzBwY3Q6IGhzbGEoMCwgMCUsIDEwMCUsIDAuNSk7XG4gICAgICAtLWx1bW8tdGludC00MHBjdDogaHNsYSgwLCAwJSwgMTAwJSwgMC41Nyk7XG4gICAgICAtLWx1bW8tdGludC01MHBjdDogaHNsYSgwLCAwJSwgMTAwJSwgMC42NCk7XG4gICAgICAtLWx1bW8tdGludC02MHBjdDogaHNsYSgwLCAwJSwgMTAwJSwgMC43KTtcbiAgICAgIC0tbHVtby10aW50LTcwcGN0OiBoc2xhKDAsIDAlLCAxMDAlLCAwLjc3KTtcbiAgICAgIC0tbHVtby10aW50LTgwcGN0OiBoc2xhKDAsIDAlLCAxMDAlLCAwLjg0KTtcbiAgICAgIC0tbHVtby10aW50LTkwcGN0OiBoc2xhKDAsIDAlLCAxMDAlLCAwLjkpO1xuICAgICAgLS1sdW1vLXRpbnQ6ICNGRkY7XG5cbiAgICAgIC8qIFNoYWRlICovXG4gICAgICAtLWx1bW8tc2hhZGUtNXBjdDogaHNsYSgyMTQsIDYxJSwgMjUlLCAwLjA1KTtcbiAgICAgIC0tbHVtby1zaGFkZS0xMHBjdDogaHNsYSgyMTQsIDU3JSwgMjQlLCAwLjEpO1xuICAgICAgLS1sdW1vLXNoYWRlLTIwcGN0OiBoc2xhKDIxNCwgNTMlLCAyMyUsIDAuMTYpO1xuICAgICAgLS1sdW1vLXNoYWRlLTMwcGN0OiBoc2xhKDIxNCwgNTAlLCAyMiUsIDAuMjYpO1xuICAgICAgLS1sdW1vLXNoYWRlLTQwcGN0OiBoc2xhKDIxNCwgNDclLCAyMSUsIDAuMzgpO1xuICAgICAgLS1sdW1vLXNoYWRlLTUwcGN0OiBoc2xhKDIxNCwgNDUlLCAyMCUsIDAuNSk7XG4gICAgICAtLWx1bW8tc2hhZGUtNjBwY3Q6IGhzbGEoMjE0LCA0MyUsIDE5JSwgMC42MSk7XG4gICAgICAtLWx1bW8tc2hhZGUtNzBwY3Q6IGhzbGEoMjE0LCA0MiUsIDE4JSwgMC43Mik7XG4gICAgICAtLWx1bW8tc2hhZGUtODBwY3Q6IGhzbGEoMjE0LCA0MSUsIDE3JSwgMC44Myk7XG4gICAgICAtLWx1bW8tc2hhZGUtOTBwY3Q6IGhzbGEoMjE0LCA0MCUsIDE2JSwgMC45NCk7XG4gICAgICAtLWx1bW8tc2hhZGU6IGhzbCgyMTQsIDM1JSwgMTUlKTtcblxuICAgICAgLyogQ29udHJhc3QgKi9cbiAgICAgIC0tbHVtby1jb250cmFzdC01cGN0OiB2YXIoLS1sdW1vLXNoYWRlLTVwY3QpO1xuICAgICAgLS1sdW1vLWNvbnRyYXN0LTEwcGN0OiB2YXIoLS1sdW1vLXNoYWRlLTEwcGN0KTtcbiAgICAgIC0tbHVtby1jb250cmFzdC0yMHBjdDogdmFyKC0tbHVtby1zaGFkZS0yMHBjdCk7XG4gICAgICAtLWx1bW8tY29udHJhc3QtMzBwY3Q6IHZhcigtLWx1bW8tc2hhZGUtMzBwY3QpO1xuICAgICAgLS1sdW1vLWNvbnRyYXN0LTQwcGN0OiB2YXIoLS1sdW1vLXNoYWRlLTQwcGN0KTtcbiAgICAgIC0tbHVtby1jb250cmFzdC01MHBjdDogdmFyKC0tbHVtby1zaGFkZS01MHBjdCk7XG4gICAgICAtLWx1bW8tY29udHJhc3QtNjBwY3Q6IHZhcigtLWx1bW8tc2hhZGUtNjBwY3QpO1xuICAgICAgLS1sdW1vLWNvbnRyYXN0LTcwcGN0OiB2YXIoLS1sdW1vLXNoYWRlLTcwcGN0KTtcbiAgICAgIC0tbHVtby1jb250cmFzdC04MHBjdDogdmFyKC0tbHVtby1zaGFkZS04MHBjdCk7XG4gICAgICAtLWx1bW8tY29udHJhc3QtOTBwY3Q6IHZhcigtLWx1bW8tc2hhZGUtOTBwY3QpO1xuICAgICAgLS1sdW1vLWNvbnRyYXN0OiB2YXIoLS1sdW1vLXNoYWRlKTtcblxuICAgICAgLyogVGV4dCAqL1xuICAgICAgLS1sdW1vLWhlYWRlci10ZXh0LWNvbG9yOiB2YXIoLS1sdW1vLWNvbnRyYXN0KTtcbiAgICAgIC0tbHVtby1ib2R5LXRleHQtY29sb3I6IHZhcigtLWx1bW8tY29udHJhc3QtOTBwY3QpO1xuICAgICAgLS1sdW1vLXNlY29uZGFyeS10ZXh0LWNvbG9yOiB2YXIoLS1sdW1vLWNvbnRyYXN0LTcwcGN0KTtcbiAgICAgIC0tbHVtby10ZXJ0aWFyeS10ZXh0LWNvbG9yOiB2YXIoLS1sdW1vLWNvbnRyYXN0LTUwcGN0KTtcbiAgICAgIC0tbHVtby1kaXNhYmxlZC10ZXh0LWNvbG9yOiB2YXIoLS1sdW1vLWNvbnRyYXN0LTMwcGN0KTtcblxuICAgICAgLyogUHJpbWFyeSAqL1xuICAgICAgLS1sdW1vLXByaW1hcnktY29sb3I6IGhzbCgyMTQsIDkwJSwgNTIlKTtcbiAgICAgIC0tbHVtby1wcmltYXJ5LWNvbG9yLTUwcGN0OiBoc2xhKDIxNCwgOTAlLCA1MiUsIDAuNSk7XG4gICAgICAtLWx1bW8tcHJpbWFyeS1jb2xvci0xMHBjdDogaHNsYSgyMTQsIDkwJSwgNTIlLCAwLjEpO1xuICAgICAgLS1sdW1vLXByaW1hcnktdGV4dC1jb2xvcjogdmFyKC0tbHVtby1wcmltYXJ5LWNvbG9yKTtcbiAgICAgIC0tbHVtby1wcmltYXJ5LWNvbnRyYXN0LWNvbG9yOiAjRkZGO1xuXG4gICAgICAvKiBFcnJvciAqL1xuICAgICAgLS1sdW1vLWVycm9yLWNvbG9yOiBoc2woMywgMTAwJSwgNjElKTtcbiAgICAgIC0tbHVtby1lcnJvci1jb2xvci01MHBjdDogaHNsYSgzLCAxMDAlLCA2MCUsIDAuNSk7XG4gICAgICAtLWx1bW8tZXJyb3ItY29sb3ItMTBwY3Q6IGhzbGEoMywgMTAwJSwgNjAlLCAwLjEpO1xuICAgICAgLS1sdW1vLWVycm9yLXRleHQtY29sb3I6IGhzbCgzLCA5MiUsIDUzJSk7XG4gICAgICAtLWx1bW8tZXJyb3ItY29udHJhc3QtY29sb3I6ICNGRkY7XG5cbiAgICAgIC8qIFN1Y2Nlc3MgKi9cbiAgICAgIC0tbHVtby1zdWNjZXNzLWNvbG9yOiBoc2woMTQ1LCA4MCUsIDQyJSk7IC8qIGhzbCgxNDQsODIlLDM3JSk7ICovXG4gICAgICAtLWx1bW8tc3VjY2Vzcy1jb2xvci01MHBjdDogaHNsYSgxNDUsIDc2JSwgNDQlLCAwLjU1KTtcbiAgICAgIC0tbHVtby1zdWNjZXNzLWNvbG9yLTEwcGN0OiBoc2xhKDE0NSwgNzYlLCA0NCUsIDAuMTIpO1xuICAgICAgLS1sdW1vLXN1Y2Nlc3MtdGV4dC1jb2xvcjogaHNsKDE0NSwgMTAwJSwgMzIlKTtcbiAgICAgIC0tbHVtby1zdWNjZXNzLWNvbnRyYXN0LWNvbG9yOiAjRkZGO1xuICAgIH1cbiAgPC9zdHlsZT5cbjwvY3VzdG9tLXN0eWxlPjxkb20tbW9kdWxlIGlkPVwibHVtby1jb2xvclwiPlxuICA8dGVtcGxhdGU+XG4gICAgPHN0eWxlPlxuICAgICAgW3RoZW1lfj1cImRhcmtcIl0ge1xuICAgICAgICAvKiBCYXNlIChiYWNrZ3JvdW5kKSAqL1xuICAgICAgICAtLWx1bW8tYmFzZS1jb2xvcjogaHNsKDIxNCwgMzUlLCAyMSUpO1xuXG4gICAgICAgIC8qIFRpbnQgKi9cbiAgICAgICAgLS1sdW1vLXRpbnQtNXBjdDogaHNsYSgyMTQsIDY1JSwgODUlLCAwLjA2KTtcbiAgICAgICAgLS1sdW1vLXRpbnQtMTBwY3Q6IGhzbGEoMjE0LCA2MCUsIDgwJSwgMC4xNCk7XG4gICAgICAgIC0tbHVtby10aW50LTIwcGN0OiBoc2xhKDIxNCwgNjQlLCA4MiUsIDAuMjMpO1xuICAgICAgICAtLWx1bW8tdGludC0zMHBjdDogaHNsYSgyMTQsIDY5JSwgODQlLCAwLjMyKTtcbiAgICAgICAgLS1sdW1vLXRpbnQtNDBwY3Q6IGhzbGEoMjE0LCA3MyUsIDg2JSwgMC40MSk7XG4gICAgICAgIC0tbHVtby10aW50LTUwcGN0OiBoc2xhKDIxNCwgNzglLCA4OCUsIDAuNSk7XG4gICAgICAgIC0tbHVtby10aW50LTYwcGN0OiBoc2xhKDIxNCwgODIlLCA5MCUsIDAuNik7XG4gICAgICAgIC0tbHVtby10aW50LTcwcGN0OiBoc2xhKDIxNCwgODclLCA5MiUsIDAuNyk7XG4gICAgICAgIC0tbHVtby10aW50LTgwcGN0OiBoc2xhKDIxNCwgOTElLCA5NCUsIDAuOCk7XG4gICAgICAgIC0tbHVtby10aW50LTkwcGN0OiBoc2xhKDIxNCwgOTYlLCA5NiUsIDAuOSk7XG4gICAgICAgIC0tbHVtby10aW50OiBoc2woMjE0LCAxMDAlLCA5OCUpO1xuXG4gICAgICAgIC8qIFNoYWRlICovXG4gICAgICAgIC0tbHVtby1zaGFkZS01cGN0OiBoc2xhKDIxNCwgMCUsIDAlLCAwLjA3KTtcbiAgICAgICAgLS1sdW1vLXNoYWRlLTEwcGN0OiBoc2xhKDIxNCwgNCUsIDIlLCAwLjE1KTtcbiAgICAgICAgLS1sdW1vLXNoYWRlLTIwcGN0OiBoc2xhKDIxNCwgOCUsIDQlLCAwLjIzKTtcbiAgICAgICAgLS1sdW1vLXNoYWRlLTMwcGN0OiBoc2xhKDIxNCwgMTIlLCA2JSwgMC4zMik7XG4gICAgICAgIC0tbHVtby1zaGFkZS00MHBjdDogaHNsYSgyMTQsIDE2JSwgOCUsIDAuNDEpO1xuICAgICAgICAtLWx1bW8tc2hhZGUtNTBwY3Q6IGhzbGEoMjE0LCAyMCUsIDEwJSwgMC41KTtcbiAgICAgICAgLS1sdW1vLXNoYWRlLTYwcGN0OiBoc2xhKDIxNCwgMjQlLCAxMiUsIDAuNik7XG4gICAgICAgIC0tbHVtby1zaGFkZS03MHBjdDogaHNsYSgyMTQsIDI4JSwgMTMlLCAwLjcpO1xuICAgICAgICAtLWx1bW8tc2hhZGUtODBwY3Q6IGhzbGEoMjE0LCAzMiUsIDEzJSwgMC44KTtcbiAgICAgICAgLS1sdW1vLXNoYWRlLTkwcGN0OiBoc2xhKDIxNCwgMzMlLCAxMyUsIDAuOSk7XG4gICAgICAgIC0tbHVtby1zaGFkZTogaHNsKDIxNCwgMzMlLCAxMyUpO1xuXG4gICAgICAgIC8qIENvbnRyYXN0ICovXG4gICAgICAgIC0tbHVtby1jb250cmFzdC01cGN0OiB2YXIoLS1sdW1vLXRpbnQtNXBjdCk7XG4gICAgICAgIC0tbHVtby1jb250cmFzdC0xMHBjdDogdmFyKC0tbHVtby10aW50LTEwcGN0KTtcbiAgICAgICAgLS1sdW1vLWNvbnRyYXN0LTIwcGN0OiB2YXIoLS1sdW1vLXRpbnQtMjBwY3QpO1xuICAgICAgICAtLWx1bW8tY29udHJhc3QtMzBwY3Q6IHZhcigtLWx1bW8tdGludC0zMHBjdCk7XG4gICAgICAgIC0tbHVtby1jb250cmFzdC00MHBjdDogdmFyKC0tbHVtby10aW50LTQwcGN0KTtcbiAgICAgICAgLS1sdW1vLWNvbnRyYXN0LTUwcGN0OiB2YXIoLS1sdW1vLXRpbnQtNTBwY3QpO1xuICAgICAgICAtLWx1bW8tY29udHJhc3QtNjBwY3Q6IHZhcigtLWx1bW8tdGludC02MHBjdCk7XG4gICAgICAgIC0tbHVtby1jb250cmFzdC03MHBjdDogdmFyKC0tbHVtby10aW50LTcwcGN0KTtcbiAgICAgICAgLS1sdW1vLWNvbnRyYXN0LTgwcGN0OiB2YXIoLS1sdW1vLXRpbnQtODBwY3QpO1xuICAgICAgICAtLWx1bW8tY29udHJhc3QtOTBwY3Q6IHZhcigtLWx1bW8tdGludC05MHBjdCk7XG4gICAgICAgIC0tbHVtby1jb250cmFzdDogdmFyKC0tbHVtby10aW50KTtcblxuICAgICAgICAvKiBUZXh0ICovXG4gICAgICAgIC0tbHVtby1oZWFkZXItdGV4dC1jb2xvcjogdmFyKC0tbHVtby1jb250cmFzdCk7XG4gICAgICAgIC0tbHVtby1ib2R5LXRleHQtY29sb3I6IHZhcigtLWx1bW8tY29udHJhc3QtOTBwY3QpO1xuICAgICAgICAtLWx1bW8tc2Vjb25kYXJ5LXRleHQtY29sb3I6IHZhcigtLWx1bW8tY29udHJhc3QtNzBwY3QpO1xuICAgICAgICAtLWx1bW8tdGVydGlhcnktdGV4dC1jb2xvcjogdmFyKC0tbHVtby1jb250cmFzdC01MHBjdCk7XG4gICAgICAgIC0tbHVtby1kaXNhYmxlZC10ZXh0LWNvbG9yOiB2YXIoLS1sdW1vLWNvbnRyYXN0LTMwcGN0KTtcblxuICAgICAgICAvKiBQcmltYXJ5ICovXG4gICAgICAgIC0tbHVtby1wcmltYXJ5LWNvbG9yOiBoc2woMjE0LCA4NiUsIDU1JSk7XG4gICAgICAgIC0tbHVtby1wcmltYXJ5LWNvbG9yLTUwcGN0OiBoc2xhKDIxNCwgODYlLCA1NSUsIDAuNSk7XG4gICAgICAgIC0tbHVtby1wcmltYXJ5LWNvbG9yLTEwcGN0OiBoc2xhKDIxNCwgOTAlLCA2MyUsIDAuMSk7XG4gICAgICAgIC0tbHVtby1wcmltYXJ5LXRleHQtY29sb3I6IGhzbCgyMTQsIDEwMCUsIDcwJSk7XG4gICAgICAgIC0tbHVtby1wcmltYXJ5LWNvbnRyYXN0LWNvbG9yOiAjRkZGO1xuXG4gICAgICAgIC8qIEVycm9yICovXG4gICAgICAgIC0tbHVtby1lcnJvci1jb2xvcjogaHNsKDMsIDkwJSwgNjMlKTtcbiAgICAgICAgLS1sdW1vLWVycm9yLWNvbG9yLTUwcGN0OiBoc2xhKDMsIDkwJSwgNjMlLCAwLjUpO1xuICAgICAgICAtLWx1bW8tZXJyb3ItY29sb3ItMTBwY3Q6IGhzbGEoMywgOTAlLCA2MyUsIDAuMSk7XG4gICAgICAgIC0tbHVtby1lcnJvci10ZXh0LWNvbG9yOiBoc2woMywgMTAwJSwgNjclKTtcblxuICAgICAgICAvKiBTdWNjZXNzICovXG4gICAgICAgIC0tbHVtby1zdWNjZXNzLWNvbG9yOiBoc2woMTQ1LCA2NSUsIDQyJSk7XG4gICAgICAgIC0tbHVtby1zdWNjZXNzLWNvbG9yLTUwcGN0OiBoc2xhKDE0NSwgNjUlLCA0MiUsIDAuNSk7XG4gICAgICAgIC0tbHVtby1zdWNjZXNzLWNvbG9yLTEwcGN0OiBoc2xhKDE0NSwgNjUlLCA0MiUsIDAuMSk7XG4gICAgICAgIC0tbHVtby1zdWNjZXNzLXRleHQtY29sb3I6IGhzbCgxNDUsIDg1JSwgNDclKTtcbiAgICAgIH1cblxuICAgICAgaHRtbCB7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1sdW1vLWJvZHktdGV4dC1jb2xvcik7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWx1bW8tYmFzZS1jb2xvcik7XG4gICAgICB9XG5cbiAgICAgIFt0aGVtZX49XCJkYXJrXCJdIHtcbiAgICAgICAgY29sb3I6IHZhcigtLWx1bW8tYm9keS10ZXh0LWNvbG9yKTtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbHVtby1iYXNlLWNvbG9yKTtcbiAgICAgIH1cblxuICAgICAgaDEsXG4gICAgICBoMixcbiAgICAgIGgzLFxuICAgICAgaDQsXG4gICAgICBoNSxcbiAgICAgIGg2IHtcbiAgICAgICAgY29sb3I6IHZhcigtLWx1bW8taGVhZGVyLXRleHQtY29sb3IpO1xuICAgICAgfVxuXG4gICAgICBhIHtcbiAgICAgICAgY29sb3I6IHZhcigtLWx1bW8tcHJpbWFyeS10ZXh0LWNvbG9yKTtcbiAgICAgIH1cblxuICAgICAgYmxvY2txdW90ZSB7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1sdW1vLXNlY29uZGFyeS10ZXh0LWNvbG9yKTtcbiAgICAgIH1cblxuICAgICAgY29kZSxcbiAgICAgIHByZSB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWx1bW8tY29udHJhc3QtMTBwY3QpO1xuICAgICAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1sdW1vLWJvcmRlci1yYWRpdXMtbSk7XG4gICAgICB9XG4gICAgPC9zdHlsZT5cbiAgPC90ZW1wbGF0ZT5cbjwvZG9tLW1vZHVsZT48ZG9tLW1vZHVsZSBpZD1cImx1bW8tY29sb3ItbGVnYWN5XCI+XG4gIDx0ZW1wbGF0ZT5cbiAgICA8c3R5bGUgaW5jbHVkZT1cImx1bW8tY29sb3JcIj5cbiAgICAgIDpob3N0IHtcbiAgICAgICAgY29sb3I6IHZhcigtLWx1bW8tYm9keS10ZXh0LWNvbG9yKSAhaW1wb3J0YW50O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1sdW1vLWJhc2UtY29sb3IpICFpbXBvcnRhbnQ7XG4gICAgICB9XG4gICAgPC9zdHlsZT5cbiAgPC90ZW1wbGF0ZT5cbjwvZG9tLW1vZHVsZT5gO1xuXG5kb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCRfZG9jdW1lbnRDb250YWluZXIuY29udGVudCk7XG5cbi8qIE9ubHkgbmVlZGVkIGZvciBJRTExIHdoZW4geW91IHdhbnQgdG8gdXNlIHRoZSBkYXJrIHBhbGV0dGUgaW5zaWRlIHRoZSBsaWdodCBwYWxldHRlICovXG4vKlxuICBGSVhNRShwb2x5bWVyLW1vZHVsaXplcik6IHRoZSBhYm92ZSBjb21tZW50cyB3ZXJlIGV4dHJhY3RlZFxuICBmcm9tIEhUTUwgYW5kIG1heSBiZSBvdXQgb2YgcGxhY2UgaGVyZS4gUmV2aWV3IHRoZW0gYW5kXG4gIHRoZW4gZGVsZXRlIHRoaXMgY29tbWVudCFcbiovXG47XG4iLCJpbXBvcnQgJ0Bwb2x5bWVyL3BvbHltZXIvbGliL2VsZW1lbnRzL2N1c3RvbS1zdHlsZS5qcyc7XG5pbXBvcnQgJy4vdmVyc2lvbi5qcyc7XG5jb25zdCAkX2RvY3VtZW50Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcblxuJF9kb2N1bWVudENvbnRhaW5lci5pbm5lckhUTUwgPSBgPGN1c3RvbS1zdHlsZT5cbiAgPHN0eWxlPlxuICAgIEBmb250LWZhY2Uge1xuICAgICAgZm9udC1mYW1pbHk6ICdsdW1vLWljb25zJztcbiAgICAgIHNyYzogdXJsKGRhdGE6YXBwbGljYXRpb24vZm9udC13b2ZmO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGQwOUdSZ0FCQUFBQUFCRWdBQXNBQUFBQUlpd0FBUUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFCSFUxVkNBQUFCQ0FBQUFEc0FBQUJVSUlzbGVrOVRMeklBQUFGRUFBQUFRd0FBQUZaQUlVdUtZMjFoY0FBQUFZZ0FBQUQ0QUFBRHJzQ1U4ZDVuYkhsbUFBQUNnQUFBQzJNQUFCZDRoOVRvMldobFlXUUFBQTNrQUFBQU1RQUFBRFlTbkNrdWFHaGxZUUFBRGhnQUFBQWRBQUFBSkFicEEzNW9iWFI0QUFBT09BQUFBQkFBQUFDc3BCQUFBR3h2WTJFQUFBNUlBQUFBV0FBQUFGaDU1SUFzYldGNGNBQUFEcUFBQUFBZkFBQUFJQUZLQVhCdVlXMWxBQUFPd0FBQUFURUFBQUl1VVVKWkNIQnZjM1FBQUEvMEFBQUJLd0FBQWVsbThTelZlSnhqWUdSZ1lPQmlNR0N3WTJCeWNmTUpZZURMU1N6Slk1QmlZR0dBQUpBOE1wc3hKek05a1lFRHhnUEtzWUJwRGlCbWc0Z0NBQ1k3QlVnQWVKeGpZR1MreURpQmdaV0JnYW1LYVE4REEwTVBoR1o4d0dESXlBUVVaV0JsWnNBS0F0SmNVeGdjWGpHKzBtSU8rcC9GRU1VY3hEQU5LTXdJa2dNQUJuOE1MUUI0bk8zU1dXNkRNQUJGMFV0d0NFbklQTS96aExLOExxaGZYUnliU1AxNFhVWXRIVjloR1lRd1FCTklvM2NVSVBraFFlTTdyaWIxZWtxblhnOTgxWHVDMXF2eTg0bHpvamxlaDNwdXhMMGhQakdqUlU0NzN0ZWxvRWVmQVVOR2pKa3daY2FjQlV0V3JObXdaY2VlQTBkT25MbHc1Y2FkQjA5ZWxQR2hHZitqME5USS82NUtmWGVyVDZKaHFLbnBSS3RnT3B1cWFUcnRLalBVbHFIbWh0bzIxSTdwTDZpNmhscVkzcTdxR1dyZlVBZUdPalRVa2FHT0RYVmlxRk5EblJucTNGQVhocm8wMUpXaHJnMTFZNmhiUTkwWjZ0NVFENFo2Tk5TVG9aNE45V0tvVjBPOUdlcmRVQitHK2pUVWw2R1dSdmtMMjRCa0VYaWN0Vmg5YkZ2VkZiL254dmJ6KzdSZi9ONnpIY2QyYkNmUCtXZ2MxWjlOMGpwTm5FTDZrYlJWUzZIQTJoUVlHaDlUR1IxQ2JDcWEyclhyV09rUUUvc0hOSmdtdFp2b1ZOWnFFMUIxRE5IeHpUUXhDZWhVVFlpSlRReUVOdWkwcVNMZXpyM1BkdXlRZmdtUldPZmRlOCs5NTUxejdybm4vTzRqTG9KL2JSUDBVYUtRTUxGSmpwQkF2cGhMWkMzRGswb2s3V0J6UjIvdXBKczdSeXcvbmZGYmxuL3V1Ti9hcEN2d3JLTHJTdlVxUnVmYm01cG4wZnMwdzRnWXhuR1ZQNnFIbk80YldpRFFHUWd3dFM2bG0zbEIzUW9YMU0ydndFbXV6aXJGMzl5K0VzMitESjhkMXBreXFCSXFvemUzRDErWno0RHJGb2F6eEk4ZFd3TXJEbFoyRE1xUUFSOUFST3NKVSsyY21sVFBhelRjbzUyRjF4VGEyYTIrSzh2dnE5MmRWSG10TG9QZVFYL0FaUFJZR3RoRFlPZVpqQmpLb0ZzVkd1bFIzbFdVOTVXZUNLNDRxSFU3TWhXVUdVS1pEVDNvS1VjRzJHV3VoK0VERGZVWUEvamhBaGwwVE9zSk5ZU0V1N21RbWkzVXpmWHdaS0E0QnNWc0hMWFFZR2dSVzk1dUV0cEoxVmZuOVhpTHJpUkJsRkVxeHNEakEwOXlDTlVvUXh4d2Q3S1dTVHQyeTNHVEtpZmxxSFJTb1daYzNtMTFXYS9mSmRGZ1hENHNTWWZsZUpCS2Q4R016N0o4ZFpuL2NHUkNjS0dEbkEyR2UzZkt6Y3ZsblRETnRoR1dMWHpYL1dhWHRVQW1SZ2VMbEhTcjMwcjBHOVVUWE1iMEF0bXd6T295NzNma1NsSFprZHV3L1RZdVU5Y0FENFl1dFBveFRUc0EzNzk3d1ZyNFovMU5DNXpBUkhyNHZ0eEpqeElmaVpNaE1rYldrKzE0Qm5KWkt3cUdad0Rmc3dMeXhXRFNnMTFyRkxKRjdOb3B4amQxaDEvUU9UK29lemdmdTNZcStIaytkdWY1eCs0MG8xR1RrYUlnaWtLL0lFbkM2YVl4Q1VCYVpKU040WFRZRmpVL1lNTklLcUp3aERHT0NDSThGRFhuWG1YanRHaEdKeVNocWpBT25CT2tXMkpHOVM3R2dZZU1XQVU1SnpobldtQk9hT00rQ0tFUG9xU2ZGREMyVW5xK0RMbFVnVVZVRkZMWkdKZzZqdGxvanNkc2E4a1BPYlB1SmRpNWRuQmRCc0xKTUdUV0RhNHQySnZ0d3VQbzlzK1k4NnN1di9XMzNRRzFyQWFPQVVWK3Z4NEs2ZjJEMDRQVktsQzdXTFNyWnpBaTQ1WlY2bElDN1dvWHFtUnl2VXFvVndyelVvVnNJamVUWFdRditSSDVHVGxCWGlCL0luOGxuMEliQkNBRk9hakFKcmdaWXlPSFdxT2ZVZS9hSGpJMTJSNk9RbzFqQ2d0MjE1bCs0ZjZYUGIrME1Ob3UwVis0M24yRjc3dFNmUmIyNGQ3eml0Z25LbXZZSHM2OXp1Z2FQdkJ3djZpb1hrYjJMZEw2NUF0dzUxdUxrWGx1MWJoTU1SY1hTUGNZb3FLSVJsaDM0bFFQOC81SmJ1VUZ5ZTR2eEQ2LzZNeEZGMTFDMHVWTHI5VWxndzQ0dFMzcE1WaU5MVUV4YnljRmdMSWN0K1FETWliUmlteDF5ZFV6OEZYWml1T0lEQk9NVlgyblVaYytodU5FNVhVSjgxdWlKb2lhYndxYVZGMHVhY0tiYXUvcGw0UjJWVzBYWGxKcmE2Ym9WcllHNjQ2VEY1Tll6d3k0dmpFTlZyRGxjTnBaUGw4REg2WFg4WFdDeDBtdldWWlk2S0ZMcnZzWTY2L3pQaWN0NUZueGFOVVIvanV2WkNNM1R2RDYwRTJXMXRaaXpiWFRQRHVhYmNtMG5iYnpwV0twbUExYXlCUThnaWVkTFVNK0Ewa05qQmpRam11WXo3WXJnSVhZdm1GNjNaTEJ3U1hycG45VGI5d3dkZC9VMUgwUE1RSzNYY084dWwzV1Q3UHlQUGRweTBUZW1LeE5SY0pOYXVpWEpublVEcFVwcFFXczRTblVJeTBFRVNHWXFKWVFMR0h4emFHV3dWSWFTNlk3bVFGTThaallEUTNheGpmNjFTV2pVMzNKd09aQTFwd2FHMUw5bXpmNzFhSFJkWDFKSHc2RnAwYVhoTndicXllR05nNE5iZHpHQ0J4b3o0WlhqeTROdTY5WnI2c0RZNnZNckxVNW5BMVA4SmtiZFdYSjZFUmZNcnl2TmgxSmZROStUNGRJaEd2Szl3M2R4akJCemF0c1EvTWxPSFZJRG5ZcER6Nm9kQVhsUTAxdDJQYTVJYWZkOE1NcHhBZURLUDBDNkNqZ1ZMVDVvc0I2aWNVeDAxbFdqWHh6VC9HeVJGMndlbEVNNVovN2pHM1ZqUTFTck5uNUlieXpPRzVkb2JCMy9RSHh5WnZzWGNvejhJb0V3UzdwbENnK3p4SFFrNDI0cTlCZkVwa0VTSmJGSFF1c0RCU1dGa3VCa29QTzBrTEt3UlZZanhHWGxIVGNURFFNSi9INlRYOWFma083bW5yYVRPMWZlVG5aQVhMdTRjcDdIQVhNbU5HMXllRms5VGdTL05IaFpSLzRRb0JUci9aQis2aENneWwxNU5xMVViTjZuRTEvWm5QMVUyY2l6Q0JwdnM4Y0pRWko0TGtZeDVOL3laUEFVWk5RUTBWNGYzQlFsbFdySzNZUnpsMzBkT1Q2UlZuMnVwTnVyNndvU2E4Q3FwZFQvYUtuQk00bzNqTnVyOWQ5eHF0VVQ2dmVCRXQ5Q2E5YXQrRVJ6RUVoVWtSOHNhNW1RNGFWdkpvVmVFQTh6STRlaTVtVUxYRkd5VTd6LzZUQWVZTFZjcHpTV1pZOFBZWUY1eXJUVjYwc1QwK1hWMTQxdlgrK1dmMTZWMmJGZUdWUFpYeEZwa3Z5ZUtUV0xsemZXMG1uS3hzWTZZMzI5NC8wOTk4U0NmWDFibG01cGJjdkZHbHEvcjA3TVJBTWhZSURpVzVKRktXVzN2ZHJFcENzWlNKRytvbTdadS9QU1NjWkpoTmtMYm1XNVdzcjEycFdxVzV6S3Rsd1JTNGJGT3hVdzE3bUN6eTZsc2tDRGwxV1lPR1dEWXJBRHJNQTdCRER3ZVdXTmQ1a29pSm5SMWR6K3l0TFAycTBTcVBCMWxuSzJjY0I3UlllNEZTb1BrczNpQjN0NHR4VFNIY3RiMnN5MWl2azBwdkh1Q05tNncxZjZ3eHYzK09DZ043OExxZFFuVVZoN1Iwb1RBcDB6T2YycmJXNzcwVnU1QzJkSXlHZFRuSG84elNqaTdkcHBqMFVTb1ZDeitsaFJNVGg1M1RlcTlWYkdmYmp1U2JBb29TZFhheVk0UFlIZzM3NEM2ZjdnbDFCL0RYdUo0L1FYeE9CZEpGSnNwRnNJM2VncG9XVVVDamxUSUZuTllObCtaeVpLbUJlWUtHSGtEMVF5RGxoYUtiS3dLY0lKcUo0VExKMk9tZFkvSldYYWU0RGRHQnc4SFo3ZVhjZ0ZGMnpyMlNvYWxEcnk1aUtxb2EwUHVoZTNoUFEyczNlbFRZTStNSStuM3JLMEtnTDcvTGEzR2VNTHQ2bTd1OTEydkdudnRPUmlJYTBxQm1ocVZpK1hXOVhOQm1xYjhlVmdLeklIZkdJNWJOb0c3WDBVQ3plSVNtcUljTy9uWThGSDdVOGF2WDlmeC9TVCtoeDBzZXpQdzlReThNdW0zR1dmMk40VXkveUlZR1ZCWGJKSFdJWnA3ZGZUY3B0ZE1UcjlRbXE3RGFpSy91a3FDTDRrdDRSVWZTNVhQbk10bVQyMi9tUUZxRjdlbVNxdHJsdThTVkVseERSSnJaT0RrcHV3ZTBWZlRmamRFcDFmN0E3ditmb3pOQlhVSi82V1R1SzJUdEZscEZWWkFaM0xjRnZVaTFaMnAyWVQrRU1Ba0dKVlN0T3pMVEFQZzRJcVdJQWx6UlNqT0JrbDJ6eGozVEt5Y3B6VC9NbnZYM3VhU01XTStnVTBya1hqb2hoZWZWUk1hcHMzL2tMTVNLdjIzbFQyM3V4UXJrUWp5T0psZU1Ec2RoQW5ENlpHRWxXWjVNakNYekNFL2hrV1grV0Y0a256R2hWT3lLMmVRWmVrVjNleW8wekw4a3VZV0NuREN2ampoQWtjVFBPQkRYVmRvYXYzSFZjRm5Rakx2dFY5UzJwMHpBNkplZ1B3TVF4dCt5RmIzbGw5ekdscS81ZFJLYjNjRXlRWW9hTllwaGFySjd4Q0I3QVd4c0xZM2pqWlhZMFhzWmowV2p3YzlJNlBQL2RLQUJuQ1phcUhwYVpFQUN4azRaZUxaU0tOZ1pBQmwrbFlRWDFzSlFPU1gzbjZyNDEwZXZjb3VkNUplQUdVWFZQOUgxdFpPS2VqVHE0T25vMHowZXJybzFGcm5PcG9odmExZC9oVGR0VnNRZEtONVc5UmxUM05qRDBuem55S05UZ0tBTWZXTldjeW9kVjBJR0xQSUhPRjBvNEp5cXVmYUs0ejZXSUl6dUdoM2Q4Yzhjd1FnOEVSK09WeHlyamRtOHZOdWh0czRMb09paEd4SU11VWRnendpWU43eGhoMStvWm5KTnVURzdnUVp2dTRYV1o5R0FaWmpHRXVid2VQcVlodEtEVEgrOVZRa2wxNy9pR3lic25KKzgrc0t0eVByY2xsOXR5NjVac2RzdC85aXFwRUtoN001VmRCeGgzY3NPZE5jNnRXM0kxdXlNMVB6T1hlZ1NPckxGc0ZOSTJPMjdNK1RGMkFwbk45TVV2NXVkNkxqeEl2RVFuSFJ6eEl1NElzQTlNTEZrSm4ydGNab1o3T043ZFhlN3VqcmM4SHJ1c1BLYW1scVh3ZDc3bFFVdUxwaWxhdTRQVU1hcHVlQmI3aXJVNFJvVVhFWVh1VnVJR2xSR21PcCsybE5rYVJQVnppT3FtbGFadmFxRzRkRmdTajBqeEVKV3J2MTJJVVdudG13K3JmUWFyUkUwQXBoNG9jSTZubFVsR3FzK3UzLytUL2V0aFc2MlBwSHAyZUhiWnN0bmgvd09POTV5REFIaWNZMkJrWUdBQVlpMk5PSjk0ZnB1dkROek1MNEFpRE5jL2Z6cUVvUCsvWnA3S2RBdkk1V0JnQW9rQ0FHa2NEZmdBQUFCNG5HTmdaR0JnRHZxZkJTUmZNQUFCODFRR1JnWlVvQTBBVnZZRGJ3QUFBSGljWTJCZ1lHQitNVFF3QU04RUpvOEFBQUFBQUU0QW1nRG9BUW9CTEFGT0FYQUJtZ0hFQWU0Q0dnS2NBdWdFbWdTOEJOWUU4Z1VPQlNvRmVnWFFCZjRHUkFabUJyWUhHQWVRQ0JnSVVnaHFDUDRKUmdtK0Nkb0tCQW84Q29JS3VBcndDMUFMbGd1OGVKeGpZR1JnWU5CbVRHRVFaUUFCSmlEbUFrSUdodjlnUGdNQUdKUUJ2QUI0bkcyUlBVN0RNQmlHMy9RUDBVb0lCR0poOFFJTGF2b3pkbVJvOXc3ZDA5UnBVemx4NUxnVnZRTW40QkFjZ29FemNBZ093VnZ6U1pWUWJjbmY0OGZ2RnlzSmdHdDhJY0p4Uk9pRzlUZ2F1T0R1ajV1a0crRVcrVUc0alI0ZWhUdjBRK0V1bmpFUjd1RVdtaytJV3BjMGQzZ1ZidUFLYjhKTituZmhGdmxEdUkxN2ZBcDM2TCtGdTFqZ1I3aUhwK2pGN0FyYnoxTmIxbk85M3BuRW5jU0pGdHJWdVMzVktCNmU1RXlYMmlWZXI5VHlvT3I5ZXV4OXBqSm5DelcxcGRmR1dGVTV1OVdwanpmZVY1UEJJQk1mcDdhQXdRNEZMUHJJa2JLV3FESG4rNjdwRFJLNHM0bHpic0V1eDVxSHZjSUlNYi9udWVTTXlUS2tFM2pXRmROTEhMalcyUFBtTWExSHhuM0dqR1cvd2pUMEh0T0cwOUpVNFd4TGs5TEgySVN1aXY5dHdKbjl5OGZoOXVJWEkrQmtuQUFBQUhpY2JZN1pib013RUVXNUNWQkNTTHJ2Kzc2a2ZKUmpUd0hGc2RHQUcrWHZ5NUpVZmVoSUhwMHJueG1OTi9ENmlyMy9hNFlCaHZBUklNUU9Jb3dRWTR3RUUweXhpejNzNHdDSE9NSXhUbkNLTTV6akFwZTR3alZ1Y0lzNzNPTUJqM2pDTTE3d2lqZTg0d016ZkhxSjBFVm1Va21tSm83N29PbXJIdmZJUlpiWHNUQ1pwbFRabGRsZ2IzVFlHVkhQcm93RnMxMXQxQTU3dGNPTjJyRXJSM1BCcWN3RjEvNmN0STZrMEdTVTRKSE1TUzZXZ2hkSlE5OXNUYmZ1TjdRTEo5dlEzN2ROcmd5a3RuSXhsRFlMSk51cWl0cFJiWVdLRk51eURUNnBvZzZvT1lLSHRLYWtlYWtxS2pIWHBQd2xHUmNzQytPcXhMSWlKcFhxb3FxRE1yZUcybDVidjlSaTNUUlgrYzIzRFpuYTlXRkZnbVh1TzZQczFKbS93NkVyVzhOM0ZiSG4vUUM0NDRqMEFBPT0pIGZvcm1hdCgnd29mZicpO1xuICAgICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICB9XG5cbiAgICBodG1sIHtcbiAgICAgIC0tbHVtby1pY29ucy1hbGlnbi1jZW50ZXI6IFwiXFxcXGVhMDFcIjtcbiAgICAgIC0tbHVtby1pY29ucy1hbGlnbi1sZWZ0OiBcIlxcXFxlYTAyXCI7XG4gICAgICAtLWx1bW8taWNvbnMtYWxpZ24tcmlnaHQ6IFwiXFxcXGVhMDNcIjtcbiAgICAgIC0tbHVtby1pY29ucy1hbmdsZS1kb3duOiBcIlxcXFxlYTA0XCI7XG4gICAgICAtLWx1bW8taWNvbnMtYW5nbGUtbGVmdDogXCJcXFxcZWEwNVwiO1xuICAgICAgLS1sdW1vLWljb25zLWFuZ2xlLXJpZ2h0OiBcIlxcXFxlYTA2XCI7XG4gICAgICAtLWx1bW8taWNvbnMtYW5nbGUtdXA6IFwiXFxcXGVhMDdcIjtcbiAgICAgIC0tbHVtby1pY29ucy1hcnJvdy1kb3duOiBcIlxcXFxlYTA4XCI7XG4gICAgICAtLWx1bW8taWNvbnMtYXJyb3ctbGVmdDogXCJcXFxcZWEwOVwiO1xuICAgICAgLS1sdW1vLWljb25zLWFycm93LXJpZ2h0OiBcIlxcXFxlYTBhXCI7XG4gICAgICAtLWx1bW8taWNvbnMtYXJyb3ctdXA6IFwiXFxcXGVhMGJcIjtcbiAgICAgIC0tbHVtby1pY29ucy1iYXItY2hhcnQ6IFwiXFxcXGVhMGNcIjtcbiAgICAgIC0tbHVtby1pY29ucy1iZWxsOiBcIlxcXFxlYTBkXCI7XG4gICAgICAtLWx1bW8taWNvbnMtY2FsZW5kYXI6IFwiXFxcXGVhMGVcIjtcbiAgICAgIC0tbHVtby1pY29ucy1jaGVja21hcms6IFwiXFxcXGVhMGZcIjtcbiAgICAgIC0tbHVtby1pY29ucy1jaGV2cm9uLWRvd246IFwiXFxcXGVhMTBcIjtcbiAgICAgIC0tbHVtby1pY29ucy1jaGV2cm9uLWxlZnQ6IFwiXFxcXGVhMTFcIjtcbiAgICAgIC0tbHVtby1pY29ucy1jaGV2cm9uLXJpZ2h0OiBcIlxcXFxlYTEyXCI7XG4gICAgICAtLWx1bW8taWNvbnMtY2hldnJvbi11cDogXCJcXFxcZWExM1wiO1xuICAgICAgLS1sdW1vLWljb25zLWNsb2NrOiBcIlxcXFxlYTE0XCI7XG4gICAgICAtLWx1bW8taWNvbnMtY29nOiBcIlxcXFxlYTE1XCI7XG4gICAgICAtLWx1bW8taWNvbnMtY3Jvc3M6IFwiXFxcXGVhMTZcIjtcbiAgICAgIC0tbHVtby1pY29ucy1kb3dubG9hZDogXCJcXFxcZWExN1wiO1xuICAgICAgLS1sdW1vLWljb25zLWRyb3Bkb3duOiBcIlxcXFxlYTE4XCI7XG4gICAgICAtLWx1bW8taWNvbnMtZWRpdDogXCJcXFxcZWExOVwiO1xuICAgICAgLS1sdW1vLWljb25zLWVycm9yOiBcIlxcXFxlYTFhXCI7XG4gICAgICAtLWx1bW8taWNvbnMtZXllOiBcIlxcXFxlYTFiXCI7XG4gICAgICAtLWx1bW8taWNvbnMtZXllLWRpc2FibGVkOiBcIlxcXFxlYTFjXCI7XG4gICAgICAtLWx1bW8taWNvbnMtbWVudTogXCJcXFxcZWExZFwiO1xuICAgICAgLS1sdW1vLWljb25zLW1pbnVzOiBcIlxcXFxlYTFlXCI7XG4gICAgICAtLWx1bW8taWNvbnMtb3JkZXJlZC1saXN0OiBcIlxcXFxlYTFmXCI7XG4gICAgICAtLWx1bW8taWNvbnMtcGhvbmU6IFwiXFxcXGVhMjBcIjtcbiAgICAgIC0tbHVtby1pY29ucy1waG90bzogXCJcXFxcZWEyMVwiO1xuICAgICAgLS1sdW1vLWljb25zLXBsYXk6IFwiXFxcXGVhMjJcIjtcbiAgICAgIC0tbHVtby1pY29ucy1wbHVzOiBcIlxcXFxlYTIzXCI7XG4gICAgICAtLWx1bW8taWNvbnMtcmVkbzogXCJcXFxcZWEyNFwiO1xuICAgICAgLS1sdW1vLWljb25zLXJlbG9hZDogXCJcXFxcZWEyNVwiO1xuICAgICAgLS1sdW1vLWljb25zLXNlYXJjaDogXCJcXFxcZWEyNlwiO1xuICAgICAgLS1sdW1vLWljb25zLXVuZG86IFwiXFxcXGVhMjdcIjtcbiAgICAgIC0tbHVtby1pY29ucy11bm9yZGVyZWQtbGlzdDogXCJcXFxcZWEyOFwiO1xuICAgICAgLS1sdW1vLWljb25zLXVwbG9hZDogXCJcXFxcZWEyOVwiO1xuICAgICAgLS1sdW1vLWljb25zLXVzZXI6IFwiXFxcXGVhMmFcIjtcbiAgICB9XG4gIDwvc3R5bGU+XG48L2N1c3RvbS1zdHlsZT5gO1xuXG5kb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCRfZG9jdW1lbnRDb250YWluZXIuY29udGVudCk7XG5cbi8qIE5PVElDRTogR2VuZXJhdGVkIHdpdGggJ2d1bHAgaWNvbnMnICovXG4vKlxuICBGSVhNRShwb2x5bWVyLW1vZHVsaXplcik6IHRoZSBhYm92ZSBjb21tZW50cyB3ZXJlIGV4dHJhY3RlZFxuICBmcm9tIEhUTUwgYW5kIG1heSBiZSBvdXQgb2YgcGxhY2UgaGVyZS4gUmV2aWV3IHRoZW0gYW5kXG4gIHRoZW4gZGVsZXRlIHRoaXMgY29tbWVudCFcbiovXG47XG4iLCJpbXBvcnQgJy4vdmVyc2lvbi5qcyc7XG5pbXBvcnQgJ0Bwb2x5bWVyL3BvbHltZXIvbGliL2VsZW1lbnRzL2N1c3RvbS1zdHlsZS5qcyc7XG5jb25zdCAkX2RvY3VtZW50Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcblxuJF9kb2N1bWVudENvbnRhaW5lci5pbm5lckhUTUwgPSBgPGN1c3RvbS1zdHlsZT5cbiAgPHN0eWxlPlxuICAgIGh0bWwge1xuICAgICAgLS1sdW1vLXNpemUteHM6IDEuNjI1cmVtO1xuICAgICAgLS1sdW1vLXNpemUtczogMS44NzVyZW07XG4gICAgICAtLWx1bW8tc2l6ZS1tOiAyLjI1cmVtO1xuICAgICAgLS1sdW1vLXNpemUtbDogMi43NXJlbTtcbiAgICAgIC0tbHVtby1zaXplLXhsOiAzLjVyZW07XG5cbiAgICAgIC8qIEljb25zICovXG4gICAgICAtLWx1bW8taWNvbi1zaXplLXM6IDEuMjVlbTtcbiAgICAgIC0tbHVtby1pY29uLXNpemUtbTogMS41ZW07XG4gICAgICAtLWx1bW8taWNvbi1zaXplLWw6IDIuMjVlbTtcbiAgICAgIC8qIEZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSAqL1xuICAgICAgLS1sdW1vLWljb24tc2l6ZTogdmFyKC0tbHVtby1pY29uLXNpemUtbSk7XG4gICAgfVxuICA8L3N0eWxlPlxuPC9jdXN0b20tc3R5bGU+YDtcblxuZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCgkX2RvY3VtZW50Q29udGFpbmVyLmNvbnRlbnQpO1xuIiwiaW1wb3J0ICcuL3ZlcnNpb24uanMnO1xuaW1wb3J0ICdAcG9seW1lci9wb2x5bWVyL2xpYi9lbGVtZW50cy9jdXN0b20tc3R5bGUuanMnO1xuY29uc3QgJF9kb2N1bWVudENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG5cbiRfZG9jdW1lbnRDb250YWluZXIuaW5uZXJIVE1MID0gYDxjdXN0b20tc3R5bGU+XG4gIDxzdHlsZT5cbiAgICBodG1sIHtcbiAgICAgIC8qIFNxdWFyZSAqL1xuICAgICAgLS1sdW1vLXNwYWNlLXhzOiAwLjI1cmVtO1xuICAgICAgLS1sdW1vLXNwYWNlLXM6IDAuNXJlbTtcbiAgICAgIC0tbHVtby1zcGFjZS1tOiAxcmVtO1xuICAgICAgLS1sdW1vLXNwYWNlLWw6IDEuNXJlbTtcbiAgICAgIC0tbHVtby1zcGFjZS14bDogMi41cmVtO1xuXG4gICAgICAvKiBXaWRlICovXG4gICAgICAtLWx1bW8tc3BhY2Utd2lkZS14czogY2FsYyh2YXIoLS1sdW1vLXNwYWNlLXhzKSAvIDIpIHZhcigtLWx1bW8tc3BhY2UteHMpO1xuICAgICAgLS1sdW1vLXNwYWNlLXdpZGUtczogY2FsYyh2YXIoLS1sdW1vLXNwYWNlLXMpIC8gMikgdmFyKC0tbHVtby1zcGFjZS1zKTtcbiAgICAgIC0tbHVtby1zcGFjZS13aWRlLW06IGNhbGModmFyKC0tbHVtby1zcGFjZS1tKSAvIDIpIHZhcigtLWx1bW8tc3BhY2UtbSk7XG4gICAgICAtLWx1bW8tc3BhY2Utd2lkZS1sOiBjYWxjKHZhcigtLWx1bW8tc3BhY2UtbCkgLyAyKSB2YXIoLS1sdW1vLXNwYWNlLWwpO1xuICAgICAgLS1sdW1vLXNwYWNlLXdpZGUteGw6IGNhbGModmFyKC0tbHVtby1zcGFjZS14bCkgLyAyKSB2YXIoLS1sdW1vLXNwYWNlLXhsKTtcblxuICAgICAgLyogVGFsbCAqL1xuICAgICAgLS1sdW1vLXNwYWNlLXRhbGwteHM6IHZhcigtLWx1bW8tc3BhY2UteHMpIGNhbGModmFyKC0tbHVtby1zcGFjZS14cykgLyAyKTtcbiAgICAgIC0tbHVtby1zcGFjZS10YWxsLXM6IHZhcigtLWx1bW8tc3BhY2UtcykgY2FsYyh2YXIoLS1sdW1vLXNwYWNlLXMpIC8gMik7XG4gICAgICAtLWx1bW8tc3BhY2UtdGFsbC1tOiB2YXIoLS1sdW1vLXNwYWNlLW0pIGNhbGModmFyKC0tbHVtby1zcGFjZS1tKSAvIDIpO1xuICAgICAgLS1sdW1vLXNwYWNlLXRhbGwtbDogdmFyKC0tbHVtby1zcGFjZS1sKSBjYWxjKHZhcigtLWx1bW8tc3BhY2UtbCkgLyAyKTtcbiAgICAgIC0tbHVtby1zcGFjZS10YWxsLXhsOiB2YXIoLS1sdW1vLXNwYWNlLXhsKSBjYWxjKHZhcigtLWx1bW8tc3BhY2UteGwpIC8gMik7XG4gICAgfVxuICA8L3N0eWxlPlxuPC9jdXN0b20tc3R5bGU+YDtcblxuZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCgkX2RvY3VtZW50Q29udGFpbmVyLmNvbnRlbnQpO1xuIiwiaW1wb3J0ICcuL3ZlcnNpb24uanMnO1xuaW1wb3J0ICdAcG9seW1lci9wb2x5bWVyL2xpYi9lbGVtZW50cy9jdXN0b20tc3R5bGUuanMnO1xuY29uc3QgJF9kb2N1bWVudENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG5cbiRfZG9jdW1lbnRDb250YWluZXIuaW5uZXJIVE1MID0gYDxjdXN0b20tc3R5bGU+XG4gIDxzdHlsZT5cbiAgICBodG1sIHtcbiAgICAgIC8qIEJvcmRlciByYWRpdXMgKi9cbiAgICAgIC0tbHVtby1ib3JkZXItcmFkaXVzLXM6IDAuMjVlbTsgLyogQ2hlY2tib3gsIGJhZGdlLCBkYXRlLXBpY2tlciB5ZWFyIGluZGljYXRvciwgZXRjICovXG4gICAgICAtLWx1bW8tYm9yZGVyLXJhZGl1cy1tOiB2YXIoLS1sdW1vLWJvcmRlci1yYWRpdXMsIDAuMjVlbSk7IC8qIEJ1dHRvbiwgdGV4dCBmaWVsZCwgbWVudSBvdmVybGF5LCBldGMgKi9cbiAgICAgIC0tbHVtby1ib3JkZXItcmFkaXVzLWw6IDAuNWVtOyAvKiBEaWFsb2csIG5vdGlmaWNhdGlvbiwgZXRjICovXG4gICAgICAtLWx1bW8tYm9yZGVyLXJhZGl1czogMC4yNWVtOyAvKiBEZXByZWNhdGVkICovXG5cbiAgICAgIC8qIFNoYWRvdyAqL1xuICAgICAgLS1sdW1vLWJveC1zaGFkb3cteHM6IDAgMXB4IDRweCAtMXB4IHZhcigtLWx1bW8tc2hhZGUtNTBwY3QpO1xuICAgICAgLS1sdW1vLWJveC1zaGFkb3ctczogMCAycHggNHB4IC0xcHggdmFyKC0tbHVtby1zaGFkZS0yMHBjdCksIDAgM3B4IDEycHggLTFweCB2YXIoLS1sdW1vLXNoYWRlLTMwcGN0KTtcbiAgICAgIC0tbHVtby1ib3gtc2hhZG93LW06IDAgMnB4IDZweCAtMXB4IHZhcigtLWx1bW8tc2hhZGUtMjBwY3QpLCAwIDhweCAyNHB4IC00cHggdmFyKC0tbHVtby1zaGFkZS00MHBjdCk7XG4gICAgICAtLWx1bW8tYm94LXNoYWRvdy1sOiAwIDNweCAxOHB4IC0ycHggdmFyKC0tbHVtby1zaGFkZS0yMHBjdCksIDAgMTJweCA0OHB4IC02cHggdmFyKC0tbHVtby1zaGFkZS00MHBjdCk7XG4gICAgICAtLWx1bW8tYm94LXNoYWRvdy14bDogMCA0cHggMjRweCAtM3B4IHZhcigtLWx1bW8tc2hhZGUtMjBwY3QpLCAwIDE4cHggNjRweCAtOHB4IHZhcigtLWx1bW8tc2hhZGUtNDBwY3QpO1xuXG4gICAgICAvKiBDbGlja2FibGUgZWxlbWVudCBjdXJzb3IgKi9cbiAgICAgIC0tbHVtby1jbGlja2FibGUtY3Vyc29yOiBkZWZhdWx0O1xuICAgIH1cbiAgPC9zdHlsZT5cbjwvY3VzdG9tLXN0eWxlPmA7XG5cbmRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoJF9kb2N1bWVudENvbnRhaW5lci5jb250ZW50KTtcbiIsImltcG9ydCAnLi92ZXJzaW9uLmpzJztcbmltcG9ydCAnQHBvbHltZXIvcG9seW1lci9saWIvZWxlbWVudHMvY3VzdG9tLXN0eWxlLmpzJztcbmltcG9ydCAnQHBvbHltZXIvcG9seW1lci9saWIvZWxlbWVudHMvZG9tLW1vZHVsZS5qcyc7XG5jb25zdCAkX2RvY3VtZW50Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcblxuJF9kb2N1bWVudENvbnRhaW5lci5pbm5lckhUTUwgPSBgPGN1c3RvbS1zdHlsZT5cbiAgPHN0eWxlPlxuICAgIGh0bWwge1xuICAgICAgLyogRm9udCBmYW1pbGllcyAqL1xuICAgICAgLS1sdW1vLWZvbnQtZmFtaWx5OiAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsIFwiUm9ib3RvXCIsIFwiU2Vnb2UgVUlcIiwgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZiwgXCJBcHBsZSBDb2xvciBFbW9qaVwiLCBcIlNlZ29lIFVJIEVtb2ppXCIsIFwiU2Vnb2UgVUkgU3ltYm9sXCI7XG5cbiAgICAgIC8qIEZvbnQgc2l6ZXMgKi9cbiAgICAgIC0tbHVtby1mb250LXNpemUteHhzOiAuNzVyZW07XG4gICAgICAtLWx1bW8tZm9udC1zaXplLXhzOiAuODEyNXJlbTtcbiAgICAgIC0tbHVtby1mb250LXNpemUtczogLjg3NXJlbTtcbiAgICAgIC0tbHVtby1mb250LXNpemUtbTogMXJlbTtcbiAgICAgIC0tbHVtby1mb250LXNpemUtbDogMS4xMjVyZW07XG4gICAgICAtLWx1bW8tZm9udC1zaXplLXhsOiAxLjM3NXJlbTtcbiAgICAgIC0tbHVtby1mb250LXNpemUteHhsOiAxLjc1cmVtO1xuICAgICAgLS1sdW1vLWZvbnQtc2l6ZS14eHhsOiAyLjVyZW07XG5cbiAgICAgIC8qIExpbmUgaGVpZ2h0cyAqL1xuICAgICAgLS1sdW1vLWxpbmUtaGVpZ2h0LXhzOiAxLjI1O1xuICAgICAgLS1sdW1vLWxpbmUtaGVpZ2h0LXM6IDEuMzc1O1xuICAgICAgLS1sdW1vLWxpbmUtaGVpZ2h0LW06IDEuNjI1O1xuICAgIH1cblxuICA8L3N0eWxlPlxuPC9jdXN0b20tc3R5bGU+PGRvbS1tb2R1bGUgaWQ9XCJsdW1vLXR5cG9ncmFwaHlcIj5cbiAgPHRlbXBsYXRlPlxuICAgIDxzdHlsZT5cbiAgICAgIGh0bWwge1xuICAgICAgICBmb250LWZhbWlseTogdmFyKC0tbHVtby1mb250LWZhbWlseSk7XG4gICAgICAgIGZvbnQtc2l6ZTogdmFyKC0tbHVtby1mb250LXNpemUsIHZhcigtLWx1bW8tZm9udC1zaXplLW0pKTtcbiAgICAgICAgbGluZS1oZWlnaHQ6IHZhcigtLWx1bW8tbGluZS1oZWlnaHQtbSk7XG4gICAgICAgIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTtcbiAgICAgICAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gICAgICAgIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XG4gICAgICB9XG5cbiAgICAgIC8qIENhbuKAmXQgY29tYmluZSB3aXRoIHRoZSBhYm92ZSBzZWxlY3RvciBiZWNhdXNlIHRoYXQgZG9lc27igJl0IHdvcmsgaW4gYnJvd3NlcnMgd2l0aG91dCBuYXRpdmUgc2hhZG93IGRvbSAqL1xuICAgICAgOmhvc3Qge1xuICAgICAgICBmb250LWZhbWlseTogdmFyKC0tbHVtby1mb250LWZhbWlseSk7XG4gICAgICAgIGZvbnQtc2l6ZTogdmFyKC0tbHVtby1mb250LXNpemUsIHZhcigtLWx1bW8tZm9udC1zaXplLW0pKTtcbiAgICAgICAgbGluZS1oZWlnaHQ6IHZhcigtLWx1bW8tbGluZS1oZWlnaHQtbSk7XG4gICAgICAgIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTtcbiAgICAgICAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gICAgICAgIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XG4gICAgICB9XG5cbiAgICAgIHNtYWxsLFxuICAgICAgW3RoZW1lfj1cImZvbnQtc2l6ZS1zXCJdIHtcbiAgICAgICAgZm9udC1zaXplOiB2YXIoLS1sdW1vLWZvbnQtc2l6ZS1zKTtcbiAgICAgICAgbGluZS1oZWlnaHQ6IHZhcigtLWx1bW8tbGluZS1oZWlnaHQtcyk7XG4gICAgICB9XG5cbiAgICAgIFt0aGVtZX49XCJmb250LXNpemUteHNcIl0ge1xuICAgICAgICBmb250LXNpemU6IHZhcigtLWx1bW8tZm9udC1zaXplLXhzKTtcbiAgICAgICAgbGluZS1oZWlnaHQ6IHZhcigtLWx1bW8tbGluZS1oZWlnaHQteHMpO1xuICAgICAgfVxuXG4gICAgICBoMSxcbiAgICAgIGgyLFxuICAgICAgaDMsXG4gICAgICBoNCxcbiAgICAgIGg1LFxuICAgICAgaDYge1xuICAgICAgICBmb250LXdlaWdodDogNjAwO1xuICAgICAgICBsaW5lLWhlaWdodDogdmFyKC0tbHVtby1saW5lLWhlaWdodC14cyk7XG4gICAgICAgIG1hcmdpbi10b3A6IDEuMjVlbTtcbiAgICAgIH1cblxuICAgICAgaDEge1xuICAgICAgICBmb250LXNpemU6IHZhcigtLWx1bW8tZm9udC1zaXplLXh4eGwpO1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAwLjc1ZW07XG4gICAgICB9XG5cbiAgICAgIGgyIHtcbiAgICAgICAgZm9udC1zaXplOiB2YXIoLS1sdW1vLWZvbnQtc2l6ZS14eGwpO1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAwLjVlbTtcbiAgICAgIH1cblxuICAgICAgaDMge1xuICAgICAgICBmb250LXNpemU6IHZhcigtLWx1bW8tZm9udC1zaXplLXhsKTtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMC41ZW07XG4gICAgICB9XG5cbiAgICAgIGg0IHtcbiAgICAgICAgZm9udC1zaXplOiB2YXIoLS1sdW1vLWZvbnQtc2l6ZS1sKTtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMC41ZW07XG4gICAgICB9XG5cbiAgICAgIGg1IHtcbiAgICAgICAgZm9udC1zaXplOiB2YXIoLS1sdW1vLWZvbnQtc2l6ZS1tKTtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMC4yNWVtO1xuICAgICAgfVxuXG4gICAgICBoNiB7XG4gICAgICAgIGZvbnQtc2l6ZTogdmFyKC0tbHVtby1mb250LXNpemUteHMpO1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAwO1xuICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgICBsZXR0ZXItc3BhY2luZzogMC4wM2VtO1xuICAgICAgfVxuXG4gICAgICBwLFxuICAgICAgYmxvY2txdW90ZSB7XG4gICAgICAgIG1hcmdpbi10b3A6IDAuNWVtO1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAwLjc1ZW07XG4gICAgICB9XG5cbiAgICAgIGEge1xuICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICB9XG5cbiAgICAgIGE6aG92ZXIge1xuICAgICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgICAgIH1cblxuICAgICAgaHIge1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgYWxpZ24tc2VsZjogc3RyZXRjaDtcbiAgICAgICAgaGVpZ2h0OiAxcHg7XG4gICAgICAgIGJvcmRlcjogMDtcbiAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgbWFyZ2luOiB2YXIoLS1sdW1vLXNwYWNlLXMpIGNhbGModmFyKC0tbHVtby1ib3JkZXItcmFkaXVzLW0pIC8gMik7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWx1bW8tY29udHJhc3QtMTBwY3QpO1xuICAgICAgfVxuXG4gICAgICBibG9ja3F1b3RlIHtcbiAgICAgICAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCB2YXIoLS1sdW1vLWNvbnRyYXN0LTMwcGN0KTtcbiAgICAgIH1cblxuICAgICAgYixcbiAgICAgIHN0cm9uZyB7XG4gICAgICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG4gICAgICB9XG5cbiAgICAgIC8qIFJUTCBzcGVjaWZpYyBzdHlsZXMgKi9cblxuICAgICAgYmxvY2txdW90ZVtkaXI9XCJydGxcIl0ge1xuICAgICAgICBib3JkZXItbGVmdDogbm9uZTtcbiAgICAgICAgYm9yZGVyLXJpZ2h0OiAycHggc29saWQgdmFyKC0tbHVtby1jb250cmFzdC0zMHBjdCk7XG4gICAgICB9XG5cbiAgICA8L3N0eWxlPlxuICA8L3RlbXBsYXRlPlxuPC9kb20tbW9kdWxlPmA7XG5cbmRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoJF9kb2N1bWVudENvbnRhaW5lci5jb250ZW50KTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgJy4vYm9vdC5qcyc7XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgc3RhdGljIHN0cmluZyB2YWx1ZSB3aGljaCBjYW4gYmUgdXNlZCB0byBmaWx0ZXJcbiAqIHN0cmluZ3MgYnkgYXNzZXRpbmcgdGhhdCB0aGV5IGhhdmUgYmVlbiBjcmVhdGVkIHZpYSB0aGlzIGNsYXNzLiBUaGVcbiAqIGB2YWx1ZWAgcHJvcGVydHkgcmV0dXJucyB0aGUgc3RyaW5nIHBhc3NlZCB0byB0aGUgY29uc3RydWN0b3IuXG4gKi9cbmNsYXNzIExpdGVyYWxTdHJpbmcge1xuICBjb25zdHJ1Y3RvcihzdHJpbmcpIHtcbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICB0aGlzLnZhbHVlID0gc3RyaW5nLnRvU3RyaW5nKCk7XG4gIH1cbiAgLyoqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gTGl0ZXJhbFN0cmluZyBzdHJpbmcgdmFsdWVcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgT2JqZWN0IHRvIHN0cmluZ2lmeSBpbnRvIEhUTUxcbiAqIEByZXR1cm4ge3N0cmluZ30gSFRNTCBzdHJpbmdpZmllZCBmb3JtIG9mIGBvYmpgXG4gKi9cbmZ1bmN0aW9uIGxpdGVyYWxWYWx1ZSh2YWx1ZSkge1xuICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMaXRlcmFsU3RyaW5nKSB7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7IUxpdGVyYWxTdHJpbmd9ICovKHZhbHVlKS52YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBub24tbGl0ZXJhbCB2YWx1ZSBwYXNzZWQgdG8gUG9seW1lcidzIGh0bWxMaXRlcmFsIGZ1bmN0aW9uOiAke3ZhbHVlfWBcbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBPYmplY3QgdG8gc3RyaW5naWZ5IGludG8gSFRNTFxuICogQHJldHVybiB7c3RyaW5nfSBIVE1MIHN0cmluZ2lmaWVkIGZvcm0gb2YgYG9iamBcbiAqL1xuZnVuY3Rpb24gaHRtbFZhbHVlKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEhUTUxUZW1wbGF0ZUVsZW1lbnQpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshSFRNTFRlbXBsYXRlRWxlbWVudCB9ICovKHZhbHVlKS5pbm5lckhUTUw7XG4gIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBMaXRlcmFsU3RyaW5nKSB7XG4gICAgcmV0dXJuIGxpdGVyYWxWYWx1ZSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgbm9uLXRlbXBsYXRlIHZhbHVlIHBhc3NlZCB0byBQb2x5bWVyJ3MgaHRtbCBmdW5jdGlvbjogJHt2YWx1ZX1gKTtcbiAgfVxufVxuXG4vKipcbiAqIEEgdGVtcGxhdGUgbGl0ZXJhbCB0YWcgdGhhdCBjcmVhdGVzIGFuIEhUTUwgPHRlbXBsYXRlPiBlbGVtZW50IGZyb20gdGhlXG4gKiBjb250ZW50cyBvZiB0aGUgc3RyaW5nLlxuICpcbiAqIFRoaXMgYWxsb3dzIHlvdSB0byB3cml0ZSBhIFBvbHltZXIgVGVtcGxhdGUgaW4gSmF2YVNjcmlwdC5cbiAqXG4gKiBUZW1wbGF0ZXMgY2FuIGJlIGNvbXBvc2VkIGJ5IGludGVycG9sYXRpbmcgYEhUTUxUZW1wbGF0ZUVsZW1lbnRgcyBpblxuICogZXhwcmVzc2lvbnMgaW4gdGhlIEphdmFTY3JpcHQgdGVtcGxhdGUgbGl0ZXJhbC4gVGhlIG5lc3RlZCB0ZW1wbGF0ZSdzXG4gKiBgaW5uZXJIVE1MYCBpcyBpbmNsdWRlZCBpbiB0aGUgY29udGFpbmluZyB0ZW1wbGF0ZS4gIFRoZSBvbmx5IG90aGVyXG4gKiB2YWx1ZXMgYWxsb3dlZCBpbiBleHByZXNzaW9ucyBhcmUgdGhvc2UgcmV0dXJuZWQgZnJvbSBgaHRtbExpdGVyYWxgXG4gKiB3aGljaCBlbnN1cmVzIG9ubHkgbGl0ZXJhbCB2YWx1ZXMgZnJvbSBKUyBzb3VyY2UgZXZlciByZWFjaCB0aGUgSFRNTCwgdG9cbiAqIGd1YXJkIGFnYWluc3QgWFNTIHJpc2tzLlxuICpcbiAqIEFsbCBvdGhlciB2YWx1ZXMgYXJlIGRpc2FsbG93ZWQgaW4gZXhwcmVzc2lvbnMgdG8gaGVscCBwcmV2ZW50IFhTU1xuICogYXR0YWNrczsgaG93ZXZlciwgYGh0bWxMaXRlcmFsYCBjYW4gYmUgdXNlZCB0byBjb21wb3NlIHN0YXRpY1xuICogc3RyaW5nIHZhbHVlcyBpbnRvIHRlbXBsYXRlcy4gVGhpcyBpcyB1c2VmdWwgdG8gY29tcG9zZSBzdHJpbmdzIGludG9cbiAqIHBsYWNlcyB0aGF0IGRvIG5vdCBhY2NlcHQgaHRtbCwgbGlrZSB0aGUgY3NzIHRleHQgb2YgYSBgc3R5bGVgXG4gKiBlbGVtZW50LlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgIHN0YXRpYyBnZXQgdGVtcGxhdGUoKSB7XG4gKiAgICAgICByZXR1cm4gaHRtbGBcbiAqICAgICAgICAgPHN0eWxlPjpob3N0eyBjb250ZW50OlwiLi4uXCIgfTwvc3R5bGU+XG4gKiAgICAgICAgIDxkaXYgY2xhc3M9XCJzaGFkb3dlZFwiPiR7dGhpcy5wYXJ0aWFsVGVtcGxhdGV9PC9kaXY+XG4gKiAgICAgICAgICR7c3VwZXIudGVtcGxhdGV9XG4gKiAgICAgICBgO1xuICogICAgIH1cbiAqICAgICBzdGF0aWMgZ2V0IHBhcnRpYWxUZW1wbGF0ZSgpIHsgcmV0dXJuIGh0bWxgPHNwYW4+UGFydGlhbCE8L3NwYW4+YDsgfVxuICpcbiAqIEBwYXJhbSB7IUlUZW1wbGF0ZUFycmF5fSBzdHJpbmdzIENvbnN0YW50IHBhcnRzIG9mIHRhZ2dlZCB0ZW1wbGF0ZSBsaXRlcmFsXG4gKiBAcGFyYW0gey4uLip9IHZhbHVlcyBWYXJpYWJsZSBwYXJ0cyBvZiB0YWdnZWQgdGVtcGxhdGUgbGl0ZXJhbFxuICogQHJldHVybiB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9IENvbnN0cnVjdGVkIEhUTUxUZW1wbGF0ZUVsZW1lbnRcbiAqL1xuZXhwb3J0IGNvbnN0IGh0bWwgPSBmdW5jdGlvbiBodG1sKHN0cmluZ3MsIC4uLnZhbHVlcykge1xuICBjb25zdCB0ZW1wbGF0ZSA9IC8qKiBAdHlwZSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9ICovKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJykpO1xuICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSB2YWx1ZXMucmVkdWNlKChhY2MsIHYsIGlkeCkgPT5cbiAgICAgIGFjYyArIGh0bWxWYWx1ZSh2KSArIHN0cmluZ3NbaWR4ICsgMV0sIHN0cmluZ3NbMF0pO1xuICByZXR1cm4gdGVtcGxhdGU7XG59O1xuXG4vKipcbiAqIEFuIGh0bWwgbGl0ZXJhbCB0YWcgdGhhdCBjYW4gYmUgdXNlZCB3aXRoIGBodG1sYCB0byBjb21wb3NlLlxuICogYSBsaXRlcmFsIHN0cmluZy5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqICAgICBzdGF0aWMgZ2V0IHRlbXBsYXRlKCkge1xuICogICAgICAgcmV0dXJuIGh0bWxgXG4gKiAgICAgICAgIDxzdHlsZT5cbiAqICAgICAgICAgICA6aG9zdCB7IGRpc3BsYXk6IGJsb2NrOyB9XG4gKiAgICAgICAgICAgJHt0aGlzLnN0eWxlVGVtcGxhdGUoKX1cbiAqICAgICAgICAgPC9zdHlsZT5cbiAqICAgICAgICAgPGRpdiBjbGFzcz1cInNoYWRvd2VkXCI+JHtzdGF0aWNWYWx1ZX08L2Rpdj5cbiAqICAgICAgICAgJHtzdXBlci50ZW1wbGF0ZX1cbiAqICAgICAgIGA7XG4gKiAgICAgfVxuICogICAgIHN0YXRpYyBnZXQgc3R5bGVUZW1wbGF0ZSgpIHtcbiAqICAgICAgICByZXR1cm4gaHRtbExpdGVyYWxgLnNoYWRvd2VkIHsgYmFja2dyb3VuZDogZ3JheTsgfWA7XG4gKiAgICAgfVxuICpcbiAqIEBwYXJhbSB7IUlUZW1wbGF0ZUFycmF5fSBzdHJpbmdzIENvbnN0YW50IHBhcnRzIG9mIHRhZ2dlZCB0ZW1wbGF0ZSBsaXRlcmFsXG4gKiBAcGFyYW0gey4uLip9IHZhbHVlcyBWYXJpYWJsZSBwYXJ0cyBvZiB0YWdnZWQgdGVtcGxhdGUgbGl0ZXJhbFxuICogQHJldHVybiB7IUxpdGVyYWxTdHJpbmd9IENvbnN0cnVjdGVkIGxpdGVyYWwgc3RyaW5nXG4gKi9cbmV4cG9ydCBjb25zdCBodG1sTGl0ZXJhbCA9IGZ1bmN0aW9uKHN0cmluZ3MsIC4uLnZhbHVlcykge1xuICByZXR1cm4gbmV3IExpdGVyYWxTdHJpbmcodmFsdWVzLnJlZHVjZSgoYWNjLCB2LCBpZHgpID0+XG4gICAgICBhY2MgKyBsaXRlcmFsVmFsdWUodikgKyBzdHJpbmdzW2lkeCArIDFdLCBzdHJpbmdzWzBdKSk7XG59O1xuIiwiaW1wb3J0ICdAdmFhZGluL3ZhYWRpbi1sdW1vLXN0eWxlcy9jb2xvci5qcyc7XG5pbXBvcnQgJ0B2YWFkaW4vdmFhZGluLWx1bW8tc3R5bGVzL3N0eWxlLmpzJztcbmltcG9ydCB7IGh0bWwgfSBmcm9tICdAcG9seW1lci9wb2x5bWVyL2xpYi91dGlscy9odG1sLXRhZy5qcyc7XG5cbmNvbnN0ICRfZG9jdW1lbnRDb250YWluZXIgPSBodG1sYDxkb20tbW9kdWxlIGlkPVwibHVtby1jaGVja2JveFwiIHRoZW1lLWZvcj1cInZhYWRpbi1jaGVja2JveFwiPlxuICA8dGVtcGxhdGU+XG4gICAgPHN0eWxlIGluY2x1ZGU9XCJsdW1vLWNoZWNrYm94LXN0eWxlIGx1bW8tY2hlY2tib3gtZWZmZWN0c1wiPlxuICAgICAgLyogSUUxMSBvbmx5ICovXG4gICAgICA6Oi1tcy1iYWNrZHJvcCxcbiAgICAgIFtwYXJ0PVwiY2hlY2tib3hcIl0ge1xuICAgICAgICBsaW5lLWhlaWdodDogMTtcbiAgICAgIH1cbiAgICA8L3N0eWxlPlxuICA8L3RlbXBsYXRlPlxuPC9kb20tbW9kdWxlPjxkb20tbW9kdWxlIGlkPVwibHVtby1jaGVja2JveC1zdHlsZVwiPlxuICA8dGVtcGxhdGU+XG4gICAgPHN0eWxlPlxuICAgICAgOmhvc3Qge1xuICAgICAgICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xuICAgICAgICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xuICAgICAgICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XG4gICAgICAgIHVzZXItc2VsZWN0OiBub25lO1xuICAgICAgICBjdXJzb3I6IGRlZmF1bHQ7XG4gICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICB9XG5cbiAgICAgIFtwYXJ0PVwibGFiZWxcIl06bm90KFtlbXB0eV0pIHtcbiAgICAgICAgbWFyZ2luOiAwLjE4NzVlbSAwLjg3NWVtIDAuMTg3NWVtIDAuMzc1ZW07XG4gICAgICB9XG5cbiAgICAgIFtwYXJ0PVwiY2hlY2tib3hcIl0ge1xuICAgICAgICB3aWR0aDogY2FsYygxZW0gKyAycHgpO1xuICAgICAgICBoZWlnaHQ6IGNhbGMoMWVtICsgMnB4KTtcbiAgICAgICAgbWFyZ2luOiAwLjE4NzVlbTtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1sdW1vLWJvcmRlci1yYWRpdXMpO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1sdW1vLWNvbnRyYXN0LTIwcGN0KTtcbiAgICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuMnMgY3ViaWMtYmV6aWVyKC4xMiwgLjMyLCAuNTQsIDIpLCBiYWNrZ3JvdW5kLWNvbG9yIDAuMTVzO1xuICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDEuMjtcbiAgICAgIH1cblxuICAgICAgOmhvc3QoW2luZGV0ZXJtaW5hdGVdKSBbcGFydD1cImNoZWNrYm94XCJdLFxuICAgICAgOmhvc3QoW2NoZWNrZWRdKSBbcGFydD1cImNoZWNrYm94XCJdIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbHVtby1wcmltYXJ5LWNvbG9yKTtcbiAgICAgIH1cblxuICAgICAgLyogTmVlZGVkIHRvIGFsaWduIHRoZSBjaGVja2JveCBuaWNlbHkgb24gdGhlIGJhc2VsaW5lICovXG4gICAgICBbcGFydD1cImNoZWNrYm94XCJdOjpiZWZvcmUge1xuICAgICAgICBjb250ZW50OiBcIlxcXFwyMDAzXCI7XG4gICAgICB9XG5cbiAgICAgIC8qIENoZWNrbWFyayAqL1xuICAgICAgW3BhcnQ9XCJjaGVja2JveFwiXTo6YWZ0ZXIge1xuICAgICAgICBjb250ZW50OiBcIlwiO1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgIHdpZHRoOiAwO1xuICAgICAgICBoZWlnaHQ6IDA7XG4gICAgICAgIGJvcmRlcjogMCBzb2xpZCB2YXIoLS1sdW1vLXByaW1hcnktY29udHJhc3QtY29sb3IpO1xuICAgICAgICBib3JkZXItd2lkdGg6IDAuMTg3NWVtIDAgMCAwLjE4NzVlbTtcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogMCAwO1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHRvcDogMC44MTI1ZW07XG4gICAgICAgIGxlZnQ6IDAuNWVtO1xuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAuNTUpIHJvdGF0ZSgtMTM1ZGVnKTtcbiAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgIH1cblxuICAgICAgOmhvc3QoW2NoZWNrZWRdKSBbcGFydD1cImNoZWNrYm94XCJdOjphZnRlciB7XG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgIHdpZHRoOiAwLjYyNWVtO1xuICAgICAgICBoZWlnaHQ6IDEuMDYyNWVtO1xuICAgICAgfVxuXG4gICAgICAvKiBJbmRldGVybWluYXRlIGNoZWNrbWFyayAqL1xuXG4gICAgICA6aG9zdChbaW5kZXRlcm1pbmF0ZV0pIFtwYXJ0PVwiY2hlY2tib3hcIl06OmFmdGVyIHtcbiAgICAgICAgdHJhbnNmb3JtOiBub25lO1xuICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICB0b3A6IDQ1JTtcbiAgICAgICAgaGVpZ2h0OiAxMCU7XG4gICAgICAgIGxlZnQ6IDIyJTtcbiAgICAgICAgcmlnaHQ6IDIyJTtcbiAgICAgICAgd2lkdGg6IGF1dG87XG4gICAgICAgIGJvcmRlcjogMDtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbHVtby1wcmltYXJ5LWNvbnRyYXN0LWNvbG9yKTtcbiAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cztcbiAgICAgIH1cblxuICAgICAgLyogRm9jdXMgcmluZyAqL1xuXG4gICAgICA6aG9zdChbZm9jdXMtcmluZ10pIFtwYXJ0PVwiY2hlY2tib3hcIl0ge1xuICAgICAgICBib3gtc2hhZG93OiAwIDAgMCAzcHggdmFyKC0tbHVtby1wcmltYXJ5LWNvbG9yLTUwcGN0KTtcbiAgICAgIH1cblxuICAgICAgLyogRGlzYWJsZWQgKi9cblxuICAgICAgOmhvc3QoW2Rpc2FibGVkXSkge1xuICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgICAgY29sb3I6IHZhcigtLWx1bW8tZGlzYWJsZWQtdGV4dC1jb2xvcik7XG4gICAgICB9XG5cbiAgICAgIDpob3N0KFtkaXNhYmxlZF0pIFtwYXJ0PVwibGFiZWxcIl0gOjpzbG90dGVkKCopIHtcbiAgICAgICAgY29sb3I6IGluaGVyaXQ7XG4gICAgICB9XG5cbiAgICAgIDpob3N0KFtkaXNhYmxlZF0pIFtwYXJ0PVwiY2hlY2tib3hcIl0ge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1sdW1vLWNvbnRyYXN0LTEwcGN0KTtcbiAgICAgIH1cblxuICAgICAgOmhvc3QoW2Rpc2FibGVkXSkgW3BhcnQ9XCJjaGVja2JveFwiXTo6YWZ0ZXIge1xuICAgICAgICBib3JkZXItY29sb3I6IHZhcigtLWx1bW8tY29udHJhc3QtMzBwY3QpO1xuICAgICAgfVxuXG4gICAgICA6aG9zdChbaW5kZXRlcm1pbmF0ZV1bZGlzYWJsZWRdKSBbcGFydD1cImNoZWNrYm94XCJdOjphZnRlciB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWx1bW8tY29udHJhc3QtMzBwY3QpO1xuICAgICAgfVxuICAgIDwvc3R5bGU+XG4gIDwvdGVtcGxhdGU+XG48L2RvbS1tb2R1bGU+PGRvbS1tb2R1bGUgaWQ9XCJsdW1vLWNoZWNrYm94LWVmZmVjdHNcIj5cbiAgPHRlbXBsYXRlPlxuICAgIDxzdHlsZT5cbiAgICAgIC8qIFRyYW5zaXRpb24gdGhlIGNoZWNrbWFyayBpZiBhY3RpdmF0ZWQgd2l0aCB0aGUgbW91c2UgKGRpc2FibGVkIGZvciBncmlkIHNlbGVjdC1hbGwgdGhpcyB3YXkpICovXG4gICAgICA6aG9zdCg6aG92ZXIpIFtwYXJ0PVwiY2hlY2tib3hcIl06OmFmdGVyIHtcbiAgICAgICAgdHJhbnNpdGlvbjogd2lkdGggMC4xcywgaGVpZ2h0IDAuMjVzO1xuICAgICAgfVxuXG4gICAgICAvKiBVc2VkIGZvciBhY3RpdmF0aW9uIFwiaGFsb1wiICovXG4gICAgICBbcGFydD1cImNoZWNrYm94XCJdOjpiZWZvcmUge1xuICAgICAgICBjb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogaW5oZXJpdDtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogaW5oZXJpdDtcbiAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxLjQpO1xuICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4xcywgb3BhY2l0eSAwLjhzO1xuICAgICAgfVxuXG4gICAgICAvKiBIb3ZlciAqL1xuXG4gICAgICA6aG9zdCg6bm90KFtjaGVja2VkXSk6bm90KFtpbmRldGVybWluYXRlXSk6bm90KFtkaXNhYmxlZF0pOmhvdmVyKSBbcGFydD1cImNoZWNrYm94XCJdIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbHVtby1jb250cmFzdC0zMHBjdCk7XG4gICAgICB9XG5cbiAgICAgIC8qIERpc2FibGUgaG92ZXIgZm9yIHRvdWNoIGRldmljZXMgKi9cbiAgICAgIEBtZWRpYSAocG9pbnRlcjogY29hcnNlKSB7XG4gICAgICAgIDpob3N0KDpub3QoW2NoZWNrZWRdKTpub3QoW2luZGV0ZXJtaW5hdGVdKTpub3QoW2Rpc2FibGVkXSk6aG92ZXIpIFtwYXJ0PVwiY2hlY2tib3hcIl0ge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWx1bW8tY29udHJhc3QtMjBwY3QpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qIEFjdGl2ZSAqL1xuXG4gICAgICA6aG9zdChbYWN0aXZlXSkgW3BhcnQ9XCJjaGVja2JveFwiXSB7XG4gICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMC45KTtcbiAgICAgICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4wNXM7XG4gICAgICB9XG5cbiAgICAgIDpob3N0KFthY3RpdmVdW2NoZWNrZWRdKSBbcGFydD1cImNoZWNrYm94XCJdIHtcbiAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxLjEpO1xuICAgICAgfVxuXG4gICAgICA6aG9zdChbYWN0aXZlXTpub3QoW2NoZWNrZWRdKSkgW3BhcnQ9XCJjaGVja2JveFwiXTo6YmVmb3JlIHtcbiAgICAgICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4wMXMsIDAuMDFzO1xuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDApO1xuICAgICAgICBvcGFjaXR5OiAwLjQ7XG4gICAgICB9XG4gICAgPC9zdHlsZT5cbiAgPC90ZW1wbGF0ZT5cbjwvZG9tLW1vZHVsZT5gO1xuXG5kb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCRfZG9jdW1lbnRDb250YWluZXIuY29udGVudCk7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaW1wb3J0ICcuL2Jvb3QuanMnO1xuXG4vLyB1bmlxdWUgZ2xvYmFsIGlkIGZvciBkZWR1cGluZyBtaXhpbnMuXG5sZXQgZGVkdXBlSWQgPSAwO1xuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMge0Z1bmN0aW9ufVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gTWl4aW5GdW5jdGlvbigpe31cbi8qKiBAdHlwZSB7KFdlYWtNYXAgfCB1bmRlZmluZWQpfSAqL1xuTWl4aW5GdW5jdGlvbi5wcm90b3R5cGUuX19taXhpbkFwcGxpY2F0aW9ucztcbi8qKiBAdHlwZSB7KE9iamVjdCB8IHVuZGVmaW5lZCl9ICovXG5NaXhpbkZ1bmN0aW9uLnByb3RvdHlwZS5fX21peGluU2V0O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSB2YWxpZC1qc2RvYyAqL1xuLyoqXG4gKiBXcmFwcyBhbiBFUzYgY2xhc3MgZXhwcmVzc2lvbiBtaXhpbiBzdWNoIHRoYXQgdGhlIG1peGluIGlzIG9ubHkgYXBwbGllZFxuICogaWYgaXQgaGFzIG5vdCBhbHJlYWR5IGJlZW4gYXBwbGllZCBpdHMgYmFzZSBhcmd1bWVudC4gQWxzbyBtZW1vaXplcyBtaXhpblxuICogYXBwbGljYXRpb25zLlxuICpcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge1R9IG1peGluIEVTNiBjbGFzcyBleHByZXNzaW9uIG1peGluIHRvIHdyYXBcbiAqIEByZXR1cm4ge1R9XG4gKiBAc3VwcHJlc3Mge2ludmFsaWRDYXN0c31cbiAqL1xuZXhwb3J0IGNvbnN0IGRlZHVwaW5nTWl4aW4gPSBmdW5jdGlvbihtaXhpbikge1xuICBsZXQgbWl4aW5BcHBsaWNhdGlvbnMgPSAvKiogQHR5cGUgeyFNaXhpbkZ1bmN0aW9ufSAqLyhtaXhpbikuX19taXhpbkFwcGxpY2F0aW9ucztcbiAgaWYgKCFtaXhpbkFwcGxpY2F0aW9ucykge1xuICAgIG1peGluQXBwbGljYXRpb25zID0gbmV3IFdlYWtNYXAoKTtcbiAgICAvKiogQHR5cGUgeyFNaXhpbkZ1bmN0aW9ufSAqLyhtaXhpbikuX19taXhpbkFwcGxpY2F0aW9ucyA9IG1peGluQXBwbGljYXRpb25zO1xuICB9XG4gIC8vIG1haW50YWluIGEgdW5pcXVlIGlkIGZvciBlYWNoIG1peGluXG4gIGxldCBtaXhpbkRlZHVwZUlkID0gZGVkdXBlSWQrKztcbiAgZnVuY3Rpb24gZGVkdXBpbmdNaXhpbihiYXNlKSB7XG4gICAgbGV0IGJhc2VTZXQgPSAvKiogQHR5cGUgeyFNaXhpbkZ1bmN0aW9ufSAqLyhiYXNlKS5fX21peGluU2V0O1xuICAgIGlmIChiYXNlU2V0ICYmIGJhc2VTZXRbbWl4aW5EZWR1cGVJZF0pIHtcbiAgICAgIHJldHVybiBiYXNlO1xuICAgIH1cbiAgICBsZXQgbWFwID0gbWl4aW5BcHBsaWNhdGlvbnM7XG4gICAgbGV0IGV4dGVuZGVkID0gbWFwLmdldChiYXNlKTtcbiAgICBpZiAoIWV4dGVuZGVkKSB7XG4gICAgICBleHRlbmRlZCA9IC8qKiBAdHlwZSB7IUZ1bmN0aW9ufSAqLyhtaXhpbikoYmFzZSk7XG4gICAgICBtYXAuc2V0KGJhc2UsIGV4dGVuZGVkKTtcbiAgICB9XG4gICAgLy8gY29weSBpbmhlcml0ZWQgbWl4aW4gc2V0IGZyb20gdGhlIGV4dGVuZGVkIGNsYXNzLCBvciB0aGUgYmFzZSBjbGFzc1xuICAgIC8vIE5PVEU6IHdlIGF2b2lkIHVzZSBvZiBTZXQgaGVyZSBiZWNhdXNlIHNvbWUgYnJvd3NlciAoSUUxMSlcbiAgICAvLyBjYW5ub3QgZXh0ZW5kIGEgYmFzZSBTZXQgdmlhIHRoZSBjb25zdHJ1Y3Rvci5cbiAgICBsZXQgbWl4aW5TZXQgPSBPYmplY3QuY3JlYXRlKC8qKiBAdHlwZSB7IU1peGluRnVuY3Rpb259ICovKGV4dGVuZGVkKS5fX21peGluU2V0IHx8IGJhc2VTZXQgfHwgbnVsbCk7XG4gICAgbWl4aW5TZXRbbWl4aW5EZWR1cGVJZF0gPSB0cnVlO1xuICAgIC8qKiBAdHlwZSB7IU1peGluRnVuY3Rpb259ICovKGV4dGVuZGVkKS5fX21peGluU2V0ID0gbWl4aW5TZXQ7XG4gICAgcmV0dXJuIGV4dGVuZGVkO1xuICB9XG5cbiAgcmV0dXJuIGRlZHVwaW5nTWl4aW47XG59O1xuLyogZXNsaW50LWVuYWJsZSB2YWxpZC1qc2RvYyAqL1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuLyogZXNsaW50LWRpc2FibGUgdmFsaWQtanNkb2MgKi9cbi8qKlxuICogTm9kZSB3cmFwcGVyIHRvIGVuc3VyZSBTaGFkb3dET00gc2FmZSBvcGVyYXRpb24gcmVnYXJkbGVzcyBvZiBwb2x5ZmlsbFxuICogcHJlc2VuY2Ugb3IgbW9kZS4gTm90ZSB0aGF0IHdpdGggdGhlIGludHJvZHVjdGlvbiBvZiBgU2hhZHlET00ubm9QYXRjaGAsXG4gKiBhIG5vZGUgd3JhcHBlciBtdXN0IGJlIHVzZWQgdG8gYWNjZXNzIFNoYWRvd0RPTSBBUEkuXG4gKiBUaGlzIGlzIHNpbWlsYXIgdG8gdXNpbmcgYFBvbHltZXIuZG9tYCBidXQgcmVsaWVzIGV4Y2x1c2l2ZWx5XG4gKiBvbiB0aGUgcHJlc2VuY2Ugb2YgdGhlIFNoYWR5RE9NIHBvbHlmaWxsIHJhdGhlciB0aGFuIHJlcXVpcmluZyB0aGUgbG9hZGluZ1xuICogb2YgbGVnYWN5IChQb2x5bWVyLmRvbSkgQVBJLlxuICogQHR5cGUge2Z1bmN0aW9uKE5vZGUpOk5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCB3cmFwID0gKHdpbmRvd1snU2hhZHlET00nXSAmJiB3aW5kb3dbJ1NoYWR5RE9NJ11bJ25vUGF0Y2gnXSAmJiB3aW5kb3dbJ1NoYWR5RE9NJ11bJ3dyYXAnXSkgP1xuICB3aW5kb3dbJ1NoYWR5RE9NJ11bJ3dyYXAnXSA6XG4gICh3aW5kb3dbJ1NoYWR5RE9NJ10gPyAobikgPT4gU2hhZHlET01bJ3BhdGNoJ10obikgOiAobikgPT4gbik7XG5cbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgJy4vYm9vdC5qcyc7XG5cbi8qKlxuICogTW9kdWxlIHdpdGggdXRpbGl0aWVzIGZvciBtYW5pcHVsYXRpbmcgc3RydWN0dXJlZCBkYXRhIHBhdGggc3RyaW5ncy5cbiAqXG4gKiBAc3VtbWFyeSBNb2R1bGUgd2l0aCB1dGlsaXRpZXMgZm9yIG1hbmlwdWxhdGluZyBzdHJ1Y3R1cmVkIGRhdGEgcGF0aCBzdHJpbmdzLlxuICovXG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBzdHJpbmcgaXMgYSBzdHJ1Y3R1cmVkIGRhdGEgcGF0aCAoaGFzIGRvdHMpLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBgXG4gKiBpc1BhdGgoJ2Zvby5iYXIuYmF6JykgLy8gdHJ1ZVxuICogaXNQYXRoKCdmb28nKSAgICAgICAgIC8vIGZhbHNlXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIHN0cmluZ1xuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3RyaW5nIGNvbnRhaW5lZCBvbmUgb3IgbW9yZSBkb3RzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1BhdGgocGF0aCkge1xuICByZXR1cm4gcGF0aC5pbmRleE9mKCcuJykgPj0gMDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSByb290IHByb3BlcnR5IG5hbWUgZm9yIHRoZSBnaXZlbiBwYXRoLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBgXG4gKiByb290KCdmb28uYmFyLmJheicpIC8vICdmb28nXG4gKiByb290KCdmb28nKSAgICAgICAgIC8vICdmb28nXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfSBSb290IHByb3BlcnR5IG5hbWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJvb3QocGF0aCkge1xuICBsZXQgZG90SW5kZXggPSBwYXRoLmluZGV4T2YoJy4nKTtcbiAgaWYgKGRvdEluZGV4ID09PSAtMSkge1xuICAgIHJldHVybiBwYXRoO1xuICB9XG4gIHJldHVybiBwYXRoLnNsaWNlKDAsIGRvdEluZGV4KTtcbn1cblxuLyoqXG4gKiBHaXZlbiBgYmFzZWAgaXMgYGZvby5iYXJgLCBgZm9vYCBpcyBhbiBhbmNlc3RvciwgYGZvby5iYXJgIGlzIG5vdFxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBwYXRoIGlzIGFuIGFuY2VzdG9yIG9mIHRoZSBiYXNlIHBhdGguXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBcbiAqIGlzQW5jZXN0b3IoJ2Zvby5iYXInLCAnZm9vJykgICAgICAgICAvLyB0cnVlXG4gKiBpc0FuY2VzdG9yKCdmb28uYmFyJywgJ2Zvby5iYXInKSAgICAgLy8gZmFsc2VcbiAqIGlzQW5jZXN0b3IoJ2Zvby5iYXInLCAnZm9vLmJhci5iYXonKSAvLyBmYWxzZVxuICogYGBgXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2UgUGF0aCBzdHJpbmcgdG8gdGVzdCBhZ2FpbnN0LlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCBzdHJpbmcgdG8gdGVzdC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYHBhdGhgIGlzIGFuIGFuY2VzdG9yIG9mIGBiYXNlYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQW5jZXN0b3IoYmFzZSwgcGF0aCkge1xuICAvLyAgICAgYmFzZS5zdGFydHNXaXRoKHBhdGggKyAnLicpO1xuICByZXR1cm4gYmFzZS5pbmRleE9mKHBhdGggKyAnLicpID09PSAwO1xufVxuXG4vKipcbiAqIEdpdmVuIGBiYXNlYCBpcyBgZm9vLmJhcmAsIGBmb28uYmFyLmJhemAgaXMgYW4gZGVzY2VuZGFudFxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBgXG4gKiBpc0Rlc2NlbmRhbnQoJ2Zvby5iYXInLCAnZm9vLmJhci5iYXonKSAvLyB0cnVlXG4gKiBpc0Rlc2NlbmRhbnQoJ2Zvby5iYXInLCAnZm9vLmJhcicpICAgICAvLyBmYWxzZVxuICogaXNEZXNjZW5kYW50KCdmb28uYmFyJywgJ2ZvbycpICAgICAgICAgLy8gZmFsc2VcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlIFBhdGggc3RyaW5nIHRvIHRlc3QgYWdhaW5zdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFBhdGggc3RyaW5nIHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGBwYXRoYCBpcyBhIGRlc2NlbmRhbnQgb2YgYGJhc2VgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNEZXNjZW5kYW50KGJhc2UsIHBhdGgpIHtcbiAgLy8gICAgIHBhdGguc3RhcnRzV2l0aChiYXNlICsgJy4nKTtcbiAgcmV0dXJuIHBhdGguaW5kZXhPZihiYXNlICsgJy4nKSA9PT0gMDtcbn1cblxuLyoqXG4gKiBSZXBsYWNlcyBhIHByZXZpb3VzIGJhc2UgcGF0aCB3aXRoIGEgbmV3IGJhc2UgcGF0aCwgcHJlc2VydmluZyB0aGVcbiAqIHJlbWFpbmRlciBvZiB0aGUgcGF0aC5cbiAqXG4gKiBVc2VyIG11c3QgZW5zdXJlIGBwYXRoYCBoYXMgYSBwcmVmaXggb2YgYGJhc2VgLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBgXG4gKiB0cmFuc2xhdGUoJ2Zvby5iYXInLCAnem90JywgJ2Zvby5iYXIuYmF6JykgLy8gJ3pvdC5iYXonXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZSBDdXJyZW50IGJhc2Ugc3RyaW5nIHRvIHJlbW92ZVxuICogQHBhcmFtIHtzdHJpbmd9IG5ld0Jhc2UgTmV3IGJhc2Ugc3RyaW5nIHRvIHJlcGxhY2Ugd2l0aFxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCB0byB0cmFuc2xhdGVcbiAqIEByZXR1cm4ge3N0cmluZ30gVHJhbnNsYXRlZCBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zbGF0ZShiYXNlLCBuZXdCYXNlLCBwYXRoKSB7XG4gIHJldHVybiBuZXdCYXNlICsgcGF0aC5zbGljZShiYXNlLmxlbmd0aCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2UgUGF0aCBzdHJpbmcgdG8gdGVzdCBhZ2FpbnN0XG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIHN0cmluZyB0byB0ZXN0XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGBwYXRoYCBpcyBlcXVhbCB0byBgYmFzZWBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoZXMoYmFzZSwgcGF0aCkge1xuICByZXR1cm4gKGJhc2UgPT09IHBhdGgpIHx8XG4gICAgICAgICBpc0FuY2VzdG9yKGJhc2UsIHBhdGgpIHx8XG4gICAgICAgICBpc0Rlc2NlbmRhbnQoYmFzZSwgcGF0aCk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYXJyYXktYmFzZWQgcGF0aHMgdG8gZmxhdHRlbmVkIHBhdGguICBTdHJpbmctYmFzZWQgcGF0aHNcbiAqIGFyZSByZXR1cm5lZCBhcy1pcy5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYFxuICogbm9ybWFsaXplKFsnZm9vLmJhcicsIDAsICdiYXonXSkgIC8vICdmb28uYmFyLjAuYmF6J1xuICogbm9ybWFsaXplKCdmb28uYmFyLjAuYmF6JykgICAgICAgIC8vICdmb28uYmFyLjAuYmF6J1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtzdHJpbmcgfCAhQXJyYXk8c3RyaW5nfG51bWJlcj59IHBhdGggSW5wdXQgcGF0aFxuICogQHJldHVybiB7c3RyaW5nfSBGbGF0dGVuZWQgcGF0aFxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKHBhdGgpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkocGF0aCkpIHtcbiAgICBsZXQgcGFydHMgPSBbXTtcbiAgICBmb3IgKGxldCBpPTA7IGk8cGF0aC5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGFyZ3MgPSBwYXRoW2ldLnRvU3RyaW5nKCkuc3BsaXQoJy4nKTtcbiAgICAgIGZvciAobGV0IGo9MDsgajxhcmdzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHBhcnRzLnB1c2goYXJnc1tqXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXJ0cy5qb2luKCcuJyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH1cbn1cblxuLyoqXG4gKiBTcGxpdHMgYSBwYXRoIGludG8gYW4gYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuIEFjY2VwdHMgZWl0aGVyIGFycmF5c1xuICogb2YgcGF0aCBwYXJ0cyBvciBzdHJpbmdzLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBgXG4gKiBzcGxpdChbJ2Zvby5iYXInLCAwLCAnYmF6J10pICAvLyBbJ2ZvbycsICdiYXInLCAnMCcsICdiYXonXVxuICogc3BsaXQoJ2Zvby5iYXIuMC5iYXonKSAgICAgICAgLy8gWydmb28nLCAnYmFyJywgJzAnLCAnYmF6J11cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PHN0cmluZ3xudW1iZXI+fSBwYXRoIElucHV0IHBhdGhcbiAqIEByZXR1cm4geyFBcnJheTxzdHJpbmc+fSBBcnJheSBvZiBwYXRoIHBhcnRzXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzcGxpdChwYXRoKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHBhdGgpKSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZShwYXRoKS5zcGxpdCgnLicpO1xuICB9XG4gIHJldHVybiBwYXRoLnRvU3RyaW5nKCkuc3BsaXQoJy4nKTtcbn1cblxuLyoqXG4gKiBSZWFkcyBhIHZhbHVlIGZyb20gYSBwYXRoLiAgSWYgYW55IHN1Yi1wcm9wZXJ0eSBpbiB0aGUgcGF0aCBpcyBgdW5kZWZpbmVkYCxcbiAqIHRoaXMgbWV0aG9kIHJldHVybnMgYHVuZGVmaW5lZGAgKHdpbGwgbmV2ZXIgdGhyb3cuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJvb3QgT2JqZWN0IGZyb20gd2hpY2ggdG8gZGVyZWZlcmVuY2UgcGF0aCBmcm9tXG4gKiBAcGFyYW0ge3N0cmluZyB8ICFBcnJheTxzdHJpbmd8bnVtYmVyPn0gcGF0aCBQYXRoIHRvIHJlYWRcbiAqIEBwYXJhbSB7T2JqZWN0PX0gaW5mbyBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgdG8gYGluZm9gLCB0aGUgbm9ybWFsaXplZFxuICogIChmbGF0dGVuZWQpIHBhdGggd2lsbCBiZSBzZXQgdG8gYGluZm8ucGF0aGAuXG4gKiBAcmV0dXJuIHsqfSBWYWx1ZSBhdCBwYXRoLCBvciBgdW5kZWZpbmVkYCBpZiB0aGUgcGF0aCBjb3VsZCBub3QgYmVcbiAqICBmdWxseSBkZXJlZmVyZW5jZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXQocm9vdCwgcGF0aCwgaW5mbykge1xuICBsZXQgcHJvcCA9IHJvb3Q7XG4gIGxldCBwYXJ0cyA9IHNwbGl0KHBhdGgpO1xuICAvLyBMb29wIG92ZXIgcGF0aCBwYXJ0c1swLi5uLTFdIGFuZCBkZXJlZmVyZW5jZVxuICBmb3IgKGxldCBpPTA7IGk8cGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIXByb3ApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHBhcnQgPSBwYXJ0c1tpXTtcbiAgICBwcm9wID0gcHJvcFtwYXJ0XTtcbiAgfVxuICBpZiAoaW5mbykge1xuICAgIGluZm8ucGF0aCA9IHBhcnRzLmpvaW4oJy4nKTtcbiAgfVxuICByZXR1cm4gcHJvcDtcbn1cblxuLyoqXG4gKiBTZXRzIGEgdmFsdWUgdG8gYSBwYXRoLiAgSWYgYW55IHN1Yi1wcm9wZXJ0eSBpbiB0aGUgcGF0aCBpcyBgdW5kZWZpbmVkYCxcbiAqIHRoaXMgbWV0aG9kIHdpbGwgbm8tb3AuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJvb3QgT2JqZWN0IGZyb20gd2hpY2ggdG8gZGVyZWZlcmVuY2UgcGF0aCBmcm9tXG4gKiBAcGFyYW0ge3N0cmluZyB8ICFBcnJheTxzdHJpbmd8bnVtYmVyPn0gcGF0aCBQYXRoIHRvIHNldFxuICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSB0byBzZXQgdG8gcGF0aFxuICogQHJldHVybiB7c3RyaW5nIHwgdW5kZWZpbmVkfSBUaGUgbm9ybWFsaXplZCB2ZXJzaW9uIG9mIHRoZSBpbnB1dCBwYXRoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXQocm9vdCwgcGF0aCwgdmFsdWUpIHtcbiAgbGV0IHByb3AgPSByb290O1xuICBsZXQgcGFydHMgPSBzcGxpdChwYXRoKTtcbiAgbGV0IGxhc3QgPSBwYXJ0c1twYXJ0cy5sZW5ndGgtMV07XG4gIGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7XG4gICAgLy8gTG9vcCBvdmVyIHBhdGggcGFydHNbMC4ubi0yXSBhbmQgZGVyZWZlcmVuY2VcbiAgICBmb3IgKGxldCBpPTA7IGk8cGFydHMubGVuZ3RoLTE7IGkrKykge1xuICAgICAgbGV0IHBhcnQgPSBwYXJ0c1tpXTtcbiAgICAgIHByb3AgPSBwcm9wW3BhcnRdO1xuICAgICAgaWYgKCFwcm9wKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gU2V0IHZhbHVlIHRvIG9iamVjdCBhdCBlbmQgb2YgcGF0aFxuICAgIHByb3BbbGFzdF0gPSB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBTaW1wbGUgcHJvcGVydHkgc2V0XG4gICAgcHJvcFtwYXRoXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiBwYXJ0cy5qb2luKCcuJyk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBzdHJpbmcgaXMgYSBzdHJ1Y3R1cmVkIGRhdGEgcGF0aCAoaGFzIGRvdHMpLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZC4gIFVzZSBgaXNQYXRoYCBpbnN0ZWFkLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBgXG4gKiBpc0RlZXAoJ2Zvby5iYXIuYmF6JykgLy8gdHJ1ZVxuICogaXNEZWVwKCdmb28nKSAgICAgICAgIC8vIGZhbHNlXG4gKiBgYGBcbiAqXG4gKiBAZGVwcmVjYXRlZFxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCBzdHJpbmdcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHN0cmluZyBjb250YWluZWQgb25lIG9yIG1vcmUgZG90c1xuICovXG5leHBvcnQgY29uc3QgaXNEZWVwID0gaXNQYXRoO1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbmltcG9ydCAnLi9ib290LmpzJztcblxuY29uc3QgY2FzZU1hcCA9IHt9O1xuY29uc3QgREFTSF9UT19DQU1FTCA9IC8tW2Etel0vZztcbmNvbnN0IENBTUVMX1RPX0RBU0ggPSAvKFtBLVpdKS9nO1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgTW9kdWxlIHdpdGggdXRpbGl0aWVzIGZvciBjb252ZXJ0aW5nIGJldHdlZW4gXCJkYXNoLWNhc2VcIiBhbmRcbiAqIFwiY2FtZWxDYXNlXCIgaWRlbnRpZmllcnMuXG4gKi9cblxuLyoqXG4gKiBDb252ZXJ0cyBcImRhc2gtY2FzZVwiIGlkZW50aWZpZXIgKGUuZy4gYGZvby1iYXItYmF6YCkgdG8gXCJjYW1lbENhc2VcIlxuICogKGUuZy4gYGZvb0JhckJhemApLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBkYXNoIERhc2gtY2FzZSBpZGVudGlmaWVyXG4gKiBAcmV0dXJuIHtzdHJpbmd9IENhbWVsLWNhc2UgcmVwcmVzZW50YXRpb24gb2YgdGhlIGlkZW50aWZpZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRhc2hUb0NhbWVsQ2FzZShkYXNoKSB7XG4gIHJldHVybiBjYXNlTWFwW2Rhc2hdIHx8IChcbiAgICBjYXNlTWFwW2Rhc2hdID0gZGFzaC5pbmRleE9mKCctJykgPCAwID8gZGFzaCA6IGRhc2gucmVwbGFjZShEQVNIX1RPX0NBTUVMLFxuICAgICAgKG0pID0+IG1bMV0udG9VcHBlckNhc2UoKVxuICAgIClcbiAgKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBcImNhbWVsQ2FzZVwiIGlkZW50aWZpZXIgKGUuZy4gYGZvb0JhckJhemApIHRvIFwiZGFzaC1jYXNlXCJcbiAqIChlLmcuIGBmb28tYmFyLWJhemApLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjYW1lbCBDYW1lbC1jYXNlIGlkZW50aWZpZXJcbiAqIEByZXR1cm4ge3N0cmluZ30gRGFzaC1jYXNlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBpZGVudGlmaWVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYW1lbFRvRGFzaENhc2UoY2FtZWwpIHtcbiAgcmV0dXJuIGNhc2VNYXBbY2FtZWxdIHx8IChcbiAgICBjYXNlTWFwW2NhbWVsXSA9IGNhbWVsLnJlcGxhY2UoQ0FNRUxfVE9fREFTSCwgJy0kMScpLnRvTG93ZXJDYXNlKClcbiAgKTtcbn1cbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5cbi8qKlxuICogQGZpbGVvdmVydmlld1xuICpcbiAqIFRoaXMgbW9kdWxlIHByb3ZpZGVzIGEgbnVtYmVyIG9mIHN0cmF0ZWdpZXMgZm9yIGVucXVldWluZyBhc3luY2hyb25vdXNcbiAqIHRhc2tzLiBFYWNoIHN1Yi1tb2R1bGUgcHJvdmlkZXMgYSBzdGFuZGFyZCBgcnVuKGZuKWAgaW50ZXJmYWNlIHRoYXQgcmV0dXJucyBhXG4gKiBoYW5kbGUsIGFuZCBhIGBjYW5jZWwoaGFuZGxlKWAgaW50ZXJmYWNlIGZvciBjYW5jZWxpbmcgYXN5bmMgdGFza3MgYmVmb3JlXG4gKiB0aGV5IHJ1bi5cbiAqXG4gKiBAc3VtbWFyeSBNb2R1bGUgdGhhdCBwcm92aWRlcyBhIG51bWJlciBvZiBzdHJhdGVnaWVzIGZvciBlbnF1ZXVpbmdcbiAqIGFzeW5jaHJvbm91cyB0YXNrcy5cbiAqL1xuXG5pbXBvcnQgJy4vYm9vdC5qcyc7XG5cbi8vIE1pY3JvdGFzayBpbXBsZW1lbnRlZCB1c2luZyBNdXRhdGlvbiBPYnNlcnZlclxubGV0IG1pY3JvdGFza0N1cnJIYW5kbGUgPSAwO1xubGV0IG1pY3JvdGFza0xhc3RIYW5kbGUgPSAwO1xubGV0IG1pY3JvdGFza0NhbGxiYWNrcyA9IFtdO1xubGV0IG1pY3JvdGFza05vZGVDb250ZW50ID0gMDtcbmxldCBtaWNyb3Rhc2tOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xubmV3IHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyKG1pY3JvdGFza0ZsdXNoKS5vYnNlcnZlKG1pY3JvdGFza05vZGUsIHtjaGFyYWN0ZXJEYXRhOiB0cnVlfSk7XG5cbmZ1bmN0aW9uIG1pY3JvdGFza0ZsdXNoKCkge1xuICBjb25zdCBsZW4gPSBtaWNyb3Rhc2tDYWxsYmFja3MubGVuZ3RoO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgbGV0IGNiID0gbWljcm90YXNrQ2FsbGJhY2tzW2ldO1xuICAgIGlmIChjYikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2IoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7IHRocm93IGU7IH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBtaWNyb3Rhc2tDYWxsYmFja3Muc3BsaWNlKDAsIGxlbik7XG4gIG1pY3JvdGFza0xhc3RIYW5kbGUgKz0gbGVuO1xufVxuXG4vKipcbiAqIEFzeW5jIGludGVyZmFjZSB3cmFwcGVyIGFyb3VuZCBgc2V0VGltZW91dGAuXG4gKlxuICogQG5hbWVzcGFjZVxuICogQHN1bW1hcnkgQXN5bmMgaW50ZXJmYWNlIHdyYXBwZXIgYXJvdW5kIGBzZXRUaW1lb3V0YC5cbiAqL1xuY29uc3QgdGltZU91dCA9IHtcbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdWItbW9kdWxlIHdpdGggdGhlIGFzeW5jIGludGVyZmFjZSBwcm92aWRpbmcgdGhlIHByb3ZpZGVkXG4gICAqIGRlbGF5LlxuICAgKlxuICAgKiBAbWVtYmVyb2YgdGltZU91dFxuICAgKiBAcGFyYW0ge251bWJlcj19IGRlbGF5IFRpbWUgdG8gd2FpdCBiZWZvcmUgY2FsbGluZyBjYWxsYmFja3MgaW4gbXNcbiAgICogQHJldHVybiB7IUFzeW5jSW50ZXJmYWNlfSBBbiBhc3luYyB0aW1lb3V0IGludGVyZmFjZVxuICAgKi9cbiAgYWZ0ZXIoZGVsYXkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcnVuKGZuKSB7IHJldHVybiB3aW5kb3cuc2V0VGltZW91dChmbiwgZGVsYXkpOyB9LFxuICAgICAgY2FuY2VsKGhhbmRsZSkge1xuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGhhbmRsZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgLyoqXG4gICAqIEVucXVldWVzIGEgZnVuY3Rpb24gY2FsbGVkIGluIHRoZSBuZXh0IHRhc2suXG4gICAqXG4gICAqIEBtZW1iZXJvZiB0aW1lT3V0XG4gICAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBmbiBDYWxsYmFjayB0byBydW5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBkZWxheSBEZWxheSBpbiBtaWxsaXNlY29uZHNcbiAgICogQHJldHVybiB7bnVtYmVyfSBIYW5kbGUgdXNlZCBmb3IgY2FuY2VsaW5nIHRhc2tcbiAgICovXG4gIHJ1bihmbiwgZGVsYXkpIHtcbiAgICByZXR1cm4gd2luZG93LnNldFRpbWVvdXQoZm4sIGRlbGF5KTtcbiAgfSxcbiAgLyoqXG4gICAqIENhbmNlbHMgYSBwcmV2aW91c2x5IGVucXVldWVkIGB0aW1lT3V0YCBjYWxsYmFjay5cbiAgICpcbiAgICogQG1lbWJlcm9mIHRpbWVPdXRcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhhbmRsZSBIYW5kbGUgcmV0dXJuZWQgZnJvbSBgcnVuYCBvZiBjYWxsYmFjayB0byBjYW5jZWxcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIGNhbmNlbChoYW5kbGUpIHtcbiAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGhhbmRsZSk7XG4gIH1cbn07XG5leHBvcnQge3RpbWVPdXR9O1xuXG4vKipcbiAqIEFzeW5jIGludGVyZmFjZSB3cmFwcGVyIGFyb3VuZCBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lYC5cbiAqXG4gKiBAbmFtZXNwYWNlXG4gKiBAc3VtbWFyeSBBc3luYyBpbnRlcmZhY2Ugd3JhcHBlciBhcm91bmQgYHJlcXVlc3RBbmltYXRpb25GcmFtZWAuXG4gKi9cbmNvbnN0IGFuaW1hdGlvbkZyYW1lID0ge1xuICAvKipcbiAgICogRW5xdWV1ZXMgYSBmdW5jdGlvbiBjYWxsZWQgYXQgYHJlcXVlc3RBbmltYXRpb25GcmFtZWAgdGltaW5nLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgYW5pbWF0aW9uRnJhbWVcbiAgICogQHBhcmFtIHtmdW5jdGlvbihudW1iZXIpOnZvaWR9IGZuIENhbGxiYWNrIHRvIHJ1blxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IEhhbmRsZSB1c2VkIGZvciBjYW5jZWxpbmcgdGFza1xuICAgKi9cbiAgcnVuKGZuKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZm4pO1xuICB9LFxuICAvKipcbiAgICogQ2FuY2VscyBhIHByZXZpb3VzbHkgZW5xdWV1ZWQgYGFuaW1hdGlvbkZyYW1lYCBjYWxsYmFjay5cbiAgICpcbiAgICogQG1lbWJlcm9mIGFuaW1hdGlvbkZyYW1lXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoYW5kbGUgSGFuZGxlIHJldHVybmVkIGZyb20gYHJ1bmAgb2YgY2FsbGJhY2sgdG8gY2FuY2VsXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBjYW5jZWwoaGFuZGxlKSB7XG4gICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKGhhbmRsZSk7XG4gIH1cbn07XG5leHBvcnQge2FuaW1hdGlvbkZyYW1lfTtcblxuLyoqXG4gKiBBc3luYyBpbnRlcmZhY2Ugd3JhcHBlciBhcm91bmQgYHJlcXVlc3RJZGxlQ2FsbGJhY2tgLiAgRmFsbHMgYmFjayB0b1xuICogYHNldFRpbWVvdXRgIG9uIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgYHJlcXVlc3RJZGxlQ2FsbGJhY2tgLlxuICpcbiAqIEBuYW1lc3BhY2VcbiAqIEBzdW1tYXJ5IEFzeW5jIGludGVyZmFjZSB3cmFwcGVyIGFyb3VuZCBgcmVxdWVzdElkbGVDYWxsYmFja2AuXG4gKi9cbmNvbnN0IGlkbGVQZXJpb2QgPSB7XG4gIC8qKlxuICAgKiBFbnF1ZXVlcyBhIGZ1bmN0aW9uIGNhbGxlZCBhdCBgcmVxdWVzdElkbGVDYWxsYmFja2AgdGltaW5nLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgaWRsZVBlcmlvZFxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFJZGxlRGVhZGxpbmUpOnZvaWR9IGZuIENhbGxiYWNrIHRvIHJ1blxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IEhhbmRsZSB1c2VkIGZvciBjYW5jZWxpbmcgdGFza1xuICAgKi9cbiAgcnVuKGZuKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5yZXF1ZXN0SWRsZUNhbGxiYWNrID9cbiAgICAgIHdpbmRvdy5yZXF1ZXN0SWRsZUNhbGxiYWNrKGZuKSA6XG4gICAgICB3aW5kb3cuc2V0VGltZW91dChmbiwgMTYpO1xuICB9LFxuICAvKipcbiAgICogQ2FuY2VscyBhIHByZXZpb3VzbHkgZW5xdWV1ZWQgYGlkbGVQZXJpb2RgIGNhbGxiYWNrLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgaWRsZVBlcmlvZFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGFuZGxlIEhhbmRsZSByZXR1cm5lZCBmcm9tIGBydW5gIG9mIGNhbGxiYWNrIHRvIGNhbmNlbFxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgY2FuY2VsKGhhbmRsZSkge1xuICAgIHdpbmRvdy5jYW5jZWxJZGxlQ2FsbGJhY2sgP1xuICAgICAgd2luZG93LmNhbmNlbElkbGVDYWxsYmFjayhoYW5kbGUpIDpcbiAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoaGFuZGxlKTtcbiAgfVxufTtcbmV4cG9ydCB7aWRsZVBlcmlvZH07XG5cbi8qKlxuICogQXN5bmMgaW50ZXJmYWNlIGZvciBlbnF1ZXVpbmcgY2FsbGJhY2tzIHRoYXQgcnVuIGF0IG1pY3JvdGFzayB0aW1pbmcuXG4gKlxuICogTm90ZSB0aGF0IG1pY3JvdGFzayB0aW1pbmcgaXMgYWNoaWV2ZWQgdmlhIGEgc2luZ2xlIGBNdXRhdGlvbk9ic2VydmVyYCxcbiAqIGFuZCB0aHVzIGNhbGxiYWNrcyBlbnF1ZXVlZCB3aXRoIHRoaXMgQVBJIHdpbGwgYWxsIHJ1biBpbiBhIHNpbmdsZVxuICogYmF0Y2gsIGFuZCBub3QgaW50ZXJsZWF2ZWQgd2l0aCBvdGhlciBtaWNyb3Rhc2tzIHN1Y2ggYXMgcHJvbWlzZXMuXG4gKiBQcm9taXNlcyBhcmUgYXZvaWRlZCBhcyBhbiBpbXBsZW1lbnRhdGlvbiBjaG9pY2UgZm9yIHRoZSB0aW1lIGJlaW5nXG4gKiBkdWUgdG8gU2FmYXJpIGJ1Z3MgdGhhdCBjYXVzZSBQcm9taXNlcyB0byBsYWNrIG1pY3JvdGFzayBndWFyYW50ZWVzLlxuICpcbiAqIEBuYW1lc3BhY2VcbiAqIEBzdW1tYXJ5IEFzeW5jIGludGVyZmFjZSBmb3IgZW5xdWV1aW5nIGNhbGxiYWNrcyB0aGF0IHJ1biBhdCBtaWNyb3Rhc2tcbiAqICAgdGltaW5nLlxuICovXG5jb25zdCBtaWNyb1Rhc2sgPSB7XG5cbiAgLyoqXG4gICAqIEVucXVldWVzIGEgZnVuY3Rpb24gY2FsbGVkIGF0IG1pY3JvdGFzayB0aW1pbmcuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtaWNyb1Rhc2tcbiAgICogQHBhcmFtIHshRnVuY3Rpb249fSBjYWxsYmFjayBDYWxsYmFjayB0byBydW5cbiAgICogQHJldHVybiB7bnVtYmVyfSBIYW5kbGUgdXNlZCBmb3IgY2FuY2VsaW5nIHRhc2tcbiAgICovXG4gIHJ1bihjYWxsYmFjaykge1xuICAgIG1pY3JvdGFza05vZGUudGV4dENvbnRlbnQgPSBtaWNyb3Rhc2tOb2RlQ29udGVudCsrO1xuICAgIG1pY3JvdGFza0NhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICByZXR1cm4gbWljcm90YXNrQ3VyckhhbmRsZSsrO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDYW5jZWxzIGEgcHJldmlvdXNseSBlbnF1ZXVlZCBgbWljcm9UYXNrYCBjYWxsYmFjay5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1pY3JvVGFza1xuICAgKiBAcGFyYW0ge251bWJlcn0gaGFuZGxlIEhhbmRsZSByZXR1cm5lZCBmcm9tIGBydW5gIG9mIGNhbGxiYWNrIHRvIGNhbmNlbFxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgY2FuY2VsKGhhbmRsZSkge1xuICAgIGNvbnN0IGlkeCA9IGhhbmRsZSAtIG1pY3JvdGFza0xhc3RIYW5kbGU7XG4gICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICBpZiAoIW1pY3JvdGFza0NhbGxiYWNrc1tpZHhdKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBhc3luYyBoYW5kbGU6ICcgKyBoYW5kbGUpO1xuICAgICAgfVxuICAgICAgbWljcm90YXNrQ2FsbGJhY2tzW2lkeF0gPSBudWxsO1xuICAgIH1cbiAgfVxuXG59O1xuZXhwb3J0IHttaWNyb1Rhc2t9O1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbmltcG9ydCAnLi4vdXRpbHMvYm9vdC5qcyc7XG5cbmltcG9ydCB7IGRlZHVwaW5nTWl4aW4gfSBmcm9tICcuLi91dGlscy9taXhpbi5qcyc7XG5pbXBvcnQgeyBtaWNyb1Rhc2sgfSBmcm9tICcuLi91dGlscy9hc3luYy5qcyc7XG5pbXBvcnQgeyB3cmFwIH0gZnJvbSAnLi4vdXRpbHMvd3JhcC5qcyc7XG5cbi8qKiBAY29uc3QgeyFBc3luY0ludGVyZmFjZX0gKi9cbmNvbnN0IG1pY3JvdGFzayA9IG1pY3JvVGFzaztcblxuLyoqXG4gKiBFbGVtZW50IGNsYXNzIG1peGluIHRoYXQgcHJvdmlkZXMgYmFzaWMgbWV0YS1wcm9ncmFtbWluZyBmb3IgY3JlYXRpbmcgb25lXG4gKiBvciBtb3JlIHByb3BlcnR5IGFjY2Vzc29ycyAoZ2V0dGVyL3NldHRlciBwYWlyKSB0aGF0IGVucXVldWUgYW4gYXN5bmNcbiAqIChiYXRjaGVkKSBgX3Byb3BlcnRpZXNDaGFuZ2VkYCBjYWxsYmFjay5cbiAqXG4gKiBGb3IgYmFzaWMgdXNhZ2Ugb2YgdGhpcyBtaXhpbiwgY2FsbCBgTXlDbGFzcy5jcmVhdGVQcm9wZXJ0aWVzKHByb3BzKWBcbiAqIG9uY2UgYXQgY2xhc3MgZGVmaW5pdGlvbiB0aW1lIHRvIGNyZWF0ZSBwcm9wZXJ0eSBhY2Nlc3NvcnMgZm9yIHByb3BlcnRpZXNcbiAqIG5hbWVkIGluIHByb3BzLCBpbXBsZW1lbnQgYF9wcm9wZXJ0aWVzQ2hhbmdlZGAgdG8gcmVhY3QgYXMgZGVzaXJlZCB0b1xuICogcHJvcGVydHkgY2hhbmdlcywgYW5kIGltcGxlbWVudCBgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKWAgYW5kXG4gKiBpbmNsdWRlIGxvd2VyY2FzZSB2ZXJzaW9ucyBvZiBhbnkgcHJvcGVydHkgbmFtZXMgdGhhdCBzaG91bGQgYmUgc2V0IGZyb21cbiAqIGF0dHJpYnV0ZXMuIExhc3QsIGNhbGwgYHRoaXMuX2VuYWJsZVByb3BlcnRpZXMoKWAgaW4gdGhlIGVsZW1lbnQnc1xuICogYGNvbm5lY3RlZENhbGxiYWNrYCB0byBlbmFibGUgdGhlIGFjY2Vzc29ycy5cbiAqXG4gKiBAbWl4aW5GdW5jdGlvblxuICogQHBvbHltZXJcbiAqIEBzdW1tYXJ5IEVsZW1lbnQgY2xhc3MgbWl4aW4gZm9yIHJlYWN0aW5nIHRvIHByb3BlcnR5IGNoYW5nZXMgZnJvbVxuICogICBnZW5lcmF0ZWQgcHJvcGVydHkgYWNjZXNzb3JzLlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7ZnVuY3Rpb24obmV3OlQpfSBzdXBlckNsYXNzIENsYXNzIHRvIGFwcGx5IG1peGluIHRvLlxuICogQHJldHVybiB7ZnVuY3Rpb24obmV3OlQpfSBzdXBlckNsYXNzIHdpdGggbWl4aW4gYXBwbGllZC5cbiAqL1xuZXhwb3J0IGNvbnN0IFByb3BlcnRpZXNDaGFuZ2VkID0gZGVkdXBpbmdNaXhpbihcbiAgICAvKipcbiAgICAgKiBAdGVtcGxhdGUgVFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24obmV3OlQpfSBzdXBlckNsYXNzIENsYXNzIHRvIGFwcGx5IG1peGluIHRvLlxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9uKG5ldzpUKX0gc3VwZXJDbGFzcyB3aXRoIG1peGluIGFwcGxpZWQuXG4gICAgICovXG4gICAgKHN1cGVyQ2xhc3MpID0+IHtcblxuICAvKipcbiAgICogQHBvbHltZXJcbiAgICogQG1peGluQ2xhc3NcbiAgICogQGltcGxlbWVudHMge1BvbHltZXJfUHJvcGVydGllc0NoYW5nZWR9XG4gICAqIEB1bnJlc3RyaWN0ZWRcbiAgICovXG4gIGNsYXNzIFByb3BlcnRpZXNDaGFuZ2VkIGV4dGVuZHMgc3VwZXJDbGFzcyB7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIHByb3BlcnR5IGFjY2Vzc29ycyBmb3IgdGhlIGdpdmVuIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBwYXJhbSB7IU9iamVjdH0gcHJvcHMgT2JqZWN0IHdob3NlIGtleXMgYXJlIG5hbWVzIG9mIGFjY2Vzc29ycy5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVQcm9wZXJ0aWVzKHByb3BzKSB7XG4gICAgICBjb25zdCBwcm90byA9IHRoaXMucHJvdG90eXBlO1xuICAgICAgZm9yIChsZXQgcHJvcCBpbiBwcm9wcykge1xuICAgICAgICAvLyBkb24ndCBzdG9tcCBhbiBleGlzdGluZyBhY2Nlc3NvclxuICAgICAgICBpZiAoIShwcm9wIGluIHByb3RvKSkge1xuICAgICAgICAgIHByb3RvLl9jcmVhdGVQcm9wZXJ0eUFjY2Vzc29yKHByb3ApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBhdHRyaWJ1dGUgbmFtZSB0aGF0IGNvcnJlc3BvbmRzIHRvIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgKiBUaGUgYXR0cmlidXRlIG5hbWUgaXMgdGhlIGxvd2VyY2FzZWQgcHJvcGVydHkgbmFtZS4gT3ZlcnJpZGUgdG9cbiAgICAgKiBjdXN0b21pemUgdGhpcyBtYXBwaW5nLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSB0byBjb252ZXJ0XG4gICAgICogQHJldHVybiB7c3RyaW5nfSBBdHRyaWJ1dGUgbmFtZSBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBhdHRyaWJ1dGVOYW1lRm9yUHJvcGVydHkocHJvcGVydHkpIHtcbiAgICAgIHJldHVybiBwcm9wZXJ0eS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIHBvaW50IHRvIHByb3ZpZGUgYSB0eXBlIHRvIHdoaWNoIHRvIGRlc2VyaWFsaXplIGEgdmFsdWUgdG9cbiAgICAgKiBhIGdpdmVuIHByb3BlcnR5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgcHJvcGVydHlcbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyB0eXBlRm9yUHJvcGVydHkobmFtZSkgeyB9IC8vZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNldHRlci9nZXR0ZXIgcGFpciBmb3IgdGhlIG5hbWVkIHByb3BlcnR5IHdpdGggaXRzIG93blxuICAgICAqIGxvY2FsIHN0b3JhZ2UuICBUaGUgZ2V0dGVyIHJldHVybnMgdGhlIHZhbHVlIGluIHRoZSBsb2NhbCBzdG9yYWdlLFxuICAgICAqIGFuZCB0aGUgc2V0dGVyIGNhbGxzIGBfc2V0UHJvcGVydHlgLCB3aGljaCB1cGRhdGVzIHRoZSBsb2NhbCBzdG9yYWdlXG4gICAgICogZm9yIHRoZSBwcm9wZXJ0eSBhbmQgZW5xdWV1ZXMgYSBgX3Byb3BlcnRpZXNDaGFuZ2VkYCBjYWxsYmFjay5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIG1heSBiZSBjYWxsZWQgb24gYSBwcm90b3R5cGUgb3IgYW4gaW5zdGFuY2UuICBDYWxsaW5nXG4gICAgICogdGhpcyBtZXRob2QgbWF5IG92ZXJ3cml0ZSBhIHByb3BlcnR5IHZhbHVlIHRoYXQgYWxyZWFkeSBleGlzdHMgb25cbiAgICAgKiB0aGUgcHJvdG90eXBlL2luc3RhbmNlIGJ5IGNyZWF0aW5nIHRoZSBhY2Nlc3Nvci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHRoZSBwcm9wZXJ0eVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHJlYWRPbmx5IFdoZW4gdHJ1ZSwgbm8gc2V0dGVyIGlzIGNyZWF0ZWQ7IHRoZVxuICAgICAqICAgcHJvdGVjdGVkIGBfc2V0UHJvcGVydHlgIGZ1bmN0aW9uIG11c3QgYmUgdXNlZCB0byBzZXQgdGhlIHByb3BlcnR5XG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX2NyZWF0ZVByb3BlcnR5QWNjZXNzb3IocHJvcGVydHksIHJlYWRPbmx5KSB7XG4gICAgICB0aGlzLl9hZGRQcm9wZXJ0eVRvQXR0cmlidXRlTWFwKHByb3BlcnR5KTtcbiAgICAgIGlmICghdGhpcy5oYXNPd25Qcm9wZXJ0eShKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdfX2RhdGFIYXNBY2Nlc3NvcicsIHRoaXMpKSkge1xuICAgICAgICB0aGlzLl9fZGF0YUhhc0FjY2Vzc29yID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5fX2RhdGFIYXNBY2Nlc3Nvcik7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuX19kYXRhSGFzQWNjZXNzb3JbcHJvcGVydHldKSB7XG4gICAgICAgIHRoaXMuX19kYXRhSGFzQWNjZXNzb3JbcHJvcGVydHldID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fZGVmaW5lUHJvcGVydHlBY2Nlc3Nvcihwcm9wZXJ0eSwgcmVhZE9ubHkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIGdpdmVuIGBwcm9wZXJ0eWAgdG8gYSBtYXAgbWF0Y2hpbmcgYXR0cmlidXRlIG5hbWVzXG4gICAgICogdG8gcHJvcGVydHkgbmFtZXMsIHVzaW5nIGBhdHRyaWJ1dGVOYW1lRm9yUHJvcGVydHlgLiBUaGlzIG1hcCBpc1xuICAgICAqIHVzZWQgd2hlbiBkZXNlcmlhbGl6aW5nIGF0dHJpYnV0ZSB2YWx1ZXMgdG8gcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHRoZSBwcm9wZXJ0eVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9hZGRQcm9wZXJ0eVRvQXR0cmlidXRlTWFwKHByb3BlcnR5KSB7XG4gICAgICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnX19kYXRhQXR0cmlidXRlcycsIHRoaXMpKSkge1xuICAgICAgICB0aGlzLl9fZGF0YUF0dHJpYnV0ZXMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLl9fZGF0YUF0dHJpYnV0ZXMpO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLl9fZGF0YUF0dHJpYnV0ZXNbcHJvcGVydHldKSB7XG4gICAgICAgIGNvbnN0IGF0dHIgPSB0aGlzLmNvbnN0cnVjdG9yLmF0dHJpYnV0ZU5hbWVGb3JQcm9wZXJ0eShwcm9wZXJ0eSk7XG4gICAgICAgIHRoaXMuX19kYXRhQXR0cmlidXRlc1thdHRyXSA9IHByb3BlcnR5O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlZmluZXMgYSBwcm9wZXJ0eSBhY2Nlc3NvciBmb3IgdGhlIGdpdmVuIHByb3BlcnR5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHRoZSBwcm9wZXJ0eVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHJlYWRPbmx5IFdoZW4gdHJ1ZSwgbm8gc2V0dGVyIGlzIGNyZWF0ZWRcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgICBfZGVmaW5lUHJvcGVydHlBY2Nlc3Nvcihwcm9wZXJ0eSwgcmVhZE9ubHkpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBwcm9wZXJ0eSwge1xuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSB2YWxpZC1qc2RvYyAqL1xuICAgICAgICAvKiogQHRoaXMge1Byb3BlcnRpZXNDaGFuZ2VkfSAqL1xuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2dldFByb3BlcnR5KHByb3BlcnR5KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqIEB0aGlzIHtQcm9wZXJ0aWVzQ2hhbmdlZH0gKi9cbiAgICAgICAgc2V0OiByZWFkT25seSA/IGZ1bmN0aW9uICgpIHt9IDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgdGhpcy5fc2V0UHJvcGVydHkocHJvcGVydHksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlICovXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gICAgICB0aGlzLl9fZGF0YUVuYWJsZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuX19kYXRhUmVhZHkgPSBmYWxzZTtcbiAgICAgIHRoaXMuX19kYXRhSW52YWxpZCA9IGZhbHNlO1xuICAgICAgdGhpcy5fX2RhdGEgPSB7fTtcbiAgICAgIHRoaXMuX19kYXRhUGVuZGluZyA9IG51bGw7XG4gICAgICB0aGlzLl9fZGF0YU9sZCA9IG51bGw7XG4gICAgICB0aGlzLl9fZGF0YUluc3RhbmNlUHJvcHMgPSBudWxsO1xuICAgICAgdGhpcy5fX3NlcmlhbGl6aW5nID0gZmFsc2U7XG4gICAgICB0aGlzLl9pbml0aWFsaXplUHJvcGVydGllcygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExpZmVjeWNsZSBjYWxsYmFjayBjYWxsZWQgd2hlbiBwcm9wZXJ0aWVzIGFyZSBlbmFibGVkIHZpYVxuICAgICAqIGBfZW5hYmxlUHJvcGVydGllc2AuXG4gICAgICpcbiAgICAgKiBVc2VycyBtYXkgb3ZlcnJpZGUgdGhpcyBmdW5jdGlvbiB0byBpbXBsZW1lbnQgYmVoYXZpb3IgdGhhdCBpc1xuICAgICAqIGRlcGVuZGVudCBvbiB0aGUgZWxlbWVudCBoYXZpbmcgaXRzIHByb3BlcnR5IGRhdGEgaW5pdGlhbGl6ZWQsIGUuZy5cbiAgICAgKiBmcm9tIGRlZmF1bHRzIChpbml0aWFsaXplZCBmcm9tIGBjb25zdHJ1Y3RvcmAsIGBfaW5pdGlhbGl6ZVByb3BlcnRpZXNgKSxcbiAgICAgKiBgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrYCwgb3IgdmFsdWVzIHByb3BhZ2F0ZWQgZnJvbSBob3N0IGUuZy4gdmlhXG4gICAgICogYmluZGluZ3MuICBgc3VwZXIucmVhZHkoKWAgbXVzdCBiZSBjYWxsZWQgdG8gZW5zdXJlIHRoZSBkYXRhIHN5c3RlbVxuICAgICAqIGJlY29tZXMgZW5hYmxlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHB1YmxpY1xuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIHJlYWR5KCkge1xuICAgICAgdGhpcy5fX2RhdGFSZWFkeSA9IHRydWU7XG4gICAgICB0aGlzLl9mbHVzaFByb3BlcnRpZXMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgbG9jYWwgc3RvcmFnZSBmb3IgcHJvcGVydHkgYWNjZXNzb3JzLlxuICAgICAqXG4gICAgICogUHJvdmlkZWQgYXMgYW4gb3ZlcnJpZGUgcG9pbnQgZm9yIHBlcmZvcm1pbmcgYW55IHNldHVwIHdvcmsgcHJpb3JcbiAgICAgKiB0byBpbml0aWFsaXppbmcgdGhlIHByb3BlcnR5IGFjY2Vzc29yIHN5c3RlbS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9pbml0aWFsaXplUHJvcGVydGllcygpIHtcbiAgICAgIC8vIENhcHR1cmUgaW5zdGFuY2UgcHJvcGVydGllczsgdGhlc2Ugd2lsbCBiZSBzZXQgaW50byBhY2Nlc3NvcnNcbiAgICAgIC8vIGR1cmluZyBmaXJzdCBmbHVzaC4gRG9uJ3Qgc2V0IHRoZW0gaGVyZSwgc2luY2Ugd2Ugd2FudFxuICAgICAgLy8gdGhlc2UgdG8gb3ZlcndyaXRlIGRlZmF1bHRzL2NvbnN0cnVjdG9yIGFzc2lnbm1lbnRzXG4gICAgICBmb3IgKGxldCBwIGluIHRoaXMuX19kYXRhSGFzQWNjZXNzb3IpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzT3duUHJvcGVydHkocCkpIHtcbiAgICAgICAgICB0aGlzLl9fZGF0YUluc3RhbmNlUHJvcHMgPSB0aGlzLl9fZGF0YUluc3RhbmNlUHJvcHMgfHwge307XG4gICAgICAgICAgdGhpcy5fX2RhdGFJbnN0YW5jZVByb3BzW3BdID0gdGhpc1twXTtcbiAgICAgICAgICBkZWxldGUgdGhpc1twXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGxlZCBhdCByZWFkeSB0aW1lIHdpdGggYmFnIG9mIGluc3RhbmNlIHByb3BlcnRpZXMgdGhhdCBvdmVyd3JvdGVcbiAgICAgKiBhY2Nlc3NvcnMgd2hlbiB0aGUgZWxlbWVudCB1cGdyYWRlZC5cbiAgICAgKlxuICAgICAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHNldHMgdGhlc2UgcHJvcGVydGllcyBiYWNrIGludG8gdGhlXG4gICAgICogc2V0dGVyIGF0IHJlYWR5IHRpbWUuICBUaGlzIG1ldGhvZCBpcyBwcm92aWRlZCBhcyBhbiBvdmVycmlkZVxuICAgICAqIHBvaW50IGZvciBjdXN0b21pemluZyBvciBwcm92aWRpbmcgbW9yZSBlZmZpY2llbnQgaW5pdGlhbGl6YXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgQmFnIG9mIHByb3BlcnR5IHZhbHVlcyB0aGF0IHdlcmUgb3ZlcndyaXR0ZW5cbiAgICAgKiAgIHdoZW4gY3JlYXRpbmcgcHJvcGVydHkgYWNjZXNzb3JzLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9pbml0aWFsaXplSW5zdGFuY2VQcm9wZXJ0aWVzKHByb3BzKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHByb3BzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBsb2NhbCBzdG9yYWdlIGZvciBhIHByb3BlcnR5ICh2aWEgYF9zZXRQZW5kaW5nUHJvcGVydHlgKVxuICAgICAqIGFuZCBlbnF1ZXVlcyBhIGBfcHJvZXBydGllc0NoYW5nZWRgIGNhbGxiYWNrLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgdGhlIHByb3BlcnR5XG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSB0byBzZXRcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfc2V0UHJvcGVydHkocHJvcGVydHksIHZhbHVlKSB7XG4gICAgICBpZiAodGhpcy5fc2V0UGVuZGluZ1Byb3BlcnR5KHByb3BlcnR5LCB2YWx1ZSkpIHtcbiAgICAgICAgdGhpcy5faW52YWxpZGF0ZVByb3BlcnRpZXMoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSBmb3IgdGhlIGdpdmVuIHByb3BlcnR5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHByb3BlcnR5XG4gICAgICogQHJldHVybiB7Kn0gVmFsdWUgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfZ2V0UHJvcGVydHkocHJvcGVydHkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YVtwcm9wZXJ0eV07XG4gICAgfVxuXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBsb2NhbCBzdG9yYWdlIGZvciBhIHByb3BlcnR5LCByZWNvcmRzIHRoZSBwcmV2aW91cyB2YWx1ZSxcbiAgICAgKiBhbmQgYWRkcyBpdCB0byB0aGUgc2V0IG9mIFwicGVuZGluZyBjaGFuZ2VzXCIgdGhhdCB3aWxsIGJlIHBhc3NlZCB0byB0aGVcbiAgICAgKiBgX3Byb3BlcnRpZXNDaGFuZ2VkYCBjYWxsYmFjay4gIFRoaXMgbWV0aG9kIGRvZXMgbm90IGVucXVldWUgdGhlXG4gICAgICogYF9wcm9wZXJ0aWVzQ2hhbmdlZGAgY2FsbGJhY2suXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgTmFtZSBvZiB0aGUgcHJvcGVydHlcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHNldFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGV4dCBOb3QgdXNlZCBoZXJlOyBhZmZvcmRhbmNlIGZvciBjbG9zdXJlXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIHRoZSBwcm9wZXJ0eSBjaGFuZ2VkXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9zZXRQZW5kaW5nUHJvcGVydHkocHJvcGVydHksIHZhbHVlLCBleHQpIHtcbiAgICAgIGxldCBvbGQgPSB0aGlzLl9fZGF0YVtwcm9wZXJ0eV07XG4gICAgICBsZXQgY2hhbmdlZCA9IHRoaXMuX3Nob3VsZFByb3BlcnR5Q2hhbmdlKHByb3BlcnR5LCB2YWx1ZSwgb2xkKTtcbiAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgIGlmICghdGhpcy5fX2RhdGFQZW5kaW5nKSB7XG4gICAgICAgICAgdGhpcy5fX2RhdGFQZW5kaW5nID0ge307XG4gICAgICAgICAgdGhpcy5fX2RhdGFPbGQgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICAvLyBFbnN1cmUgb2xkIGlzIGNhcHR1cmVkIGZyb20gdGhlIGxhc3QgdHVyblxuICAgICAgICBpZiAodGhpcy5fX2RhdGFPbGQgJiYgIShwcm9wZXJ0eSBpbiB0aGlzLl9fZGF0YU9sZCkpIHtcbiAgICAgICAgICB0aGlzLl9fZGF0YU9sZFtwcm9wZXJ0eV0gPSBvbGQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fX2RhdGFbcHJvcGVydHldID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX19kYXRhUGVuZGluZ1twcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjaGFuZ2VkO1xuICAgIH1cbiAgICAvKiBlc2xpbnQtZW5hYmxlICovXG5cbiAgICAvKipcbiAgICAgKiBNYXJrcyB0aGUgcHJvcGVydGllcyBhcyBpbnZhbGlkLCBhbmQgZW5xdWV1ZXMgYW4gYXN5bmNcbiAgICAgKiBgX3Byb3BlcnRpZXNDaGFuZ2VkYCBjYWxsYmFjay5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9pbnZhbGlkYXRlUHJvcGVydGllcygpIHtcbiAgICAgIGlmICghdGhpcy5fX2RhdGFJbnZhbGlkICYmIHRoaXMuX19kYXRhUmVhZHkpIHtcbiAgICAgICAgdGhpcy5fX2RhdGFJbnZhbGlkID0gdHJ1ZTtcbiAgICAgICAgbWljcm90YXNrLnJ1bigoKSA9PiB7XG4gICAgICAgICAgaWYgKHRoaXMuX19kYXRhSW52YWxpZCkge1xuICAgICAgICAgICAgdGhpcy5fX2RhdGFJbnZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9mbHVzaFByb3BlcnRpZXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGwgdG8gZW5hYmxlIHByb3BlcnR5IGFjY2Vzc29yIHByb2Nlc3NpbmcuIEJlZm9yZSB0aGlzIG1ldGhvZCBpc1xuICAgICAqIGNhbGxlZCBhY2Nlc3NvciB2YWx1ZXMgd2lsbCBiZSBzZXQgYnV0IHNpZGUgZWZmZWN0cyBhcmVcbiAgICAgKiBxdWV1ZWQuIFdoZW4gY2FsbGVkLCBhbnkgcGVuZGluZyBzaWRlIGVmZmVjdHMgb2NjdXIgaW1tZWRpYXRlbHkuXG4gICAgICogRm9yIGVsZW1lbnRzLCBnZW5lcmFsbHkgYGNvbm5lY3RlZENhbGxiYWNrYCBpcyBhIG5vcm1hbCBzcG90IHRvIGRvIHNvLlxuICAgICAqIEl0IGlzIHNhZmUgdG8gY2FsbCB0aGlzIG1ldGhvZCBtdWx0aXBsZSB0aW1lcyBhcyBpdCBvbmx5IHR1cm5zIG9uXG4gICAgICogcHJvcGVydHkgYWNjZXNzb3JzIG9uY2UuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfZW5hYmxlUHJvcGVydGllcygpIHtcbiAgICAgIGlmICghdGhpcy5fX2RhdGFFbmFibGVkKSB7XG4gICAgICAgIHRoaXMuX19kYXRhRW5hYmxlZCA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLl9fZGF0YUluc3RhbmNlUHJvcHMpIHtcbiAgICAgICAgICB0aGlzLl9pbml0aWFsaXplSW5zdGFuY2VQcm9wZXJ0aWVzKHRoaXMuX19kYXRhSW5zdGFuY2VQcm9wcyk7XG4gICAgICAgICAgdGhpcy5fX2RhdGFJbnN0YW5jZVByb3BzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlYWR5KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbHMgdGhlIGBfcHJvcGVydGllc0NoYW5nZWRgIGNhbGxiYWNrIHdpdGggdGhlIGN1cnJlbnQgc2V0IG9mXG4gICAgICogcGVuZGluZyBjaGFuZ2VzIChhbmQgb2xkIHZhbHVlcyByZWNvcmRlZCB3aGVuIHBlbmRpbmcgY2hhbmdlcyB3ZXJlXG4gICAgICogc2V0KSwgYW5kIHJlc2V0cyB0aGUgcGVuZGluZyBzZXQgb2YgY2hhbmdlcy4gR2VuZXJhbGx5LCB0aGlzIG1ldGhvZFxuICAgICAqIHNob3VsZCBub3QgYmUgY2FsbGVkIGluIHVzZXIgY29kZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9mbHVzaFByb3BlcnRpZXMoKSB7XG4gICAgICBjb25zdCBwcm9wcyA9IHRoaXMuX19kYXRhO1xuICAgICAgY29uc3QgY2hhbmdlZFByb3BzID0gdGhpcy5fX2RhdGFQZW5kaW5nO1xuICAgICAgY29uc3Qgb2xkID0gdGhpcy5fX2RhdGFPbGQ7XG4gICAgICBpZiAodGhpcy5fc2hvdWxkUHJvcGVydGllc0NoYW5nZShwcm9wcywgY2hhbmdlZFByb3BzLCBvbGQpKSB7XG4gICAgICAgIHRoaXMuX19kYXRhUGVuZGluZyA9IG51bGw7XG4gICAgICAgIHRoaXMuX19kYXRhT2xkID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJvcGVydGllc0NoYW5nZWQocHJvcHMsIGNoYW5nZWRQcm9wcywgb2xkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgaW4gYF9mbHVzaFByb3BlcnRpZXNgIHRvIGRldGVybWluZSBpZiBgX3Byb3BlcnRpZXNDaGFuZ2VkYFxuICAgICAqIHNob3VsZCBiZSBjYWxsZWQuIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHJldHVybnMgdHJ1ZSBpZlxuICAgICAqIHByb3BlcnRpZXMgYXJlIHBlbmRpbmcuIE92ZXJyaWRlIHRvIGN1c3RvbWl6ZSB3aGVuXG4gICAgICogYF9wcm9wZXJ0aWVzQ2hhbmdlZGAgaXMgY2FsbGVkLlxuICAgICAqIEBwYXJhbSB7IU9iamVjdH0gY3VycmVudFByb3BzIEJhZyBvZiBhbGwgY3VycmVudCBhY2Nlc3NvciB2YWx1ZXNcbiAgICAgKiBAcGFyYW0gez9PYmplY3R9IGNoYW5nZWRQcm9wcyBCYWcgb2YgcHJvcGVydGllcyBjaGFuZ2VkIHNpbmNlIHRoZSBsYXN0XG4gICAgICogICBjYWxsIHRvIGBfcHJvcGVydGllc0NoYW5nZWRgXG4gICAgICogQHBhcmFtIHs/T2JqZWN0fSBvbGRQcm9wcyBCYWcgb2YgcHJldmlvdXMgdmFsdWVzIGZvciBlYWNoIHByb3BlcnR5XG4gICAgICogICBpbiBgY2hhbmdlZFByb3BzYFxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgY2hhbmdlZFByb3BzIGlzIHRydXRoeVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9zaG91bGRQcm9wZXJ0aWVzQ2hhbmdlKGN1cnJlbnRQcm9wcywgY2hhbmdlZFByb3BzLCBvbGRQcm9wcykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gQm9vbGVhbihjaGFuZ2VkUHJvcHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGxiYWNrIGNhbGxlZCB3aGVuIGFueSBwcm9wZXJ0aWVzIHdpdGggYWNjZXNzb3JzIGNyZWF0ZWQgdmlhXG4gICAgICogYF9jcmVhdGVQcm9wZXJ0eUFjY2Vzc29yYCBoYXZlIGJlZW4gc2V0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHshT2JqZWN0fSBjdXJyZW50UHJvcHMgQmFnIG9mIGFsbCBjdXJyZW50IGFjY2Vzc29yIHZhbHVlc1xuICAgICAqIEBwYXJhbSB7P09iamVjdH0gY2hhbmdlZFByb3BzIEJhZyBvZiBwcm9wZXJ0aWVzIGNoYW5nZWQgc2luY2UgdGhlIGxhc3RcbiAgICAgKiAgIGNhbGwgdG8gYF9wcm9wZXJ0aWVzQ2hhbmdlZGBcbiAgICAgKiBAcGFyYW0gez9PYmplY3R9IG9sZFByb3BzIEJhZyBvZiBwcmV2aW91cyB2YWx1ZXMgZm9yIGVhY2ggcHJvcGVydHlcbiAgICAgKiAgIGluIGBjaGFuZ2VkUHJvcHNgXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX3Byb3BlcnRpZXNDaGFuZ2VkKGN1cnJlbnRQcm9wcywgY2hhbmdlZFByb3BzLCBvbGRQcm9wcykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWV0aG9kIGNhbGxlZCB0byBkZXRlcm1pbmUgd2hldGhlciBhIHByb3BlcnR5IHZhbHVlIHNob3VsZCBiZVxuICAgICAqIGNvbnNpZGVyZWQgYXMgYSBjaGFuZ2UgYW5kIGNhdXNlIHRoZSBgX3Byb3BlcnRpZXNDaGFuZ2VkYCBjYWxsYmFja1xuICAgICAqIHRvIGJlIGVucXVldWVkLlxuICAgICAqXG4gICAgICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gcmV0dXJucyBgdHJ1ZWAgaWYgYSBzdHJpY3QgZXF1YWxpdHlcbiAgICAgKiBjaGVjayBmYWlscy4gVGhlIG1ldGhvZCBhbHdheXMgcmV0dXJucyBmYWxzZSBmb3IgYE5hTmAuXG4gICAgICpcbiAgICAgKiBPdmVycmlkZSB0aGlzIG1ldGhvZCB0byBlLmcuIHByb3ZpZGUgc3RyaWN0ZXIgY2hlY2tpbmcgZm9yXG4gICAgICogT2JqZWN0cy9BcnJheXMgd2hlbiB1c2luZyBpbW11dGFibGUgcGF0dGVybnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgTmV3IHByb3BlcnR5IHZhbHVlXG4gICAgICogQHBhcmFtIHsqfSBvbGQgUHJldmlvdXMgcHJvcGVydHkgdmFsdWVcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBzaG91bGQgYmUgY29uc2lkZXJlZCBhIGNoYW5nZVxuICAgICAqICAgYW5kIGVucXVldWUgYSBgX3Byb2VwcnRpZXNDaGFuZ2VkYCBjYWxsYmFja1xuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfc2hvdWxkUHJvcGVydHlDaGFuZ2UocHJvcGVydHksIHZhbHVlLCBvbGQpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIC8vIFN0cmljdCBlcXVhbGl0eSBjaGVja1xuICAgICAgICAob2xkICE9PSB2YWx1ZSAmJlxuICAgICAgICAgIC8vIFRoaXMgZW5zdXJlcyAob2xkPT1OYU4sIHZhbHVlPT1OYU4pIGFsd2F5cyByZXR1cm5zIGZhbHNlXG4gICAgICAgICAgKG9sZCA9PT0gb2xkIHx8IHZhbHVlID09PSB2YWx1ZSkpXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEltcGxlbWVudHMgbmF0aXZlIEN1c3RvbSBFbGVtZW50cyBgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrYCB0b1xuICAgICAqIHNldCBhbiBhdHRyaWJ1dGUgdmFsdWUgdG8gYSBwcm9wZXJ0eSB2aWEgYF9hdHRyaWJ1dGVUb1Byb3BlcnR5YC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgYXR0cmlidXRlIHRoYXQgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7P3N0cmluZ30gb2xkIE9sZCBhdHRyaWJ1dGUgdmFsdWVcbiAgICAgKiBAcGFyYW0gez9zdHJpbmd9IHZhbHVlIE5ldyBhdHRyaWJ1dGUgdmFsdWVcbiAgICAgKiBAcGFyYW0gez9zdHJpbmd9IG5hbWVzcGFjZSBBdHRyaWJ1dGUgbmFtZXNwYWNlLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc30gU3VwZXIgbWF5IG9yIG1heSBub3QgaW1wbGVtZW50IHRoZSBjYWxsYmFja1xuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGQsIHZhbHVlLCBuYW1lc3BhY2UpIHtcbiAgICAgIGlmIChvbGQgIT09IHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2F0dHJpYnV0ZVRvUHJvcGVydHkobmFtZSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHN1cGVyLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjaykge1xuICAgICAgICBzdXBlci5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sobmFtZSwgb2xkLCB2YWx1ZSwgbmFtZXNwYWNlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXNlcmlhbGl6ZXMgYW4gYXR0cmlidXRlIHRvIGl0cyBhc3NvY2lhdGVkIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgY2FsbHMgdGhlIGBfZGVzZXJpYWxpemVWYWx1ZWAgbWV0aG9kIHRvIGNvbnZlcnQgdGhlIHN0cmluZyB0b1xuICAgICAqIGEgdHlwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYXR0cmlidXRlIE5hbWUgb2YgYXR0cmlidXRlIHRvIGRlc2VyaWFsaXplLlxuICAgICAqIEBwYXJhbSB7P3N0cmluZ30gdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZS5cbiAgICAgKiBAcGFyYW0geyo9fSB0eXBlIHR5cGUgdG8gZGVzZXJpYWxpemUgdG8sIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZVxuICAgICAqIHJldHVybmVkIGZyb20gYHR5cGVGb3JQcm9wZXJ0eWBcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9hdHRyaWJ1dGVUb1Byb3BlcnR5KGF0dHJpYnV0ZSwgdmFsdWUsIHR5cGUpIHtcbiAgICAgIGlmICghdGhpcy5fX3NlcmlhbGl6aW5nKSB7XG4gICAgICAgIGNvbnN0IG1hcCA9IHRoaXMuX19kYXRhQXR0cmlidXRlcztcbiAgICAgICAgY29uc3QgcHJvcGVydHkgPSBtYXAgJiYgbWFwW2F0dHJpYnV0ZV0gfHwgYXR0cmlidXRlO1xuICAgICAgICB0aGlzW3Byb3BlcnR5XSA9IHRoaXMuX2Rlc2VyaWFsaXplVmFsdWUodmFsdWUsIHR5cGUgfHxcbiAgICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLnR5cGVGb3JQcm9wZXJ0eShwcm9wZXJ0eSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlcmlhbGl6ZXMgYSBwcm9wZXJ0eSB0byBpdHMgYXNzb2NpYXRlZCBhdHRyaWJ1dGUuXG4gICAgICpcbiAgICAgKiBAc3VwcHJlc3Mge2ludmFsaWRDYXN0c30gQ2xvc3VyZSBjYW4ndCBmaWd1cmUgb3V0IGB0aGlzYCBpcyBhbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWUgdG8gcmVmbGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IGF0dHJpYnV0ZSBBdHRyaWJ1dGUgbmFtZSB0byByZWZsZWN0IHRvLlxuICAgICAqIEBwYXJhbSB7Kj19IHZhbHVlIFByb3BlcnR5IHZhbHVlIHRvIHJlZmVjdC5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9wcm9wZXJ0eVRvQXR0cmlidXRlKHByb3BlcnR5LCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgICB0aGlzLl9fc2VyaWFsaXppbmcgPSB0cnVlO1xuICAgICAgdmFsdWUgPSAoYXJndW1lbnRzLmxlbmd0aCA8IDMpID8gdGhpc1twcm9wZXJ0eV0gOiB2YWx1ZTtcbiAgICAgIHRoaXMuX3ZhbHVlVG9Ob2RlQXR0cmlidXRlKC8qKiBAdHlwZSB7IUhUTUxFbGVtZW50fSAqLyh0aGlzKSwgdmFsdWUsXG4gICAgICAgIGF0dHJpYnV0ZSB8fCB0aGlzLmNvbnN0cnVjdG9yLmF0dHJpYnV0ZU5hbWVGb3JQcm9wZXJ0eShwcm9wZXJ0eSkpO1xuICAgICAgdGhpcy5fX3NlcmlhbGl6aW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBhIHR5cGVkIHZhbHVlIHRvIGFuIEhUTUwgYXR0cmlidXRlIG9uIGEgbm9kZS5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGNhbGxzIHRoZSBgX3NlcmlhbGl6ZVZhbHVlYCBtZXRob2QgdG8gY29udmVydCB0aGUgdHlwZWRcbiAgICAgKiB2YWx1ZSB0byBhIHN0cmluZy4gIElmIHRoZSBgX3NlcmlhbGl6ZVZhbHVlYCBtZXRob2QgcmV0dXJucyBgdW5kZWZpbmVkYCxcbiAgICAgKiB0aGUgYXR0cmlidXRlIHdpbGwgYmUgcmVtb3ZlZCAodGhpcyBpcyB0aGUgZGVmYXVsdCBmb3IgYm9vbGVhblxuICAgICAqIHR5cGUgYGZhbHNlYCkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGUgRWxlbWVudCB0byBzZXQgYXR0cmlidXRlIHRvLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gc2VyaWFsaXplLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGUgQXR0cmlidXRlIG5hbWUgdG8gc2VyaWFsaXplIHRvLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX3ZhbHVlVG9Ob2RlQXR0cmlidXRlKG5vZGUsIHZhbHVlLCBhdHRyaWJ1dGUpIHtcbiAgICAgIGNvbnN0IHN0ciA9IHRoaXMuX3NlcmlhbGl6ZVZhbHVlKHZhbHVlKTtcbiAgICAgIGlmIChhdHRyaWJ1dGUgPT09ICdjbGFzcycgfHwgYXR0cmlidXRlID09PSAnbmFtZScgfHwgYXR0cmlidXRlID09PSAnc2xvdCcpIHtcbiAgICAgICAgbm9kZSA9IC8qKiBAdHlwZSB7P0VsZW1lbnR9ICovKHdyYXAobm9kZSkpO1xuICAgICAgfVxuICAgICAgaWYgKHN0ciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUsIHN0cik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYSB0eXBlZCBKYXZhU2NyaXB0IHZhbHVlIHRvIGEgc3RyaW5nLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIHdoZW4gc2V0dGluZyBKUyBwcm9wZXJ0eSB2YWx1ZXMgdG9cbiAgICAgKiBIVE1MIGF0dHJpYnV0ZXMuICBVc2VycyBtYXkgb3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gcHJvdmlkZVxuICAgICAqIHNlcmlhbGl6YXRpb24gZm9yIGN1c3RvbSB0eXBlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgUHJvcGVydHkgdmFsdWUgdG8gc2VyaWFsaXplLlxuICAgICAqIEByZXR1cm4ge3N0cmluZyB8IHVuZGVmaW5lZH0gU3RyaW5nIHNlcmlhbGl6ZWQgZnJvbSB0aGUgcHJvdmlkZWRcbiAgICAgKiBwcm9wZXJ0eSAgdmFsdWUuXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX3NlcmlhbGl6ZVZhbHVlKHZhbHVlKSB7XG4gICAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgICAgICByZXR1cm4gdmFsdWUgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCA/IHZhbHVlLnRvU3RyaW5nKCkgOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYSBzdHJpbmcgdG8gYSB0eXBlZCBKYXZhU2NyaXB0IHZhbHVlLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIHdoZW4gcmVhZGluZyBIVE1MIGF0dHJpYnV0ZSB2YWx1ZXMgdG9cbiAgICAgKiBKUyBwcm9wZXJ0aWVzLiAgVXNlcnMgbWF5IG92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIHByb3ZpZGVcbiAgICAgKiBkZXNlcmlhbGl6YXRpb24gZm9yIGN1c3RvbSBgdHlwZWBzLiBUeXBlcyBmb3IgYEJvb2xlYW5gLCBgU3RyaW5nYCxcbiAgICAgKiBhbmQgYE51bWJlcmAgY29udmVydCBhdHRyaWJ1dGVzIHRvIHRoZSBleHBlY3RlZCB0eXBlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7P3N0cmluZ30gdmFsdWUgVmFsdWUgdG8gZGVzZXJpYWxpemUuXG4gICAgICogQHBhcmFtIHsqPX0gdHlwZSBUeXBlIHRvIGRlc2VyaWFsaXplIHRoZSBzdHJpbmcgdG8uXG4gICAgICogQHJldHVybiB7Kn0gVHlwZWQgdmFsdWUgZGVzZXJpYWxpemVkIGZyb20gdGhlIHByb3ZpZGVkIHN0cmluZy5cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfZGVzZXJpYWxpemVWYWx1ZSh2YWx1ZSwgdHlwZSkge1xuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgQm9vbGVhbjpcbiAgICAgICAgICByZXR1cm4gKHZhbHVlICE9PSBudWxsKTtcbiAgICAgICAgY2FzZSBOdW1iZXI6XG4gICAgICAgICAgcmV0dXJuIE51bWJlcih2YWx1ZSk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICB9XG5cbiAgcmV0dXJuIFByb3BlcnRpZXNDaGFuZ2VkO1xufSk7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaW1wb3J0ICcuLi91dGlscy9ib290LmpzJztcblxuaW1wb3J0IHsgZGVkdXBpbmdNaXhpbiB9IGZyb20gJy4uL3V0aWxzL21peGluLmpzJztcbmltcG9ydCB7IGNhbWVsVG9EYXNoQ2FzZSwgZGFzaFRvQ2FtZWxDYXNlIH0gZnJvbSAnLi4vdXRpbHMvY2FzZS1tYXAuanMnO1xuaW1wb3J0IHsgUHJvcGVydGllc0NoYW5nZWQgfSBmcm9tICcuL3Byb3BlcnRpZXMtY2hhbmdlZC5qcyc7XG5cbi8vIFNhdmUgbWFwIG9mIG5hdGl2ZSBwcm9wZXJ0aWVzOyB0aGlzIGZvcm1zIGEgYmxhY2tsaXN0IG9yIHByb3BlcnRpZXNcbi8vIHRoYXQgd29uJ3QgaGF2ZSB0aGVpciB2YWx1ZXMgXCJzYXZlZFwiIGJ5IGBzYXZlQWNjZXNzb3JWYWx1ZWAsIHNpbmNlXG4vLyByZWFkaW5nIGZyb20gYW4gSFRNTEVsZW1lbnQgYWNjZXNzb3IgZnJvbSB0aGUgY29udGV4dCBvZiBhIHByb3RvdHlwZSB0aHJvd3NcbmNvbnN0IG5hdGl2ZVByb3BlcnRpZXMgPSB7fTtcbmxldCBwcm90byA9IEhUTUxFbGVtZW50LnByb3RvdHlwZTtcbndoaWxlIChwcm90bykge1xuICBsZXQgcHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhwcm90byk7XG4gIGZvciAobGV0IGk9MDsgaTxwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIG5hdGl2ZVByb3BlcnRpZXNbcHJvcHNbaV1dID0gdHJ1ZTtcbiAgfVxuICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG59XG5cbi8qKlxuICogVXNlZCB0byBzYXZlIHRoZSB2YWx1ZSBvZiBhIHByb3BlcnR5IHRoYXQgd2lsbCBiZSBvdmVycmlkZGVuIHdpdGhcbiAqIGFuIGFjY2Vzc29yLiBJZiB0aGUgYG1vZGVsYCBpcyBhIHByb3RvdHlwZSwgdGhlIHZhbHVlcyB3aWxsIGJlIHNhdmVkXG4gKiBpbiBgX19kYXRhUHJvdG9gLCBhbmQgaXQncyB1cCB0byB0aGUgdXNlciAob3IgZG93bnN0cmVhbSBtaXhpbikgdG9cbiAqIGRlY2lkZSBob3cvd2hlbiB0byBzZXQgdGhlc2UgdmFsdWVzIGJhY2sgaW50byB0aGUgYWNjZXNzb3JzLlxuICogSWYgYG1vZGVsYCBpcyBhbHJlYWR5IGFuIGluc3RhbmNlIChpdCBoYXMgYSBgX19kYXRhYCBwcm9wZXJ0eSksIHRoZW5cbiAqIHRoZSB2YWx1ZSB3aWxsIGJlIHNldCBhcyBhIHBlbmRpbmcgcHJvcGVydHksIG1lYW5pbmcgdGhlIHVzZXIgc2hvdWxkXG4gKiBjYWxsIGBfaW52YWxpZGF0ZVByb3BlcnRpZXNgIG9yIGBfZmx1c2hQcm9wZXJ0aWVzYCB0byB0YWtlIGVmZmVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBtb2RlbCBQcm90b3R5cGUgb3IgaW5zdGFuY2VcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHByb3BlcnR5XG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2F2ZUFjY2Vzc29yVmFsdWUobW9kZWwsIHByb3BlcnR5KSB7XG4gIC8vIERvbid0IHJlYWQvc3RvcmUgdmFsdWUgZm9yIGFueSBuYXRpdmUgcHJvcGVydGllcyBzaW5jZSB0aGV5IGNvdWxkIHRocm93XG4gIGlmICghbmF0aXZlUHJvcGVydGllc1twcm9wZXJ0eV0pIHtcbiAgICBsZXQgdmFsdWUgPSBtb2RlbFtwcm9wZXJ0eV07XG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChtb2RlbC5fX2RhdGEpIHtcbiAgICAgICAgLy8gQWRkaW5nIGFjY2Vzc29yIHRvIGluc3RhbmNlOyB1cGRhdGUgdGhlIHByb3BlcnR5XG4gICAgICAgIC8vIEl0IGlzIHRoZSB1c2VyJ3MgcmVzcG9uc2liaWxpdHkgdG8gY2FsbCBfZmx1c2hQcm9wZXJ0aWVzXG4gICAgICAgIG1vZGVsLl9zZXRQZW5kaW5nUHJvcGVydHkocHJvcGVydHksIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEFkZGluZyBhY2Nlc3NvciB0byBwcm90bzsgc2F2ZSBwcm90bydzIHZhbHVlIGZvciBpbnN0YW5jZS10aW1lIHVzZVxuICAgICAgICBpZiAoIW1vZGVsLl9fZGF0YVByb3RvKSB7XG4gICAgICAgICAgbW9kZWwuX19kYXRhUHJvdG8gPSB7fTtcbiAgICAgICAgfSBlbHNlIGlmICghbW9kZWwuaGFzT3duUHJvcGVydHkoSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnX19kYXRhUHJvdG8nLCBtb2RlbCkpKSB7XG4gICAgICAgICAgbW9kZWwuX19kYXRhUHJvdG8gPSBPYmplY3QuY3JlYXRlKG1vZGVsLl9fZGF0YVByb3RvKTtcbiAgICAgICAgfVxuICAgICAgICBtb2RlbC5fX2RhdGFQcm90b1twcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBFbGVtZW50IGNsYXNzIG1peGluIHRoYXQgcHJvdmlkZXMgYmFzaWMgbWV0YS1wcm9ncmFtbWluZyBmb3IgY3JlYXRpbmcgb25lXG4gKiBvciBtb3JlIHByb3BlcnR5IGFjY2Vzc29ycyAoZ2V0dGVyL3NldHRlciBwYWlyKSB0aGF0IGVucXVldWUgYW4gYXN5bmNcbiAqIChiYXRjaGVkKSBgX3Byb3BlcnRpZXNDaGFuZ2VkYCBjYWxsYmFjay5cbiAqXG4gKiBGb3IgYmFzaWMgdXNhZ2Ugb2YgdGhpcyBtaXhpbjpcbiAqXG4gKiAtICAgRGVjbGFyZSBhdHRyaWJ1dGVzIHRvIG9ic2VydmUgdmlhIHRoZSBzdGFuZGFyZCBgc3RhdGljIGdldFxuICogICAgIG9ic2VydmVkQXR0cmlidXRlcygpYC4gVXNlIGBkYXNoLWNhc2VgIGF0dHJpYnV0ZSBuYW1lcyB0byByZXByZXNlbnRcbiAqICAgICBgY2FtZWxDYXNlYCBwcm9wZXJ0eSBuYW1lcy5cbiAqIC0gICBJbXBsZW1lbnQgdGhlIGBfcHJvcGVydGllc0NoYW5nZWRgIGNhbGxiYWNrIG9uIHRoZSBjbGFzcy5cbiAqIC0gICBDYWxsIGBNeUNsYXNzLmNyZWF0ZVByb3BlcnRpZXNGb3JBdHRyaWJ1dGVzKClgICoqb25jZSoqIG9uIHRoZSBjbGFzcyB0b1xuICogICAgIGdlbmVyYXRlIHByb3BlcnR5IGFjY2Vzc29ycyBmb3IgZWFjaCBvYnNlcnZlZCBhdHRyaWJ1dGUuIFRoaXMgbXVzdCBiZVxuICogICAgIGNhbGxlZCBiZWZvcmUgdGhlIGZpcnN0IGluc3RhbmNlIGlzIGNyZWF0ZWQsIGZvciBleGFtcGxlLCBieSBjYWxsaW5nIGl0XG4gKiAgICAgYmVmb3JlIGNhbGxpbmcgYGN1c3RvbUVsZW1lbnRzLmRlZmluZWAuIEl0IGNhbiBhbHNvIGJlIGNhbGxlZCBsYXppbHkgZnJvbVxuICogICAgIHRoZSBlbGVtZW50J3MgYGNvbnN0cnVjdG9yYCwgYXMgbG9uZyBhcyBpdCdzIGd1YXJkZWQgc28gdGhhdCB0aGUgY2FsbCBpc1xuICogICAgIG9ubHkgbWFkZSBvbmNlLCB3aGVuIHRoZSBmaXJzdCBpbnN0YW5jZSBpcyBjcmVhdGVkLlxuICogLSAgIENhbGwgYHRoaXMuX2VuYWJsZVByb3BlcnRpZXMoKWAgaW4gdGhlIGVsZW1lbnQncyBgY29ubmVjdGVkQ2FsbGJhY2tgIHRvXG4gKiAgICAgZW5hYmxlIHRoZSBhY2Nlc3NvcnMuXG4gKlxuICogQW55IGBvYnNlcnZlZEF0dHJpYnV0ZXNgIHdpbGwgYXV0b21hdGljYWxseSBiZVxuICogZGVzZXJpYWxpemVkIHZpYSBgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrYCBhbmQgc2V0IHRvIHRoZSBhc3NvY2lhdGVkXG4gKiBwcm9wZXJ0eSB1c2luZyBgZGFzaC1jYXNlYC10by1gY2FtZWxDYXNlYCBjb252ZW50aW9uLlxuICpcbiAqIEBtaXhpbkZ1bmN0aW9uXG4gKiBAcG9seW1lclxuICogQGFwcGxpZXNNaXhpbiBQcm9wZXJ0aWVzQ2hhbmdlZFxuICogQHN1bW1hcnkgRWxlbWVudCBjbGFzcyBtaXhpbiBmb3IgcmVhY3RpbmcgdG8gcHJvcGVydHkgY2hhbmdlcyBmcm9tXG4gKiAgIGdlbmVyYXRlZCBwcm9wZXJ0eSBhY2Nlc3NvcnMuXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtmdW5jdGlvbihuZXc6VCl9IHN1cGVyQ2xhc3MgQ2xhc3MgdG8gYXBwbHkgbWl4aW4gdG8uXG4gKiBAcmV0dXJuIHtmdW5jdGlvbihuZXc6VCl9IHN1cGVyQ2xhc3Mgd2l0aCBtaXhpbiBhcHBsaWVkLlxuICovXG5leHBvcnQgY29uc3QgUHJvcGVydHlBY2Nlc3NvcnMgPSBkZWR1cGluZ01peGluKHN1cGVyQ2xhc3MgPT4ge1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGltcGxlbWVudHMge1BvbHltZXJfUHJvcGVydGllc0NoYW5nZWR9XG4gICAqIEB1bnJlc3RyaWN0ZWRcbiAgICogQHByaXZhdGVcbiAgICovXG4gICBjb25zdCBiYXNlID0gUHJvcGVydGllc0NoYW5nZWQoc3VwZXJDbGFzcyk7XG5cbiAgLyoqXG4gICAqIEBwb2x5bWVyXG4gICAqIEBtaXhpbkNsYXNzXG4gICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX1Byb3BlcnR5QWNjZXNzb3JzfVxuICAgKiBAZXh0ZW5kcyB7YmFzZX1cbiAgICogQHVucmVzdHJpY3RlZFxuICAgKi9cbiAgY2xhc3MgUHJvcGVydHlBY2Nlc3NvcnMgZXh0ZW5kcyBiYXNlIHtcblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBwcm9wZXJ0eSBhY2Nlc3NvcnMgZm9yIGFsbCBhdHRyaWJ1dGVzIGluIHRoZSBzdGFuZGFyZFxuICAgICAqIHN0YXRpYyBgb2JzZXJ2ZWRBdHRyaWJ1dGVzYCBhcnJheS5cbiAgICAgKlxuICAgICAqIEF0dHJpYnV0ZSBuYW1lcyBhcmUgbWFwcGVkIHRvIHByb3BlcnR5IG5hbWVzIHVzaW5nIHRoZSBgZGFzaC1jYXNlYCB0b1xuICAgICAqIGBjYW1lbENhc2VgIGNvbnZlbnRpb25cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlUHJvcGVydGllc0ZvckF0dHJpYnV0ZXMoKSB7XG4gICAgICBsZXQgYSQgPSAgLyoqIEB0eXBlIHs/fSAqLyAodGhpcykub2JzZXJ2ZWRBdHRyaWJ1dGVzO1xuICAgICAgZm9yIChsZXQgaT0wOyBpIDwgYSQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5wcm90b3R5cGUuX2NyZWF0ZVByb3BlcnR5QWNjZXNzb3IoZGFzaFRvQ2FtZWxDYXNlKGEkW2ldKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBhdHRyaWJ1dGUgbmFtZSB0aGF0IGNvcnJlc3BvbmRzIHRvIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgKiBCeSBkZWZhdWx0LCBjb252ZXJ0cyBjYW1lbCB0byBkYXNoIGNhc2UsIGUuZy4gYGZvb0JhcmAgdG8gYGZvby1iYXJgLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSB0byBjb252ZXJ0XG4gICAgICogQHJldHVybiB7c3RyaW5nfSBBdHRyaWJ1dGUgbmFtZSBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBhdHRyaWJ1dGVOYW1lRm9yUHJvcGVydHkocHJvcGVydHkpIHtcbiAgICAgIHJldHVybiBjYW1lbFRvRGFzaENhc2UocHJvcGVydHkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlcyBQcm9wZXJ0aWVzQ2hhbmdlZCBpbXBsZW1lbnRhdGlvbiB0byBpbml0aWFsaXplIHZhbHVlcyBmb3JcbiAgICAgKiBhY2Nlc3NvcnMgY3JlYXRlZCBmb3IgdmFsdWVzIHRoYXQgYWxyZWFkeSBleGlzdGVkIG9uIHRoZSBlbGVtZW50XG4gICAgICogcHJvdG90eXBlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX2luaXRpYWxpemVQcm9wZXJ0aWVzKCkge1xuICAgICAgaWYgKHRoaXMuX19kYXRhUHJvdG8pIHtcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZVByb3RvUHJvcGVydGllcyh0aGlzLl9fZGF0YVByb3RvKTtcbiAgICAgICAgdGhpcy5fX2RhdGFQcm90byA9IG51bGw7XG4gICAgICB9XG4gICAgICBzdXBlci5faW5pdGlhbGl6ZVByb3BlcnRpZXMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgYXQgaW5zdGFuY2UgdGltZSB3aXRoIGJhZyBvZiBwcm9wZXJ0aWVzIHRoYXQgd2VyZSBvdmVyd3JpdHRlblxuICAgICAqIGJ5IGFjY2Vzc29ycyBvbiB0aGUgcHJvdG90eXBlIHdoZW4gYWNjZXNzb3JzIHdlcmUgY3JlYXRlZC5cbiAgICAgKlxuICAgICAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHNldHMgdGhlc2UgcHJvcGVydGllcyBiYWNrIGludG8gdGhlXG4gICAgICogc2V0dGVyIGF0IGluc3RhbmNlIHRpbWUuICBUaGlzIG1ldGhvZCBpcyBwcm92aWRlZCBhcyBhbiBvdmVycmlkZVxuICAgICAqIHBvaW50IGZvciBjdXN0b21pemluZyBvciBwcm92aWRpbmcgbW9yZSBlZmZpY2llbnQgaW5pdGlhbGl6YXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgQmFnIG9mIHByb3BlcnR5IHZhbHVlcyB0aGF0IHdlcmUgb3ZlcndyaXR0ZW5cbiAgICAgKiAgIHdoZW4gY3JlYXRpbmcgcHJvcGVydHkgYWNjZXNzb3JzLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9pbml0aWFsaXplUHJvdG9Qcm9wZXJ0aWVzKHByb3BzKSB7XG4gICAgICBmb3IgKGxldCBwIGluIHByb3BzKSB7XG4gICAgICAgIHRoaXMuX3NldFByb3BlcnR5KHAsIHByb3BzW3BdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbnN1cmVzIHRoZSBlbGVtZW50IGhhcyB0aGUgZ2l2ZW4gYXR0cmlidXRlLiBJZiBpdCBkb2VzIG5vdCxcbiAgICAgKiBhc3NpZ25zIHRoZSBnaXZlbiB2YWx1ZSB0byB0aGUgYXR0cmlidXRlLlxuICAgICAqXG4gICAgICogQHN1cHByZXNzIHtpbnZhbGlkQ2FzdHN9IENsb3N1cmUgY2FuJ3QgZmlndXJlIG91dCBgdGhpc2AgaXMgaW5mYWN0IGFuXG4gICAgICogICAgIGVsZW1lbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGUgTmFtZSBvZiBhdHRyaWJ1dGUgdG8gZW5zdXJlIGlzIHNldC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZS5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9lbnN1cmVBdHRyaWJ1dGUoYXR0cmlidXRlLCB2YWx1ZSkge1xuICAgICAgY29uc3QgZWwgPSAvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi8odGhpcyk7XG4gICAgICBpZiAoIWVsLmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGUpKSB7XG4gICAgICAgIHRoaXMuX3ZhbHVlVG9Ob2RlQXR0cmlidXRlKGVsLCB2YWx1ZSwgYXR0cmlidXRlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgUHJvcGVydGllc0NoYW5nZWQgaW1wbGVtZW50aW9uIHRvIHNlcmlhbGl6ZSBvYmplY3RzIGFzIEpTT04uXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFByb3BlcnR5IHZhbHVlIHRvIHNlcmlhbGl6ZS5cbiAgICAgKiBAcmV0dXJuIHtzdHJpbmcgfCB1bmRlZmluZWR9IFN0cmluZyBzZXJpYWxpemVkIGZyb20gdGhlIHByb3ZpZGVkIHByb3BlcnR5XG4gICAgICogICAgIHZhbHVlLlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9zZXJpYWxpemVWYWx1ZSh2YWx1ZSkge1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tZmFsbHRocm91Z2ggKi9cbiAgICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgICAgICAgIH0gY2F0Y2goeCkge1xuICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHN1cGVyLl9zZXJpYWxpemVWYWx1ZSh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYSBzdHJpbmcgdG8gYSB0eXBlZCBKYXZhU2NyaXB0IHZhbHVlLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIGJ5IFBvbHltZXIgd2hlbiByZWFkaW5nIEhUTUwgYXR0cmlidXRlIHZhbHVlcyB0b1xuICAgICAqIEpTIHByb3BlcnRpZXMuICBVc2VycyBtYXkgb3ZlcnJpZGUgdGhpcyBtZXRob2Qgb24gUG9seW1lciBlbGVtZW50XG4gICAgICogcHJvdG90eXBlcyB0byBwcm92aWRlIGRlc2VyaWFsaXphdGlvbiBmb3IgY3VzdG9tIGB0eXBlYHMuICBOb3RlLFxuICAgICAqIHRoZSBgdHlwZWAgYXJndW1lbnQgaXMgdGhlIHZhbHVlIG9mIHRoZSBgdHlwZWAgZmllbGQgcHJvdmlkZWQgaW4gdGhlXG4gICAgICogYHByb3BlcnRpZXNgIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGZvciBhIGdpdmVuIHByb3BlcnR5LCBhbmQgaXNcbiAgICAgKiBieSBjb252ZW50aW9uIHRoZSBjb25zdHJ1Y3RvciBmb3IgdGhlIHR5cGUgdG8gZGVzZXJpYWxpemUuXG4gICAgICpcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7P3N0cmluZ30gdmFsdWUgQXR0cmlidXRlIHZhbHVlIHRvIGRlc2VyaWFsaXplLlxuICAgICAqIEBwYXJhbSB7Kj19IHR5cGUgVHlwZSB0byBkZXNlcmlhbGl6ZSB0aGUgc3RyaW5nIHRvLlxuICAgICAqIEByZXR1cm4geyp9IFR5cGVkIHZhbHVlIGRlc2VyaWFsaXplZCBmcm9tIHRoZSBwcm92aWRlZCBzdHJpbmcuXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX2Rlc2VyaWFsaXplVmFsdWUodmFsdWUsIHR5cGUpIHtcbiAgICAgIC8qKlxuICAgICAgICogQHR5cGUgeyp9XG4gICAgICAgKi9cbiAgICAgIGxldCBvdXRWYWx1ZTtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIE9iamVjdDpcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgb3V0VmFsdWUgPSBKU09OLnBhcnNlKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyh2YWx1ZSkpO1xuICAgICAgICAgIH0gY2F0Y2goeCkge1xuICAgICAgICAgICAgLy8gYWxsb3cgbm9uLUpTT04gbGl0ZXJhbHMgbGlrZSBTdHJpbmdzIGFuZCBOdW1iZXJzXG4gICAgICAgICAgICBvdXRWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBBcnJheTpcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgb3V0VmFsdWUgPSBKU09OLnBhcnNlKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyh2YWx1ZSkpO1xuICAgICAgICAgIH0gY2F0Y2goeCkge1xuICAgICAgICAgICAgb3V0VmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBQb2x5bWVyOjpBdHRyaWJ1dGVzOiBjb3VsZG4ndCBkZWNvZGUgQXJyYXkgYXMgSlNPTjogJHt2YWx1ZX1gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgRGF0ZTpcbiAgICAgICAgICBvdXRWYWx1ZSA9IGlzTmFOKHZhbHVlKSA/IFN0cmluZyh2YWx1ZSkgOiBOdW1iZXIodmFsdWUpO1xuICAgICAgICAgIG91dFZhbHVlID0gbmV3IERhdGUob3V0VmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIG91dFZhbHVlID0gc3VwZXIuX2Rlc2VyaWFsaXplVmFsdWUodmFsdWUsIHR5cGUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dFZhbHVlO1xuICAgIH1cbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWZhbGx0aHJvdWdoICovXG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgUHJvcGVydGllc0NoYW5nZWQgaW1wbGVtZW50YXRpb24gdG8gc2F2ZSBleGlzdGluZyBwcm90b3R5cGVcbiAgICAgKiBwcm9wZXJ0eSB2YWx1ZSBzbyB0aGF0IGl0IGNhbiBiZSByZXNldC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgTmFtZSBvZiB0aGUgcHJvcGVydHlcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSByZWFkT25seSBXaGVuIHRydWUsIG5vIHNldHRlciBpcyBjcmVhdGVkXG4gICAgICpcbiAgICAgKiBXaGVuIGNhbGxpbmcgb24gYSBwcm90b3R5cGUsIGFueSBvdmVyd3JpdHRlbiB2YWx1ZXMgYXJlIHNhdmVkIGluXG4gICAgICogYF9fZGF0YVByb3RvYCwgYW5kIGl0IGlzIHVwIHRvIHRoZSBzdWJjbGFzc2VyIHRvIGRlY2lkZSBob3cvd2hlblxuICAgICAqIHRvIHNldCB0aG9zZSBwcm9wZXJ0aWVzIGJhY2sgaW50byB0aGUgYWNjZXNzb3IuICBXaGVuIGNhbGxpbmcgb24gYW5cbiAgICAgKiBpbnN0YW5jZSwgdGhlIG92ZXJ3cml0dGVuIHZhbHVlIGlzIHNldCB2aWEgYF9zZXRQZW5kaW5nUHJvcGVydHlgLFxuICAgICAqIGFuZCB0aGUgdXNlciBzaG91bGQgY2FsbCBgX2ludmFsaWRhdGVQcm9wZXJ0aWVzYCBvciBgX2ZsdXNoUHJvcGVydGllc2BcbiAgICAgKiBmb3IgdGhlIHZhbHVlcyB0byB0YWtlIGVmZmVjdC5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfZGVmaW5lUHJvcGVydHlBY2Nlc3Nvcihwcm9wZXJ0eSwgcmVhZE9ubHkpIHtcbiAgICAgIHNhdmVBY2Nlc3NvclZhbHVlKHRoaXMsIHByb3BlcnR5KTtcbiAgICAgIHN1cGVyLl9kZWZpbmVQcm9wZXJ0eUFjY2Vzc29yKHByb3BlcnR5LCByZWFkT25seSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgbGlicmFyeSBjcmVhdGVkIGFuIGFjY2Vzc29yIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYW4gYWNjZXNzb3Igd2FzIGNyZWF0ZWRcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfaGFzQWNjZXNzb3IocHJvcGVydHkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YUhhc0FjY2Vzc29yICYmIHRoaXMuX19kYXRhSGFzQWNjZXNzb3JbcHJvcGVydHldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIHByb3BlcnR5IGhhcyBhIHBlbmRpbmcgY2hhbmdlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3AgUHJvcGVydHkgbmFtZVxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgcHJvcGVydHkgaGFzIGEgcGVuZGluZyBjaGFuZ2VcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX2lzUHJvcGVydHlQZW5kaW5nKHByb3ApIHtcbiAgICAgIHJldHVybiBCb29sZWFuKHRoaXMuX19kYXRhUGVuZGluZyAmJiAocHJvcCBpbiB0aGlzLl9fZGF0YVBlbmRpbmcpKTtcbiAgICB9XG5cbiAgfVxuXG4gIHJldHVybiBQcm9wZXJ0eUFjY2Vzc29ycztcblxufSk7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaW1wb3J0ICcuLi91dGlscy9ib290LmpzJztcblxuaW1wb3J0IHsgZGVkdXBpbmdNaXhpbiB9IGZyb20gJy4uL3V0aWxzL21peGluLmpzJztcblxuLy8gMS54IGJhY2t3YXJkcy1jb21wYXRpYmxlIGF1dG8td3JhcHBlciBmb3IgdGVtcGxhdGUgdHlwZSBleHRlbnNpb25zXG4vLyBUaGlzIGlzIGEgY2xlYXIgbGF5ZXJpbmcgdmlvbGF0aW9uIGFuZCBnaXZlcyBmYXZvcmVkLW5hdGlvbiBzdGF0dXMgdG9cbi8vIGRvbS1pZiBhbmQgZG9tLXJlcGVhdCB0ZW1wbGF0ZXMuICBUaGlzIGlzIGEgY29uY2VpdCB3ZSdyZSBjaG9vc2luZyB0byBrZWVwXG4vLyBhLikgdG8gZWFzZSAxLnggYmFja3dhcmRzLWNvbXBhdGliaWxpdHkgZHVlIHRvIGxvc3Mgb2YgYGlzYCwgYW5kXG4vLyBiLikgdG8gbWFpbnRhaW4gaWYvcmVwZWF0IGNhcGFiaWxpdHkgaW4gcGFyc2VyLWNvbnN0cmFpbmVkIGVsZW1lbnRzXG4vLyAgICAgKGUuZy4gdGFibGUsIHNlbGVjdCkgaW4gbGlldSBvZiBuYXRpdmUgQ0UgdHlwZSBleHRlbnNpb25zIHdpdGhvdXRcbi8vICAgICBtYXNzaXZlIG5ldyBpbnZlbnRpb24gaW4gdGhpcyBzcGFjZSAoZS5nLiBkaXJlY3RpdmUgc3lzdGVtKVxuY29uc3QgdGVtcGxhdGVFeHRlbnNpb25zID0ge1xuICAnZG9tLWlmJzogdHJ1ZSxcbiAgJ2RvbS1yZXBlYXQnOiB0cnVlXG59O1xuXG5sZXQgcGxhY2Vob2xkZXJCdWdEZXRlY3QgPSBmYWxzZTtcbmxldCBwbGFjZWhvbGRlckJ1ZyA9IGZhbHNlO1xuXG5mdW5jdGlvbiBoYXNQbGFjZWhvbGRlckJ1ZygpIHtcbiAgaWYgKCFwbGFjZWhvbGRlckJ1Z0RldGVjdCkge1xuICAgIHBsYWNlaG9sZGVyQnVnRGV0ZWN0ID0gdHJ1ZTtcbiAgICBjb25zdCB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcbiAgICB0LnBsYWNlaG9sZGVyID0gJ2EnO1xuICAgIHBsYWNlaG9sZGVyQnVnID0gdC5wbGFjZWhvbGRlciA9PT0gdC50ZXh0Q29udGVudDtcbiAgfVxuICByZXR1cm4gcGxhY2Vob2xkZXJCdWc7XG59XG5cbi8qKlxuICogU29tZSBicm93c2VycyBoYXZlIGEgYnVnIHdpdGggdGV4dGFyZWEsIHdoZXJlIHBsYWNlaG9sZGVyIHRleHQgaXMgY29waWVkIGFzXG4gKiBhIHRleHRub2RlIGNoaWxkIG9mIHRoZSB0ZXh0YXJlYS5cbiAqXG4gKiBJZiB0aGUgcGxhY2Vob2xkZXIgaXMgYSBiaW5kaW5nLCB0aGlzIGNhbiBicmVhayB0ZW1wbGF0ZSBzdGFtcGluZyBpbiB0d29cbiAqIHdheXMuXG4gKlxuICogT25lIGlzc3VlIGlzIHRoYXQgd2hlbiB0aGUgYHBsYWNlaG9sZGVyYCBhdHRyaWJ1dGUgaXMgcmVtb3ZlZCB3aGVuIHRoZVxuICogYmluZGluZyBpcyBwcm9jZXNzZWQsIHRoZSB0ZXh0bm9kZSBjaGlsZCBvZiB0aGUgdGV4dGFyZWEgaXMgZGVsZXRlZCwgYW5kIHRoZVxuICogdGVtcGxhdGUgaW5mbyB0cmllcyB0byBiaW5kIGludG8gdGhhdCBub2RlLlxuICpcbiAqIFdpdGggYGxlZ2FjeU9wdGltaXphdGlvbnNgIGluIHVzZSwgd2hlbiB0aGUgdGVtcGxhdGUgaXMgc3RhbXBlZCBhbmQgdGhlXG4gKiBgdGV4dGFyZWEudGV4dENvbnRlbnRgIGJpbmRpbmcgaXMgcHJvY2Vzc2VkLCBubyBjb3JyZXNwb25kaW5nIG5vZGUgaXMgZm91bmRcbiAqIGJlY2F1c2UgaXQgd2FzIHJlbW92ZWQgZHVyaW5nIHBhcnNpbmcuIEFuIGV4Y2VwdGlvbiBpcyBnZW5lcmF0ZWQgd2hlbiB0aGlzXG4gKiBiaW5kaW5nIGlzIHVwZGF0ZWQuXG4gKlxuICogV2l0aCBgbGVnYWN5T3B0aW1pemF0aW9uc2Agbm90IGluIHVzZSwgdGhlIHRlbXBsYXRlIGlzIGNsb25lZCBiZWZvcmVcbiAqIHByb2Nlc3NpbmcgYW5kIHRoaXMgY2hhbmdlcyB0aGUgYWJvdmUgYmVoYXZpb3IuIFRoZSBjbG9uZWQgdGVtcGxhdGUgYWxzbyBoYXNcbiAqIGEgdmFsdWUgcHJvcGVydHkgc2V0IHRvIHRoZSBwbGFjZWhvbGRlciBhbmQgdGV4dENvbnRlbnQuIFRoaXMgcHJldmVudHMgdGhlXG4gKiByZW1vdmFsIG9mIHRoZSB0ZXh0Q29udGVudCB3aGVuIHRoZSBwbGFjZWhvbGRlciBhdHRyaWJ1dGUgaXMgcmVtb3ZlZC5cbiAqIFRoZXJlZm9yZSB0aGUgZXhjZXB0aW9uIGRvZXMgbm90IG9jY3VyLiBIb3dldmVyLCB0aGVyZSBpcyBhbiBleHRyYVxuICogdW5uZWNlc3NhcnkgYmluZGluZy5cbiAqXG4gKiBAcGFyYW0geyFOb2RlfSBub2RlIENoZWNrIG5vZGUgZm9yIHBsYWNlaG9sZGVyIGJ1Z1xuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gZml4UGxhY2Vob2xkZXIobm9kZSkge1xuICBpZiAoaGFzUGxhY2Vob2xkZXJCdWcoKSAmJiBub2RlLmxvY2FsTmFtZSA9PT0gJ3RleHRhcmVhJyAmJiBub2RlLnBsYWNlaG9sZGVyXG4gICAgICAgICYmIG5vZGUucGxhY2Vob2xkZXIgPT09IG5vZGUudGV4dENvbnRlbnQpIHtcbiAgICBub2RlLnRleHRDb250ZW50ID0gbnVsbDtcbiAgfVxufVxuXG5mdW5jdGlvbiB3cmFwVGVtcGxhdGVFeHRlbnNpb24obm9kZSkge1xuICBsZXQgaXMgPSBub2RlLmdldEF0dHJpYnV0ZSgnaXMnKTtcbiAgaWYgKGlzICYmIHRlbXBsYXRlRXh0ZW5zaW9uc1tpc10pIHtcbiAgICBsZXQgdCA9IG5vZGU7XG4gICAgdC5yZW1vdmVBdHRyaWJ1dGUoJ2lzJyk7XG4gICAgbm9kZSA9IHQub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KGlzKTtcbiAgICB0LnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG5vZGUsIHQpO1xuICAgIG5vZGUuYXBwZW5kQ2hpbGQodCk7XG4gICAgd2hpbGUodC5hdHRyaWJ1dGVzLmxlbmd0aCkge1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUodC5hdHRyaWJ1dGVzWzBdLm5hbWUsIHQuYXR0cmlidXRlc1swXS52YWx1ZSk7XG4gICAgICB0LnJlbW92ZUF0dHJpYnV0ZSh0LmF0dHJpYnV0ZXNbMF0ubmFtZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBub2RlO1xufVxuXG5mdW5jdGlvbiBmaW5kVGVtcGxhdGVOb2RlKHJvb3QsIG5vZGVJbmZvKSB7XG4gIC8vIHJlY3Vyc2l2ZWx5IGFzY2VuZCB0cmVlIHVudGlsIHdlIGhpdCByb290XG4gIGxldCBwYXJlbnQgPSBub2RlSW5mby5wYXJlbnRJbmZvICYmIGZpbmRUZW1wbGF0ZU5vZGUocm9vdCwgbm9kZUluZm8ucGFyZW50SW5mbyk7XG4gIC8vIHVud2luZCB0aGUgc3RhY2ssIHJldHVybmluZyB0aGUgaW5kZXhlZCBub2RlIGF0IGVhY2ggbGV2ZWxcbiAgaWYgKHBhcmVudCkge1xuICAgIC8vIG5vdGU6IG1hcmdpbmFsbHkgZmFzdGVyIHRoYW4gaW5kZXhpbmcgdmlhIGNoaWxkTm9kZXNcbiAgICAvLyAoaHR0cDovL2pzcGVyZi5jb20vY2hpbGRub2Rlcy1sb29rdXApXG4gICAgZm9yIChsZXQgbj1wYXJlbnQuZmlyc3RDaGlsZCwgaT0wOyBuOyBuPW4ubmV4dFNpYmxpbmcpIHtcbiAgICAgIGlmIChub2RlSW5mby5wYXJlbnRJbmRleCA9PT0gaSsrKSB7XG4gICAgICAgIHJldHVybiBuO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcm9vdDtcbiAgfVxufVxuXG4vLyBjb25zdHJ1Y3QgYCRgIG1hcCAoZnJvbSBpZCBhbm5vdGF0aW9ucylcbmZ1bmN0aW9uIGFwcGx5SWRUb01hcChpbnN0LCBtYXAsIG5vZGUsIG5vZGVJbmZvKSB7XG4gIGlmIChub2RlSW5mby5pZCkge1xuICAgIG1hcFtub2RlSW5mby5pZF0gPSBub2RlO1xuICB9XG59XG5cbi8vIGluc3RhbGwgZXZlbnQgbGlzdGVuZXJzIChmcm9tIGV2ZW50IGFubm90YXRpb25zKVxuZnVuY3Rpb24gYXBwbHlFdmVudExpc3RlbmVyKGluc3QsIG5vZGUsIG5vZGVJbmZvKSB7XG4gIGlmIChub2RlSW5mby5ldmVudHMgJiYgbm9kZUluZm8uZXZlbnRzLmxlbmd0aCkge1xuICAgIGZvciAobGV0IGo9MCwgZSQ9bm9kZUluZm8uZXZlbnRzLCBlOyAoajxlJC5sZW5ndGgpICYmIChlPWUkW2pdKTsgaisrKSB7XG4gICAgICBpbnN0Ll9hZGRNZXRob2RFdmVudExpc3RlbmVyVG9Ob2RlKG5vZGUsIGUubmFtZSwgZS52YWx1ZSwgaW5zdCk7XG4gICAgfVxuICB9XG59XG5cbi8vIHB1c2ggY29uZmlndXJhdGlvbiByZWZlcmVuY2VzIGF0IGNvbmZpZ3VyZSB0aW1lXG5mdW5jdGlvbiBhcHBseVRlbXBsYXRlQ29udGVudChpbnN0LCBub2RlLCBub2RlSW5mbykge1xuICBpZiAobm9kZUluZm8udGVtcGxhdGVJbmZvKSB7XG4gICAgbm9kZS5fdGVtcGxhdGVJbmZvID0gbm9kZUluZm8udGVtcGxhdGVJbmZvO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU5vZGVFdmVudEhhbmRsZXIoY29udGV4dCwgZXZlbnROYW1lLCBtZXRob2ROYW1lKSB7XG4gIC8vIEluc3RhbmNlcyBjYW4gb3B0aW9uYWxseSBoYXZlIGEgX21ldGhvZEhvc3Qgd2hpY2ggYWxsb3dzIHJlZGlyZWN0aW5nIHdoZXJlXG4gIC8vIHRvIGZpbmQgbWV0aG9kcy4gQ3VycmVudGx5IHVzZWQgYnkgYHRlbXBsYXRpemVgLlxuICBjb250ZXh0ID0gY29udGV4dC5fbWV0aG9kSG9zdCB8fCBjb250ZXh0O1xuICBsZXQgaGFuZGxlciA9IGZ1bmN0aW9uKGUpIHtcbiAgICBpZiAoY29udGV4dFttZXRob2ROYW1lXSkge1xuICAgICAgY29udGV4dFttZXRob2ROYW1lXShlLCBlLmRldGFpbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybignbGlzdGVuZXIgbWV0aG9kIGAnICsgbWV0aG9kTmFtZSArICdgIG5vdCBkZWZpbmVkJyk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gaGFuZGxlcjtcbn1cblxuLyoqXG4gKiBFbGVtZW50IG1peGluIHRoYXQgcHJvdmlkZXMgYmFzaWMgdGVtcGxhdGUgcGFyc2luZyBhbmQgc3RhbXBpbmcsIGluY2x1ZGluZ1xuICogdGhlIGZvbGxvd2luZyB0ZW1wbGF0ZS1yZWxhdGVkIGZlYXR1cmVzIGZvciBzdGFtcGVkIHRlbXBsYXRlczpcbiAqXG4gKiAtIERlY2xhcmF0aXZlIGV2ZW50IGxpc3RlbmVycyAoYG9uLWV2ZW50bmFtZT1cImxpc3RlbmVyXCJgKVxuICogLSBNYXAgb2Ygbm9kZSBpZCdzIHRvIHN0YW1wZWQgbm9kZSBpbnN0YW5jZXMgKGB0aGlzLiQuaWRgKVxuICogLSBOZXN0ZWQgdGVtcGxhdGUgY29udGVudCBjYWNoaW5nL3JlbW92YWwgYW5kIHJlLWluc3RhbGxhdGlvbiAocGVyZm9ybWFuY2VcbiAqICAgb3B0aW1pemF0aW9uKVxuICpcbiAqIEBtaXhpbkZ1bmN0aW9uXG4gKiBAcG9seW1lclxuICogQHN1bW1hcnkgRWxlbWVudCBjbGFzcyBtaXhpbiB0aGF0IHByb3ZpZGVzIGJhc2ljIHRlbXBsYXRlIHBhcnNpbmcgYW5kIHN0YW1waW5nXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtmdW5jdGlvbihuZXc6VCl9IHN1cGVyQ2xhc3MgQ2xhc3MgdG8gYXBwbHkgbWl4aW4gdG8uXG4gKiBAcmV0dXJuIHtmdW5jdGlvbihuZXc6VCl9IHN1cGVyQ2xhc3Mgd2l0aCBtaXhpbiBhcHBsaWVkLlxuICovXG5leHBvcnQgY29uc3QgVGVtcGxhdGVTdGFtcCA9IGRlZHVwaW5nTWl4aW4oXG4gICAgLyoqXG4gICAgICogQHRlbXBsYXRlIFRcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKG5ldzpUKX0gc3VwZXJDbGFzcyBDbGFzcyB0byBhcHBseSBtaXhpbiB0by5cbiAgICAgKiBAcmV0dXJuIHtmdW5jdGlvbihuZXc6VCl9IHN1cGVyQ2xhc3Mgd2l0aCBtaXhpbiBhcHBsaWVkLlxuICAgICAqL1xuICAgIChzdXBlckNsYXNzKSA9PiB7XG5cbiAgLyoqXG4gICAqIEBwb2x5bWVyXG4gICAqIEBtaXhpbkNsYXNzXG4gICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX1RlbXBsYXRlU3RhbXB9XG4gICAqL1xuICBjbGFzcyBUZW1wbGF0ZVN0YW1wIGV4dGVuZHMgc3VwZXJDbGFzcyB7XG5cbiAgICAvKipcbiAgICAgKiBTY2FucyBhIHRlbXBsYXRlIHRvIHByb2R1Y2UgdGVtcGxhdGUgbWV0YWRhdGEuXG4gICAgICpcbiAgICAgKiBUZW1wbGF0ZS1zcGVjaWZpYyBtZXRhZGF0YSBhcmUgc3RvcmVkIGluIHRoZSBvYmplY3QgcmV0dXJuZWQsIGFuZCBub2RlLVxuICAgICAqIHNwZWNpZmljIG1ldGFkYXRhIGFyZSBzdG9yZWQgaW4gb2JqZWN0cyBpbiBpdHMgZmxhdHRlbmVkIGBub2RlSW5mb0xpc3RgXG4gICAgICogYXJyYXkuICBPbmx5IG5vZGVzIGluIHRoZSB0ZW1wbGF0ZSB0aGF0IHdlcmUgcGFyc2VkIGFzIG5vZGVzIG9mXG4gICAgICogaW50ZXJlc3QgY29udGFpbiBhbiBvYmplY3QgaW4gYG5vZGVJbmZvTGlzdGAuICBFYWNoIGBub2RlSW5mb2Agb2JqZWN0XG4gICAgICogY29udGFpbnMgYW4gYGluZGV4YCAoYGNoaWxkTm9kZXNgIGluZGV4IGluIHBhcmVudCkgYW5kIG9wdGlvbmFsbHlcbiAgICAgKiBgcGFyZW50YCwgd2hpY2ggcG9pbnRzIHRvIG5vZGUgaW5mbyBvZiBpdHMgcGFyZW50IChpbmNsdWRpbmcgaXRzIGluZGV4KS5cbiAgICAgKlxuICAgICAqIFRoZSB0ZW1wbGF0ZSBtZXRhZGF0YSBvYmplY3QgcmV0dXJuZWQgZnJvbSB0aGlzIG1ldGhvZCBoYXMgdGhlIGZvbGxvd2luZ1xuICAgICAqIHN0cnVjdHVyZSAobWFueSBmaWVsZHMgb3B0aW9uYWwpOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAgIHtcbiAgICAgKiAgICAgLy8gRmxhdHRlbmVkIGxpc3Qgb2Ygbm9kZSBtZXRhZGF0YSAoZm9yIG5vZGVzIHRoYXQgZ2VuZXJhdGVkIG1ldGFkYXRhKVxuICAgICAqICAgICBub2RlSW5mb0xpc3Q6IFtcbiAgICAgKiAgICAgICB7XG4gICAgICogICAgICAgICAvLyBgaWRgIGF0dHJpYnV0ZSBmb3IgYW55IG5vZGVzIHdpdGggaWQncyBmb3IgZ2VuZXJhdGluZyBgJGAgbWFwXG4gICAgICogICAgICAgICBpZDoge3N0cmluZ30sXG4gICAgICogICAgICAgICAvLyBgb24tZXZlbnQ9XCJoYW5kbGVyXCJgIG1ldGFkYXRhXG4gICAgICogICAgICAgICBldmVudHM6IFtcbiAgICAgKiAgICAgICAgICAge1xuICAgICAqICAgICAgICAgICAgIG5hbWU6IHtzdHJpbmd9LCAgIC8vIGV2ZW50IG5hbWVcbiAgICAgKiAgICAgICAgICAgICB2YWx1ZToge3N0cmluZ30sICAvLyBoYW5kbGVyIG1ldGhvZCBuYW1lXG4gICAgICogICAgICAgICAgIH0sIC4uLlxuICAgICAqICAgICAgICAgXSxcbiAgICAgKiAgICAgICAgIC8vIE5vdGVzIHdoZW4gdGhlIHRlbXBsYXRlIGNvbnRhaW5lZCBhIGA8c2xvdD5gIGZvciBzaGFkeSBET01cbiAgICAgKiAgICAgICAgIC8vIG9wdGltaXphdGlvbiBwdXJwb3Nlc1xuICAgICAqICAgICAgICAgaGFzSW5zZXJ0aW9uUG9pbnQ6IHtib29sZWFufSxcbiAgICAgKiAgICAgICAgIC8vIEZvciBuZXN0ZWQgYDx0ZW1wbGF0ZT5gYCBub2RlcywgbmVzdGVkIHRlbXBsYXRlIG1ldGFkYXRhXG4gICAgICogICAgICAgICB0ZW1wbGF0ZUluZm86IHtvYmplY3R9LCAvLyBuZXN0ZWQgdGVtcGxhdGUgbWV0YWRhdGFcbiAgICAgKiAgICAgICAgIC8vIE1ldGFkYXRhIHRvIGFsbG93IGVmZmljaWVudCByZXRyaWV2YWwgb2YgaW5zdGFuY2VkIG5vZGVcbiAgICAgKiAgICAgICAgIC8vIGNvcnJlc3BvbmRpbmcgdG8gdGhpcyBtZXRhZGF0YVxuICAgICAqICAgICAgICAgcGFyZW50SW5mbzoge251bWJlcn0sICAgLy8gcmVmZXJlbmNlIHRvIHBhcmVudCBub2RlSW5mbz5cbiAgICAgKiAgICAgICAgIHBhcmVudEluZGV4OiB7bnVtYmVyfSwgIC8vIGluZGV4IGluIHBhcmVudCdzIGBjaGlsZE5vZGVzYCBjb2xsZWN0aW9uXG4gICAgICogICAgICAgICBpbmZvSW5kZXg6IHtudW1iZXJ9LCAgICAvLyBpbmRleCBvZiB0aGlzIGBub2RlSW5mb2AgaW4gYHRlbXBsYXRlSW5mby5ub2RlSW5mb0xpc3RgXG4gICAgICogICAgICAgfSxcbiAgICAgKiAgICAgICAuLi5cbiAgICAgKiAgICAgXSxcbiAgICAgKiAgICAgLy8gV2hlbiB0cnVlLCB0aGUgdGVtcGxhdGUgaGFkIHRoZSBgc3RyaXAtd2hpdGVzcGFjZWAgYXR0cmlidXRlXG4gICAgICogICAgIC8vIG9yIHdhcyBuZXN0ZWQgaW4gYSB0ZW1wbGF0ZSB3aXRoIHRoYXQgc2V0dGluZ1xuICAgICAqICAgICBzdHJpcFdoaXRlc3BhY2U6IHtib29sZWFufSxcbiAgICAgKiAgICAgLy8gRm9yIG5lc3RlZCB0ZW1wbGF0ZXMsIG5lc3RlZCB0ZW1wbGF0ZSBjb250ZW50IGlzIG1vdmVkIGludG9cbiAgICAgKiAgICAgLy8gYSBkb2N1bWVudCBmcmFnbWVudCBzdG9yZWQgaGVyZTsgdGhpcyBpcyBhbiBvcHRpbWl6YXRpb24gdG9cbiAgICAgKiAgICAgLy8gYXZvaWQgdGhlIGNvc3Qgb2YgbmVzdGVkIHRlbXBsYXRlIGNsb25pbmdcbiAgICAgKiAgICAgY29udGVudDoge0RvY3VtZW50RnJhZ21lbnR9XG4gICAgICogICB9XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBraWNrcyBvZmYgYSByZWN1cnNpdmUgdHJlZXdhbGsgYXMgZm9sbG93czpcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqICAgIF9wYXJzZVRlbXBsYXRlIDwtLS0tLS0tLS0tLS0tLS0tLS0tLS0rXG4gICAgICogICAgICBfcGFyc2VUZW1wbGF0ZUNvbnRlbnQgICAgICAgICAgICAgIHxcbiAgICAgKiAgICAgICAgX3BhcnNlVGVtcGxhdGVOb2RlICA8LS0tLS0tLS0tLS0tfC0tK1xuICAgICAqICAgICAgICAgIF9wYXJzZVRlbXBsYXRlTmVzdGVkVGVtcGxhdGUgLS0rICB8XG4gICAgICogICAgICAgICAgX3BhcnNlVGVtcGxhdGVDaGlsZE5vZGVzIC0tLS0tLS0tLStcbiAgICAgKiAgICAgICAgICBfcGFyc2VUZW1wbGF0ZU5vZGVBdHRyaWJ1dGVzXG4gICAgICogICAgICAgICAgICBfcGFyc2VUZW1wbGF0ZU5vZGVBdHRyaWJ1dGVcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogVGhlc2UgbWV0aG9kcyBtYXkgYmUgb3ZlcnJpZGRlbiB0byBhZGQgY3VzdG9tIG1ldGFkYXRhIGFib3V0IHRlbXBsYXRlc1xuICAgICAqIHRvIGVpdGhlciBgdGVtcGxhdGVJbmZvYCBvciBgbm9kZUluZm9gLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IHRoaXMgbWV0aG9kIG1heSBiZSBkZXN0cnVjdGl2ZSB0byB0aGUgdGVtcGxhdGUsIGluIHRoYXRcbiAgICAgKiBlLmcuIGV2ZW50IGFubm90YXRpb25zIG1heSBiZSByZW1vdmVkIGFmdGVyIGJlaW5nIG5vdGVkIGluIHRoZVxuICAgICAqIHRlbXBsYXRlIG1ldGFkYXRhLlxuICAgICAqXG4gICAgICogQHBhcmFtIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGUgVGVtcGxhdGUgdG8gcGFyc2VcbiAgICAgKiBAcGFyYW0ge1RlbXBsYXRlSW5mbz19IG91dGVyVGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhIGZyb20gdGhlIG91dGVyXG4gICAgICogICB0ZW1wbGF0ZSwgZm9yIHBhcnNpbmcgbmVzdGVkIHRlbXBsYXRlc1xuICAgICAqIEByZXR1cm4geyFUZW1wbGF0ZUluZm99IFBhcnNlZCB0ZW1wbGF0ZSBtZXRhZGF0YVxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIF9wYXJzZVRlbXBsYXRlKHRlbXBsYXRlLCBvdXRlclRlbXBsYXRlSW5mbykge1xuICAgICAgLy8gc2luY2UgYSB0ZW1wbGF0ZSBtYXkgYmUgcmUtdXNlZCwgbWVtby1pemUgbWV0YWRhdGFcbiAgICAgIGlmICghdGVtcGxhdGUuX3RlbXBsYXRlSW5mbykge1xuICAgICAgICAvLyBUT0RPKHJpY3RpYyk6IGZpeCB0eXBpbmdcbiAgICAgICAgbGV0IC8qKiA/ICovIHRlbXBsYXRlSW5mbyA9IHRlbXBsYXRlLl90ZW1wbGF0ZUluZm8gPSB7fTtcbiAgICAgICAgdGVtcGxhdGVJbmZvLm5vZGVJbmZvTGlzdCA9IFtdO1xuICAgICAgICB0ZW1wbGF0ZUluZm8uc3RyaXBXaGl0ZVNwYWNlID1cbiAgICAgICAgICAob3V0ZXJUZW1wbGF0ZUluZm8gJiYgb3V0ZXJUZW1wbGF0ZUluZm8uc3RyaXBXaGl0ZVNwYWNlKSB8fFxuICAgICAgICAgIHRlbXBsYXRlLmhhc0F0dHJpYnV0ZSgnc3RyaXAtd2hpdGVzcGFjZScpO1xuICAgICAgICAgLy8gVE9ETyhyaWN0aWMpOiBmaXggdHlwaW5nXG4gICAgICAgICB0aGlzLl9wYXJzZVRlbXBsYXRlQ29udGVudChcbiAgICAgICAgICAgICB0ZW1wbGF0ZSwgdGVtcGxhdGVJbmZvLCAvKiogQHR5cGUgez99ICovICh7cGFyZW50OiBudWxsfSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRlbXBsYXRlLl90ZW1wbGF0ZUluZm87XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VlIGRvY3MgZm9yIF9wYXJzZVRlbXBsYXRlTm9kZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlIC5cbiAgICAgKiBAcGFyYW0geyFUZW1wbGF0ZUluZm99IHRlbXBsYXRlSW5mbyAuXG4gICAgICogQHBhcmFtIHshTm9kZUluZm99IG5vZGVJbmZvIC5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSAuXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgX3BhcnNlVGVtcGxhdGVDb250ZW50KHRlbXBsYXRlLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcGFyc2VUZW1wbGF0ZU5vZGUodGVtcGxhdGUuY29udGVudCwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyc2VzIHRlbXBsYXRlIG5vZGUgYW5kIGFkZHMgdGVtcGxhdGUgYW5kIG5vZGUgbWV0YWRhdGEgYmFzZWQgb25cbiAgICAgKiB0aGUgY3VycmVudCBub2RlLCBhbmQgaXRzIGBjaGlsZE5vZGVzYCBhbmQgYGF0dHJpYnV0ZXNgLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgbWF5IGJlIG92ZXJyaWRkZW4gdG8gYWRkIGN1c3RvbSBub2RlIG9yIHRlbXBsYXRlIHNwZWNpZmljXG4gICAgICogbWV0YWRhdGEgYmFzZWQgb24gdGhpcyBub2RlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtOb2RlfSBub2RlIE5vZGUgdG8gcGFyc2VcbiAgICAgKiBAcGFyYW0geyFUZW1wbGF0ZUluZm99IHRlbXBsYXRlSW5mbyBUZW1wbGF0ZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZVxuICAgICAqIEBwYXJhbSB7IU5vZGVJbmZvfSBub2RlSW5mbyBOb2RlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlLlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgdmlzaXRlZCBub2RlIGFkZGVkIG5vZGUtc3BlY2lmaWNcbiAgICAgKiAgIG1ldGFkYXRhIHRvIGBub2RlSW5mb2BcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBfcGFyc2VUZW1wbGF0ZU5vZGUobm9kZSwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbykge1xuICAgICAgbGV0IG5vdGVkID0gZmFsc2U7XG4gICAgICBsZXQgZWxlbWVudCA9IC8qKiBAdHlwZSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9ICovIChub2RlKTtcbiAgICAgIGlmIChlbGVtZW50LmxvY2FsTmFtZSA9PSAndGVtcGxhdGUnICYmICFlbGVtZW50Lmhhc0F0dHJpYnV0ZSgncHJlc2VydmUtY29udGVudCcpKSB7XG4gICAgICAgIG5vdGVkID0gdGhpcy5fcGFyc2VUZW1wbGF0ZU5lc3RlZFRlbXBsYXRlKGVsZW1lbnQsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8pIHx8IG5vdGVkO1xuICAgICAgfSBlbHNlIGlmIChlbGVtZW50LmxvY2FsTmFtZSA9PT0gJ3Nsb3QnKSB7XG4gICAgICAgIC8vIEZvciBTaGFkeURvbSBvcHRpbWl6YXRpb24sIGluZGljYXRpbmcgdGhlcmUgaXMgYW4gaW5zZXJ0aW9uIHBvaW50XG4gICAgICAgIHRlbXBsYXRlSW5mby5oYXNJbnNlcnRpb25Qb2ludCA9IHRydWU7XG4gICAgICB9XG4gICAgICBmaXhQbGFjZWhvbGRlcihlbGVtZW50KTtcbiAgICAgIGlmIChlbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgdGhpcy5fcGFyc2VUZW1wbGF0ZUNoaWxkTm9kZXMoZWxlbWVudCwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbyk7XG4gICAgICB9XG4gICAgICBpZiAoZWxlbWVudC5oYXNBdHRyaWJ1dGVzICYmIGVsZW1lbnQuaGFzQXR0cmlidXRlcygpKSB7XG4gICAgICAgIG5vdGVkID0gdGhpcy5fcGFyc2VUZW1wbGF0ZU5vZGVBdHRyaWJ1dGVzKGVsZW1lbnQsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8pIHx8IG5vdGVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5vdGVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhcnNlcyB0ZW1wbGF0ZSBjaGlsZCBub2RlcyBmb3IgdGhlIGdpdmVuIHJvb3Qgbm9kZS5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGFsc28gd3JhcHMgd2hpdGVsaXN0ZWQgbGVnYWN5IHRlbXBsYXRlIGV4dGVuc2lvbnNcbiAgICAgKiAoYGlzPVwiZG9tLWlmXCJgIGFuZCBgaXM9XCJkb20tcmVwZWF0XCJgKSB3aXRoIHRoZWlyIGVxdWl2YWxlbnQgZWxlbWVudFxuICAgICAqIHdyYXBwZXJzLCBjb2xsYXBzZXMgdGV4dCBub2RlcywgYW5kIHN0cmlwcyB3aGl0ZXNwYWNlIGZyb20gdGhlIHRlbXBsYXRlXG4gICAgICogaWYgdGhlIGB0ZW1wbGF0ZUluZm8uc3RyaXBXaGl0ZXNwYWNlYCBzZXR0aW5nIHdhcyBwcm92aWRlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gcm9vdCBSb290IG5vZGUgd2hvc2UgYGNoaWxkTm9kZXNgIHdpbGwgYmUgcGFyc2VkXG4gICAgICogQHBhcmFtIHshVGVtcGxhdGVJbmZvfSB0ZW1wbGF0ZUluZm8gVGVtcGxhdGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGVcbiAgICAgKiBAcGFyYW0geyFOb2RlSW5mb30gbm9kZUluZm8gTm9kZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZS5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIHN0YXRpYyBfcGFyc2VUZW1wbGF0ZUNoaWxkTm9kZXMocm9vdCwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbykge1xuICAgICAgaWYgKHJvb3QubG9jYWxOYW1lID09PSAnc2NyaXB0JyB8fCByb290LmxvY2FsTmFtZSA9PT0gJ3N0eWxlJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBub2RlPXJvb3QuZmlyc3RDaGlsZCwgcGFyZW50SW5kZXg9MCwgbmV4dDsgbm9kZTsgbm9kZT1uZXh0KSB7XG4gICAgICAgIC8vIFdyYXAgdGVtcGxhdGVzXG4gICAgICAgIGlmIChub2RlLmxvY2FsTmFtZSA9PSAndGVtcGxhdGUnKSB7XG4gICAgICAgICAgbm9kZSA9IHdyYXBUZW1wbGF0ZUV4dGVuc2lvbihub2RlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBjb2xsYXBzZSBhZGphY2VudCB0ZXh0Tm9kZXM6IGZpeGVzIGFuIElFIGlzc3VlIHRoYXQgY2FuIGNhdXNlXG4gICAgICAgIC8vIHRleHQgbm9kZXMgdG8gYmUgaW5leHBsaWNhYmx5IHNwbGl0ID0oXG4gICAgICAgIC8vIG5vdGUgdGhhdCByb290Lm5vcm1hbGl6ZSgpIHNob3VsZCB3b3JrIGJ1dCBkb2VzIG5vdCBzbyB3ZSBkbyB0aGlzXG4gICAgICAgIC8vIG1hbnVhbGx5LlxuICAgICAgICBuZXh0ID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSB7XG4gICAgICAgICAgbGV0IC8qKiBOb2RlICovIG4gPSBuZXh0O1xuICAgICAgICAgIHdoaWxlIChuICYmIChuLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSkpIHtcbiAgICAgICAgICAgIG5vZGUudGV4dENvbnRlbnQgKz0gbi50ZXh0Q29udGVudDtcbiAgICAgICAgICAgIG5leHQgPSBuLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgcm9vdC5yZW1vdmVDaGlsZChuKTtcbiAgICAgICAgICAgIG4gPSBuZXh0O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBvcHRpb25hbGx5IHN0cmlwIHdoaXRlc3BhY2VcbiAgICAgICAgICBpZiAodGVtcGxhdGVJbmZvLnN0cmlwV2hpdGVTcGFjZSAmJiAhbm9kZS50ZXh0Q29udGVudC50cmltKCkpIHtcbiAgICAgICAgICAgIHJvb3QucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNoaWxkSW5mbyA9XG4gICAgICAgICAgICAvKiogQHR5cGUgeyFOb2RlSW5mb30gKi8gKHtwYXJlbnRJbmRleCwgcGFyZW50SW5mbzogbm9kZUluZm99KTtcbiAgICAgICAgaWYgKHRoaXMuX3BhcnNlVGVtcGxhdGVOb2RlKG5vZGUsIHRlbXBsYXRlSW5mbywgY2hpbGRJbmZvKSkge1xuICAgICAgICAgIGNoaWxkSW5mby5pbmZvSW5kZXggPSB0ZW1wbGF0ZUluZm8ubm9kZUluZm9MaXN0LnB1c2goY2hpbGRJbmZvKSAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSW5jcmVtZW50IGlmIG5vdCByZW1vdmVkXG4gICAgICAgIGlmIChub2RlLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICBwYXJlbnRJbmRleCsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyc2VzIHRlbXBsYXRlIGNvbnRlbnQgZm9yIHRoZSBnaXZlbiBuZXN0ZWQgYDx0ZW1wbGF0ZT5gLlxuICAgICAqXG4gICAgICogTmVzdGVkIHRlbXBsYXRlIGluZm8gaXMgc3RvcmVkIGFzIGB0ZW1wbGF0ZUluZm9gIGluIHRoZSBjdXJyZW50IG5vZGUnc1xuICAgICAqIGBub2RlSW5mb2AuIGB0ZW1wbGF0ZS5jb250ZW50YCBpcyByZW1vdmVkIGFuZCBzdG9yZWQgaW4gYHRlbXBsYXRlSW5mb2AuXG4gICAgICogSXQgd2lsbCB0aGVuIGJlIHRoZSByZXNwb25zaWJpbGl0eSBvZiB0aGUgaG9zdCB0byBzZXQgaXQgYmFjayB0byB0aGVcbiAgICAgKiB0ZW1wbGF0ZSBhbmQgZm9yIHVzZXJzIHN0YW1waW5nIG5lc3RlZCB0ZW1wbGF0ZXMgdG8gdXNlIHRoZVxuICAgICAqIGBfY29udGVudEZvclRlbXBsYXRlYCBtZXRob2QgdG8gcmV0cmlldmUgdGhlIGNvbnRlbnQgZm9yIHRoaXMgdGVtcGxhdGVcbiAgICAgKiAoYW4gb3B0aW1pemF0aW9uIHRvIGF2b2lkIHRoZSBjb3N0IG9mIGNsb25pbmcgbmVzdGVkIHRlbXBsYXRlIGNvbnRlbnQpLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtIVE1MVGVtcGxhdGVFbGVtZW50fSBub2RlIE5vZGUgdG8gcGFyc2UgKGEgPHRlbXBsYXRlPilcbiAgICAgKiBAcGFyYW0ge1RlbXBsYXRlSW5mb30gb3V0ZXJUZW1wbGF0ZUluZm8gVGVtcGxhdGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGVcbiAgICAgKiAgIHRoYXQgaW5jbHVkZXMgdGhlIHRlbXBsYXRlIGBub2RlYFxuICAgICAqIEBwYXJhbSB7IU5vZGVJbmZvfSBub2RlSW5mbyBOb2RlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlLlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgdmlzaXRlZCBub2RlIGFkZGVkIG5vZGUtc3BlY2lmaWNcbiAgICAgKiAgIG1ldGFkYXRhIHRvIGBub2RlSW5mb2BcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBfcGFyc2VUZW1wbGF0ZU5lc3RlZFRlbXBsYXRlKG5vZGUsIG91dGVyVGVtcGxhdGVJbmZvLCBub2RlSW5mbykge1xuICAgICAgLy8gVE9ETyhyaWN0aWMpOiB0aGUgdHlwZSBvZiBub2RlIHNob3VsZCBiZSBub24tbnVsbFxuICAgICAgbGV0IGVsZW1lbnQgPSAvKiogQHR5cGUgeyFIVE1MVGVtcGxhdGVFbGVtZW50fSAqLyAobm9kZSk7XG4gICAgICBsZXQgdGVtcGxhdGVJbmZvID0gdGhpcy5fcGFyc2VUZW1wbGF0ZShlbGVtZW50LCBvdXRlclRlbXBsYXRlSW5mbyk7XG4gICAgICBsZXQgY29udGVudCA9IHRlbXBsYXRlSW5mby5jb250ZW50ID1cbiAgICAgICAgICBlbGVtZW50LmNvbnRlbnQub3duZXJEb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICBjb250ZW50LmFwcGVuZENoaWxkKGVsZW1lbnQuY29udGVudCk7XG4gICAgICBub2RlSW5mby50ZW1wbGF0ZUluZm8gPSB0ZW1wbGF0ZUluZm87XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgdGVtcGxhdGUgbm9kZSBhdHRyaWJ1dGVzIGFuZCBhZGRzIG5vZGUgbWV0YWRhdGEgdG8gYG5vZGVJbmZvYFxuICAgICAqIGZvciBub2RlcyBvZiBpbnRlcmVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZSBOb2RlIHRvIHBhcnNlXG4gICAgICogQHBhcmFtIHshVGVtcGxhdGVJbmZvfSB0ZW1wbGF0ZUluZm8gVGVtcGxhdGUgbWV0YWRhdGEgZm9yIGN1cnJlbnRcbiAgICAgKiAgICAgdGVtcGxhdGVcbiAgICAgKiBAcGFyYW0geyFOb2RlSW5mb30gbm9kZUluZm8gTm9kZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZS5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIHZpc2l0ZWQgbm9kZSBhZGRlZCBub2RlLXNwZWNpZmljXG4gICAgICogICBtZXRhZGF0YSB0byBgbm9kZUluZm9gXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgX3BhcnNlVGVtcGxhdGVOb2RlQXR0cmlidXRlcyhub2RlLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvKSB7XG4gICAgICAvLyBNYWtlIGNvcHkgb2Ygb3JpZ2luYWwgYXR0cmlidXRlIGxpc3QsIHNpbmNlIHRoZSBvcmRlciBtYXkgY2hhbmdlXG4gICAgICAvLyBhcyBhdHRyaWJ1dGVzIGFyZSBhZGRlZCBhbmQgcmVtb3ZlZFxuICAgICAgbGV0IG5vdGVkID0gZmFsc2U7XG4gICAgICBsZXQgYXR0cnMgPSBBcnJheS5mcm9tKG5vZGUuYXR0cmlidXRlcyk7XG4gICAgICBmb3IgKGxldCBpPWF0dHJzLmxlbmd0aC0xLCBhOyAoYT1hdHRyc1tpXSk7IGktLSkge1xuICAgICAgICBub3RlZCA9IHRoaXMuX3BhcnNlVGVtcGxhdGVOb2RlQXR0cmlidXRlKG5vZGUsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8sIGEubmFtZSwgYS52YWx1ZSkgfHwgbm90ZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gbm90ZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgc2luZ2xlIHRlbXBsYXRlIG5vZGUgYXR0cmlidXRlIGFuZCBhZGRzIG5vZGUgbWV0YWRhdGEgdG9cbiAgICAgKiBgbm9kZUluZm9gIGZvciBhdHRyaWJ1dGVzIG9mIGludGVyZXN0LlxuICAgICAqXG4gICAgICogVGhpcyBpbXBsZW1lbnRhdGlvbiBhZGRzIG1ldGFkYXRhIGZvciBgb24tZXZlbnQ9XCJoYW5kbGVyXCJgIGF0dHJpYnV0ZXNcbiAgICAgKiBhbmQgYGlkYCBhdHRyaWJ1dGVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBub2RlIE5vZGUgdG8gcGFyc2VcbiAgICAgKiBAcGFyYW0geyFUZW1wbGF0ZUluZm99IHRlbXBsYXRlSW5mbyBUZW1wbGF0ZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZVxuICAgICAqIEBwYXJhbSB7IU5vZGVJbmZvfSBub2RlSW5mbyBOb2RlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEF0dHJpYnV0ZSBuYW1lXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIEF0dHJpYnV0ZSB2YWx1ZVxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgdmlzaXRlZCBub2RlIGFkZGVkIG5vZGUtc3BlY2lmaWNcbiAgICAgKiAgIG1ldGFkYXRhIHRvIGBub2RlSW5mb2BcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBfcGFyc2VUZW1wbGF0ZU5vZGVBdHRyaWJ1dGUobm9kZSwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbywgbmFtZSwgdmFsdWUpIHtcbiAgICAgIC8vIGV2ZW50cyAob24tKilcbiAgICAgIGlmIChuYW1lLnNsaWNlKDAsIDMpID09PSAnb24tJykge1xuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgbm9kZUluZm8uZXZlbnRzID0gbm9kZUluZm8uZXZlbnRzIHx8IFtdO1xuICAgICAgICBub2RlSW5mby5ldmVudHMucHVzaCh7XG4gICAgICAgICAgbmFtZTogbmFtZS5zbGljZSgzKSxcbiAgICAgICAgICB2YWx1ZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICAvLyBzdGF0aWMgaWRcbiAgICAgIGVsc2UgaWYgKG5hbWUgPT09ICdpZCcpIHtcbiAgICAgICAgbm9kZUluZm8uaWQgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYGNvbnRlbnRgIGRvY3VtZW50IGZyYWdtZW50IGZvciBhIGdpdmVuIHRlbXBsYXRlLlxuICAgICAqXG4gICAgICogRm9yIG5lc3RlZCB0ZW1wbGF0ZXMsIFBvbHltZXIgcGVyZm9ybXMgYW4gb3B0aW1pemF0aW9uIHRvIGNhY2hlIG5lc3RlZFxuICAgICAqIHRlbXBsYXRlIGNvbnRlbnQgdG8gYXZvaWQgdGhlIGNvc3Qgb2YgY2xvbmluZyBkZWVwbHkgbmVzdGVkIHRlbXBsYXRlcy5cbiAgICAgKiBUaGlzIG1ldGhvZCByZXRyaWV2ZXMgdGhlIGNhY2hlZCBjb250ZW50IGZvciBhIGdpdmVuIHRlbXBsYXRlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZSBUZW1wbGF0ZSB0byByZXRyaWV2ZSBgY29udGVudGAgZm9yXG4gICAgICogQHJldHVybiB7RG9jdW1lbnRGcmFnbWVudH0gQ29udGVudCBmcmFnbWVudFxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIF9jb250ZW50Rm9yVGVtcGxhdGUodGVtcGxhdGUpIHtcbiAgICAgIGxldCB0ZW1wbGF0ZUluZm8gPSAvKiogQHR5cGUge0hUTUxUZW1wbGF0ZUVsZW1lbnRXaXRoSW5mb30gKi8gKHRlbXBsYXRlKS5fdGVtcGxhdGVJbmZvO1xuICAgICAgcmV0dXJuICh0ZW1wbGF0ZUluZm8gJiYgdGVtcGxhdGVJbmZvLmNvbnRlbnQpIHx8IHRlbXBsYXRlLmNvbnRlbnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xvbmVzIHRoZSBwcm92aWRlZCB0ZW1wbGF0ZSBjb250ZW50IGFuZCByZXR1cm5zIGEgZG9jdW1lbnQgZnJhZ21lbnRcbiAgICAgKiBjb250YWluaW5nIHRoZSBjbG9uZWQgZG9tLlxuICAgICAqXG4gICAgICogVGhlIHRlbXBsYXRlIGlzIHBhcnNlZCAob25jZSBhbmQgbWVtb2l6ZWQpIHVzaW5nIHRoaXMgbGlicmFyeSdzXG4gICAgICogdGVtcGxhdGUgcGFyc2luZyBmZWF0dXJlcywgYW5kIHByb3ZpZGVzIHRoZSBmb2xsb3dpbmcgdmFsdWUtYWRkZWRcbiAgICAgKiBmZWF0dXJlczpcbiAgICAgKiAqIEFkZHMgZGVjbGFyYXRpdmUgZXZlbnQgbGlzdGVuZXJzIGZvciBgb24tZXZlbnQ9XCJoYW5kbGVyXCJgIGF0dHJpYnV0ZXNcbiAgICAgKiAqIEdlbmVyYXRlcyBhbiBcImlkIG1hcFwiIGZvciBhbGwgbm9kZXMgd2l0aCBpZCdzIHVuZGVyIGAkYCBvbiByZXR1cm5lZFxuICAgICAqICAgZG9jdW1lbnQgZnJhZ21lbnRcbiAgICAgKiAqIFBhc3NlcyB0ZW1wbGF0ZSBpbmZvIGluY2x1ZGluZyBgY29udGVudGAgYmFjayB0byB0ZW1wbGF0ZXMgYXNcbiAgICAgKiAgIGBfdGVtcGxhdGVJbmZvYCAoYSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gdG8gYXZvaWQgZGVlcCB0ZW1wbGF0ZVxuICAgICAqICAgY2xvbmluZylcbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCB0aGUgbWVtb2l6ZWQgdGVtcGxhdGUgcGFyc2luZyBwcm9jZXNzIGlzIGRlc3RydWN0aXZlIHRvIHRoZVxuICAgICAqIHRlbXBsYXRlOiBhdHRyaWJ1dGVzIGZvciBiaW5kaW5ncyBhbmQgZGVjbGFyYXRpdmUgZXZlbnQgbGlzdGVuZXJzIGFyZVxuICAgICAqIHJlbW92ZWQgYWZ0ZXIgYmVpbmcgbm90ZWQgaW4gbm90ZXMsIGFuZCBhbnkgbmVzdGVkIGA8dGVtcGxhdGU+LmNvbnRlbnRgXG4gICAgICogaXMgcmVtb3ZlZCBhbmQgc3RvcmVkIGluIG5vdGVzIGFzIHdlbGwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyFIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZSBUZW1wbGF0ZSB0byBzdGFtcFxuICAgICAqIEByZXR1cm4geyFTdGFtcGVkVGVtcGxhdGV9IENsb25lZCB0ZW1wbGF0ZSBjb250ZW50XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX3N0YW1wVGVtcGxhdGUodGVtcGxhdGUpIHtcbiAgICAgIC8vIFBvbHlmaWxsIHN1cHBvcnQ6IGJvb3RzdHJhcCB0aGUgdGVtcGxhdGUgaWYgaXQgaGFzIG5vdCBhbHJlYWR5IGJlZW5cbiAgICAgIGlmICh0ZW1wbGF0ZSAmJiAhdGVtcGxhdGUuY29udGVudCAmJlxuICAgICAgICAgIHdpbmRvdy5IVE1MVGVtcGxhdGVFbGVtZW50ICYmIEhUTUxUZW1wbGF0ZUVsZW1lbnQuZGVjb3JhdGUpIHtcbiAgICAgICAgSFRNTFRlbXBsYXRlRWxlbWVudC5kZWNvcmF0ZSh0ZW1wbGF0ZSk7XG4gICAgICB9XG4gICAgICBsZXQgdGVtcGxhdGVJbmZvID0gdGhpcy5jb25zdHJ1Y3Rvci5fcGFyc2VUZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgICBsZXQgbm9kZUluZm8gPSB0ZW1wbGF0ZUluZm8ubm9kZUluZm9MaXN0O1xuICAgICAgbGV0IGNvbnRlbnQgPSB0ZW1wbGF0ZUluZm8uY29udGVudCB8fCB0ZW1wbGF0ZS5jb250ZW50O1xuICAgICAgbGV0IGRvbSA9IC8qKiBAdHlwZSB7RG9jdW1lbnRGcmFnbWVudH0gKi8gKGRvY3VtZW50LmltcG9ydE5vZGUoY29udGVudCwgdHJ1ZSkpO1xuICAgICAgLy8gTk9URTogU2hhZHlEb20gb3B0aW1pemF0aW9uIGluZGljYXRpbmcgdGhlcmUgaXMgYW4gaW5zZXJ0aW9uIHBvaW50XG4gICAgICBkb20uX19ub0luc2VydGlvblBvaW50ID0gIXRlbXBsYXRlSW5mby5oYXNJbnNlcnRpb25Qb2ludDtcbiAgICAgIGxldCBub2RlcyA9IGRvbS5ub2RlTGlzdCA9IG5ldyBBcnJheShub2RlSW5mby5sZW5ndGgpO1xuICAgICAgZG9tLiQgPSB7fTtcbiAgICAgIGZvciAobGV0IGk9MCwgbD1ub2RlSW5mby5sZW5ndGgsIGluZm87IChpPGwpICYmIChpbmZvPW5vZGVJbmZvW2ldKTsgaSsrKSB7XG4gICAgICAgIGxldCBub2RlID0gbm9kZXNbaV0gPSBmaW5kVGVtcGxhdGVOb2RlKGRvbSwgaW5mbyk7XG4gICAgICAgIGFwcGx5SWRUb01hcCh0aGlzLCBkb20uJCwgbm9kZSwgaW5mbyk7XG4gICAgICAgIGFwcGx5VGVtcGxhdGVDb250ZW50KHRoaXMsIG5vZGUsIGluZm8pO1xuICAgICAgICBhcHBseUV2ZW50TGlzdGVuZXIodGhpcywgbm9kZSwgaW5mbyk7XG4gICAgICB9XG4gICAgICBkb20gPSAvKiogQHR5cGUgeyFTdGFtcGVkVGVtcGxhdGV9ICovKGRvbSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1hc3NpZ25cbiAgICAgIHJldHVybiBkb207XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBhbiBldmVudCBsaXN0ZW5lciBieSBtZXRob2QgbmFtZSBmb3IgdGhlIGV2ZW50IHByb3ZpZGVkLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgZ2VuZXJhdGVzIGEgaGFuZGxlciBmdW5jdGlvbiB0aGF0IGxvb2tzIHVwIHRoZSBtZXRob2RcbiAgICAgKiBuYW1lIGF0IGhhbmRsaW5nIHRpbWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyFFdmVudFRhcmdldH0gbm9kZSBOb2RlIHRvIGFkZCBsaXN0ZW5lciBvblxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgTmFtZSBvZiBldmVudFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIE5hbWUgb2YgbWV0aG9kXG4gICAgICogQHBhcmFtIHsqPX0gY29udGV4dCBDb250ZXh0IHRoZSBtZXRob2Qgd2lsbCBiZSBjYWxsZWQgb24gKGRlZmF1bHRzXG4gICAgICogICB0byBgbm9kZWApXG4gICAgICogQHJldHVybiB7RnVuY3Rpb259IEdlbmVyYXRlZCBoYW5kbGVyIGZ1bmN0aW9uXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX2FkZE1ldGhvZEV2ZW50TGlzdGVuZXJUb05vZGUobm9kZSwgZXZlbnROYW1lLCBtZXRob2ROYW1lLCBjb250ZXh0KSB7XG4gICAgICBjb250ZXh0ID0gY29udGV4dCB8fCBub2RlO1xuICAgICAgbGV0IGhhbmRsZXIgPSBjcmVhdGVOb2RlRXZlbnRIYW5kbGVyKGNvbnRleHQsIGV2ZW50TmFtZSwgbWV0aG9kTmFtZSk7XG4gICAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVyVG9Ob2RlKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgICByZXR1cm4gaGFuZGxlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZSBwb2ludCBmb3IgYWRkaW5nIGN1c3RvbSBvciBzaW11bGF0ZWQgZXZlbnQgaGFuZGxpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyFFdmVudFRhcmdldH0gbm9kZSBOb2RlIHRvIGFkZCBldmVudCBsaXN0ZW5lciB0b1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgTmFtZSBvZiBldmVudFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oIUV2ZW50KTp2b2lkfSBoYW5kbGVyIExpc3RlbmVyIGZ1bmN0aW9uIHRvIGFkZFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX2FkZEV2ZW50TGlzdGVuZXJUb05vZGUobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyKSB7XG4gICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZSBwb2ludCBmb3IgYWRkaW5nIGN1c3RvbSBvciBzaW11bGF0ZWQgZXZlbnQgaGFuZGxpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyFFdmVudFRhcmdldH0gbm9kZSBOb2RlIHRvIHJlbW92ZSBldmVudCBsaXN0ZW5lciBmcm9tXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBOYW1lIG9mIGV2ZW50XG4gICAgICogQHBhcmFtIHtmdW5jdGlvbighRXZlbnQpOnZvaWR9IGhhbmRsZXIgTGlzdGVuZXIgZnVuY3Rpb24gdG8gcmVtb3ZlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfcmVtb3ZlRXZlbnRMaXN0ZW5lckZyb21Ob2RlKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICAgICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgfVxuXG4gIH1cblxuICByZXR1cm4gVGVtcGxhdGVTdGFtcDtcblxufSk7XG4iLCIvKipcbiAqIEBmaWxlb3ZlcnZpZXdcbiAqIEBzdXBwcmVzcyB7Y2hlY2tQcm90b3R5cGFsVHlwZXN9XG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZFxuICogYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0IFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heVxuICogYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHQgQ29kZSBkaXN0cmlidXRlZCBieVxuICogR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUFxuICogcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG5cbmltcG9ydCAnLi4vdXRpbHMvYm9vdC5qcyc7XG5pbXBvcnQgeyB3cmFwIH0gZnJvbSAnLi4vdXRpbHMvd3JhcC5qcyc7XG5pbXBvcnQgeyBkZWR1cGluZ01peGluIH0gZnJvbSAnLi4vdXRpbHMvbWl4aW4uanMnO1xuaW1wb3J0IHsgcm9vdCwgaXNBbmNlc3RvciwgaXNEZXNjZW5kYW50LCBnZXQsIHRyYW5zbGF0ZSwgaXNQYXRoLCBzZXQsIG5vcm1hbGl6ZSB9IGZyb20gJy4uL3V0aWxzL3BhdGguanMnO1xuLyogZm9yIG5vdGlmeSwgcmVmbGVjdCAqL1xuaW1wb3J0IHsgY2FtZWxUb0Rhc2hDYXNlLCBkYXNoVG9DYW1lbENhc2UgfSBmcm9tICcuLi91dGlscy9jYXNlLW1hcC5qcyc7XG5pbXBvcnQgeyBQcm9wZXJ0eUFjY2Vzc29ycyB9IGZyb20gJy4vcHJvcGVydHktYWNjZXNzb3JzLmpzJztcbi8qIGZvciBhbm5vdGF0ZWQgZWZmZWN0cyAqL1xuaW1wb3J0IHsgVGVtcGxhdGVTdGFtcCB9IGZyb20gJy4vdGVtcGxhdGUtc3RhbXAuanMnO1xuaW1wb3J0IHsgc2FuaXRpemVET01WYWx1ZSB9IGZyb20gJy4uL3V0aWxzL3NldHRpbmdzLmpzJztcblxuLy8gTW9ub3RvbmljYWxseSBpbmNyZWFzaW5nIHVuaXF1ZSBJRCB1c2VkIGZvciBkZS1kdXBpbmcgZWZmZWN0cyB0cmlnZ2VyZWRcbi8vIGZyb20gbXVsdGlwbGUgcHJvcGVydGllcyBpbiB0aGUgc2FtZSB0dXJuXG5sZXQgZGVkdXBlSWQgPSAwO1xuXG4vKipcbiAqIFByb3BlcnR5IGVmZmVjdCB0eXBlczsgZWZmZWN0cyBhcmUgc3RvcmVkIG9uIHRoZSBwcm90b3R5cGUgdXNpbmcgdGhlc2Uga2V5c1xuICogQGVudW0ge3N0cmluZ31cbiAqL1xuY29uc3QgVFlQRVMgPSB7XG4gIENPTVBVVEU6ICdfX2NvbXB1dGVFZmZlY3RzJyxcbiAgUkVGTEVDVDogJ19fcmVmbGVjdEVmZmVjdHMnLFxuICBOT1RJRlk6ICdfX25vdGlmeUVmZmVjdHMnLFxuICBQUk9QQUdBVEU6ICdfX3Byb3BhZ2F0ZUVmZmVjdHMnLFxuICBPQlNFUlZFOiAnX19vYnNlcnZlRWZmZWN0cycsXG4gIFJFQURfT05MWTogJ19fcmVhZE9ubHknXG59O1xuXG4vKiogQGNvbnN0IHshUmVnRXhwfSAqL1xuY29uc3QgY2FwaXRhbEF0dHJpYnV0ZVJlZ2V4ID0gL1tBLVpdLztcblxuLyoqXG4gKiBAdHlwZWRlZiB7e1xuICogbmFtZTogKHN0cmluZyB8IHVuZGVmaW5lZCksXG4gKiBzdHJ1Y3R1cmVkOiAoYm9vbGVhbiB8IHVuZGVmaW5lZCksXG4gKiB3aWxkY2FyZDogKGJvb2xlYW4gfCB1bmRlZmluZWQpXG4gKiB9fVxuICovXG5sZXQgRGF0YVRyaWdnZXI7IC8vZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiBpbmZvOiA/LFxuICogdHJpZ2dlcjogKCFEYXRhVHJpZ2dlciB8IHVuZGVmaW5lZCksXG4gKiBmbjogKCFGdW5jdGlvbiB8IHVuZGVmaW5lZClcbiAqIH19XG4gKi9cbmxldCBEYXRhRWZmZWN0OyAvL2VzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuLyoqXG4gKiBFbnN1cmVzIHRoYXQgdGhlIG1vZGVsIGhhcyBhbiBvd24tcHJvcGVydHkgbWFwIG9mIGVmZmVjdHMgZm9yIHRoZSBnaXZlbiB0eXBlLlxuICogVGhlIG1vZGVsIG1heSBiZSBhIHByb3RvdHlwZSBvciBhbiBpbnN0YW5jZS5cbiAqXG4gKiBQcm9wZXJ0eSBlZmZlY3RzIGFyZSBzdG9yZWQgYXMgYXJyYXlzIG9mIGVmZmVjdHMgYnkgcHJvcGVydHkgaW4gYSBtYXAsXG4gKiBieSBuYW1lZCB0eXBlIG9uIHRoZSBtb2RlbC4gZS5nLlxuICpcbiAqICAgX19jb21wdXRlRWZmZWN0czoge1xuICogICAgIGZvbzogWyAuLi4gXSxcbiAqICAgICBiYXI6IFsgLi4uIF1cbiAqICAgfVxuICpcbiAqIElmIHRoZSBtb2RlbCBkb2VzIG5vdCB5ZXQgaGF2ZSBhbiBlZmZlY3QgbWFwIGZvciB0aGUgdHlwZSwgb25lIGlzIGNyZWF0ZWRcbiAqIGFuZCByZXR1cm5lZC4gIElmIGl0IGRvZXMsIGJ1dCBpdCBpcyBub3QgYW4gb3duIHByb3BlcnR5IChpLmUuIHRoZVxuICogcHJvdG90eXBlIGhhZCBlZmZlY3RzKSwgdGhlIHRoZSBtYXAgaXMgZGVlcGx5IGNsb25lZCBhbmQgdGhlIGNvcHkgaXNcbiAqIHNldCBvbiB0aGUgbW9kZWwgYW5kIHJldHVybmVkLCByZWFkeSBmb3IgbmV3IGVmZmVjdHMgdG8gYmUgYWRkZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG1vZGVsIFByb3RvdHlwZSBvciBpbnN0YW5jZVxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgUHJvcGVydHkgZWZmZWN0IHR5cGVcbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIG93bi1wcm9wZXJ0eSBtYXAgb2YgZWZmZWN0cyBmb3IgdGhlIGdpdmVuIHR5cGVcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGVuc3VyZU93bkVmZmVjdE1hcChtb2RlbCwgdHlwZSkge1xuICBsZXQgZWZmZWN0cyA9IG1vZGVsW3R5cGVdO1xuICBpZiAoIWVmZmVjdHMpIHtcbiAgICBlZmZlY3RzID0gbW9kZWxbdHlwZV0gPSB7fTtcbiAgfSBlbHNlIGlmICghbW9kZWwuaGFzT3duUHJvcGVydHkodHlwZSkpIHtcbiAgICBlZmZlY3RzID0gbW9kZWxbdHlwZV0gPSBPYmplY3QuY3JlYXRlKG1vZGVsW3R5cGVdKTtcbiAgICBmb3IgKGxldCBwIGluIGVmZmVjdHMpIHtcbiAgICAgIGxldCBwcm90b0Z4ID0gZWZmZWN0c1twXTtcbiAgICAgIGxldCBpbnN0RnggPSBlZmZlY3RzW3BdID0gQXJyYXkocHJvdG9GeC5sZW5ndGgpO1xuICAgICAgZm9yIChsZXQgaT0wOyBpPHByb3RvRngubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaW5zdEZ4W2ldID0gcHJvdG9GeFtpXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGVmZmVjdHM7XG59XG5cbi8vIC0tIGVmZmVjdHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAqIFJ1bnMgYWxsIGVmZmVjdHMgb2YgYSBnaXZlbiB0eXBlIGZvciB0aGUgZ2l2ZW4gc2V0IG9mIHByb3BlcnR5IGNoYW5nZXNcbiAqIG9uIGFuIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSB7IVBvbHltZXJfUHJvcGVydHlFZmZlY3RzfSBpbnN0IFRoZSBpbnN0YW5jZSB3aXRoIGVmZmVjdHMgdG8gcnVuXG4gKiBAcGFyYW0gez9PYmplY3R9IGVmZmVjdHMgT2JqZWN0IG1hcCBvZiBwcm9wZXJ0eS10by1BcnJheSBvZiBlZmZlY3RzXG4gKiBAcGFyYW0gez9PYmplY3R9IHByb3BzIEJhZyBvZiBjdXJyZW50IHByb3BlcnR5IGNoYW5nZXNcbiAqIEBwYXJhbSB7P09iamVjdD19IG9sZFByb3BzIEJhZyBvZiBwcmV2aW91cyB2YWx1ZXMgZm9yIGNoYW5nZWQgcHJvcGVydGllc1xuICogQHBhcmFtIHtib29sZWFuPX0gaGFzUGF0aHMgVHJ1ZSB3aXRoIGBwcm9wc2AgY29udGFpbnMgb25lIG9yIG1vcmUgcGF0aHNcbiAqIEBwYXJhbSB7Kj19IGV4dHJhQXJncyBBZGRpdGlvbmFsIG1ldGFkYXRhIHRvIHBhc3MgdG8gZWZmZWN0IGZ1bmN0aW9uXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGFuIGVmZmVjdCByYW4gZm9yIHRoaXMgcHJvcGVydHlcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJ1bkVmZmVjdHMoaW5zdCwgZWZmZWN0cywgcHJvcHMsIG9sZFByb3BzLCBoYXNQYXRocywgZXh0cmFBcmdzKSB7XG4gIGlmIChlZmZlY3RzKSB7XG4gICAgbGV0IHJhbiA9IGZhbHNlO1xuICAgIGxldCBpZCA9IGRlZHVwZUlkKys7XG4gICAgZm9yIChsZXQgcHJvcCBpbiBwcm9wcykge1xuICAgICAgaWYgKHJ1bkVmZmVjdHNGb3JQcm9wZXJ0eShcbiAgICAgICAgICAgICAgaW5zdCwgLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoZWZmZWN0cyksIGlkLCBwcm9wLCBwcm9wcywgb2xkUHJvcHMsXG4gICAgICAgICAgICAgIGhhc1BhdGhzLCBleHRyYUFyZ3MpKSB7XG4gICAgICAgIHJhbiA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByYW47XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFJ1bnMgYSBsaXN0IG9mIGVmZmVjdHMgZm9yIGEgZ2l2ZW4gcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHshUG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9IGluc3QgVGhlIGluc3RhbmNlIHdpdGggZWZmZWN0cyB0byBydW5cbiAqIEBwYXJhbSB7IU9iamVjdH0gZWZmZWN0cyBPYmplY3QgbWFwIG9mIHByb3BlcnR5LXRvLUFycmF5IG9mIGVmZmVjdHNcbiAqIEBwYXJhbSB7bnVtYmVyfSBkZWR1cGVJZCBDb3VudGVyIHVzZWQgZm9yIGRlLWR1cGluZyBlZmZlY3RzXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcCBOYW1lIG9mIGNoYW5nZWQgcHJvcGVydHlcbiAqIEBwYXJhbSB7Kn0gcHJvcHMgQ2hhbmdlZCBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0geyp9IG9sZFByb3BzIE9sZCBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBoYXNQYXRocyBUcnVlIHdpdGggYHByb3BzYCBjb250YWlucyBvbmUgb3IgbW9yZSBwYXRoc1xuICogQHBhcmFtIHsqPX0gZXh0cmFBcmdzIEFkZGl0aW9uYWwgbWV0YWRhdGEgdG8gcGFzcyB0byBlZmZlY3QgZnVuY3Rpb25cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYW4gZWZmZWN0IHJhbiBmb3IgdGhpcyBwcm9wZXJ0eVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcnVuRWZmZWN0c0ZvclByb3BlcnR5KGluc3QsIGVmZmVjdHMsIGRlZHVwZUlkLCBwcm9wLCBwcm9wcywgb2xkUHJvcHMsIGhhc1BhdGhzLCBleHRyYUFyZ3MpIHtcbiAgbGV0IHJhbiA9IGZhbHNlO1xuICBsZXQgcm9vdFByb3BlcnR5ID0gaGFzUGF0aHMgPyByb290KHByb3ApIDogcHJvcDtcbiAgbGV0IGZ4cyA9IGVmZmVjdHNbcm9vdFByb3BlcnR5XTtcbiAgaWYgKGZ4cykge1xuICAgIGZvciAobGV0IGk9MCwgbD1meHMubGVuZ3RoLCBmeDsgKGk8bCkgJiYgKGZ4PWZ4c1tpXSk7IGkrKykge1xuICAgICAgaWYgKCghZnguaW5mbyB8fCBmeC5pbmZvLmxhc3RSdW4gIT09IGRlZHVwZUlkKSAmJlxuICAgICAgICAgICghaGFzUGF0aHMgfHwgcGF0aE1hdGNoZXNUcmlnZ2VyKHByb3AsIGZ4LnRyaWdnZXIpKSkge1xuICAgICAgICBpZiAoZnguaW5mbykge1xuICAgICAgICAgIGZ4LmluZm8ubGFzdFJ1biA9IGRlZHVwZUlkO1xuICAgICAgICB9XG4gICAgICAgIGZ4LmZuKGluc3QsIHByb3AsIHByb3BzLCBvbGRQcm9wcywgZnguaW5mbywgaGFzUGF0aHMsIGV4dHJhQXJncyk7XG4gICAgICAgIHJhbiA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByYW47XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgcHJvcGVydHkvcGF0aCB0aGF0IGhhcyBjaGFuZ2VkIG1hdGNoZXMgdGhlIHRyaWdnZXJcbiAqIGNyaXRlcmlhIGZvciBhbiBlZmZlY3QuICBBIHRyaWdnZXIgaXMgYSBkZXNjcmlwdG9yIHdpdGggdGhlIGZvbGxvd2luZ1xuICogc3RydWN0dXJlLCB3aGljaCBtYXRjaGVzIHRoZSBkZXNjcmlwdG9ycyByZXR1cm5lZCBmcm9tIGBwYXJzZUFyZ2AuXG4gKiBlLmcuIGZvciBgZm9vLmJhci4qYDpcbiAqIGBgYFxuICogdHJpZ2dlcjoge1xuICogICBuYW1lOiAnYS5iJyxcbiAqICAgc3RydWN0dXJlZDogdHJ1ZSxcbiAqICAgd2lsZGNhcmQ6IHRydWVcbiAqIH1cbiAqIGBgYFxuICogSWYgbm8gdHJpZ2dlciBpcyBnaXZlbiwgdGhlIHBhdGggaXMgZGVlbWVkIHRvIG1hdGNoLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFBhdGggb3IgcHJvcGVydHkgdGhhdCBjaGFuZ2VkXG4gKiBAcGFyYW0gez9EYXRhVHJpZ2dlcn0gdHJpZ2dlciBEZXNjcmlwdG9yXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBwYXRoIG1hdGNoZWQgdGhlIHRyaWdnZXJcbiAqL1xuZnVuY3Rpb24gcGF0aE1hdGNoZXNUcmlnZ2VyKHBhdGgsIHRyaWdnZXIpIHtcbiAgaWYgKHRyaWdnZXIpIHtcbiAgICBsZXQgdHJpZ2dlclBhdGggPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHRyaWdnZXIubmFtZSk7XG4gICAgcmV0dXJuICh0cmlnZ2VyUGF0aCA9PSBwYXRoKSB8fFxuICAgICAgICAhISh0cmlnZ2VyLnN0cnVjdHVyZWQgJiYgaXNBbmNlc3Rvcih0cmlnZ2VyUGF0aCwgcGF0aCkpIHx8XG4gICAgICAgICEhKHRyaWdnZXIud2lsZGNhcmQgJiYgaXNEZXNjZW5kYW50KHRyaWdnZXJQYXRoLCBwYXRoKSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuLyoqXG4gKiBJbXBsZW1lbnRzIHRoZSBcIm9ic2VydmVyXCIgZWZmZWN0LlxuICpcbiAqIENhbGxzIHRoZSBtZXRob2Qgd2l0aCBgaW5mby5tZXRob2ROYW1lYCBvbiB0aGUgaW5zdGFuY2UsIHBhc3NpbmcgdGhlXG4gKiBuZXcgYW5kIG9sZCB2YWx1ZXMuXG4gKlxuICogQHBhcmFtIHshUG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9IGluc3QgVGhlIGluc3RhbmNlIHRoZSBlZmZlY3Qgd2lsbCBiZSBydW4gb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHByb3BlcnR5XG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgQmFnIG9mIGN1cnJlbnQgcHJvcGVydHkgY2hhbmdlc1xuICogQHBhcmFtIHtPYmplY3R9IG9sZFByb3BzIEJhZyBvZiBwcmV2aW91cyB2YWx1ZXMgZm9yIGNoYW5nZWQgcHJvcGVydGllc1xuICogQHBhcmFtIHs/fSBpbmZvIEVmZmVjdCBtZXRhZGF0YVxuICogQHJldHVybiB7dm9pZH1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJ1bk9ic2VydmVyRWZmZWN0KGluc3QsIHByb3BlcnR5LCBwcm9wcywgb2xkUHJvcHMsIGluZm8pIHtcbiAgbGV0IGZuID0gdHlwZW9mIGluZm8ubWV0aG9kID09PSBcInN0cmluZ1wiID8gaW5zdFtpbmZvLm1ldGhvZF0gOiBpbmZvLm1ldGhvZDtcbiAgbGV0IGNoYW5nZWRQcm9wID0gaW5mby5wcm9wZXJ0eTtcbiAgaWYgKGZuKSB7XG4gICAgZm4uY2FsbChpbnN0LCBpbnN0Ll9fZGF0YVtjaGFuZ2VkUHJvcF0sIG9sZFByb3BzW2NoYW5nZWRQcm9wXSk7XG4gIH0gZWxzZSBpZiAoIWluZm8uZHluYW1pY0ZuKSB7XG4gICAgY29uc29sZS53YXJuKCdvYnNlcnZlciBtZXRob2QgYCcgKyBpbmZvLm1ldGhvZCArICdgIG5vdCBkZWZpbmVkJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBSdW5zIFwibm90aWZ5XCIgZWZmZWN0cyBmb3IgYSBzZXQgb2YgY2hhbmdlZCBwcm9wZXJ0aWVzLlxuICpcbiAqIFRoaXMgbWV0aG9kIGRpZmZlcnMgZnJvbSB0aGUgZ2VuZXJpYyBgcnVuRWZmZWN0c2AgbWV0aG9kIGluIHRoYXQgaXRcbiAqIHdpbGwgZGlzcGF0Y2ggcGF0aCBub3RpZmljYXRpb24gZXZlbnRzIGluIHRoZSBjYXNlIHRoYXQgdGhlIHByb3BlcnR5XG4gKiBjaGFuZ2VkIHdhcyBhIHBhdGggYW5kIHRoZSByb290IHByb3BlcnR5IGZvciB0aGF0IHBhdGggZGlkbid0IGhhdmUgYVxuICogXCJub3RpZnlcIiBlZmZlY3QuICBUaGlzIGlzIHRvIG1haW50YWluIDEuMCBiZWhhdmlvciB0aGF0IGRpZCBub3QgcmVxdWlyZVxuICogYG5vdGlmeTogdHJ1ZWAgdG8gZW5zdXJlIG9iamVjdCBzdWItcHJvcGVydHkgbm90aWZpY2F0aW9ucyB3ZXJlXG4gKiBzZW50LlxuICpcbiAqIEBwYXJhbSB7IVBvbHltZXJfUHJvcGVydHlFZmZlY3RzfSBpbnN0IFRoZSBpbnN0YW5jZSB3aXRoIGVmZmVjdHMgdG8gcnVuXG4gKiBAcGFyYW0ge09iamVjdH0gbm90aWZ5UHJvcHMgQmFnIG9mIHByb3BlcnRpZXMgdG8gbm90aWZ5XG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgQmFnIG9mIGN1cnJlbnQgcHJvcGVydHkgY2hhbmdlc1xuICogQHBhcmFtIHtPYmplY3R9IG9sZFByb3BzIEJhZyBvZiBwcmV2aW91cyB2YWx1ZXMgZm9yIGNoYW5nZWQgcHJvcGVydGllc1xuICogQHBhcmFtIHtib29sZWFufSBoYXNQYXRocyBUcnVlIHdpdGggYHByb3BzYCBjb250YWlucyBvbmUgb3IgbW9yZSBwYXRoc1xuICogQHJldHVybiB7dm9pZH1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJ1bk5vdGlmeUVmZmVjdHMoaW5zdCwgbm90aWZ5UHJvcHMsIHByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpIHtcbiAgLy8gTm90aWZ5XG4gIGxldCBmeHMgPSBpbnN0W1RZUEVTLk5PVElGWV07XG4gIGxldCBub3RpZmllZDtcbiAgbGV0IGlkID0gZGVkdXBlSWQrKztcbiAgLy8gVHJ5IG5vcm1hbCBub3RpZnkgZWZmZWN0czsgaWYgbm9uZSwgZmFsbCBiYWNrIHRvIHRyeSBwYXRoIG5vdGlmaWNhdGlvblxuICBmb3IgKGxldCBwcm9wIGluIG5vdGlmeVByb3BzKSB7XG4gICAgaWYgKG5vdGlmeVByb3BzW3Byb3BdKSB7XG4gICAgICBpZiAoZnhzICYmIHJ1bkVmZmVjdHNGb3JQcm9wZXJ0eShpbnN0LCBmeHMsIGlkLCBwcm9wLCBwcm9wcywgb2xkUHJvcHMsIGhhc1BhdGhzKSkge1xuICAgICAgICBub3RpZmllZCA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGhhc1BhdGhzICYmIG5vdGlmeVBhdGgoaW5zdCwgcHJvcCwgcHJvcHMpKSB7XG4gICAgICAgIG5vdGlmaWVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gRmx1c2ggaG9zdCBpZiB3ZSBhY3R1YWxseSBub3RpZmllZCBhbmQgaG9zdCB3YXMgYmF0Y2hpbmdcbiAgLy8gQW5kIHRoZSBob3N0IGhhcyBhbHJlYWR5IGluaXRpYWxpemVkIGNsaWVudHM7IHRoaXMgcHJldmVudHNcbiAgLy8gYW4gaXNzdWUgd2l0aCBhIGhvc3Qgb2JzZXJ2aW5nIGRhdGEgY2hhbmdlcyBiZWZvcmUgY2xpZW50cyBhcmUgcmVhZHkuXG4gIGxldCBob3N0O1xuICBpZiAobm90aWZpZWQgJiYgKGhvc3QgPSBpbnN0Ll9fZGF0YUhvc3QpICYmIGhvc3QuX2ludmFsaWRhdGVQcm9wZXJ0aWVzKSB7XG4gICAgaG9zdC5faW52YWxpZGF0ZVByb3BlcnRpZXMoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoZXMge3Byb3BlcnR5fS1jaGFuZ2VkIGV2ZW50cyB3aXRoIHBhdGggaW5mb3JtYXRpb24gaW4gdGhlIGRldGFpbFxuICogb2JqZWN0IHRvIGluZGljYXRlIGEgc3ViLXBhdGggb2YgdGhlIHByb3BlcnR5IHdhcyBjaGFuZ2VkLlxuICpcbiAqIEBwYXJhbSB7IVBvbHltZXJfUHJvcGVydHlFZmZlY3RzfSBpbnN0IFRoZSBlbGVtZW50IGZyb20gd2hpY2ggdG8gZmlyZSB0aGVcbiAqICAgICBldmVudFxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggdGhhdCB3YXMgY2hhbmdlZFxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIEJhZyBvZiBjdXJyZW50IHByb3BlcnR5IGNoYW5nZXNcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGUgcGF0aCB3YXMgbm90aWZpZWRcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIG5vdGlmeVBhdGgoaW5zdCwgcGF0aCwgcHJvcHMpIHtcbiAgbGV0IHJvb3RQcm9wZXJ0eSA9IHJvb3QocGF0aCk7XG4gIGlmIChyb290UHJvcGVydHkgIT09IHBhdGgpIHtcbiAgICBsZXQgZXZlbnROYW1lID0gY2FtZWxUb0Rhc2hDYXNlKHJvb3RQcm9wZXJ0eSkgKyAnLWNoYW5nZWQnO1xuICAgIGRpc3BhdGNoTm90aWZ5RXZlbnQoaW5zdCwgZXZlbnROYW1lLCBwcm9wc1twYXRoXSwgcGF0aCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIERpc3BhdGNoZXMge3Byb3BlcnR5fS1jaGFuZ2VkIGV2ZW50cyB0byBpbmRpY2F0ZSBhIHByb3BlcnR5IChvciBwYXRoKVxuICogY2hhbmdlZC5cbiAqXG4gKiBAcGFyYW0geyFQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c30gaW5zdCBUaGUgZWxlbWVudCBmcm9tIHdoaWNoIHRvIGZpcmUgdGhlXG4gKiAgICAgZXZlbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50IHRvIHNlbmRcbiAqICAgICAoJ3twcm9wZXJ0eX0tY2hhbmdlZCcpXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgY2hhbmdlZCBwcm9wZXJ0eVxuICogQHBhcmFtIHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBwYXRoIElmIGEgc3ViLXBhdGggb2YgdGhpcyBwcm9wZXJ0eVxuICogICAgIGNoYW5nZWQsIHRoZSBwYXRoIHRoYXQgY2hhbmdlZCAob3B0aW9uYWwpLlxuICogQHJldHVybiB7dm9pZH1cbiAqIEBwcml2YXRlXG4gKiBAc3VwcHJlc3Mge2ludmFsaWRDYXN0c31cbiAqL1xuZnVuY3Rpb24gZGlzcGF0Y2hOb3RpZnlFdmVudChpbnN0LCBldmVudE5hbWUsIHZhbHVlLCBwYXRoKSB7XG4gIGxldCBkZXRhaWwgPSB7XG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIHF1ZXVlUHJvcGVydHk6IHRydWVcbiAgfTtcbiAgaWYgKHBhdGgpIHtcbiAgICBkZXRhaWwucGF0aCA9IHBhdGg7XG4gIH1cbiAgd3JhcCgvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi8oaW5zdCkpLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KGV2ZW50TmFtZSwgeyBkZXRhaWwgfSkpO1xufVxuXG4vKipcbiAqIEltcGxlbWVudHMgdGhlIFwibm90aWZ5XCIgZWZmZWN0LlxuICpcbiAqIERpc3BhdGNoZXMgYSBub24tYnViYmxpbmcgZXZlbnQgbmFtZWQgYGluZm8uZXZlbnROYW1lYCBvbiB0aGUgaW5zdGFuY2VcbiAqIHdpdGggYSBkZXRhaWwgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG5ldyBgdmFsdWVgLlxuICpcbiAqIEBwYXJhbSB7IVBvbHltZXJfUHJvcGVydHlFZmZlY3RzfSBpbnN0IFRoZSBpbnN0YW5jZSB0aGUgZWZmZWN0IHdpbGwgYmUgcnVuIG9uXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgTmFtZSBvZiBwcm9wZXJ0eVxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIEJhZyBvZiBjdXJyZW50IHByb3BlcnR5IGNoYW5nZXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvbGRQcm9wcyBCYWcgb2YgcHJldmlvdXMgdmFsdWVzIGZvciBjaGFuZ2VkIHByb3BlcnRpZXNcbiAqIEBwYXJhbSB7P30gaW5mbyBFZmZlY3QgbWV0YWRhdGFcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaGFzUGF0aHMgVHJ1ZSB3aXRoIGBwcm9wc2AgY29udGFpbnMgb25lIG9yIG1vcmUgcGF0aHNcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBydW5Ob3RpZnlFZmZlY3QoaW5zdCwgcHJvcGVydHksIHByb3BzLCBvbGRQcm9wcywgaW5mbywgaGFzUGF0aHMpIHtcbiAgbGV0IHJvb3RQcm9wZXJ0eSA9IGhhc1BhdGhzID8gcm9vdChwcm9wZXJ0eSkgOiBwcm9wZXJ0eTtcbiAgbGV0IHBhdGggPSByb290UHJvcGVydHkgIT0gcHJvcGVydHkgPyBwcm9wZXJ0eSA6IG51bGw7XG4gIGxldCB2YWx1ZSA9IHBhdGggPyBnZXQoaW5zdCwgcGF0aCkgOiBpbnN0Ll9fZGF0YVtwcm9wZXJ0eV07XG4gIGlmIChwYXRoICYmIHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICB2YWx1ZSA9IHByb3BzW3Byb3BlcnR5XTsgIC8vIHNwZWNpZmljYWxseSBmb3IgLnNwbGljZXNcbiAgfVxuICBkaXNwYXRjaE5vdGlmeUV2ZW50KGluc3QsIGluZm8uZXZlbnROYW1lLCB2YWx1ZSwgcGF0aCk7XG59XG5cbi8qKlxuICogSGFuZGxlciBmdW5jdGlvbiBmb3IgMi13YXkgbm90aWZpY2F0aW9uIGV2ZW50cy4gUmVjZWl2ZXMgY29udGV4dFxuICogaW5mb3JtYXRpb24gY2FwdHVyZWQgaW4gdGhlIGBhZGROb3RpZnlMaXN0ZW5lcmAgY2xvc3VyZSBmcm9tIHRoZVxuICogYF9fbm90aWZ5TGlzdGVuZXJzYCBtZXRhZGF0YS5cbiAqXG4gKiBTZXRzIHRoZSB2YWx1ZSBvZiB0aGUgbm90aWZpZWQgcHJvcGVydHkgdG8gdGhlIGhvc3QgcHJvcGVydHkgb3IgcGF0aC4gIElmXG4gKiB0aGUgZXZlbnQgY29udGFpbmVkIHBhdGggaW5mb3JtYXRpb24sIHRyYW5zbGF0ZSB0aGF0IHBhdGggdG8gdGhlIGhvc3RcbiAqIHNjb3BlJ3MgbmFtZSBmb3IgdGhhdCBwYXRoIGZpcnN0LlxuICpcbiAqIEBwYXJhbSB7Q3VzdG9tRXZlbnR9IGV2ZW50IE5vdGlmaWNhdGlvbiBldmVudCAoZS5nLiAnPHByb3BlcnR5Pi1jaGFuZ2VkJylcbiAqIEBwYXJhbSB7IVBvbHltZXJfUHJvcGVydHlFZmZlY3RzfSBpbnN0IEhvc3QgZWxlbWVudCBpbnN0YW5jZSBoYW5kbGluZyB0aGVcbiAqICAgICBub3RpZmljYXRpb24gZXZlbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBmcm9tUHJvcCBDaGlsZCBlbGVtZW50IHByb3BlcnR5IHRoYXQgd2FzIGJvdW5kXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9QYXRoIEhvc3QgcHJvcGVydHkvcGF0aCB0aGF0IHdhcyBib3VuZFxuICogQHBhcmFtIHtib29sZWFufSBuZWdhdGUgV2hldGhlciB0aGUgYmluZGluZyB3YXMgbmVnYXRlZFxuICogQHJldHVybiB7dm9pZH1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGhhbmRsZU5vdGlmaWNhdGlvbihldmVudCwgaW5zdCwgZnJvbVByb3AsIHRvUGF0aCwgbmVnYXRlKSB7XG4gIGxldCB2YWx1ZTtcbiAgbGV0IGRldGFpbCA9IC8qKiBAdHlwZSB7T2JqZWN0fSAqLyhldmVudC5kZXRhaWwpO1xuICBsZXQgZnJvbVBhdGggPSBkZXRhaWwgJiYgZGV0YWlsLnBhdGg7XG4gIGlmIChmcm9tUGF0aCkge1xuICAgIHRvUGF0aCA9IHRyYW5zbGF0ZShmcm9tUHJvcCwgdG9QYXRoLCBmcm9tUGF0aCk7XG4gICAgdmFsdWUgPSBkZXRhaWwgJiYgZGV0YWlsLnZhbHVlO1xuICB9IGVsc2Uge1xuICAgIHZhbHVlID0gZXZlbnQuY3VycmVudFRhcmdldFtmcm9tUHJvcF07XG4gIH1cbiAgdmFsdWUgPSBuZWdhdGUgPyAhdmFsdWUgOiB2YWx1ZTtcbiAgaWYgKCFpbnN0W1RZUEVTLlJFQURfT05MWV0gfHwgIWluc3RbVFlQRVMuUkVBRF9PTkxZXVt0b1BhdGhdKSB7XG4gICAgaWYgKGluc3QuX3NldFBlbmRpbmdQcm9wZXJ0eU9yUGF0aCh0b1BhdGgsIHZhbHVlLCB0cnVlLCBCb29sZWFuKGZyb21QYXRoKSlcbiAgICAgICYmICghZGV0YWlsIHx8ICFkZXRhaWwucXVldWVQcm9wZXJ0eSkpIHtcbiAgICAgIGluc3QuX2ludmFsaWRhdGVQcm9wZXJ0aWVzKCk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogSW1wbGVtZW50cyB0aGUgXCJyZWZsZWN0XCIgZWZmZWN0LlxuICpcbiAqIFNldHMgdGhlIGF0dHJpYnV0ZSBuYW1lZCBgaW5mby5hdHRyTmFtZWAgdG8gdGhlIGdpdmVuIHByb3BlcnR5IHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7IVBvbHltZXJfUHJvcGVydHlFZmZlY3RzfSBpbnN0IFRoZSBpbnN0YW5jZSB0aGUgZWZmZWN0IHdpbGwgYmUgcnVuIG9uXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgTmFtZSBvZiBwcm9wZXJ0eVxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIEJhZyBvZiBjdXJyZW50IHByb3BlcnR5IGNoYW5nZXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvbGRQcm9wcyBCYWcgb2YgcHJldmlvdXMgdmFsdWVzIGZvciBjaGFuZ2VkIHByb3BlcnRpZXNcbiAqIEBwYXJhbSB7P30gaW5mbyBFZmZlY3QgbWV0YWRhdGFcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBydW5SZWZsZWN0RWZmZWN0KGluc3QsIHByb3BlcnR5LCBwcm9wcywgb2xkUHJvcHMsIGluZm8pIHtcbiAgbGV0IHZhbHVlID0gaW5zdC5fX2RhdGFbcHJvcGVydHldO1xuICBpZiAoc2FuaXRpemVET01WYWx1ZSkge1xuICAgIHZhbHVlID0gc2FuaXRpemVET01WYWx1ZSh2YWx1ZSwgaW5mby5hdHRyTmFtZSwgJ2F0dHJpYnV0ZScsIC8qKiBAdHlwZSB7Tm9kZX0gKi8oaW5zdCkpO1xuICB9XG4gIGluc3QuX3Byb3BlcnR5VG9BdHRyaWJ1dGUocHJvcGVydHksIGluZm8uYXR0ck5hbWUsIHZhbHVlKTtcbn1cblxuLyoqXG4gKiBSdW5zIFwiY29tcHV0ZWRcIiBlZmZlY3RzIGZvciBhIHNldCBvZiBjaGFuZ2VkIHByb3BlcnRpZXMuXG4gKlxuICogVGhpcyBtZXRob2QgZGlmZmVycyBmcm9tIHRoZSBnZW5lcmljIGBydW5FZmZlY3RzYCBtZXRob2QgaW4gdGhhdCBpdFxuICogY29udGludWVzIHRvIHJ1biBjb21wdXRlZCBlZmZlY3RzIGJhc2VkIG9uIHRoZSBvdXRwdXQgb2YgZWFjaCBwYXNzIHVudGlsXG4gKiB0aGVyZSBhcmUgbm8gbW9yZSBuZXdseSBjb21wdXRlZCBwcm9wZXJ0aWVzLiAgVGhpcyBlbnN1cmVzIHRoYXQgYWxsXG4gKiBwcm9wZXJ0aWVzIHRoYXQgd2lsbCBiZSBjb21wdXRlZCBieSB0aGUgaW5pdGlhbCBzZXQgb2YgY2hhbmdlcyBhcmVcbiAqIGNvbXB1dGVkIGJlZm9yZSBvdGhlciBlZmZlY3RzIChiaW5kaW5nIHByb3BhZ2F0aW9uLCBvYnNlcnZlcnMsIGFuZCBub3RpZnkpXG4gKiBydW4uXG4gKlxuICogQHBhcmFtIHshUG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9IGluc3QgVGhlIGluc3RhbmNlIHRoZSBlZmZlY3Qgd2lsbCBiZSBydW4gb25cbiAqIEBwYXJhbSB7P09iamVjdH0gY2hhbmdlZFByb3BzIEJhZyBvZiBjaGFuZ2VkIHByb3BlcnRpZXNcbiAqIEBwYXJhbSB7P09iamVjdH0gb2xkUHJvcHMgQmFnIG9mIHByZXZpb3VzIHZhbHVlcyBmb3IgY2hhbmdlZCBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGhhc1BhdGhzIFRydWUgd2l0aCBgcHJvcHNgIGNvbnRhaW5zIG9uZSBvciBtb3JlIHBhdGhzXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcnVuQ29tcHV0ZWRFZmZlY3RzKGluc3QsIGNoYW5nZWRQcm9wcywgb2xkUHJvcHMsIGhhc1BhdGhzKSB7XG4gIGxldCBjb21wdXRlRWZmZWN0cyA9IGluc3RbVFlQRVMuQ09NUFVURV07XG4gIGlmIChjb21wdXRlRWZmZWN0cykge1xuICAgIGxldCBpbnB1dFByb3BzID0gY2hhbmdlZFByb3BzO1xuICAgIHdoaWxlIChydW5FZmZlY3RzKGluc3QsIGNvbXB1dGVFZmZlY3RzLCBpbnB1dFByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpKSB7XG4gICAgICBPYmplY3QuYXNzaWduKC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKG9sZFByb3BzKSwgaW5zdC5fX2RhdGFPbGQpO1xuICAgICAgT2JqZWN0LmFzc2lnbigvKiogQHR5cGUgeyFPYmplY3R9ICovIChjaGFuZ2VkUHJvcHMpLCBpbnN0Ll9fZGF0YVBlbmRpbmcpO1xuICAgICAgaW5wdXRQcm9wcyA9IGluc3QuX19kYXRhUGVuZGluZztcbiAgICAgIGluc3QuX19kYXRhUGVuZGluZyA9IG51bGw7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogSW1wbGVtZW50cyB0aGUgXCJjb21wdXRlZCBwcm9wZXJ0eVwiIGVmZmVjdCBieSBydW5uaW5nIHRoZSBtZXRob2Qgd2l0aCB0aGVcbiAqIHZhbHVlcyBvZiB0aGUgYXJndW1lbnRzIHNwZWNpZmllZCBpbiB0aGUgYGluZm9gIG9iamVjdCBhbmQgc2V0dGluZyB0aGVcbiAqIHJldHVybiB2YWx1ZSB0byB0aGUgY29tcHV0ZWQgcHJvcGVydHkgc3BlY2lmaWVkLlxuICpcbiAqIEBwYXJhbSB7IVBvbHltZXJfUHJvcGVydHlFZmZlY3RzfSBpbnN0IFRoZSBpbnN0YW5jZSB0aGUgZWZmZWN0IHdpbGwgYmUgcnVuIG9uXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgTmFtZSBvZiBwcm9wZXJ0eVxuICogQHBhcmFtIHs/T2JqZWN0fSBwcm9wcyBCYWcgb2YgY3VycmVudCBwcm9wZXJ0eSBjaGFuZ2VzXG4gKiBAcGFyYW0gez9PYmplY3R9IG9sZFByb3BzIEJhZyBvZiBwcmV2aW91cyB2YWx1ZXMgZm9yIGNoYW5nZWQgcHJvcGVydGllc1xuICogQHBhcmFtIHs/fSBpbmZvIEVmZmVjdCBtZXRhZGF0YVxuICogQHJldHVybiB7dm9pZH1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJ1bkNvbXB1dGVkRWZmZWN0KGluc3QsIHByb3BlcnR5LCBwcm9wcywgb2xkUHJvcHMsIGluZm8pIHtcbiAgbGV0IHJlc3VsdCA9IHJ1bk1ldGhvZEVmZmVjdChpbnN0LCBwcm9wZXJ0eSwgcHJvcHMsIG9sZFByb3BzLCBpbmZvKTtcbiAgbGV0IGNvbXB1dGVkUHJvcCA9IGluZm8ubWV0aG9kSW5mbztcbiAgaWYgKGluc3QuX19kYXRhSGFzQWNjZXNzb3IgJiYgaW5zdC5fX2RhdGFIYXNBY2Nlc3Nvcltjb21wdXRlZFByb3BdKSB7XG4gICAgaW5zdC5fc2V0UGVuZGluZ1Byb3BlcnR5KGNvbXB1dGVkUHJvcCwgcmVzdWx0LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBpbnN0W2NvbXB1dGVkUHJvcF0gPSByZXN1bHQ7XG4gIH1cbn1cblxuLyoqXG4gKiBDb21wdXRlcyBwYXRoIGNoYW5nZXMgYmFzZWQgb24gcGF0aCBsaW5rcyBzZXQgdXAgdXNpbmcgdGhlIGBsaW5rUGF0aHNgXG4gKiBBUEkuXG4gKlxuICogQHBhcmFtIHshUG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9IGluc3QgVGhlIGluc3RhbmNlIHdob3NlIHByb3BzIGFyZSBjaGFuZ2luZ1xuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCB0aGF0IGhhcyBjaGFuZ2VkXG4gKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIG9mIGNoYW5nZWQgcGF0aFxuICogQHJldHVybiB7dm9pZH1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVMaW5rZWRQYXRocyhpbnN0LCBwYXRoLCB2YWx1ZSkge1xuICBsZXQgbGlua3MgPSBpbnN0Ll9fZGF0YUxpbmtlZFBhdGhzO1xuICBpZiAobGlua3MpIHtcbiAgICBsZXQgbGluaztcbiAgICBmb3IgKGxldCBhIGluIGxpbmtzKSB7XG4gICAgICBsZXQgYiA9IGxpbmtzW2FdO1xuICAgICAgaWYgKGlzRGVzY2VuZGFudChhLCBwYXRoKSkge1xuICAgICAgICBsaW5rID0gdHJhbnNsYXRlKGEsIGIsIHBhdGgpO1xuICAgICAgICBpbnN0Ll9zZXRQZW5kaW5nUHJvcGVydHlPclBhdGgobGluaywgdmFsdWUsIHRydWUsIHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChpc0Rlc2NlbmRhbnQoYiwgcGF0aCkpIHtcbiAgICAgICAgbGluayA9IHRyYW5zbGF0ZShiLCBhLCBwYXRoKTtcbiAgICAgICAgaW5zdC5fc2V0UGVuZGluZ1Byb3BlcnR5T3JQYXRoKGxpbmssIHZhbHVlLCB0cnVlLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gLS0gYmluZGluZ3MgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAqIEFkZHMgYmluZGluZyBtZXRhZGF0YSB0byB0aGUgY3VycmVudCBgbm9kZUluZm9gLCBhbmQgYmluZGluZyBlZmZlY3RzXG4gKiBmb3IgYWxsIHBhcnQgZGVwZW5kZW5jaWVzIHRvIGB0ZW1wbGF0ZUluZm9gLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbnN0cnVjdG9yIENsYXNzIHRoYXQgYF9wYXJzZVRlbXBsYXRlYCBpcyBjdXJyZW50bHlcbiAqICAgcnVubmluZyBvblxuICogQHBhcmFtIHtUZW1wbGF0ZUluZm99IHRlbXBsYXRlSW5mbyBUZW1wbGF0ZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZVxuICogQHBhcmFtIHtOb2RlSW5mb30gbm9kZUluZm8gTm9kZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZSBub2RlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2luZCBCaW5kaW5nIGtpbmQsIGVpdGhlciAncHJvcGVydHknLCAnYXR0cmlidXRlJywgb3IgJ3RleHQnXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0IFRhcmdldCBwcm9wZXJ0eSBuYW1lXG4gKiBAcGFyYW0geyFBcnJheTwhQmluZGluZ1BhcnQ+fSBwYXJ0cyBBcnJheSBvZiBiaW5kaW5nIHBhcnQgbWV0YWRhdGFcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbGl0ZXJhbCBMaXRlcmFsIHRleHQgc3Vycm91bmRpbmcgYmluZGluZyBwYXJ0cyAoc3BlY2lmaWVkXG4gKiAgIG9ubHkgZm9yICdwcm9wZXJ0eScgYmluZGluZ3MsIHNpbmNlIHRoZXNlIG11c3QgYmUgaW5pdGlhbGl6ZWQgYXMgcGFydFxuICogICBvZiBib290LXVwKVxuICogQHJldHVybiB7dm9pZH1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGFkZEJpbmRpbmcoY29uc3RydWN0b3IsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8sIGtpbmQsIHRhcmdldCwgcGFydHMsIGxpdGVyYWwpIHtcbiAgLy8gQ3JlYXRlIGJpbmRpbmcgbWV0YWRhdGEgYW5kIGFkZCB0byBub2RlSW5mb1xuICBub2RlSW5mby5iaW5kaW5ncyA9IG5vZGVJbmZvLmJpbmRpbmdzIHx8IFtdO1xuICBsZXQgLyoqIEJpbmRpbmcgKi8gYmluZGluZyA9IHsga2luZCwgdGFyZ2V0LCBwYXJ0cywgbGl0ZXJhbCwgaXNDb21wb3VuZDogKHBhcnRzLmxlbmd0aCAhPT0gMSkgfTtcbiAgbm9kZUluZm8uYmluZGluZ3MucHVzaChiaW5kaW5nKTtcbiAgLy8gQWRkIGxpc3RlbmVyIGluZm8gdG8gYmluZGluZyBtZXRhZGF0YVxuICBpZiAoc2hvdWxkQWRkTGlzdGVuZXIoYmluZGluZykpIHtcbiAgICBsZXQge2V2ZW50LCBuZWdhdGV9ID0gYmluZGluZy5wYXJ0c1swXTtcbiAgICBiaW5kaW5nLmxpc3RlbmVyRXZlbnQgPSBldmVudCB8fCAoY2FtZWxUb0Rhc2hDYXNlKHRhcmdldCkgKyAnLWNoYW5nZWQnKTtcbiAgICBiaW5kaW5nLmxpc3RlbmVyTmVnYXRlID0gbmVnYXRlO1xuICB9XG4gIC8vIEFkZCBcInByb3BhZ2F0ZVwiIHByb3BlcnR5IGVmZmVjdHMgdG8gdGVtcGxhdGVJbmZvXG4gIGxldCBpbmRleCA9IHRlbXBsYXRlSW5mby5ub2RlSW5mb0xpc3QubGVuZ3RoO1xuICBmb3IgKGxldCBpPTA7IGk8YmluZGluZy5wYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBwYXJ0ID0gYmluZGluZy5wYXJ0c1tpXTtcbiAgICBwYXJ0LmNvbXBvdW5kSW5kZXggPSBpO1xuICAgIGFkZEVmZmVjdEZvckJpbmRpbmdQYXJ0KGNvbnN0cnVjdG9yLCB0ZW1wbGF0ZUluZm8sIGJpbmRpbmcsIHBhcnQsIGluZGV4KTtcbiAgfVxufVxuXG4vKipcbiAqIEFkZHMgcHJvcGVydHkgZWZmZWN0cyB0byB0aGUgZ2l2ZW4gYHRlbXBsYXRlSW5mb2AgZm9yIHRoZSBnaXZlbiBiaW5kaW5nXG4gKiBwYXJ0LlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbnN0cnVjdG9yIENsYXNzIHRoYXQgYF9wYXJzZVRlbXBsYXRlYCBpcyBjdXJyZW50bHlcbiAqICAgcnVubmluZyBvblxuICogQHBhcmFtIHtUZW1wbGF0ZUluZm99IHRlbXBsYXRlSW5mbyBUZW1wbGF0ZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZVxuICogQHBhcmFtIHshQmluZGluZ30gYmluZGluZyBCaW5kaW5nIG1ldGFkYXRhXG4gKiBAcGFyYW0geyFCaW5kaW5nUGFydH0gcGFydCBCaW5kaW5nIHBhcnQgbWV0YWRhdGFcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBJbmRleCBpbnRvIGBub2RlSW5mb0xpc3RgIGZvciB0aGlzIG5vZGVcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIGFkZEVmZmVjdEZvckJpbmRpbmdQYXJ0KGNvbnN0cnVjdG9yLCB0ZW1wbGF0ZUluZm8sIGJpbmRpbmcsIHBhcnQsIGluZGV4KSB7XG4gIGlmICghcGFydC5saXRlcmFsKSB7XG4gICAgaWYgKGJpbmRpbmcua2luZCA9PT0gJ2F0dHJpYnV0ZScgJiYgYmluZGluZy50YXJnZXRbMF0gPT09ICctJykge1xuICAgICAgY29uc29sZS53YXJuKCdDYW5ub3Qgc2V0IGF0dHJpYnV0ZSAnICsgYmluZGluZy50YXJnZXQgK1xuICAgICAgICAnIGJlY2F1c2UgXCItXCIgaXMgbm90IGEgdmFsaWQgYXR0cmlidXRlIHN0YXJ0aW5nIGNoYXJhY3RlcicpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgZGVwZW5kZW5jaWVzID0gcGFydC5kZXBlbmRlbmNpZXM7XG4gICAgICBsZXQgaW5mbyA9IHsgaW5kZXgsIGJpbmRpbmcsIHBhcnQsIGV2YWx1YXRvcjogY29uc3RydWN0b3IgfTtcbiAgICAgIGZvciAobGV0IGo9MDsgajxkZXBlbmRlbmNpZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgbGV0IHRyaWdnZXIgPSBkZXBlbmRlbmNpZXNbal07XG4gICAgICAgIGlmICh0eXBlb2YgdHJpZ2dlciA9PSAnc3RyaW5nJykge1xuICAgICAgICAgIHRyaWdnZXIgPSBwYXJzZUFyZyh0cmlnZ2VyKTtcbiAgICAgICAgICB0cmlnZ2VyLndpbGRjYXJkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdHJ1Y3Rvci5fYWRkVGVtcGxhdGVQcm9wZXJ0eUVmZmVjdCh0ZW1wbGF0ZUluZm8sIHRyaWdnZXIucm9vdFByb3BlcnR5LCB7XG4gICAgICAgICAgZm46IHJ1bkJpbmRpbmdFZmZlY3QsXG4gICAgICAgICAgaW5mbywgdHJpZ2dlclxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBJbXBsZW1lbnRzIHRoZSBcImJpbmRpbmdcIiAocHJvcGVydHkvcGF0aCBiaW5kaW5nKSBlZmZlY3QuXG4gKlxuICogTm90ZSB0aGF0IGJpbmRpbmcgc3ludGF4IGlzIG92ZXJyaWRhYmxlIHZpYSBgX3BhcnNlQmluZGluZ3NgIGFuZFxuICogYF9ldmFsdWF0ZUJpbmRpbmdgLiAgVGhpcyBtZXRob2Qgd2lsbCBjYWxsIGBfZXZhbHVhdGVCaW5kaW5nYCBmb3IgYW55XG4gKiBub24tbGl0ZXJhbCBwYXJ0cyByZXR1cm5lZCBmcm9tIGBfcGFyc2VCaW5kaW5nc2AuICBIb3dldmVyLFxuICogdGhlcmUgaXMgbm8gc3VwcG9ydCBmb3IgX3BhdGhfIGJpbmRpbmdzIHZpYSBjdXN0b20gYmluZGluZyBwYXJ0cyxcbiAqIGFzIHRoaXMgaXMgc3BlY2lmaWMgdG8gUG9seW1lcidzIHBhdGggYmluZGluZyBzeW50YXguXG4gKlxuICogQHBhcmFtIHshUG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9IGluc3QgVGhlIGluc3RhbmNlIHRoZSBlZmZlY3Qgd2lsbCBiZSBydW4gb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIE5hbWUgb2YgcHJvcGVydHlcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2YgY3VycmVudCBwcm9wZXJ0eSBjaGFuZ2VzXG4gKiBAcGFyYW0ge09iamVjdH0gb2xkUHJvcHMgQmFnIG9mIHByZXZpb3VzIHZhbHVlcyBmb3IgY2hhbmdlZCBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0gez99IGluZm8gRWZmZWN0IG1ldGFkYXRhXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGhhc1BhdGhzIFRydWUgd2l0aCBgcHJvcHNgIGNvbnRhaW5zIG9uZSBvciBtb3JlIHBhdGhzXG4gKiBAcGFyYW0ge0FycmF5fSBub2RlTGlzdCBMaXN0IG9mIG5vZGVzIGFzc29jaWF0ZWQgd2l0aCBgbm9kZUluZm9MaXN0YCB0ZW1wbGF0ZVxuICogICBtZXRhZGF0YVxuICogQHJldHVybiB7dm9pZH1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJ1bkJpbmRpbmdFZmZlY3QoaW5zdCwgcGF0aCwgcHJvcHMsIG9sZFByb3BzLCBpbmZvLCBoYXNQYXRocywgbm9kZUxpc3QpIHtcbiAgbGV0IG5vZGUgPSBub2RlTGlzdFtpbmZvLmluZGV4XTtcbiAgbGV0IGJpbmRpbmcgPSBpbmZvLmJpbmRpbmc7XG4gIGxldCBwYXJ0ID0gaW5mby5wYXJ0O1xuICAvLyBTdWJwYXRoIG5vdGlmaWNhdGlvbjogdHJhbnNmb3JtIHBhdGggYW5kIHNldCB0byBjbGllbnRcbiAgLy8gZS5nLjogZm9vPVwie3tvYmouc3VifX1cIiwgcGF0aDogJ29iai5zdWIucHJvcCcsIHNldCAnZm9vLnByb3AnPW9iai5zdWIucHJvcFxuICBpZiAoaGFzUGF0aHMgJiYgcGFydC5zb3VyY2UgJiYgKHBhdGgubGVuZ3RoID4gcGFydC5zb3VyY2UubGVuZ3RoKSAmJlxuICAgICAgKGJpbmRpbmcua2luZCA9PSAncHJvcGVydHknKSAmJiAhYmluZGluZy5pc0NvbXBvdW5kICYmXG4gICAgICBub2RlLl9faXNQcm9wZXJ0eUVmZmVjdHNDbGllbnQgJiZcbiAgICAgIG5vZGUuX19kYXRhSGFzQWNjZXNzb3IgJiYgbm9kZS5fX2RhdGFIYXNBY2Nlc3NvcltiaW5kaW5nLnRhcmdldF0pIHtcbiAgICBsZXQgdmFsdWUgPSBwcm9wc1twYXRoXTtcbiAgICBwYXRoID0gdHJhbnNsYXRlKHBhcnQuc291cmNlLCBiaW5kaW5nLnRhcmdldCwgcGF0aCk7XG4gICAgaWYgKG5vZGUuX3NldFBlbmRpbmdQcm9wZXJ0eU9yUGF0aChwYXRoLCB2YWx1ZSwgZmFsc2UsIHRydWUpKSB7XG4gICAgICBpbnN0Ll9lbnF1ZXVlQ2xpZW50KG5vZGUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZXQgdmFsdWUgPSBpbmZvLmV2YWx1YXRvci5fZXZhbHVhdGVCaW5kaW5nKGluc3QsIHBhcnQsIHBhdGgsIHByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpO1xuICAgIC8vIFByb3BhZ2F0ZSB2YWx1ZSB0byBjaGlsZFxuICAgIGFwcGx5QmluZGluZ1ZhbHVlKGluc3QsIG5vZGUsIGJpbmRpbmcsIHBhcnQsIHZhbHVlKTtcbiAgfVxufVxuXG4vKipcbiAqIFNldHMgdGhlIHZhbHVlIGZvciBhbiBcImJpbmRpbmdcIiAoYmluZGluZykgZWZmZWN0IHRvIGEgbm9kZSxcbiAqIGVpdGhlciBhcyBhIHByb3BlcnR5IG9yIGF0dHJpYnV0ZS5cbiAqXG4gKiBAcGFyYW0geyFQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c30gaW5zdCBUaGUgaW5zdGFuY2Ugb3duaW5nIHRoZSBiaW5kaW5nIGVmZmVjdFxuICogQHBhcmFtIHtOb2RlfSBub2RlIFRhcmdldCBub2RlIGZvciBiaW5kaW5nXG4gKiBAcGFyYW0geyFCaW5kaW5nfSBiaW5kaW5nIEJpbmRpbmcgbWV0YWRhdGFcbiAqIEBwYXJhbSB7IUJpbmRpbmdQYXJ0fSBwYXJ0IEJpbmRpbmcgcGFydCBtZXRhZGF0YVxuICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSB0byBzZXRcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBhcHBseUJpbmRpbmdWYWx1ZShpbnN0LCBub2RlLCBiaW5kaW5nLCBwYXJ0LCB2YWx1ZSkge1xuICB2YWx1ZSA9IGNvbXB1dGVCaW5kaW5nVmFsdWUobm9kZSwgdmFsdWUsIGJpbmRpbmcsIHBhcnQpO1xuICBpZiAoc2FuaXRpemVET01WYWx1ZSkge1xuICAgIHZhbHVlID0gc2FuaXRpemVET01WYWx1ZSh2YWx1ZSwgYmluZGluZy50YXJnZXQsIGJpbmRpbmcua2luZCwgbm9kZSk7XG4gIH1cbiAgaWYgKGJpbmRpbmcua2luZCA9PSAnYXR0cmlidXRlJykge1xuICAgIC8vIEF0dHJpYnV0ZSBiaW5kaW5nXG4gICAgaW5zdC5fdmFsdWVUb05vZGVBdHRyaWJ1dGUoLyoqIEB0eXBlIHtFbGVtZW50fSAqLyhub2RlKSwgdmFsdWUsIGJpbmRpbmcudGFyZ2V0KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBQcm9wZXJ0eSBiaW5kaW5nXG4gICAgbGV0IHByb3AgPSBiaW5kaW5nLnRhcmdldDtcbiAgICBpZiAobm9kZS5fX2lzUHJvcGVydHlFZmZlY3RzQ2xpZW50ICYmXG4gICAgICAgIG5vZGUuX19kYXRhSGFzQWNjZXNzb3IgJiYgbm9kZS5fX2RhdGFIYXNBY2Nlc3Nvcltwcm9wXSkge1xuICAgICAgaWYgKCFub2RlW1RZUEVTLlJFQURfT05MWV0gfHwgIW5vZGVbVFlQRVMuUkVBRF9PTkxZXVtwcm9wXSkge1xuICAgICAgICBpZiAobm9kZS5fc2V0UGVuZGluZ1Byb3BlcnR5KHByb3AsIHZhbHVlKSkge1xuICAgICAgICAgIGluc3QuX2VucXVldWVDbGllbnQobm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgIHtcbiAgICAgIGluc3QuX3NldFVubWFuYWdlZFByb3BlcnR5VG9Ob2RlKG5vZGUsIHByb3AsIHZhbHVlKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm1zIGFuIFwiYmluZGluZ1wiIGVmZmVjdCB2YWx1ZSBiYXNlZCBvbiBjb21wb3VuZCAmIG5lZ2F0aW9uXG4gKiBlZmZlY3QgbWV0YWRhdGEsIGFzIHdlbGwgYXMgaGFuZGxpbmcgZm9yIHNwZWNpYWwtY2FzZSBwcm9wZXJ0aWVzXG4gKlxuICogQHBhcmFtIHtOb2RlfSBub2RlIE5vZGUgdGhlIHZhbHVlIHdpbGwgYmUgc2V0IHRvXG4gKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHNldFxuICogQHBhcmFtIHshQmluZGluZ30gYmluZGluZyBCaW5kaW5nIG1ldGFkYXRhXG4gKiBAcGFyYW0geyFCaW5kaW5nUGFydH0gcGFydCBCaW5kaW5nIHBhcnQgbWV0YWRhdGFcbiAqIEByZXR1cm4geyp9IFRyYW5zZm9ybWVkIHZhbHVlIHRvIHNldFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZUJpbmRpbmdWYWx1ZShub2RlLCB2YWx1ZSwgYmluZGluZywgcGFydCkge1xuICBpZiAoYmluZGluZy5pc0NvbXBvdW5kKSB7XG4gICAgbGV0IHN0b3JhZ2UgPSBub2RlLl9fZGF0YUNvbXBvdW5kU3RvcmFnZVtiaW5kaW5nLnRhcmdldF07XG4gICAgc3RvcmFnZVtwYXJ0LmNvbXBvdW5kSW5kZXhdID0gdmFsdWU7XG4gICAgdmFsdWUgPSBzdG9yYWdlLmpvaW4oJycpO1xuICB9XG4gIGlmIChiaW5kaW5nLmtpbmQgIT09ICdhdHRyaWJ1dGUnKSB7XG4gICAgLy8gU29tZSBicm93c2VycyBzZXJpYWxpemUgYHVuZGVmaW5lZGAgdG8gYFwidW5kZWZpbmVkXCJgXG4gICAgaWYgKGJpbmRpbmcudGFyZ2V0ID09PSAndGV4dENvbnRlbnQnIHx8XG4gICAgICAgIChiaW5kaW5nLnRhcmdldCA9PT0gJ3ZhbHVlJyAmJlxuICAgICAgICAgIChub2RlLmxvY2FsTmFtZSA9PT0gJ2lucHV0JyB8fCBub2RlLmxvY2FsTmFtZSA9PT0gJ3RleHRhcmVhJykpKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlID09IHVuZGVmaW5lZCA/ICcnIDogdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBiaW5kaW5nJ3MgbWV0YWRhdGEgbWVldHMgYWxsIHRoZSByZXF1aXJlbWVudHMgdG8gYWxsb3dcbiAqIDItd2F5IGJpbmRpbmcsIGFuZCB0aGVyZWZvcmUgYSBgPHByb3BlcnR5Pi1jaGFuZ2VkYCBldmVudCBsaXN0ZW5lciBzaG91bGQgYmVcbiAqIGFkZGVkOlxuICogLSB1c2VkIGN1cmx5IGJyYWNlc1xuICogLSBpcyBhIHByb3BlcnR5IChub3QgYXR0cmlidXRlKSBiaW5kaW5nXG4gKiAtIGlzIG5vdCBhIHRleHRDb250ZW50IGJpbmRpbmdcbiAqIC0gaXMgbm90IGNvbXBvdW5kXG4gKlxuICogQHBhcmFtIHshQmluZGluZ30gYmluZGluZyBCaW5kaW5nIG1ldGFkYXRhXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIDItd2F5IGxpc3RlbmVyIHNob3VsZCBiZSBhZGRlZFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2hvdWxkQWRkTGlzdGVuZXIoYmluZGluZykge1xuICByZXR1cm4gQm9vbGVhbihiaW5kaW5nLnRhcmdldCkgJiZcbiAgICAgICAgIGJpbmRpbmcua2luZCAhPSAnYXR0cmlidXRlJyAmJlxuICAgICAgICAgYmluZGluZy5raW5kICE9ICd0ZXh0JyAmJlxuICAgICAgICAgIWJpbmRpbmcuaXNDb21wb3VuZCAmJlxuICAgICAgICAgYmluZGluZy5wYXJ0c1swXS5tb2RlID09PSAneyc7XG59XG5cbi8qKlxuICogU2V0dXAgY29tcG91bmQgYmluZGluZyBzdG9yYWdlIHN0cnVjdHVyZXMsIG5vdGlmeSBsaXN0ZW5lcnMsIGFuZCBkYXRhSG9zdFxuICogcmVmZXJlbmNlcyBvbnRvIHRoZSBib3VuZCBub2RlTGlzdC5cbiAqXG4gKiBAcGFyYW0geyFQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c30gaW5zdCBJbnN0YW5jZSB0aGF0IGJhcyBiZWVuIHByZXZpb3VzbHlcbiAqICAgICBib3VuZFxuICogQHBhcmFtIHtUZW1wbGF0ZUluZm99IHRlbXBsYXRlSW5mbyBUZW1wbGF0ZSBtZXRhZGF0YVxuICogQHJldHVybiB7dm9pZH1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNldHVwQmluZGluZ3MoaW5zdCwgdGVtcGxhdGVJbmZvKSB7XG4gIC8vIFNldHVwIGNvbXBvdW5kIHN0b3JhZ2UsIGRhdGFIb3N0LCBhbmQgbm90aWZ5IGxpc3RlbmVyc1xuICBsZXQge25vZGVMaXN0LCBub2RlSW5mb0xpc3R9ID0gdGVtcGxhdGVJbmZvO1xuICBpZiAobm9kZUluZm9MaXN0Lmxlbmd0aCkge1xuICAgIGZvciAobGV0IGk9MDsgaSA8IG5vZGVJbmZvTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGluZm8gPSBub2RlSW5mb0xpc3RbaV07XG4gICAgICBsZXQgbm9kZSA9IG5vZGVMaXN0W2ldO1xuICAgICAgbGV0IGJpbmRpbmdzID0gaW5mby5iaW5kaW5ncztcbiAgICAgIGlmIChiaW5kaW5ncykge1xuICAgICAgICBmb3IgKGxldCBpPTA7IGk8YmluZGluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBsZXQgYmluZGluZyA9IGJpbmRpbmdzW2ldO1xuICAgICAgICAgIHNldHVwQ29tcG91bmRTdG9yYWdlKG5vZGUsIGJpbmRpbmcpO1xuICAgICAgICAgIGFkZE5vdGlmeUxpc3RlbmVyKG5vZGUsIGluc3QsIGJpbmRpbmcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBub2RlLl9fZGF0YUhvc3QgPSBpbnN0O1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEluaXRpYWxpemVzIGBfX2RhdGFDb21wb3VuZFN0b3JhZ2VgIGxvY2FsIHN0b3JhZ2Ugb24gYSBib3VuZCBub2RlIHdpdGhcbiAqIGluaXRpYWwgbGl0ZXJhbCBkYXRhIGZvciBjb21wb3VuZCBiaW5kaW5ncywgYW5kIHNldHMgdGhlIGpvaW5lZFxuICogbGl0ZXJhbCBwYXJ0cyB0byB0aGUgYm91bmQgcHJvcGVydHkuXG4gKlxuICogV2hlbiBjaGFuZ2VzIHRvIGNvbXBvdW5kIHBhcnRzIG9jY3VyLCB0aGV5IGFyZSBmaXJzdCBzZXQgaW50byB0aGUgY29tcG91bmRcbiAqIHN0b3JhZ2UgYXJyYXkgZm9yIHRoYXQgcHJvcGVydHksIGFuZCB0aGVuIHRoZSBhcnJheSBpcyBqb2luZWQgdG8gcmVzdWx0IGluXG4gKiB0aGUgZmluYWwgdmFsdWUgc2V0IHRvIHRoZSBwcm9wZXJ0eS9hdHRyaWJ1dGUuXG4gKlxuICogQHBhcmFtIHtOb2RlfSBub2RlIEJvdW5kIG5vZGUgdG8gaW5pdGlhbGl6ZVxuICogQHBhcmFtIHtCaW5kaW5nfSBiaW5kaW5nIEJpbmRpbmcgbWV0YWRhdGFcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzZXR1cENvbXBvdW5kU3RvcmFnZShub2RlLCBiaW5kaW5nKSB7XG4gIGlmIChiaW5kaW5nLmlzQ29tcG91bmQpIHtcbiAgICAvLyBDcmVhdGUgY29tcG91bmQgc3RvcmFnZSBtYXBcbiAgICBsZXQgc3RvcmFnZSA9IG5vZGUuX19kYXRhQ29tcG91bmRTdG9yYWdlIHx8XG4gICAgICAobm9kZS5fX2RhdGFDb21wb3VuZFN0b3JhZ2UgPSB7fSk7XG4gICAgbGV0IHBhcnRzID0gYmluZGluZy5wYXJ0cztcbiAgICAvLyBDb3B5IGxpdGVyYWxzIGZyb20gcGFydHMgaW50byBzdG9yYWdlIGZvciB0aGlzIGJpbmRpbmdcbiAgICBsZXQgbGl0ZXJhbHMgPSBuZXcgQXJyYXkocGFydHMubGVuZ3RoKTtcbiAgICBmb3IgKGxldCBqPTA7IGo8cGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgIGxpdGVyYWxzW2pdID0gcGFydHNbal0ubGl0ZXJhbDtcbiAgICB9XG4gICAgbGV0IHRhcmdldCA9IGJpbmRpbmcudGFyZ2V0O1xuICAgIHN0b3JhZ2VbdGFyZ2V0XSA9IGxpdGVyYWxzO1xuICAgIC8vIENvbmZpZ3VyZSBwcm9wZXJ0aWVzIHdpdGggdGhlaXIgbGl0ZXJhbCBwYXJ0c1xuICAgIGlmIChiaW5kaW5nLmxpdGVyYWwgJiYgYmluZGluZy5raW5kID09ICdwcm9wZXJ0eScpIHtcbiAgICAgIC8vIE5vdGUsIGNsYXNzTmFtZSBuZWVkcyBzdHlsZSBzY29waW5nIHNvIHRoaXMgbmVlZHMgd3JhcHBpbmcuXG4gICAgICAvLyBXZSBtYXkgYWxzbyB3YW50IHRvIGNvbnNpZGVyIGRvaW5nIHRoaXMgZm9yIGB0ZXh0Q29udGVudGAgYW5kXG4gICAgICAvLyBgaW5uZXJIVE1MYC5cbiAgICAgIGlmICh0YXJnZXQgPT09ICdjbGFzc05hbWUnKSB7XG4gICAgICAgIG5vZGUgPSB3cmFwKG5vZGUpO1xuICAgICAgfVxuICAgICAgbm9kZVt0YXJnZXRdID0gYmluZGluZy5saXRlcmFsO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFkZHMgYSAyLXdheSBiaW5kaW5nIG5vdGlmaWNhdGlvbiBldmVudCBsaXN0ZW5lciB0byB0aGUgbm9kZSBzcGVjaWZpZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbm9kZSBDaGlsZCBlbGVtZW50IHRvIGFkZCBsaXN0ZW5lciB0b1xuICogQHBhcmFtIHshUG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9IGluc3QgSG9zdCBlbGVtZW50IGluc3RhbmNlIHRvIGhhbmRsZVxuICogICAgIG5vdGlmaWNhdGlvbiBldmVudFxuICogQHBhcmFtIHtCaW5kaW5nfSBiaW5kaW5nIEJpbmRpbmcgbWV0YWRhdGFcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBhZGROb3RpZnlMaXN0ZW5lcihub2RlLCBpbnN0LCBiaW5kaW5nKSB7XG4gIGlmIChiaW5kaW5nLmxpc3RlbmVyRXZlbnQpIHtcbiAgICBsZXQgcGFydCA9IGJpbmRpbmcucGFydHNbMF07XG4gICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGJpbmRpbmcubGlzdGVuZXJFdmVudCwgZnVuY3Rpb24oZSkge1xuICAgICAgaGFuZGxlTm90aWZpY2F0aW9uKGUsIGluc3QsIGJpbmRpbmcudGFyZ2V0LCBwYXJ0LnNvdXJjZSwgcGFydC5uZWdhdGUpO1xuICAgIH0pO1xuICB9XG59XG5cbi8vIC0tIGZvciBtZXRob2QtYmFzZWQgZWZmZWN0cyAoY29tcGxleE9ic2VydmVyICYgY29tcHV0ZWQpIC0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogQWRkcyBwcm9wZXJ0eSBlZmZlY3RzIGZvciBlYWNoIGFyZ3VtZW50IGluIHRoZSBtZXRob2Qgc2lnbmF0dXJlIChhbmRcbiAqIG9wdGlvbmFsbHksIGZvciB0aGUgbWV0aG9kIG5hbWUgaWYgYGR5bmFtaWNgIGlzIHRydWUpIHRoYXQgY2FsbHMgdGhlXG4gKiBwcm92aWRlZCBlZmZlY3QgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtFbGVtZW50IHwgT2JqZWN0fSBtb2RlbCBQcm90b3R5cGUgb3IgaW5zdGFuY2VcbiAqIEBwYXJhbSB7IU1ldGhvZFNpZ25hdHVyZX0gc2lnIE1ldGhvZCBzaWduYXR1cmUgbWV0YWRhdGFcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFR5cGUgb2YgcHJvcGVydHkgZWZmZWN0IHRvIGFkZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZWZmZWN0Rm4gRnVuY3Rpb24gdG8gcnVuIHdoZW4gYXJndW1lbnRzIGNoYW5nZVxuICogQHBhcmFtIHsqPX0gbWV0aG9kSW5mbyBFZmZlY3Qtc3BlY2lmaWMgaW5mb3JtYXRpb24gdG8gYmUgaW5jbHVkZWQgaW5cbiAqICAgbWV0aG9kIGVmZmVjdCBtZXRhZGF0YVxuICogQHBhcmFtIHtib29sZWFufE9iamVjdD19IGR5bmFtaWNGbiBCb29sZWFuIG9yIG9iamVjdCBtYXAgaW5kaWNhdGluZyB3aGV0aGVyXG4gKiAgIG1ldGhvZCBuYW1lcyBzaG91bGQgYmUgaW5jbHVkZWQgYXMgYSBkZXBlbmRlbmN5IHRvIHRoZSBlZmZlY3QuIE5vdGUsXG4gKiAgIGRlZmF1bHRzIHRvIHRydWUgaWYgdGhlIHNpZ25hdHVyZSBpcyBzdGF0aWMgKHNpZy5zdGF0aWMgaXMgdHJ1ZSkuXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlTWV0aG9kRWZmZWN0KG1vZGVsLCBzaWcsIHR5cGUsIGVmZmVjdEZuLCBtZXRob2RJbmZvLCBkeW5hbWljRm4pIHtcbiAgZHluYW1pY0ZuID0gc2lnLnN0YXRpYyB8fCAoZHluYW1pY0ZuICYmXG4gICAgKHR5cGVvZiBkeW5hbWljRm4gIT09ICdvYmplY3QnIHx8IGR5bmFtaWNGbltzaWcubWV0aG9kTmFtZV0pKTtcbiAgbGV0IGluZm8gPSB7XG4gICAgbWV0aG9kTmFtZTogc2lnLm1ldGhvZE5hbWUsXG4gICAgYXJnczogc2lnLmFyZ3MsXG4gICAgbWV0aG9kSW5mbyxcbiAgICBkeW5hbWljRm5cbiAgfTtcbiAgZm9yIChsZXQgaT0wLCBhcmc7IChpPHNpZy5hcmdzLmxlbmd0aCkgJiYgKGFyZz1zaWcuYXJnc1tpXSk7IGkrKykge1xuICAgIGlmICghYXJnLmxpdGVyYWwpIHtcbiAgICAgIG1vZGVsLl9hZGRQcm9wZXJ0eUVmZmVjdChhcmcucm9vdFByb3BlcnR5LCB0eXBlLCB7XG4gICAgICAgIGZuOiBlZmZlY3RGbiwgaW5mbzogaW5mbywgdHJpZ2dlcjogYXJnXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgaWYgKGR5bmFtaWNGbikge1xuICAgIG1vZGVsLl9hZGRQcm9wZXJ0eUVmZmVjdChzaWcubWV0aG9kTmFtZSwgdHlwZSwge1xuICAgICAgZm46IGVmZmVjdEZuLCBpbmZvOiBpbmZvXG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBDYWxscyBhIG1ldGhvZCB3aXRoIGFyZ3VtZW50cyBtYXJzaGFsZWQgZnJvbSBwcm9wZXJ0aWVzIG9uIHRoZSBpbnN0YW5jZVxuICogYmFzZWQgb24gdGhlIG1ldGhvZCBzaWduYXR1cmUgY29udGFpbmVkIGluIHRoZSBlZmZlY3QgbWV0YWRhdGEuXG4gKlxuICogTXVsdGktcHJvcGVydHkgb2JzZXJ2ZXJzLCBjb21wdXRlZCBwcm9wZXJ0aWVzLCBhbmQgaW5saW5lIGNvbXB1dGluZ1xuICogZnVuY3Rpb25zIGNhbGwgdGhpcyBmdW5jdGlvbiB0byBpbnZva2UgdGhlIG1ldGhvZCwgdGhlbiB1c2UgdGhlIHJldHVyblxuICogdmFsdWUgYWNjb3JkaW5nbHkuXG4gKlxuICogQHBhcmFtIHshUG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9IGluc3QgVGhlIGluc3RhbmNlIHRoZSBlZmZlY3Qgd2lsbCBiZSBydW4gb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHByb3BlcnR5XG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgQmFnIG9mIGN1cnJlbnQgcHJvcGVydHkgY2hhbmdlc1xuICogQHBhcmFtIHtPYmplY3R9IG9sZFByb3BzIEJhZyBvZiBwcmV2aW91cyB2YWx1ZXMgZm9yIGNoYW5nZWQgcHJvcGVydGllc1xuICogQHBhcmFtIHs/fSBpbmZvIEVmZmVjdCBtZXRhZGF0YVxuICogQHJldHVybiB7Kn0gUmV0dXJucyB0aGUgcmV0dXJuIHZhbHVlIGZyb20gdGhlIG1ldGhvZCBpbnZvY2F0aW9uXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBydW5NZXRob2RFZmZlY3QoaW5zdCwgcHJvcGVydHksIHByb3BzLCBvbGRQcm9wcywgaW5mbykge1xuICAvLyBJbnN0YW5jZXMgY2FuIG9wdGlvbmFsbHkgaGF2ZSBhIF9tZXRob2RIb3N0IHdoaWNoIGFsbG93cyByZWRpcmVjdGluZyB3aGVyZVxuICAvLyB0byBmaW5kIG1ldGhvZHMuIEN1cnJlbnRseSB1c2VkIGJ5IGB0ZW1wbGF0aXplYC5cbiAgbGV0IGNvbnRleHQgPSBpbnN0Ll9tZXRob2RIb3N0IHx8IGluc3Q7XG4gIGxldCBmbiA9IGNvbnRleHRbaW5mby5tZXRob2ROYW1lXTtcbiAgaWYgKGZuKSB7XG4gICAgbGV0IGFyZ3MgPSBpbnN0Ll9tYXJzaGFsQXJncyhpbmZvLmFyZ3MsIHByb3BlcnR5LCBwcm9wcyk7XG4gICAgcmV0dXJuIGZuLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICB9IGVsc2UgaWYgKCFpbmZvLmR5bmFtaWNGbikge1xuICAgIGNvbnNvbGUud2FybignbWV0aG9kIGAnICsgaW5mby5tZXRob2ROYW1lICsgJ2Agbm90IGRlZmluZWQnKTtcbiAgfVxufVxuXG5jb25zdCBlbXB0eUFycmF5ID0gW107XG5cbi8vIFJlZ3VsYXIgZXhwcmVzc2lvbnMgdXNlZCBmb3IgYmluZGluZ1xuY29uc3QgSURFTlQgID0gJyg/OicgKyAnW2EtekEtWl8kXVtcXFxcdy46JFxcXFwtKl0qJyArICcpJztcbmNvbnN0IE5VTUJFUiA9ICcoPzonICsgJ1stK10/WzAtOV0qXFxcXC4/WzAtOV0rKD86W2VFXVstK10/WzAtOV0rKT8nICsgJyknO1xuY29uc3QgU1FVT1RFX1NUUklORyA9ICcoPzonICsgJ1xcJyg/OlteXFwnXFxcXFxcXFxdfFxcXFxcXFxcLikqXFwnJyArICcpJztcbmNvbnN0IERRVU9URV9TVFJJTkcgPSAnKD86JyArICdcIig/OlteXCJcXFxcXFxcXF18XFxcXFxcXFwuKSpcIicgKyAnKSc7XG5jb25zdCBTVFJJTkcgPSAnKD86JyArIFNRVU9URV9TVFJJTkcgKyAnfCcgKyBEUVVPVEVfU1RSSU5HICsgJyknO1xuY29uc3QgQVJHVU1FTlQgPSAnKD86KCcgKyBJREVOVCArICd8JyArIE5VTUJFUiArICd8JyArICBTVFJJTkcgKyAnKVxcXFxzKicgKyAnKSc7XG5jb25zdCBBUkdVTUVOVFMgPSAnKD86JyArIEFSR1VNRU5UICsgJyg/OixcXFxccyonICsgQVJHVU1FTlQgKyAnKSonICsgJyknO1xuY29uc3QgQVJHVU1FTlRfTElTVCA9ICcoPzonICsgJ1xcXFwoXFxcXHMqJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnKD86JyArIEFSR1VNRU5UUyArICc/JyArICcpJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1xcXFwpXFxcXHMqJyArICcpJztcbmNvbnN0IEJJTkRJTkcgPSAnKCcgKyBJREVOVCArICdcXFxccyonICsgQVJHVU1FTlRfTElTVCArICc/JyArICcpJzsgLy8gR3JvdXAgM1xuY29uc3QgT1BFTl9CUkFDS0VUID0gJyhcXFxcW1xcXFxbfHt7KScgKyAnXFxcXHMqJztcbmNvbnN0IENMT1NFX0JSQUNLRVQgPSAnKD86XV18fX0pJztcbmNvbnN0IE5FR0FURSA9ICcoPzooISlcXFxccyopPyc7IC8vIEdyb3VwIDJcbmNvbnN0IEVYUFJFU1NJT04gPSBPUEVOX0JSQUNLRVQgKyBORUdBVEUgKyBCSU5ESU5HICsgQ0xPU0VfQlJBQ0tFVDtcbmNvbnN0IGJpbmRpbmdSZWdleCA9IG5ldyBSZWdFeHAoRVhQUkVTU0lPTiwgXCJnXCIpO1xuXG4vKipcbiAqIENyZWF0ZSBhIHN0cmluZyBmcm9tIGJpbmRpbmcgcGFydHMgb2YgYWxsIHRoZSBsaXRlcmFsIHBhcnRzXG4gKlxuICogQHBhcmFtIHshQXJyYXk8QmluZGluZ1BhcnQ+fSBwYXJ0cyBBbGwgcGFydHMgdG8gc3RyaW5naWZ5XG4gKiBAcmV0dXJuIHtzdHJpbmd9IFN0cmluZyBtYWRlIGZyb20gdGhlIGxpdGVyYWwgcGFydHNcbiAqL1xuZnVuY3Rpb24gbGl0ZXJhbEZyb21QYXJ0cyhwYXJ0cykge1xuICBsZXQgcyA9ICcnO1xuICBmb3IgKGxldCBpPTA7IGk8cGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgbGl0ZXJhbCA9IHBhcnRzW2ldLmxpdGVyYWw7XG4gICAgcyArPSBsaXRlcmFsIHx8ICcnO1xuICB9XG4gIHJldHVybiBzO1xufVxuXG4vKipcbiAqIFBhcnNlcyBhbiBleHByZXNzaW9uIHN0cmluZyBmb3IgYSBtZXRob2Qgc2lnbmF0dXJlLCBhbmQgcmV0dXJucyBhIG1ldGFkYXRhXG4gKiBkZXNjcmliaW5nIHRoZSBtZXRob2QgaW4gdGVybXMgb2YgYG1ldGhvZE5hbWVgLCBgc3RhdGljYCAod2hldGhlciBhbGwgdGhlXG4gKiBhcmd1bWVudHMgYXJlIGxpdGVyYWxzKSwgYW5kIGFuIGFycmF5IG9mIGBhcmdzYFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFRoZSBleHByZXNzaW9uIHRvIHBhcnNlXG4gKiBAcmV0dXJuIHs/TWV0aG9kU2lnbmF0dXJlfSBUaGUgbWV0aG9kIG1ldGFkYXRhIG9iamVjdCBpZiBhIG1ldGhvZCBleHByZXNzaW9uIHdhc1xuICogICBmb3VuZCwgb3RoZXJ3aXNlIGB1bmRlZmluZWRgXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBwYXJzZU1ldGhvZChleHByZXNzaW9uKSB7XG4gIC8vIHRyaWVzIHRvIG1hdGNoIHZhbGlkIGphdmFzY3JpcHQgcHJvcGVydHkgbmFtZXNcbiAgbGV0IG0gPSBleHByZXNzaW9uLm1hdGNoKC8oW15cXHNdKz8pXFwoKFtcXHNcXFNdKilcXCkvKTtcbiAgaWYgKG0pIHtcbiAgICBsZXQgbWV0aG9kTmFtZSA9IG1bMV07XG4gICAgbGV0IHNpZyA9IHsgbWV0aG9kTmFtZSwgc3RhdGljOiB0cnVlLCBhcmdzOiBlbXB0eUFycmF5IH07XG4gICAgaWYgKG1bMl0udHJpbSgpKSB7XG4gICAgICAvLyByZXBsYWNlIGVzY2FwZWQgY29tbWFzIHdpdGggY29tbWEgZW50aXR5LCBzcGxpdCBvbiB1bi1lc2NhcGVkIGNvbW1hc1xuICAgICAgbGV0IGFyZ3MgPSBtWzJdLnJlcGxhY2UoL1xcXFwsL2csICcmY29tbWE7Jykuc3BsaXQoJywnKTtcbiAgICAgIHJldHVybiBwYXJzZUFyZ3MoYXJncywgc2lnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHNpZztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogUGFyc2VzIGFuIGFycmF5IG9mIGFyZ3VtZW50cyBhbmQgc2V0cyB0aGUgYGFyZ3NgIHByb3BlcnR5IG9mIHRoZSBzdXBwbGllZFxuICogc2lnbmF0dXJlIG1ldGFkYXRhIG9iamVjdC4gU2V0cyB0aGUgYHN0YXRpY2AgcHJvcGVydHkgdG8gZmFsc2UgaWYgYW55XG4gKiBhcmd1bWVudCBpcyBhIG5vbi1saXRlcmFsLlxuICpcbiAqIEBwYXJhbSB7IUFycmF5PHN0cmluZz59IGFyZ0xpc3QgQXJyYXkgb2YgYXJndW1lbnQgbmFtZXNcbiAqIEBwYXJhbSB7IU1ldGhvZFNpZ25hdHVyZX0gc2lnIE1ldGhvZCBzaWduYXR1cmUgbWV0YWRhdGEgb2JqZWN0XG4gKiBAcmV0dXJuIHshTWV0aG9kU2lnbmF0dXJlfSBUaGUgdXBkYXRlZCBzaWduYXR1cmUgbWV0YWRhdGEgb2JqZWN0XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBwYXJzZUFyZ3MoYXJnTGlzdCwgc2lnKSB7XG4gIHNpZy5hcmdzID0gYXJnTGlzdC5tYXAoZnVuY3Rpb24ocmF3QXJnKSB7XG4gICAgbGV0IGFyZyA9IHBhcnNlQXJnKHJhd0FyZyk7XG4gICAgaWYgKCFhcmcubGl0ZXJhbCkge1xuICAgICAgc2lnLnN0YXRpYyA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gYXJnO1xuICB9LCB0aGlzKTtcbiAgcmV0dXJuIHNpZztcbn1cblxuLyoqXG4gKiBQYXJzZXMgYW4gaW5kaXZpZHVhbCBhcmd1bWVudCwgYW5kIHJldHVybnMgYW4gYXJndW1lbnQgbWV0YWRhdGEgb2JqZWN0XG4gKiB3aXRoIHRoZSBmb2xsb3dpbmcgZmllbGRzOlxuICpcbiAqICAge1xuICogICAgIHZhbHVlOiAncHJvcCcsICAgICAgICAvLyBwcm9wZXJ0eS9wYXRoIG9yIGxpdGVyYWwgdmFsdWVcbiAqICAgICBsaXRlcmFsOiBmYWxzZSwgICAgICAgLy8gd2hldGhlciBhcmd1bWVudCBpcyBhIGxpdGVyYWxcbiAqICAgICBzdHJ1Y3R1cmVkOiBmYWxzZSwgICAgLy8gd2hldGhlciB0aGUgcHJvcGVydHkgaXMgYSBwYXRoXG4gKiAgICAgcm9vdFByb3BlcnR5OiAncHJvcCcsIC8vIHRoZSByb290IHByb3BlcnR5IG9mIHRoZSBwYXRoXG4gKiAgICAgd2lsZGNhcmQ6IGZhbHNlICAgICAgIC8vIHdoZXRoZXIgdGhlIGFyZ3VtZW50IHdhcyBhIHdpbGRjYXJkICcuKicgcGF0aFxuICogICB9XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJhd0FyZyBUaGUgc3RyaW5nIHZhbHVlIG9mIHRoZSBhcmd1bWVudFxuICogQHJldHVybiB7IU1ldGhvZEFyZ30gQXJndW1lbnQgbWV0YWRhdGEgb2JqZWN0XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBwYXJzZUFyZyhyYXdBcmcpIHtcbiAgLy8gY2xlYW4gdXAgd2hpdGVzcGFjZVxuICBsZXQgYXJnID0gcmF3QXJnLnRyaW0oKVxuICAgIC8vIHJlcGxhY2UgY29tbWEgZW50aXR5IHdpdGggY29tbWFcbiAgICAucmVwbGFjZSgvJmNvbW1hOy9nLCAnLCcpXG4gICAgLy8gcmVwYWlyIGV4dHJhIGVzY2FwZSBzZXF1ZW5jZXM7IG5vdGUgb25seSBjb21tYXMgc3RyaWN0bHkgbmVlZFxuICAgIC8vIGVzY2FwaW5nLCBidXQgd2UgYWxsb3cgYW55IG90aGVyIGNoYXIgdG8gYmUgZXNjYXBlZCBzaW5jZSBpdHNcbiAgICAvLyBsaWtlbHkgdXNlcnMgd2lsbCBkbyB0aGlzXG4gICAgLnJlcGxhY2UoL1xcXFwoLikvZywgJ1xcJDEnKVxuICAgIDtcbiAgLy8gYmFzaWMgYXJndW1lbnQgZGVzY3JpcHRvclxuICBsZXQgYSA9IHtcbiAgICBuYW1lOiBhcmcsXG4gICAgdmFsdWU6ICcnLFxuICAgIGxpdGVyYWw6IGZhbHNlXG4gIH07XG4gIC8vIGRldGVjdCBsaXRlcmFsIHZhbHVlIChtdXN0IGJlIFN0cmluZyBvciBOdW1iZXIpXG4gIGxldCBmYyA9IGFyZ1swXTtcbiAgaWYgKGZjID09PSAnLScpIHtcbiAgICBmYyA9IGFyZ1sxXTtcbiAgfVxuICBpZiAoZmMgPj0gJzAnICYmIGZjIDw9ICc5Jykge1xuICAgIGZjID0gJyMnO1xuICB9XG4gIHN3aXRjaChmYykge1xuICAgIGNhc2UgXCInXCI6XG4gICAgY2FzZSAnXCInOlxuICAgICAgYS52YWx1ZSA9IGFyZy5zbGljZSgxLCAtMSk7XG4gICAgICBhLmxpdGVyYWwgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnIyc6XG4gICAgICBhLnZhbHVlID0gTnVtYmVyKGFyZyk7XG4gICAgICBhLmxpdGVyYWwgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgLy8gaWYgbm90IGxpdGVyYWwsIGxvb2sgZm9yIHN0cnVjdHVyZWQgcGF0aFxuICBpZiAoIWEubGl0ZXJhbCkge1xuICAgIGEucm9vdFByb3BlcnR5ID0gcm9vdChhcmcpO1xuICAgIC8vIGRldGVjdCBzdHJ1Y3R1cmVkIHBhdGggKGhhcyBkb3RzKVxuICAgIGEuc3RydWN0dXJlZCA9IGlzUGF0aChhcmcpO1xuICAgIGlmIChhLnN0cnVjdHVyZWQpIHtcbiAgICAgIGEud2lsZGNhcmQgPSAoYXJnLnNsaWNlKC0yKSA9PSAnLionKTtcbiAgICAgIGlmIChhLndpbGRjYXJkKSB7XG4gICAgICAgIGEubmFtZSA9IGFyZy5zbGljZSgwLCAtMik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBhO1xufVxuXG5mdW5jdGlvbiBnZXRBcmdWYWx1ZShkYXRhLCBwcm9wcywgcGF0aCkge1xuICBsZXQgdmFsdWUgPSBnZXQoZGF0YSwgcGF0aCk7XG4gIC8vIHdoZW4gZGF0YSBpcyBub3Qgc3RvcmVkIGUuZy4gYHNwbGljZXNgLCBnZXQgdGhlIHZhbHVlIGZyb20gY2hhbmdlZFByb3BzXG4gIC8vIFRPRE8oa3NjaGFhZik6IE5vdGUsIHRoaXMgY2FuIGNhdXNlIGEgcmFyZSBpc3N1ZSB3aGVyZSB0aGUgd2lsZGNhcmRcbiAgLy8gaW5mby52YWx1ZSBjb3VsZCBwdWxsIGEgc3RhbGUgdmFsdWUgb3V0IG9mIGNoYW5nZWRQcm9wcyBkdXJpbmcgYSByZWVudHJhbnRcbiAgLy8gY2hhbmdlIHRoYXQgc2V0cyB0aGUgdmFsdWUgYmFjayB0byB1bmRlZmluZWQuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Qb2x5bWVyL3BvbHltZXIvaXNzdWVzLzU0NzlcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICB2YWx1ZSA9IHByb3BzW3BhdGhdO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuLy8gZGF0YSBhcGlcblxuLyoqXG4gKiBTZW5kcyBhcnJheSBzcGxpY2Ugbm90aWZpY2F0aW9ucyAoYC5zcGxpY2VzYCBhbmQgYC5sZW5ndGhgKVxuICpcbiAqIE5vdGU6IHRoaXMgaW1wbGVtZW50YXRpb24gb25seSBhY2NlcHRzIG5vcm1hbGl6ZWQgcGF0aHNcbiAqXG4gKiBAcGFyYW0geyFQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c30gaW5zdCBJbnN0YW5jZSB0byBzZW5kIG5vdGlmaWNhdGlvbnMgdG9cbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0aGUgbXV0YXRpb25zIG9jY3VycmVkIG9uXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCB0byB0aGUgYXJyYXkgdGhhdCB3YXMgbXV0YXRlZFxuICogQHBhcmFtIHtBcnJheX0gc3BsaWNlcyBBcnJheSBvZiBzcGxpY2UgcmVjb3Jkc1xuICogQHJldHVybiB7dm9pZH1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIG5vdGlmeVNwbGljZXMoaW5zdCwgYXJyYXksIHBhdGgsIHNwbGljZXMpIHtcbiAgaW5zdC5ub3RpZnlQYXRoKHBhdGggKyAnLnNwbGljZXMnLCB7IGluZGV4U3BsaWNlczogc3BsaWNlcyB9KTtcbiAgaW5zdC5ub3RpZnlQYXRoKHBhdGggKyAnLmxlbmd0aCcsIGFycmF5Lmxlbmd0aCk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHNwbGljZSByZWNvcmQgYW5kIHNlbmRzIGFuIGFycmF5IHNwbGljZSBub3RpZmljYXRpb24gZm9yXG4gKiB0aGUgZGVzY3JpYmVkIG11dGF0aW9uXG4gKlxuICogTm90ZTogdGhpcyBpbXBsZW1lbnRhdGlvbiBvbmx5IGFjY2VwdHMgbm9ybWFsaXplZCBwYXRoc1xuICpcbiAqIEBwYXJhbSB7IVBvbHltZXJfUHJvcGVydHlFZmZlY3RzfSBpbnN0IEluc3RhbmNlIHRvIHNlbmQgbm90aWZpY2F0aW9ucyB0b1xuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRoZSBtdXRhdGlvbnMgb2NjdXJyZWQgb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIHRoZSBhcnJheSB0aGF0IHdhcyBtdXRhdGVkXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggYXQgd2hpY2ggdGhlIGFycmF5IG11dGF0aW9uIG9jY3VycmVkXG4gKiBAcGFyYW0ge251bWJlcn0gYWRkZWRDb3VudCBOdW1iZXIgb2YgYWRkZWQgaXRlbXNcbiAqIEBwYXJhbSB7QXJyYXl9IHJlbW92ZWQgQXJyYXkgb2YgcmVtb3ZlZCBpdGVtc1xuICogQHJldHVybiB7dm9pZH1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIG5vdGlmeVNwbGljZShpbnN0LCBhcnJheSwgcGF0aCwgaW5kZXgsIGFkZGVkQ291bnQsIHJlbW92ZWQpIHtcbiAgbm90aWZ5U3BsaWNlcyhpbnN0LCBhcnJheSwgcGF0aCwgW3tcbiAgICBpbmRleDogaW5kZXgsXG4gICAgYWRkZWRDb3VudDogYWRkZWRDb3VudCxcbiAgICByZW1vdmVkOiByZW1vdmVkLFxuICAgIG9iamVjdDogYXJyYXksXG4gICAgdHlwZTogJ3NwbGljZSdcbiAgfV0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgYW4gdXBwZXItY2FzZWQgdmVyc2lvbiBvZiB0aGUgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFN0cmluZyB0byB1cHBlcmNhc2VcbiAqIEByZXR1cm4ge3N0cmluZ30gVXBwZXJjYXNlZCBzdHJpbmdcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHVwcGVyKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWVbMF0udG9VcHBlckNhc2UoKSArIG5hbWUuc3Vic3RyaW5nKDEpO1xufVxuXG4vKipcbiAqIEVsZW1lbnQgY2xhc3MgbWl4aW4gdGhhdCBwcm92aWRlcyBtZXRhLXByb2dyYW1taW5nIGZvciBQb2x5bWVyJ3MgdGVtcGxhdGVcbiAqIGJpbmRpbmcgYW5kIGRhdGEgb2JzZXJ2YXRpb24gKGNvbGxlY3RpdmVseSwgXCJwcm9wZXJ0eSBlZmZlY3RzXCIpIHN5c3RlbS5cbiAqXG4gKiBUaGlzIG1peGluIHVzZXMgcHJvdmlkZXMgdGhlIGZvbGxvd2luZyBrZXkgc3RhdGljIG1ldGhvZHMgZm9yIGFkZGluZ1xuICogcHJvcGVydHkgZWZmZWN0cyB0byBhbiBlbGVtZW50IGNsYXNzOlxuICogLSBgYWRkUHJvcGVydHlFZmZlY3RgXG4gKiAtIGBjcmVhdGVQcm9wZXJ0eU9ic2VydmVyYFxuICogLSBgY3JlYXRlTWV0aG9kT2JzZXJ2ZXJgXG4gKiAtIGBjcmVhdGVOb3RpZnlpbmdQcm9wZXJ0eWBcbiAqIC0gYGNyZWF0ZVJlYWRPbmx5UHJvcGVydHlgXG4gKiAtIGBjcmVhdGVSZWZsZWN0ZWRQcm9wZXJ0eWBcbiAqIC0gYGNyZWF0ZUNvbXB1dGVkUHJvcGVydHlgXG4gKiAtIGBiaW5kVGVtcGxhdGVgXG4gKlxuICogRWFjaCBtZXRob2QgY3JlYXRlcyBvbmUgb3IgbW9yZSBwcm9wZXJ0eSBhY2Nlc3NvcnMsIGFsb25nIHdpdGggbWV0YWRhdGFcbiAqIHVzZWQgYnkgdGhpcyBtaXhpbidzIGltcGxlbWVudGF0aW9uIG9mIGBfcHJvcGVydGllc0NoYW5nZWRgIHRvIHBlcmZvcm1cbiAqIHRoZSBwcm9wZXJ0eSBlZmZlY3RzLlxuICpcbiAqIFVuZGVyc2NvcmVkIHZlcnNpb25zIG9mIHRoZSBhYm92ZSBtZXRob2RzIGFsc28gZXhpc3Qgb24gdGhlIGVsZW1lbnRcbiAqIHByb3RvdHlwZSBmb3IgYWRkaW5nIHByb3BlcnR5IGVmZmVjdHMgb24gaW5zdGFuY2VzIGF0IHJ1bnRpbWUuXG4gKlxuICogTm90ZSB0aGF0IHRoaXMgbWl4aW4gb3ZlcnJpZGVzIHNldmVyYWwgYFByb3BlcnR5QWNjZXNzb3JzYCBtZXRob2RzLCBpblxuICogbWFueSBjYXNlcyB0byBtYWludGFpbiBndWFyYW50ZWVzIHByb3ZpZGVkIGJ5IHRoZSBQb2x5bWVyIDEueCBmZWF0dXJlcztcbiAqIG5vdGFibHkgaXQgY2hhbmdlcyBwcm9wZXJ0eSBhY2Nlc3NvcnMgdG8gYmUgc3luY2hyb25vdXMgYnkgZGVmYXVsdFxuICogd2hlcmVhcyB0aGUgZGVmYXVsdCB3aGVuIHVzaW5nIGBQcm9wZXJ0eUFjY2Vzc29yc2Agc3RhbmRhbG9uZSBpcyB0byBiZVxuICogYXN5bmMgYnkgZGVmYXVsdC5cbiAqXG4gKiBAbWl4aW5GdW5jdGlvblxuICogQHBvbHltZXJcbiAqIEBhcHBsaWVzTWl4aW4gVGVtcGxhdGVTdGFtcFxuICogQGFwcGxpZXNNaXhpbiBQcm9wZXJ0eUFjY2Vzc29yc1xuICogQHN1bW1hcnkgRWxlbWVudCBjbGFzcyBtaXhpbiB0aGF0IHByb3ZpZGVzIG1ldGEtcHJvZ3JhbW1pbmcgZm9yIFBvbHltZXInc1xuICogdGVtcGxhdGUgYmluZGluZyBhbmQgZGF0YSBvYnNlcnZhdGlvbiBzeXN0ZW0uXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtmdW5jdGlvbihuZXc6VCl9IHN1cGVyQ2xhc3MgQ2xhc3MgdG8gYXBwbHkgbWl4aW4gdG8uXG4gKiBAcmV0dXJuIHtmdW5jdGlvbihuZXc6VCl9IHN1cGVyQ2xhc3Mgd2l0aCBtaXhpbiBhcHBsaWVkLlxuICovXG5leHBvcnQgY29uc3QgUHJvcGVydHlFZmZlY3RzID0gZGVkdXBpbmdNaXhpbihzdXBlckNsYXNzID0+IHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX1Byb3BlcnR5QWNjZXNzb3JzfVxuICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9UZW1wbGF0ZVN0YW1wfVxuICAgKiBAdW5yZXN0cmljdGVkXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb25zdCBwcm9wZXJ0eUVmZmVjdHNCYXNlID0gVGVtcGxhdGVTdGFtcChQcm9wZXJ0eUFjY2Vzc29ycyhzdXBlckNsYXNzKSk7XG5cbiAgLyoqXG4gICAqIEBwb2x5bWVyXG4gICAqIEBtaXhpbkNsYXNzXG4gICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c31cbiAgICogQGV4dGVuZHMge3Byb3BlcnR5RWZmZWN0c0Jhc2V9XG4gICAqIEB1bnJlc3RyaWN0ZWRcbiAgICovXG4gIGNsYXNzIFByb3BlcnR5RWZmZWN0cyBleHRlbmRzIHByb3BlcnR5RWZmZWN0c0Jhc2Uge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICBzdXBlcigpO1xuICAgICAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICAgICAgLy8gVXNlZCB0byBpZGVudGlmeSB1c2VycyBvZiB0aGlzIG1peGluLCBhbGEgaW5zdGFuY2VvZlxuICAgICAgdGhpcy5fX2lzUHJvcGVydHlFZmZlY3RzQ2xpZW50ID0gdHJ1ZTtcbiAgICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICAgICAgLy8gTk9URTogdXNlZCB0byB0cmFjayByZS1lbnRyYW50IGNhbGxzIHRvIGBfZmx1c2hQcm9wZXJ0aWVzYFxuICAgICAgLy8gcGF0aCBjaGFuZ2VzIGRpcnR5IGNoZWNrIGFnYWluc3QgYF9fZGF0YVRlbXBgIG9ubHkgZHVyaW5nIG9uZSBcInR1cm5cIlxuICAgICAgLy8gYW5kIGFyZSBjbGVhcmVkIHdoZW4gYF9fZGF0YUNvdW50ZXJgIHJldHVybnMgdG8gMC5cbiAgICAgIHRoaXMuX19kYXRhQ291bnRlciA9IDA7XG4gICAgICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gICAgICB0aGlzLl9fZGF0YUNsaWVudHNSZWFkeTtcbiAgICAgIC8qKiBAdHlwZSB7QXJyYXl9ICovXG4gICAgICB0aGlzLl9fZGF0YVBlbmRpbmdDbGllbnRzO1xuICAgICAgLyoqIEB0eXBlIHtPYmplY3R9ICovXG4gICAgICB0aGlzLl9fZGF0YVRvTm90aWZ5O1xuICAgICAgLyoqIEB0eXBlIHtPYmplY3R9ICovXG4gICAgICB0aGlzLl9fZGF0YUxpbmtlZFBhdGhzO1xuICAgICAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICAgICAgdGhpcy5fX2RhdGFIYXNQYXRocztcbiAgICAgIC8qKiBAdHlwZSB7T2JqZWN0fSAqL1xuICAgICAgdGhpcy5fX2RhdGFDb21wb3VuZFN0b3JhZ2U7XG4gICAgICAvKiogQHR5cGUge1BvbHltZXJfUHJvcGVydHlFZmZlY3RzfSAqL1xuICAgICAgdGhpcy5fX2RhdGFIb3N0O1xuICAgICAgLyoqIEB0eXBlIHshT2JqZWN0fSAqL1xuICAgICAgdGhpcy5fX2RhdGFUZW1wO1xuICAgICAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICAgICAgdGhpcy5fX2RhdGFDbGllbnRzSW5pdGlhbGl6ZWQ7XG4gICAgICAvKiogQHR5cGUgeyFPYmplY3R9ICovXG4gICAgICB0aGlzLl9fZGF0YTtcbiAgICAgIC8qKiBAdHlwZSB7IU9iamVjdHxudWxsfSAqL1xuICAgICAgdGhpcy5fX2RhdGFQZW5kaW5nO1xuICAgICAgLyoqIEB0eXBlIHshT2JqZWN0fSAqL1xuICAgICAgdGhpcy5fX2RhdGFPbGQ7XG4gICAgICAvKiogQHR5cGUge09iamVjdH0gKi9cbiAgICAgIHRoaXMuX19jb21wdXRlRWZmZWN0cztcbiAgICAgIC8qKiBAdHlwZSB7T2JqZWN0fSAqL1xuICAgICAgdGhpcy5fX3JlZmxlY3RFZmZlY3RzO1xuICAgICAgLyoqIEB0eXBlIHtPYmplY3R9ICovXG4gICAgICB0aGlzLl9fbm90aWZ5RWZmZWN0cztcbiAgICAgIC8qKiBAdHlwZSB7T2JqZWN0fSAqL1xuICAgICAgdGhpcy5fX3Byb3BhZ2F0ZUVmZmVjdHM7XG4gICAgICAvKiogQHR5cGUge09iamVjdH0gKi9cbiAgICAgIHRoaXMuX19vYnNlcnZlRWZmZWN0cztcbiAgICAgIC8qKiBAdHlwZSB7T2JqZWN0fSAqL1xuICAgICAgdGhpcy5fX3JlYWRPbmx5O1xuICAgICAgLyoqIEB0eXBlIHshVGVtcGxhdGVJbmZvfSAqL1xuICAgICAgdGhpcy5fX3RlbXBsYXRlSW5mbztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHshT2JqZWN0PHN0cmluZywgc3RyaW5nPn0gRWZmZWN0IHByb3RvdHlwZSBwcm9wZXJ0eSBuYW1lIG1hcC5cbiAgICAgKi9cbiAgICBnZXQgUFJPUEVSVFlfRUZGRUNUX1RZUEVTKCkge1xuICAgICAgcmV0dXJuIFRZUEVTO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgX2luaXRpYWxpemVQcm9wZXJ0aWVzKCkge1xuICAgICAgc3VwZXIuX2luaXRpYWxpemVQcm9wZXJ0aWVzKCk7XG4gICAgICBob3N0U3RhY2sucmVnaXN0ZXJIb3N0KHRoaXMpO1xuICAgICAgdGhpcy5fX2RhdGFDbGllbnRzUmVhZHkgPSBmYWxzZTtcbiAgICAgIHRoaXMuX19kYXRhUGVuZGluZ0NsaWVudHMgPSBudWxsO1xuICAgICAgdGhpcy5fX2RhdGFUb05vdGlmeSA9IG51bGw7XG4gICAgICB0aGlzLl9fZGF0YUxpbmtlZFBhdGhzID0gbnVsbDtcbiAgICAgIHRoaXMuX19kYXRhSGFzUGF0aHMgPSBmYWxzZTtcbiAgICAgIC8vIE1heSBiZSBzZXQgb24gaW5zdGFuY2UgcHJpb3IgdG8gdXBncmFkZVxuICAgICAgdGhpcy5fX2RhdGFDb21wb3VuZFN0b3JhZ2UgPSB0aGlzLl9fZGF0YUNvbXBvdW5kU3RvcmFnZSB8fCBudWxsO1xuICAgICAgdGhpcy5fX2RhdGFIb3N0ID0gdGhpcy5fX2RhdGFIb3N0IHx8IG51bGw7XG4gICAgICB0aGlzLl9fZGF0YVRlbXAgPSB7fTtcbiAgICAgIHRoaXMuX19kYXRhQ2xpZW50c0luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGVzIGBQcm9wZXJ0eUFjY2Vzc29yc2AgaW1wbGVtZW50YXRpb24gdG8gcHJvdmlkZSBhXG4gICAgICogbW9yZSBlZmZpY2llbnQgaW1wbGVtZW50YXRpb24gb2YgaW5pdGlhbGl6aW5nIHByb3BlcnRpZXMgZnJvbVxuICAgICAqIHRoZSBwcm90b3R5cGUgb24gdGhlIGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BzIFByb3BlcnRpZXMgdG8gaW5pdGlhbGl6ZSBvbiB0aGUgcHJvdG90eXBlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBfaW5pdGlhbGl6ZVByb3RvUHJvcGVydGllcyhwcm9wcykge1xuICAgICAgdGhpcy5fX2RhdGEgPSBPYmplY3QuY3JlYXRlKHByb3BzKTtcbiAgICAgIHRoaXMuX19kYXRhUGVuZGluZyA9IE9iamVjdC5jcmVhdGUocHJvcHMpO1xuICAgICAgdGhpcy5fX2RhdGFPbGQgPSB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgYFByb3BlcnR5QWNjZXNzb3JzYCBpbXBsZW1lbnRhdGlvbiB0byBhdm9pZCBzZXR0aW5nXG4gICAgICogYF9zZXRQcm9wZXJ0eWAncyBgc2hvdWxkTm90aWZ5OiB0cnVlYC5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBQcm9wZXJ0aWVzIHRvIGluaXRpYWxpemUgb24gdGhlIGluc3RhbmNlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBfaW5pdGlhbGl6ZUluc3RhbmNlUHJvcGVydGllcyhwcm9wcykge1xuICAgICAgbGV0IHJlYWRPbmx5ID0gdGhpc1tUWVBFUy5SRUFEX09OTFldO1xuICAgICAgZm9yIChsZXQgcHJvcCBpbiBwcm9wcykge1xuICAgICAgICBpZiAoIXJlYWRPbmx5IHx8ICFyZWFkT25seVtwcm9wXSkge1xuICAgICAgICAgIHRoaXMuX19kYXRhUGVuZGluZyA9IHRoaXMuX19kYXRhUGVuZGluZyB8fCB7fTtcbiAgICAgICAgICB0aGlzLl9fZGF0YU9sZCA9IHRoaXMuX19kYXRhT2xkIHx8IHt9O1xuICAgICAgICAgIHRoaXMuX19kYXRhW3Byb3BdID0gdGhpcy5fX2RhdGFQZW5kaW5nW3Byb3BdID0gcHJvcHNbcHJvcF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBQcm90b3R5cGUgc2V0dXAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLyoqXG4gICAgICogRXF1aXZhbGVudCB0byBzdGF0aWMgYGFkZFByb3BlcnR5RWZmZWN0YCBBUEkgYnV0IGNhbiBiZSBjYWxsZWQgb25cbiAgICAgKiBhbiBpbnN0YW5jZSB0byBhZGQgZWZmZWN0cyBhdCBydW50aW1lLiAgU2VlIHRoYXQgbWV0aG9kIGZvclxuICAgICAqIGZ1bGwgQVBJIGRvY3MuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgdGhhdCBzaG91bGQgdHJpZ2dlciB0aGUgZWZmZWN0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgRWZmZWN0IHR5cGUsIGZyb20gdGhpcy5QUk9QRVJUWV9FRkZFQ1RfVFlQRVNcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGVmZmVjdCBFZmZlY3QgbWV0YWRhdGEgb2JqZWN0XG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2FkZFByb3BlcnR5RWZmZWN0KHByb3BlcnR5LCB0eXBlLCBlZmZlY3QpIHtcbiAgICAgIHRoaXMuX2NyZWF0ZVByb3BlcnR5QWNjZXNzb3IocHJvcGVydHksIHR5cGUgPT0gVFlQRVMuUkVBRF9PTkxZKTtcbiAgICAgIC8vIGVmZmVjdHMgYXJlIGFjY3VtdWxhdGVkIGludG8gYXJyYXlzIHBlciBwcm9wZXJ0eSBiYXNlZCBvbiB0eXBlXG4gICAgICBsZXQgZWZmZWN0cyA9IGVuc3VyZU93bkVmZmVjdE1hcCh0aGlzLCB0eXBlKVtwcm9wZXJ0eV07XG4gICAgICBpZiAoIWVmZmVjdHMpIHtcbiAgICAgICAgZWZmZWN0cyA9IHRoaXNbdHlwZV1bcHJvcGVydHldID0gW107XG4gICAgICB9XG4gICAgICBlZmZlY3RzLnB1c2goZWZmZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBnaXZlbiBwcm9wZXJ0eSBlZmZlY3QuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgdGhlIGVmZmVjdCB3YXMgYXNzb2NpYXRlZCB3aXRoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgRWZmZWN0IHR5cGUsIGZyb20gdGhpcy5QUk9QRVJUWV9FRkZFQ1RfVFlQRVNcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGVmZmVjdCBFZmZlY3QgbWV0YWRhdGEgb2JqZWN0IHRvIHJlbW92ZVxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgX3JlbW92ZVByb3BlcnR5RWZmZWN0KHByb3BlcnR5LCB0eXBlLCBlZmZlY3QpIHtcbiAgICAgIGxldCBlZmZlY3RzID0gZW5zdXJlT3duRWZmZWN0TWFwKHRoaXMsIHR5cGUpW3Byb3BlcnR5XTtcbiAgICAgIGxldCBpZHggPSBlZmZlY3RzLmluZGV4T2YoZWZmZWN0KTtcbiAgICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgICBlZmZlY3RzLnNwbGljZShpZHgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgY3VycmVudCBwcm90b3R5cGUvaW5zdGFuY2UgaGFzIGEgcHJvcGVydHkgZWZmZWN0XG4gICAgICogb2YgYSBjZXJ0YWluIHR5cGUuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gdHlwZSBFZmZlY3QgdHlwZSwgZnJvbSB0aGlzLlBST1BFUlRZX0VGRkVDVF9UWVBFU1xuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHByb3RvdHlwZS9pbnN0YW5jZSBoYXMgYW4gZWZmZWN0IG9mIHRoaXNcbiAgICAgKiAgICAgdHlwZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfaGFzUHJvcGVydHlFZmZlY3QocHJvcGVydHksIHR5cGUpIHtcbiAgICAgIGxldCBlZmZlY3RzID0gdGhpc1t0eXBlXTtcbiAgICAgIHJldHVybiBCb29sZWFuKGVmZmVjdHMgJiYgZWZmZWN0c1twcm9wZXJ0eV0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgY3VycmVudCBwcm90b3R5cGUvaW5zdGFuY2UgaGFzIGEgXCJyZWFkIG9ubHlcIlxuICAgICAqIGFjY2Vzc29yIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHByb3RvdHlwZS9pbnN0YW5jZSBoYXMgYW4gZWZmZWN0IG9mIHRoaXNcbiAgICAgKiAgICAgdHlwZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfaGFzUmVhZE9ubHlFZmZlY3QocHJvcGVydHkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9oYXNQcm9wZXJ0eUVmZmVjdChwcm9wZXJ0eSwgVFlQRVMuUkVBRF9PTkxZKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGN1cnJlbnQgcHJvdG90eXBlL2luc3RhbmNlIGhhcyBhIFwibm90aWZ5XCJcbiAgICAgKiBwcm9wZXJ0eSBlZmZlY3QgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcHJvdG90eXBlL2luc3RhbmNlIGhhcyBhbiBlZmZlY3Qgb2YgdGhpc1xuICAgICAqICAgICB0eXBlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9oYXNOb3RpZnlFZmZlY3QocHJvcGVydHkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9oYXNQcm9wZXJ0eUVmZmVjdChwcm9wZXJ0eSwgVFlQRVMuTk9USUZZKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGN1cnJlbnQgcHJvdG90eXBlL2luc3RhbmNlIGhhcyBhIFwicmVmbGVjdCB0b1xuICAgICAqIGF0dHJpYnV0ZVwiIHByb3BlcnR5IGVmZmVjdCBmb3IgdGhlIGdpdmVuIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBwcm90b3R5cGUvaW5zdGFuY2UgaGFzIGFuIGVmZmVjdCBvZiB0aGlzXG4gICAgICogICAgIHR5cGVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2hhc1JlZmxlY3RFZmZlY3QocHJvcGVydHkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9oYXNQcm9wZXJ0eUVmZmVjdChwcm9wZXJ0eSwgVFlQRVMuUkVGTEVDVCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBjdXJyZW50IHByb3RvdHlwZS9pbnN0YW5jZSBoYXMgYSBcImNvbXB1dGVkXCJcbiAgICAgKiBwcm9wZXJ0eSBlZmZlY3QgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcHJvdG90eXBlL2luc3RhbmNlIGhhcyBhbiBlZmZlY3Qgb2YgdGhpc1xuICAgICAqICAgICB0eXBlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9oYXNDb21wdXRlZEVmZmVjdChwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2hhc1Byb3BlcnR5RWZmZWN0KHByb3BlcnR5LCBUWVBFUy5DT01QVVRFKTtcbiAgICB9XG5cbiAgICAvLyBSdW50aW1lIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIC8qKlxuICAgICAqIFNldHMgYSBwZW5kaW5nIHByb3BlcnR5IG9yIHBhdGguICBJZiB0aGUgcm9vdCBwcm9wZXJ0eSBvZiB0aGUgcGF0aCBpblxuICAgICAqIHF1ZXN0aW9uIGhhZCBubyBhY2Nlc3NvciwgdGhlIHBhdGggaXMgc2V0LCBvdGhlcndpc2UgaXQgaXMgZW5xdWV1ZWRcbiAgICAgKiB2aWEgYF9zZXRQZW5kaW5nUHJvcGVydHlgLlxuICAgICAqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpc29sYXRlcyByZWxhdGl2ZWx5IGV4cGVuc2l2ZSBmdW5jdGlvbmFsaXR5IG5lY2Vzc2FyeVxuICAgICAqIGZvciB0aGUgcHVibGljIEFQSSAoYHNldGAsIGBzZXRQcm9wZXJ0aWVzYCwgYG5vdGlmeVBhdGhgLCBhbmQgcHJvcGVydHlcbiAgICAgKiBjaGFuZ2UgbGlzdGVuZXJzIHZpYSB7ey4uLn19IGJpbmRpbmdzKSwgc3VjaCB0aGF0IGl0IGlzIG9ubHkgZG9uZVxuICAgICAqIHdoZW4gcGF0aHMgZW50ZXIgdGhlIHN5c3RlbSwgYW5kIG5vdCBhdCBldmVyeSBwcm9wYWdhdGlvbiBzdGVwLiAgSXRcbiAgICAgKiBhbHNvIHNldHMgYSBgX19kYXRhSGFzUGF0aHNgIGZsYWcgb24gdGhlIGluc3RhbmNlIHdoaWNoIGlzIHVzZWQgdG9cbiAgICAgKiBmYXN0LXBhdGggc2xvd2VyIHBhdGgtbWF0Y2hpbmcgY29kZSBpbiB0aGUgcHJvcGVydHkgZWZmZWN0cyBob3N0IHBhdGhzLlxuICAgICAqXG4gICAgICogYHBhdGhgIGNhbiBiZSBhIHBhdGggc3RyaW5nIG9yIGFycmF5IG9mIHBhdGggcGFydHMgYXMgYWNjZXB0ZWQgYnkgdGhlXG4gICAgICogcHVibGljIEFQSS5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PG51bWJlcnxzdHJpbmc+fSBwYXRoIFBhdGggdG8gc2V0XG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSB0byBzZXRcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBzaG91bGROb3RpZnkgU2V0IHRvIHRydWUgaWYgdGhpcyBjaGFuZ2Ugc2hvdWxkXG4gICAgICogIGNhdXNlIGEgcHJvcGVydHkgbm90aWZpY2F0aW9uIGV2ZW50IGRpc3BhdGNoXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gaXNQYXRoTm90aWZpY2F0aW9uIElmIHRoZSBwYXRoIGJlaW5nIHNldCBpcyBhIHBhdGhcbiAgICAgKiAgIG5vdGlmaWNhdGlvbiBvZiBhbiBhbHJlYWR5IGNoYW5nZWQgdmFsdWUsIGFzIG9wcG9zZWQgdG8gYSByZXF1ZXN0XG4gICAgICogICB0byBzZXQgYW5kIG5vdGlmeSB0aGUgY2hhbmdlLiAgSW4gdGhlIGxhdHRlciBgZmFsc2VgIGNhc2UsIGEgZGlydHlcbiAgICAgKiAgIGNoZWNrIGlzIHBlcmZvcm1lZCBhbmQgdGhlbiB0aGUgdmFsdWUgaXMgc2V0IHRvIHRoZSBwYXRoIGJlZm9yZVxuICAgICAqICAgZW5xdWV1aW5nIHRoZSBwZW5kaW5nIHByb3BlcnR5IGNoYW5nZS5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIHByb3BlcnR5L3BhdGggd2FzIGVucXVldWVkIGluXG4gICAgICogICB0aGUgcGVuZGluZyBjaGFuZ2VzIGJhZy5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX3NldFBlbmRpbmdQcm9wZXJ0eU9yUGF0aChwYXRoLCB2YWx1ZSwgc2hvdWxkTm90aWZ5LCBpc1BhdGhOb3RpZmljYXRpb24pIHtcbiAgICAgIGlmIChpc1BhdGhOb3RpZmljYXRpb24gfHxcbiAgICAgICAgICByb290KEFycmF5LmlzQXJyYXkocGF0aCkgPyBwYXRoWzBdIDogcGF0aCkgIT09IHBhdGgpIHtcbiAgICAgICAgLy8gRGlydHkgY2hlY2sgY2hhbmdlcyBiZWluZyBzZXQgdG8gYSBwYXRoIGFnYWluc3QgdGhlIGFjdHVhbCBvYmplY3QsXG4gICAgICAgIC8vIHNpbmNlIHRoaXMgaXMgdGhlIGVudHJ5IHBvaW50IGZvciBwYXRocyBpbnRvIHRoZSBzeXN0ZW07IGZyb20gaGVyZVxuICAgICAgICAvLyB0aGUgb25seSBkaXJ0eSBjaGVja3MgYXJlIGFnYWluc3QgdGhlIGBfX2RhdGFUZW1wYCBjYWNoZSB0byBwcmV2ZW50XG4gICAgICAgIC8vIGR1cGxpY2F0ZSB3b3JrIGluIHRoZSBzYW1lIHR1cm4gb25seS4gTm90ZSwgaWYgdGhpcyB3YXMgYSBub3RpZmljYXRpb25cbiAgICAgICAgLy8gb2YgYSBjaGFuZ2UgYWxyZWFkeSBzZXQgdG8gYSBwYXRoIChpc1BhdGhOb3RpZmljYXRpb246IHRydWUpLFxuICAgICAgICAvLyB3ZSBhbHdheXMgbGV0IHRoZSBjaGFuZ2UgdGhyb3VnaCBhbmQgc2tpcCB0aGUgYHNldGAgc2luY2UgaXQgd2FzXG4gICAgICAgIC8vIGFscmVhZHkgZGlydHkgY2hlY2tlZCBhdCB0aGUgcG9pbnQgb2YgZW50cnkgYW5kIHRoZSB1bmRlcmx5aW5nXG4gICAgICAgIC8vIG9iamVjdCBoYXMgYWxyZWFkeSBiZWVuIHVwZGF0ZWRcbiAgICAgICAgaWYgKCFpc1BhdGhOb3RpZmljYXRpb24pIHtcbiAgICAgICAgICBsZXQgb2xkID0gZ2V0KHRoaXMsIHBhdGgpO1xuICAgICAgICAgIHBhdGggPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHNldCh0aGlzLCBwYXRoLCB2YWx1ZSkpO1xuICAgICAgICAgIC8vIFVzZSBwcm9wZXJ0eS1hY2Nlc3NvcidzIHNpbXBsZXIgZGlydHkgY2hlY2tcbiAgICAgICAgICBpZiAoIXBhdGggfHwgIXN1cGVyLl9zaG91bGRQcm9wZXJ0eUNoYW5nZShwYXRoLCB2YWx1ZSwgb2xkKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9fZGF0YUhhc1BhdGhzID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuX3NldFBlbmRpbmdQcm9wZXJ0eSgvKipAdHlwZXtzdHJpbmd9Ki8ocGF0aCksIHZhbHVlLCBzaG91bGROb3RpZnkpKSB7XG4gICAgICAgICAgY29tcHV0ZUxpbmtlZFBhdGhzKHRoaXMsIC8qKkB0eXBle3N0cmluZ30qLyAocGF0aCksIHZhbHVlKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMuX19kYXRhSGFzQWNjZXNzb3IgJiYgdGhpcy5fX2RhdGFIYXNBY2Nlc3NvcltwYXRoXSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9zZXRQZW5kaW5nUHJvcGVydHkoLyoqQHR5cGV7c3RyaW5nfSovKHBhdGgpLCB2YWx1ZSwgc2hvdWxkTm90aWZ5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzW3BhdGhdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIGEgdmFsdWUgdG8gYSBub24tUG9seW1lciBlbGVtZW50L25vZGUncyBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIFRoZSBpbXBsZW1lbnRhdGlvbiBtYWtlcyBhIGJlc3QtZWZmb3J0IGF0IGJpbmRpbmcgaW50ZXJvcDpcbiAgICAgKiBTb21lIG5hdGl2ZSBlbGVtZW50IHByb3BlcnRpZXMgaGF2ZSBzaWRlLWVmZmVjdHMgd2hlblxuICAgICAqIHJlLXNldHRpbmcgdGhlIHNhbWUgdmFsdWUgKGUuZy4gc2V0dGluZyBgPGlucHV0Pi52YWx1ZWAgcmVzZXRzIHRoZVxuICAgICAqIGN1cnNvciBwb3NpdGlvbiksIHNvIHdlIGRvIGEgZGlydHktY2hlY2sgYmVmb3JlIHNldHRpbmcgdGhlIHZhbHVlLlxuICAgICAqIEhvd2V2ZXIsIGZvciBiZXR0ZXIgaW50ZXJvcCB3aXRoIG5vbi1Qb2x5bWVyIGN1c3RvbSBlbGVtZW50cyB0aGF0XG4gICAgICogYWNjZXB0IG9iamVjdHMsIHdlIGV4cGxpY2l0bHkgcmUtc2V0IG9iamVjdCBjaGFuZ2VzIGNvbWluZyBmcm9tIHRoZVxuICAgICAqIFBvbHltZXIgd29ybGQgKHdoaWNoIG1heSBpbmNsdWRlIGRlZXAgb2JqZWN0IGNoYW5nZXMgd2l0aG91dCB0aGVcbiAgICAgKiB0b3AgcmVmZXJlbmNlIGNoYW5naW5nKSwgZXJyaW5nIG9uIHRoZSBzaWRlIG9mIHByb3ZpZGluZyBtb3JlXG4gICAgICogaW5mb3JtYXRpb24uXG4gICAgICpcbiAgICAgKiBVc2VycyBtYXkgb3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gcHJvdmlkZSBhbHRlcm5hdGUgYXBwcm9hY2hlcy5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7IU5vZGV9IG5vZGUgVGhlIG5vZGUgdG8gc2V0IGEgcHJvcGVydHkgb25cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcCBUaGUgcHJvcGVydHkgdG8gc2V0XG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0XG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX3NldFVubWFuYWdlZFByb3BlcnR5VG9Ob2RlKG5vZGUsIHByb3AsIHZhbHVlKSB7XG4gICAgICAvLyBJdCBpcyBhIGp1ZGdtZW50IGNhbGwgdGhhdCByZXNldHRpbmcgcHJpbWl0aXZlcyBpc1xuICAgICAgLy8gXCJiYWRcIiBhbmQgcmVzZXR0aW5ncyBvYmplY3RzIGlzIGFsc28gXCJnb29kXCI7IGFsdGVybmF0aXZlbHkgd2UgY291bGRcbiAgICAgIC8vIGltcGxlbWVudCBhIHdoaXRlbGlzdCBvZiB0YWcgJiBwcm9wZXJ0eSB2YWx1ZXMgdGhhdCBzaG91bGQgbmV2ZXJcbiAgICAgIC8vIGJlIHJlc2V0IChlLmcuIDxpbnB1dD4udmFsdWUgJiYgPHNlbGVjdD4udmFsdWUpXG4gICAgICBpZiAodmFsdWUgIT09IG5vZGVbcHJvcF0gfHwgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgICAgIC8vIE5vdGUsIGNsYXNzTmFtZSBuZWVkcyBzdHlsZSBzY29waW5nIHNvIHRoaXMgbmVlZHMgd3JhcHBpbmcuXG4gICAgICAgIGlmIChwcm9wID09PSAnY2xhc3NOYW1lJykge1xuICAgICAgICAgIG5vZGUgPSAvKiogQHR5cGUgeyFOb2RlfSAqLyh3cmFwKG5vZGUpKTtcbiAgICAgICAgfVxuICAgICAgICBub2RlW3Byb3BdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGVzIHRoZSBgUHJvcGVydGllc0NoYW5nZWRgIGltcGxlbWVudGF0aW9uIHRvIGludHJvZHVjZSBzcGVjaWFsXG4gICAgICogZGlydHkgY2hlY2sgbG9naWMgZGVwZW5kaW5nIG9uIHRoZSBwcm9wZXJ0eSAmIHZhbHVlIGJlaW5nIHNldDpcbiAgICAgKlxuICAgICAqIDEuIEFueSB2YWx1ZSBzZXQgdG8gYSBwYXRoIChlLmcuICdvYmoucHJvcCc6IDQyIG9yICdvYmoucHJvcCc6IHsuLi59KVxuICAgICAqICAgIFN0b3JlZCBpbiBgX19kYXRhVGVtcGAsIGRpcnR5IGNoZWNrZWQgYWdhaW5zdCBgX19kYXRhVGVtcGBcbiAgICAgKiAyLiBPYmplY3Qgc2V0IHRvIHNpbXBsZSBwcm9wZXJ0eSAoZS5nLiAncHJvcCc6IHsuLi59KVxuICAgICAqICAgIFN0b3JlZCBpbiBgX19kYXRhVGVtcGAgYW5kIGBfX2RhdGFgLCBkaXJ0eSBjaGVja2VkIGFnYWluc3RcbiAgICAgKiAgICBgX19kYXRhVGVtcGAgYnkgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiBgX3Nob3VsZFByb3BlcnR5Q2hhbmdlYFxuICAgICAqIDMuIFByaW1pdGl2ZSB2YWx1ZSBzZXQgdG8gc2ltcGxlIHByb3BlcnR5IChlLmcuICdwcm9wJzogNDIpXG4gICAgICogICAgU3RvcmVkIGluIGBfX2RhdGFgLCBkaXJ0eSBjaGVja2VkIGFnYWluc3QgYF9fZGF0YWBcbiAgICAgKlxuICAgICAqIFRoZSBkaXJ0eS1jaGVjayBpcyBpbXBvcnRhbnQgdG8gcHJldmVudCBjeWNsZXMgZHVlIHRvIHR3by13YXlcbiAgICAgKiBub3RpZmljYXRpb24sIGJ1dCBwYXRocyBhbmQgb2JqZWN0cyBhcmUgb25seSBkaXJ0eSBjaGVja2VkIGFnYWluc3QgYW55XG4gICAgICogcHJldmlvdXMgdmFsdWUgc2V0IGR1cmluZyB0aGlzIHR1cm4gdmlhIGEgXCJ0ZW1wb3JhcnkgY2FjaGVcIiB0aGF0IGlzXG4gICAgICogY2xlYXJlZCB3aGVuIHRoZSBsYXN0IGBfcHJvcGVydGllc0NoYW5nZWRgIGV4aXRzLiBUaGlzIGlzIHNvOlxuICAgICAqIGEuIGFueSBjYWNoZWQgYXJyYXkgcGF0aHMgKGUuZy4gJ2FycmF5LjMucHJvcCcpIG1heSBiZSBpbnZhbGlkYXRlZFxuICAgICAqICAgIGR1ZSB0byBhcnJheSBtdXRhdGlvbnMgbGlrZSBzaGlmdC91bnNoaWZ0L3NwbGljZTsgdGhpcyBpcyBmaW5lXG4gICAgICogICAgc2luY2UgcGF0aCBjaGFuZ2VzIGFyZSBkaXJ0eS1jaGVja2VkIGF0IHVzZXIgZW50cnkgcG9pbnRzIGxpa2UgYHNldGBcbiAgICAgKiBiLiBkaXJ0eS1jaGVja2luZyBmb3Igb2JqZWN0cyBvbmx5IGxhc3RzIG9uZSB0dXJuIHRvIGFsbG93IHRoZSB1c2VyXG4gICAgICogICAgdG8gbXV0YXRlIHRoZSBvYmplY3QgaW4tcGxhY2UgYW5kIHJlLXNldCBpdCB3aXRoIHRoZSBzYW1lIGlkZW50aXR5XG4gICAgICogICAgYW5kIGhhdmUgYWxsIHN1Yi1wcm9wZXJ0aWVzIHJlLXByb3BhZ2F0ZWQgaW4gYSBzdWJzZXF1ZW50IHR1cm4uXG4gICAgICpcbiAgICAgKiBUaGUgdGVtcCBjYWNoZSBpcyBub3QgbmVjZXNzYXJpbHkgc3VmZmljaWVudCB0byBwcmV2ZW50IGludmFsaWQgYXJyYXlcbiAgICAgKiBwYXRocywgc2luY2UgYSBzcGxpY2UgY2FuIGhhcHBlbiBkdXJpbmcgdGhlIHNhbWUgdHVybiAod2l0aCBwYXRob2xvZ2ljYWxcbiAgICAgKiB1c2VyIGNvZGUpOyB3ZSBjb3VsZCBpbnRyb2R1Y2UgYSBcImZpeHVwXCIgZm9yIHRlbXBvcmFyaWx5IGNhY2hlZCBhcnJheVxuICAgICAqIHBhdGhzIGlmIG5lZWRlZDogaHR0cHM6Ly9naXRodWIuY29tL1BvbHltZXIvcG9seW1lci9pc3N1ZXMvNDIyN1xuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgdGhlIHByb3BlcnR5XG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSB0byBzZXRcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBzaG91bGROb3RpZnkgVHJ1ZSBpZiBwcm9wZXJ0eSBzaG91bGQgZmlyZSBub3RpZmljYXRpb25cbiAgICAgKiAgIGV2ZW50IChhcHBsaWVzIG9ubHkgZm9yIGBub3RpZnk6IHRydWVgIHByb3BlcnRpZXMpXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIHRoZSBwcm9wZXJ0eSBjaGFuZ2VkXG4gICAgICovXG4gICAgX3NldFBlbmRpbmdQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUsIHNob3VsZE5vdGlmeSkge1xuICAgICAgbGV0IHByb3BJc1BhdGggPSB0aGlzLl9fZGF0YUhhc1BhdGhzICYmIGlzUGF0aChwcm9wZXJ0eSk7XG4gICAgICBsZXQgcHJldlByb3BzID0gcHJvcElzUGF0aCA/IHRoaXMuX19kYXRhVGVtcCA6IHRoaXMuX19kYXRhO1xuICAgICAgaWYgKHRoaXMuX3Nob3VsZFByb3BlcnR5Q2hhbmdlKHByb3BlcnR5LCB2YWx1ZSwgcHJldlByb3BzW3Byb3BlcnR5XSkpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9fZGF0YVBlbmRpbmcpIHtcbiAgICAgICAgICB0aGlzLl9fZGF0YVBlbmRpbmcgPSB7fTtcbiAgICAgICAgICB0aGlzLl9fZGF0YU9sZCA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuc3VyZSBvbGQgaXMgY2FwdHVyZWQgZnJvbSB0aGUgbGFzdCB0dXJuXG4gICAgICAgIGlmICghKHByb3BlcnR5IGluIHRoaXMuX19kYXRhT2xkKSkge1xuICAgICAgICAgIHRoaXMuX19kYXRhT2xkW3Byb3BlcnR5XSA9IHRoaXMuX19kYXRhW3Byb3BlcnR5XTtcbiAgICAgICAgfVxuICAgICAgICAvLyBQYXRocyBhcmUgc3RvcmVkIGluIHRlbXBvcmFyeSBjYWNoZSAoY2xlYXJlZCBhdCBlbmQgb2YgdHVybiksXG4gICAgICAgIC8vIHdoaWNoIGlzIHVzZWQgZm9yIGRpcnR5LWNoZWNraW5nLCBhbGwgb3RoZXJzIHN0b3JlZCBpbiBfX2RhdGFcbiAgICAgICAgaWYgKHByb3BJc1BhdGgpIHtcbiAgICAgICAgICB0aGlzLl9fZGF0YVRlbXBbcHJvcGVydHldID0gdmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fX2RhdGFbcHJvcGVydHldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWxsIGNoYW5nZXMgZ28gaW50byBwZW5kaW5nIHByb3BlcnR5IGJhZywgcGFzc2VkIHRvIF9wcm9wZXJ0aWVzQ2hhbmdlZFxuICAgICAgICB0aGlzLl9fZGF0YVBlbmRpbmdbcHJvcGVydHldID0gdmFsdWU7XG4gICAgICAgIC8vIFRyYWNrIHByb3BlcnRpZXMgdGhhdCBzaG91bGQgbm90aWZ5IHNlcGFyYXRlbHlcbiAgICAgICAgaWYgKHByb3BJc1BhdGggfHwgKHRoaXNbVFlQRVMuTk9USUZZXSAmJiB0aGlzW1RZUEVTLk5PVElGWV1bcHJvcGVydHldKSkge1xuICAgICAgICAgIHRoaXMuX19kYXRhVG9Ob3RpZnkgPSB0aGlzLl9fZGF0YVRvTm90aWZ5IHx8IHt9O1xuICAgICAgICAgIHRoaXMuX19kYXRhVG9Ob3RpZnlbcHJvcGVydHldID0gc2hvdWxkTm90aWZ5O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlcyBiYXNlIGltcGxlbWVudGF0aW9uIHRvIGVuc3VyZSBhbGwgYWNjZXNzb3JzIHNldCBgc2hvdWxkTm90aWZ5YFxuICAgICAqIHRvIHRydWUsIGZvciBwZXItcHJvcGVydHkgbm90aWZpY2F0aW9uIHRyYWNraW5nLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgdGhlIHByb3BlcnR5XG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSB0byBzZXRcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIF9zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLl9zZXRQZW5kaW5nUHJvcGVydHkocHJvcGVydHksIHZhbHVlLCB0cnVlKSkge1xuICAgICAgICB0aGlzLl9pbnZhbGlkYXRlUHJvcGVydGllcygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlcyBgUHJvcGVydHlBY2Nlc3NvcmAncyBkZWZhdWx0IGFzeW5jIHF1ZXVpbmcgb2ZcbiAgICAgKiBgX3Byb3BlcnRpZXNDaGFuZ2VkYDogaWYgYF9fZGF0YVJlYWR5YCBpcyBmYWxzZSAoaGFzIG5vdCB5ZXQgYmVlblxuICAgICAqIG1hbnVhbGx5IGZsdXNoZWQpLCB0aGUgZnVuY3Rpb24gbm8tb3BzOyBvdGhlcndpc2UgZmx1c2hlc1xuICAgICAqIGBfcHJvcGVydGllc0NoYW5nZWRgIHN5bmNocm9ub3VzbHkuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIF9pbnZhbGlkYXRlUHJvcGVydGllcygpIHtcbiAgICAgIGlmICh0aGlzLl9fZGF0YVJlYWR5KSB7XG4gICAgICAgIHRoaXMuX2ZsdXNoUHJvcGVydGllcygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVucXVldWVzIHRoZSBnaXZlbiBjbGllbnQgb24gYSBsaXN0IG9mIHBlbmRpbmcgY2xpZW50cywgd2hvc2VcbiAgICAgKiBwZW5kaW5nIHByb3BlcnR5IGNoYW5nZXMgY2FuIGxhdGVyIGJlIGZsdXNoZWQgdmlhIGEgY2FsbCB0b1xuICAgICAqIGBfZmx1c2hDbGllbnRzYC5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjbGllbnQgUHJvcGVydHlFZmZlY3RzIGNsaWVudCB0byBlbnF1ZXVlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2VucXVldWVDbGllbnQoY2xpZW50KSB7XG4gICAgICB0aGlzLl9fZGF0YVBlbmRpbmdDbGllbnRzID0gdGhpcy5fX2RhdGFQZW5kaW5nQ2xpZW50cyB8fCBbXTtcbiAgICAgIGlmIChjbGllbnQgIT09IHRoaXMpIHtcbiAgICAgICAgdGhpcy5fX2RhdGFQZW5kaW5nQ2xpZW50cy5wdXNoKGNsaWVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGVzIHN1cGVyY2xhc3MgaW1wbGVtZW50YXRpb24uXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfZmx1c2hQcm9wZXJ0aWVzKCkge1xuICAgICAgdGhpcy5fX2RhdGFDb3VudGVyKys7XG4gICAgICBzdXBlci5fZmx1c2hQcm9wZXJ0aWVzKCk7XG4gICAgICB0aGlzLl9fZGF0YUNvdW50ZXItLTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGbHVzaGVzIGFueSBjbGllbnRzIHByZXZpb3VzbHkgZW5xdWV1ZWQgdmlhIGBfZW5xdWV1ZUNsaWVudGAsIGNhdXNpbmdcbiAgICAgKiB0aGVpciBgX2ZsdXNoUHJvcGVydGllc2AgbWV0aG9kIHRvIHJ1bi5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9mbHVzaENsaWVudHMoKSB7XG4gICAgICBpZiAoIXRoaXMuX19kYXRhQ2xpZW50c1JlYWR5KSB7XG4gICAgICAgIHRoaXMuX19kYXRhQ2xpZW50c1JlYWR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcmVhZHlDbGllbnRzKCk7XG4gICAgICAgIC8vIE92ZXJyaWRlIHBvaW50IHdoZXJlIGFjY2Vzc29ycyBhcmUgdHVybmVkIG9uOyBpbXBvcnRhbnRseSxcbiAgICAgICAgLy8gdGhpcyBpcyBhZnRlciBjbGllbnRzIGhhdmUgZnVsbHkgcmVhZGllZCwgcHJvdmlkaW5nIGEgZ3VhcmFudGVlXG4gICAgICAgIC8vIHRoYXQgYW55IHByb3BlcnR5IGVmZmVjdHMgb2NjdXIgb25seSBhZnRlciBhbGwgY2xpZW50cyBhcmUgcmVhZHkuXG4gICAgICAgIHRoaXMuX19kYXRhUmVhZHkgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fX2VuYWJsZU9yRmx1c2hDbGllbnRzKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTk9URTogV2UgZW5zdXJlIGNsaWVudHMgZWl0aGVyIGVuYWJsZSBvciBmbHVzaCBhcyBhcHByb3ByaWF0ZS4gVGhpc1xuICAgIC8vIGhhbmRsZXMgdHdvIGNvcm5lciBjYXNlczpcbiAgICAvLyAoMSkgY2xpZW50cyBmbHVzaCBwcm9wZXJseSB3aGVuIGNvbm5lY3RlZC9lbmFibGVkIGJlZm9yZSB0aGUgaG9zdFxuICAgIC8vIGVuYWJsZXM7IGUuZy5cbiAgICAvLyAgIChhKSBUZW1wbGF0aXplIHN0YW1wcyB3aXRoIG5vIHByb3BlcnRpZXMgYW5kIGRvZXMgbm90IGZsdXNoIGFuZFxuICAgIC8vICAgKGIpIHRoZSBpbnN0YW5jZSBpcyBpbnNlcnRlZCBpbnRvIGRvbSBhbmRcbiAgICAvLyAgIChjKSB0aGVuIHRoZSBpbnN0YW5jZSBmbHVzaGVzLlxuICAgIC8vICgyKSBjbGllbnRzIGVuYWJsZSBwcm9wZXJseSB3aGVuIG5vdCBjb25uZWN0ZWQvZW5hYmxlZCB3aGVuIHRoZSBob3N0XG4gICAgLy8gZmx1c2hlczsgZS5nLlxuICAgIC8vICAgKGEpIGEgdGVtcGxhdGUgaXMgcnVudGltZSBzdGFtcGVkIGFuZCBub3QgeWV0IGNvbm5lY3RlZC9lbmFibGVkXG4gICAgLy8gICAoYikgYSBob3N0IHNldHMgYSBwcm9wZXJ0eSwgY2F1c2luZyBzdGFtcGVkIGRvbSB0byBmbHVzaFxuICAgIC8vICAgKGMpIHRoZSBzdGFtcGVkIGRvbSBlbmFibGVzLlxuICAgIF9fZW5hYmxlT3JGbHVzaENsaWVudHMoKSB7XG4gICAgICBsZXQgY2xpZW50cyA9IHRoaXMuX19kYXRhUGVuZGluZ0NsaWVudHM7XG4gICAgICBpZiAoY2xpZW50cykge1xuICAgICAgICB0aGlzLl9fZGF0YVBlbmRpbmdDbGllbnRzID0gbnVsbDtcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpIDwgY2xpZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGxldCBjbGllbnQgPSBjbGllbnRzW2ldO1xuICAgICAgICAgIGlmICghY2xpZW50Ll9fZGF0YUVuYWJsZWQpIHtcbiAgICAgICAgICAgIGNsaWVudC5fZW5hYmxlUHJvcGVydGllcygpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2xpZW50Ll9fZGF0YVBlbmRpbmcpIHtcbiAgICAgICAgICAgIGNsaWVudC5fZmx1c2hQcm9wZXJ0aWVzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybSBhbnkgaW5pdGlhbCBzZXR1cCBvbiBjbGllbnQgZG9tLiBDYWxsZWQgYmVmb3JlIHRoZSBmaXJzdFxuICAgICAqIGBfZmx1c2hQcm9wZXJ0aWVzYCBjYWxsIG9uIGNsaWVudCBkb20gYW5kIGJlZm9yZSBhbnkgZWxlbWVudFxuICAgICAqIG9ic2VydmVycyBhcmUgY2FsbGVkLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX3JlYWR5Q2xpZW50cygpIHtcbiAgICAgIHRoaXMuX19lbmFibGVPckZsdXNoQ2xpZW50cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgYSBiYWcgb2YgcHJvcGVydHkgY2hhbmdlcyB0byB0aGlzIGluc3RhbmNlLCBhbmRcbiAgICAgKiBzeW5jaHJvbm91c2x5IHByb2Nlc3NlcyBhbGwgZWZmZWN0cyBvZiB0aGUgcHJvcGVydGllcyBhcyBhIGJhdGNoLlxuICAgICAqXG4gICAgICogUHJvcGVydHkgbmFtZXMgbXVzdCBiZSBzaW1wbGUgcHJvcGVydGllcywgbm90IHBhdGhzLiAgQmF0Y2hlZFxuICAgICAqIHBhdGggcHJvcGFnYXRpb24gaXMgbm90IHN1cHBvcnRlZC5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2Ygb25lIG9yIG1vcmUga2V5LXZhbHVlIHBhaXJzIHdob3NlIGtleSBpc1xuICAgICAqICAgYSBwcm9wZXJ0eSBhbmQgdmFsdWUgaXMgdGhlIG5ldyB2YWx1ZSB0byBzZXQgZm9yIHRoYXQgcHJvcGVydHkuXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gc2V0UmVhZE9ubHkgV2hlbiB0cnVlLCBhbnkgcHJpdmF0ZSB2YWx1ZXMgc2V0IGluXG4gICAgICogICBgcHJvcHNgIHdpbGwgYmUgc2V0LiBCeSBkZWZhdWx0LCBgc2V0UHJvcGVydGllc2Agd2lsbCBub3Qgc2V0XG4gICAgICogICBgcmVhZE9ubHk6IHRydWVgIHJvb3QgcHJvcGVydGllcy5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBzZXRQcm9wZXJ0aWVzKHByb3BzLCBzZXRSZWFkT25seSkge1xuICAgICAgZm9yIChsZXQgcGF0aCBpbiBwcm9wcykge1xuICAgICAgICBpZiAoc2V0UmVhZE9ubHkgfHwgIXRoaXNbVFlQRVMuUkVBRF9PTkxZXSB8fCAhdGhpc1tUWVBFUy5SRUFEX09OTFldW3BhdGhdKSB7XG4gICAgICAgICAgLy9UT0RPKGtzY2hhYWYpOiBleHBsaWNpdGx5IGRpc2FsbG93IHBhdGhzIGluIHNldFByb3BlcnR5P1xuICAgICAgICAgIC8vIHdpbGRjYXJkIG9ic2VydmVycyBjdXJyZW50bHkgb25seSBwYXNzIHRoZSBmaXJzdCBjaGFuZ2VkIHBhdGhcbiAgICAgICAgICAvLyBpbiB0aGUgYGluZm9gIG9iamVjdCwgYW5kIHlvdSBjb3VsZCBkbyBzb21lIG9kZCB0aGluZ3MgYmF0Y2hpbmdcbiAgICAgICAgICAvLyBwYXRocywgZS5nLiB7J2Zvby5iYXInOiB7Li4ufSwgJ2Zvbyc6IG51bGx9XG4gICAgICAgICAgdGhpcy5fc2V0UGVuZGluZ1Byb3BlcnR5T3JQYXRoKHBhdGgsIHByb3BzW3BhdGhdLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5faW52YWxpZGF0ZVByb3BlcnRpZXMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgYFByb3BlcnR5QWNjZXNzb3JzYCBzbyB0aGF0IHByb3BlcnR5IGFjY2Vzc29yXG4gICAgICogc2lkZSBlZmZlY3RzIGFyZSBub3QgZW5hYmxlZCB1bnRpbCBhZnRlciBjbGllbnQgZG9tIGlzIGZ1bGx5IHJlYWR5LlxuICAgICAqIEFsc28gY2FsbHMgYF9mbHVzaENsaWVudHNgIGNhbGxiYWNrIHRvIGVuc3VyZSBjbGllbnQgZG9tIGlzIGVuYWJsZWRcbiAgICAgKiB0aGF0IHdhcyBub3QgZW5hYmxlZCBhcyBhIHJlc3VsdCBvZiBmbHVzaGluZyBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICByZWFkeSgpIHtcbiAgICAgIC8vIEl0IGlzIGltcG9ydGFudCB0aGF0IGBzdXBlci5yZWFkeSgpYCBpcyBub3QgY2FsbGVkIGhlcmUgYXMgaXRcbiAgICAgIC8vIGltbWVkaWF0ZWx5IHR1cm5zIG9uIGFjY2Vzc29ycy4gSW5zdGVhZCwgd2Ugd2FpdCB1bnRpbCBgcmVhZHlDbGllbnRzYFxuICAgICAgLy8gdG8gZW5hYmxlIGFjY2Vzc29ycyB0byBwcm92aWRlIGEgZ3VhcmFudGVlIHRoYXQgY2xpZW50cyBhcmUgcmVhZHlcbiAgICAgIC8vIGJlZm9yZSBwcm9jZXNzaW5nIGFueSBhY2Nlc3NvcnMgc2lkZSBlZmZlY3RzLlxuICAgICAgdGhpcy5fZmx1c2hQcm9wZXJ0aWVzKCk7XG4gICAgICAvLyBJZiBubyBkYXRhIHdhcyBwZW5kaW5nLCBgX2ZsdXNoUHJvcGVydGllc2Agd2lsbCBub3QgYGZsdXNoQ2xpZW50c2BcbiAgICAgIC8vIHNvIGVuc3VyZSB0aGlzIGlzIGRvbmUuXG4gICAgICBpZiAoIXRoaXMuX19kYXRhQ2xpZW50c1JlYWR5KSB7XG4gICAgICAgIHRoaXMuX2ZsdXNoQ2xpZW50cygpO1xuICAgICAgfVxuICAgICAgLy8gQmVmb3JlIHJlYWR5LCBjbGllbnQgbm90aWZpY2F0aW9ucyBkbyBub3QgdHJpZ2dlciBfZmx1c2hQcm9wZXJ0aWVzLlxuICAgICAgLy8gVGhlcmVmb3JlIGEgZmx1c2ggaXMgbmVjZXNzYXJ5IGhlcmUgaWYgZGF0YSBoYXMgYmVlbiBzZXQuXG4gICAgICBpZiAodGhpcy5fX2RhdGFQZW5kaW5nKSB7XG4gICAgICAgIHRoaXMuX2ZsdXNoUHJvcGVydGllcygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEltcGxlbWVudHMgYFByb3BlcnR5QWNjZXNzb3JzYCdzIHByb3BlcnRpZXMgY2hhbmdlZCBjYWxsYmFjay5cbiAgICAgKlxuICAgICAqIFJ1bnMgZWFjaCBjbGFzcyBvZiBlZmZlY3RzIGZvciB0aGUgYmF0Y2ggb2YgY2hhbmdlZCBwcm9wZXJ0aWVzIGluXG4gICAgICogYSBzcGVjaWZpYyBvcmRlciAoY29tcHV0ZSwgcHJvcGFnYXRlLCByZWZsZWN0LCBvYnNlcnZlLCBub3RpZnkpLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHshT2JqZWN0fSBjdXJyZW50UHJvcHMgQmFnIG9mIGFsbCBjdXJyZW50IGFjY2Vzc29yIHZhbHVlc1xuICAgICAqIEBwYXJhbSB7P09iamVjdH0gY2hhbmdlZFByb3BzIEJhZyBvZiBwcm9wZXJ0aWVzIGNoYW5nZWQgc2luY2UgdGhlIGxhc3RcbiAgICAgKiAgIGNhbGwgdG8gYF9wcm9wZXJ0aWVzQ2hhbmdlZGBcbiAgICAgKiBAcGFyYW0gez9PYmplY3R9IG9sZFByb3BzIEJhZyBvZiBwcmV2aW91cyB2YWx1ZXMgZm9yIGVhY2ggcHJvcGVydHlcbiAgICAgKiAgIGluIGBjaGFuZ2VkUHJvcHNgXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBfcHJvcGVydGllc0NoYW5nZWQoY3VycmVudFByb3BzLCBjaGFuZ2VkUHJvcHMsIG9sZFByb3BzKSB7XG4gICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAvLyBsZXQgYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGNoYW5nZWRQcm9wcyB8fCB7fSk7XG4gICAgICAvLyB3aW5kb3cuZGVidWcgJiYgY29uc29sZS5ncm91cCh0aGlzLmxvY2FsTmFtZSArICcjJyArIHRoaXMuaWQgKyAnOiAnICsgYyk7XG4gICAgICAvLyBpZiAod2luZG93LmRlYnVnKSB7IGRlYnVnZ2VyOyB9XG4gICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICBsZXQgaGFzUGF0aHMgPSB0aGlzLl9fZGF0YUhhc1BhdGhzO1xuICAgICAgdGhpcy5fX2RhdGFIYXNQYXRocyA9IGZhbHNlO1xuICAgICAgLy8gQ29tcHV0ZSBwcm9wZXJ0aWVzXG4gICAgICBydW5Db21wdXRlZEVmZmVjdHModGhpcywgY2hhbmdlZFByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpO1xuICAgICAgLy8gQ2xlYXIgbm90aWZ5IHByb3BlcnRpZXMgcHJpb3IgdG8gcG9zc2libGUgcmVlbnRyeSAocHJvcGFnYXRlLCBvYnNlcnZlKSxcbiAgICAgIC8vIGJ1dCBhZnRlciBjb21wdXRpbmcgZWZmZWN0cyBoYXZlIGEgY2hhbmNlIHRvIGFkZCB0byB0aGVtXG4gICAgICBsZXQgbm90aWZ5UHJvcHMgPSB0aGlzLl9fZGF0YVRvTm90aWZ5O1xuICAgICAgdGhpcy5fX2RhdGFUb05vdGlmeSA9IG51bGw7XG4gICAgICAvLyBQcm9wYWdhdGUgcHJvcGVydGllcyB0byBjbGllbnRzXG4gICAgICB0aGlzLl9wcm9wYWdhdGVQcm9wZXJ0eUNoYW5nZXMoY2hhbmdlZFByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpO1xuICAgICAgLy8gRmx1c2ggY2xpZW50c1xuICAgICAgdGhpcy5fZmx1c2hDbGllbnRzKCk7XG4gICAgICAvLyBSZWZsZWN0IHByb3BlcnRpZXNcbiAgICAgIHJ1bkVmZmVjdHModGhpcywgdGhpc1tUWVBFUy5SRUZMRUNUXSwgY2hhbmdlZFByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpO1xuICAgICAgLy8gT2JzZXJ2ZSBwcm9wZXJ0aWVzXG4gICAgICBydW5FZmZlY3RzKHRoaXMsIHRoaXNbVFlQRVMuT0JTRVJWRV0sIGNoYW5nZWRQcm9wcywgb2xkUHJvcHMsIGhhc1BhdGhzKTtcbiAgICAgIC8vIE5vdGlmeSBwcm9wZXJ0aWVzIHRvIGhvc3RcbiAgICAgIGlmIChub3RpZnlQcm9wcykge1xuICAgICAgICBydW5Ob3RpZnlFZmZlY3RzKHRoaXMsIG5vdGlmeVByb3BzLCBjaGFuZ2VkUHJvcHMsIG9sZFByb3BzLCBoYXNQYXRocyk7XG4gICAgICB9XG4gICAgICAvLyBDbGVhciB0ZW1wb3JhcnkgY2FjaGUgYXQgZW5kIG9mIHR1cm5cbiAgICAgIGlmICh0aGlzLl9fZGF0YUNvdW50ZXIgPT0gMSkge1xuICAgICAgICB0aGlzLl9fZGF0YVRlbXAgPSB7fTtcbiAgICAgIH1cbiAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgIC8vIHdpbmRvdy5kZWJ1ZyAmJiBjb25zb2xlLmdyb3VwRW5kKHRoaXMubG9jYWxOYW1lICsgJyMnICsgdGhpcy5pZCArICc6ICcgKyBjKTtcbiAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdG8gcHJvcGFnYXRlIGFueSBwcm9wZXJ0eSBjaGFuZ2VzIHRvIHN0YW1wZWQgdGVtcGxhdGUgbm9kZXNcbiAgICAgKiBtYW5hZ2VkIGJ5IHRoaXMgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjaGFuZ2VkUHJvcHMgQmFnIG9mIGNoYW5nZWQgcHJvcGVydGllc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvbGRQcm9wcyBCYWcgb2YgcHJldmlvdXMgdmFsdWVzIGZvciBjaGFuZ2VkIHByb3BlcnRpZXNcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGhhc1BhdGhzIFRydWUgd2l0aCBgcHJvcHNgIGNvbnRhaW5zIG9uZSBvciBtb3JlIHBhdGhzXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX3Byb3BhZ2F0ZVByb3BlcnR5Q2hhbmdlcyhjaGFuZ2VkUHJvcHMsIG9sZFByb3BzLCBoYXNQYXRocykge1xuICAgICAgaWYgKHRoaXNbVFlQRVMuUFJPUEFHQVRFXSkge1xuICAgICAgICBydW5FZmZlY3RzKHRoaXMsIHRoaXNbVFlQRVMuUFJPUEFHQVRFXSwgY2hhbmdlZFByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpO1xuICAgICAgfVxuICAgICAgbGV0IHRlbXBsYXRlSW5mbyA9IHRoaXMuX190ZW1wbGF0ZUluZm87XG4gICAgICB3aGlsZSAodGVtcGxhdGVJbmZvKSB7XG4gICAgICAgIHJ1bkVmZmVjdHModGhpcywgdGVtcGxhdGVJbmZvLnByb3BlcnR5RWZmZWN0cywgY2hhbmdlZFByb3BzLCBvbGRQcm9wcyxcbiAgICAgICAgICBoYXNQYXRocywgdGVtcGxhdGVJbmZvLm5vZGVMaXN0KTtcbiAgICAgICAgdGVtcGxhdGVJbmZvID0gdGVtcGxhdGVJbmZvLm5leHRUZW1wbGF0ZUluZm87XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWxpYXNlcyBvbmUgZGF0YSBwYXRoIGFzIGFub3RoZXIsIHN1Y2ggdGhhdCBwYXRoIG5vdGlmaWNhdGlvbnMgZnJvbSBvbmVcbiAgICAgKiBhcmUgcm91dGVkIHRvIHRoZSBvdGhlci5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PHN0cmluZ3xudW1iZXI+fSB0byBUYXJnZXQgcGF0aCB0byBsaW5rLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PHN0cmluZ3xudW1iZXI+fSBmcm9tIFNvdXJjZSBwYXRoIHRvIGxpbmsuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgbGlua1BhdGhzKHRvLCBmcm9tKSB7XG4gICAgICB0byA9IG5vcm1hbGl6ZSh0byk7XG4gICAgICBmcm9tID0gbm9ybWFsaXplKGZyb20pO1xuICAgICAgdGhpcy5fX2RhdGFMaW5rZWRQYXRocyA9IHRoaXMuX19kYXRhTGlua2VkUGF0aHMgfHwge307XG4gICAgICB0aGlzLl9fZGF0YUxpbmtlZFBhdGhzW3RvXSA9IGZyb207XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGRhdGEgcGF0aCBhbGlhcyBwcmV2aW91c2x5IGVzdGFibGlzaGVkIHdpdGggYF9saW5rUGF0aHNgLlxuICAgICAqXG4gICAgICogTm90ZSwgdGhlIHBhdGggdG8gdW5saW5rIHNob3VsZCBiZSB0aGUgdGFyZ2V0IChgdG9gKSB1c2VkIHdoZW5cbiAgICAgKiBsaW5raW5nIHRoZSBwYXRocy5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PHN0cmluZ3xudW1iZXI+fSBwYXRoIFRhcmdldCBwYXRoIHRvIHVubGluay5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICB1bmxpbmtQYXRocyhwYXRoKSB7XG4gICAgICBwYXRoID0gbm9ybWFsaXplKHBhdGgpO1xuICAgICAgaWYgKHRoaXMuX19kYXRhTGlua2VkUGF0aHMpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuX19kYXRhTGlua2VkUGF0aHNbcGF0aF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTm90aWZ5IHRoYXQgYW4gYXJyYXkgaGFzIGNoYW5nZWQuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqXG4gICAgICogICAgIHRoaXMuaXRlbXMgPSBbIHtuYW1lOiAnSmltJ30sIHtuYW1lOiAnVG9kZCd9LCB7bmFtZTogJ0JpbGwnfSBdO1xuICAgICAqICAgICAuLi5cbiAgICAgKiAgICAgdGhpcy5pdGVtcy5zcGxpY2UoMSwgMSwge25hbWU6ICdTYW0nfSk7XG4gICAgICogICAgIHRoaXMuaXRlbXMucHVzaCh7bmFtZTogJ0JvYid9KTtcbiAgICAgKiAgICAgdGhpcy5ub3RpZnlTcGxpY2VzKCdpdGVtcycsIFtcbiAgICAgKiAgICAgICB7IGluZGV4OiAxLCByZW1vdmVkOiBbe25hbWU6ICdUb2RkJ31dLCBhZGRlZENvdW50OiAxLFxuICAgICAqICAgICAgICAgb2JqZWN0OiB0aGlzLml0ZW1zLCB0eXBlOiAnc3BsaWNlJyB9LFxuICAgICAqICAgICAgIHsgaW5kZXg6IDMsIHJlbW92ZWQ6IFtdLCBhZGRlZENvdW50OiAxLFxuICAgICAqICAgICAgICAgb2JqZWN0OiB0aGlzLml0ZW1zLCB0eXBlOiAnc3BsaWNlJ31cbiAgICAgKiAgICAgXSk7XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIHRoYXQgc2hvdWxkIGJlIG5vdGlmaWVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNwbGljZXMgQXJyYXkgb2Ygc3BsaWNlIHJlY29yZHMgaW5kaWNhdGluZyBvcmRlcmVkXG4gICAgICogICBjaGFuZ2VzIHRoYXQgb2NjdXJyZWQgdG8gdGhlIGFycmF5LiBFYWNoIHJlY29yZCBzaG91bGQgaGF2ZSB0aGVcbiAgICAgKiAgIGZvbGxvd2luZyBmaWVsZHM6XG4gICAgICogICAgKiBpbmRleDogaW5kZXggYXQgd2hpY2ggdGhlIGNoYW5nZSBvY2N1cnJlZFxuICAgICAqICAgICogcmVtb3ZlZDogYXJyYXkgb2YgaXRlbXMgdGhhdCB3ZXJlIHJlbW92ZWQgZnJvbSB0aGlzIGluZGV4XG4gICAgICogICAgKiBhZGRlZENvdW50OiBudW1iZXIgb2YgbmV3IGl0ZW1zIGFkZGVkIGF0IHRoaXMgaW5kZXhcbiAgICAgKiAgICAqIG9iamVjdDogYSByZWZlcmVuY2UgdG8gdGhlIGFycmF5IGluIHF1ZXN0aW9uXG4gICAgICogICAgKiB0eXBlOiB0aGUgc3RyaW5nIGxpdGVyYWwgJ3NwbGljZSdcbiAgICAgKlxuICAgICAqICAgTm90ZSB0aGF0IHNwbGljZSByZWNvcmRzIF9tdXN0XyBiZSBub3JtYWxpemVkIHN1Y2ggdGhhdCB0aGV5IGFyZVxuICAgICAqICAgcmVwb3J0ZWQgaW4gaW5kZXggb3JkZXIgKHJhdyByZXN1bHRzIGZyb20gYE9iamVjdC5vYnNlcnZlYCBhcmUgbm90XG4gICAgICogICBvcmRlcmVkIGFuZCBtdXN0IGJlIG5vcm1hbGl6ZWQvbWVyZ2VkIGJlZm9yZSBub3RpZnlpbmcpLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgbm90aWZ5U3BsaWNlcyhwYXRoLCBzcGxpY2VzKSB7XG4gICAgICBsZXQgaW5mbyA9IHtwYXRoOiAnJ307XG4gICAgICBsZXQgYXJyYXkgPSAvKiogQHR5cGUge0FycmF5fSAqLyhnZXQodGhpcywgcGF0aCwgaW5mbykpO1xuICAgICAgbm90aWZ5U3BsaWNlcyh0aGlzLCBhcnJheSwgaW5mby5wYXRoLCBzcGxpY2VzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZW5pZW5jZSBtZXRob2QgZm9yIHJlYWRpbmcgYSB2YWx1ZSBmcm9tIGEgcGF0aC5cbiAgICAgKlxuICAgICAqIE5vdGUsIGlmIGFueSBwYXJ0IGluIHRoZSBwYXRoIGlzIHVuZGVmaW5lZCwgdGhpcyBtZXRob2QgcmV0dXJuc1xuICAgICAqIGB1bmRlZmluZWRgICh0aGlzIG1ldGhvZCBkb2VzIG5vdCB0aHJvdyB3aGVuIGRlcmVmZXJlbmNpbmcgdW5kZWZpbmVkXG4gICAgICogcGF0aHMpLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHsoc3RyaW5nfCFBcnJheTwoc3RyaW5nfG51bWJlcik+KX0gcGF0aCBQYXRoIHRvIHRoZSB2YWx1ZVxuICAgICAqICAgdG8gcmVhZC4gIFRoZSBwYXRoIG1heSBiZSBzcGVjaWZpZWQgYXMgYSBzdHJpbmcgKGUuZy4gYGZvby5iYXIuYmF6YClcbiAgICAgKiAgIG9yIGFuIGFycmF5IG9mIHBhdGggcGFydHMgKGUuZy4gYFsnZm9vLmJhcicsICdiYXonXWApLiAgTm90ZSB0aGF0XG4gICAgICogICBicmFja2V0ZWQgZXhwcmVzc2lvbnMgYXJlIG5vdCBzdXBwb3J0ZWQ7IHN0cmluZy1iYXNlZCBwYXRoIHBhcnRzXG4gICAgICogICAqbXVzdCogYmUgc2VwYXJhdGVkIGJ5IGRvdHMuICBOb3RlIHRoYXQgd2hlbiBkZXJlZmVyZW5jaW5nIGFycmF5XG4gICAgICogICBpbmRpY2VzLCB0aGUgaW5kZXggbWF5IGJlIHVzZWQgYXMgYSBkb3R0ZWQgcGFydCBkaXJlY3RseVxuICAgICAqICAgKGUuZy4gYHVzZXJzLjEyLm5hbWVgIG9yIGBbJ3VzZXJzJywgMTIsICduYW1lJ11gKS5cbiAgICAgKiBAcGFyYW0ge09iamVjdD19IHJvb3QgUm9vdCBvYmplY3QgZnJvbSB3aGljaCB0aGUgcGF0aCBpcyBldmFsdWF0ZWQuXG4gICAgICogQHJldHVybiB7Kn0gVmFsdWUgYXQgdGhlIHBhdGgsIG9yIGB1bmRlZmluZWRgIGlmIGFueSBwYXJ0IG9mIHRoZSBwYXRoXG4gICAgICogICBpcyB1bmRlZmluZWQuXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGdldChwYXRoLCByb290KSB7XG4gICAgICByZXR1cm4gZ2V0KHJvb3QgfHwgdGhpcywgcGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVuaWVuY2UgbWV0aG9kIGZvciBzZXR0aW5nIGEgdmFsdWUgdG8gYSBwYXRoIGFuZCBub3RpZnlpbmcgYW55XG4gICAgICogZWxlbWVudHMgYm91bmQgdG8gdGhlIHNhbWUgcGF0aC5cbiAgICAgKlxuICAgICAqIE5vdGUsIGlmIGFueSBwYXJ0IGluIHRoZSBwYXRoIGV4Y2VwdCBmb3IgdGhlIGxhc3QgaXMgdW5kZWZpbmVkLFxuICAgICAqIHRoaXMgbWV0aG9kIGRvZXMgbm90aGluZyAodGhpcyBtZXRob2QgZG9lcyBub3QgdGhyb3cgd2hlblxuICAgICAqIGRlcmVmZXJlbmNpbmcgdW5kZWZpbmVkIHBhdGhzKS5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7KHN0cmluZ3whQXJyYXk8KHN0cmluZ3xudW1iZXIpPil9IHBhdGggUGF0aCB0byB0aGUgdmFsdWVcbiAgICAgKiAgIHRvIHdyaXRlLiAgVGhlIHBhdGggbWF5IGJlIHNwZWNpZmllZCBhcyBhIHN0cmluZyAoZS5nLiBgJ2Zvby5iYXIuYmF6J2ApXG4gICAgICogICBvciBhbiBhcnJheSBvZiBwYXRoIHBhcnRzIChlLmcuIGBbJ2Zvby5iYXInLCAnYmF6J11gKS4gIE5vdGUgdGhhdFxuICAgICAqICAgYnJhY2tldGVkIGV4cHJlc3Npb25zIGFyZSBub3Qgc3VwcG9ydGVkOyBzdHJpbmctYmFzZWQgcGF0aCBwYXJ0c1xuICAgICAqICAgKm11c3QqIGJlIHNlcGFyYXRlZCBieSBkb3RzLiAgTm90ZSB0aGF0IHdoZW4gZGVyZWZlcmVuY2luZyBhcnJheVxuICAgICAqICAgaW5kaWNlcywgdGhlIGluZGV4IG1heSBiZSB1c2VkIGFzIGEgZG90dGVkIHBhcnQgZGlyZWN0bHlcbiAgICAgKiAgIChlLmcuIGAndXNlcnMuMTIubmFtZSdgIG9yIGBbJ3VzZXJzJywgMTIsICduYW1lJ11gKS5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHNldCBhdCB0aGUgc3BlY2lmaWVkIHBhdGguXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSByb290IFJvb3Qgb2JqZWN0IGZyb20gd2hpY2ggdGhlIHBhdGggaXMgZXZhbHVhdGVkLlxuICAgICAqICAgV2hlbiBzcGVjaWZpZWQsIG5vIG5vdGlmaWNhdGlvbiB3aWxsIG9jY3VyLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIHNldChwYXRoLCB2YWx1ZSwgcm9vdCkge1xuICAgICAgaWYgKHJvb3QpIHtcbiAgICAgICAgc2V0KHJvb3QsIHBhdGgsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdGhpc1tUWVBFUy5SRUFEX09OTFldIHx8ICF0aGlzW1RZUEVTLlJFQURfT05MWV1bLyoqIEB0eXBlIHtzdHJpbmd9ICovKHBhdGgpXSkge1xuICAgICAgICAgIGlmICh0aGlzLl9zZXRQZW5kaW5nUHJvcGVydHlPclBhdGgocGF0aCwgdmFsdWUsIHRydWUpKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnZhbGlkYXRlUHJvcGVydGllcygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgaXRlbXMgb250byB0aGUgZW5kIG9mIHRoZSBhcnJheSBhdCB0aGUgcGF0aCBzcGVjaWZpZWQuXG4gICAgICpcbiAgICAgKiBUaGUgYXJndW1lbnRzIGFmdGVyIGBwYXRoYCBhbmQgcmV0dXJuIHZhbHVlIG1hdGNoIHRoYXQgb2ZcbiAgICAgKiBgQXJyYXkucHJvdG90eXBlLnB1c2hgLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2Qgbm90aWZpZXMgb3RoZXIgcGF0aHMgdG8gdGhlIHNhbWUgYXJyYXkgdGhhdCBhXG4gICAgICogc3BsaWNlIG9jY3VycmVkIHRvIHRoZSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PHN0cmluZ3xudW1iZXI+fSBwYXRoIFBhdGggdG8gYXJyYXkuXG4gICAgICogQHBhcmFtIHsuLi4qfSBpdGVtcyBJdGVtcyB0byBwdXNoIG9udG8gYXJyYXlcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IE5ldyBsZW5ndGggb2YgdGhlIGFycmF5LlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBwdXNoKHBhdGgsIC4uLml0ZW1zKSB7XG4gICAgICBsZXQgaW5mbyA9IHtwYXRoOiAnJ307XG4gICAgICBsZXQgYXJyYXkgPSAvKiogQHR5cGUge0FycmF5fSovKGdldCh0aGlzLCBwYXRoLCBpbmZvKSk7XG4gICAgICBsZXQgbGVuID0gYXJyYXkubGVuZ3RoO1xuICAgICAgbGV0IHJldCA9IGFycmF5LnB1c2goLi4uaXRlbXMpO1xuICAgICAgaWYgKGl0ZW1zLmxlbmd0aCkge1xuICAgICAgICBub3RpZnlTcGxpY2UodGhpcywgYXJyYXksIGluZm8ucGF0aCwgbGVuLCBpdGVtcy5sZW5ndGgsIFtdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbiBpdGVtIGZyb20gdGhlIGVuZCBvZiBhcnJheSBhdCB0aGUgcGF0aCBzcGVjaWZpZWQuXG4gICAgICpcbiAgICAgKiBUaGUgYXJndW1lbnRzIGFmdGVyIGBwYXRoYCBhbmQgcmV0dXJuIHZhbHVlIG1hdGNoIHRoYXQgb2ZcbiAgICAgKiBgQXJyYXkucHJvdG90eXBlLnBvcGAuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBub3RpZmllcyBvdGhlciBwYXRocyB0byB0aGUgc2FtZSBhcnJheSB0aGF0IGFcbiAgICAgKiBzcGxpY2Ugb2NjdXJyZWQgdG8gdGhlIGFycmF5LlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtzdHJpbmcgfCAhQXJyYXk8c3RyaW5nfG51bWJlcj59IHBhdGggUGF0aCB0byBhcnJheS5cbiAgICAgKiBAcmV0dXJuIHsqfSBJdGVtIHRoYXQgd2FzIHJlbW92ZWQuXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIHBvcChwYXRoKSB7XG4gICAgICBsZXQgaW5mbyA9IHtwYXRoOiAnJ307XG4gICAgICBsZXQgYXJyYXkgPSAvKiogQHR5cGUge0FycmF5fSAqLyhnZXQodGhpcywgcGF0aCwgaW5mbykpO1xuICAgICAgbGV0IGhhZExlbmd0aCA9IEJvb2xlYW4oYXJyYXkubGVuZ3RoKTtcbiAgICAgIGxldCByZXQgPSBhcnJheS5wb3AoKTtcbiAgICAgIGlmIChoYWRMZW5ndGgpIHtcbiAgICAgICAgbm90aWZ5U3BsaWNlKHRoaXMsIGFycmF5LCBpbmZvLnBhdGgsIGFycmF5Lmxlbmd0aCwgMCwgW3JldF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdGFydGluZyBmcm9tIHRoZSBzdGFydCBpbmRleCBzcGVjaWZpZWQsIHJlbW92ZXMgMCBvciBtb3JlIGl0ZW1zXG4gICAgICogZnJvbSB0aGUgYXJyYXkgYW5kIGluc2VydHMgMCBvciBtb3JlIG5ldyBpdGVtcyBpbiB0aGVpciBwbGFjZS5cbiAgICAgKlxuICAgICAqIFRoZSBhcmd1bWVudHMgYWZ0ZXIgYHBhdGhgIGFuZCByZXR1cm4gdmFsdWUgbWF0Y2ggdGhhdCBvZlxuICAgICAqIGBBcnJheS5wcm90b3R5cGUuc3BsaWNlYC5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIG5vdGlmaWVzIG90aGVyIHBhdGhzIHRvIHRoZSBzYW1lIGFycmF5IHRoYXQgYVxuICAgICAqIHNwbGljZSBvY2N1cnJlZCB0byB0aGUgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZyB8ICFBcnJheTxzdHJpbmd8bnVtYmVyPn0gcGF0aCBQYXRoIHRvIGFycmF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBJbmRleCBmcm9tIHdoaWNoIHRvIHN0YXJ0IHJlbW92aW5nL2luc2VydGluZy5cbiAgICAgKiBAcGFyYW0ge251bWJlcj19IGRlbGV0ZUNvdW50IE51bWJlciBvZiBpdGVtcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHsuLi4qfSBpdGVtcyBJdGVtcyB0byBpbnNlcnQgaW50byBhcnJheS5cbiAgICAgKiBAcmV0dXJuIHtBcnJheX0gQXJyYXkgb2YgcmVtb3ZlZCBpdGVtcy5cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgc3BsaWNlKHBhdGgsIHN0YXJ0LCBkZWxldGVDb3VudCwgLi4uaXRlbXMpIHtcbiAgICAgIGxldCBpbmZvID0ge3BhdGggOiAnJ307XG4gICAgICBsZXQgYXJyYXkgPSAvKiogQHR5cGUge0FycmF5fSAqLyhnZXQodGhpcywgcGF0aCwgaW5mbykpO1xuICAgICAgLy8gTm9ybWFsaXplIGZhbmN5IG5hdGl2ZSBzcGxpY2UgaGFuZGxpbmcgb2YgY3Jhenkgc3RhcnQgdmFsdWVzXG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gYXJyYXkubGVuZ3RoIC0gTWF0aC5mbG9vcigtc3RhcnQpO1xuICAgICAgfSBlbHNlIGlmIChzdGFydCkge1xuICAgICAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQpO1xuICAgICAgfVxuICAgICAgLy8gYXJyYXkuc3BsaWNlIGRvZXMgZGlmZmVyZW50IHRoaW5ncyBiYXNlZCBvbiB0aGUgbnVtYmVyIG9mIGFyZ3VtZW50c1xuICAgICAgLy8geW91IHBhc3MgaW4uIFRoZXJlZm9yZSwgYXJyYXkuc3BsaWNlKDApIGFuZCBhcnJheS5zcGxpY2UoMCwgdW5kZWZpbmVkKVxuICAgICAgLy8gZG8gZGlmZmVyZW50IHRoaW5ncy4gSW4gdGhlIGZvcm1lciwgdGhlIHdob2xlIGFycmF5IGlzIGNsZWFyZWQuIEluIHRoZVxuICAgICAgLy8gbGF0dGVyLCBubyBpdGVtcyBhcmUgcmVtb3ZlZC5cbiAgICAgIC8vIFRoaXMgbWVhbnMgdGhhdCB3ZSBuZWVkIHRvIGRldGVjdCB3aGV0aGVyIDEuIG9uZSBvZiB0aGUgYXJndW1lbnRzXG4gICAgICAvLyBpcyBhY3R1YWxseSBwYXNzZWQgaW4gYW5kIHRoZW4gMi4gZGV0ZXJtaW5lIGhvdyBtYW55IGFyZ3VtZW50c1xuICAgICAgLy8gd2Ugc2hvdWxkIHBhc3Mgb24gdG8gdGhlIG5hdGl2ZSBhcnJheS5zcGxpY2VcbiAgICAgIC8vXG4gICAgICBsZXQgcmV0O1xuICAgICAgLy8gT21pdCBhbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgaWYgdGhleSB3ZXJlIG5vdCBwYXNzZWQgaW5cbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIHJldCA9IGFycmF5LnNwbGljZShzdGFydCk7XG4gICAgICAvLyBFaXRoZXIgc3RhcnQgd2FzIHVuZGVmaW5lZCBhbmQgdGhlIG90aGVycyB3ZXJlIGRlZmluZWQsIGJ1dCBpbiB0aGlzXG4gICAgICAvLyBjYXNlIHdlIGNhbiBzYWZlbHkgcGFzcyBvbiBhbGwgYXJndW1lbnRzXG4gICAgICAvL1xuICAgICAgLy8gTm90ZTogdGhpcyBpbmNsdWRlcyB0aGUgY2FzZSB3aGVyZSBub25lIG9mIHRoZSBhcmd1bWVudHMgd2VyZSBwYXNzZWQgaW4sXG4gICAgICAvLyBlLmcuIHRoaXMuc3BsaWNlKCdhcnJheScpLiBIb3dldmVyLCBpZiBib3RoIHN0YXJ0IGFuZCBkZWxldGVDb3VudFxuICAgICAgLy8gYXJlIHVuZGVmaW5lZCwgYXJyYXkuc3BsaWNlIHdpbGwgbm90IG1vZGlmeSB0aGUgYXJyYXkgKGFzIGV4cGVjdGVkKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0ID0gYXJyYXkuc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCwgLi4uaXRlbXMpO1xuICAgICAgfVxuICAgICAgLy8gQXQgdGhlIGVuZCwgY2hlY2sgd2hldGhlciBhbnkgaXRlbXMgd2VyZSBwYXNzZWQgaW4gKGUuZy4gaW5zZXJ0aW9ucylcbiAgICAgIC8vIG9yIGlmIHRoZSByZXR1cm4gYXJyYXkgY29udGFpbnMgaXRlbXMgKGUuZy4gZGVsZXRpb25zKS5cbiAgICAgIC8vIE9ubHkgbm90aWZ5IGlmIGl0ZW1zIHdlcmUgYWRkZWQgb3IgZGVsZXRlZC5cbiAgICAgIGlmIChpdGVtcy5sZW5ndGggfHwgcmV0Lmxlbmd0aCkge1xuICAgICAgICBub3RpZnlTcGxpY2UodGhpcywgYXJyYXksIGluZm8ucGF0aCwgc3RhcnQsIGl0ZW1zLmxlbmd0aCwgcmV0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbiBpdGVtIGZyb20gdGhlIGJlZ2lubmluZyBvZiBhcnJheSBhdCB0aGUgcGF0aCBzcGVjaWZpZWQuXG4gICAgICpcbiAgICAgKiBUaGUgYXJndW1lbnRzIGFmdGVyIGBwYXRoYCBhbmQgcmV0dXJuIHZhbHVlIG1hdGNoIHRoYXQgb2ZcbiAgICAgKiBgQXJyYXkucHJvdG90eXBlLnBvcGAuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBub3RpZmllcyBvdGhlciBwYXRocyB0byB0aGUgc2FtZSBhcnJheSB0aGF0IGFcbiAgICAgKiBzcGxpY2Ugb2NjdXJyZWQgdG8gdGhlIGFycmF5LlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtzdHJpbmcgfCAhQXJyYXk8c3RyaW5nfG51bWJlcj59IHBhdGggUGF0aCB0byBhcnJheS5cbiAgICAgKiBAcmV0dXJuIHsqfSBJdGVtIHRoYXQgd2FzIHJlbW92ZWQuXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIHNoaWZ0KHBhdGgpIHtcbiAgICAgIGxldCBpbmZvID0ge3BhdGg6ICcnfTtcbiAgICAgIGxldCBhcnJheSA9IC8qKiBAdHlwZSB7QXJyYXl9ICovKGdldCh0aGlzLCBwYXRoLCBpbmZvKSk7XG4gICAgICBsZXQgaGFkTGVuZ3RoID0gQm9vbGVhbihhcnJheS5sZW5ndGgpO1xuICAgICAgbGV0IHJldCA9IGFycmF5LnNoaWZ0KCk7XG4gICAgICBpZiAoaGFkTGVuZ3RoKSB7XG4gICAgICAgIG5vdGlmeVNwbGljZSh0aGlzLCBhcnJheSwgaW5mby5wYXRoLCAwLCAwLCBbcmV0XSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgaXRlbXMgb250byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBhcnJheSBhdCB0aGUgcGF0aCBzcGVjaWZpZWQuXG4gICAgICpcbiAgICAgKiBUaGUgYXJndW1lbnRzIGFmdGVyIGBwYXRoYCBhbmQgcmV0dXJuIHZhbHVlIG1hdGNoIHRoYXQgb2ZcbiAgICAgKiBgQXJyYXkucHJvdG90eXBlLnB1c2hgLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2Qgbm90aWZpZXMgb3RoZXIgcGF0aHMgdG8gdGhlIHNhbWUgYXJyYXkgdGhhdCBhXG4gICAgICogc3BsaWNlIG9jY3VycmVkIHRvIHRoZSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PHN0cmluZ3xudW1iZXI+fSBwYXRoIFBhdGggdG8gYXJyYXkuXG4gICAgICogQHBhcmFtIHsuLi4qfSBpdGVtcyBJdGVtcyB0byBpbnNlcnQgaW5mbyBhcnJheVxuICAgICAqIEByZXR1cm4ge251bWJlcn0gTmV3IGxlbmd0aCBvZiB0aGUgYXJyYXkuXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIHVuc2hpZnQocGF0aCwgLi4uaXRlbXMpIHtcbiAgICAgIGxldCBpbmZvID0ge3BhdGg6ICcnfTtcbiAgICAgIGxldCBhcnJheSA9IC8qKiBAdHlwZSB7QXJyYXl9ICovKGdldCh0aGlzLCBwYXRoLCBpbmZvKSk7XG4gICAgICBsZXQgcmV0ID0gYXJyYXkudW5zaGlmdCguLi5pdGVtcyk7XG4gICAgICBpZiAoaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgIG5vdGlmeVNwbGljZSh0aGlzLCBhcnJheSwgaW5mby5wYXRoLCAwLCBpdGVtcy5sZW5ndGgsIFtdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTm90aWZ5IHRoYXQgYSBwYXRoIGhhcyBjaGFuZ2VkLlxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKlxuICAgICAqICAgICB0aGlzLml0ZW0udXNlci5uYW1lID0gJ0JvYic7XG4gICAgICogICAgIHRoaXMubm90aWZ5UGF0aCgnaXRlbS51c2VyLm5hbWUnKTtcbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFBhdGggdGhhdCBzaG91bGQgYmUgbm90aWZpZWQuXG4gICAgICogQHBhcmFtIHsqPX0gdmFsdWUgVmFsdWUgYXQgdGhlIHBhdGggKG9wdGlvbmFsKS5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBub3RpZnlQYXRoKHBhdGgsIHZhbHVlKSB7XG4gICAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICAgIGxldCBwcm9wUGF0aDtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgLy8gR2V0IHZhbHVlIGlmIG5vdCBzdXBwbGllZFxuICAgICAgICBsZXQgaW5mbyA9IHtwYXRoOiAnJ307XG4gICAgICAgIHZhbHVlID0gZ2V0KHRoaXMsIHBhdGgsIGluZm8pO1xuICAgICAgICBwcm9wUGF0aCA9IGluZm8ucGF0aDtcbiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShwYXRoKSkge1xuICAgICAgICAvLyBOb3JtYWxpemUgcGF0aCBpZiBuZWVkZWRcbiAgICAgICAgcHJvcFBhdGggPSBub3JtYWxpemUocGF0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9wUGF0aCA9IC8qKiBAdHlwZXtzdHJpbmd9ICovKHBhdGgpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX3NldFBlbmRpbmdQcm9wZXJ0eU9yUGF0aChwcm9wUGF0aCwgdmFsdWUsIHRydWUsIHRydWUpKSB7XG4gICAgICAgIHRoaXMuX2ludmFsaWRhdGVQcm9wZXJ0aWVzKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXF1aXZhbGVudCB0byBzdGF0aWMgYGNyZWF0ZVJlYWRPbmx5UHJvcGVydHlgIEFQSSBidXQgY2FuIGJlIGNhbGxlZCBvblxuICAgICAqIGFuIGluc3RhbmNlIHRvIGFkZCBlZmZlY3RzIGF0IHJ1bnRpbWUuICBTZWUgdGhhdCBtZXRob2QgZm9yXG4gICAgICogZnVsbCBBUEkgZG9jcy5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gcHJvdGVjdGVkU2V0dGVyIENyZWF0ZXMgYSBjdXN0b20gcHJvdGVjdGVkIHNldHRlclxuICAgICAqICAgd2hlbiBgdHJ1ZWAuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2NyZWF0ZVJlYWRPbmx5UHJvcGVydHkocHJvcGVydHksIHByb3RlY3RlZFNldHRlcikge1xuICAgICAgdGhpcy5fYWRkUHJvcGVydHlFZmZlY3QocHJvcGVydHksIFRZUEVTLlJFQURfT05MWSk7XG4gICAgICBpZiAocHJvdGVjdGVkU2V0dGVyKSB7XG4gICAgICAgIHRoaXNbJ19zZXQnICsgdXBwZXIocHJvcGVydHkpXSA9IC8qKiBAdGhpcyB7UHJvcGVydHlFZmZlY3RzfSAqL2Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgdGhpcy5fc2V0UHJvcGVydHkocHJvcGVydHksIHZhbHVlKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFcXVpdmFsZW50IHRvIHN0YXRpYyBgY3JlYXRlUHJvcGVydHlPYnNlcnZlcmAgQVBJIGJ1dCBjYW4gYmUgY2FsbGVkIG9uXG4gICAgICogYW4gaW5zdGFuY2UgdG8gYWRkIGVmZmVjdHMgYXQgcnVudGltZS4gIFNlZSB0aGF0IG1ldGhvZCBmb3JcbiAgICAgKiBmdWxsIEFQSSBkb2NzLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xmdW5jdGlvbigqLCopfSBtZXRob2QgRnVuY3Rpb24gb3IgbmFtZSBvZiBvYnNlcnZlciBtZXRob2RcbiAgICAgKiAgICAgdG8gY2FsbFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGR5bmFtaWNGbiBXaGV0aGVyIHRoZSBtZXRob2QgbmFtZSBzaG91bGQgYmUgaW5jbHVkZWQgYXNcbiAgICAgKiAgIGEgZGVwZW5kZW5jeSB0byB0aGUgZWZmZWN0LlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9jcmVhdGVQcm9wZXJ0eU9ic2VydmVyKHByb3BlcnR5LCBtZXRob2QsIGR5bmFtaWNGbikge1xuICAgICAgbGV0IGluZm8gPSB7IHByb3BlcnR5LCBtZXRob2QsIGR5bmFtaWNGbjogQm9vbGVhbihkeW5hbWljRm4pIH07XG4gICAgICB0aGlzLl9hZGRQcm9wZXJ0eUVmZmVjdChwcm9wZXJ0eSwgVFlQRVMuT0JTRVJWRSwge1xuICAgICAgICBmbjogcnVuT2JzZXJ2ZXJFZmZlY3QsIGluZm8sIHRyaWdnZXI6IHtuYW1lOiBwcm9wZXJ0eX1cbiAgICAgIH0pO1xuICAgICAgaWYgKGR5bmFtaWNGbikge1xuICAgICAgICB0aGlzLl9hZGRQcm9wZXJ0eUVmZmVjdCgvKiogQHR5cGUge3N0cmluZ30gKi8obWV0aG9kKSwgVFlQRVMuT0JTRVJWRSwge1xuICAgICAgICAgIGZuOiBydW5PYnNlcnZlckVmZmVjdCwgaW5mbywgdHJpZ2dlcjoge25hbWU6IG1ldGhvZH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXF1aXZhbGVudCB0byBzdGF0aWMgYGNyZWF0ZU1ldGhvZE9ic2VydmVyYCBBUEkgYnV0IGNhbiBiZSBjYWxsZWQgb25cbiAgICAgKiBhbiBpbnN0YW5jZSB0byBhZGQgZWZmZWN0cyBhdCBydW50aW1lLiAgU2VlIHRoYXQgbWV0aG9kIGZvclxuICAgICAqIGZ1bGwgQVBJIGRvY3MuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBNZXRob2QgZXhwcmVzc2lvblxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbnxPYmplY3Q9fSBkeW5hbWljRm4gQm9vbGVhbiBvciBvYmplY3QgbWFwIGluZGljYXRpbmdcbiAgICAgKiAgIHdoZXRoZXIgbWV0aG9kIG5hbWVzIHNob3VsZCBiZSBpbmNsdWRlZCBhcyBhIGRlcGVuZGVuY3kgdG8gdGhlIGVmZmVjdC5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfY3JlYXRlTWV0aG9kT2JzZXJ2ZXIoZXhwcmVzc2lvbiwgZHluYW1pY0ZuKSB7XG4gICAgICBsZXQgc2lnID0gcGFyc2VNZXRob2QoZXhwcmVzc2lvbik7XG4gICAgICBpZiAoIXNpZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNYWxmb3JtZWQgb2JzZXJ2ZXIgZXhwcmVzc2lvbiAnXCIgKyBleHByZXNzaW9uICsgXCInXCIpO1xuICAgICAgfVxuICAgICAgY3JlYXRlTWV0aG9kRWZmZWN0KHRoaXMsIHNpZywgVFlQRVMuT0JTRVJWRSwgcnVuTWV0aG9kRWZmZWN0LCBudWxsLCBkeW5hbWljRm4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVxdWl2YWxlbnQgdG8gc3RhdGljIGBjcmVhdGVOb3RpZnlpbmdQcm9wZXJ0eWAgQVBJIGJ1dCBjYW4gYmUgY2FsbGVkIG9uXG4gICAgICogYW4gaW5zdGFuY2UgdG8gYWRkIGVmZmVjdHMgYXQgcnVudGltZS4gIFNlZSB0aGF0IG1ldGhvZCBmb3JcbiAgICAgKiBmdWxsIEFQSSBkb2NzLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfY3JlYXRlTm90aWZ5aW5nUHJvcGVydHkocHJvcGVydHkpIHtcbiAgICAgIHRoaXMuX2FkZFByb3BlcnR5RWZmZWN0KHByb3BlcnR5LCBUWVBFUy5OT1RJRlksIHtcbiAgICAgICAgZm46IHJ1bk5vdGlmeUVmZmVjdCxcbiAgICAgICAgaW5mbzoge1xuICAgICAgICAgIGV2ZW50TmFtZTogY2FtZWxUb0Rhc2hDYXNlKHByb3BlcnR5KSArICctY2hhbmdlZCcsXG4gICAgICAgICAgcHJvcGVydHk6IHByb3BlcnR5XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVxdWl2YWxlbnQgdG8gc3RhdGljIGBjcmVhdGVSZWZsZWN0ZWRQcm9wZXJ0eWAgQVBJIGJ1dCBjYW4gYmUgY2FsbGVkIG9uXG4gICAgICogYW4gaW5zdGFuY2UgdG8gYWRkIGVmZmVjdHMgYXQgcnVudGltZS4gIFNlZSB0aGF0IG1ldGhvZCBmb3JcbiAgICAgKiBmdWxsIEFQSSBkb2NzLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfSBnby9taXNzaW5nZm5wcm9wc1xuICAgICAqL1xuICAgIF9jcmVhdGVSZWZsZWN0ZWRQcm9wZXJ0eShwcm9wZXJ0eSkge1xuICAgICAgbGV0IGF0dHIgPSB0aGlzLmNvbnN0cnVjdG9yLmF0dHJpYnV0ZU5hbWVGb3JQcm9wZXJ0eShwcm9wZXJ0eSk7XG4gICAgICBpZiAoYXR0clswXSA9PT0gJy0nKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignUHJvcGVydHkgJyArIHByb3BlcnR5ICsgJyBjYW5ub3QgYmUgcmVmbGVjdGVkIHRvIGF0dHJpYnV0ZSAnICtcbiAgICAgICAgICBhdHRyICsgJyBiZWNhdXNlIFwiLVwiIGlzIG5vdCBhIHZhbGlkIHN0YXJ0aW5nIGF0dHJpYnV0ZSBuYW1lLiBVc2UgYSBsb3dlcmNhc2UgZmlyc3QgbGV0dGVyIGZvciB0aGUgcHJvcGVydHkgaW5zdGVhZC4nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2FkZFByb3BlcnR5RWZmZWN0KHByb3BlcnR5LCBUWVBFUy5SRUZMRUNULCB7XG4gICAgICAgICAgZm46IHJ1blJlZmxlY3RFZmZlY3QsXG4gICAgICAgICAgaW5mbzoge1xuICAgICAgICAgICAgYXR0ck5hbWU6IGF0dHJcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVxdWl2YWxlbnQgdG8gc3RhdGljIGBjcmVhdGVDb21wdXRlZFByb3BlcnR5YCBBUEkgYnV0IGNhbiBiZSBjYWxsZWQgb25cbiAgICAgKiBhbiBpbnN0YW5jZSB0byBhZGQgZWZmZWN0cyBhdCBydW50aW1lLiAgU2VlIHRoYXQgbWV0aG9kIGZvclxuICAgICAqIGZ1bGwgQVBJIGRvY3MuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgTmFtZSBvZiBjb21wdXRlZCBwcm9wZXJ0eSB0byBzZXRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBNZXRob2QgZXhwcmVzc2lvblxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbnxPYmplY3Q9fSBkeW5hbWljRm4gQm9vbGVhbiBvciBvYmplY3QgbWFwIGluZGljYXRpbmdcbiAgICAgKiAgIHdoZXRoZXIgbWV0aG9kIG5hbWVzIHNob3VsZCBiZSBpbmNsdWRlZCBhcyBhIGRlcGVuZGVuY3kgdG8gdGhlIGVmZmVjdC5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfY3JlYXRlQ29tcHV0ZWRQcm9wZXJ0eShwcm9wZXJ0eSwgZXhwcmVzc2lvbiwgZHluYW1pY0ZuKSB7XG4gICAgICBsZXQgc2lnID0gcGFyc2VNZXRob2QoZXhwcmVzc2lvbik7XG4gICAgICBpZiAoIXNpZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNYWxmb3JtZWQgY29tcHV0ZWQgZXhwcmVzc2lvbiAnXCIgKyBleHByZXNzaW9uICsgXCInXCIpO1xuICAgICAgfVxuICAgICAgY3JlYXRlTWV0aG9kRWZmZWN0KHRoaXMsIHNpZywgVFlQRVMuQ09NUFVURSwgcnVuQ29tcHV0ZWRFZmZlY3QsIHByb3BlcnR5LCBkeW5hbWljRm4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdhdGhlciB0aGUgYXJndW1lbnQgdmFsdWVzIGZvciBhIG1ldGhvZCBzcGVjaWZpZWQgaW4gdGhlIHByb3ZpZGVkIGFycmF5XG4gICAgICogb2YgYXJndW1lbnQgbWV0YWRhdGEuXG4gICAgICpcbiAgICAgKiBUaGUgYHBhdGhgIGFuZCBgdmFsdWVgIGFyZ3VtZW50cyBhcmUgdXNlZCB0byBmaWxsIGluIHdpbGRjYXJkIGRlc2NyaXB0b3JcbiAgICAgKiB3aGVuIHRoZSBtZXRob2QgaXMgYmVpbmcgY2FsbGVkIGFzIGEgcmVzdWx0IG9mIGEgcGF0aCBub3RpZmljYXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyFBcnJheTwhTWV0aG9kQXJnPn0gYXJncyBBcnJheSBvZiBhcmd1bWVudCBtZXRhZGF0YVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFByb3BlcnR5L3BhdGggbmFtZSB0aGF0IHRyaWdnZXJlZCB0aGUgbWV0aG9kIGVmZmVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2YgY3VycmVudCBwcm9wZXJ0eSBjaGFuZ2VzXG4gICAgICogQHJldHVybiB7QXJyYXk8Kj59IEFycmF5IG9mIGFyZ3VtZW50IHZhbHVlc1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX21hcnNoYWxBcmdzKGFyZ3MsIHBhdGgsIHByb3BzKSB7XG4gICAgICBjb25zdCBkYXRhID0gdGhpcy5fX2RhdGE7XG4gICAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICAgIGZvciAobGV0IGk9MCwgbD1hcmdzLmxlbmd0aDsgaTxsOyBpKyspIHtcbiAgICAgICAgbGV0IHtuYW1lLCBzdHJ1Y3R1cmVkLCB3aWxkY2FyZCwgdmFsdWUsIGxpdGVyYWx9ID0gYXJnc1tpXTtcbiAgICAgICAgaWYgKCFsaXRlcmFsKSB7XG4gICAgICAgICAgaWYgKHdpbGRjYXJkKSB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaGVzID0gaXNEZXNjZW5kYW50KG5hbWUsIHBhdGgpO1xuICAgICAgICAgICAgY29uc3QgcGF0aFZhbHVlID0gZ2V0QXJnVmFsdWUoZGF0YSwgcHJvcHMsIG1hdGNoZXMgPyBwYXRoIDogbmFtZSk7XG4gICAgICAgICAgICB2YWx1ZSA9IHtcbiAgICAgICAgICAgICAgcGF0aDogbWF0Y2hlcyA/IHBhdGggOiBuYW1lLFxuICAgICAgICAgICAgICB2YWx1ZTogcGF0aFZhbHVlLFxuICAgICAgICAgICAgICBiYXNlOiBtYXRjaGVzID8gZ2V0KGRhdGEsIG5hbWUpIDogcGF0aFZhbHVlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHN0cnVjdHVyZWQgPyBnZXRBcmdWYWx1ZShkYXRhLCBwcm9wcywgbmFtZSkgOiBkYXRhW25hbWVdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YWx1ZXNbaV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxuXG4gICAgLy8gLS0gc3RhdGljIGNsYXNzIG1ldGhvZHMgLS0tLS0tLS0tLS0tXG5cbiAgICAvKipcbiAgICAgKiBFbnN1cmVzIGFuIGFjY2Vzc29yIGV4aXN0cyBmb3IgdGhlIHNwZWNpZmllZCBwcm9wZXJ0eSwgYW5kIGFkZHNcbiAgICAgKiB0byBhIGxpc3Qgb2YgXCJwcm9wZXJ0eSBlZmZlY3RzXCIgdGhhdCB3aWxsIHJ1biB3aGVuIHRoZSBhY2Nlc3NvciBmb3JcbiAgICAgKiB0aGUgc3BlY2lmaWVkIHByb3BlcnR5IGlzIHNldC4gIEVmZmVjdHMgYXJlIGdyb3VwZWQgYnkgXCJ0eXBlXCIsIHdoaWNoXG4gICAgICogcm91Z2hseSBjb3JyZXNwb25kcyB0byBhIHBoYXNlIGluIGVmZmVjdCBwcm9jZXNzaW5nLiAgVGhlIGVmZmVjdFxuICAgICAqIG1ldGFkYXRhIHNob3VsZCBiZSBpbiB0aGUgZm9sbG93aW5nIGZvcm06XG4gICAgICpcbiAgICAgKiAgICAge1xuICAgICAqICAgICAgIGZuOiBlZmZlY3RGdW5jdGlvbiwgLy8gUmVmZXJlbmNlIHRvIGZ1bmN0aW9uIHRvIGNhbGwgdG8gcGVyZm9ybSBlZmZlY3RcbiAgICAgKiAgICAgICBpbmZvOiB7IC4uLiB9ICAgICAgIC8vIEVmZmVjdCBtZXRhZGF0YSBwYXNzZWQgdG8gZnVuY3Rpb25cbiAgICAgKiAgICAgICB0cmlnZ2VyOiB7ICAgICAgICAgIC8vIE9wdGlvbmFsIHRyaWdnZXJpbmcgbWV0YWRhdGE7IGlmIG5vdCBwcm92aWRlZFxuICAgICAqICAgICAgICAgbmFtZTogc3RyaW5nICAgICAgLy8gdGhlIHByb3BlcnR5IGlzIHRyZWF0ZWQgYXMgYSB3aWxkY2FyZFxuICAgICAqICAgICAgICAgc3RydWN0dXJlZDogYm9vbGVhblxuICAgICAqICAgICAgICAgd2lsZGNhcmQ6IGJvb2xlYW5cbiAgICAgKiAgICAgICB9XG4gICAgICogICAgIH1cbiAgICAgKlxuICAgICAqIEVmZmVjdHMgYXJlIGNhbGxlZCBmcm9tIGBfcHJvcGVydGllc0NoYW5nZWRgIGluIHRoZSBmb2xsb3dpbmcgb3JkZXIgYnlcbiAgICAgKiB0eXBlOlxuICAgICAqXG4gICAgICogMS4gQ09NUFVURVxuICAgICAqIDIuIFBST1BBR0FURVxuICAgICAqIDMuIFJFRkxFQ1RcbiAgICAgKiA0LiBPQlNFUlZFXG4gICAgICogNS4gTk9USUZZXG4gICAgICpcbiAgICAgKiBFZmZlY3QgZnVuY3Rpb25zIGFyZSBjYWxsZWQgd2l0aCB0aGUgZm9sbG93aW5nIHNpZ25hdHVyZTpcbiAgICAgKlxuICAgICAqICAgICBlZmZlY3RGdW5jdGlvbihpbnN0LCBwYXRoLCBwcm9wcywgb2xkUHJvcHMsIGluZm8sIGhhc1BhdGhzKVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IHRoYXQgc2hvdWxkIHRyaWdnZXIgdGhlIGVmZmVjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIEVmZmVjdCB0eXBlLCBmcm9tIHRoaXMuUFJPUEVSVFlfRUZGRUNUX1RZUEVTXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBlZmZlY3QgRWZmZWN0IG1ldGFkYXRhIG9iamVjdFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIGFkZFByb3BlcnR5RWZmZWN0KHByb3BlcnR5LCB0eXBlLCBlZmZlY3QpIHtcbiAgICAgIHRoaXMucHJvdG90eXBlLl9hZGRQcm9wZXJ0eUVmZmVjdChwcm9wZXJ0eSwgdHlwZSwgZWZmZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2luZ2xlLXByb3BlcnR5IG9ic2VydmVyIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9uKCosKil9IG1ldGhvZCBGdW5jdGlvbiBvciBuYW1lIG9mIG9ic2VydmVyIG1ldGhvZCB0byBjYWxsXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gZHluYW1pY0ZuIFdoZXRoZXIgdGhlIG1ldGhvZCBuYW1lIHNob3VsZCBiZSBpbmNsdWRlZCBhc1xuICAgICAqICAgYSBkZXBlbmRlbmN5IHRvIHRoZSBlZmZlY3QuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlUHJvcGVydHlPYnNlcnZlcihwcm9wZXJ0eSwgbWV0aG9kLCBkeW5hbWljRm4pIHtcbiAgICAgIHRoaXMucHJvdG90eXBlLl9jcmVhdGVQcm9wZXJ0eU9ic2VydmVyKHByb3BlcnR5LCBtZXRob2QsIGR5bmFtaWNGbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG11bHRpLXByb3BlcnR5IFwibWV0aG9kIG9ic2VydmVyXCIgYmFzZWQgb24gdGhlIHByb3ZpZGVkXG4gICAgICogZXhwcmVzc2lvbiwgd2hpY2ggc2hvdWxkIGJlIGEgc3RyaW5nIGluIHRoZSBmb3JtIG9mIGEgbm9ybWFsIEphdmFTY3JpcHRcbiAgICAgKiBmdW5jdGlvbiBzaWduYXR1cmU6IGAnbWV0aG9kTmFtZShhcmcxLCBbLi4uLCBhcmduXSknYC4gIEVhY2ggYXJndW1lbnRcbiAgICAgKiBzaG91bGQgY29ycmVzcG9uZCB0byBhIHByb3BlcnR5IG9yIHBhdGggaW4gdGhlIGNvbnRleHQgb2YgdGhpc1xuICAgICAqIHByb3RvdHlwZSAob3IgaW5zdGFuY2UpLCBvciBtYXkgYmUgYSBsaXRlcmFsIHN0cmluZyBvciBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBNZXRob2QgZXhwcmVzc2lvblxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbnxPYmplY3Q9fSBkeW5hbWljRm4gQm9vbGVhbiBvciBvYmplY3QgbWFwIGluZGljYXRpbmdcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqICAgd2hldGhlciBtZXRob2QgbmFtZXMgc2hvdWxkIGJlIGluY2x1ZGVkIGFzIGEgZGVwZW5kZW5jeSB0byB0aGUgZWZmZWN0LlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVNZXRob2RPYnNlcnZlcihleHByZXNzaW9uLCBkeW5hbWljRm4pIHtcbiAgICAgIHRoaXMucHJvdG90eXBlLl9jcmVhdGVNZXRob2RPYnNlcnZlcihleHByZXNzaW9uLCBkeW5hbWljRm4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhdXNlcyB0aGUgc2V0dGVyIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkgdG8gZGlzcGF0Y2ggYDxwcm9wZXJ0eT4tY2hhbmdlZGBcbiAgICAgKiBldmVudHMgdG8gbm90aWZ5IG9mIGNoYW5nZXMgdG8gdGhlIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVOb3RpZnlpbmdQcm9wZXJ0eShwcm9wZXJ0eSkge1xuICAgICAgdGhpcy5wcm90b3R5cGUuX2NyZWF0ZU5vdGlmeWluZ1Byb3BlcnR5KHByb3BlcnR5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgcmVhZC1vbmx5IGFjY2Vzc29yIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBUbyBzZXQgdGhlIHByb3BlcnR5LCB1c2UgdGhlIHByb3RlY3RlZCBgX3NldFByb3BlcnR5YCBBUEkuXG4gICAgICogVG8gY3JlYXRlIGEgY3VzdG9tIHByb3RlY3RlZCBzZXR0ZXIgKGUuZy4gYF9zZXRNeVByb3AoKWAgZm9yXG4gICAgICogcHJvcGVydHkgYG15UHJvcGApLCBwYXNzIGB0cnVlYCBmb3IgYHByb3RlY3RlZFNldHRlcmAuXG4gICAgICpcbiAgICAgKiBOb3RlLCBpZiB0aGUgcHJvcGVydHkgd2lsbCBoYXZlIG90aGVyIHByb3BlcnR5IGVmZmVjdHMsIHRoaXMgbWV0aG9kXG4gICAgICogc2hvdWxkIGJlIGNhbGxlZCBmaXJzdCwgYmVmb3JlIGFkZGluZyBvdGhlciBlZmZlY3RzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBwcm90ZWN0ZWRTZXR0ZXIgQ3JlYXRlcyBhIGN1c3RvbSBwcm90ZWN0ZWQgc2V0dGVyXG4gICAgICogICB3aGVuIGB0cnVlYC5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVSZWFkT25seVByb3BlcnR5KHByb3BlcnR5LCBwcm90ZWN0ZWRTZXR0ZXIpIHtcbiAgICAgIHRoaXMucHJvdG90eXBlLl9jcmVhdGVSZWFkT25seVByb3BlcnR5KHByb3BlcnR5LCBwcm90ZWN0ZWRTZXR0ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhdXNlcyB0aGUgc2V0dGVyIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkgdG8gcmVmbGVjdCB0aGUgcHJvcGVydHkgdmFsdWVcbiAgICAgKiB0byBhIChkYXNoLWNhc2VkKSBhdHRyaWJ1dGUgb2YgdGhlIHNhbWUgbmFtZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlUmVmbGVjdGVkUHJvcGVydHkocHJvcGVydHkpIHtcbiAgICAgIHRoaXMucHJvdG90eXBlLl9jcmVhdGVSZWZsZWN0ZWRQcm9wZXJ0eShwcm9wZXJ0eSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNvbXB1dGVkIHByb3BlcnR5IHdob3NlIHZhbHVlIGlzIHNldCB0byB0aGUgcmVzdWx0IG9mIHRoZVxuICAgICAqIG1ldGhvZCBkZXNjcmliZWQgYnkgdGhlIGdpdmVuIGBleHByZXNzaW9uYCBlYWNoIHRpbWUgb25lIG9yIG1vcmVcbiAgICAgKiBhcmd1bWVudHMgdG8gdGhlIG1ldGhvZCBjaGFuZ2VzLiAgVGhlIGV4cHJlc3Npb24gc2hvdWxkIGJlIGEgc3RyaW5nXG4gICAgICogaW4gdGhlIGZvcm0gb2YgYSBub3JtYWwgSmF2YVNjcmlwdCBmdW5jdGlvbiBzaWduYXR1cmU6XG4gICAgICogYCdtZXRob2ROYW1lKGFyZzEsIFsuLi4sIGFyZ25dKSdgXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgTmFtZSBvZiBjb21wdXRlZCBwcm9wZXJ0eSB0byBzZXRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBNZXRob2QgZXhwcmVzc2lvblxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbnxPYmplY3Q9fSBkeW5hbWljRm4gQm9vbGVhbiBvciBvYmplY3QgbWFwIGluZGljYXRpbmcgd2hldGhlclxuICAgICAqICAgbWV0aG9kIG5hbWVzIHNob3VsZCBiZSBpbmNsdWRlZCBhcyBhIGRlcGVuZGVuY3kgdG8gdGhlIGVmZmVjdC5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVDb21wdXRlZFByb3BlcnR5KHByb3BlcnR5LCBleHByZXNzaW9uLCBkeW5hbWljRm4pIHtcbiAgICAgIHRoaXMucHJvdG90eXBlLl9jcmVhdGVDb21wdXRlZFByb3BlcnR5KHByb3BlcnR5LCBleHByZXNzaW9uLCBkeW5hbWljRm4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhcnNlcyB0aGUgcHJvdmlkZWQgdGVtcGxhdGUgdG8gZW5zdXJlIGJpbmRpbmcgZWZmZWN0cyBhcmUgY3JlYXRlZFxuICAgICAqIGZvciB0aGVtLCBhbmQgdGhlbiBlbnN1cmVzIHByb3BlcnR5IGFjY2Vzc29ycyBhcmUgY3JlYXRlZCBmb3IgYW55XG4gICAgICogZGVwZW5kZW50IHByb3BlcnRpZXMgaW4gdGhlIHRlbXBsYXRlLiAgQmluZGluZyBlZmZlY3RzIGZvciBib3VuZFxuICAgICAqIHRlbXBsYXRlcyBhcmUgc3RvcmVkIGluIGEgbGlua2VkIGxpc3Qgb24gdGhlIGluc3RhbmNlIHNvIHRoYXRcbiAgICAgKiB0ZW1wbGF0ZXMgY2FuIGJlIGVmZmljaWVudGx5IHN0YW1wZWQgYW5kIHVuc3RhbXBlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlIFRlbXBsYXRlIGNvbnRhaW5pbmcgYmluZGluZ1xuICAgICAqICAgYmluZGluZ3NcbiAgICAgKiBAcmV0dXJuIHshVGVtcGxhdGVJbmZvfSBUZW1wbGF0ZSBtZXRhZGF0YSBvYmplY3RcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgYmluZFRlbXBsYXRlKHRlbXBsYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm90b3R5cGUuX2JpbmRUZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgfVxuXG4gICAgLy8gLS0gYmluZGluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAvKipcbiAgICAgKiBFcXVpdmFsZW50IHRvIHN0YXRpYyBgYmluZFRlbXBsYXRlYCBBUEkgYnV0IGNhbiBiZSBjYWxsZWQgb25cbiAgICAgKiBhbiBpbnN0YW5jZSB0byBhZGQgZWZmZWN0cyBhdCBydW50aW1lLiAgU2VlIHRoYXQgbWV0aG9kIGZvclxuICAgICAqIGZ1bGwgQVBJIGRvY3MuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBtYXkgYmUgY2FsbGVkIG9uIHRoZSBwcm90b3R5cGUgKGZvciBwcm90b3R5cGljYWwgdGVtcGxhdGVcbiAgICAgKiBiaW5kaW5nLCB0byBhdm9pZCBjcmVhdGluZyBhY2Nlc3NvcnMgZXZlcnkgaW5zdGFuY2UpIG9uY2UgcGVyIHByb3RvdHlwZSxcbiAgICAgKiBhbmQgd2lsbCBiZSBjYWxsZWQgd2l0aCBgcnVudGltZUJpbmRpbmc6IHRydWVgIGJ5IGBfc3RhbXBUZW1wbGF0ZWAgdG9cbiAgICAgKiBjcmVhdGUgYW5kIGxpbmsgYW4gaW5zdGFuY2Ugb2YgdGhlIHRlbXBsYXRlIG1ldGFkYXRhIGFzc29jaWF0ZWQgd2l0aCBhXG4gICAgICogcGFydGljdWxhciBzdGFtcGluZy5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlIFRlbXBsYXRlIGNvbnRhaW5pbmcgYmluZGluZ1xuICAgICAqICAgYmluZGluZ3NcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBpbnN0YW5jZUJpbmRpbmcgV2hlbiBmYWxzZSAoZGVmYXVsdCksIHBlcmZvcm1zXG4gICAgICogICBcInByb3RvdHlwaWNhbFwiIGJpbmRpbmcgb2YgdGhlIHRlbXBsYXRlIGFuZCBvdmVyd3JpdGVzIGFueSBwcmV2aW91c2x5XG4gICAgICogICBib3VuZCB0ZW1wbGF0ZSBmb3IgdGhlIGNsYXNzLiBXaGVuIHRydWUgKGFzIHBhc3NlZCBmcm9tXG4gICAgICogICBgX3N0YW1wVGVtcGxhdGVgKSwgdGhlIHRlbXBsYXRlIGluZm8gaXMgaW5zdGFuY2VkIGFuZCBsaW5rZWQgaW50b1xuICAgICAqICAgdGhlIGxpc3Qgb2YgYm91bmQgdGVtcGxhdGVzLlxuICAgICAqIEByZXR1cm4geyFUZW1wbGF0ZUluZm99IFRlbXBsYXRlIG1ldGFkYXRhIG9iamVjdDsgZm9yIGBydW50aW1lQmluZGluZ2AsXG4gICAgICogICB0aGlzIGlzIGFuIGluc3RhbmNlIG9mIHRoZSBwcm90b3R5cGljYWwgdGVtcGxhdGUgaW5mb1xuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfSBnby9taXNzaW5nZm5wcm9wc1xuICAgICAqL1xuICAgIF9iaW5kVGVtcGxhdGUodGVtcGxhdGUsIGluc3RhbmNlQmluZGluZykge1xuICAgICAgbGV0IHRlbXBsYXRlSW5mbyA9IHRoaXMuY29uc3RydWN0b3IuX3BhcnNlVGVtcGxhdGUodGVtcGxhdGUpO1xuICAgICAgbGV0IHdhc1ByZUJvdW5kID0gdGhpcy5fX3RlbXBsYXRlSW5mbyA9PSB0ZW1wbGF0ZUluZm87XG4gICAgICAvLyBPcHRpbWl6YXRpb246IHNpbmNlIHRoaXMgaXMgY2FsbGVkIHR3aWNlIGZvciBwcm90by1ib3VuZCB0ZW1wbGF0ZXMsXG4gICAgICAvLyBkb24ndCBhdHRlbXB0IHRvIHJlY3JlYXRlIGFjY2Vzc29ycyBpZiB0aGlzIHRlbXBsYXRlIHdhcyBwcmUtYm91bmRcbiAgICAgIGlmICghd2FzUHJlQm91bmQpIHtcbiAgICAgICAgZm9yIChsZXQgcHJvcCBpbiB0ZW1wbGF0ZUluZm8ucHJvcGVydHlFZmZlY3RzKSB7XG4gICAgICAgICAgdGhpcy5fY3JlYXRlUHJvcGVydHlBY2Nlc3Nvcihwcm9wKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGluc3RhbmNlQmluZGluZykge1xuICAgICAgICAvLyBGb3IgaW5zdGFuY2UtdGltZSBiaW5kaW5nLCBjcmVhdGUgaW5zdGFuY2Ugb2YgdGVtcGxhdGUgbWV0YWRhdGFcbiAgICAgICAgLy8gYW5kIGxpbmsgaW50byBsaXN0IG9mIHRlbXBsYXRlcyBpZiBuZWNlc3NhcnlcbiAgICAgICAgdGVtcGxhdGVJbmZvID0gLyoqIEB0eXBlIHshVGVtcGxhdGVJbmZvfSAqLyhPYmplY3QuY3JlYXRlKHRlbXBsYXRlSW5mbykpO1xuICAgICAgICB0ZW1wbGF0ZUluZm8ud2FzUHJlQm91bmQgPSB3YXNQcmVCb3VuZDtcbiAgICAgICAgaWYgKCF3YXNQcmVCb3VuZCAmJiB0aGlzLl9fdGVtcGxhdGVJbmZvKSB7XG4gICAgICAgICAgbGV0IGxhc3QgPSB0aGlzLl9fdGVtcGxhdGVJbmZvTGFzdCB8fCB0aGlzLl9fdGVtcGxhdGVJbmZvO1xuICAgICAgICAgIHRoaXMuX190ZW1wbGF0ZUluZm9MYXN0ID0gbGFzdC5uZXh0VGVtcGxhdGVJbmZvID0gdGVtcGxhdGVJbmZvO1xuICAgICAgICAgIHRlbXBsYXRlSW5mby5wcmV2aW91c1RlbXBsYXRlSW5mbyA9IGxhc3Q7XG4gICAgICAgICAgcmV0dXJuIHRlbXBsYXRlSW5mbztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX190ZW1wbGF0ZUluZm8gPSB0ZW1wbGF0ZUluZm87XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIHByb3BlcnR5IGVmZmVjdCB0byB0aGUgZ2l2ZW4gdGVtcGxhdGUgbWV0YWRhdGEsIHdoaWNoIGlzIHJ1blxuICAgICAqIGF0IHRoZSBcInByb3BhZ2F0ZVwiIHN0YWdlIG9mIGBfcHJvcGVydGllc0NoYW5nZWRgIHdoZW4gdGhlIHRlbXBsYXRlXG4gICAgICogaGFzIGJlZW4gYm91bmQgdG8gdGhlIGVsZW1lbnQgdmlhIGBfYmluZFRlbXBsYXRlYC5cbiAgICAgKlxuICAgICAqIFRoZSBgZWZmZWN0YCBvYmplY3Qgc2hvdWxkIG1hdGNoIHRoZSBmb3JtYXQgaW4gYF9hZGRQcm9wZXJ0eUVmZmVjdGAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhIHRvIGFkZCBlZmZlY3QgdG9cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcCBQcm9wZXJ0eSB0aGF0IHNob3VsZCB0cmlnZ2VyIHRoZSBlZmZlY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGVmZmVjdCBFZmZlY3QgbWV0YWRhdGEgb2JqZWN0XG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgX2FkZFRlbXBsYXRlUHJvcGVydHlFZmZlY3QodGVtcGxhdGVJbmZvLCBwcm9wLCBlZmZlY3QpIHtcbiAgICAgIGxldCBob3N0UHJvcHMgPSB0ZW1wbGF0ZUluZm8uaG9zdFByb3BzID0gdGVtcGxhdGVJbmZvLmhvc3RQcm9wcyB8fCB7fTtcbiAgICAgIGhvc3RQcm9wc1twcm9wXSA9IHRydWU7XG4gICAgICBsZXQgZWZmZWN0cyA9IHRlbXBsYXRlSW5mby5wcm9wZXJ0eUVmZmVjdHMgPSB0ZW1wbGF0ZUluZm8ucHJvcGVydHlFZmZlY3RzIHx8IHt9O1xuICAgICAgbGV0IHByb3BFZmZlY3RzID0gZWZmZWN0c1twcm9wXSA9IGVmZmVjdHNbcHJvcF0gfHwgW107XG4gICAgICBwcm9wRWZmZWN0cy5wdXNoKGVmZmVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RhbXBzIHRoZSBwcm92aWRlZCB0ZW1wbGF0ZSBhbmQgcGVyZm9ybXMgaW5zdGFuY2UtdGltZSBzZXR1cCBmb3JcbiAgICAgKiBQb2x5bWVyIHRlbXBsYXRlIGZlYXR1cmVzLCBpbmNsdWRpbmcgZGF0YSBiaW5kaW5ncywgZGVjbGFyYXRpdmUgZXZlbnRcbiAgICAgKiBsaXN0ZW5lcnMsIGFuZCB0aGUgYHRoaXMuJGAgbWFwIG9mIGBpZGAncyB0byBub2Rlcy4gIEEgZG9jdW1lbnQgZnJhZ21lbnRcbiAgICAgKiBpcyByZXR1cm5lZCBjb250YWluaW5nIHRoZSBzdGFtcGVkIERPTSwgcmVhZHkgZm9yIGluc2VydGlvbiBpbnRvIHRoZVxuICAgICAqIERPTS5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIG1heSBiZSBjYWxsZWQgbW9yZSB0aGFuIG9uY2U7IGhvd2V2ZXIgbm90ZSB0aGF0IGR1ZSB0b1xuICAgICAqIGBzaGFkeWNzc2AgcG9seWZpbGwgbGltaXRhdGlvbnMsIG9ubHkgc3R5bGVzIGZyb20gdGVtcGxhdGVzIHByZXBhcmVkXG4gICAgICogdXNpbmcgYFNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZWAgd2lsbCBiZSBjb3JyZWN0bHkgcG9seWZpbGxlZCAoc2NvcGVkXG4gICAgICogdG8gdGhlIHNoYWRvdyByb290IGFuZCBzdXBwb3J0IENTUyBjdXN0b20gcHJvcGVydGllcyksIGFuZCBub3RlIHRoYXRcbiAgICAgKiBgU2hhZHlDU1MucHJlcGFyZVRlbXBsYXRlYCBtYXkgb25seSBiZSBjYWxsZWQgb25jZSBwZXIgZWxlbWVudC4gQXMgc3VjaCxcbiAgICAgKiBhbnkgc3R5bGVzIHJlcXVpcmVkIGJ5IGluIHJ1bnRpbWUtc3RhbXBlZCB0ZW1wbGF0ZXMgbXVzdCBiZSBpbmNsdWRlZFxuICAgICAqIGluIHRoZSBtYWluIGVsZW1lbnQgdGVtcGxhdGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyFIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZSBUZW1wbGF0ZSB0byBzdGFtcFxuICAgICAqIEByZXR1cm4geyFTdGFtcGVkVGVtcGxhdGV9IENsb25lZCB0ZW1wbGF0ZSBjb250ZW50XG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9zdGFtcFRlbXBsYXRlKHRlbXBsYXRlKSB7XG4gICAgICAvLyBFbnN1cmVzIHRoYXQgY3JlYXRlZCBkb20gaXMgYF9lbnF1ZXVlQ2xpZW50YCdkIHRvIHRoaXMgZWxlbWVudCBzb1xuICAgICAgLy8gdGhhdCBpdCBjYW4gYmUgZmx1c2hlZCBvbiBuZXh0IGNhbGwgdG8gYF9mbHVzaFByb3BlcnRpZXNgXG4gICAgICBob3N0U3RhY2suYmVnaW5Ib3N0aW5nKHRoaXMpO1xuICAgICAgbGV0IGRvbSA9IHN1cGVyLl9zdGFtcFRlbXBsYXRlKHRlbXBsYXRlKTtcbiAgICAgIGhvc3RTdGFjay5lbmRIb3N0aW5nKHRoaXMpO1xuICAgICAgbGV0IHRlbXBsYXRlSW5mbyA9IC8qKiBAdHlwZSB7IVRlbXBsYXRlSW5mb30gKi8odGhpcy5fYmluZFRlbXBsYXRlKHRlbXBsYXRlLCB0cnVlKSk7XG4gICAgICAvLyBBZGQgdGVtcGxhdGUtaW5zdGFuY2Utc3BlY2lmaWMgZGF0YSB0byBpbnN0YW5jZWQgdGVtcGxhdGVJbmZvXG4gICAgICB0ZW1wbGF0ZUluZm8ubm9kZUxpc3QgPSBkb20ubm9kZUxpc3Q7XG4gICAgICAvLyBDYXB0dXJlIGNoaWxkIG5vZGVzIHRvIGFsbG93IHVuc3RhbXBpbmcgb2Ygbm9uLXByb3RvdHlwaWNhbCB0ZW1wbGF0ZXNcbiAgICAgIGlmICghdGVtcGxhdGVJbmZvLndhc1ByZUJvdW5kKSB7XG4gICAgICAgIGxldCBub2RlcyA9IHRlbXBsYXRlSW5mby5jaGlsZE5vZGVzID0gW107XG4gICAgICAgIGZvciAobGV0IG49ZG9tLmZpcnN0Q2hpbGQ7IG47IG49bi5uZXh0U2libGluZykge1xuICAgICAgICAgIG5vZGVzLnB1c2gobik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGRvbS50ZW1wbGF0ZUluZm8gPSB0ZW1wbGF0ZUluZm87XG4gICAgICAvLyBTZXR1cCBjb21wb3VuZCBzdG9yYWdlLCAyLXdheSBsaXN0ZW5lcnMsIGFuZCBkYXRhSG9zdCBmb3IgYmluZGluZ3NcbiAgICAgIHNldHVwQmluZGluZ3ModGhpcywgdGVtcGxhdGVJbmZvKTtcbiAgICAgIC8vIEZsdXNoIHByb3BlcnRpZXMgaW50byB0ZW1wbGF0ZSBub2RlcyBpZiBhbHJlYWR5IGJvb3RlZFxuICAgICAgaWYgKHRoaXMuX19kYXRhUmVhZHkpIHtcbiAgICAgICAgcnVuRWZmZWN0cyh0aGlzLCB0ZW1wbGF0ZUluZm8ucHJvcGVydHlFZmZlY3RzLCB0aGlzLl9fZGF0YSwgbnVsbCxcbiAgICAgICAgICBmYWxzZSwgdGVtcGxhdGVJbmZvLm5vZGVMaXN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkb207XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbmQgdW5iaW5kcyB0aGUgbm9kZXMgcHJldmlvdXNseSBjb250YWluZWQgaW4gdGhlIHByb3ZpZGVkXG4gICAgICogRG9jdW1lbnRGcmFnbWVudCByZXR1cm5lZCBmcm9tIGBfc3RhbXBUZW1wbGF0ZWAuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0geyFTdGFtcGVkVGVtcGxhdGV9IGRvbSBEb2N1bWVudEZyYWdtZW50IHByZXZpb3VzbHkgcmV0dXJuZWRcbiAgICAgKiAgIGZyb20gYF9zdGFtcFRlbXBsYXRlYCBhc3NvY2lhdGVkIHdpdGggdGhlIG5vZGVzIHRvIGJlIHJlbW92ZWRcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfcmVtb3ZlQm91bmREb20oZG9tKSB7XG4gICAgICAvLyBVbmxpbmsgdGVtcGxhdGUgaW5mb1xuICAgICAgbGV0IHRlbXBsYXRlSW5mbyA9IGRvbS50ZW1wbGF0ZUluZm87XG4gICAgICBpZiAodGVtcGxhdGVJbmZvLnByZXZpb3VzVGVtcGxhdGVJbmZvKSB7XG4gICAgICAgIHRlbXBsYXRlSW5mby5wcmV2aW91c1RlbXBsYXRlSW5mby5uZXh0VGVtcGxhdGVJbmZvID1cbiAgICAgICAgICB0ZW1wbGF0ZUluZm8ubmV4dFRlbXBsYXRlSW5mbztcbiAgICAgIH1cbiAgICAgIGlmICh0ZW1wbGF0ZUluZm8ubmV4dFRlbXBsYXRlSW5mbykge1xuICAgICAgICB0ZW1wbGF0ZUluZm8ubmV4dFRlbXBsYXRlSW5mby5wcmV2aW91c1RlbXBsYXRlSW5mbyA9XG4gICAgICAgICAgdGVtcGxhdGVJbmZvLnByZXZpb3VzVGVtcGxhdGVJbmZvO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX190ZW1wbGF0ZUluZm9MYXN0ID09IHRlbXBsYXRlSW5mbykge1xuICAgICAgICB0aGlzLl9fdGVtcGxhdGVJbmZvTGFzdCA9IHRlbXBsYXRlSW5mby5wcmV2aW91c1RlbXBsYXRlSW5mbztcbiAgICAgIH1cbiAgICAgIHRlbXBsYXRlSW5mby5wcmV2aW91c1RlbXBsYXRlSW5mbyA9IHRlbXBsYXRlSW5mby5uZXh0VGVtcGxhdGVJbmZvID0gbnVsbDtcbiAgICAgIC8vIFJlbW92ZSBzdGFtcGVkIG5vZGVzXG4gICAgICBsZXQgbm9kZXMgPSB0ZW1wbGF0ZUluZm8uY2hpbGROb2RlcztcbiAgICAgIGZvciAobGV0IGk9MDsgaTxub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGVzIGRlZmF1bHQgYFRlbXBsYXRlU3RhbXBgIGltcGxlbWVudGF0aW9uIHRvIGFkZCBzdXBwb3J0IGZvclxuICAgICAqIHBhcnNpbmcgYmluZGluZ3MgZnJvbSBgVGV4dE5vZGVgJ3MnIGB0ZXh0Q29udGVudGAuICBBIGBiaW5kaW5nc2BcbiAgICAgKiBhcnJheSBpcyBhZGRlZCB0byBgbm9kZUluZm9gIGFuZCBwb3B1bGF0ZWQgd2l0aCBiaW5kaW5nIG1ldGFkYXRhXG4gICAgICogd2l0aCBpbmZvcm1hdGlvbiBjYXB0dXJpbmcgdGhlIGJpbmRpbmcgdGFyZ2V0LCBhbmQgYSBgcGFydHNgIGFycmF5XG4gICAgICogd2l0aCBvbmUgb3IgbW9yZSBtZXRhZGF0YSBvYmplY3RzIGNhcHR1cmluZyB0aGUgc291cmNlKHMpIG9mIHRoZVxuICAgICAqIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgTm9kZSB0byBwYXJzZVxuICAgICAqIEBwYXJhbSB7VGVtcGxhdGVJbmZvfSB0ZW1wbGF0ZUluZm8gVGVtcGxhdGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGVcbiAgICAgKiBAcGFyYW0ge05vZGVJbmZvfSBub2RlSW5mbyBOb2RlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlIG5vZGVcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIHZpc2l0ZWQgbm9kZSBhZGRlZCBub2RlLXNwZWNpZmljXG4gICAgICogICBtZXRhZGF0YSB0byBgbm9kZUluZm9gXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXN9IEludGVyZmFjZXMgaW4gY2xvc3VyZSBkbyBub3QgaW5oZXJpdCBzdGF0aWNzLCBidXQgY2xhc3NlcyBkb1xuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIF9wYXJzZVRlbXBsYXRlTm9kZShub2RlLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvKSB7XG4gICAgICAvLyBUT0RPKGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1jb21waWxlci9pc3N1ZXMvMzI0MCk6XG4gICAgICAvLyAgICAgQ2hhbmdlIGJhY2sgdG8ganVzdCBzdXBlci5tZXRob2RDYWxsKClcbiAgICAgIGxldCBub3RlZCA9IHByb3BlcnR5RWZmZWN0c0Jhc2UuX3BhcnNlVGVtcGxhdGVOb2RlLmNhbGwoXG4gICAgICAgIHRoaXMsIG5vZGUsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8pO1xuICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSB7XG4gICAgICAgIGxldCBwYXJ0cyA9IHRoaXMuX3BhcnNlQmluZGluZ3Mobm9kZS50ZXh0Q29udGVudCwgdGVtcGxhdGVJbmZvKTtcbiAgICAgICAgaWYgKHBhcnRzKSB7XG4gICAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgdGV4dENvbnRlbnQgd2l0aCBhbnkgbGl0ZXJhbCBwYXJ0c1xuICAgICAgICAgIC8vIE5PVEU6IGRlZmF1bHQgdG8gYSBzcGFjZSBoZXJlIHNvIHRoZSB0ZXh0Tm9kZSByZW1haW5zOyBzb21lIGJyb3dzZXJzXG4gICAgICAgICAgLy8gKElFKSBvbWl0IGFuIGVtcHR5IHRleHROb2RlIGZvbGxvd2luZyBjbG9uZU5vZGUvaW1wb3J0Tm9kZS5cbiAgICAgICAgICBub2RlLnRleHRDb250ZW50ID0gbGl0ZXJhbEZyb21QYXJ0cyhwYXJ0cykgfHwgJyAnO1xuICAgICAgICAgIGFkZEJpbmRpbmcodGhpcywgdGVtcGxhdGVJbmZvLCBub2RlSW5mbywgJ3RleHQnLCAndGV4dENvbnRlbnQnLCBwYXJ0cyk7XG4gICAgICAgICAgbm90ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbm90ZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGVzIGRlZmF1bHQgYFRlbXBsYXRlU3RhbXBgIGltcGxlbWVudGF0aW9uIHRvIGFkZCBzdXBwb3J0IGZvclxuICAgICAqIHBhcnNpbmcgYmluZGluZ3MgZnJvbSBhdHRyaWJ1dGVzLiAgQSBgYmluZGluZ3NgXG4gICAgICogYXJyYXkgaXMgYWRkZWQgdG8gYG5vZGVJbmZvYCBhbmQgcG9wdWxhdGVkIHdpdGggYmluZGluZyBtZXRhZGF0YVxuICAgICAqIHdpdGggaW5mb3JtYXRpb24gY2FwdHVyaW5nIHRoZSBiaW5kaW5nIHRhcmdldCwgYW5kIGEgYHBhcnRzYCBhcnJheVxuICAgICAqIHdpdGggb25lIG9yIG1vcmUgbWV0YWRhdGEgb2JqZWN0cyBjYXB0dXJpbmcgdGhlIHNvdXJjZShzKSBvZiB0aGVcbiAgICAgKiBiaW5kaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBub2RlIE5vZGUgdG8gcGFyc2VcbiAgICAgKiBAcGFyYW0ge1RlbXBsYXRlSW5mb30gdGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlXG4gICAgICogQHBhcmFtIHtOb2RlSW5mb30gbm9kZUluZm8gTm9kZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZSBub2RlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQXR0cmlidXRlIG5hbWVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgQXR0cmlidXRlIHZhbHVlXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSB2aXNpdGVkIG5vZGUgYWRkZWQgbm9kZS1zcGVjaWZpY1xuICAgICAqICAgbWV0YWRhdGEgdG8gYG5vZGVJbmZvYFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfSBJbnRlcmZhY2VzIGluIGNsb3N1cmUgZG8gbm90IGluaGVyaXQgc3RhdGljcywgYnV0IGNsYXNzZXMgZG9cbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBfcGFyc2VUZW1wbGF0ZU5vZGVBdHRyaWJ1dGUobm9kZSwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbywgbmFtZSwgdmFsdWUpIHtcbiAgICAgIGxldCBwYXJ0cyA9IHRoaXMuX3BhcnNlQmluZGluZ3ModmFsdWUsIHRlbXBsYXRlSW5mbyk7XG4gICAgICBpZiAocGFydHMpIHtcbiAgICAgICAgLy8gQXR0cmlidXRlIG9yIHByb3BlcnR5XG4gICAgICAgIGxldCBvcmlnTmFtZSA9IG5hbWU7XG4gICAgICAgIGxldCBraW5kID0gJ3Byb3BlcnR5JztcbiAgICAgICAgLy8gVGhlIG9ubHkgd2F5IHdlIHNlZSBhIGNhcGl0YWwgbGV0dGVyIGhlcmUgaXMgaWYgdGhlIGF0dHIgaGFzXG4gICAgICAgIC8vIGEgY2FwaXRhbCBsZXR0ZXIgaW4gaXQgcGVyIHNwZWMuIEluIHRoaXMgY2FzZSwgdG8gbWFrZSBzdXJlXG4gICAgICAgIC8vIHRoaXMgYmluZGluZyB3b3Jrcywgd2UgZ28gYWhlYWQgYW5kIG1ha2UgdGhlIGJpbmRpbmcgdG8gdGhlIGF0dHJpYnV0ZS5cbiAgICAgICAgaWYgKGNhcGl0YWxBdHRyaWJ1dGVSZWdleC50ZXN0KG5hbWUpKSB7XG4gICAgICAgICAga2luZCA9ICdhdHRyaWJ1dGUnO1xuICAgICAgICB9IGVsc2UgaWYgKG5hbWVbbmFtZS5sZW5ndGgtMV0gPT0gJyQnKSB7XG4gICAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoMCwgLTEpO1xuICAgICAgICAgIGtpbmQgPSAnYXR0cmlidXRlJztcbiAgICAgICAgfVxuICAgICAgICAvLyBJbml0aWFsaXplIGF0dHJpYnV0ZSBiaW5kaW5ncyB3aXRoIGFueSBsaXRlcmFsIHBhcnRzXG4gICAgICAgIGxldCBsaXRlcmFsID0gbGl0ZXJhbEZyb21QYXJ0cyhwYXJ0cyk7XG4gICAgICAgIGlmIChsaXRlcmFsICYmIGtpbmQgPT0gJ2F0dHJpYnV0ZScpIHtcbiAgICAgICAgICAvLyBFbnN1cmUgYSBTaGFkeUNTUyB0ZW1wbGF0ZSBzY29wZWQgc3R5bGUgaXMgbm90IHJlbW92ZWRcbiAgICAgICAgICAvLyB3aGVuIGEgY2xhc3MkIGJpbmRpbmcncyBpbml0aWFsIGxpdGVyYWwgdmFsdWUgaXMgc2V0LlxuICAgICAgICAgIGlmIChuYW1lID09ICdjbGFzcycgJiYgbm9kZS5oYXNBdHRyaWJ1dGUoJ2NsYXNzJykpIHtcbiAgICAgICAgICAgIGxpdGVyYWwgKz0gJyAnICsgbm9kZS5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKG5hbWUsIGxpdGVyYWwpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENsZWFyIGF0dHJpYnV0ZSBiZWZvcmUgcmVtb3ZpbmcsIHNpbmNlIElFIHdvbid0IGFsbG93IHJlbW92aW5nXG4gICAgICAgIC8vIGB2YWx1ZWAgYXR0cmlidXRlIGlmIGl0IHByZXZpb3VzbHkgaGFkIGEgdmFsdWUgKGNhbid0XG4gICAgICAgIC8vIHVuY29uZGl0aW9uYWxseSBzZXQgJycgYmVmb3JlIHJlbW92aW5nIHNpbmNlIGF0dHJpYnV0ZXMgd2l0aCBgJGBcbiAgICAgICAgLy8gY2FuJ3QgYmUgc2V0IHVzaW5nIHNldEF0dHJpYnV0ZSlcbiAgICAgICAgaWYgKG5vZGUubG9jYWxOYW1lID09PSAnaW5wdXQnICYmIG9yaWdOYW1lID09PSAndmFsdWUnKSB7XG4gICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUob3JpZ05hbWUsICcnKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZW1vdmUgYW5ub3RhdGlvblxuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShvcmlnTmFtZSk7XG4gICAgICAgIC8vIENhc2UgaGFja2VyeTogYXR0cmlidXRlcyBhcmUgbG93ZXItY2FzZSwgYnV0IGJpbmQgdGFyZ2V0c1xuICAgICAgICAvLyAocHJvcGVydGllcykgYXJlIGNhc2Ugc2Vuc2l0aXZlLiBHYW1iaXQgaXMgdG8gbWFwIGRhc2gtY2FzZSB0b1xuICAgICAgICAvLyBjYW1lbC1jYXNlOiBgZm9vLWJhcmAgYmVjb21lcyBgZm9vQmFyYC5cbiAgICAgICAgLy8gQXR0cmlidXRlIGJpbmRpbmdzIGFyZSBleGNlcHRlZC5cbiAgICAgICAgaWYgKGtpbmQgPT09ICdwcm9wZXJ0eScpIHtcbiAgICAgICAgICBuYW1lID0gZGFzaFRvQ2FtZWxDYXNlKG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGFkZEJpbmRpbmcodGhpcywgdGVtcGxhdGVJbmZvLCBub2RlSW5mbywga2luZCwgbmFtZSwgcGFydHMsIGxpdGVyYWwpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRPRE8oaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jbG9zdXJlLWNvbXBpbGVyL2lzc3Vlcy8zMjQwKTpcbiAgICAgICAgLy8gICAgIENoYW5nZSBiYWNrIHRvIGp1c3Qgc3VwZXIubWV0aG9kQ2FsbCgpXG4gICAgICAgIHJldHVybiBwcm9wZXJ0eUVmZmVjdHNCYXNlLl9wYXJzZVRlbXBsYXRlTm9kZUF0dHJpYnV0ZS5jYWxsKFxuICAgICAgICAgIHRoaXMsIG5vZGUsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8sIG5hbWUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgZGVmYXVsdCBgVGVtcGxhdGVTdGFtcGAgaW1wbGVtZW50YXRpb24gdG8gYWRkIHN1cHBvcnQgZm9yXG4gICAgICogYmluZGluZyB0aGUgcHJvcGVydGllcyB0aGF0IGEgbmVzdGVkIHRlbXBsYXRlIGRlcGVuZHMgb24gdG8gdGhlIHRlbXBsYXRlXG4gICAgICogYXMgYF9ob3N0Xzxwcm9wZXJ0eT5gLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtOb2RlfSBub2RlIE5vZGUgdG8gcGFyc2VcbiAgICAgKiBAcGFyYW0ge1RlbXBsYXRlSW5mb30gdGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlXG4gICAgICogQHBhcmFtIHtOb2RlSW5mb30gbm9kZUluZm8gTm9kZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZSBub2RlXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSB2aXNpdGVkIG5vZGUgYWRkZWQgbm9kZS1zcGVjaWZpY1xuICAgICAqICAgbWV0YWRhdGEgdG8gYG5vZGVJbmZvYFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfSBJbnRlcmZhY2VzIGluIGNsb3N1cmUgZG8gbm90IGluaGVyaXQgc3RhdGljcywgYnV0IGNsYXNzZXMgZG9cbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBfcGFyc2VUZW1wbGF0ZU5lc3RlZFRlbXBsYXRlKG5vZGUsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8pIHtcbiAgICAgIC8vIFRPRE8oaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jbG9zdXJlLWNvbXBpbGVyL2lzc3Vlcy8zMjQwKTpcbiAgICAgIC8vICAgICBDaGFuZ2UgYmFjayB0byBqdXN0IHN1cGVyLm1ldGhvZENhbGwoKVxuICAgICAgbGV0IG5vdGVkID0gcHJvcGVydHlFZmZlY3RzQmFzZS5fcGFyc2VUZW1wbGF0ZU5lc3RlZFRlbXBsYXRlLmNhbGwoXG4gICAgICAgIHRoaXMsIG5vZGUsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8pO1xuICAgICAgLy8gTWVyZ2UgaG9zdCBwcm9wcyBpbnRvIG91dGVyIHRlbXBsYXRlIGFuZCBhZGQgYmluZGluZ3NcbiAgICAgIGxldCBob3N0UHJvcHMgPSBub2RlSW5mby50ZW1wbGF0ZUluZm8uaG9zdFByb3BzO1xuICAgICAgbGV0IG1vZGUgPSAneyc7XG4gICAgICBmb3IgKGxldCBzb3VyY2UgaW4gaG9zdFByb3BzKSB7XG4gICAgICAgIGxldCBwYXJ0cyA9IFt7IG1vZGUsIHNvdXJjZSwgZGVwZW5kZW5jaWVzOiBbc291cmNlXSB9XTtcbiAgICAgICAgYWRkQmluZGluZyh0aGlzLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvLCAncHJvcGVydHknLCAnX2hvc3RfJyArIHNvdXJjZSwgcGFydHMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5vdGVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGxlZCB0byBwYXJzZSB0ZXh0IGluIGEgdGVtcGxhdGUgKGVpdGhlciBhdHRyaWJ1dGUgdmFsdWVzIG9yXG4gICAgICogdGV4dENvbnRlbnQpIGludG8gYmluZGluZyBtZXRhZGF0YS5cbiAgICAgKlxuICAgICAqIEFueSBvdmVycmlkZXMgb2YgdGhpcyBtZXRob2Qgc2hvdWxkIHJldHVybiBhbiBhcnJheSBvZiBiaW5kaW5nIHBhcnRcbiAgICAgKiBtZXRhZGF0YSAgcmVwcmVzZW50aW5nIG9uZSBvciBtb3JlIGJpbmRpbmdzIGZvdW5kIGluIHRoZSBwcm92aWRlZCB0ZXh0XG4gICAgICogYW5kIGFueSBcImxpdGVyYWxcIiB0ZXh0IGluIGJldHdlZW4uICBBbnkgbm9uLWxpdGVyYWwgcGFydHMgd2lsbCBiZSBwYXNzZWRcbiAgICAgKiB0byBgX2V2YWx1YXRlQmluZGluZ2Agd2hlbiBhbnkgZGVwZW5kZW5jaWVzIGNoYW5nZS4gIFRoZSBvbmx5IHJlcXVpcmVkXG4gICAgICogZmllbGRzIG9mIGVhY2ggXCJwYXJ0XCIgaW4gdGhlIHJldHVybmVkIGFycmF5IGFyZSBhcyBmb2xsb3dzOlxuICAgICAqXG4gICAgICogLSBgZGVwZW5kZW5jaWVzYCAtIEFycmF5IGNvbnRhaW5pbmcgdHJpZ2dlciBtZXRhZGF0YSBmb3IgZWFjaCBwcm9wZXJ0eVxuICAgICAqICAgdGhhdCBzaG91bGQgdHJpZ2dlciB0aGUgYmluZGluZyB0byB1cGRhdGVcbiAgICAgKiAtIGBsaXRlcmFsYCAtIFN0cmluZyBjb250YWluaW5nIHRleHQgaWYgdGhlIHBhcnQgcmVwcmVzZW50cyBhIGxpdGVyYWw7XG4gICAgICogICBpbiB0aGlzIGNhc2Ugbm8gYGRlcGVuZGVuY2llc2AgYXJlIG5lZWRlZFxuICAgICAqXG4gICAgICogQWRkaXRpb25hbCBtZXRhZGF0YSBmb3IgdXNlIGJ5IGBfZXZhbHVhdGVCaW5kaW5nYCBtYXkgYmUgcHJvdmlkZWQgaW5cbiAgICAgKiBlYWNoIHBhcnQgb2JqZWN0IGFzIG5lZWRlZC5cbiAgICAgKlxuICAgICAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGhhbmRsZXMgdGhlIGZvbGxvd2luZyB0eXBlcyBvZiBiaW5kaW5nc1xuICAgICAqIChvbmUgb3IgbW9yZSBtYXkgYmUgaW50ZXJtaXhlZCB3aXRoIGxpdGVyYWwgc3RyaW5ncyk6XG4gICAgICogLSBQcm9wZXJ0eSBiaW5kaW5nOiBgW1twcm9wXV1gXG4gICAgICogLSBQYXRoIGJpbmRpbmc6IGBbW29iamVjdC5wcm9wXV1gXG4gICAgICogLSBOZWdhdGVkIHByb3BlcnR5IG9yIHBhdGggYmluZGluZ3M6IGBbWyFwcm9wXV1gIG9yIGBbWyFvYmplY3QucHJvcF1dYFxuICAgICAqIC0gVHdvLXdheSBwcm9wZXJ0eSBvciBwYXRoIGJpbmRpbmdzIChzdXBwb3J0cyBuZWdhdGlvbik6XG4gICAgICogICBge3twcm9wfX1gLCBge3tvYmplY3QucHJvcH19YCwgYHt7IXByb3B9fWAgb3IgYHt7IW9iamVjdC5wcm9wfX1gXG4gICAgICogLSBJbmxpbmUgY29tcHV0ZWQgbWV0aG9kIChzdXBwb3J0cyBuZWdhdGlvbik6XG4gICAgICogICBgW1tjb21wdXRlKGEsICdsaXRlcmFsJywgYildXWAsIGBbWyFjb21wdXRlKGEsICdsaXRlcmFsJywgYildXWBcbiAgICAgKlxuICAgICAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHVzZXMgYSByZWd1bGFyIGV4cHJlc3Npb24gZm9yIGJlc3RcbiAgICAgKiBwZXJmb3JtYW5jZS4gSG93ZXZlciwgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiB1c2VzIGEgd2hpdGUtbGlzdCBvZlxuICAgICAqIGFsbG93ZWQgY2hhcmFjdGVycyBpbiBhIGRhdGEtYmluZGluZywgd2hpY2ggY2F1c2VzIHByb2JsZW1zIGZvclxuICAgICAqIGRhdGEtYmluZGluZ3MgdGhhdCBkbyB1c2UgY2hhcmFjdGVycyBub3QgaW4gdGhpcyB3aGl0ZS1saXN0LlxuICAgICAqXG4gICAgICogSW5zdGVhZCBvZiB1cGRhdGluZyB0aGUgd2hpdGUtbGlzdCB3aXRoIGFsbCBhbGxvd2VkIGNoYXJhY3RlcnMsXG4gICAgICogdGhlcmUgaXMgYSBTdHJpY3RCaW5kaW5nUGFyc2VyIChzZWUgbGliL21peGlucy9zdHJpY3QtYmluZGluZy1wYXJzZXIpXG4gICAgICogdGhhdCB1c2VzIGEgc3RhdGUgbWFjaGluZSBpbnN0ZWFkLiBUaGlzIHN0YXRlIG1hY2hpbmUgaXMgYWJsZSB0byBoYW5kbGVcbiAgICAgKiBhbGwgY2hhcmFjdGVycy4gSG93ZXZlciwgaXQgaXMgc2xpZ2h0bHkgbGVzcyBwZXJmb3JtYW50LCB0aGVyZWZvcmUgd2VcbiAgICAgKiBleHRyYWN0ZWQgaXQgaW50byBhIHNlcGFyYXRlIG9wdGlvbmFsIG1peGluLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgVGV4dCB0byBwYXJzZSBmcm9tIGF0dHJpYnV0ZSBvciB0ZXh0Q29udGVudFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0ZW1wbGF0ZUluZm8gQ3VycmVudCB0ZW1wbGF0ZSBtZXRhZGF0YVxuICAgICAqIEByZXR1cm4ge0FycmF5PCFCaW5kaW5nUGFydD59IEFycmF5IG9mIGJpbmRpbmcgcGFydCBtZXRhZGF0YVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBfcGFyc2VCaW5kaW5ncyh0ZXh0LCB0ZW1wbGF0ZUluZm8pIHtcbiAgICAgIGxldCBwYXJ0cyA9IFtdO1xuICAgICAgbGV0IGxhc3RJbmRleCA9IDA7XG4gICAgICBsZXQgbTtcbiAgICAgIC8vIEV4YW1wbGU6IFwibGl0ZXJhbDF7e3Byb3B9fWxpdGVyYWwyW1shY29tcHV0ZShmb28sYmFyKV1dZmluYWxcIlxuICAgICAgLy8gUmVnZXggbWF0Y2hlczpcbiAgICAgIC8vICAgICAgICBJdGVyYXRpb24gMTogIEl0ZXJhdGlvbiAyOlxuICAgICAgLy8gbVsxXTogJ3t7JyAgICAgICAgICAnW1snXG4gICAgICAvLyBtWzJdOiAnJyAgICAgICAgICAgICchJ1xuICAgICAgLy8gbVszXTogJ3Byb3AnICAgICAgICAnY29tcHV0ZShmb28sYmFyKSdcbiAgICAgIHdoaWxlICgobSA9IGJpbmRpbmdSZWdleC5leGVjKHRleHQpKSAhPT0gbnVsbCkge1xuICAgICAgICAvLyBBZGQgbGl0ZXJhbCBwYXJ0XG4gICAgICAgIGlmIChtLmluZGV4ID4gbGFzdEluZGV4KSB7XG4gICAgICAgICAgcGFydHMucHVzaCh7bGl0ZXJhbDogdGV4dC5zbGljZShsYXN0SW5kZXgsIG0uaW5kZXgpfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWRkIGJpbmRpbmcgcGFydFxuICAgICAgICBsZXQgbW9kZSA9IG1bMV1bMF07XG4gICAgICAgIGxldCBuZWdhdGUgPSBCb29sZWFuKG1bMl0pO1xuICAgICAgICBsZXQgc291cmNlID0gbVszXS50cmltKCk7XG4gICAgICAgIGxldCBjdXN0b21FdmVudCA9IGZhbHNlLCBub3RpZnlFdmVudCA9ICcnLCBjb2xvbiA9IC0xO1xuICAgICAgICBpZiAobW9kZSA9PSAneycgJiYgKGNvbG9uID0gc291cmNlLmluZGV4T2YoJzo6JykpID4gMCkge1xuICAgICAgICAgIG5vdGlmeUV2ZW50ID0gc291cmNlLnN1YnN0cmluZyhjb2xvbiArIDIpO1xuICAgICAgICAgIHNvdXJjZSA9IHNvdXJjZS5zdWJzdHJpbmcoMCwgY29sb24pO1xuICAgICAgICAgIGN1c3RvbUV2ZW50ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc2lnbmF0dXJlID0gcGFyc2VNZXRob2Qoc291cmNlKTtcbiAgICAgICAgbGV0IGRlcGVuZGVuY2llcyA9IFtdO1xuICAgICAgICBpZiAoc2lnbmF0dXJlKSB7XG4gICAgICAgICAgLy8gSW5saW5lIGNvbXB1dGVkIGZ1bmN0aW9uXG4gICAgICAgICAgbGV0IHthcmdzLCBtZXRob2ROYW1lfSA9IHNpZ25hdHVyZTtcbiAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8YXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGFyZyA9IGFyZ3NbaV07XG4gICAgICAgICAgICBpZiAoIWFyZy5saXRlcmFsKSB7XG4gICAgICAgICAgICAgIGRlcGVuZGVuY2llcy5wdXNoKGFyZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGxldCBkeW5hbWljRm5zID0gdGVtcGxhdGVJbmZvLmR5bmFtaWNGbnM7XG4gICAgICAgICAgaWYgKGR5bmFtaWNGbnMgJiYgZHluYW1pY0Zuc1ttZXRob2ROYW1lXSB8fCBzaWduYXR1cmUuc3RhdGljKSB7XG4gICAgICAgICAgICBkZXBlbmRlbmNpZXMucHVzaChtZXRob2ROYW1lKTtcbiAgICAgICAgICAgIHNpZ25hdHVyZS5keW5hbWljRm4gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBQcm9wZXJ0eSBvciBwYXRoXG4gICAgICAgICAgZGVwZW5kZW5jaWVzLnB1c2goc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKHtcbiAgICAgICAgICBzb3VyY2UsIG1vZGUsIG5lZ2F0ZSwgY3VzdG9tRXZlbnQsIHNpZ25hdHVyZSwgZGVwZW5kZW5jaWVzLFxuICAgICAgICAgIGV2ZW50OiBub3RpZnlFdmVudFxuICAgICAgICB9KTtcbiAgICAgICAgbGFzdEluZGV4ID0gYmluZGluZ1JlZ2V4Lmxhc3RJbmRleDtcbiAgICAgIH1cbiAgICAgIC8vIEFkZCBhIGZpbmFsIGxpdGVyYWwgcGFydFxuICAgICAgaWYgKGxhc3RJbmRleCAmJiBsYXN0SW5kZXggPCB0ZXh0Lmxlbmd0aCkge1xuICAgICAgICBsZXQgbGl0ZXJhbCA9IHRleHQuc3Vic3RyaW5nKGxhc3RJbmRleCk7XG4gICAgICAgIGlmIChsaXRlcmFsKSB7XG4gICAgICAgICAgcGFydHMucHVzaCh7XG4gICAgICAgICAgICBsaXRlcmFsOiBsaXRlcmFsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwYXJ0cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHBhcnRzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHRvIGV2YWx1YXRlIGEgcHJldmlvdXNseSBwYXJzZWQgYmluZGluZyBwYXJ0IGJhc2VkIG9uIGEgc2V0IG9mXG4gICAgICogb25lIG9yIG1vcmUgY2hhbmdlZCBkZXBlbmRlbmNpZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyFQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c30gaW5zdCBFbGVtZW50IHRoYXQgc2hvdWxkIGJlIHVzZWQgYXNcbiAgICAgKiAgICAgc2NvcGUgZm9yIGJpbmRpbmcgZGVwZW5kZW5jaWVzXG4gICAgICogQHBhcmFtIHtCaW5kaW5nUGFydH0gcGFydCBCaW5kaW5nIHBhcnQgbWV0YWRhdGFcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQcm9wZXJ0eS9wYXRoIHRoYXQgdHJpZ2dlcmVkIHRoaXMgZWZmZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BzIEJhZyBvZiBjdXJyZW50IHByb3BlcnR5IGNoYW5nZXNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2xkUHJvcHMgQmFnIG9mIHByZXZpb3VzIHZhbHVlcyBmb3IgY2hhbmdlZCBwcm9wZXJ0aWVzXG4gICAgICogQHBhcmFtIHtib29sZWFufSBoYXNQYXRocyBUcnVlIHdpdGggYHByb3BzYCBjb250YWlucyBvbmUgb3IgbW9yZSBwYXRoc1xuICAgICAqIEByZXR1cm4geyp9IFZhbHVlIHRoZSBiaW5kaW5nIHBhcnQgZXZhbHVhdGVkIHRvXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIF9ldmFsdWF0ZUJpbmRpbmcoaW5zdCwgcGFydCwgcGF0aCwgcHJvcHMsIG9sZFByb3BzLCBoYXNQYXRocykge1xuICAgICAgbGV0IHZhbHVlO1xuICAgICAgaWYgKHBhcnQuc2lnbmF0dXJlKSB7XG4gICAgICAgIHZhbHVlID0gcnVuTWV0aG9kRWZmZWN0KGluc3QsIHBhdGgsIHByb3BzLCBvbGRQcm9wcywgcGFydC5zaWduYXR1cmUpO1xuICAgICAgfSBlbHNlIGlmIChwYXRoICE9IHBhcnQuc291cmNlKSB7XG4gICAgICAgIHZhbHVlID0gZ2V0KGluc3QsIHBhcnQuc291cmNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChoYXNQYXRocyAmJiBpc1BhdGgocGF0aCkpIHtcbiAgICAgICAgICB2YWx1ZSA9IGdldChpbnN0LCBwYXRoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSA9IGluc3QuX19kYXRhW3BhdGhdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGFydC5uZWdhdGUpIHtcbiAgICAgICAgdmFsdWUgPSAhdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gIH1cblxuICByZXR1cm4gUHJvcGVydHlFZmZlY3RzO1xufSk7XG5cbi8qKlxuICogSGVscGVyIGFwaSBmb3IgZW5xdWV1aW5nIGNsaWVudCBkb20gY3JlYXRlZCBieSBhIGhvc3QgZWxlbWVudC5cbiAqXG4gKiBCeSBkZWZhdWx0IGVsZW1lbnRzIGFyZSBmbHVzaGVkIHZpYSBgX2ZsdXNoUHJvcGVydGllc2Agd2hlblxuICogYGNvbm5lY3RlZENhbGxiYWNrYCBpcyBjYWxsZWQuIEVsZW1lbnRzIGF0dGFjaCB0aGVpciBjbGllbnQgZG9tIHRvXG4gKiB0aGVtc2VsdmVzIGF0IGByZWFkeWAgdGltZSB3aGljaCByZXN1bHRzIGZyb20gdGhpcyBmaXJzdCBmbHVzaC5cbiAqIFRoaXMgcHJvdmlkZXMgYW4gb3JkZXJpbmcgZ3VhcmFudGVlIHRoYXQgdGhlIGNsaWVudCBkb20gYW4gZWxlbWVudFxuICogY3JlYXRlcyBpcyBmbHVzaGVkIGJlZm9yZSB0aGUgZWxlbWVudCBpdHNlbGYgKGkuZS4gY2xpZW50IGByZWFkeWBcbiAqIGZpcmVzIGJlZm9yZSBob3N0IGByZWFkeWApLlxuICpcbiAqIEhvd2V2ZXIsIGlmIGBfZmx1c2hQcm9wZXJ0aWVzYCBpcyBjYWxsZWQgKmJlZm9yZSogYW4gZWxlbWVudCBpcyBjb25uZWN0ZWQsXG4gKiBhcyBmb3IgZXhhbXBsZSBgVGVtcGxhdGl6ZWAgZG9lcywgdGhpcyBvcmRlcmluZyBndWFyYW50ZWUgY2Fubm90IGJlXG4gKiBzYXRpc2ZpZWQgYmVjYXVzZSBubyBlbGVtZW50cyBhcmUgY29ubmVjdGVkLiAoTm90ZTogQm91bmQgZWxlbWVudHMgdGhhdFxuICogcmVjZWl2ZSBkYXRhIGRvIGJlY29tZSBlbnF1ZXVlZCBjbGllbnRzIGFuZCBhcmUgcHJvcGVybHkgb3JkZXJlZCBidXRcbiAqIHVuYm91bmQgZWxlbWVudHMgYXJlIG5vdC4pXG4gKlxuICogVG8gbWFpbnRhaW4gdGhlIGRlc2lyZWQgXCJjbGllbnQgYmVmb3JlIGhvc3RcIiBvcmRlcmluZyBndWFyYW50ZWUgZm9yIHRoaXNcbiAqIGNhc2Ugd2UgcmVseSBvbiB0aGUgXCJob3N0IHN0YWNrLiBDbGllbnQgbm9kZXMgcmVnaXN0ZXJzIHRoZW1zZWx2ZXMgd2l0aFxuICogdGhlIGNyZWF0aW5nIGhvc3QgZWxlbWVudCB3aGVuIGNyZWF0ZWQuIFRoaXMgZW5zdXJlcyB0aGF0IGFsbCBjbGllbnQgZG9tXG4gKiBpcyByZWFkaWVkIGluIHRoZSBwcm9wZXIgb3JkZXIsIG1haW50YWluaW5nIHRoZSBkZXNpcmVkIGd1YXJhbnRlZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBIb3N0U3RhY2sge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnN0YWNrID0gW107XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHsqfSBpbnN0IEluc3RhbmNlIHRvIGFkZCB0byBob3N0U3RhY2tcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIHJlZ2lzdGVySG9zdChpbnN0KSB7XG4gICAgaWYgKHRoaXMuc3RhY2subGVuZ3RoKSB7XG4gICAgICBsZXQgaG9zdCA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGgtMV07XG4gICAgICBob3N0Ll9lbnF1ZXVlQ2xpZW50KGluc3QpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyp9IGluc3QgSW5zdGFuY2UgdG8gYmVnaW4gaG9zdGluZ1xuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgYmVnaW5Ib3N0aW5nKGluc3QpIHtcbiAgICB0aGlzLnN0YWNrLnB1c2goaW5zdCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHsqfSBpbnN0IEluc3RhbmNlIHRvIGVuZCBob3N0aW5nXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBlbmRIb3N0aW5nKGluc3QpIHtcbiAgICBsZXQgc3RhY2tMZW4gPSB0aGlzLnN0YWNrLmxlbmd0aDtcbiAgICBpZiAoc3RhY2tMZW4gJiYgdGhpcy5zdGFja1tzdGFja0xlbi0xXSA9PSBpbnN0KSB7XG4gICAgICB0aGlzLnN0YWNrLnBvcCgpO1xuICAgIH1cbiAgfVxufVxuY29uc3QgaG9zdFN0YWNrID0gbmV3IEhvc3RTdGFjaygpO1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuLyoqXG4gKiBUb3RhbCBudW1iZXIgb2YgUG9seW1lciBlbGVtZW50IGluc3RhbmNlcyBjcmVhdGVkLlxuICogQHR5cGUge251bWJlcn1cbiAqL1xuZXhwb3J0IGxldCBpbnN0YW5jZUNvdW50ID0gMDtcblxuZXhwb3J0IGZ1bmN0aW9uIGluY3JlbWVudEluc3RhbmNlQ291bnQoKSB7XG4gIGluc3RhbmNlQ291bnQrKztcbn1cblxuLyoqXG4gKiBBcnJheSBvZiBQb2x5bWVyIGVsZW1lbnQgY2xhc3NlcyB0aGF0IGhhdmUgYmVlbiBmaW5hbGl6ZWQuXG4gKiBAdHlwZSB7IUFycmF5PCFQb2x5bWVyRWxlbWVudENvbnN0cnVjdG9yPn1cbiAqL1xuZXhwb3J0IGNvbnN0IHJlZ2lzdHJhdGlvbnMgPSBbXTtcblxuLyoqXG4gKiBAcGFyYW0geyFQb2x5bWVyRWxlbWVudENvbnN0cnVjdG9yfSBwcm90b3R5cGUgRWxlbWVudCBwcm90b3R5cGUgdG8gbG9nXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfcmVnTG9nKHByb3RvdHlwZSkge1xuICBjb25zb2xlLmxvZygnWycgKyAvKiogQHR5cGUgez99ICovKHByb3RvdHlwZSkuaXMgKyAnXTogcmVnaXN0ZXJlZCcpO1xufVxuXG4vKipcbiAqIFJlZ2lzdGVycyBhIGNsYXNzIHByb3RvdHlwZSBmb3IgdGVsZW1ldHJ5IHB1cnBvc2VzLlxuICogQHBhcmFtIHshUG9seW1lckVsZW1lbnRDb25zdHJ1Y3Rvcn0gcHJvdG90eXBlIEVsZW1lbnQgcHJvdG90eXBlIHRvIHJlZ2lzdGVyXG4gKiBAcHJvdGVjdGVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3Rlcihwcm90b3R5cGUpIHtcbiAgcmVnaXN0cmF0aW9ucy5wdXNoKHByb3RvdHlwZSk7XG59XG5cbi8qKlxuICogTG9ncyBhbGwgZWxlbWVudHMgcmVnaXN0ZXJlZCB3aXRoIGFuIGBpc2AgdG8gdGhlIGNvbnNvbGUuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkdW1wUmVnaXN0cmF0aW9ucygpIHtcbiAgcmVnaXN0cmF0aW9ucy5mb3JFYWNoKF9yZWdMb2cpO1xufSIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgJy4uL3V0aWxzL2Jvb3QuanMnO1xuXG5pbXBvcnQgeyBkZWR1cGluZ01peGluIH0gZnJvbSAnLi4vdXRpbHMvbWl4aW4uanMnO1xuaW1wb3J0IHsgcmVnaXN0ZXIsIGluY3JlbWVudEluc3RhbmNlQ291bnQgfSBmcm9tICcuLi91dGlscy90ZWxlbWV0cnkuanMnO1xuaW1wb3J0IHsgUHJvcGVydGllc0NoYW5nZWQgfSBmcm9tICcuL3Byb3BlcnRpZXMtY2hhbmdlZC5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNvcHkgb2YgYHByb3BzYCB3aXRoIGVhY2ggcHJvcGVydHkgbm9ybWFsaXplZCBzdWNoIHRoYXRcbiAqIHVwZ3JhZGVkIGl0IGlzIGFuIG9iamVjdCB3aXRoIGF0IGxlYXN0IGEgdHlwZSBwcm9wZXJ0eSB7IHR5cGU6IFR5cGV9LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBQcm9wZXJ0aWVzIHRvIG5vcm1hbGl6ZVxuICogQHJldHVybiB7T2JqZWN0fSBDb3B5IG9mIGlucHV0IGBwcm9wc2Agd2l0aCBub3JtYWxpemVkIHByb3BlcnRpZXMgdGhhdFxuICogYXJlIGluIHRoZSBmb3JtIHt0eXBlOiBUeXBlfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplUHJvcGVydGllcyhwcm9wcykge1xuICBjb25zdCBvdXRwdXQgPSB7fTtcbiAgZm9yIChsZXQgcCBpbiBwcm9wcykge1xuICAgIGNvbnN0IG8gPSBwcm9wc1twXTtcbiAgICBvdXRwdXRbcF0gPSAodHlwZW9mIG8gPT09ICdmdW5jdGlvbicpID8ge3R5cGU6IG99IDogbztcbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufVxuXG4vKipcbiAqIE1peGluIHRoYXQgcHJvdmlkZXMgYSBtaW5pbWFsIHN0YXJ0aW5nIHBvaW50IHRvIHVzaW5nIHRoZSBQcm9wZXJ0aWVzQ2hhbmdlZFxuICogbWl4aW4gYnkgcHJvdmlkaW5nIGEgbWVjaGFuaXNtIHRvIGRlY2xhcmUgcHJvcGVydGllcyBpbiBhIHN0YXRpY1xuICogZ2V0dGVyIChlLmcuIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHsgcmV0dXJuIHsgZm9vOiBTdHJpbmcgfSB9KS4gQ2hhbmdlc1xuICogYXJlIHJlcG9ydGVkIHZpYSB0aGUgYF9wcm9wZXJ0aWVzQ2hhbmdlZGAgbWV0aG9kLlxuICpcbiAqIFRoaXMgbWl4aW4gcHJvdmlkZXMgbm8gc3BlY2lmaWMgc3VwcG9ydCBmb3IgcmVuZGVyaW5nLiBVc2VycyBhcmUgZXhwZWN0ZWRcbiAqIHRvIGNyZWF0ZSBhIFNoYWRvd1Jvb3QgYW5kIHB1dCBjb250ZW50IGludG8gaXQgYW5kIHVwZGF0ZSBpdCBpbiB3aGF0ZXZlclxuICogd2F5IG1ha2VzIHNlbnNlLiBUaGlzIGNhbiBiZSBkb25lIGluIHJlYWN0aW9uIHRvIHByb3BlcnRpZXMgY2hhbmdpbmcgYnlcbiAqIGltcGxlbWVudGluZyBgX3Byb3BlcnRpZXNDaGFuZ2VkYC5cbiAqXG4gKiBAbWl4aW5GdW5jdGlvblxuICogQHBvbHltZXJcbiAqIEBhcHBsaWVzTWl4aW4gUHJvcGVydGllc0NoYW5nZWRcbiAqIEBzdW1tYXJ5IE1peGluIHRoYXQgcHJvdmlkZXMgYSBtaW5pbWFsIHN0YXJ0aW5nIHBvaW50IGZvciB1c2luZ1xuICogdGhlIFByb3BlcnRpZXNDaGFuZ2VkIG1peGluIGJ5IHByb3ZpZGluZyBhIGRlY2xhcmF0aXZlIGBwcm9wZXJ0aWVzYCBvYmplY3QuXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtmdW5jdGlvbihuZXc6VCl9IHN1cGVyQ2xhc3MgQ2xhc3MgdG8gYXBwbHkgbWl4aW4gdG8uXG4gKiBAcmV0dXJuIHtmdW5jdGlvbihuZXc6VCl9IHN1cGVyQ2xhc3Mgd2l0aCBtaXhpbiBhcHBsaWVkLlxuICovXG5leHBvcnQgY29uc3QgUHJvcGVydGllc01peGluID0gZGVkdXBpbmdNaXhpbihzdXBlckNsYXNzID0+IHtcblxuIC8qKlxuICAqIEBjb25zdHJ1Y3RvclxuICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX1Byb3BlcnRpZXNDaGFuZ2VkfVxuICAqIEBwcml2YXRlXG4gICovXG4gY29uc3QgYmFzZSA9IFByb3BlcnRpZXNDaGFuZ2VkKHN1cGVyQ2xhc3MpO1xuXG4gLyoqXG4gICogUmV0dXJucyB0aGUgc3VwZXIgY2xhc3MgY29uc3RydWN0b3IgZm9yIHRoZSBnaXZlbiBjbGFzcywgaWYgaXQgaXMgYW5cbiAgKiBpbnN0YW5jZSBvZiB0aGUgUHJvcGVydGllc01peGluLlxuICAqXG4gICogQHBhcmFtIHshUHJvcGVydGllc01peGluQ29uc3RydWN0b3J9IGNvbnN0cnVjdG9yIFByb3BlcnRpZXNNaXhpbiBjb25zdHJ1Y3RvclxuICAqIEByZXR1cm4gez9Qcm9wZXJ0aWVzTWl4aW5Db25zdHJ1Y3Rvcn0gU3VwZXIgY2xhc3MgY29uc3RydWN0b3JcbiAgKi9cbiBmdW5jdGlvbiBzdXBlclByb3BlcnRpZXNDbGFzcyhjb25zdHJ1Y3Rvcikge1xuICAgY29uc3Qgc3VwZXJDdG9yID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGNvbnN0cnVjdG9yKTtcblxuICAgLy8gTm90ZSwgdGhlIGBQcm9wZXJ0aWVzTWl4aW5gIGNsYXNzIGJlbG93IG9ubHkgcmVmZXJzIHRvIHRoZSBjbGFzc1xuICAgLy8gZ2VuZXJhdGVkIGJ5IHRoaXMgY2FsbCB0byB0aGUgbWl4aW47IHRoZSBpbnN0YW5jZW9mIHRlc3Qgb25seSB3b3Jrc1xuICAgLy8gYmVjYXVzZSB0aGUgbWl4aW4gaXMgZGVkdXBlZCBhbmQgZ3VhcmFudGVlZCBvbmx5IHRvIGFwcGx5IG9uY2UsIGhlbmNlXG4gICAvLyBhbGwgY29uc3RydWN0b3JzIGluIGEgcHJvdG8gY2hhaW4gd2lsbCBzZWUgdGhlIHNhbWUgYFByb3BlcnRpZXNNaXhpbmBcbiAgIHJldHVybiAoc3VwZXJDdG9yLnByb3RvdHlwZSBpbnN0YW5jZW9mIFByb3BlcnRpZXNNaXhpbikgP1xuICAgICAvKiogQHR5cGUgeyFQcm9wZXJ0aWVzTWl4aW5Db25zdHJ1Y3Rvcn0gKi8gKHN1cGVyQ3RvcikgOiBudWxsO1xuIH1cblxuIC8qKlxuICAqIFJldHVybnMgYSBtZW1vaXplZCB2ZXJzaW9uIG9mIHRoZSBgcHJvcGVydGllc2Agb2JqZWN0IGZvciB0aGVcbiAgKiBnaXZlbiBjbGFzcy4gUHJvcGVydGllcyBub3QgaW4gb2JqZWN0IGZvcm1hdCBhcmUgY29udmVydGVkIHRvIGF0XG4gICogbGVhc3Qge3R5cGV9LlxuICAqXG4gICogQHBhcmFtIHtQcm9wZXJ0aWVzTWl4aW5Db25zdHJ1Y3Rvcn0gY29uc3RydWN0b3IgUHJvcGVydGllc01peGluIGNvbnN0cnVjdG9yXG4gICogQHJldHVybiB7T2JqZWN0fSBNZW1vaXplZCBwcm9wZXJ0aWVzIG9iamVjdFxuICAqL1xuIGZ1bmN0aW9uIG93blByb3BlcnRpZXMoY29uc3RydWN0b3IpIHtcbiAgIGlmICghY29uc3RydWN0b3IuaGFzT3duUHJvcGVydHkoSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnX19vd25Qcm9wZXJ0aWVzJywgY29uc3RydWN0b3IpKSkge1xuICAgICBsZXQgcHJvcHMgPSBudWxsO1xuXG4gICAgIGlmIChjb25zdHJ1Y3Rvci5oYXNPd25Qcm9wZXJ0eShKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdwcm9wZXJ0aWVzJywgY29uc3RydWN0b3IpKSkge1xuICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSBjb25zdHJ1Y3Rvci5wcm9wZXJ0aWVzO1xuXG4gICAgICAgaWYgKHByb3BlcnRpZXMpIHtcbiAgICAgICAgcHJvcHMgPSBub3JtYWxpemVQcm9wZXJ0aWVzKHByb3BlcnRpZXMpO1xuICAgICAgIH1cbiAgICAgfVxuXG4gICAgIGNvbnN0cnVjdG9yLl9fb3duUHJvcGVydGllcyA9IHByb3BzO1xuICAgfVxuICAgcmV0dXJuIGNvbnN0cnVjdG9yLl9fb3duUHJvcGVydGllcztcbiB9XG5cbiAvKipcbiAgKiBAcG9seW1lclxuICAqIEBtaXhpbkNsYXNzXG4gICogQGV4dGVuZHMge2Jhc2V9XG4gICogQGltcGxlbWVudHMge1BvbHltZXJfUHJvcGVydGllc01peGlufVxuICAqIEB1bnJlc3RyaWN0ZWRcbiAgKi9cbiBjbGFzcyBQcm9wZXJ0aWVzTWl4aW4gZXh0ZW5kcyBiYXNlIHtcblxuICAgLyoqXG4gICAgKiBJbXBsZW1lbnRzIHN0YW5kYXJkIGN1c3RvbSBlbGVtZW50cyBnZXR0ZXIgdG8gb2JzZXJ2ZXMgdGhlIGF0dHJpYnV0ZXNcbiAgICAqIGxpc3RlZCBpbiBgcHJvcGVydGllc2AuXG4gICAgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfSBJbnRlcmZhY2VzIGluIGNsb3N1cmUgZG8gbm90IGluaGVyaXQgc3RhdGljcywgYnV0IGNsYXNzZXMgZG9cbiAgICAqIEBub2NvbGxhcHNlXG4gICAgKi9cbiAgIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkge1xuICAgICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnX19vYnNlcnZlZEF0dHJpYnV0ZXMnLCB0aGlzKSkpIHtcbiAgICAgICByZWdpc3Rlcih0aGlzLnByb3RvdHlwZSk7XG4gICAgICAgY29uc3QgcHJvcHMgPSB0aGlzLl9wcm9wZXJ0aWVzO1xuICAgICAgIHRoaXMuX19vYnNlcnZlZEF0dHJpYnV0ZXMgPSBwcm9wcyA/IE9iamVjdC5rZXlzKHByb3BzKS5tYXAocCA9PiB0aGlzLmF0dHJpYnV0ZU5hbWVGb3JQcm9wZXJ0eShwKSkgOiBbXTtcbiAgICAgfVxuICAgICByZXR1cm4gdGhpcy5fX29ic2VydmVkQXR0cmlidXRlcztcbiAgIH1cblxuICAgLyoqXG4gICAgKiBGaW5hbGl6ZXMgYW4gZWxlbWVudCBkZWZpbml0aW9uLCBpbmNsdWRpbmcgZW5zdXJpbmcgYW55IHN1cGVyIGNsYXNzZXNcbiAgICAqIGFyZSBhbHNvIGZpbmFsaXplZC4gVGhpcyBpbmNsdWRlcyBlbnN1cmluZyBwcm9wZXJ0eVxuICAgICogYWNjZXNzb3JzIGV4aXN0IG9uIHRoZSBlbGVtZW50IHByb3RvdHlwZS4gVGhpcyBtZXRob2QgY2FsbHNcbiAgICAqIGBfZmluYWxpemVDbGFzc2AgdG8gZmluYWxpemUgZWFjaCBjb25zdHJ1Y3RvciBpbiB0aGUgcHJvdG90eXBlIGNoYWluLlxuICAgICogQHJldHVybiB7dm9pZH1cbiAgICAqIEBub2NvbGxhcHNlXG4gICAgKi9cbiAgIHN0YXRpYyBmaW5hbGl6ZSgpIHtcbiAgICAgaWYgKCF0aGlzLmhhc093blByb3BlcnR5KEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ19fZmluYWxpemVkJywgdGhpcykpKSB7XG4gICAgICAgY29uc3Qgc3VwZXJDdG9yID0gc3VwZXJQcm9wZXJ0aWVzQ2xhc3MoLyoqIEB0eXBlIHshUHJvcGVydGllc01peGluQ29uc3RydWN0b3J9ICovKHRoaXMpKTtcbiAgICAgICBpZiAoc3VwZXJDdG9yKSB7XG4gICAgICAgICBzdXBlckN0b3IuZmluYWxpemUoKTtcbiAgICAgICB9XG4gICAgICAgdGhpcy5fX2ZpbmFsaXplZCA9IHRydWU7XG4gICAgICAgdGhpcy5fZmluYWxpemVDbGFzcygpO1xuICAgICB9XG4gICB9XG5cbiAgIC8qKlxuICAgICogRmluYWxpemUgYW4gZWxlbWVudCBjbGFzcy4gVGhpcyBpbmNsdWRlcyBlbnN1cmluZyBwcm9wZXJ0eVxuICAgICogYWNjZXNzb3JzIGV4aXN0IG9uIHRoZSBlbGVtZW50IHByb3RvdHlwZS4gVGhpcyBtZXRob2QgaXMgY2FsbGVkIGJ5XG4gICAgKiBgZmluYWxpemVgIGFuZCBmaW5hbGl6ZXMgdGhlIGNsYXNzIGNvbnN0cnVjdG9yLlxuICAgICpcbiAgICAqIEBwcm90ZWN0ZWRcbiAgICAqIEBub2NvbGxhcHNlXG4gICAgKi9cbiAgIHN0YXRpYyBfZmluYWxpemVDbGFzcygpIHtcbiAgICAgY29uc3QgcHJvcHMgPSBvd25Qcm9wZXJ0aWVzKC8qKiBAdHlwZSB7IVByb3BlcnRpZXNNaXhpbkNvbnN0cnVjdG9yfSAqLyh0aGlzKSk7XG4gICAgIGlmIChwcm9wcykge1xuICAgICAgIC8qKiBAdHlwZSB7P30gKi8gKHRoaXMpLmNyZWF0ZVByb3BlcnRpZXMocHJvcHMpO1xuICAgICB9XG4gICB9XG5cbiAgIC8qKlxuICAgICogUmV0dXJucyBhIG1lbW9pemVkIHZlcnNpb24gb2YgYWxsIHByb3BlcnRpZXMsIGluY2x1ZGluZyB0aG9zZSBpbmhlcml0ZWRcbiAgICAqIGZyb20gc3VwZXIgY2xhc3Nlcy4gUHJvcGVydGllcyBub3QgaW4gb2JqZWN0IGZvcm1hdCBhcmUgY29udmVydGVkIHRvXG4gICAgKiBhdCBsZWFzdCB7dHlwZX0uXG4gICAgKlxuICAgICogQHJldHVybiB7T2JqZWN0fSBPYmplY3QgY29udGFpbmluZyBwcm9wZXJ0aWVzIGZvciB0aGlzIGNsYXNzXG4gICAgKiBAcHJvdGVjdGVkXG4gICAgKiBAbm9jb2xsYXBzZVxuICAgICovXG4gICBzdGF0aWMgZ2V0IF9wcm9wZXJ0aWVzKCkge1xuICAgICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoXG4gICAgICAgSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnX19wcm9wZXJ0aWVzJywgdGhpcykpKSB7XG4gICAgICAgY29uc3Qgc3VwZXJDdG9yID0gc3VwZXJQcm9wZXJ0aWVzQ2xhc3MoLyoqIEB0eXBlIHshUHJvcGVydGllc01peGluQ29uc3RydWN0b3J9ICovKHRoaXMpKTtcbiAgICAgICB0aGlzLl9fcHJvcGVydGllcyA9IE9iamVjdC5hc3NpZ24oe30sXG4gICAgICAgICBzdXBlckN0b3IgJiYgc3VwZXJDdG9yLl9wcm9wZXJ0aWVzLFxuICAgICAgICAgb3duUHJvcGVydGllcygvKiogQHR5cGUge1Byb3BlcnRpZXNNaXhpbkNvbnN0cnVjdG9yfSAqLyh0aGlzKSkpO1xuICAgICB9XG4gICAgIHJldHVybiB0aGlzLl9fcHJvcGVydGllcztcbiAgIH1cblxuICAgLyoqXG4gICAgKiBPdmVycmlkZXMgYFByb3BlcnRpZXNDaGFuZ2VkYCBtZXRob2QgdG8gcmV0dXJuIHR5cGUgc3BlY2lmaWVkIGluIHRoZVxuICAgICogc3RhdGljIGBwcm9wZXJ0aWVzYCBvYmplY3QgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgcHJvcGVydHlcbiAgICAqIEByZXR1cm4geyp9IFR5cGUgdG8gd2hpY2ggdG8gZGVzZXJpYWxpemUgYXR0cmlidXRlXG4gICAgKlxuICAgICogQHByb3RlY3RlZFxuICAgICogQG5vY29sbGFwc2VcbiAgICAqL1xuICAgc3RhdGljIHR5cGVGb3JQcm9wZXJ0eShuYW1lKSB7XG4gICAgIGNvbnN0IGluZm8gPSB0aGlzLl9wcm9wZXJ0aWVzW25hbWVdO1xuICAgICByZXR1cm4gaW5mbyAmJiBpbmZvLnR5cGU7XG4gICB9XG5cbiAgIC8qKlxuICAgICogT3ZlcnJpZGVzIGBQcm9wZXJ0aWVzQ2hhbmdlZGAgbWV0aG9kIGFuZCBhZGRzIGEgY2FsbCB0b1xuICAgICogYGZpbmFsaXplYCB3aGljaCBsYXppbHkgY29uZmlndXJlcyB0aGUgZWxlbWVudCdzIHByb3BlcnR5IGFjY2Vzc29ycy5cbiAgICAqIEBvdmVycmlkZVxuICAgICogQHJldHVybiB7dm9pZH1cbiAgICAqL1xuICAgX2luaXRpYWxpemVQcm9wZXJ0aWVzKCkge1xuICAgICBpbmNyZW1lbnRJbnN0YW5jZUNvdW50KCk7XG4gICAgIHRoaXMuY29uc3RydWN0b3IuZmluYWxpemUoKTtcbiAgICAgc3VwZXIuX2luaXRpYWxpemVQcm9wZXJ0aWVzKCk7XG4gICB9XG5cbiAgIC8qKlxuICAgICogQ2FsbGVkIHdoZW4gdGhlIGVsZW1lbnQgaXMgYWRkZWQgdG8gYSBkb2N1bWVudC5cbiAgICAqIENhbGxzIGBfZW5hYmxlUHJvcGVydGllc2AgdG8gdHVybiBvbiBwcm9wZXJ0eSBzeXN0ZW0gZnJvbVxuICAgICogYFByb3BlcnRpZXNDaGFuZ2VkYC5cbiAgICAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXN9IFN1cGVyIG1heSBvciBtYXkgbm90IGltcGxlbWVudCB0aGUgY2FsbGJhY2tcbiAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgKiBAb3ZlcnJpZGVcbiAgICAqL1xuICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgIGlmIChzdXBlci5jb25uZWN0ZWRDYWxsYmFjaykge1xuICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgIH1cbiAgICAgdGhpcy5fZW5hYmxlUHJvcGVydGllcygpO1xuICAgfVxuXG4gICAvKipcbiAgICAqIENhbGxlZCB3aGVuIHRoZSBlbGVtZW50IGlzIHJlbW92ZWQgZnJvbSBhIGRvY3VtZW50XG4gICAgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfSBTdXBlciBtYXkgb3IgbWF5IG5vdCBpbXBsZW1lbnQgdGhlIGNhbGxiYWNrXG4gICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICogQG92ZXJyaWRlXG4gICAgKi9cbiAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICBpZiAoc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2spIHtcbiAgICAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICB9XG4gICB9XG5cbiB9XG5cbiByZXR1cm4gUHJvcGVydGllc01peGluO1xuXG59KTtcbiIsIi8qKlxuICogQGZpbGVvdmVydmlld1xuICogQHN1cHByZXNzIHtjaGVja1Byb3RvdHlwYWxUeXBlc31cbiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kXG4gKiBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5XG4gKiBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dCBDb2RlIGRpc3RyaWJ1dGVkIGJ5XG4gKiBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc28gc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQXG4gKiByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbmltcG9ydCAnLi4vdXRpbHMvYm9vdC5qcyc7XG5cbmltcG9ydCB7IHJvb3RQYXRoLCBzdHJpY3RUZW1wbGF0ZVBvbGljeSwgYWxsb3dUZW1wbGF0ZUZyb21Eb21Nb2R1bGUsIGxlZ2FjeU9wdGltaXphdGlvbnMsIHN5bmNJbml0aWFsUmVuZGVyIH0gZnJvbSAnLi4vdXRpbHMvc2V0dGluZ3MuanMnO1xuaW1wb3J0IHsgZGVkdXBpbmdNaXhpbiB9IGZyb20gJy4uL3V0aWxzL21peGluLmpzJztcbmltcG9ydCB7IHN0eWxlc0Zyb21UZW1wbGF0ZSwgc3R5bGVzRnJvbU1vZHVsZUltcG9ydHMgfSBmcm9tICcuLi91dGlscy9zdHlsZS1nYXRoZXIuanMnO1xuaW1wb3J0IHsgcGF0aEZyb21VcmwsIHJlc29sdmVDc3MsIHJlc29sdmVVcmwgfSBmcm9tICcuLi91dGlscy9yZXNvbHZlLXVybC5qcyc7XG5pbXBvcnQgeyBEb21Nb2R1bGUgfSBmcm9tICcuLi9lbGVtZW50cy9kb20tbW9kdWxlLmpzJztcbmltcG9ydCB7IFByb3BlcnR5RWZmZWN0cyB9IGZyb20gJy4vcHJvcGVydHktZWZmZWN0cy5qcyc7XG5pbXBvcnQgeyBQcm9wZXJ0aWVzTWl4aW4gfSBmcm9tICcuL3Byb3BlcnRpZXMtbWl4aW4uanMnO1xuaW1wb3J0IHsgd3JhcCB9IGZyb20gJy4uL3V0aWxzL3dyYXAuanMnO1xuXG4vKipcbiAqIEN1cnJlbnQgUG9seW1lciB2ZXJzaW9uIGluIFNlbXZlciBub3RhdGlvbi5cbiAqIEB0eXBlIHtzdHJpbmd9IFNlbXZlciBub3RhdGlvbiBvZiB0aGUgY3VycmVudCB2ZXJzaW9uIG9mIFBvbHltZXIuXG4gKi9cbmV4cG9ydCBjb25zdCB2ZXJzaW9uID0gJzMuMy4xJztcblxuY29uc3QgYnVpbHRDU1MgPSB3aW5kb3cuU2hhZHlDU1MgJiYgd2luZG93LlNoYWR5Q1NTWydjc3NCdWlsZCddO1xuXG4vKipcbiAqIEVsZW1lbnQgY2xhc3MgbWl4aW4gdGhhdCBwcm92aWRlcyB0aGUgY29yZSBBUEkgZm9yIFBvbHltZXIncyBtZXRhLXByb2dyYW1taW5nXG4gKiBmZWF0dXJlcyBpbmNsdWRpbmcgdGVtcGxhdGUgc3RhbXBpbmcsIGRhdGEtYmluZGluZywgYXR0cmlidXRlIGRlc2VyaWFsaXphdGlvbixcbiAqIGFuZCBwcm9wZXJ0eSBjaGFuZ2Ugb2JzZXJ2YXRpb24uXG4gKlxuICogU3ViY2xhc3NlcnMgbWF5IHByb3ZpZGUgdGhlIGZvbGxvd2luZyBzdGF0aWMgZ2V0dGVycyB0byByZXR1cm4gbWV0YWRhdGFcbiAqIHVzZWQgdG8gY29uZmlndXJlIFBvbHltZXIncyBmZWF0dXJlcyBmb3IgdGhlIGNsYXNzOlxuICpcbiAqIC0gYHN0YXRpYyBnZXQgaXMoKWA6IFdoZW4gdGhlIHRlbXBsYXRlIGlzIHByb3ZpZGVkIHZpYSBhIGBkb20tbW9kdWxlYCxcbiAqICAgdXNlcnMgc2hvdWxkIHJldHVybiB0aGUgYGRvbS1tb2R1bGVgIGlkIGZyb20gYSBzdGF0aWMgYGlzYCBnZXR0ZXIuICBJZlxuICogICBubyB0ZW1wbGF0ZSBpcyBuZWVkZWQgb3IgdGhlIHRlbXBsYXRlIGlzIHByb3ZpZGVkIGRpcmVjdGx5IHZpYSB0aGVcbiAqICAgYHRlbXBsYXRlYCBnZXR0ZXIsIHRoZXJlIGlzIG5vIG5lZWQgdG8gZGVmaW5lIGBpc2AgZm9yIHRoZSBlbGVtZW50LlxuICpcbiAqIC0gYHN0YXRpYyBnZXQgdGVtcGxhdGUoKWA6IFVzZXJzIG1heSBwcm92aWRlIHRoZSB0ZW1wbGF0ZSBkaXJlY3RseSAoYXNcbiAqICAgb3Bwb3NlZCB0byB2aWEgYGRvbS1tb2R1bGVgKSBieSBpbXBsZW1lbnRpbmcgYSBzdGF0aWMgYHRlbXBsYXRlYCBnZXR0ZXIuXG4gKiAgIFRoZSBnZXR0ZXIgbXVzdCByZXR1cm4gYW4gYEhUTUxUZW1wbGF0ZUVsZW1lbnRgLlxuICpcbiAqIC0gYHN0YXRpYyBnZXQgcHJvcGVydGllcygpYDogU2hvdWxkIHJldHVybiBhbiBvYmplY3QgZGVzY3JpYmluZ1xuICogICBwcm9wZXJ0eS1yZWxhdGVkIG1ldGFkYXRhIHVzZWQgYnkgUG9seW1lciBmZWF0dXJlcyAoa2V5OiBwcm9wZXJ0eSBuYW1lXG4gKiAgIHZhbHVlOiBvYmplY3QgY29udGFpbmluZyBwcm9wZXJ0eSBtZXRhZGF0YSkuIFZhbGlkIGtleXMgaW4gcGVyLXByb3BlcnR5XG4gKiAgIG1ldGFkYXRhIGluY2x1ZGU6XG4gKiAgIC0gYHR5cGVgIChTdHJpbmd8TnVtYmVyfE9iamVjdHxBcnJheXwuLi4pOiBVc2VkIGJ5XG4gKiAgICAgYGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFja2AgdG8gZGV0ZXJtaW5lIGhvdyBzdHJpbmctYmFzZWQgYXR0cmlidXRlc1xuICogICAgIGFyZSBkZXNlcmlhbGl6ZWQgdG8gSmF2YVNjcmlwdCBwcm9wZXJ0eSB2YWx1ZXMuXG4gKiAgIC0gYG5vdGlmeWAgKGJvb2xlYW4pOiBDYXVzZXMgYSBjaGFuZ2UgaW4gdGhlIHByb3BlcnR5IHRvIGZpcmUgYVxuICogICAgIG5vbi1idWJibGluZyBldmVudCBjYWxsZWQgYDxwcm9wZXJ0eT4tY2hhbmdlZGAuIEVsZW1lbnRzIHRoYXQgaGF2ZVxuICogICAgIGVuYWJsZWQgdHdvLXdheSBiaW5kaW5nIHRvIHRoZSBwcm9wZXJ0eSB1c2UgdGhpcyBldmVudCB0byBvYnNlcnZlIGNoYW5nZXMuXG4gKiAgIC0gYHJlYWRPbmx5YCAoYm9vbGVhbik6IENyZWF0ZXMgYSBnZXR0ZXIgZm9yIHRoZSBwcm9wZXJ0eSwgYnV0IG5vIHNldHRlci5cbiAqICAgICBUbyBzZXQgYSByZWFkLW9ubHkgcHJvcGVydHksIHVzZSB0aGUgcHJpdmF0ZSBzZXR0ZXIgbWV0aG9kXG4gKiAgICAgYF9zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpYC5cbiAqICAgLSBgb2JzZXJ2ZXJgIChzdHJpbmcpOiBPYnNlcnZlciBtZXRob2QgbmFtZSB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW5cbiAqICAgICB0aGUgcHJvcGVydHkgY2hhbmdlcy4gVGhlIGFyZ3VtZW50cyBvZiB0aGUgbWV0aG9kIGFyZVxuICogICAgIGAodmFsdWUsIHByZXZpb3VzVmFsdWUpYC5cbiAqICAgLSBgY29tcHV0ZWRgIChzdHJpbmcpOiBTdHJpbmcgZGVzY3JpYmluZyBtZXRob2QgYW5kIGRlcGVuZGVudCBwcm9wZXJ0aWVzXG4gKiAgICAgZm9yIGNvbXB1dGluZyB0aGUgdmFsdWUgb2YgdGhpcyBwcm9wZXJ0eSAoZS5nLiBgJ2NvbXB1dGVGb28oYmFyLCB6b3QpJ2ApLlxuICogICAgIENvbXB1dGVkIHByb3BlcnRpZXMgYXJlIHJlYWQtb25seSBieSBkZWZhdWx0IGFuZCBjYW4gb25seSBiZSBjaGFuZ2VkXG4gKiAgICAgdmlhIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGNvbXB1dGluZyBtZXRob2QuXG4gKlxuICogLSBgc3RhdGljIGdldCBvYnNlcnZlcnMoKWA6IEFycmF5IG9mIHN0cmluZ3MgZGVzY3JpYmluZyBtdWx0aS1wcm9wZXJ0eVxuICogICBvYnNlcnZlciBtZXRob2RzIGFuZCB0aGVpciBkZXBlbmRlbnQgcHJvcGVydGllcyAoZS5nLlxuICogICBgJ29ic2VydmVBQkMoYSwgYiwgYyknYCkuXG4gKlxuICogVGhlIGJhc2UgY2xhc3MgcHJvdmlkZXMgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbnMgZm9yIHRoZSBmb2xsb3dpbmcgc3RhbmRhcmRcbiAqIGN1c3RvbSBlbGVtZW50IGxpZmVjeWNsZSBjYWxsYmFja3M7IHVzZXJzIG1heSBvdmVycmlkZSB0aGVzZSwgYnV0IHNob3VsZFxuICogY2FsbCB0aGUgc3VwZXIgbWV0aG9kIHRvIGVuc3VyZVxuICogLSBgY29uc3RydWN0b3JgOiBSdW4gd2hlbiB0aGUgZWxlbWVudCBpcyBjcmVhdGVkIG9yIHVwZ3JhZGVkXG4gKiAtIGBjb25uZWN0ZWRDYWxsYmFja2A6IFJ1biBlYWNoIHRpbWUgdGhlIGVsZW1lbnQgaXMgY29ubmVjdGVkIHRvIHRoZVxuICogICBkb2N1bWVudFxuICogLSBgZGlzY29ubmVjdGVkQ2FsbGJhY2tgOiBSdW4gZWFjaCB0aW1lIHRoZSBlbGVtZW50IGlzIGRpc2Nvbm5lY3RlZCBmcm9tXG4gKiAgIHRoZSBkb2N1bWVudFxuICogLSBgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrYDogUnVuIGVhY2ggdGltZSBhbiBhdHRyaWJ1dGUgaW5cbiAqICAgYG9ic2VydmVkQXR0cmlidXRlc2AgaXMgc2V0IG9yIHJlbW92ZWQgKG5vdGU6IHRoaXMgZWxlbWVudCdzIGRlZmF1bHRcbiAqICAgYG9ic2VydmVkQXR0cmlidXRlc2AgaW1wbGVtZW50YXRpb24gd2lsbCBhdXRvbWF0aWNhbGx5IHJldHVybiBhbiBhcnJheVxuICogICBvZiBkYXNoLWNhc2VkIGF0dHJpYnV0ZXMgYmFzZWQgb24gYHByb3BlcnRpZXNgKVxuICpcbiAqIEBtaXhpbkZ1bmN0aW9uXG4gKiBAcG9seW1lclxuICogQGFwcGxpZXNNaXhpbiBQcm9wZXJ0eUVmZmVjdHNcbiAqIEBhcHBsaWVzTWl4aW4gUHJvcGVydGllc01peGluXG4gKiBAcHJvcGVydHkgcm9vdFBhdGgge3N0cmluZ30gU2V0IHRvIHRoZSB2YWx1ZSBvZiBgcm9vdFBhdGhgLFxuICogICB3aGljaCBkZWZhdWx0cyB0byB0aGUgbWFpbiBkb2N1bWVudCBwYXRoXG4gKiBAcHJvcGVydHkgaW1wb3J0UGF0aCB7c3RyaW5nfSBTZXQgdG8gdGhlIHZhbHVlIG9mIHRoZSBjbGFzcydzIHN0YXRpY1xuICogICBgaW1wb3J0UGF0aGAgcHJvcGVydHksIHdoaWNoIGRlZmF1bHRzIHRvIHRoZSBwYXRoIG9mIHRoaXMgZWxlbWVudCdzXG4gKiAgIGBkb20tbW9kdWxlYCAod2hlbiBgaXNgIGlzIHVzZWQpLCBidXQgY2FuIGJlIG92ZXJyaWRkZW4gZm9yIG90aGVyXG4gKiAgIGltcG9ydCBzdHJhdGVnaWVzLlxuICogQHN1bW1hcnkgRWxlbWVudCBjbGFzcyBtaXhpbiB0aGF0IHByb3ZpZGVzIHRoZSBjb3JlIEFQSSBmb3IgUG9seW1lcidzXG4gKiBtZXRhLXByb2dyYW1taW5nIGZlYXR1cmVzLlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7ZnVuY3Rpb24obmV3OlQpfSBzdXBlckNsYXNzIENsYXNzIHRvIGFwcGx5IG1peGluIHRvLlxuICogQHJldHVybiB7ZnVuY3Rpb24obmV3OlQpfSBzdXBlckNsYXNzIHdpdGggbWl4aW4gYXBwbGllZC5cbiAqL1xuZXhwb3J0IGNvbnN0IEVsZW1lbnRNaXhpbiA9IGRlZHVwaW5nTWl4aW4oYmFzZSA9PiB7XG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGltcGxlbWVudHMge1BvbHltZXJfUHJvcGVydHlFZmZlY3RzfVxuICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9Qcm9wZXJ0aWVzTWl4aW59XG4gICAqIEBleHRlbmRzIHtIVE1MRWxlbWVudH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNvbnN0IHBvbHltZXJFbGVtZW50QmFzZSA9IFByb3BlcnRpZXNNaXhpbihQcm9wZXJ0eUVmZmVjdHMoYmFzZSkpO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIHdpdGggZGVmYXVsdCB2YWx1ZXMuXG4gICAqIFRoaXMgbGlzdCBpcyBjcmVhdGVkIGFzIGFuIG9wdGltaXphdGlvbiBzaW5jZSBpdCBpcyBhIHN1YnNldCBvZlxuICAgKiB0aGUgbGlzdCByZXR1cm5lZCBmcm9tIGBfcHJvcGVydGllc2AuXG4gICAqIFRoaXMgbGlzdCBpcyB1c2VkIGluIGBfaW5pdGlhbGl6ZVByb3BlcnRpZXNgIHRvIHNldCBwcm9wZXJ0eSBkZWZhdWx0cy5cbiAgICpcbiAgICogQHBhcmFtIHtQb2x5bWVyRWxlbWVudENvbnN0cnVjdG9yfSBjb25zdHJ1Y3RvciBFbGVtZW50IGNsYXNzXG4gICAqIEByZXR1cm4ge1BvbHltZXJFbGVtZW50UHJvcGVydGllc30gRmxhdHRlbmVkIHByb3BlcnRpZXMgZm9yIHRoaXMgY2xhc3NcbiAgICogICB0aGF0IGhhdmUgZGVmYXVsdCB2YWx1ZXNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIHByb3BlcnR5RGVmYXVsdHMoY29uc3RydWN0b3IpIHtcbiAgICBpZiAoIWNvbnN0cnVjdG9yLmhhc093blByb3BlcnR5KFxuICAgICAgSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnX19wcm9wZXJ0eURlZmF1bHRzJywgY29uc3RydWN0b3IpKSkge1xuICAgICAgY29uc3RydWN0b3IuX19wcm9wZXJ0eURlZmF1bHRzID0gbnVsbDtcbiAgICAgIGxldCBwcm9wcyA9IGNvbnN0cnVjdG9yLl9wcm9wZXJ0aWVzO1xuICAgICAgZm9yIChsZXQgcCBpbiBwcm9wcykge1xuICAgICAgICBsZXQgaW5mbyA9IHByb3BzW3BdO1xuICAgICAgICBpZiAoJ3ZhbHVlJyBpbiBpbmZvKSB7XG4gICAgICAgICAgY29uc3RydWN0b3IuX19wcm9wZXJ0eURlZmF1bHRzID0gY29uc3RydWN0b3IuX19wcm9wZXJ0eURlZmF1bHRzIHx8IHt9O1xuICAgICAgICAgIGNvbnN0cnVjdG9yLl9fcHJvcGVydHlEZWZhdWx0c1twXSA9IGluZm87XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvbnN0cnVjdG9yLl9fcHJvcGVydHlEZWZhdWx0cztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbWVtb2l6ZWQgdmVyc2lvbiBvZiB0aGUgYG9ic2VydmVyc2AgYXJyYXkuXG4gICAqIEBwYXJhbSB7UG9seW1lckVsZW1lbnRDb25zdHJ1Y3Rvcn0gY29uc3RydWN0b3IgRWxlbWVudCBjbGFzc1xuICAgKiBAcmV0dXJuIHtBcnJheX0gQXJyYXkgY29udGFpbmluZyBvd24gb2JzZXJ2ZXJzIGZvciB0aGUgZ2l2ZW4gY2xhc3NcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgZnVuY3Rpb24gb3duT2JzZXJ2ZXJzKGNvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCFjb25zdHJ1Y3Rvci5oYXNPd25Qcm9wZXJ0eShcbiAgICAgIEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ19fb3duT2JzZXJ2ZXJzJywgY29uc3RydWN0b3IpKSkge1xuICAgICAgY29uc3RydWN0b3IuX19vd25PYnNlcnZlcnMgPVxuICAgICAgICAgIGNvbnN0cnVjdG9yLmhhc093blByb3BlcnR5KFxuICAgICAgICAgICAgICBKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdvYnNlcnZlcnMnLCBjb25zdHJ1Y3RvcikpID9cbiAgICAgICAgICAvKiogQHR5cGUge1BvbHltZXJFbGVtZW50Q29uc3RydWN0b3J9ICovIChjb25zdHJ1Y3Rvcikub2JzZXJ2ZXJzIDpcbiAgICAgICAgICBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY29uc3RydWN0b3IuX19vd25PYnNlcnZlcnM7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBlZmZlY3RzIGZvciBhIHByb3BlcnR5LlxuICAgKlxuICAgKiBOb3RlLCBvbmNlIGEgcHJvcGVydHkgaGFzIGJlZW4gc2V0IHRvXG4gICAqIGByZWFkT25seWAsIGBjb21wdXRlZGAsIGByZWZsZWN0VG9BdHRyaWJ1dGVgLCBvciBgbm90aWZ5YFxuICAgKiB0aGVzZSB2YWx1ZXMgbWF5IG5vdCBiZSBjaGFuZ2VkLiBGb3IgZXhhbXBsZSwgYSBzdWJjbGFzcyBjYW5ub3RcbiAgICogYWx0ZXIgdGhlc2Ugc2V0dGluZ3MuIEhvd2V2ZXIsIGFkZGl0aW9uYWwgYG9ic2VydmVyc2AgbWF5IGJlIGFkZGVkXG4gICAqIGJ5IHN1YmNsYXNzZXMuXG4gICAqXG4gICAqIFRoZSBpbmZvIG9iamVjdCBzaG91bGQgY29udGFpbiBwcm9wZXJ0eSBtZXRhZGF0YSBhcyBmb2xsb3dzOlxuICAgKlxuICAgKiAqIGB0eXBlYDoge2Z1bmN0aW9ufSB0eXBlIHRvIHdoaWNoIGFuIGF0dHJpYnV0ZSBtYXRjaGluZyB0aGUgcHJvcGVydHlcbiAgICogaXMgZGVzZXJpYWxpemVkLiBOb3RlIHRoZSBwcm9wZXJ0eSBpcyBjYW1lbC1jYXNlZCBmcm9tIGEgZGFzaC1jYXNlZFxuICAgKiBhdHRyaWJ1dGUuIEZvciBleGFtcGxlLCAnZm9vLWJhcicgYXR0cmlidXRlIGlzIGRlc2VyaWFsaXplZCB0byBhXG4gICAqIHByb3BlcnR5IG5hbWVkICdmb29CYXInLlxuICAgKlxuICAgKiAqIGByZWFkT25seWA6IHtib29sZWFufSBjcmVhdGVzIGEgcmVhZE9ubHkgcHJvcGVydHkgYW5kXG4gICAqIG1ha2VzIGEgcHJpdmF0ZSBzZXR0ZXIgZm9yIHRoZSBwcml2YXRlIG9mIHRoZSBmb3JtICdfc2V0Rm9vJyBmb3IgYVxuICAgKiBwcm9wZXJ0eSAnZm9vJyxcbiAgICpcbiAgICogKiBgY29tcHV0ZWRgOiB7c3RyaW5nfSBjcmVhdGVzIGEgY29tcHV0ZWQgcHJvcGVydHkuIEEgY29tcHV0ZWQgcHJvcGVydHlcbiAgICogaXMgYWxzbyBhdXRvbWF0aWNhbGx5IHNldCB0byBgcmVhZE9ubHk6IHRydWVgLiBUaGUgdmFsdWUgaXMgY2FsY3VsYXRlZFxuICAgKiBieSBydW5uaW5nIGEgbWV0aG9kIGFuZCBhcmd1bWVudHMgcGFyc2VkIGZyb20gdGhlIGdpdmVuIHN0cmluZy4gRm9yXG4gICAqIGV4YW1wbGUgJ2NvbXB1dGUoZm9vKScgd2lsbCBjb21wdXRlIGEgZ2l2ZW4gcHJvcGVydHkgd2hlbiB0aGVcbiAgICogJ2ZvbycgcHJvcGVydHkgY2hhbmdlcyBieSBleGVjdXRpbmcgdGhlICdjb21wdXRlJyBtZXRob2QuIFRoaXMgbWV0aG9kXG4gICAqIG11c3QgcmV0dXJuIHRoZSBjb21wdXRlZCB2YWx1ZS5cbiAgICpcbiAgICogKiBgcmVmbGVjdFRvQXR0cmlidXRlYDoge2Jvb2xlYW59IElmIHRydWUsIHRoZSBwcm9wZXJ0eSB2YWx1ZSBpcyByZWZsZWN0ZWRcbiAgICogdG8gYW4gYXR0cmlidXRlIG9mIHRoZSBzYW1lIG5hbWUuIE5vdGUsIHRoZSBhdHRyaWJ1dGUgaXMgZGFzaC1jYXNlZFxuICAgKiBzbyBhIHByb3BlcnR5IG5hbWVkICdmb29CYXInIGlzIHJlZmxlY3RlZCBhcyAnZm9vLWJhcicuXG4gICAqXG4gICAqICogYG5vdGlmeWA6IHtib29sZWFufSBzZW5kcyBhIG5vbi1idWJibGluZyBub3RpZmljYXRpb24gZXZlbnQgd2hlblxuICAgKiB0aGUgcHJvcGVydHkgY2hhbmdlcy4gRm9yIGV4YW1wbGUsIGEgcHJvcGVydHkgbmFtZWQgJ2Zvbycgc2VuZHMgYW5cbiAgICogZXZlbnQgbmFtZWQgJ2Zvby1jaGFuZ2VkJyB3aXRoIGBldmVudC5kZXRhaWxgIHNldCB0byB0aGUgdmFsdWUgb2ZcbiAgICogdGhlIHByb3BlcnR5LlxuICAgKlxuICAgKiAqIG9ic2VydmVyOiB7c3RyaW5nfSBuYW1lIG9mIGEgbWV0aG9kIHRoYXQgcnVucyB3aGVuIHRoZSBwcm9wZXJ0eVxuICAgKiBjaGFuZ2VzLiBUaGUgYXJndW1lbnRzIG9mIHRoZSBtZXRob2QgYXJlICh2YWx1ZSwgcHJldmlvdXNWYWx1ZSkuXG4gICAqXG4gICAqIE5vdGU6IFVzZXJzIG1heSB3YW50IGNvbnRyb2wgb3ZlciBtb2RpZnlpbmcgcHJvcGVydHlcbiAgICogZWZmZWN0cyB2aWEgc3ViY2xhc3NpbmcuIEZvciBleGFtcGxlLCBhIHVzZXIgbWlnaHQgd2FudCB0byBtYWtlIGFcbiAgICogcmVmbGVjdFRvQXR0cmlidXRlIHByb3BlcnR5IG5vdCBkbyBzbyBpbiBhIHN1YmNsYXNzLiBXZSd2ZSBjaG9zZW4gdG9cbiAgICogZGlzYWJsZSB0aGlzIGJlY2F1c2UgaXQgbGVhZHMgdG8gYWRkaXRpb25hbCBjb21wbGljYXRpb24uXG4gICAqIEZvciBleGFtcGxlLCBhIHJlYWRPbmx5IGVmZmVjdCBnZW5lcmF0ZXMgYSBzcGVjaWFsIHNldHRlci4gSWYgYSBzdWJjbGFzc1xuICAgKiBkaXNhYmxlcyB0aGUgZWZmZWN0LCB0aGUgc2V0dGVyIHdvdWxkIGZhaWwgdW5leHBlY3RlZGx5LlxuICAgKiBCYXNlZCBvbiBmZWVkYmFjaywgd2UgbWF5IHdhbnQgdG8gdHJ5IHRvIG1ha2UgZWZmZWN0cyBtb3JlIG1hbGxlYWJsZVxuICAgKiBhbmQvb3IgcHJvdmlkZSBhbiBhZHZhbmNlZCBhcGkgZm9yIG1hbmlwdWxhdGluZyB0aGVtLlxuICAgKlxuICAgKiBAcGFyYW0geyFQb2x5bWVyRWxlbWVudH0gcHJvdG8gRWxlbWVudCBjbGFzcyBwcm90b3R5cGUgdG8gYWRkIGFjY2Vzc29yc1xuICAgKiAgIGFuZCBlZmZlY3RzIHRvXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIHByb3BlcnR5LlxuICAgKiBAcGFyYW0ge09iamVjdH0gaW5mbyBJbmZvIG9iamVjdCBmcm9tIHdoaWNoIHRvIGNyZWF0ZSBwcm9wZXJ0eSBlZmZlY3RzLlxuICAgKiBTdXBwb3J0ZWQga2V5czpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFsbFByb3BzIEZsYXR0ZW5lZCBtYXAgb2YgYWxsIHByb3BlcnRpZXMgZGVmaW5lZCBpbiB0aGlzXG4gICAqICAgZWxlbWVudCAoaW5jbHVkaW5nIGluaGVyaXRlZCBwcm9wZXJ0aWVzKVxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gY3JlYXRlUHJvcGVydHlGcm9tQ29uZmlnKHByb3RvLCBuYW1lLCBpbmZvLCBhbGxQcm9wcykge1xuICAgIC8vIGNvbXB1dGVkIGZvcmNlcyByZWFkT25seS4uLlxuICAgIGlmIChpbmZvLmNvbXB1dGVkKSB7XG4gICAgICBpbmZvLnJlYWRPbmx5ID0gdHJ1ZTtcbiAgICB9XG4gICAgLy8gTm90ZSwgc2luY2UgYWxsIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIHJlYWRPbmx5LCB0aGlzIHByZXZlbnRzXG4gICAgLy8gYWRkaW5nIGFkZGl0aW9uYWwgY29tcHV0ZWQgcHJvcGVydHkgZWZmZWN0cyAod2hpY2ggbGVhZHMgdG8gYSBjb25mdXNpbmdcbiAgICAvLyBzZXR1cCB3aGVyZSBtdWx0aXBsZSB0cmlnZ2VycyBmb3Igc2V0dGluZyBhIHByb3BlcnR5KVxuICAgIC8vIFdoaWxlIHdlIGRvIGhhdmUgYGhhc0NvbXB1dGVkRWZmZWN0YCB0aGlzIGlzIHNldCBvbiB0aGUgcHJvcGVydHknc1xuICAgIC8vIGRlcGVuZGVuY2llcyByYXRoZXIgdGhhbiBpdHNlbGYuXG4gICAgaWYgKGluZm8uY29tcHV0ZWQpIHtcbiAgICAgIGlmIChwcm90by5faGFzUmVhZE9ubHlFZmZlY3QobmFtZSkpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBDYW5ub3QgcmVkZWZpbmUgY29tcHV0ZWQgcHJvcGVydHkgJyR7bmFtZX0nLmApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvdG8uX2NyZWF0ZUNvbXB1dGVkUHJvcGVydHkobmFtZSwgaW5mby5jb21wdXRlZCwgYWxsUHJvcHMpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaW5mby5yZWFkT25seSAmJiAhcHJvdG8uX2hhc1JlYWRPbmx5RWZmZWN0KG5hbWUpKSB7XG4gICAgICBwcm90by5fY3JlYXRlUmVhZE9ubHlQcm9wZXJ0eShuYW1lLCAhaW5mby5jb21wdXRlZCk7XG4gICAgfSBlbHNlIGlmIChpbmZvLnJlYWRPbmx5ID09PSBmYWxzZSAmJiBwcm90by5faGFzUmVhZE9ubHlFZmZlY3QobmFtZSkpIHtcbiAgICAgIGNvbnNvbGUud2FybihgQ2Fubm90IG1ha2UgcmVhZE9ubHkgcHJvcGVydHkgJyR7bmFtZX0nIG5vbi1yZWFkT25seS5gKTtcbiAgICB9XG4gICAgaWYgKGluZm8ucmVmbGVjdFRvQXR0cmlidXRlICYmICFwcm90by5faGFzUmVmbGVjdEVmZmVjdChuYW1lKSkge1xuICAgICAgcHJvdG8uX2NyZWF0ZVJlZmxlY3RlZFByb3BlcnR5KG5hbWUpO1xuICAgIH0gZWxzZSBpZiAoaW5mby5yZWZsZWN0VG9BdHRyaWJ1dGUgPT09IGZhbHNlICYmIHByb3RvLl9oYXNSZWZsZWN0RWZmZWN0KG5hbWUpKSB7XG4gICAgICBjb25zb2xlLndhcm4oYENhbm5vdCBtYWtlIHJlZmxlY3RlZCBwcm9wZXJ0eSAnJHtuYW1lfScgbm9uLXJlZmxlY3RlZC5gKTtcbiAgICB9XG4gICAgaWYgKGluZm8ubm90aWZ5ICYmICFwcm90by5faGFzTm90aWZ5RWZmZWN0KG5hbWUpKSB7XG4gICAgICBwcm90by5fY3JlYXRlTm90aWZ5aW5nUHJvcGVydHkobmFtZSk7XG4gICAgfSBlbHNlIGlmIChpbmZvLm5vdGlmeSA9PT0gZmFsc2UgJiYgcHJvdG8uX2hhc05vdGlmeUVmZmVjdChuYW1lKSkge1xuICAgICAgY29uc29sZS53YXJuKGBDYW5ub3QgbWFrZSBub3RpZnkgcHJvcGVydHkgJyR7bmFtZX0nIG5vbi1ub3RpZnkuYCk7XG4gICAgfVxuICAgIC8vIGFsd2F5cyBhZGQgb2JzZXJ2ZXJcbiAgICBpZiAoaW5mby5vYnNlcnZlcikge1xuICAgICAgcHJvdG8uX2NyZWF0ZVByb3BlcnR5T2JzZXJ2ZXIobmFtZSwgaW5mby5vYnNlcnZlciwgYWxsUHJvcHNbaW5mby5vYnNlcnZlcl0pO1xuICAgIH1cbiAgICAvLyBhbHdheXMgY3JlYXRlIHRoZSBtYXBwaW5nIGZyb20gYXR0cmlidXRlIGJhY2sgdG8gcHJvcGVydHkgZm9yIGRlc2VyaWFsaXphdGlvbi5cbiAgICBwcm90by5fYWRkUHJvcGVydHlUb0F0dHJpYnV0ZU1hcChuYW1lKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzIGFsbCBzdHlsZSBlbGVtZW50cyBpbiB0aGUgZWxlbWVudCB0ZW1wbGF0ZS4gU3R5bGVzIHdpdGggdGhlXG4gICAqIGBpbmNsdWRlYCBhdHRyaWJ1dGUgYXJlIHByb2Nlc3NlZCBzdWNoIHRoYXQgYW55IHN0eWxlcyBpblxuICAgKiB0aGUgYXNzb2NpYXRlZCBcInN0eWxlIG1vZHVsZXNcIiBhcmUgaW5jbHVkZWQgaW4gdGhlIGVsZW1lbnQgdGVtcGxhdGUuXG4gICAqIEBwYXJhbSB7UG9seW1lckVsZW1lbnRDb25zdHJ1Y3Rvcn0ga2xhc3MgRWxlbWVudCBjbGFzc1xuICAgKiBAcGFyYW0geyFIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZSBUZW1wbGF0ZSB0byBwcm9jZXNzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpcyBOYW1lIG9mIGVsZW1lbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkkgQmFzZSBVUkkgZm9yIGVsZW1lbnRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIHByb2Nlc3NFbGVtZW50U3R5bGVzKGtsYXNzLCB0ZW1wbGF0ZSwgaXMsIGJhc2VVUkkpIHtcbiAgICBpZiAoIWJ1aWx0Q1NTKSB7XG4gICAgICBjb25zdCB0ZW1wbGF0ZVN0eWxlcyA9IHRlbXBsYXRlLmNvbnRlbnQucXVlcnlTZWxlY3RvckFsbCgnc3R5bGUnKTtcbiAgICAgIGNvbnN0IHN0eWxlc1dpdGhJbXBvcnRzID0gc3R5bGVzRnJvbVRlbXBsYXRlKHRlbXBsYXRlKTtcbiAgICAgIC8vIGluc2VydCBzdHlsZXMgZnJvbSA8bGluayByZWw9XCJpbXBvcnRcIiB0eXBlPVwiY3NzXCI+IGF0IHRoZSB0b3Agb2YgdGhlIHRlbXBsYXRlXG4gICAgICBjb25zdCBsaW5rZWRTdHlsZXMgPSBzdHlsZXNGcm9tTW9kdWxlSW1wb3J0cyhpcyk7XG4gICAgICBjb25zdCBmaXJzdFRlbXBsYXRlQ2hpbGQgPSB0ZW1wbGF0ZS5jb250ZW50LmZpcnN0RWxlbWVudENoaWxkO1xuICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgbGlua2VkU3R5bGVzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgbGV0IHMgPSBsaW5rZWRTdHlsZXNbaWR4XTtcbiAgICAgICAgcy50ZXh0Q29udGVudCA9IGtsYXNzLl9wcm9jZXNzU3R5bGVUZXh0KHMudGV4dENvbnRlbnQsIGJhc2VVUkkpO1xuICAgICAgICB0ZW1wbGF0ZS5jb250ZW50Lmluc2VydEJlZm9yZShzLCBmaXJzdFRlbXBsYXRlQ2hpbGQpO1xuICAgICAgfVxuICAgICAgLy8ga2VlcCB0cmFjayBvZiB0aGUgbGFzdCBcImNvbmNyZXRlXCIgc3R5bGUgaW4gdGhlIHRlbXBsYXRlIHdlIGhhdmUgZW5jb3VudGVyZWRcbiAgICAgIGxldCB0ZW1wbGF0ZVN0eWxlSW5kZXggPSAwO1xuICAgICAgLy8gZW5zdXJlIGFsbCBnYXRoZXJlZCBzdHlsZXMgYXJlIGFjdHVhbGx5IGluIHRoaXMgdGVtcGxhdGUuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0eWxlc1dpdGhJbXBvcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBzID0gc3R5bGVzV2l0aEltcG9ydHNbaV07XG4gICAgICAgIGxldCB0ZW1wbGF0ZVN0eWxlID0gdGVtcGxhdGVTdHlsZXNbdGVtcGxhdGVTdHlsZUluZGV4XTtcbiAgICAgICAgLy8gaWYgdGhlIHN0eWxlIGlzIG5vdCBpbiB0aGlzIHRlbXBsYXRlLCBpdCdzIGJlZW4gXCJpbmNsdWRlZFwiIGFuZFxuICAgICAgICAvLyB3ZSBwdXQgYSBjbG9uZSBvZiBpdCBpbiB0aGUgdGVtcGxhdGUgYmVmb3JlIHRoZSBzdHlsZSB0aGF0IGluY2x1ZGVkIGl0XG4gICAgICAgIGlmICh0ZW1wbGF0ZVN0eWxlICE9PSBzKSB7XG4gICAgICAgICAgcyA9IHMuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICAgIHRlbXBsYXRlU3R5bGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUocywgdGVtcGxhdGVTdHlsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGVtcGxhdGVTdHlsZUluZGV4Kys7XG4gICAgICAgIH1cbiAgICAgICAgcy50ZXh0Q29udGVudCA9IGtsYXNzLl9wcm9jZXNzU3R5bGVUZXh0KHMudGV4dENvbnRlbnQsIGJhc2VVUkkpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAod2luZG93LlNoYWR5Q1NTKSB7XG4gICAgICB3aW5kb3cuU2hhZHlDU1MucHJlcGFyZVRlbXBsYXRlKHRlbXBsYXRlLCBpcyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIExvb2sgdXAgdGVtcGxhdGUgZnJvbSBkb20tbW9kdWxlIGZvciBlbGVtZW50XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpcyBFbGVtZW50IG5hbWUgdG8gbG9vayB1cFxuICAgKiBAcmV0dXJuIHs/SFRNTFRlbXBsYXRlRWxlbWVudHx1bmRlZmluZWR9IFRlbXBsYXRlIGZvdW5kIGluIGRvbSBtb2R1bGUsIG9yXG4gICAqICAgdW5kZWZpbmVkIGlmIG5vdCBmb3VuZFxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBmdW5jdGlvbiBnZXRUZW1wbGF0ZUZyb21Eb21Nb2R1bGUoaXMpIHtcbiAgICBsZXQgdGVtcGxhdGUgPSBudWxsO1xuICAgIC8vIFVuZGVyIHN0cmljdFRlbXBsYXRlUG9saWN5IGluIDMueCssIGRvbS1tb2R1bGUgbG9va3VwIGlzIG9ubHkgYWxsb3dlZFxuICAgIC8vIHdoZW4gb3B0ZWQtaW4gdmlhIGFsbG93VGVtcGxhdGVGcm9tRG9tTW9kdWxlXG4gICAgaWYgKGlzICYmICghc3RyaWN0VGVtcGxhdGVQb2xpY3kgfHwgYWxsb3dUZW1wbGF0ZUZyb21Eb21Nb2R1bGUpKSB7XG4gICAgICB0ZW1wbGF0ZSA9IC8qKiBAdHlwZSB7P0hUTUxUZW1wbGF0ZUVsZW1lbnR9ICovIChcbiAgICAgICAgICBEb21Nb2R1bGUuaW1wb3J0KGlzLCAndGVtcGxhdGUnKSk7XG4gICAgICAvLyBVbmRlciBzdHJpY3RUZW1wbGF0ZVBvbGljeSwgcmVxdWlyZSBhbnkgZWxlbWVudCB3aXRoIGFuIGBpc2BcbiAgICAgIC8vIHNwZWNpZmllZCB0byBoYXZlIGEgZG9tLW1vZHVsZVxuICAgICAgaWYgKHN0cmljdFRlbXBsYXRlUG9saWN5ICYmICF0ZW1wbGF0ZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHN0cmljdFRlbXBsYXRlUG9saWN5OiBleHBlY3RpbmcgZG9tLW1vZHVsZSBvciBudWxsIHRlbXBsYXRlIGZvciAke2lzfWApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGVtcGxhdGU7XG4gIH1cblxuICAvKipcbiAgICogQHBvbHltZXJcbiAgICogQG1peGluQ2xhc3NcbiAgICogQHVucmVzdHJpY3RlZFxuICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9FbGVtZW50TWl4aW59XG4gICAqIEBleHRlbmRzIHtwb2x5bWVyRWxlbWVudEJhc2V9XG4gICAqL1xuICBjbGFzcyBQb2x5bWVyRWxlbWVudCBleHRlbmRzIHBvbHltZXJFbGVtZW50QmFzZSB7XG5cbiAgICAvKipcbiAgICAgKiBDdXJyZW50IFBvbHltZXIgdmVyc2lvbiBpbiBTZW12ZXIgbm90YXRpb24uXG4gICAgICogQHR5cGUge3N0cmluZ30gU2VtdmVyIG5vdGF0aW9uIG9mIHRoZSBjdXJyZW50IHZlcnNpb24gb2YgUG9seW1lci5cbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgcG9seW1lckVsZW1lbnRWZXJzaW9uKCkge1xuICAgICAgcmV0dXJuIHZlcnNpb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGUgb2YgUHJvcGVydGllc01peGluIF9maW5hbGl6ZUNsYXNzIHRvIGNyZWF0ZSBvYnNlcnZlcnMgYW5kXG4gICAgICogZmluZCB0aGUgdGVtcGxhdGUuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc30gSW50ZXJmYWNlcyBpbiBjbG9zdXJlIGRvIG5vdCBpbmhlcml0IHN0YXRpY3MsIGJ1dCBjbGFzc2VzIGRvXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgX2ZpbmFsaXplQ2xhc3MoKSB7XG4gICAgICAvLyBUT0RPKGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1jb21waWxlci9pc3N1ZXMvMzI0MCk6XG4gICAgICAvLyAgICAgQ2hhbmdlIGJhY2sgdG8ganVzdCBzdXBlci5tZXRob2RDYWxsKClcbiAgICAgIHBvbHltZXJFbGVtZW50QmFzZS5fZmluYWxpemVDbGFzcy5jYWxsKHRoaXMpO1xuICAgICAgY29uc3Qgb2JzZXJ2ZXJzID0gb3duT2JzZXJ2ZXJzKHRoaXMpO1xuICAgICAgaWYgKG9ic2VydmVycykge1xuICAgICAgICB0aGlzLmNyZWF0ZU9ic2VydmVycyhvYnNlcnZlcnMsIHRoaXMuX3Byb3BlcnRpZXMpO1xuICAgICAgfVxuICAgICAgdGhpcy5fcHJlcGFyZVRlbXBsYXRlKCk7XG4gICAgfVxuXG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgc3RhdGljIF9wcmVwYXJlVGVtcGxhdGUoKSB7XG4gICAgICAvLyBub3RlOiBjcmVhdGUgXCJ3b3JraW5nXCIgdGVtcGxhdGUgdGhhdCBpcyBmaW5hbGl6ZWQgYXQgaW5zdGFuY2UgdGltZVxuICAgICAgbGV0IHRlbXBsYXRlID0gLyoqIEB0eXBlIHtQb2x5bWVyRWxlbWVudENvbnN0cnVjdG9yfSAqLyAodGhpcykudGVtcGxhdGU7XG4gICAgICBpZiAodGVtcGxhdGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0ZW1wbGF0ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCd0ZW1wbGF0ZSBnZXR0ZXIgbXVzdCByZXR1cm4gSFRNTFRlbXBsYXRlRWxlbWVudCcpO1xuICAgICAgICAgIHRlbXBsYXRlID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmICghbGVnYWN5T3B0aW1pemF0aW9ucykge1xuICAgICAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKiBAb3ZlcnJpZGUgKi9cbiAgICAgIHRoaXMucHJvdG90eXBlLl90ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIG9mIFByb3BlcnRpZXNDaGFuZ2VkIGNyZWF0ZVByb3BlcnRpZXMgdG8gY3JlYXRlIGFjY2Vzc29yc1xuICAgICAqIGFuZCBwcm9wZXJ0eSBlZmZlY3RzIGZvciBhbGwgb2YgdGhlIHByb3BlcnRpZXMuXG4gICAgICogQHBhcmFtIHshT2JqZWN0fSBwcm9wcyAuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlUHJvcGVydGllcyhwcm9wcykge1xuICAgICAgZm9yIChsZXQgcCBpbiBwcm9wcykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eUZyb21Db25maWcoXG4gICAgICAgICAgICAvKiogQHR5cGUgez99ICovICh0aGlzLnByb3RvdHlwZSksIHAsIHByb3BzW3BdLCBwcm9wcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBvYnNlcnZlcnMgZm9yIHRoZSBnaXZlbiBgb2JzZXJ2ZXJzYCBhcnJheS5cbiAgICAgKiBMZXZlcmFnZXMgYFByb3BlcnR5RWZmZWN0c2AgdG8gY3JlYXRlIG9ic2VydmVycy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXJzIEFycmF5IG9mIG9ic2VydmVyIGRlc2NyaXB0b3JzIGZvclxuICAgICAqICAgdGhpcyBjbGFzc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkeW5hbWljRm5zIE9iamVjdCBjb250YWluaW5nIGtleXMgZm9yIGFueSBwcm9wZXJ0aWVzXG4gICAgICogICB0aGF0IGFyZSBmdW5jdGlvbnMgYW5kIHNob3VsZCB0cmlnZ2VyIHRoZSBlZmZlY3Qgd2hlbiB0aGUgZnVuY3Rpb25cbiAgICAgKiAgIHJlZmVyZW5jZSBpcyBjaGFuZ2VkXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlT2JzZXJ2ZXJzKG9ic2VydmVycywgZHluYW1pY0Zucykge1xuICAgICAgY29uc3QgcHJvdG8gPSB0aGlzLnByb3RvdHlwZTtcbiAgICAgIGZvciAobGV0IGk9MDsgaSA8IG9ic2VydmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBwcm90by5fY3JlYXRlTWV0aG9kT2JzZXJ2ZXIob2JzZXJ2ZXJzW2ldLCBkeW5hbWljRm5zKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB0ZW1wbGF0ZSB0aGF0IHdpbGwgYmUgc3RhbXBlZCBpbnRvIHRoaXMgZWxlbWVudCdzIHNoYWRvdyByb290LlxuICAgICAqXG4gICAgICogSWYgYSBgc3RhdGljIGdldCBpcygpYCBnZXR0ZXIgaXMgZGVmaW5lZCwgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb25cbiAgICAgKiB3aWxsIHJldHVybiB0aGUgZmlyc3QgYDx0ZW1wbGF0ZT5gIGluIGEgYGRvbS1tb2R1bGVgIHdob3NlIGBpZGBcbiAgICAgKiBtYXRjaGVzIHRoaXMgZWxlbWVudCdzIGBpc2AuXG4gICAgICpcbiAgICAgKiBVc2VycyBtYXkgb3ZlcnJpZGUgdGhpcyBnZXR0ZXIgdG8gcmV0dXJuIGFuIGFyYml0cmFyeSB0ZW1wbGF0ZVxuICAgICAqIChpbiB3aGljaCBjYXNlIHRoZSBgaXNgIGdldHRlciBpcyB1bm5lY2Vzc2FyeSkuIFRoZSB0ZW1wbGF0ZSByZXR1cm5lZFxuICAgICAqIG11c3QgYmUgYW4gYEhUTUxUZW1wbGF0ZUVsZW1lbnRgLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IHdoZW4gc3ViY2xhc3NpbmcsIGlmIHRoZSBzdXBlciBjbGFzcyBvdmVycm9kZSB0aGUgZGVmYXVsdFxuICAgICAqIGltcGxlbWVudGF0aW9uIGFuZCB0aGUgc3ViY2xhc3Mgd291bGQgbGlrZSB0byBwcm92aWRlIGFuIGFsdGVybmF0ZVxuICAgICAqIHRlbXBsYXRlIHZpYSBhIGBkb20tbW9kdWxlYCwgaXQgc2hvdWxkIG92ZXJyaWRlIHRoaXMgZ2V0dGVyIGFuZFxuICAgICAqIHJldHVybiBgRG9tTW9kdWxlLmltcG9ydCh0aGlzLmlzLCAndGVtcGxhdGUnKWAuXG4gICAgICpcbiAgICAgKiBJZiBhIHN1YmNsYXNzIHdvdWxkIGxpa2UgdG8gbW9kaWZ5IHRoZSBzdXBlciBjbGFzcyB0ZW1wbGF0ZSwgaXQgc2hvdWxkXG4gICAgICogY2xvbmUgaXQgcmF0aGVyIHRoYW4gbW9kaWZ5IGl0IGluIHBsYWNlLiAgSWYgdGhlIGdldHRlciBkb2VzIGV4cGVuc2l2ZVxuICAgICAqIHdvcmsgc3VjaCBhcyBjbG9uaW5nL21vZGlmeWluZyBhIHRlbXBsYXRlLCBpdCBzaG91bGQgbWVtb2l6ZSB0aGVcbiAgICAgKiB0ZW1wbGF0ZSBmb3IgbWF4aW11bSBwZXJmb3JtYW5jZTpcbiAgICAgKlxuICAgICAqICAgbGV0IG1lbW9pemVkVGVtcGxhdGU7XG4gICAgICogICBjbGFzcyBNeVN1YkNsYXNzIGV4dGVuZHMgTXlTdXBlckNsYXNzIHtcbiAgICAgKiAgICAgc3RhdGljIGdldCB0ZW1wbGF0ZSgpIHtcbiAgICAgKiAgICAgICBpZiAoIW1lbW9pemVkVGVtcGxhdGUpIHtcbiAgICAgKiAgICAgICAgIG1lbW9pemVkVGVtcGxhdGUgPSBzdXBlci50ZW1wbGF0ZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICogICAgICAgICBsZXQgc3ViQ29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAqICAgICAgICAgc3ViQ29udGVudC50ZXh0Q29udGVudCA9ICdUaGlzIGNhbWUgZnJvbSBNeVN1YkNsYXNzJztcbiAgICAgKiAgICAgICAgIG1lbW9pemVkVGVtcGxhdGUuY29udGVudC5hcHBlbmRDaGlsZChzdWJDb250ZW50KTtcbiAgICAgKiAgICAgICB9XG4gICAgICogICAgICAgcmV0dXJuIG1lbW9pemVkVGVtcGxhdGU7XG4gICAgICogICAgIH1cbiAgICAgKiAgIH1cbiAgICAgKlxuICAgICAqIEByZXR1cm4geyFIVE1MVGVtcGxhdGVFbGVtZW50fHN0cmluZ30gVGVtcGxhdGUgdG8gYmUgc3RhbXBlZFxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIGdldCB0ZW1wbGF0ZSgpIHtcbiAgICAgIC8vIEV4cGxhbmF0aW9uIG9mIHRlbXBsYXRlLXJlbGF0ZWQgcHJvcGVydGllczpcbiAgICAgIC8vIC0gY29uc3RydWN0b3IudGVtcGxhdGUgKHRoaXMgZ2V0dGVyKTogdGhlIHRlbXBsYXRlIGZvciB0aGUgY2xhc3MuXG4gICAgICAvLyAgICAgVGhpcyBjYW4gY29tZSBmcm9tIHRoZSBwcm90b3R5cGUgKGZvciBsZWdhY3kgZWxlbWVudHMpLCBmcm9tIGFcbiAgICAgIC8vICAgICBkb20tbW9kdWxlLCBvciBmcm9tIHRoZSBzdXBlciBjbGFzcydzIHRlbXBsYXRlIChvciBjYW4gYmUgb3ZlcnJpZGRlblxuICAgICAgLy8gICAgIGFsdG9nZXRoZXIgYnkgdGhlIHVzZXIpXG4gICAgICAvLyAtIGNvbnN0cnVjdG9yLl90ZW1wbGF0ZTogbWVtb2l6ZWQgdmVyc2lvbiBvZiBjb25zdHJ1Y3Rvci50ZW1wbGF0ZVxuICAgICAgLy8gLSBwcm90b3R5cGUuX3RlbXBsYXRlOiB3b3JraW5nIHRlbXBsYXRlIGZvciB0aGUgZWxlbWVudCwgd2hpY2ggd2lsbCBiZVxuICAgICAgLy8gICAgIHBhcnNlZCBhbmQgbW9kaWZpZWQgaW4gcGxhY2UuIEl0IGlzIGEgY2xvbmVkIHZlcnNpb24gb2ZcbiAgICAgIC8vICAgICBjb25zdHJ1Y3Rvci50ZW1wbGF0ZSwgc2F2ZWQgaW4gX2ZpbmFsaXplQ2xhc3MoKS4gTm90ZSB0aGF0IGJlZm9yZVxuICAgICAgLy8gICAgIHRoaXMgZ2V0dGVyIGlzIGNhbGxlZCwgZm9yIGxlZ2FjeSBlbGVtZW50cyB0aGlzIGNvdWxkIGJlIGZyb20gYVxuICAgICAgLy8gICAgIF90ZW1wbGF0ZSBmaWVsZCBvbiB0aGUgaW5mbyBvYmplY3QgcGFzc2VkIHRvIFBvbHltZXIoKSwgYSBiZWhhdmlvcixcbiAgICAgIC8vICAgICBvciBzZXQgaW4gcmVnaXN0ZXJlZCgpOyBvbmNlIHRoZSBzdGF0aWMgZ2V0dGVyIHJ1bnMsIGEgY2xvbmUgb2YgaXRcbiAgICAgIC8vICAgICB3aWxsIG92ZXJ3cml0ZSBpdCBvbiB0aGUgcHJvdG90eXBlIGFzIHRoZSB3b3JraW5nIHRlbXBsYXRlLlxuICAgICAgaWYgKCF0aGlzLmhhc093blByb3BlcnR5KEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ190ZW1wbGF0ZScsIHRoaXMpKSkge1xuICAgICAgICB0aGlzLl90ZW1wbGF0ZSA9XG4gICAgICAgICAgLy8gSWYgdXNlciBoYXMgcHV0IHRlbXBsYXRlIG9uIHByb3RvdHlwZSAoZS5nLiBpbiBsZWdhY3kgdmlhIHJlZ2lzdGVyZWRcbiAgICAgICAgICAvLyBjYWxsYmFjayBvciBpbmZvIG9iamVjdCksIHByZWZlciB0aGF0IGZpcnN0XG4gICAgICAgICAgdGhpcy5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkoSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnX3RlbXBsYXRlJywgdGhpcy5wcm90b3R5cGUpKSA/XG4gICAgICAgICAgdGhpcy5wcm90b3R5cGUuX3RlbXBsYXRlIDpcbiAgICAgICAgICAvLyBMb29rIGluIGRvbS1tb2R1bGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgZWxlbWVudCdzIGlzXG4gICAgICAgICAgKGdldFRlbXBsYXRlRnJvbURvbU1vZHVsZSgvKiogQHR5cGUge1BvbHltZXJFbGVtZW50Q29uc3RydWN0b3J9Ki8gKHRoaXMpLmlzKSB8fFxuICAgICAgICAgIC8vIE5leHQgbG9vayBmb3Igc3VwZXJjbGFzcyB0ZW1wbGF0ZSAoY2FsbCB0aGUgc3VwZXIgaW1wbCB0aGlzXG4gICAgICAgICAgLy8gd2F5IHNvIHRoYXQgYHRoaXNgIHBvaW50cyB0byB0aGUgc3VwZXJjbGFzcylcbiAgICAgICAgICBPYmplY3QuZ2V0UHJvdG90eXBlT2YoLyoqIEB0eXBlIHtQb2x5bWVyRWxlbWVudENvbnN0cnVjdG9yfSovICh0aGlzKS5wcm90b3R5cGUpLmNvbnN0cnVjdG9yLnRlbXBsYXRlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl90ZW1wbGF0ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHRlbXBsYXRlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHshSFRNTFRlbXBsYXRlRWxlbWVudHxzdHJpbmd9IHZhbHVlIFRlbXBsYXRlIHRvIHNldC5cbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBzZXQgdGVtcGxhdGUodmFsdWUpIHtcbiAgICAgIHRoaXMuX3RlbXBsYXRlID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGF0aCBtYXRjaGluZyB0aGUgdXJsIGZyb20gd2hpY2ggdGhlIGVsZW1lbnQgd2FzIGltcG9ydGVkLlxuICAgICAqXG4gICAgICogVGhpcyBwYXRoIGlzIHVzZWQgdG8gcmVzb2x2ZSB1cmwncyBpbiB0ZW1wbGF0ZSBzdHlsZSBjc3NUZXh0LlxuICAgICAqIFRoZSBgaW1wb3J0UGF0aGAgcHJvcGVydHkgaXMgYWxzbyBzZXQgb24gZWxlbWVudCBpbnN0YW5jZXMgYW5kIGNhbiBiZVxuICAgICAqIHVzZWQgdG8gY3JlYXRlIGJpbmRpbmdzIHJlbGF0aXZlIHRvIHRoZSBpbXBvcnQgcGF0aC5cbiAgICAgKlxuICAgICAqIEZvciBlbGVtZW50cyBkZWZpbmVkIGluIEVTIG1vZHVsZXMsIHVzZXJzIHNob3VsZCBpbXBsZW1lbnRcbiAgICAgKiBgc3RhdGljIGdldCBpbXBvcnRNZXRhKCkgeyByZXR1cm4gaW1wb3J0Lm1ldGE7IH1gLCBhbmQgdGhlIGRlZmF1bHRcbiAgICAgKiBpbXBsZW1lbnRhdGlvbiBvZiBgaW1wb3J0UGF0aGAgd2lsbCAgcmV0dXJuIGBpbXBvcnQubWV0YS51cmxgJ3MgcGF0aC5cbiAgICAgKiBGb3IgZWxlbWVudHMgZGVmaW5lZCBpbiBIVE1MIGltcG9ydHMsIHRoaXMgZ2V0dGVyIHdpbGwgcmV0dXJuIHRoZSBwYXRoXG4gICAgICogdG8gdGhlIGRvY3VtZW50IGNvbnRhaW5pbmcgYSBgZG9tLW1vZHVsZWAgZWxlbWVudCBtYXRjaGluZyB0aGlzXG4gICAgICogZWxlbWVudCdzIHN0YXRpYyBgaXNgIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogTm90ZSwgdGhpcyBwYXRoIHNob3VsZCBjb250YWluIGEgdHJhaWxpbmcgYC9gLlxuICAgICAqXG4gICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgaW1wb3J0IHBhdGggZm9yIHRoaXMgZWxlbWVudCBjbGFzc1xuICAgICAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXN9XG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IGltcG9ydFBhdGgoKSB7XG4gICAgICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnX2ltcG9ydFBhdGgnLCB0aGlzKSkpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuaW1wb3J0TWV0YTtcbiAgICAgICAgaWYgKG1ldGEpIHtcbiAgICAgICAgICB0aGlzLl9pbXBvcnRQYXRoID0gcGF0aEZyb21VcmwobWV0YS51cmwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IG1vZHVsZSA9IERvbU1vZHVsZS5pbXBvcnQoLyoqIEB0eXBlIHtQb2x5bWVyRWxlbWVudENvbnN0cnVjdG9yfSAqLyAodGhpcykuaXMpO1xuICAgICAgICAgIHRoaXMuX2ltcG9ydFBhdGggPSAobW9kdWxlICYmIG1vZHVsZS5hc3NldHBhdGgpIHx8XG4gICAgICAgICAgICBPYmplY3QuZ2V0UHJvdG90eXBlT2YoLyoqIEB0eXBlIHtQb2x5bWVyRWxlbWVudENvbnN0cnVjdG9yfSovICh0aGlzKS5wcm90b3R5cGUpLmNvbnN0cnVjdG9yLmltcG9ydFBhdGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9pbXBvcnRQYXRoO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgc3VwZXIoKTtcbiAgICAgIC8qKiBAdHlwZSB7SFRNTFRlbXBsYXRlRWxlbWVudH0gKi9cbiAgICAgIHRoaXMuX3RlbXBsYXRlO1xuICAgICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgICB0aGlzLl9pbXBvcnRQYXRoO1xuICAgICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgICB0aGlzLnJvb3RQYXRoO1xuICAgICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgICB0aGlzLmltcG9ydFBhdGg7XG4gICAgICAvKiogQHR5cGUge1N0YW1wZWRUZW1wbGF0ZSB8IEhUTUxFbGVtZW50IHwgU2hhZG93Um9vdH0gKi9cbiAgICAgIHRoaXMucm9vdDtcbiAgICAgIC8qKiBAdHlwZSB7IU9iamVjdDxzdHJpbmcsICFFbGVtZW50Pn0gKi9cbiAgICAgIHRoaXMuJDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgdGhlIGRlZmF1bHQgYFByb3BlcnR5QWNjZXNzb3JzYCB0byBlbnN1cmUgY2xhc3NcbiAgICAgKiBtZXRhcHJvZ3JhbW1pbmcgcmVsYXRlZCB0byBwcm9wZXJ0eSBhY2Nlc3NvcnMgYW5kIGVmZmVjdHMgaGFzXG4gICAgICogY29tcGxldGVkIChjYWxscyBgZmluYWxpemVgKS5cbiAgICAgKlxuICAgICAqIEl0IGFsc28gaW5pdGlhbGl6ZXMgYW55IHByb3BlcnR5IGRlZmF1bHRzIHByb3ZpZGVkIHZpYSBgdmFsdWVgIGluXG4gICAgICogYHByb3BlcnRpZXNgIG1ldGFkYXRhLlxuICAgICAqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAc3VwcHJlc3Mge2ludmFsaWRDYXN0cyxtaXNzaW5nUHJvcGVydGllc30gZ28vbWlzc2luZ2ZucHJvcHNcbiAgICAgKi9cbiAgICBfaW5pdGlhbGl6ZVByb3BlcnRpZXMoKSB7XG4gICAgICB0aGlzLmNvbnN0cnVjdG9yLmZpbmFsaXplKCk7XG4gICAgICAvLyBub3RlOiBmaW5hbGl6ZSB0ZW1wbGF0ZSB3aGVuIHdlIGhhdmUgYWNjZXNzIHRvIGBsb2NhbE5hbWVgIHRvXG4gICAgICAvLyBhdm9pZCBkZXBlbmRlbmNlIG9uIGBpc2AgZm9yIHBvbHlmaWxsaW5nIHN0eWxpbmcuXG4gICAgICB0aGlzLmNvbnN0cnVjdG9yLl9maW5hbGl6ZVRlbXBsYXRlKC8qKiBAdHlwZSB7IUhUTUxFbGVtZW50fSAqLyh0aGlzKS5sb2NhbE5hbWUpO1xuICAgICAgc3VwZXIuX2luaXRpYWxpemVQcm9wZXJ0aWVzKCk7XG4gICAgICAvLyBzZXQgcGF0aCBkZWZhdWx0c1xuICAgICAgdGhpcy5yb290UGF0aCA9IHJvb3RQYXRoO1xuICAgICAgdGhpcy5pbXBvcnRQYXRoID0gdGhpcy5jb25zdHJ1Y3Rvci5pbXBvcnRQYXRoO1xuICAgICAgLy8gYXBwbHkgcHJvcGVydHkgZGVmYXVsdHMuLi5cbiAgICAgIGxldCBwJCA9IHByb3BlcnR5RGVmYXVsdHModGhpcy5jb25zdHJ1Y3Rvcik7XG4gICAgICBpZiAoIXAkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IHAgaW4gcCQpIHtcbiAgICAgICAgbGV0IGluZm8gPSBwJFtwXTtcbiAgICAgICAgLy8gRG9uJ3Qgc2V0IGRlZmF1bHQgdmFsdWUgaWYgdGhlcmUgaXMgYWxyZWFkeSBhbiBvd24gcHJvcGVydHksIHdoaWNoXG4gICAgICAgIC8vIGhhcHBlbnMgd2hlbiBhIGBwcm9wZXJ0aWVzYCBwcm9wZXJ0eSB3aXRoIGRlZmF1bHQgYnV0IG5vIGVmZmVjdHMgaGFkXG4gICAgICAgIC8vIGEgcHJvcGVydHkgc2V0IChlLmcuIGJvdW5kKSBieSBpdHMgaG9zdCBiZWZvcmUgdXBncmFkZVxuICAgICAgICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkocCkpIHtcbiAgICAgICAgICBsZXQgdmFsdWUgPSB0eXBlb2YgaW5mby52YWx1ZSA9PSAnZnVuY3Rpb24nID9cbiAgICAgICAgICAgIGluZm8udmFsdWUuY2FsbCh0aGlzKSA6XG4gICAgICAgICAgICBpbmZvLnZhbHVlO1xuICAgICAgICAgIC8vIFNldCB2aWEgYF9zZXRQcm9wZXJ0eWAgaWYgdGhlcmUgaXMgYW4gYWNjZXNzb3IsIHRvIGVuYWJsZVxuICAgICAgICAgIC8vIGluaXRpYWxpemluZyByZWFkT25seSBwcm9wZXJ0eSBkZWZhdWx0c1xuICAgICAgICAgIGlmICh0aGlzLl9oYXNBY2Nlc3NvcihwKSkge1xuICAgICAgICAgICAgdGhpcy5fc2V0UGVuZGluZ1Byb3BlcnR5KHAsIHZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpc1twXSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdhdGhlciBzdHlsZSB0ZXh0IGZvciBhIHN0eWxlIGVsZW1lbnQgaW4gdGhlIHRlbXBsYXRlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNzc1RleHQgVGV4dCBjb250YWluaW5nIHN0eWxpbmcgdG8gcHJvY2Vzc1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJJIEJhc2UgVVJJIHRvIHJlYmFzZSBDU1MgcGF0aHMgYWdhaW5zdFxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHByb2Nlc3NlZCBDU1MgdGV4dFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBfcHJvY2Vzc1N0eWxlVGV4dChjc3NUZXh0LCBiYXNlVVJJKSB7XG4gICAgICByZXR1cm4gcmVzb2x2ZUNzcyhjc3NUZXh0LCBiYXNlVVJJKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIENvbmZpZ3VyZXMgYW4gZWxlbWVudCBgcHJvdG9gIHRvIGZ1bmN0aW9uIHdpdGggYSBnaXZlbiBgdGVtcGxhdGVgLlxuICAgICogVGhlIGVsZW1lbnQgbmFtZSBgaXNgIGFuZCBleHRlbmRzIGBleHRgIG11c3QgYmUgc3BlY2lmaWVkIGZvciBTaGFkeUNTU1xuICAgICogc3R5bGUgc2NvcGluZy5cbiAgICAqXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gaXMgVGFnIG5hbWUgKG9yIHR5cGUgZXh0ZW5zaW9uIG5hbWUpIGZvciB0aGlzIGVsZW1lbnRcbiAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgKiBAcHJvdGVjdGVkXG4gICAgKiBAbm9jb2xsYXBzZVxuICAgICovXG4gICAgc3RhdGljIF9maW5hbGl6ZVRlbXBsYXRlKGlzKSB7XG4gICAgICAvKiogQGNvbnN0IHtIVE1MVGVtcGxhdGVFbGVtZW50fSAqL1xuICAgICAgY29uc3QgdGVtcGxhdGUgPSB0aGlzLnByb3RvdHlwZS5fdGVtcGxhdGU7XG4gICAgICBpZiAodGVtcGxhdGUgJiYgIXRlbXBsYXRlLl9fcG9seW1lckZpbmFsaXplZCkge1xuICAgICAgICB0ZW1wbGF0ZS5fX3BvbHltZXJGaW5hbGl6ZWQgPSB0cnVlO1xuICAgICAgICBjb25zdCBpbXBvcnRQYXRoID0gdGhpcy5pbXBvcnRQYXRoO1xuICAgICAgICBjb25zdCBiYXNlVVJJID0gaW1wb3J0UGF0aCA/IHJlc29sdmVVcmwoaW1wb3J0UGF0aCkgOiAnJztcbiAgICAgICAgLy8gZS5nLiBzdXBwb3J0IGBpbmNsdWRlPVwibW9kdWxlLW5hbWVcImAsIGFuZCBTaGFkeUNTU1xuICAgICAgICBwcm9jZXNzRWxlbWVudFN0eWxlcyh0aGlzLCB0ZW1wbGF0ZSwgaXMsIGJhc2VVUkkpO1xuICAgICAgICB0aGlzLnByb3RvdHlwZS5fYmluZFRlbXBsYXRlKHRlbXBsYXRlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm92aWRlcyBhIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIHN0YW5kYXJkIEN1c3RvbSBFbGVtZW50c1xuICAgICAqIGBjb25uZWN0ZWRDYWxsYmFja2AuXG4gICAgICpcbiAgICAgKiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBlbmFibGVzIHRoZSBwcm9wZXJ0eSBlZmZlY3RzIHN5c3RlbSBhbmRcbiAgICAgKiBmbHVzaGVzIGFueSBwZW5kaW5nIHByb3BlcnRpZXMsIGFuZCB1cGRhdGVzIHNoaW1tZWQgQ1NTIHByb3BlcnRpZXNcbiAgICAgKiB3aGVuIHVzaW5nIHRoZSBTaGFkeUNTUyBzY29waW5nL2N1c3RvbSBwcm9wZXJ0aWVzIHBvbHlmaWxsLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllcywgaW52YWxpZENhc3RzfSBTdXBlciBtYXkgb3IgbWF5IG5vdFxuICAgICAqICAgICBpbXBsZW1lbnQgdGhlIGNhbGxiYWNrXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgIGlmICh3aW5kb3cuU2hhZHlDU1MgJiYgdGhpcy5fdGVtcGxhdGUpIHtcbiAgICAgICAgd2luZG93LlNoYWR5Q1NTLnN0eWxlRWxlbWVudCgvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi8odGhpcykpO1xuICAgICAgfVxuICAgICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdGFtcHMgdGhlIGVsZW1lbnQgdGVtcGxhdGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIHJlYWR5KCkge1xuICAgICAgaWYgKHRoaXMuX3RlbXBsYXRlKSB7XG4gICAgICAgIHRoaXMucm9vdCA9IHRoaXMuX3N0YW1wVGVtcGxhdGUodGhpcy5fdGVtcGxhdGUpO1xuICAgICAgICB0aGlzLiQgPSB0aGlzLnJvb3QuJDtcbiAgICAgIH1cbiAgICAgIHN1cGVyLnJlYWR5KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW1wbGVtZW50cyBgUHJvcGVydHlFZmZlY3RzYCdzIGBfcmVhZHlDbGllbnRzYCBjYWxsLiBBdHRhY2hlc1xuICAgICAqIGVsZW1lbnQgZG9tIGJ5IGNhbGxpbmcgYF9hdHRhY2hEb21gIHdpdGggdGhlIGRvbSBzdGFtcGVkIGZyb20gdGhlXG4gICAgICogZWxlbWVudCdzIHRlbXBsYXRlIHZpYSBgX3N0YW1wVGVtcGxhdGVgLiBOb3RlIHRoYXQgdGhpcyBhbGxvd3NcbiAgICAgKiBjbGllbnQgZG9tIHRvIGJlIGF0dGFjaGVkIHRvIHRoZSBlbGVtZW50IHByaW9yIHRvIGFueSBvYnNlcnZlcnNcbiAgICAgKiBydW5uaW5nLlxuICAgICAqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfcmVhZHlDbGllbnRzKCkge1xuICAgICAgaWYgKHRoaXMuX3RlbXBsYXRlKSB7XG4gICAgICAgIHRoaXMucm9vdCA9IHRoaXMuX2F0dGFjaERvbSgvKiogQHR5cGUge1N0YW1wZWRUZW1wbGF0ZX0gKi8odGhpcy5yb290KSk7XG4gICAgICB9XG4gICAgICAvLyBUaGUgc3VwZXIuX3JlYWR5Q2xpZW50cyBoZXJlIHNldHMgdGhlIGNsaWVudHMgaW5pdGlhbGl6ZWQgZmxhZy5cbiAgICAgIC8vIFdlIG11c3Qgd2FpdCB0byBkbyB0aGlzIHVudGlsIGFmdGVyIGNsaWVudCBkb20gaXMgY3JlYXRlZC9hdHRhY2hlZFxuICAgICAgLy8gc28gdGhhdCB0aGlzIGZsYWcgY2FuIGJlIGNoZWNrZWQgdG8gcHJldmVudCBub3RpZmljYXRpb25zIGZpcmVkXG4gICAgICAvLyBkdXJpbmcgdGhpcyBwcm9jZXNzIGZyb20gYmVpbmcgaGFuZGxlZCBiZWZvcmUgY2xpZW50cyBhcmUgcmVhZHkuXG4gICAgICBzdXBlci5fcmVhZHlDbGllbnRzKCk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBBdHRhY2hlcyBhbiBlbGVtZW50J3Mgc3RhbXBlZCBkb20gdG8gaXRzZWxmLiBCeSBkZWZhdWx0LFxuICAgICAqIHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBgc2hhZG93Um9vdGAgYW5kIGFkZHMgdGhlIGRvbSB0byBpdC5cbiAgICAgKiBIb3dldmVyLCB0aGlzIG1ldGhvZCBtYXkgYmUgb3ZlcnJpZGRlbiB0byBhbGxvdyBhbiBlbGVtZW50XG4gICAgICogdG8gcHV0IGl0cyBkb20gaW4gYW5vdGhlciBsb2NhdGlvbi5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEB0aHJvd3Mge0Vycm9yfVxuICAgICAqIEBzdXBwcmVzcyB7bWlzc2luZ1JldHVybn1cbiAgICAgKiBAcGFyYW0ge1N0YW1wZWRUZW1wbGF0ZX0gZG9tIHRvIGF0dGFjaCB0byB0aGUgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJuIHtTaGFkb3dSb290fSBub2RlIHRvIHdoaWNoIHRoZSBkb20gaGFzIGJlZW4gYXR0YWNoZWQuXG4gICAgICovXG4gICAgX2F0dGFjaERvbShkb20pIHtcbiAgICAgIGNvbnN0IG4gPSB3cmFwKHRoaXMpO1xuICAgICAgaWYgKG4uYXR0YWNoU2hhZG93KSB7XG4gICAgICAgIGlmIChkb20pIHtcbiAgICAgICAgICBpZiAoIW4uc2hhZG93Um9vdCkge1xuICAgICAgICAgICAgbi5hdHRhY2hTaGFkb3coe21vZGU6ICdvcGVuJywgc2hhZHlVcGdyYWRlRnJhZ21lbnQ6IGRvbX0pO1xuICAgICAgICAgICAgbi5zaGFkb3dSb290LmFwcGVuZENoaWxkKGRvbSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzeW5jSW5pdGlhbFJlbmRlciAmJiB3aW5kb3cuU2hhZHlET00pIHtcbiAgICAgICAgICAgIHdpbmRvdy5TaGFkeURPTS5mbHVzaEluaXRpYWwobi5zaGFkb3dSb290KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG4uc2hhZG93Um9vdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU2hhZG93RE9NIG5vdCBhdmFpbGFibGUuICcgK1xuICAgICAgICAgIC8vIFRPRE8oc29ydmVsbCk6IG1vdmUgdG8gY29tcGlsZS10aW1lIGNvbmRpdGlvbmFsIHdoZW4gc3VwcG9ydGVkXG4gICAgICAgICdQb2x5bWVyRWxlbWVudCBjYW4gY3JlYXRlIGRvbSBhcyBjaGlsZHJlbiBpbnN0ZWFkIG9mIGluICcgK1xuICAgICAgICAnU2hhZG93RE9NIGJ5IHNldHRpbmcgYHRoaXMucm9vdCA9IHRoaXM7XFxgIGJlZm9yZSBcXGByZWFkeVxcYC4nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHVzaW5nIHRoZSBTaGFkeUNTUyBzY29waW5nIGFuZCBjdXN0b20gcHJvcGVydHkgc2hpbSwgY2F1c2VzIGFsbFxuICAgICAqIHNoaW1tZWQgc3R5bGVzIGluIHRoaXMgZWxlbWVudCAoYW5kIGl0cyBzdWJ0cmVlKSB0byBiZSB1cGRhdGVkXG4gICAgICogYmFzZWQgb24gY3VycmVudCBjdXN0b20gcHJvcGVydHkgdmFsdWVzLlxuICAgICAqXG4gICAgICogVGhlIG9wdGlvbmFsIHBhcmFtZXRlciBvdmVycmlkZXMgaW5saW5lIGN1c3RvbSBwcm9wZXJ0eSBzdHlsZXMgd2l0aCBhblxuICAgICAqIG9iamVjdCBvZiBwcm9wZXJ0aWVzIHdoZXJlIHRoZSBrZXlzIGFyZSBDU1MgcHJvcGVydGllcywgYW5kIHRoZSB2YWx1ZXNcbiAgICAgKiBhcmUgc3RyaW5ncy5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6IGB0aGlzLnVwZGF0ZVN0eWxlcyh7Jy0tY29sb3InOiAnYmx1ZSd9KWBcbiAgICAgKlxuICAgICAqIFRoZXNlIHByb3BlcnRpZXMgYXJlIHJldGFpbmVkIHVubGVzcyBhIHZhbHVlIG9mIGBudWxsYCBpcyBzZXQuXG4gICAgICpcbiAgICAgKiBOb3RlOiBUaGlzIGZ1bmN0aW9uIGRvZXMgbm90IHN1cHBvcnQgdXBkYXRpbmcgQ1NTIG1peGlucy5cbiAgICAgKiBZb3UgY2FuIG5vdCBkeW5hbWljYWxseSBjaGFuZ2UgdGhlIHZhbHVlIG9mIGFuIGBAYXBwbHlgLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBwcm9wZXJ0aWVzIEJhZyBvZiBjdXN0b20gcHJvcGVydHkga2V5L3ZhbHVlcyB0b1xuICAgICAqICAgYXBwbHkgdG8gdGhpcyBlbGVtZW50LlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHN1cHByZXNzIHtpbnZhbGlkQ2FzdHN9XG4gICAgICovXG4gICAgdXBkYXRlU3R5bGVzKHByb3BlcnRpZXMpIHtcbiAgICAgIGlmICh3aW5kb3cuU2hhZHlDU1MpIHtcbiAgICAgICAgd2luZG93LlNoYWR5Q1NTLnN0eWxlU3VidHJlZSgvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi8odGhpcyksIHByb3BlcnRpZXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJld3JpdGVzIGEgZ2l2ZW4gVVJMIHJlbGF0aXZlIHRvIGEgYmFzZSBVUkwuIFRoZSBiYXNlIFVSTCBkZWZhdWx0cyB0b1xuICAgICAqIHRoZSBvcmlnaW5hbCBsb2NhdGlvbiBvZiB0aGUgZG9jdW1lbnQgY29udGFpbmluZyB0aGUgYGRvbS1tb2R1bGVgIGZvclxuICAgICAqIHRoaXMgZWxlbWVudC4gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gdGhlIHNhbWUgVVJMIGJlZm9yZSBhbmQgYWZ0ZXJcbiAgICAgKiBidW5kbGluZy5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIHBlcmZvcm1zIG5vIHJlc29sdXRpb24gZm9yIFVSTHMgdGhhdCBzdGFydFxuICAgICAqIHdpdGggYC9gIChhYnNvbHV0ZSBVUkxzKSBvciBgI2AgKGhhc2ggaWRlbnRpZmllcnMpLiAgRm9yIGdlbmVyYWwgcHVycG9zZVxuICAgICAqIFVSTCByZXNvbHV0aW9uLCB1c2UgYHdpbmRvdy5VUkxgLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBVUkwgdG8gcmVzb2x2ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IGJhc2UgT3B0aW9uYWwgYmFzZSBVUkwgdG8gcmVzb2x2ZSBhZ2FpbnN0LCBkZWZhdWx0c1xuICAgICAqIHRvIHRoZSBlbGVtZW50J3MgYGltcG9ydFBhdGhgXG4gICAgICogQHJldHVybiB7c3RyaW5nfSBSZXdyaXR0ZW4gVVJMIHJlbGF0aXZlIHRvIGJhc2VcbiAgICAgKi9cbiAgICByZXNvbHZlVXJsKHVybCwgYmFzZSkge1xuICAgICAgaWYgKCFiYXNlICYmIHRoaXMuaW1wb3J0UGF0aCkge1xuICAgICAgICBiYXNlID0gcmVzb2x2ZVVybCh0aGlzLmltcG9ydFBhdGgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc29sdmVVcmwodXJsLCBiYXNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgYFByb3BlcnR5RWZmZWN0c2AgdG8gYWRkIG1hcCBvZiBkeW5hbWljIGZ1bmN0aW9ucyBvblxuICAgICAqIHRlbXBsYXRlIGluZm8sIGZvciBjb25zdW1wdGlvbiBieSBgUHJvcGVydHlFZmZlY3RzYCB0ZW1wbGF0ZSBiaW5kaW5nXG4gICAgICogY29kZS4gVGhpcyBtYXAgZGV0ZXJtaW5lcyB3aGljaCBtZXRob2QgdGVtcGxhdGVzIHNob3VsZCBoYXZlIGFjY2Vzc29yc1xuICAgICAqIGNyZWF0ZWQgZm9yIHRoZW0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyFIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZSBUZW1wbGF0ZVxuICAgICAqIEBwYXJhbSB7IVRlbXBsYXRlSW5mb30gdGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlXG4gICAgICogQHBhcmFtIHshTm9kZUluZm99IG5vZGVJbmZvIE5vZGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGUuXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gLlxuICAgICAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXN9IEludGVyZmFjZXMgaW4gY2xvc3VyZSBkbyBub3QgaW5oZXJpdCBzdGF0aWNzLCBidXQgY2xhc3NlcyBkb1xuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIF9wYXJzZVRlbXBsYXRlQ29udGVudCh0ZW1wbGF0ZSwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbykge1xuICAgICAgdGVtcGxhdGVJbmZvLmR5bmFtaWNGbnMgPSB0ZW1wbGF0ZUluZm8uZHluYW1pY0ZucyB8fCB0aGlzLl9wcm9wZXJ0aWVzO1xuICAgICAgLy8gVE9ETyhodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtY29tcGlsZXIvaXNzdWVzLzMyNDApOlxuICAgICAgLy8gICAgIENoYW5nZSBiYWNrIHRvIGp1c3Qgc3VwZXIubWV0aG9kQ2FsbCgpXG4gICAgICByZXR1cm4gcG9seW1lckVsZW1lbnRCYXNlLl9wYXJzZVRlbXBsYXRlQ29udGVudC5jYWxsKFxuICAgICAgICB0aGlzLCB0ZW1wbGF0ZSwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGVzIGBQcm9wZXJ0eUVmZmVjdHNgIHRvIHdhcm4gb24gdXNlIG9mIHVuZGVjbGFyZWQgcHJvcGVydGllcyBpblxuICAgICAqIHRlbXBsYXRlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHRlbXBsYXRlSW5mbyBUZW1wbGF0ZSBtZXRhZGF0YSB0byBhZGQgZWZmZWN0IHRvXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3AgUHJvcGVydHkgdGhhdCBzaG91bGQgdHJpZ2dlciB0aGUgZWZmZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBlZmZlY3QgRWZmZWN0IG1ldGFkYXRhIG9iamVjdFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXN9IEludGVyZmFjZXMgaW4gY2xvc3VyZSBkbyBub3QgaW5oZXJpdCBzdGF0aWNzLCBidXQgY2xhc3NlcyBkb1xuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIF9hZGRUZW1wbGF0ZVByb3BlcnR5RWZmZWN0KHRlbXBsYXRlSW5mbywgcHJvcCwgZWZmZWN0KSB7XG4gICAgICAvLyBXYXJuIGlmIHByb3BlcnRpZXMgYXJlIHVzZWQgaW4gdGVtcGxhdGUgd2l0aG91dCBiZWluZyBkZWNsYXJlZC5cbiAgICAgIC8vIFByb3BlcnRpZXMgbXVzdCBiZSBsaXN0ZWQgaW4gYHByb3BlcnRpZXNgIHRvIGJlIGluY2x1ZGVkIGluXG4gICAgICAvLyBgb2JzZXJ2ZWRBdHRyaWJ1dGVzYCBzaW5jZSBDRSBWMSByZWFkcyB0aGF0IGF0IHJlZ2lzdHJhdGlvbiB0aW1lLCBhbmRcbiAgICAgIC8vIHNpbmNlIHdlIHdhbnQgdG8ga2VlcCB0ZW1wbGF0ZSBwYXJzaW5nIGxhenksIHdlIGNhbid0IGF1dG9tYXRpY2FsbHlcbiAgICAgIC8vIGFkZCB1bmRlY2xhcmVkIHByb3BlcnRpZXMgdXNlZCBpbiB0ZW1wbGF0ZXMgdG8gYG9ic2VydmVkQXR0cmlidXRlc2AuXG4gICAgICAvLyBUaGUgd2FybmluZyBpcyBvbmx5IGVuYWJsZWQgaW4gYGxlZ2FjeU9wdGltaXphdGlvbnNgIG1vZGUsIHNpbmNlXG4gICAgICAvLyB3ZSBkb24ndCB3YW50IHRvIHNwYW0gZXhpc3RpbmcgdXNlcnMgd2hvIG1pZ2h0IGhhdmUgYWRvcHRlZCB0aGVcbiAgICAgIC8vIHNob3J0aGFuZCB3aGVuIGF0dHJpYnV0ZSBkZXNlcmlhbGl6YXRpb24gaXMgbm90IGltcG9ydGFudC5cbiAgICAgIGlmIChsZWdhY3lPcHRpbWl6YXRpb25zICYmICEocHJvcCBpbiB0aGlzLl9wcm9wZXJ0aWVzKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oYFByb3BlcnR5ICcke3Byb3B9JyB1c2VkIGluIHRlbXBsYXRlIGJ1dCBub3QgZGVjbGFyZWQgaW4gJ3Byb3BlcnRpZXMnOyBgICtcbiAgICAgICAgICBgYXR0cmlidXRlIHdpbGwgbm90IGJlIG9ic2VydmVkLmApO1xuICAgICAgfVxuICAgICAgLy8gVE9ETyhodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtY29tcGlsZXIvaXNzdWVzLzMyNDApOlxuICAgICAgLy8gICAgIENoYW5nZSBiYWNrIHRvIGp1c3Qgc3VwZXIubWV0aG9kQ2FsbCgpXG4gICAgICByZXR1cm4gcG9seW1lckVsZW1lbnRCYXNlLl9hZGRUZW1wbGF0ZVByb3BlcnR5RWZmZWN0LmNhbGwoXG4gICAgICAgIHRoaXMsIHRlbXBsYXRlSW5mbywgcHJvcCwgZWZmZWN0KTtcbiAgICB9XG5cbiAgfVxuXG4gIHJldHVybiBQb2x5bWVyRWxlbWVudDtcbn0pO1xuXG4vKipcbiAqIFdoZW4gdXNpbmcgdGhlIFNoYWR5Q1NTIHNjb3BpbmcgYW5kIGN1c3RvbSBwcm9wZXJ0eSBzaGltLCBjYXVzZXMgYWxsXG4gKiBzaGltbWVkIGBzdHlsZXNgICh2aWEgYGN1c3RvbS1zdHlsZWApIGluIHRoZSBkb2N1bWVudCAoYW5kIGl0cyBzdWJ0cmVlKVxuICogdG8gYmUgdXBkYXRlZCBiYXNlZCBvbiBjdXJyZW50IGN1c3RvbSBwcm9wZXJ0eSB2YWx1ZXMuXG4gKlxuICogVGhlIG9wdGlvbmFsIHBhcmFtZXRlciBvdmVycmlkZXMgaW5saW5lIGN1c3RvbSBwcm9wZXJ0eSBzdHlsZXMgd2l0aCBhblxuICogb2JqZWN0IG9mIHByb3BlcnRpZXMgd2hlcmUgdGhlIGtleXMgYXJlIENTUyBwcm9wZXJ0aWVzLCBhbmQgdGhlIHZhbHVlc1xuICogYXJlIHN0cmluZ3MuXG4gKlxuICogRXhhbXBsZTogYHVwZGF0ZVN0eWxlcyh7Jy0tY29sb3InOiAnYmx1ZSd9KWBcbiAqXG4gKiBUaGVzZSBwcm9wZXJ0aWVzIGFyZSByZXRhaW5lZCB1bmxlc3MgYSB2YWx1ZSBvZiBgbnVsbGAgaXMgc2V0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PX0gcHJvcHMgQmFnIG9mIGN1c3RvbSBwcm9wZXJ0eSBrZXkvdmFsdWVzIHRvXG4gKiAgIGFwcGx5IHRvIHRoZSBkb2N1bWVudC5cbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmV4cG9ydCBjb25zdCB1cGRhdGVTdHlsZXMgPSBmdW5jdGlvbihwcm9wcykge1xuICBpZiAod2luZG93LlNoYWR5Q1NTKSB7XG4gICAgd2luZG93LlNoYWR5Q1NTLnN0eWxlRG9jdW1lbnQocHJvcHMpO1xuICB9XG59O1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuaW1wb3J0IHsgRWxlbWVudE1peGluLCB2ZXJzaW9uIH0gZnJvbSAnLi9saWIvbWl4aW5zL2VsZW1lbnQtbWl4aW4uanMnO1xuZXhwb3J0IHsgaHRtbCB9IGZyb20gJy4vbGliL3V0aWxzL2h0bWwtdGFnLmpzJztcblxuZXhwb3J0IHsgdmVyc2lvbiB9O1xuXG4vKipcbiAqIEJhc2UgY2xhc3MgdGhhdCBwcm92aWRlcyB0aGUgY29yZSBBUEkgZm9yIFBvbHltZXIncyBtZXRhLXByb2dyYW1taW5nXG4gKiBmZWF0dXJlcyBpbmNsdWRpbmcgdGVtcGxhdGUgc3RhbXBpbmcsIGRhdGEtYmluZGluZywgYXR0cmlidXRlIGRlc2VyaWFsaXphdGlvbixcbiAqIGFuZCBwcm9wZXJ0eSBjaGFuZ2Ugb2JzZXJ2YXRpb24uXG4gKlxuICogQGN1c3RvbUVsZW1lbnRcbiAqIEBwb2x5bWVyXG4gKiBAY29uc3RydWN0b3JcbiAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX0VsZW1lbnRNaXhpbn1cbiAqIEBleHRlbmRzIEhUTUxFbGVtZW50XG4gKiBAYXBwbGllc01peGluIEVsZW1lbnRNaXhpblxuICogQHN1bW1hcnkgQ3VzdG9tIGVsZW1lbnQgYmFzZSBjbGFzcyB0aGF0IHByb3ZpZGVzIHRoZSBjb3JlIEFQSSBmb3IgUG9seW1lcidzXG4gKiAgIGtleSBtZXRhLXByb2dyYW1taW5nIGZlYXR1cmVzIGluY2x1ZGluZyB0ZW1wbGF0ZSBzdGFtcGluZywgZGF0YS1iaW5kaW5nLFxuICogICBhdHRyaWJ1dGUgZGVzZXJpYWxpemF0aW9uLCBhbmQgcHJvcGVydHkgY2hhbmdlIG9ic2VydmF0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBQb2x5bWVyRWxlbWVudCA9IEVsZW1lbnRNaXhpbihIVE1MRWxlbWVudCk7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaW1wb3J0ICcuL2Jvb3QuanMnO1xuXG5pbXBvcnQgJy4vbWl4aW4uanMnO1xuaW1wb3J0ICcuL2FzeW5jLmpzJztcblxuLyoqXG4gKiBAc3VtbWFyeSBDb2xsYXBzZSBtdWx0aXBsZSBjYWxsYmFja3MgaW50byBvbmUgaW52b2NhdGlvbiBhZnRlciBhIHRpbWVyLlxuICovXG5leHBvcnQgY2xhc3MgRGVib3VuY2VyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fYXN5bmNNb2R1bGUgPSBudWxsO1xuICAgIHRoaXMuX2NhbGxiYWNrID0gbnVsbDtcbiAgICB0aGlzLl90aW1lciA9IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIHNjaGVkdWxlcjsgdGhhdCBpcywgYSBtb2R1bGUgd2l0aCB0aGUgQXN5bmMgaW50ZXJmYWNlLFxuICAgKiBhIGNhbGxiYWNrIGFuZCBvcHRpb25hbCBhcmd1bWVudHMgdG8gYmUgcGFzc2VkIHRvIHRoZSBydW4gZnVuY3Rpb25cbiAgICogZnJvbSB0aGUgYXN5bmMgbW9kdWxlLlxuICAgKlxuICAgKiBAcGFyYW0geyFBc3luY0ludGVyZmFjZX0gYXN5bmNNb2R1bGUgT2JqZWN0IHdpdGggQXN5bmMgaW50ZXJmYWNlLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGNhbGxiYWNrIENhbGxiYWNrIHRvIHJ1bi5cbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIHNldENvbmZpZyhhc3luY01vZHVsZSwgY2FsbGJhY2spIHtcbiAgICB0aGlzLl9hc3luY01vZHVsZSA9IGFzeW5jTW9kdWxlO1xuICAgIHRoaXMuX2NhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgdGhpcy5fdGltZXIgPSB0aGlzLl9hc3luY01vZHVsZS5ydW4oKCkgPT4ge1xuICAgICAgdGhpcy5fdGltZXIgPSBudWxsO1xuICAgICAgZGVib3VuY2VyUXVldWUuZGVsZXRlKHRoaXMpO1xuICAgICAgdGhpcy5fY2FsbGJhY2soKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQ2FuY2VscyBhbiBhY3RpdmUgZGVib3VuY2VyIGFuZCByZXR1cm5zIGEgcmVmZXJlbmNlIHRvIGl0c2VsZi5cbiAgICpcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIGNhbmNlbCgpIHtcbiAgICBpZiAodGhpcy5pc0FjdGl2ZSgpKSB7XG4gICAgICB0aGlzLl9jYW5jZWxBc3luYygpO1xuICAgICAgLy8gQ2FuY2VsaW5nIGEgZGVib3VuY2VyIHJlbW92ZXMgaXRzIHNwb3QgZnJvbSB0aGUgZmx1c2ggcXVldWUsXG4gICAgICAvLyBzbyBpZiBhIGRlYm91bmNlciBpcyBtYW51YWxseSBjYW5jZWxlZCBhbmQgcmUtZGVib3VuY2VkLCBpdFxuICAgICAgLy8gd2lsbCByZXNldCBpdHMgZmx1c2ggb3JkZXIgKHRoaXMgaXMgYSB2ZXJ5IG1pbm9yIGRpZmZlcmVuY2UgZnJvbSAxLngpXG4gICAgICAvLyBSZS1kZWJvdW5jaW5nIHZpYSB0aGUgYGRlYm91bmNlYCBBUEkgcmV0YWlucyB0aGUgMS54IEZJRk8gZmx1c2ggb3JkZXJcbiAgICAgIGRlYm91bmNlclF1ZXVlLmRlbGV0ZSh0aGlzKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENhbmNlbHMgYSBkZWJvdW5jZXIncyBhc3luYyBjYWxsYmFjay5cbiAgICpcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIF9jYW5jZWxBc3luYygpIHtcbiAgICBpZiAodGhpcy5pc0FjdGl2ZSgpKSB7XG4gICAgICB0aGlzLl9hc3luY01vZHVsZS5jYW5jZWwoLyoqIEB0eXBlIHtudW1iZXJ9ICovKHRoaXMuX3RpbWVyKSk7XG4gICAgICB0aGlzLl90aW1lciA9IG51bGw7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBGbHVzaGVzIGFuIGFjdGl2ZSBkZWJvdW5jZXIgYW5kIHJldHVybnMgYSByZWZlcmVuY2UgdG8gaXRzZWxmLlxuICAgKlxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgZmx1c2goKSB7XG4gICAgaWYgKHRoaXMuaXNBY3RpdmUoKSkge1xuICAgICAgdGhpcy5jYW5jZWwoKTtcbiAgICAgIHRoaXMuX2NhbGxiYWNrKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGRlYm91bmNlciBpcyBhY3RpdmUuXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYWN0aXZlLlxuICAgKi9cbiAgaXNBY3RpdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RpbWVyICE9IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBkZWJvdW5jZXIgaWYgbm8gZGVib3VuY2VyIGlzIHBhc3NlZCBhcyBhIHBhcmFtZXRlclxuICAgKiBvciBpdCBjYW5jZWxzIGFuIGFjdGl2ZSBkZWJvdW5jZXIgb3RoZXJ3aXNlLiBUaGUgZm9sbG93aW5nXG4gICAqIGV4YW1wbGUgc2hvd3MgaG93IGEgZGVib3VuY2VyIGNhbiBiZSBjYWxsZWQgbXVsdGlwbGUgdGltZXMgd2l0aGluIGFcbiAgICogbWljcm90YXNrIGFuZCBcImRlYm91bmNlZFwiIHN1Y2ggdGhhdCB0aGUgcHJvdmlkZWQgY2FsbGJhY2sgZnVuY3Rpb24gaXNcbiAgICogY2FsbGVkIG9uY2UuIEFkZCB0aGlzIG1ldGhvZCB0byBhIGN1c3RvbSBlbGVtZW50OlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiBpbXBvcnQge21pY3JvVGFza30gZnJvbSAnQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvYXN5bmMuanMnO1xuICAgKiBpbXBvcnQge0RlYm91bmNlcn0gZnJvbSAnQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvZGVib3VuY2UuanMnO1xuICAgKiAvLyAuLi5cbiAgICpcbiAgICogX2RlYm91bmNlV29yaygpIHtcbiAgICogICB0aGlzLl9kZWJvdW5jZUpvYiA9IERlYm91bmNlci5kZWJvdW5jZSh0aGlzLl9kZWJvdW5jZUpvYixcbiAgICogICAgICAgbWljcm9UYXNrLCAoKSA9PiB0aGlzLl9kb1dvcmsoKSk7XG4gICAqIH1cbiAgICogYGBgXG4gICAqXG4gICAqIElmIHRoZSBgX2RlYm91bmNlV29ya2AgbWV0aG9kIGlzIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyB3aXRoaW4gdGhlIHNhbWVcbiAgICogbWljcm90YXNrLCB0aGUgYF9kb1dvcmtgIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIG9ubHkgb25jZSBhdCB0aGUgbmV4dFxuICAgKiBtaWNyb3Rhc2sgY2hlY2twb2ludC5cbiAgICpcbiAgICogTm90ZTogSW4gdGVzdGluZyBpdCBpcyBvZnRlbiBjb252ZW5pZW50IHRvIGF2b2lkIGFzeW5jaHJvbnkuIFRvIGFjY29tcGxpc2hcbiAgICogdGhpcyB3aXRoIGEgZGVib3VuY2VyLCB5b3UgY2FuIHVzZSBgZW5xdWV1ZURlYm91bmNlcmAgYW5kXG4gICAqIGBmbHVzaGAuIEZvciBleGFtcGxlLCBleHRlbmQgdGhlIGFib3ZlIGV4YW1wbGUgYnkgYWRkaW5nXG4gICAqIGBlbnF1ZXVlRGVib3VuY2VyKHRoaXMuX2RlYm91bmNlSm9iKWAgYXQgdGhlIGVuZCBvZiB0aGVcbiAgICogYF9kZWJvdW5jZVdvcmtgIG1ldGhvZC4gVGhlbiBpbiBhIHRlc3QsIGNhbGwgYGZsdXNoYCB0byBlbnN1cmVcbiAgICogdGhlIGRlYm91bmNlciBoYXMgY29tcGxldGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge0RlYm91bmNlcj99IGRlYm91bmNlciBEZWJvdW5jZXIgb2JqZWN0LlxuICAgKiBAcGFyYW0geyFBc3luY0ludGVyZmFjZX0gYXN5bmNNb2R1bGUgT2JqZWN0IHdpdGggQXN5bmMgaW50ZXJmYWNlXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gY2FsbGJhY2sgQ2FsbGJhY2sgdG8gcnVuLlxuICAgKiBAcmV0dXJuIHshRGVib3VuY2VyfSBSZXR1cm5zIGEgZGVib3VuY2VyIG9iamVjdC5cbiAgICovXG4gIHN0YXRpYyBkZWJvdW5jZShkZWJvdW5jZXIsIGFzeW5jTW9kdWxlLCBjYWxsYmFjaykge1xuICAgIGlmIChkZWJvdW5jZXIgaW5zdGFuY2VvZiBEZWJvdW5jZXIpIHtcbiAgICAgIC8vIENhbmNlbCB0aGUgYXN5bmMgY2FsbGJhY2ssIGJ1dCBsZWF2ZSBpbiBkZWJvdW5jZXJRdWV1ZSBpZiBpdCB3YXNcbiAgICAgIC8vIGVucXVldWVkLCB0byBtYWludGFpbiAxLnggZmx1c2ggb3JkZXJcbiAgICAgIGRlYm91bmNlci5fY2FuY2VsQXN5bmMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVib3VuY2VyID0gbmV3IERlYm91bmNlcigpO1xuICAgIH1cbiAgICBkZWJvdW5jZXIuc2V0Q29uZmlnKGFzeW5jTW9kdWxlLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIGRlYm91bmNlcjtcbiAgfVxufVxuXG5sZXQgZGVib3VuY2VyUXVldWUgPSBuZXcgU2V0KCk7XG5cbi8qKlxuICogQWRkcyBhIGBEZWJvdW5jZXJgIHRvIGEgbGlzdCBvZiBnbG9iYWxseSBmbHVzaGFibGUgdGFza3MuXG4gKlxuICogQHBhcmFtIHshRGVib3VuY2VyfSBkZWJvdW5jZXIgRGVib3VuY2VyIHRvIGVucXVldWVcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmV4cG9ydCBjb25zdCBlbnF1ZXVlRGVib3VuY2VyID0gZnVuY3Rpb24oZGVib3VuY2VyKSB7XG4gIGRlYm91bmNlclF1ZXVlLmFkZChkZWJvdW5jZXIpO1xufTtcblxuLyoqXG4gKiBGbHVzaGVzIGFueSBlbnF1ZXVlZCBkZWJvdW5jZXJzXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn0gUmV0dXJucyB3aGV0aGVyIGFueSBkZWJvdW5jZXJzIHdlcmUgZmx1c2hlZFxuICovXG5leHBvcnQgY29uc3QgZmx1c2hEZWJvdW5jZXJzID0gZnVuY3Rpb24oKSB7XG4gIGNvbnN0IGRpZEZsdXNoID0gQm9vbGVhbihkZWJvdW5jZXJRdWV1ZS5zaXplKTtcbiAgLy8gSWYgbmV3IGRlYm91bmNlcnMgYXJlIGFkZGVkIHdoaWxlIGZsdXNoaW5nLCBTZXQuZm9yRWFjaCB3aWxsIGVuc3VyZVxuICAvLyBuZXdseSBhZGRlZCBvbmVzIGFyZSBhbHNvIGZsdXNoZWRcbiAgZGVib3VuY2VyUXVldWUuZm9yRWFjaChkZWJvdW5jZXIgPT4ge1xuICAgIHRyeSB7XG4gICAgICBkZWJvdW5jZXIuZmx1c2goKTtcbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRpZEZsdXNoO1xufTsiLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXdcbiAqXG4gKiBNb2R1bGUgZm9yIGFkZGluZyBsaXN0ZW5lcnMgdG8gYSBub2RlIGZvciB0aGUgZm9sbG93aW5nIG5vcm1hbGl6ZWRcbiAqIGNyb3NzLXBsYXRmb3JtIFwiZ2VzdHVyZVwiIGV2ZW50czpcbiAqIC0gYGRvd25gIC0gbW91c2Ugb3IgdG91Y2ggd2VudCBkb3duXG4gKiAtIGB1cGAgLSBtb3VzZSBvciB0b3VjaCB3ZW50IHVwXG4gKiAtIGB0YXBgIC0gbW91c2UgY2xpY2sgb3IgZmluZ2VyIHRhcFxuICogLSBgdHJhY2tgIC0gbW91c2UgZHJhZyBvciB0b3VjaCBtb3ZlXG4gKlxuICogQHN1bW1hcnkgTW9kdWxlIGZvciBhZGRpbmcgY3Jvc3MtcGxhdGZvcm0gZ2VzdHVyZSBldmVudCBsaXN0ZW5lcnMuXG4gKi9cblxuaW1wb3J0ICcuL2Jvb3QuanMnO1xuXG5pbXBvcnQgeyB0aW1lT3V0LCBtaWNyb1Rhc2sgfSBmcm9tICcuL2FzeW5jLmpzJztcbmltcG9ydCB7IERlYm91bmNlciB9IGZyb20gJy4vZGVib3VuY2UuanMnO1xuaW1wb3J0IHsgcGFzc2l2ZVRvdWNoR2VzdHVyZXMsIGNhbmNlbFN5bnRoZXRpY0NsaWNrRXZlbnRzIH0gZnJvbSAnLi9zZXR0aW5ncy5qcyc7XG5pbXBvcnQgeyB3cmFwIH0gZnJvbSAnLi93cmFwLmpzJztcblxuLy8gZGV0ZWN0IG5hdGl2ZSB0b3VjaCBhY3Rpb24gc3VwcG9ydFxubGV0IEhBU19OQVRJVkVfVEEgPSB0eXBlb2YgZG9jdW1lbnQuaGVhZC5zdHlsZS50b3VjaEFjdGlvbiA9PT0gJ3N0cmluZyc7XG5sZXQgR0VTVFVSRV9LRVkgPSAnX19wb2x5bWVyR2VzdHVyZXMnO1xubGV0IEhBTkRMRURfT0JKID0gJ19fcG9seW1lckdlc3R1cmVzSGFuZGxlZCc7XG5sZXQgVE9VQ0hfQUNUSU9OID0gJ19fcG9seW1lckdlc3R1cmVzVG91Y2hBY3Rpb24nO1xuLy8gcmFkaXVzIGZvciB0YXAgYW5kIHRyYWNrXG5sZXQgVEFQX0RJU1RBTkNFID0gMjU7XG5sZXQgVFJBQ0tfRElTVEFOQ0UgPSA1O1xuLy8gbnVtYmVyIG9mIGxhc3QgTiB0cmFjayBwb3NpdGlvbnMgdG8ga2VlcFxubGV0IFRSQUNLX0xFTkdUSCA9IDI7XG5cbi8vIERpc2FibGluZyBcIm1vdXNlXCIgaGFuZGxlcnMgZm9yIDI1MDBtcyBpcyBlbm91Z2hcbmxldCBNT1VTRV9USU1FT1VUID0gMjUwMDtcbmxldCBNT1VTRV9FVkVOVFMgPSBbJ21vdXNlZG93bicsICdtb3VzZW1vdmUnLCAnbW91c2V1cCcsICdjbGljayddO1xuLy8gYW4gYXJyYXkgb2YgYml0bWFzayB2YWx1ZXMgZm9yIG1hcHBpbmcgTW91c2VFdmVudC53aGljaCB0byBNb3VzZUV2ZW50LmJ1dHRvbnNcbmxldCBNT1VTRV9XSElDSF9UT19CVVRUT05TID0gWzAsIDEsIDQsIDJdO1xubGV0IE1PVVNFX0hBU19CVVRUT05TID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIHJldHVybiBuZXcgTW91c2VFdmVudCgndGVzdCcsIHtidXR0b25zOiAxfSkuYnV0dG9ucyA9PT0gMTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufSkoKTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBQb3NzaWJsZSBtb3VzZSBldmVudCBuYW1lXG4gKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIG1vdXNlIGV2ZW50LCBmYWxzZSBpZiBub3RcbiAqL1xuZnVuY3Rpb24gaXNNb3VzZUV2ZW50KG5hbWUpIHtcbiAgcmV0dXJuIE1PVVNFX0VWRU5UUy5pbmRleE9mKG5hbWUpID4gLTE7XG59XG5cbi8qIGVzbGludCBuby1lbXB0eTogW1wiZXJyb3JcIiwgeyBcImFsbG93RW1wdHlDYXRjaFwiOiB0cnVlIH1dICovXG4vLyBjaGVjayBmb3IgcGFzc2l2ZSBldmVudCBsaXN0ZW5lcnNcbmxldCBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcbihmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICBsZXQgb3B0cyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3Bhc3NpdmUnLCB7Z2V0KCkge3N1cHBvcnRzUGFzc2l2ZSA9IHRydWU7fX0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0JywgbnVsbCwgb3B0cyk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBudWxsLCBvcHRzKTtcbiAgfSBjYXRjaChlKSB7fVxufSkoKTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBzZXR0aW5ncyBmb3IgZXZlbnQgbGlzdGVuZXJzLCBkZXBlbmRhbnQgb24gYHBhc3NpdmVUb3VjaEdlc3R1cmVzYFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgRXZlbnQgbmFtZSB0byBkZXRlcm1pbmUgaWYgYHtwYXNzaXZlfWAgb3B0aW9uIGlzXG4gKiAgIG5lZWRlZFxuICogQHJldHVybiB7e3Bhc3NpdmU6IGJvb2xlYW59IHwgdW5kZWZpbmVkfSBPcHRpb25zIHRvIHVzZSBmb3IgYWRkRXZlbnRMaXN0ZW5lclxuICogICBhbmQgcmVtb3ZlRXZlbnRMaXN0ZW5lclxuICovXG5mdW5jdGlvbiBQQVNTSVZFX1RPVUNIKGV2ZW50TmFtZSkge1xuICBpZiAoaXNNb3VzZUV2ZW50KGV2ZW50TmFtZSkgfHwgZXZlbnROYW1lID09PSAndG91Y2hlbmQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChIQVNfTkFUSVZFX1RBICYmIHN1cHBvcnRzUGFzc2l2ZSAmJiBwYXNzaXZlVG91Y2hHZXN0dXJlcykge1xuICAgIHJldHVybiB7cGFzc2l2ZTogdHJ1ZX07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuO1xuICB9XG59XG5cbi8vIENoZWNrIGZvciB0b3VjaC1vbmx5IGRldmljZXNcbmxldCBJU19UT1VDSF9PTkxZID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvaVAoPzpbb2FdZHxob25lKXxBbmRyb2lkLyk7XG5cbi8vIGtlZXAgdHJhY2sgb2YgYW55IGxhYmVscyBoaXQgYnkgdGhlIG1vdXNlQ2FuY2VsbGVyXG4vKiogQHR5cGUgeyFBcnJheTwhSFRNTExhYmVsRWxlbWVudD59ICovXG5jb25zdCBjbGlja2VkTGFiZWxzID0gW107XG5cbi8qKiBAdHlwZSB7IU9iamVjdDxib29sZWFuPn0gKi9cbmNvbnN0IGxhYmVsbGFibGUgPSB7XG4gICdidXR0b24nOiB0cnVlLFxuICAnaW5wdXQnOiB0cnVlLFxuICAna2V5Z2VuJzogdHJ1ZSxcbiAgJ21ldGVyJzogdHJ1ZSxcbiAgJ291dHB1dCc6IHRydWUsXG4gICd0ZXh0YXJlYSc6IHRydWUsXG4gICdwcm9ncmVzcyc6IHRydWUsXG4gICdzZWxlY3QnOiB0cnVlXG59O1xuXG4vLyBEZWZpbmVkIGF0IGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2VuYWJsaW5nLWFuZC1kaXNhYmxpbmctZm9ybS1jb250cm9sczotdGhlLWRpc2FibGVkLWF0dHJpYnV0ZVxuLyoqIEB0eXBlIHshT2JqZWN0PGJvb2xlYW4+fSAqL1xuY29uc3QgY2FuQmVEaXNhYmxlZCA9IHtcbiAgJ2J1dHRvbic6IHRydWUsXG4gICdjb21tYW5kJzogdHJ1ZSxcbiAgJ2ZpZWxkc2V0JzogdHJ1ZSxcbiAgJ2lucHV0JzogdHJ1ZSxcbiAgJ2tleWdlbic6IHRydWUsXG4gICdvcHRncm91cCc6IHRydWUsXG4gICdvcHRpb24nOiB0cnVlLFxuICAnc2VsZWN0JzogdHJ1ZSxcbiAgJ3RleHRhcmVhJzogdHJ1ZVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbCBFbGVtZW50IHRvIGNoZWNrIGxhYmVsbGluZyBzdGF0dXNcbiAqIEByZXR1cm4ge2Jvb2xlYW59IGVsZW1lbnQgY2FuIGhhdmUgbGFiZWxzXG4gKi9cbmZ1bmN0aW9uIGNhbkJlTGFiZWxsZWQoZWwpIHtcbiAgcmV0dXJuIGxhYmVsbGFibGVbZWwubG9jYWxOYW1lXSB8fCBmYWxzZTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbCBFbGVtZW50IHRoYXQgbWF5IGJlIGxhYmVsbGVkLlxuICogQHJldHVybiB7IUFycmF5PCFIVE1MTGFiZWxFbGVtZW50Pn0gUmVsZXZhbnQgbGFiZWwgZm9yIGBlbGBcbiAqL1xuZnVuY3Rpb24gbWF0Y2hpbmdMYWJlbHMoZWwpIHtcbiAgbGV0IGxhYmVscyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKC8qKiBAdHlwZSB7SFRNTElucHV0RWxlbWVudH0gKi8oZWwpLmxhYmVscyB8fCBbXSk7XG4gIC8vIElFIGRvZXNuJ3QgaGF2ZSBgbGFiZWxzYCBhbmQgU2FmYXJpIGRvZXNuJ3QgcG9wdWxhdGUgYGxhYmVsc2BcbiAgLy8gaWYgZWxlbWVudCBpcyBpbiBhIHNoYWRvd3Jvb3QuXG4gIC8vIEluIHRoaXMgaW5zdGFuY2UsIGZpbmRpbmcgdGhlIG5vbi1hbmNlc3RvciBsYWJlbHMgaXMgZW5vdWdoLFxuICAvLyBhcyB0aGUgbW91c2VDYW5jZWxsb3IgY29kZSB3aWxsIGhhbmRsZSBhbmNzdG9yIGxhYmVsc1xuICBpZiAoIWxhYmVscy5sZW5ndGgpIHtcbiAgICBsYWJlbHMgPSBbXTtcbiAgICBsZXQgcm9vdCA9IGVsLmdldFJvb3ROb2RlKCk7XG4gICAgLy8gaWYgdGhlcmUgaXMgYW4gaWQgb24gYGVsYCwgY2hlY2sgZm9yIGFsbCBsYWJlbHMgd2l0aCBhIG1hdGNoaW5nIGBmb3JgIGF0dHJpYnV0ZVxuICAgIGlmIChlbC5pZCkge1xuICAgICAgbGV0IG1hdGNoaW5nID0gcm9vdC5xdWVyeVNlbGVjdG9yQWxsKGBsYWJlbFtmb3IgPSAke2VsLmlkfV1gKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0Y2hpbmcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGFiZWxzLnB1c2goLyoqIEB0eXBlIHshSFRNTExhYmVsRWxlbWVudH0gKi8obWF0Y2hpbmdbaV0pKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGxhYmVscztcbn1cblxuLy8gdG91Y2ggd2lsbCBtYWtlIHN5bnRoZXRpYyBtb3VzZSBldmVudHNcbi8vIGBwcmV2ZW50RGVmYXVsdGAgb24gdG91Y2hlbmQgd2lsbCBjYW5jZWwgdGhlbSxcbi8vIGJ1dCB0aGlzIGJyZWFrcyBgPGlucHV0PmAgZm9jdXMgYW5kIGxpbmsgY2xpY2tzXG4vLyBkaXNhYmxlIG1vdXNlIGhhbmRsZXJzIGZvciBNT1VTRV9USU1FT1VUIG1zIGFmdGVyXG4vLyBhIHRvdWNoZW5kIHRvIGlnbm9yZSBzeW50aGV0aWMgbW91c2UgZXZlbnRzXG5sZXQgbW91c2VDYW5jZWxsZXIgPSBmdW5jdGlvbihtb3VzZUV2ZW50KSB7XG4gIC8vIENoZWNrIGZvciBzb3VyY2VDYXBhYmlsaXRpZXMsIHVzZWQgdG8gZGlzdGluZ3Vpc2ggc3ludGhldGljIGV2ZW50c1xuICAvLyBpZiBtb3VzZUV2ZW50IGRpZCBub3QgY29tZSBmcm9tIGEgZGV2aWNlIHRoYXQgZmlyZXMgdG91Y2ggZXZlbnRzLFxuICAvLyBpdCB3YXMgbWFkZSBieSBhIHJlYWwgbW91c2UgYW5kIHNob3VsZCBiZSBjb3VudGVkXG4gIC8vIGh0dHA6Ly93aWNnLmdpdGh1Yi5pby9JbnB1dERldmljZUNhcGFiaWxpdGllcy8jZG9tLWlucHV0ZGV2aWNlY2FwYWJpbGl0aWVzLWZpcmVzdG91Y2hldmVudHNcbiAgbGV0IHNjID0gbW91c2VFdmVudC5zb3VyY2VDYXBhYmlsaXRpZXM7XG4gIGlmIChzYyAmJiAhc2MuZmlyZXNUb3VjaEV2ZW50cykge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBza2lwIHN5bnRoZXRpYyBtb3VzZSBldmVudHNcbiAgbW91c2VFdmVudFtIQU5ETEVEX09CSl0gPSB7c2tpcDogdHJ1ZX07XG4gIC8vIGRpc2FibGUgXCJnaG9zdCBjbGlja3NcIlxuICBpZiAobW91c2VFdmVudC50eXBlID09PSAnY2xpY2snKSB7XG4gICAgbGV0IGNsaWNrRnJvbUxhYmVsID0gZmFsc2U7XG4gICAgbGV0IHBhdGggPSBnZXRDb21wb3NlZFBhdGgobW91c2VFdmVudCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocGF0aFtpXS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgICAgaWYgKHBhdGhbaV0ubG9jYWxOYW1lID09PSAnbGFiZWwnKSB7XG4gICAgICAgICAgY2xpY2tlZExhYmVscy5wdXNoKC8qKiBAdHlwZSB7IUhUTUxMYWJlbEVsZW1lbnR9ICovIChwYXRoW2ldKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2FuQmVMYWJlbGxlZCgvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi8gKHBhdGhbaV0pKSkge1xuICAgICAgICAgIGxldCBvd25lckxhYmVscyA9XG4gICAgICAgICAgICAgIG1hdGNoaW5nTGFiZWxzKC8qKiBAdHlwZSB7IUhUTUxFbGVtZW50fSAqLyAocGF0aFtpXSkpO1xuICAgICAgICAgIC8vIGNoZWNrIGlmIG9uZSBvZiB0aGUgY2xpY2tlZCBsYWJlbHMgaXMgbGFiZWxsaW5nIHRoaXMgZWxlbWVudFxuICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgb3duZXJMYWJlbHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGNsaWNrRnJvbUxhYmVsID0gY2xpY2tGcm9tTGFiZWwgfHwgY2xpY2tlZExhYmVscy5pbmRleE9mKG93bmVyTGFiZWxzW2pdKSA+IC0xO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHBhdGhbaV0gPT09IFBPSU5URVJTVEFURS5tb3VzZS50YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBpZiBvbmUgb2YgdGhlIGNsaWNrZWQgbGFiZWxzIHdhcyBsYWJlbGxpbmcgdGhlIHRhcmdldCBlbGVtZW50LFxuICAgIC8vIHRoaXMgaXMgbm90IGEgZ2hvc3QgY2xpY2tcbiAgICBpZiAoY2xpY2tGcm9tTGFiZWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbW91c2VFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIG1vdXNlRXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtib29sZWFuPX0gc2V0dXAgVHJ1ZSB0byBhZGQsIGZhbHNlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHNldHVwVGVhcmRvd25Nb3VzZUNhbmNlbGxlcihzZXR1cCkge1xuICBsZXQgZXZlbnRzID0gSVNfVE9VQ0hfT05MWSA/IFsnY2xpY2snXSA6IE1PVVNFX0VWRU5UUztcbiAgZm9yIChsZXQgaSA9IDAsIGVuOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgZW4gPSBldmVudHNbaV07XG4gICAgaWYgKHNldHVwKSB7XG4gICAgICAvLyByZXNldCBjbGlja0xhYmVscyBhcnJheVxuICAgICAgY2xpY2tlZExhYmVscy5sZW5ndGggPSAwO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihlbiwgbW91c2VDYW5jZWxsZXIsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGVuLCBtb3VzZUNhbmNlbGxlciwgdHJ1ZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGlnbm9yZU1vdXNlKGUpIHtcbiAgaWYgKCFjYW5jZWxTeW50aGV0aWNDbGlja0V2ZW50cykge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIVBPSU5URVJTVEFURS5tb3VzZS5tb3VzZUlnbm9yZUpvYikge1xuICAgIHNldHVwVGVhcmRvd25Nb3VzZUNhbmNlbGxlcih0cnVlKTtcbiAgfVxuICBsZXQgdW5zZXQgPSBmdW5jdGlvbigpIHtcbiAgICBzZXR1cFRlYXJkb3duTW91c2VDYW5jZWxsZXIoKTtcbiAgICBQT0lOVEVSU1RBVEUubW91c2UudGFyZ2V0ID0gbnVsbDtcbiAgICBQT0lOVEVSU1RBVEUubW91c2UubW91c2VJZ25vcmVKb2IgPSBudWxsO1xuICB9O1xuICBQT0lOVEVSU1RBVEUubW91c2UudGFyZ2V0ID0gZ2V0Q29tcG9zZWRQYXRoKGUpWzBdO1xuICBQT0lOVEVSU1RBVEUubW91c2UubW91c2VJZ25vcmVKb2IgPSBEZWJvdW5jZXIuZGVib3VuY2UoXG4gICAgICAgIFBPSU5URVJTVEFURS5tb3VzZS5tb3VzZUlnbm9yZUpvYlxuICAgICAgLCB0aW1lT3V0LmFmdGVyKE1PVVNFX1RJTUVPVVQpXG4gICAgICAsIHVuc2V0KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge01vdXNlRXZlbnR9IGV2IGV2ZW50IHRvIHRlc3QgZm9yIGxlZnQgbW91c2UgYnV0dG9uIGRvd25cbiAqIEByZXR1cm4ge2Jvb2xlYW59IGhhcyBsZWZ0IG1vdXNlIGJ1dHRvbiBkb3duXG4gKi9cbmZ1bmN0aW9uIGhhc0xlZnRNb3VzZUJ1dHRvbihldikge1xuICBsZXQgdHlwZSA9IGV2LnR5cGU7XG4gIC8vIGV4aXQgZWFybHkgaWYgdGhlIGV2ZW50IGlzIG5vdCBhIG1vdXNlIGV2ZW50XG4gIGlmICghaXNNb3VzZUV2ZW50KHR5cGUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIGV2LmJ1dHRvbiBpcyBub3QgcmVsaWFibGUgZm9yIG1vdXNlbW92ZSAoMCBpcyBvdmVybG9hZGVkIGFzIGJvdGggbGVmdCBidXR0b24gYW5kIG5vIGJ1dHRvbnMpXG4gIC8vIGluc3RlYWQgd2UgdXNlIGV2LmJ1dHRvbnMgKGJpdG1hc2sgb2YgYnV0dG9ucykgb3IgZmFsbCBiYWNrIHRvIGV2LndoaWNoIChkZXByZWNhdGVkLCAwIGZvciBubyBidXR0b25zLCAxIGZvciBsZWZ0IGJ1dHRvbilcbiAgaWYgKHR5cGUgPT09ICdtb3VzZW1vdmUnKSB7XG4gICAgLy8gYWxsb3cgdW5kZWZpbmVkIGZvciB0ZXN0aW5nIGV2ZW50c1xuICAgIGxldCBidXR0b25zID0gZXYuYnV0dG9ucyA9PT0gdW5kZWZpbmVkID8gMSA6IGV2LmJ1dHRvbnM7XG4gICAgaWYgKChldiBpbnN0YW5jZW9mIHdpbmRvdy5Nb3VzZUV2ZW50KSAmJiAhTU9VU0VfSEFTX0JVVFRPTlMpIHtcbiAgICAgIGJ1dHRvbnMgPSBNT1VTRV9XSElDSF9UT19CVVRUT05TW2V2LndoaWNoXSB8fCAwO1xuICAgIH1cbiAgICAvLyBidXR0b25zIGlzIGEgYml0bWFzaywgY2hlY2sgdGhhdCB0aGUgbGVmdCBidXR0b24gYml0IGlzIHNldCAoMSlcbiAgICByZXR1cm4gQm9vbGVhbihidXR0b25zICYgMSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYWxsb3cgdW5kZWZpbmVkIGZvciB0ZXN0aW5nIGV2ZW50c1xuICAgIGxldCBidXR0b24gPSBldi5idXR0b24gPT09IHVuZGVmaW5lZCA/IDAgOiBldi5idXR0b247XG4gICAgLy8gZXYuYnV0dG9uIGlzIDAgaW4gbW91c2Vkb3duL21vdXNldXAvY2xpY2sgZm9yIGxlZnQgYnV0dG9uIGFjdGl2YXRpb25cbiAgICByZXR1cm4gYnV0dG9uID09PSAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzU3ludGhldGljQ2xpY2soZXYpIHtcbiAgaWYgKGV2LnR5cGUgPT09ICdjbGljaycpIHtcbiAgICAvLyBldi5kZXRhaWwgaXMgMCBmb3IgSFRNTEVsZW1lbnQuY2xpY2sgaW4gbW9zdCBicm93c2Vyc1xuICAgIGlmIChldi5kZXRhaWwgPT09IDApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBpbiB0aGUgd29yc3QgY2FzZSwgY2hlY2sgdGhhdCB0aGUgeC95IHBvc2l0aW9uIG9mIHRoZSBjbGljayBpcyB3aXRoaW5cbiAgICAvLyB0aGUgYm91bmRpbmcgYm94IG9mIHRoZSB0YXJnZXQgb2YgdGhlIGV2ZW50XG4gICAgLy8gVGhhbmtzIElFIDEwID46KFxuICAgIGxldCB0ID0gX2ZpbmRPcmlnaW5hbFRhcmdldChldik7XG4gICAgLy8gbWFrZSBzdXJlIHRoZSB0YXJnZXQgb2YgdGhlIGV2ZW50IGlzIGFuIGVsZW1lbnQgc28gd2UgY2FuIHVzZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QsXG4gICAgLy8gaWYgbm90LCBqdXN0IGFzc3VtZSBpdCBpcyBhIHN5bnRoZXRpYyBjbGlja1xuICAgIGlmICghdC5ub2RlVHlwZSB8fCAvKiogQHR5cGUge0VsZW1lbnR9ICovKHQpLm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGxldCBiY3IgPSAvKiogQHR5cGUge0VsZW1lbnR9ICovKHQpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIC8vIHVzZSBwYWdlIHgveSB0byBhY2NvdW50IGZvciBzY3JvbGxpbmdcbiAgICBsZXQgeCA9IGV2LnBhZ2VYLCB5ID0gZXYucGFnZVk7XG4gICAgLy8gZXYgaXMgYSBzeW50aGV0aWMgY2xpY2sgaWYgdGhlIHBvc2l0aW9uIGlzIG91dHNpZGUgdGhlIGJvdW5kaW5nIGJveCBvZiB0aGUgdGFyZ2V0XG4gICAgcmV0dXJuICEoKHggPj0gYmNyLmxlZnQgJiYgeCA8PSBiY3IucmlnaHQpICYmICh5ID49IGJjci50b3AgJiYgeSA8PSBiY3IuYm90dG9tKSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5sZXQgUE9JTlRFUlNUQVRFID0ge1xuICBtb3VzZToge1xuICAgIHRhcmdldDogbnVsbCxcbiAgICBtb3VzZUlnbm9yZUpvYjogbnVsbFxuICB9LFxuICB0b3VjaDoge1xuICAgIHg6IDAsXG4gICAgeTogMCxcbiAgICBpZDogLTEsXG4gICAgc2Nyb2xsRGVjaWRlZDogZmFsc2VcbiAgfVxufTtcblxuZnVuY3Rpb24gZmlyc3RUb3VjaEFjdGlvbihldikge1xuICBsZXQgdGEgPSAnYXV0byc7XG4gIGxldCBwYXRoID0gZ2V0Q29tcG9zZWRQYXRoKGV2KTtcbiAgZm9yIChsZXQgaSA9IDAsIG47IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgbiA9IHBhdGhbaV07XG4gICAgaWYgKG5bVE9VQ0hfQUNUSU9OXSkge1xuICAgICAgdGEgPSBuW1RPVUNIX0FDVElPTl07XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhO1xufVxuXG5mdW5jdGlvbiB0cmFja0RvY3VtZW50KHN0YXRlT2JqLCBtb3ZlZm4sIHVwZm4pIHtcbiAgc3RhdGVPYmoubW92ZWZuID0gbW92ZWZuO1xuICBzdGF0ZU9iai51cGZuID0gdXBmbjtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgbW92ZWZuKTtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHVwZm4pO1xufVxuXG5mdW5jdGlvbiB1bnRyYWNrRG9jdW1lbnQoc3RhdGVPYmopIHtcbiAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgc3RhdGVPYmoubW92ZWZuKTtcbiAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHN0YXRlT2JqLnVwZm4pO1xuICBzdGF0ZU9iai5tb3ZlZm4gPSBudWxsO1xuICBzdGF0ZU9iai51cGZuID0gbnVsbDtcbn1cblxuaWYgKGNhbmNlbFN5bnRoZXRpY0NsaWNrRXZlbnRzKSB7XG4gIC8vIHVzZSBhIGRvY3VtZW50LXdpZGUgdG91Y2hlbmQgbGlzdGVuZXIgdG8gc3RhcnQgdGhlIGdob3N0LWNsaWNrIHByZXZlbnRpb24gbWVjaGFuaXNtXG4gIC8vIFVzZSBwYXNzaXZlIGV2ZW50IGxpc3RlbmVycywgaWYgc3VwcG9ydGVkLCB0byBub3QgYWZmZWN0IHNjcm9sbGluZyBwZXJmb3JtYW5jZVxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIGlnbm9yZU1vdXNlLCBzdXBwb3J0c1Bhc3NpdmUgPyB7cGFzc2l2ZTogdHJ1ZX0gOiBmYWxzZSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY29tcG9zZWRQYXRoIGZvciB0aGUgZ2l2ZW4gZXZlbnQuXG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudCB0byBwcm9jZXNzXG4gKiBAcmV0dXJuIHshQXJyYXk8IUV2ZW50VGFyZ2V0Pn0gUGF0aCBvZiB0aGUgZXZlbnRcbiAqL1xuY29uc3QgZ2V0Q29tcG9zZWRQYXRoID0gd2luZG93LlNoYWR5RE9NICYmIHdpbmRvdy5TaGFkeURPTS5ub1BhdGNoID9cbiAgd2luZG93LlNoYWR5RE9NLmNvbXBvc2VkUGF0aCA6XG4gIChldmVudCkgPT4gZXZlbnQuY29tcG9zZWRQYXRoICYmIGV2ZW50LmNvbXBvc2VkUGF0aCgpIHx8IFtdO1xuXG4vKiogQHR5cGUgeyFPYmplY3Q8c3RyaW5nLCAhR2VzdHVyZVJlY29nbml6ZXI+fSAqL1xuZXhwb3J0IGNvbnN0IGdlc3R1cmVzID0ge307XG5cbi8qKiBAdHlwZSB7IUFycmF5PCFHZXN0dXJlUmVjb2duaXplcj59ICovXG5leHBvcnQgY29uc3QgcmVjb2duaXplcnMgPSBbXTtcblxuLyoqXG4gKiBGaW5kcyB0aGUgZWxlbWVudCByZW5kZXJlZCBvbiB0aGUgc2NyZWVuIGF0IHRoZSBwcm92aWRlZCBjb29yZGluYXRlcy5cbiAqXG4gKiBTaW1pbGFyIHRvIGBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50YCwgYnV0IHBpZXJjZXMgdGhyb3VnaFxuICogc2hhZG93IHJvb3RzLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB4IEhvcml6b250YWwgcGl4ZWwgY29vcmRpbmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IHkgVmVydGljYWwgcGl4ZWwgY29vcmRpbmF0ZVxuICogQHJldHVybiB7RWxlbWVudH0gUmV0dXJucyB0aGUgZGVlcGVzdCBzaGFkb3dSb290IGluY2x1c2l2ZSBlbGVtZW50XG4gKiBmb3VuZCBhdCB0aGUgc2NyZWVuIHBvc2l0aW9uIGdpdmVuLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVlcFRhcmdldEZpbmQoeCwgeSkge1xuICBsZXQgbm9kZSA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoeCwgeSk7XG4gIGxldCBuZXh0ID0gbm9kZTtcbiAgLy8gdGhpcyBjb2RlIHBhdGggaXMgb25seSB0YWtlbiB3aGVuIG5hdGl2ZSBTaGFkb3dET00gaXMgdXNlZFxuICAvLyBpZiB0aGVyZSBpcyBhIHNoYWRvd3Jvb3QsIGl0IG1heSBoYXZlIGEgbm9kZSBhdCB4L3lcbiAgLy8gaWYgdGhlcmUgaXMgbm90IGEgc2hhZG93cm9vdCwgZXhpdCB0aGUgbG9vcFxuICB3aGlsZSAobmV4dCAmJiBuZXh0LnNoYWRvd1Jvb3QgJiYgIXdpbmRvdy5TaGFkeURPTSkge1xuICAgIC8vIGlmIHRoZXJlIGlzIGEgbm9kZSBhdCB4L3kgaW4gdGhlIHNoYWRvd3Jvb3QsIGxvb2sgZGVlcGVyXG4gICAgbGV0IG9sZE5leHQgPSBuZXh0O1xuICAgIG5leHQgPSBuZXh0LnNoYWRvd1Jvb3QuZWxlbWVudEZyb21Qb2ludCh4LCB5KTtcbiAgICAvLyBvbiBTYWZhcmksIGVsZW1lbnRGcm9tUG9pbnQgbWF5IHJldHVybiB0aGUgc2hhZG93Um9vdCBob3N0XG4gICAgaWYgKG9sZE5leHQgPT09IG5leHQpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAobmV4dCkge1xuICAgICAgbm9kZSA9IG5leHQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBub2RlO1xufVxuXG4vKipcbiAqIGEgY2hlYXBlciBjaGVjayB0aGFuIGV2LmNvbXBvc2VkUGF0aCgpWzBdO1xuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0V2ZW50fFRvdWNofSBldiBFdmVudC5cbiAqIEByZXR1cm4ge0V2ZW50VGFyZ2V0fSBSZXR1cm5zIHRoZSBldmVudCB0YXJnZXQuXG4gKi9cbmZ1bmN0aW9uIF9maW5kT3JpZ2luYWxUYXJnZXQoZXYpIHtcbiAgY29uc3QgcGF0aCA9IGdldENvbXBvc2VkUGF0aCgvKiogQHR5cGUgez9FdmVudH0gKi8gKGV2KSk7XG4gIC8vIEl0IHNob3VsZG4ndCBiZSwgYnV0IHNvbWV0aW1lcyBwYXRoIGlzIGVtcHR5ICh3aW5kb3cgb24gU2FmYXJpKS5cbiAgcmV0dXJuIHBhdGgubGVuZ3RoID4gMCA/IHBhdGhbMF0gOiBldi50YXJnZXQ7XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RXZlbnR9IGV2IEV2ZW50LlxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gX2hhbmRsZU5hdGl2ZShldikge1xuICBsZXQgaGFuZGxlZDtcbiAgbGV0IHR5cGUgPSBldi50eXBlO1xuICBsZXQgbm9kZSA9IGV2LmN1cnJlbnRUYXJnZXQ7XG4gIGxldCBnb2JqID0gbm9kZVtHRVNUVVJFX0tFWV07XG4gIGlmICghZ29iaikge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgZ3MgPSBnb2JqW3R5cGVdO1xuICBpZiAoIWdzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghZXZbSEFORExFRF9PQkpdKSB7XG4gICAgZXZbSEFORExFRF9PQkpdID0ge307XG4gICAgaWYgKHR5cGUuc2xpY2UoMCwgNSkgPT09ICd0b3VjaCcpIHtcbiAgICAgIGV2ID0gLyoqIEB0eXBlIHtUb3VjaEV2ZW50fSAqLyhldik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1hc3NpZ25cbiAgICAgIGxldCB0ID0gZXYuY2hhbmdlZFRvdWNoZXNbMF07XG4gICAgICBpZiAodHlwZSA9PT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgICAgIC8vIG9ubHkgaGFuZGxlIHRoZSBmaXJzdCBmaW5nZXJcbiAgICAgICAgaWYgKGV2LnRvdWNoZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgUE9JTlRFUlNUQVRFLnRvdWNoLmlkID0gdC5pZGVudGlmaWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoUE9JTlRFUlNUQVRFLnRvdWNoLmlkICE9PSB0LmlkZW50aWZpZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCFIQVNfTkFUSVZFX1RBKSB7XG4gICAgICAgIGlmICh0eXBlID09PSAndG91Y2hzdGFydCcgfHwgdHlwZSA9PT0gJ3RvdWNobW92ZScpIHtcbiAgICAgICAgICBfaGFuZGxlVG91Y2hBY3Rpb24oZXYpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGhhbmRsZWQgPSBldltIQU5ETEVEX09CSl07XG4gIC8vIHVzZWQgdG8gaWdub3JlIHN5bnRoZXRpYyBtb3VzZSBldmVudHNcbiAgaWYgKGhhbmRsZWQuc2tpcCkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyByZXNldCByZWNvZ25pemVyIHN0YXRlXG4gIGZvciAobGV0IGkgPSAwLCByOyBpIDwgcmVjb2duaXplcnMubGVuZ3RoOyBpKyspIHtcbiAgICByID0gcmVjb2duaXplcnNbaV07XG4gICAgaWYgKGdzW3IubmFtZV0gJiYgIWhhbmRsZWRbci5uYW1lXSkge1xuICAgICAgaWYgKHIuZmxvdyAmJiByLmZsb3cuc3RhcnQuaW5kZXhPZihldi50eXBlKSA+IC0xICYmIHIucmVzZXQpIHtcbiAgICAgICAgci5yZXNldCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBlbmZvcmNlIGdlc3R1cmUgcmVjb2duaXplciBvcmRlclxuICBmb3IgKGxldCBpID0gMCwgcjsgaSA8IHJlY29nbml6ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgciA9IHJlY29nbml6ZXJzW2ldO1xuICAgIGlmIChnc1tyLm5hbWVdICYmICFoYW5kbGVkW3IubmFtZV0pIHtcbiAgICAgIGhhbmRsZWRbci5uYW1lXSA9IHRydWU7XG4gICAgICByW3R5cGVdKGV2KTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtUb3VjaEV2ZW50fSBldiBFdmVudC5cbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIF9oYW5kbGVUb3VjaEFjdGlvbihldikge1xuICBsZXQgdCA9IGV2LmNoYW5nZWRUb3VjaGVzWzBdO1xuICBsZXQgdHlwZSA9IGV2LnR5cGU7XG4gIGlmICh0eXBlID09PSAndG91Y2hzdGFydCcpIHtcbiAgICBQT0lOVEVSU1RBVEUudG91Y2gueCA9IHQuY2xpZW50WDtcbiAgICBQT0lOVEVSU1RBVEUudG91Y2gueSA9IHQuY2xpZW50WTtcbiAgICBQT0lOVEVSU1RBVEUudG91Y2guc2Nyb2xsRGVjaWRlZCA9IGZhbHNlO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICd0b3VjaG1vdmUnKSB7XG4gICAgaWYgKFBPSU5URVJTVEFURS50b3VjaC5zY3JvbGxEZWNpZGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFBPSU5URVJTVEFURS50b3VjaC5zY3JvbGxEZWNpZGVkID0gdHJ1ZTtcbiAgICBsZXQgdGEgPSBmaXJzdFRvdWNoQWN0aW9uKGV2KTtcbiAgICBsZXQgc2hvdWxkUHJldmVudCA9IGZhbHNlO1xuICAgIGxldCBkeCA9IE1hdGguYWJzKFBPSU5URVJTVEFURS50b3VjaC54IC0gdC5jbGllbnRYKTtcbiAgICBsZXQgZHkgPSBNYXRoLmFicyhQT0lOVEVSU1RBVEUudG91Y2gueSAtIHQuY2xpZW50WSk7XG4gICAgaWYgKCFldi5jYW5jZWxhYmxlKSB7XG4gICAgICAvLyBzY3JvbGxpbmcgaXMgaGFwcGVuaW5nXG4gICAgfSBlbHNlIGlmICh0YSA9PT0gJ25vbmUnKSB7XG4gICAgICBzaG91bGRQcmV2ZW50ID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHRhID09PSAncGFuLXgnKSB7XG4gICAgICBzaG91bGRQcmV2ZW50ID0gZHkgPiBkeDtcbiAgICB9IGVsc2UgaWYgKHRhID09PSAncGFuLXknKSB7XG4gICAgICBzaG91bGRQcmV2ZW50ID0gZHggPiBkeTtcbiAgICB9XG4gICAgaWYgKHNob3VsZFByZXZlbnQpIHtcbiAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByZXZlbnQoJ3RyYWNrJyk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWRkcyBhbiBldmVudCBsaXN0ZW5lciB0byBhIG5vZGUgZm9yIHRoZSBnaXZlbiBnZXN0dXJlIHR5cGUuXG4gKlxuICogQHBhcmFtIHshRXZlbnRUYXJnZXR9IG5vZGUgTm9kZSB0byBhZGQgbGlzdGVuZXIgb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBldlR5cGUgR2VzdHVyZSB0eXBlOiBgZG93bmAsIGB1cGAsIGB0cmFja2AsIG9yIGB0YXBgXG4gKiBAcGFyYW0geyFmdW5jdGlvbighRXZlbnQpOnZvaWR9IGhhbmRsZXIgRXZlbnQgbGlzdGVuZXIgZnVuY3Rpb24gdG8gY2FsbFxuICogQHJldHVybiB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIGEgZ2VzdHVyZSBldmVudCBsaXN0ZW5lciB3YXMgYWRkZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRMaXN0ZW5lcihub2RlLCBldlR5cGUsIGhhbmRsZXIpIHtcbiAgaWYgKGdlc3R1cmVzW2V2VHlwZV0pIHtcbiAgICBfYWRkKG5vZGUsIGV2VHlwZSwgaGFuZGxlcik7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYW4gZXZlbnQgbGlzdGVuZXIgZnJvbSBhIG5vZGUgZm9yIHRoZSBnaXZlbiBnZXN0dXJlIHR5cGUuXG4gKlxuICogQHBhcmFtIHshRXZlbnRUYXJnZXR9IG5vZGUgTm9kZSB0byByZW1vdmUgbGlzdGVuZXIgZnJvbVxuICogQHBhcmFtIHtzdHJpbmd9IGV2VHlwZSBHZXN0dXJlIHR5cGU6IGBkb3duYCwgYHVwYCwgYHRyYWNrYCwgb3IgYHRhcGBcbiAqIEBwYXJhbSB7IWZ1bmN0aW9uKCFFdmVudCk6dm9pZH0gaGFuZGxlciBFdmVudCBsaXN0ZW5lciBmdW5jdGlvbiBwcmV2aW91c2x5IHBhc3NlZCB0b1xuICogIGBhZGRMaXN0ZW5lcmAuXG4gKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgYSBnZXN0dXJlIGV2ZW50IGxpc3RlbmVyIHdhcyByZW1vdmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIobm9kZSwgZXZUeXBlLCBoYW5kbGVyKSB7XG4gIGlmIChnZXN0dXJlc1tldlR5cGVdKSB7XG4gICAgX3JlbW92ZShub2RlLCBldlR5cGUsIGhhbmRsZXIpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBhdXRvbWF0ZSB0aGUgZXZlbnQgbGlzdGVuZXJzIGZvciB0aGUgbmF0aXZlIGV2ZW50c1xuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyFFdmVudFRhcmdldH0gbm9kZSBOb2RlIG9uIHdoaWNoIHRvIGFkZCB0aGUgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZUeXBlIEV2ZW50IHR5cGUgdG8gYWRkLlxuICogQHBhcmFtIHtmdW5jdGlvbighRXZlbnQpfSBoYW5kbGVyIEV2ZW50IGhhbmRsZXIgZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5mdW5jdGlvbiBfYWRkKG5vZGUsIGV2VHlwZSwgaGFuZGxlcikge1xuICBsZXQgcmVjb2duaXplciA9IGdlc3R1cmVzW2V2VHlwZV07XG4gIGxldCBkZXBzID0gcmVjb2duaXplci5kZXBzO1xuICBsZXQgbmFtZSA9IHJlY29nbml6ZXIubmFtZTtcbiAgbGV0IGdvYmogPSBub2RlW0dFU1RVUkVfS0VZXTtcbiAgaWYgKCFnb2JqKSB7XG4gICAgbm9kZVtHRVNUVVJFX0tFWV0gPSBnb2JqID0ge307XG4gIH1cbiAgZm9yIChsZXQgaSA9IDAsIGRlcCwgZ2Q7IGkgPCBkZXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGVwID0gZGVwc1tpXTtcbiAgICAvLyBkb24ndCBhZGQgbW91c2UgaGFuZGxlcnMgb24gaU9TIGJlY2F1c2UgdGhleSBjYXVzZSBncmF5IHNlbGVjdGlvbiBvdmVybGF5c1xuICAgIGlmIChJU19UT1VDSF9PTkxZICYmIGlzTW91c2VFdmVudChkZXApICYmIGRlcCAhPT0gJ2NsaWNrJykge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGdkID0gZ29ialtkZXBdO1xuICAgIGlmICghZ2QpIHtcbiAgICAgIGdvYmpbZGVwXSA9IGdkID0ge19jb3VudDogMH07XG4gICAgfVxuICAgIGlmIChnZC5fY291bnQgPT09IDApIHtcbiAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihkZXAsIF9oYW5kbGVOYXRpdmUsIFBBU1NJVkVfVE9VQ0goZGVwKSk7XG4gICAgfVxuICAgIGdkW25hbWVdID0gKGdkW25hbWVdIHx8IDApICsgMTtcbiAgICBnZC5fY291bnQgPSAoZ2QuX2NvdW50IHx8IDApICsgMTtcbiAgfVxuICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZUeXBlLCBoYW5kbGVyKTtcbiAgaWYgKHJlY29nbml6ZXIudG91Y2hBY3Rpb24pIHtcbiAgICBzZXRUb3VjaEFjdGlvbihub2RlLCByZWNvZ25pemVyLnRvdWNoQWN0aW9uKTtcbiAgfVxufVxuXG4vKipcbiAqIGF1dG9tYXRlIGV2ZW50IGxpc3RlbmVyIHJlbW92YWwgZm9yIG5hdGl2ZSBldmVudHNcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHshRXZlbnRUYXJnZXR9IG5vZGUgTm9kZSBvbiB3aGljaCB0byByZW1vdmUgdGhlIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGV2VHlwZSBFdmVudCB0eXBlIHRvIHJlbW92ZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oIUV2ZW50KTogdm9pZH0gaGFuZGxlciBFdmVudCBoYW5kbGVyIGZ1bmN0aW9uLlxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gX3JlbW92ZShub2RlLCBldlR5cGUsIGhhbmRsZXIpIHtcbiAgbGV0IHJlY29nbml6ZXIgPSBnZXN0dXJlc1tldlR5cGVdO1xuICBsZXQgZGVwcyA9IHJlY29nbml6ZXIuZGVwcztcbiAgbGV0IG5hbWUgPSByZWNvZ25pemVyLm5hbWU7XG4gIGxldCBnb2JqID0gbm9kZVtHRVNUVVJFX0tFWV07XG4gIGlmIChnb2JqKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGRlcCwgZ2Q7IGkgPCBkZXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZXAgPSBkZXBzW2ldO1xuICAgICAgZ2QgPSBnb2JqW2RlcF07XG4gICAgICBpZiAoZ2QgJiYgZ2RbbmFtZV0pIHtcbiAgICAgICAgZ2RbbmFtZV0gPSAoZ2RbbmFtZV0gfHwgMSkgLSAxO1xuICAgICAgICBnZC5fY291bnQgPSAoZ2QuX2NvdW50IHx8IDEpIC0gMTtcbiAgICAgICAgaWYgKGdkLl9jb3VudCA9PT0gMCkge1xuICAgICAgICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihkZXAsIF9oYW5kbGVOYXRpdmUsIFBBU1NJVkVfVE9VQ0goZGVwKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2VHlwZSwgaGFuZGxlcik7XG59XG5cbi8qKlxuICogUmVnaXN0ZXJzIGEgbmV3IGdlc3R1cmUgZXZlbnQgcmVjb2duaXplciBmb3IgYWRkaW5nIG5ldyBjdXN0b21cbiAqIGdlc3R1cmUgZXZlbnQgdHlwZXMuXG4gKlxuICogQHBhcmFtIHshR2VzdHVyZVJlY29nbml6ZXJ9IHJlY29nIEdlc3R1cmUgcmVjb2duaXplciBkZXNjcmlwdG9yXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXIocmVjb2cpIHtcbiAgcmVjb2duaXplcnMucHVzaChyZWNvZyk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcmVjb2cuZW1pdHMubGVuZ3RoOyBpKyspIHtcbiAgICBnZXN0dXJlc1tyZWNvZy5lbWl0c1tpXV0gPSByZWNvZztcbiAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZOYW1lIEV2ZW50IG5hbWUuXG4gKiBAcmV0dXJuIHtPYmplY3R9IFJldHVybnMgdGhlIGdlc3R1cmUgZm9yIHRoZSBnaXZlbiBldmVudCBuYW1lLlxuICovXG5mdW5jdGlvbiBfZmluZFJlY29nbml6ZXJCeUV2ZW50KGV2TmFtZSkge1xuICBmb3IgKGxldCBpID0gMCwgcjsgaSA8IHJlY29nbml6ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgciA9IHJlY29nbml6ZXJzW2ldO1xuICAgIGZvciAobGV0IGogPSAwLCBuOyBqIDwgci5lbWl0cy5sZW5ndGg7IGorKykge1xuICAgICAgbiA9IHIuZW1pdHNbal07XG4gICAgICBpZiAobiA9PT0gZXZOYW1lKSB7XG4gICAgICAgIHJldHVybiByO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBTZXRzIHNjcm9sbGluZyBkaXJlY3Rpb24gb24gbm9kZS5cbiAqXG4gKiBUaGlzIHZhbHVlIGlzIGNoZWNrZWQgb24gZmlyc3QgbW92ZSwgdGh1cyBpdCBzaG91bGQgYmUgY2FsbGVkIHByaW9yIHRvXG4gKiBhZGRpbmcgZXZlbnQgbGlzdGVuZXJzLlxuICpcbiAqIEBwYXJhbSB7IUV2ZW50VGFyZ2V0fSBub2RlIE5vZGUgdG8gc2V0IHRvdWNoIGFjdGlvbiBzZXR0aW5nIG9uXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVG91Y2ggYWN0aW9uIHZhbHVlXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0VG91Y2hBY3Rpb24obm9kZSwgdmFsdWUpIHtcbiAgaWYgKEhBU19OQVRJVkVfVEEgJiYgbm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgLy8gTk9URTogYWRkIHRvdWNoQWN0aW9uIGFzeW5jIHNvIHRoYXQgZXZlbnRzIGNhbiBiZSBhZGRlZCBpblxuICAgIC8vIGN1c3RvbSBlbGVtZW50IGNvbnN0cnVjdG9ycy4gT3RoZXJ3aXNlIHdlIHJ1biBhZm91bCBvZiBjdXN0b21cbiAgICAvLyBlbGVtZW50cyByZXN0cmljdGlvbiBhZ2FpbnN0IHNldHRpbmdzIGF0dHJpYnV0ZXMgKHN0eWxlKSBpbiB0aGVcbiAgICAvLyBjb25zdHJ1Y3Rvci5cbiAgICBtaWNyb1Rhc2sucnVuKCgpID0+IHtcbiAgICAgIG5vZGUuc3R5bGUudG91Y2hBY3Rpb24gPSB2YWx1ZTtcbiAgICB9KTtcbiAgfVxuICBub2RlW1RPVUNIX0FDVElPTl0gPSB2YWx1ZTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaGVzIGFuIGV2ZW50IG9uIHRoZSBgdGFyZ2V0YCBlbGVtZW50IG9mIGB0eXBlYCB3aXRoIHRoZSBnaXZlblxuICogYGRldGFpbGAuXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHshRXZlbnRUYXJnZXR9IHRhcmdldCBUaGUgZWxlbWVudCBvbiB3aGljaCB0byBmaXJlIGFuIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIHR5cGUgb2YgZXZlbnQgdG8gZmlyZS5cbiAqIEBwYXJhbSB7IU9iamVjdD19IGRldGFpbCBUaGUgZGV0YWlsIG9iamVjdCB0byBwb3B1bGF0ZSBvbiB0aGUgZXZlbnQuXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5mdW5jdGlvbiBfZmlyZSh0YXJnZXQsIHR5cGUsIGRldGFpbCkge1xuICBsZXQgZXYgPSBuZXcgRXZlbnQodHlwZSwgeyBidWJibGVzOiB0cnVlLCBjYW5jZWxhYmxlOiB0cnVlLCBjb21wb3NlZDogdHJ1ZSB9KTtcbiAgZXYuZGV0YWlsID0gZGV0YWlsO1xuICB3cmFwKC8qKiBAdHlwZSB7IU5vZGV9ICovKHRhcmdldCkpLmRpc3BhdGNoRXZlbnQoZXYpO1xuICAvLyBmb3J3YXJkIGBwcmV2ZW50RGVmYXVsdGAgaW4gYSBjbGVhbiB3YXlcbiAgaWYgKGV2LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICBsZXQgcHJldmVudGVyID0gZGV0YWlsLnByZXZlbnRlciB8fCBkZXRhaWwuc291cmNlRXZlbnQ7XG4gICAgaWYgKHByZXZlbnRlciAmJiBwcmV2ZW50ZXIucHJldmVudERlZmF1bHQpIHtcbiAgICAgIHByZXZlbnRlci5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFByZXZlbnRzIHRoZSBkaXNwYXRjaCBhbmQgZGVmYXVsdCBhY3Rpb24gb2YgdGhlIGdpdmVuIGV2ZW50IG5hbWUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGV2TmFtZSBFdmVudCBuYW1lLlxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByZXZlbnQoZXZOYW1lKSB7XG4gIGxldCByZWNvZ25pemVyID0gX2ZpbmRSZWNvZ25pemVyQnlFdmVudChldk5hbWUpO1xuICBpZiAocmVjb2duaXplci5pbmZvKSB7XG4gICAgcmVjb2duaXplci5pbmZvLnByZXZlbnQgPSB0cnVlO1xuICB9XG59XG5cbi8qKlxuICogUmVzZXQgdGhlIDI1MDBtcyB0aW1lb3V0IG9uIHByb2Nlc3NpbmcgbW91c2UgaW5wdXQgYWZ0ZXIgZGV0ZWN0aW5nIHRvdWNoIGlucHV0LlxuICpcbiAqIFRvdWNoIGlucHV0cyBjcmVhdGUgc3ludGhlc2l6ZWQgbW91c2UgaW5wdXRzIGFueXdoZXJlIGZyb20gMCB0byAyMDAwbXMgYWZ0ZXIgdGhlIHRvdWNoLlxuICogVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGR1cmluZyB0ZXN0aW5nIHdpdGggc2ltdWxhdGVkIHRvdWNoIGlucHV0cy5cbiAqIENhbGxpbmcgdGhpcyBtZXRob2QgaW4gcHJvZHVjdGlvbiBtYXkgY2F1c2UgZHVwbGljYXRlIHRhcHMgb3Igb3RoZXIgR2VzdHVyZXMuXG4gKlxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0TW91c2VDYW5jZWxsZXIoKSB7XG4gIGlmIChQT0lOVEVSU1RBVEUubW91c2UubW91c2VJZ25vcmVKb2IpIHtcbiAgICBQT0lOVEVSU1RBVEUubW91c2UubW91c2VJZ25vcmVKb2IuZmx1c2goKTtcbiAgfVxufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSB2YWxpZC1qc2RvYyAqL1xuXG5yZWdpc3Rlcih7XG4gIG5hbWU6ICdkb3dudXAnLFxuICBkZXBzOiBbJ21vdXNlZG93bicsICd0b3VjaHN0YXJ0JywgJ3RvdWNoZW5kJ10sXG4gIGZsb3c6IHtcbiAgICBzdGFydDogWydtb3VzZWRvd24nLCAndG91Y2hzdGFydCddLFxuICAgIGVuZDogWydtb3VzZXVwJywgJ3RvdWNoZW5kJ11cbiAgfSxcbiAgZW1pdHM6IFsnZG93bicsICd1cCddLFxuXG4gIGluZm86IHtcbiAgICBtb3ZlZm46IG51bGwsXG4gICAgdXBmbjogbnVsbFxuICB9LFxuXG4gIC8qKlxuICAgKiBAdGhpcyB7R2VzdHVyZVJlY29nbml6ZXJ9XG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgdW50cmFja0RvY3VtZW50KHRoaXMuaW5mbyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEB0aGlzIHtHZXN0dXJlUmVjb2duaXplcn1cbiAgICogQHBhcmFtIHtNb3VzZUV2ZW50fSBlXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBtb3VzZWRvd246IGZ1bmN0aW9uKGUpIHtcbiAgICBpZiAoIWhhc0xlZnRNb3VzZUJ1dHRvbihlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgdCA9IF9maW5kT3JpZ2luYWxUYXJnZXQoZSk7XG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIGxldCBtb3ZlZm4gPSBmdW5jdGlvbiBtb3ZlZm4oZSkge1xuICAgICAgaWYgKCFoYXNMZWZ0TW91c2VCdXR0b24oZSkpIHtcbiAgICAgICAgZG93bnVwRmlyZSgndXAnLCB0LCBlKTtcbiAgICAgICAgdW50cmFja0RvY3VtZW50KHNlbGYuaW5mbyk7XG4gICAgICB9XG4gICAgfTtcbiAgICBsZXQgdXBmbiA9IGZ1bmN0aW9uIHVwZm4oZSkge1xuICAgICAgaWYgKGhhc0xlZnRNb3VzZUJ1dHRvbihlKSkge1xuICAgICAgICBkb3dudXBGaXJlKCd1cCcsIHQsIGUpO1xuICAgICAgfVxuICAgICAgdW50cmFja0RvY3VtZW50KHNlbGYuaW5mbyk7XG4gICAgfTtcbiAgICB0cmFja0RvY3VtZW50KHRoaXMuaW5mbywgbW92ZWZuLCB1cGZuKTtcbiAgICBkb3dudXBGaXJlKCdkb3duJywgdCwgZSk7XG4gIH0sXG4gIC8qKlxuICAgKiBAdGhpcyB7R2VzdHVyZVJlY29nbml6ZXJ9XG4gICAqIEBwYXJhbSB7VG91Y2hFdmVudH0gZVxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgdG91Y2hzdGFydDogZnVuY3Rpb24oZSkge1xuICAgIGRvd251cEZpcmUoJ2Rvd24nLCBfZmluZE9yaWdpbmFsVGFyZ2V0KGUpLCBlLmNoYW5nZWRUb3VjaGVzWzBdLCBlKTtcbiAgfSxcbiAgLyoqXG4gICAqIEB0aGlzIHtHZXN0dXJlUmVjb2duaXplcn1cbiAgICogQHBhcmFtIHtUb3VjaEV2ZW50fSBlXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICB0b3VjaGVuZDogZnVuY3Rpb24oZSkge1xuICAgIGRvd251cEZpcmUoJ3VwJywgX2ZpbmRPcmlnaW5hbFRhcmdldChlKSwgZS5jaGFuZ2VkVG91Y2hlc1swXSwgZSk7XG4gIH1cbn0pO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSB0YXJnZXRcbiAqIEBwYXJhbSB7RXZlbnR8VG91Y2h9IGV2ZW50XG4gKiBAcGFyYW0ge0V2ZW50PX0gcHJldmVudGVyXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5mdW5jdGlvbiBkb3dudXBGaXJlKHR5cGUsIHRhcmdldCwgZXZlbnQsIHByZXZlbnRlcikge1xuICBpZiAoIXRhcmdldCkge1xuICAgIHJldHVybjtcbiAgfVxuICBfZmlyZSh0YXJnZXQsIHR5cGUsIHtcbiAgICB4OiBldmVudC5jbGllbnRYLFxuICAgIHk6IGV2ZW50LmNsaWVudFksXG4gICAgc291cmNlRXZlbnQ6IGV2ZW50LFxuICAgIHByZXZlbnRlcjogcHJldmVudGVyLFxuICAgIHByZXZlbnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHJldHVybiBwcmV2ZW50KGUpO1xuICAgIH1cbiAgfSk7XG59XG5cbnJlZ2lzdGVyKHtcbiAgbmFtZTogJ3RyYWNrJyxcbiAgdG91Y2hBY3Rpb246ICdub25lJyxcbiAgZGVwczogWydtb3VzZWRvd24nLCAndG91Y2hzdGFydCcsICd0b3VjaG1vdmUnLCAndG91Y2hlbmQnXSxcbiAgZmxvdzoge1xuICAgIHN0YXJ0OiBbJ21vdXNlZG93bicsICd0b3VjaHN0YXJ0J10sXG4gICAgZW5kOiBbJ21vdXNldXAnLCAndG91Y2hlbmQnXVxuICB9LFxuICBlbWl0czogWyd0cmFjayddLFxuXG4gIGluZm86IHtcbiAgICB4OiAwLFxuICAgIHk6IDAsXG4gICAgc3RhdGU6ICdzdGFydCcsXG4gICAgc3RhcnRlZDogZmFsc2UsXG4gICAgbW92ZXM6IFtdLFxuICAgIC8qKiBAdGhpcyB7R2VzdHVyZUluZm99ICovXG4gICAgYWRkTW92ZTogZnVuY3Rpb24obW92ZSkge1xuICAgICAgaWYgKHRoaXMubW92ZXMubGVuZ3RoID4gVFJBQ0tfTEVOR1RIKSB7XG4gICAgICAgIHRoaXMubW92ZXMuc2hpZnQoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubW92ZXMucHVzaChtb3ZlKTtcbiAgICB9LFxuICAgIG1vdmVmbjogbnVsbCxcbiAgICB1cGZuOiBudWxsLFxuICAgIHByZXZlbnQ6IGZhbHNlXG4gIH0sXG5cbiAgLyoqXG4gICAqIEB0aGlzIHtHZXN0dXJlUmVjb2duaXplcn1cbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmluZm8uc3RhdGUgPSAnc3RhcnQnO1xuICAgIHRoaXMuaW5mby5zdGFydGVkID0gZmFsc2U7XG4gICAgdGhpcy5pbmZvLm1vdmVzID0gW107XG4gICAgdGhpcy5pbmZvLnggPSAwO1xuICAgIHRoaXMuaW5mby55ID0gMDtcbiAgICB0aGlzLmluZm8ucHJldmVudCA9IGZhbHNlO1xuICAgIHVudHJhY2tEb2N1bWVudCh0aGlzLmluZm8pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAdGhpcyB7R2VzdHVyZVJlY29nbml6ZXJ9XG4gICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZVxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgbW91c2Vkb3duOiBmdW5jdGlvbihlKSB7XG4gICAgaWYgKCFoYXNMZWZ0TW91c2VCdXR0b24oZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHQgPSBfZmluZE9yaWdpbmFsVGFyZ2V0KGUpO1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBsZXQgbW92ZWZuID0gZnVuY3Rpb24gbW92ZWZuKGUpIHtcbiAgICAgIGxldCB4ID0gZS5jbGllbnRYLCB5ID0gZS5jbGllbnRZO1xuICAgICAgaWYgKHRyYWNrSGFzTW92ZWRFbm91Z2goc2VsZi5pbmZvLCB4LCB5KSkge1xuICAgICAgICAvLyBmaXJzdCBtb3ZlIGlzICdzdGFydCcsIHN1YnNlcXVlbnQgbW92ZXMgYXJlICdtb3ZlJywgbW91c2V1cCBpcyAnZW5kJ1xuICAgICAgICBzZWxmLmluZm8uc3RhdGUgPSBzZWxmLmluZm8uc3RhcnRlZCA/IChlLnR5cGUgPT09ICdtb3VzZXVwJyA/ICdlbmQnIDogJ3RyYWNrJykgOiAnc3RhcnQnO1xuICAgICAgICBpZiAoc2VsZi5pbmZvLnN0YXRlID09PSAnc3RhcnQnKSB7XG4gICAgICAgICAgLy8gaWYgYW5kIG9ubHkgaWYgdHJhY2tpbmcsIGFsd2F5cyBwcmV2ZW50IHRhcFxuICAgICAgICAgIHByZXZlbnQoJ3RhcCcpO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYuaW5mby5hZGRNb3ZlKHt4OiB4LCB5OiB5fSk7XG4gICAgICAgIGlmICghaGFzTGVmdE1vdXNlQnV0dG9uKGUpKSB7XG4gICAgICAgICAgLy8gYWx3YXlzIGZpcmUgXCJlbmRcIlxuICAgICAgICAgIHNlbGYuaW5mby5zdGF0ZSA9ICdlbmQnO1xuICAgICAgICAgIHVudHJhY2tEb2N1bWVudChzZWxmLmluZm8pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0KSB7XG4gICAgICAgICAgdHJhY2tGaXJlKHNlbGYuaW5mbywgdCwgZSk7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5pbmZvLnN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH07XG4gICAgbGV0IHVwZm4gPSBmdW5jdGlvbiB1cGZuKGUpIHtcbiAgICAgIGlmIChzZWxmLmluZm8uc3RhcnRlZCkge1xuICAgICAgICBtb3ZlZm4oZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIHJlbW92ZSB0aGUgdGVtcG9yYXJ5IGxpc3RlbmVyc1xuICAgICAgdW50cmFja0RvY3VtZW50KHNlbGYuaW5mbyk7XG4gICAgfTtcbiAgICAvLyBhZGQgdGVtcG9yYXJ5IGRvY3VtZW50IGxpc3RlbmVycyBhcyBtb3VzZSByZXRhcmdldHNcbiAgICB0cmFja0RvY3VtZW50KHRoaXMuaW5mbywgbW92ZWZuLCB1cGZuKTtcbiAgICB0aGlzLmluZm8ueCA9IGUuY2xpZW50WDtcbiAgICB0aGlzLmluZm8ueSA9IGUuY2xpZW50WTtcbiAgfSxcbiAgLyoqXG4gICAqIEB0aGlzIHtHZXN0dXJlUmVjb2duaXplcn1cbiAgICogQHBhcmFtIHtUb3VjaEV2ZW50fSBlXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICB0b3VjaHN0YXJ0OiBmdW5jdGlvbihlKSB7XG4gICAgbGV0IGN0ID0gZS5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgICB0aGlzLmluZm8ueCA9IGN0LmNsaWVudFg7XG4gICAgdGhpcy5pbmZvLnkgPSBjdC5jbGllbnRZO1xuICB9LFxuICAvKipcbiAgICogQHRoaXMge0dlc3R1cmVSZWNvZ25pemVyfVxuICAgKiBAcGFyYW0ge1RvdWNoRXZlbnR9IGVcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIHRvdWNobW92ZTogZnVuY3Rpb24oZSkge1xuICAgIGxldCB0ID0gX2ZpbmRPcmlnaW5hbFRhcmdldChlKTtcbiAgICBsZXQgY3QgPSBlLmNoYW5nZWRUb3VjaGVzWzBdO1xuICAgIGxldCB4ID0gY3QuY2xpZW50WCwgeSA9IGN0LmNsaWVudFk7XG4gICAgaWYgKHRyYWNrSGFzTW92ZWRFbm91Z2godGhpcy5pbmZvLCB4LCB5KSkge1xuICAgICAgaWYgKHRoaXMuaW5mby5zdGF0ZSA9PT0gJ3N0YXJ0Jykge1xuICAgICAgICAvLyBpZiBhbmQgb25seSBpZiB0cmFja2luZywgYWx3YXlzIHByZXZlbnQgdGFwXG4gICAgICAgIHByZXZlbnQoJ3RhcCcpO1xuICAgICAgfVxuICAgICAgdGhpcy5pbmZvLmFkZE1vdmUoe3g6IHgsIHk6IHl9KTtcbiAgICAgIHRyYWNrRmlyZSh0aGlzLmluZm8sIHQsIGN0KTtcbiAgICAgIHRoaXMuaW5mby5zdGF0ZSA9ICd0cmFjayc7XG4gICAgICB0aGlzLmluZm8uc3RhcnRlZCA9IHRydWU7XG4gICAgfVxuICB9LFxuICAvKipcbiAgICogQHRoaXMge0dlc3R1cmVSZWNvZ25pemVyfVxuICAgKiBAcGFyYW0ge1RvdWNoRXZlbnR9IGVcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIHRvdWNoZW5kOiBmdW5jdGlvbihlKSB7XG4gICAgbGV0IHQgPSBfZmluZE9yaWdpbmFsVGFyZ2V0KGUpO1xuICAgIGxldCBjdCA9IGUuY2hhbmdlZFRvdWNoZXNbMF07XG4gICAgLy8gb25seSB0cmFja2VuZCBpZiB0cmFjayB3YXMgc3RhcnRlZCBhbmQgbm90IGFib3J0ZWRcbiAgICBpZiAodGhpcy5pbmZvLnN0YXJ0ZWQpIHtcbiAgICAgIC8vIHJlc2V0IHN0YXJ0ZWQgc3RhdGUgb24gdXBcbiAgICAgIHRoaXMuaW5mby5zdGF0ZSA9ICdlbmQnO1xuICAgICAgdGhpcy5pbmZvLmFkZE1vdmUoe3g6IGN0LmNsaWVudFgsIHk6IGN0LmNsaWVudFl9KTtcbiAgICAgIHRyYWNrRmlyZSh0aGlzLmluZm8sIHQsIGN0KTtcbiAgICB9XG4gIH1cbn0pO1xuXG4vKipcbiAqIEBwYXJhbSB7IUdlc3R1cmVJbmZvfSBpbmZvXG4gKiBAcGFyYW0ge251bWJlcn0geFxuICogQHBhcmFtIHtudW1iZXJ9IHlcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIHRyYWNrSGFzTW92ZWRFbm91Z2goaW5mbywgeCwgeSkge1xuICBpZiAoaW5mby5wcmV2ZW50KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChpbmZvLnN0YXJ0ZWQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBsZXQgZHggPSBNYXRoLmFicyhpbmZvLnggLSB4KTtcbiAgbGV0IGR5ID0gTWF0aC5hYnMoaW5mby55IC0geSk7XG4gIHJldHVybiAoZHggPj0gVFJBQ0tfRElTVEFOQ0UgfHwgZHkgPj0gVFJBQ0tfRElTVEFOQ0UpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7IUdlc3R1cmVJbmZvfSBpbmZvXG4gKiBAcGFyYW0gez9FdmVudFRhcmdldH0gdGFyZ2V0XG4gKiBAcGFyYW0ge1RvdWNofSB0b3VjaFxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gdHJhY2tGaXJlKGluZm8sIHRhcmdldCwgdG91Y2gpIHtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IHNlY29uZGxhc3QgPSBpbmZvLm1vdmVzW2luZm8ubW92ZXMubGVuZ3RoIC0gMl07XG4gIGxldCBsYXN0bW92ZSA9IGluZm8ubW92ZXNbaW5mby5tb3Zlcy5sZW5ndGggLSAxXTtcbiAgbGV0IGR4ID0gbGFzdG1vdmUueCAtIGluZm8ueDtcbiAgbGV0IGR5ID0gbGFzdG1vdmUueSAtIGluZm8ueTtcbiAgbGV0IGRkeCwgZGR5ID0gMDtcbiAgaWYgKHNlY29uZGxhc3QpIHtcbiAgICBkZHggPSBsYXN0bW92ZS54IC0gc2Vjb25kbGFzdC54O1xuICAgIGRkeSA9IGxhc3Rtb3ZlLnkgLSBzZWNvbmRsYXN0Lnk7XG4gIH1cbiAgX2ZpcmUodGFyZ2V0LCAndHJhY2snLCB7XG4gICAgc3RhdGU6IGluZm8uc3RhdGUsXG4gICAgeDogdG91Y2guY2xpZW50WCxcbiAgICB5OiB0b3VjaC5jbGllbnRZLFxuICAgIGR4OiBkeCxcbiAgICBkeTogZHksXG4gICAgZGR4OiBkZHgsXG4gICAgZGR5OiBkZHksXG4gICAgc291cmNlRXZlbnQ6IHRvdWNoLFxuICAgIGhvdmVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkZWVwVGFyZ2V0RmluZCh0b3VjaC5jbGllbnRYLCB0b3VjaC5jbGllbnRZKTtcbiAgICB9XG4gIH0pO1xufVxuXG5yZWdpc3Rlcih7XG4gIG5hbWU6ICd0YXAnLFxuICBkZXBzOiBbJ21vdXNlZG93bicsICdjbGljaycsICd0b3VjaHN0YXJ0JywgJ3RvdWNoZW5kJ10sXG4gIGZsb3c6IHtcbiAgICBzdGFydDogWydtb3VzZWRvd24nLCAndG91Y2hzdGFydCddLFxuICAgIGVuZDogWydjbGljaycsICd0b3VjaGVuZCddXG4gIH0sXG4gIGVtaXRzOiBbJ3RhcCddLFxuICBpbmZvOiB7XG4gICAgeDogTmFOLFxuICAgIHk6IE5hTixcbiAgICBwcmV2ZW50OiBmYWxzZVxuICB9LFxuICAvKipcbiAgICogQHRoaXMge0dlc3R1cmVSZWNvZ25pemVyfVxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaW5mby54ID0gTmFOO1xuICAgIHRoaXMuaW5mby55ID0gTmFOO1xuICAgIHRoaXMuaW5mby5wcmV2ZW50ID0gZmFsc2U7XG4gIH0sXG4gIC8qKlxuICAgKiBAdGhpcyB7R2VzdHVyZVJlY29nbml6ZXJ9XG4gICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZVxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgbW91c2Vkb3duOiBmdW5jdGlvbihlKSB7XG4gICAgaWYgKGhhc0xlZnRNb3VzZUJ1dHRvbihlKSkge1xuICAgICAgdGhpcy5pbmZvLnggPSBlLmNsaWVudFg7XG4gICAgICB0aGlzLmluZm8ueSA9IGUuY2xpZW50WTtcbiAgICB9XG4gIH0sXG4gIC8qKlxuICAgKiBAdGhpcyB7R2VzdHVyZVJlY29nbml6ZXJ9XG4gICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZVxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgY2xpY2s6IGZ1bmN0aW9uKGUpIHtcbiAgICBpZiAoaGFzTGVmdE1vdXNlQnV0dG9uKGUpKSB7XG4gICAgICB0cmFja0ZvcndhcmQodGhpcy5pbmZvLCBlKTtcbiAgICB9XG4gIH0sXG4gIC8qKlxuICAgKiBAdGhpcyB7R2VzdHVyZVJlY29nbml6ZXJ9XG4gICAqIEBwYXJhbSB7VG91Y2hFdmVudH0gZVxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgdG91Y2hzdGFydDogZnVuY3Rpb24oZSkge1xuICAgIGNvbnN0IHRvdWNoID0gZS5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgICB0aGlzLmluZm8ueCA9IHRvdWNoLmNsaWVudFg7XG4gICAgdGhpcy5pbmZvLnkgPSB0b3VjaC5jbGllbnRZO1xuICB9LFxuICAvKipcbiAgICogQHRoaXMge0dlc3R1cmVSZWNvZ25pemVyfVxuICAgKiBAcGFyYW0ge1RvdWNoRXZlbnR9IGVcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIHRvdWNoZW5kOiBmdW5jdGlvbihlKSB7XG4gICAgdHJhY2tGb3J3YXJkKHRoaXMuaW5mbywgZS5jaGFuZ2VkVG91Y2hlc1swXSwgZSk7XG4gIH1cbn0pO1xuXG4vKipcbiAqIEBwYXJhbSB7IUdlc3R1cmVJbmZvfSBpbmZvXG4gKiBAcGFyYW0ge0V2ZW50IHwgVG91Y2h9IGVcbiAqIEBwYXJhbSB7RXZlbnQ9fSBwcmV2ZW50ZXJcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHRyYWNrRm9yd2FyZChpbmZvLCBlLCBwcmV2ZW50ZXIpIHtcbiAgbGV0IGR4ID0gTWF0aC5hYnMoZS5jbGllbnRYIC0gaW5mby54KTtcbiAgbGV0IGR5ID0gTWF0aC5hYnMoZS5jbGllbnRZIC0gaW5mby55KTtcbiAgLy8gZmluZCBvcmlnaW5hbCB0YXJnZXQgZnJvbSBgcHJldmVudGVyYCBmb3IgVG91Y2hFdmVudHMsIG9yIGBlYCBmb3IgTW91c2VFdmVudHNcbiAgbGV0IHQgPSBfZmluZE9yaWdpbmFsVGFyZ2V0KChwcmV2ZW50ZXIgfHwgZSkpO1xuICBpZiAoIXQgfHwgKGNhbkJlRGlzYWJsZWRbLyoqIEB0eXBlIHshSFRNTEVsZW1lbnR9ICovKHQpLmxvY2FsTmFtZV0gJiYgdC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGR4LGR5IGNhbiBiZSBOYU4gaWYgYGNsaWNrYCBoYXMgYmVlbiBzaW11bGF0ZWQgYW5kIHRoZXJlIHdhcyBubyBgZG93bmAgZm9yIGBzdGFydGBcbiAgaWYgKGlzTmFOKGR4KSB8fCBpc05hTihkeSkgfHwgKGR4IDw9IFRBUF9ESVNUQU5DRSAmJiBkeSA8PSBUQVBfRElTVEFOQ0UpIHx8IGlzU3ludGhldGljQ2xpY2soZSkpIHtcbiAgICAvLyBwcmV2ZW50IHRhcHMgZnJvbSBiZWluZyBnZW5lcmF0ZWQgaWYgYW4gZXZlbnQgaGFzIGNhbmNlbGVkIHRoZW1cbiAgICBpZiAoIWluZm8ucHJldmVudCkge1xuICAgICAgX2ZpcmUodCwgJ3RhcCcsIHtcbiAgICAgICAgeDogZS5jbGllbnRYLFxuICAgICAgICB5OiBlLmNsaWVudFksXG4gICAgICAgIHNvdXJjZUV2ZW50OiBlLFxuICAgICAgICBwcmV2ZW50ZXI6IHByZXZlbnRlclxuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG5cbi8qIGVzbGludC1lbmFibGUgdmFsaWQtanNkb2MgKi9cblxuLyoqIEBkZXByZWNhdGVkICovXG5leHBvcnQgY29uc3QgZmluZE9yaWdpbmFsVGFyZ2V0ID0gX2ZpbmRPcmlnaW5hbFRhcmdldDtcblxuLyoqIEBkZXByZWNhdGVkICovXG5leHBvcnQgY29uc3QgYWRkID0gYWRkTGlzdGVuZXI7XG5cbi8qKiBAZGVwcmVjYXRlZCAqL1xuZXhwb3J0IGNvbnN0IHJlbW92ZSA9IHJlbW92ZUxpc3RlbmVyO1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbmltcG9ydCAnLi4vdXRpbHMvYm9vdC5qcyc7XG5cbmltcG9ydCB7IGRlZHVwaW5nTWl4aW4gfSBmcm9tICcuLi91dGlscy9taXhpbi5qcyc7XG5pbXBvcnQgeyBhZGRMaXN0ZW5lciwgcmVtb3ZlTGlzdGVuZXIgfSBmcm9tICcuLi91dGlscy9nZXN0dXJlcy5qcyc7XG5cbi8qKlxuICogRWxlbWVudCBjbGFzcyBtaXhpbiB0aGF0IHByb3ZpZGVzIEFQSSBmb3IgYWRkaW5nIFBvbHltZXIncyBjcm9zcy1wbGF0Zm9ybVxuICogZ2VzdHVyZSBldmVudHMgdG8gbm9kZXMuXG4gKlxuICogVGhlIEFQSSBpcyBkZXNpZ25lZCB0byBiZSBjb21wYXRpYmxlIHdpdGggb3ZlcnJpZGUgcG9pbnRzIGltcGxlbWVudGVkXG4gKiBpbiBgVGVtcGxhdGVTdGFtcGAgc3VjaCB0aGF0IGRlY2xhcmF0aXZlIGV2ZW50IGxpc3RlbmVycyBpblxuICogdGVtcGxhdGVzIHdpbGwgc3VwcG9ydCBnZXN0dXJlIGV2ZW50cyB3aGVuIHRoaXMgbWl4aW4gaXMgYXBwbGllZCBhbG9uZyB3aXRoXG4gKiBgVGVtcGxhdGVTdGFtcGAuXG4gKlxuICogQG1peGluRnVuY3Rpb25cbiAqIEBwb2x5bWVyXG4gKiBAc3VtbWFyeSBFbGVtZW50IGNsYXNzIG1peGluIHRoYXQgcHJvdmlkZXMgQVBJIGZvciBhZGRpbmcgUG9seW1lcidzXG4gKiAgIGNyb3NzLXBsYXRmb3JtIGdlc3R1cmUgZXZlbnRzIHRvIG5vZGVzXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtmdW5jdGlvbihuZXc6VCl9IHN1cGVyQ2xhc3MgQ2xhc3MgdG8gYXBwbHkgbWl4aW4gdG8uXG4gKiBAcmV0dXJuIHtmdW5jdGlvbihuZXc6VCl9IHN1cGVyQ2xhc3Mgd2l0aCBtaXhpbiBhcHBsaWVkLlxuICovXG5leHBvcnQgY29uc3QgR2VzdHVyZUV2ZW50TGlzdGVuZXJzID0gZGVkdXBpbmdNaXhpbigoc3VwZXJDbGFzcykgPT4ge1xuICAvKipcbiAgICogQHBvbHltZXJcbiAgICogQG1peGluQ2xhc3NcbiAgICogQGltcGxlbWVudHMge1BvbHltZXJfR2VzdHVyZUV2ZW50TGlzdGVuZXJzfVxuICAgKi9cbiAgY2xhc3MgR2VzdHVyZUV2ZW50TGlzdGVuZXJzIGV4dGVuZHMgc3VwZXJDbGFzcyB7XG4gICAgLyoqXG4gICAgICogQWRkIHRoZSBldmVudCBsaXN0ZW5lciB0byB0aGUgbm9kZSBpZiBpdCBpcyBhIGdlc3R1cmVzIGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHshRXZlbnRUYXJnZXR9IG5vZGUgTm9kZSB0byBhZGQgZXZlbnQgbGlzdGVuZXIgdG9cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIE5hbWUgb2YgZXZlbnRcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFFdmVudCk6dm9pZH0gaGFuZGxlciBMaXN0ZW5lciBmdW5jdGlvbiB0byBhZGRcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9hZGRFdmVudExpc3RlbmVyVG9Ob2RlKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICAgICAgaWYgKCFhZGRMaXN0ZW5lcihub2RlLCBldmVudE5hbWUsIGhhbmRsZXIpKSB7XG4gICAgICAgIHN1cGVyLl9hZGRFdmVudExpc3RlbmVyVG9Ob2RlKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHRoZSBldmVudCBsaXN0ZW5lciB0byB0aGUgbm9kZSBpZiBpdCBpcyBhIGdlc3R1cmVzIGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHshRXZlbnRUYXJnZXR9IG5vZGUgTm9kZSB0byByZW1vdmUgZXZlbnQgbGlzdGVuZXIgZnJvbVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgTmFtZSBvZiBldmVudFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oIUV2ZW50KTp2b2lkfSBoYW5kbGVyIExpc3RlbmVyIGZ1bmN0aW9uIHRvIHJlbW92ZVxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX3JlbW92ZUV2ZW50TGlzdGVuZXJGcm9tTm9kZShub2RlLCBldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgICAgIGlmICghcmVtb3ZlTGlzdGVuZXIobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyKSkge1xuICAgICAgICBzdXBlci5fcmVtb3ZlRXZlbnRMaXN0ZW5lckZyb21Ob2RlKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIEdlc3R1cmVFdmVudExpc3RlbmVycztcbn0pO1xuIiwiLyoqXG4gKiBAcG9seW1lck1peGluXG4gKi9cbmV4cG9ydCBjb25zdCBUaGVtZVByb3BlcnR5TWl4aW4gPSBzdXBlckNsYXNzID0+IGNsYXNzIFZhYWRpblRoZW1lUHJvcGVydHlNaXhpbiBleHRlbmRzIHN1cGVyQ2xhc3Mge1xuICBzdGF0aWMgZ2V0IHByb3BlcnRpZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogSGVscGVyIHByb3BlcnR5IHdpdGggdGhlbWUgYXR0cmlidXRlIHZhbHVlIGZhY2lsaXRhdGluZyBwcm9wYWdhdGlvblxuICAgICAgICogaW4gc2hhZG93IERPTS5cbiAgICAgICAqXG4gICAgICAgKiBFbmFibGVzIHRoZSBjb21wb25lbnQgaW1wbGVtZW50YXRpb24gdG8gcHJvcGFnYXRlIHRoZSBgdGhlbWVgXG4gICAgICAgKiBhdHRyaWJ1dGUgdmFsdWUgdG8gdGhlIHN1YmNvbXBvbmVudHMgaW4gU2hhZG93IERPTSBieSBiaW5kaW5nXG4gICAgICAgKiB0aGUgc3ViY29tcG9uZW504oCZcyBcInRoZW1lXCIgYXR0cmlidXRlIHRvIHRoZSBgdGhlbWVgIHByb3BlcnR5IG9mXG4gICAgICAgKiB0aGUgaG9zdC5cbiAgICAgICAqXG4gICAgICAgKiAqKk5PVEU6KiogRXh0ZW5kaW5nIHRoZSBtaXhpbiBvbmx5IHByb3ZpZGVzIHRoZSBwcm9wZXJ0eSBmb3IgYmluZGluZyxcbiAgICAgICAqIGFuZCBkb2VzIG5vdCBtYWtlIHRoZSBwcm9wYWdhdGlvbiBhbG9uZS5cbiAgICAgICAqXG4gICAgICAgKiBTZWUgW1RoZW1lIEF0dHJpYnV0ZSBhbmQgU3ViY29tcG9uZW50c10oaHR0cHM6Ly9naXRodWIuY29tL3ZhYWRpbi92YWFkaW4tdGhlbWFibGUtbWl4aW4vd2lraS81Li1UaGVtZS1BdHRyaWJ1dGUtYW5kLVN1YmNvbXBvbmVudHMpLlxuICAgICAgICogcGFnZSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIHRoZW1lOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgcmVhZE9ubHk6IHRydWVcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLyoqIEBwcm90ZWN0ZWQgKi9cbiAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgIHN1cGVyLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpO1xuXG4gICAgaWYgKG5hbWUgPT09ICd0aGVtZScpIHtcbiAgICAgIHRoaXMuX3NldFRoZW1lKG5ld1ZhbHVlKTtcbiAgICB9XG4gIH1cbn07XG4iLCJpbXBvcnQgeyBEb21Nb2R1bGUgfSBmcm9tICdAcG9seW1lci9wb2x5bWVyL2xpYi9lbGVtZW50cy9kb20tbW9kdWxlLmpzJztcbmltcG9ydCB7IFRoZW1lUHJvcGVydHlNaXhpbiB9IGZyb20gJy4vdmFhZGluLXRoZW1lLXByb3BlcnR5LW1peGluLmpzJztcblxuLyoqXG4gKiBAcG9seW1lck1peGluXG4gKiBAbWl4ZXMgVmFhZGluLlRoZW1lUHJvcGVydHlNaXhpblxuICovXG5leHBvcnQgY29uc3QgVGhlbWFibGVNaXhpbiA9IHN1cGVyQ2xhc3MgPT4gY2xhc3MgVmFhZGluVGhlbWFibGVNaXhpbiBleHRlbmRzIFRoZW1lUHJvcGVydHlNaXhpbihzdXBlckNsYXNzKSB7XG5cbiAgLyoqIEBwcm90ZWN0ZWQgKi9cbiAgc3RhdGljIGZpbmFsaXplKCkge1xuICAgIHN1cGVyLmZpbmFsaXplKCk7XG5cbiAgICBjb25zdCB0ZW1wbGF0ZSA9IHRoaXMucHJvdG90eXBlLl90ZW1wbGF0ZTtcblxuICAgIGNvbnN0IGhhc093blRlbXBsYXRlID0gdGhpcy50ZW1wbGF0ZSAmJiB0aGlzLnRlbXBsYXRlLnBhcmVudEVsZW1lbnQgJiYgdGhpcy50ZW1wbGF0ZS5wYXJlbnRFbGVtZW50LmlkID09PSB0aGlzLmlzO1xuICAgIGNvbnN0IGluaGVyaXRlZFRlbXBsYXRlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMucHJvdG90eXBlKS5fdGVtcGxhdGU7XG4gICAgaWYgKGluaGVyaXRlZFRlbXBsYXRlICYmICFoYXNPd25UZW1wbGF0ZSkge1xuICAgICAgLy8gVGhlIGVsZW1lbnQgZG9lc24ndCBkZWZpbmUgaXRzIG93biB0ZW1wbGF0ZSAtPiBpbmNsdWRlIHRoZSB0aGVtZSBtb2R1bGVzIGZyb20gdGhlIGluaGVyaXRlZCB0ZW1wbGF0ZVxuICAgICAgQXJyYXkuZnJvbShpbmhlcml0ZWRUZW1wbGF0ZS5jb250ZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3N0eWxlW2luY2x1ZGVdJykpLmZvckVhY2gocyA9PiB7XG4gICAgICAgIHRoaXMuX2luY2x1ZGVTdHlsZShzLmdldEF0dHJpYnV0ZSgnaW5jbHVkZScpLCB0ZW1wbGF0ZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLl9pbmNsdWRlTWF0Y2hpbmdUaGVtZXModGVtcGxhdGUpO1xuICB9XG5cbiAgLyoqIEBwcm90ZWN0ZWQgKi9cbiAgc3RhdGljIF9pbmNsdWRlTWF0Y2hpbmdUaGVtZXModGVtcGxhdGUpIHtcbiAgICBjb25zdCBkb21Nb2R1bGUgPSBEb21Nb2R1bGU7XG4gICAgY29uc3QgbW9kdWxlcyA9IGRvbU1vZHVsZS5wcm90b3R5cGUubW9kdWxlcztcblxuICAgIGxldCBoYXNUaGVtZXMgPSBmYWxzZTtcbiAgICBjb25zdCBkZWZhdWx0TW9kdWxlTmFtZSA9IHRoaXMuaXMgKyAnLWRlZmF1bHQtdGhlbWUnO1xuXG4gICAgT2JqZWN0LmtleXMobW9kdWxlcylcbiAgICAgIC5zb3J0KChtb2R1bGVOYW1lQSwgbW9kdWxlTmFtZUIpID0+IHtcbiAgICAgICAgY29uc3QgdmFhZGluQSA9IG1vZHVsZU5hbWVBLmluZGV4T2YoJ3ZhYWRpbi0nKSA9PT0gMDtcbiAgICAgICAgY29uc3QgdmFhZGluQiA9IG1vZHVsZU5hbWVCLmluZGV4T2YoJ3ZhYWRpbi0nKSA9PT0gMDtcblxuICAgICAgICBjb25zdCB2YWFkaW5UaGVtZVByZWZpeGVzID0gWydsdW1vLScsICdtYXRlcmlhbC0nXTtcbiAgICAgICAgY29uc3QgdmFhZGluVGhlbWVBID0gdmFhZGluVGhlbWVQcmVmaXhlcy5maWx0ZXIocHJlZml4ID0+IG1vZHVsZU5hbWVBLmluZGV4T2YocHJlZml4KSA9PT0gMCkubGVuZ3RoID4gMDtcbiAgICAgICAgY29uc3QgdmFhZGluVGhlbWVCID0gdmFhZGluVGhlbWVQcmVmaXhlcy5maWx0ZXIocHJlZml4ID0+IG1vZHVsZU5hbWVCLmluZGV4T2YocHJlZml4KSA9PT0gMCkubGVuZ3RoID4gMDtcblxuICAgICAgICBpZiAodmFhZGluQSAhPT0gdmFhZGluQikge1xuICAgICAgICAgIC8vIEluY2x1ZGUgdmFhZGluIGNvcmUgc3R5bGVzIGZpcnN0XG4gICAgICAgICAgcmV0dXJuIHZhYWRpbkEgPyAtMSA6IDE7XG4gICAgICAgIH0gZWxzZSBpZiAodmFhZGluVGhlbWVBICE9PSB2YWFkaW5UaGVtZUIpIHtcbiAgICAgICAgICAvLyBJbmNsdWRlIHZhYWRpbiB0aGVtZSBzdHlsZXMgYWZ0ZXIgdGhhdFxuICAgICAgICAgIHJldHVybiB2YWFkaW5UaGVtZUEgPyAtMSA6IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gTGFzdGx5IGluY2x1ZGUgY3VzdG9tIHN0eWxlcyBzbyB0aGV5IG92ZXJyaWRlIGFsbCB2YWFkaW4gc3R5bGVzXG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuZm9yRWFjaChtb2R1bGVOYW1lID0+IHtcbiAgICAgICAgaWYgKG1vZHVsZU5hbWUgIT09IGRlZmF1bHRNb2R1bGVOYW1lKSB7XG4gICAgICAgICAgY29uc3QgdGhlbWVGb3IgPSBtb2R1bGVzW21vZHVsZU5hbWVdLmdldEF0dHJpYnV0ZSgndGhlbWUtZm9yJyk7XG4gICAgICAgICAgaWYgKHRoZW1lRm9yKSB7XG4gICAgICAgICAgICB0aGVtZUZvci5zcGxpdCgnICcpLmZvckVhY2godGhlbWVGb3JUb2tlbiA9PiB7XG4gICAgICAgICAgICAgIGlmIChuZXcgUmVnRXhwKCdeJyArIHRoZW1lRm9yVG9rZW4uc3BsaXQoJyonKS5qb2luKCcuKicpICsgJyQnKS50ZXN0KHRoaXMuaXMpKSB7XG4gICAgICAgICAgICAgICAgaGFzVGhlbWVzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbmNsdWRlU3R5bGUobW9kdWxlTmFtZSwgdGVtcGxhdGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgaWYgKCFoYXNUaGVtZXMgJiYgbW9kdWxlc1tkZWZhdWx0TW9kdWxlTmFtZV0pIHtcbiAgICAgIC8vIE5vIHRoZW1lIG1vZHVsZXMgZm91bmQsIGluY2x1ZGUgdGhlIGRlZmF1bHQgbW9kdWxlIGlmIGl0IGV4aXN0c1xuICAgICAgdGhpcy5faW5jbHVkZVN0eWxlKGRlZmF1bHRNb2R1bGVOYW1lLCB0ZW1wbGF0ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqIEBwcml2YXRlICovXG4gIHN0YXRpYyBfaW5jbHVkZVN0eWxlKG1vZHVsZU5hbWUsIHRlbXBsYXRlKSB7XG4gICAgaWYgKHRlbXBsYXRlICYmICF0ZW1wbGF0ZS5jb250ZW50LnF1ZXJ5U2VsZWN0b3IoYHN0eWxlW2luY2x1ZGU9XCIke21vZHVsZU5hbWV9XCJdYCkpIHtcbiAgICAgIGNvbnN0IHN0eWxlRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgc3R5bGVFbC5zZXRBdHRyaWJ1dGUoJ2luY2x1ZGUnLCBtb2R1bGVOYW1lKTtcbiAgICAgIHRlbXBsYXRlLmNvbnRlbnQuYXBwZW5kQ2hpbGQoc3R5bGVFbCk7XG4gICAgfVxuICB9XG5cbn07XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVmFhZGluIEx0ZC5cblRoaXMgcHJvZ3JhbSBpcyBhdmFpbGFibGUgdW5kZXIgQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIGF2YWlsYWJsZSBhdCBodHRwczovL3ZhYWRpbi5jb20vbGljZW5zZS9cbiovXG4vKipcbiAqIEEgcHJpdmF0ZSBtaXhpbiB0byBhdm9pZCBwcm9ibGVtcyB3aXRoIGR5bmFtaWMgcHJvcGVydGllcyBhbmQgUG9seW1lciBBbmFseXplci5cbiAqIE5vIG5lZWQgdG8gZXhwb3NlIHRoZXNlIHByb3BlcnRpZXMgaW4gdGhlIEFQSSBkb2NzLlxuICogQHBvbHltZXJNaXhpblxuICovXG5jb25zdCBUYWJJbmRleE1peGluID0gc3VwZXJDbGFzcyA9PiBjbGFzcyBWYWFkaW5UYWJJbmRleE1peGluIGV4dGVuZHMgc3VwZXJDbGFzcyB7XG4gIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcbiAgICB2YXIgcHJvcGVydGllcyA9IHtcbiAgICAgIC8qKlxuICAgICAgICogSW50ZXJuYWwgcHJvcGVydHkgbmVlZGVkIHRvIGxpc3RlbiB0byBgdGFiaW5kZXhgIGF0dHJpYnV0ZSBjaGFuZ2VzLlxuICAgICAgICpcbiAgICAgICAqIEZvciBjaGFuZ2luZyB0aGUgdGFiaW5kZXggb2YgdGhpcyBjb21wb25lbnQgdXNlIHRoZSBuYXRpdmUgYHRhYkluZGV4YCBwcm9wZXJ0eS5cbiAgICAgICAqIEBwcml2YXRlXG4gICAgICAgKi9cbiAgICAgIHRhYmluZGV4OiB7XG4gICAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgICAgdmFsdWU6IDAsXG4gICAgICAgIHJlZmxlY3RUb0F0dHJpYnV0ZTogdHJ1ZSxcbiAgICAgICAgb2JzZXJ2ZXI6ICdfdGFiaW5kZXhDaGFuZ2VkJ1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAod2luZG93LlNoYWR5RE9NKSB7XG4gICAgICAvLyBTaGFkeURPTSBicm93c2VycyBuZWVkIHRoZSBgdGFiSW5kZXhgIGluIG9yZGVyIHRvIG5vdGlmeSB3aGVuIHRoZSB1c2VyIGNoYW5nZXMgaXQgcHJvZ3JhbW1hdGljYWxseS5cbiAgICAgIHByb3BlcnRpZXNbJ3RhYkluZGV4J10gPSBwcm9wZXJ0aWVzLnRhYmluZGV4O1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wZXJ0aWVzO1xuICB9XG59O1xuXG4vKipcbiAqIFBvbHltZXIuSXJvbkNvbnRyb2xTdGF0ZSBpcyBub3QgYSBwcm9wZXIgMi4wIGNsYXNzLCBhbHNvLCBpdHMgdGFiaW5kZXhcbiAqIGltcGxlbWVudGF0aW9uIGZhaWxzIGluIHRoZSBzaGFkb3cgZG9tLCBzbyB3ZSBoYXZlIHRoaXMgZm9yIHZhYWRpbiBlbGVtZW50cy5cbiAqIEBwb2x5bWVyTWl4aW5cbiAqL1xuZXhwb3J0IGNvbnN0IENvbnRyb2xTdGF0ZU1peGluID0gc3VwZXJDbGFzcyA9PiBjbGFzcyBWYWFkaW5Db250cm9sU3RhdGVNaXhpbiBleHRlbmRzIFRhYkluZGV4TWl4aW4oc3VwZXJDbGFzcykge1xuICBzdGF0aWMgZ2V0IHByb3BlcnRpZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogU3BlY2lmeSB0aGF0IHRoaXMgY29udHJvbCBzaG91bGQgaGF2ZSBpbnB1dCBmb2N1cyB3aGVuIHRoZSBwYWdlIGxvYWRzLlxuICAgICAgICovXG4gICAgICBhdXRvZm9jdXM6IHtcbiAgICAgICAgdHlwZTogQm9vbGVhblxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBTdG9yZXMgdGhlIHByZXZpb3VzIHZhbHVlIG9mIHRhYmluZGV4IGF0dHJpYnV0ZSBvZiB0aGUgZGlzYWJsZWQgZWxlbWVudFxuICAgICAgICovXG4gICAgICBfcHJldmlvdXNUYWJJbmRleDoge1xuICAgICAgICB0eXBlOiBOdW1iZXJcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogSWYgdHJ1ZSwgdGhlIHVzZXIgY2Fubm90IGludGVyYWN0IHdpdGggdGhpcyBlbGVtZW50LlxuICAgICAgICovXG4gICAgICBkaXNhYmxlZDoge1xuICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICBvYnNlcnZlcjogJ19kaXNhYmxlZENoYW5nZWQnLFxuICAgICAgICByZWZsZWN0VG9BdHRyaWJ1dGU6IHRydWVcbiAgICAgIH0sXG5cbiAgICAgIF9pc1NoaWZ0VGFiYmluZzoge1xuICAgICAgICB0eXBlOiBCb29sZWFuXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHJlYWR5KCkge1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXNpbicsIGUgPT4ge1xuICAgICAgaWYgKGUuY29tcG9zZWRQYXRoKClbMF0gPT09IHRoaXMpIHtcbiAgICAgICAgdGhpcy5fZm9jdXMoZSk7XG4gICAgICB9IGVsc2UgaWYgKGUuY29tcG9zZWRQYXRoKCkuaW5kZXhPZih0aGlzLmZvY3VzRWxlbWVudCkgIT09IC0xICYmICF0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgIHRoaXMuX3NldEZvY3VzZWQodHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdmb2N1c291dCcsIGUgPT4gdGhpcy5fc2V0Rm9jdXNlZChmYWxzZSkpO1xuXG4gICAgLy8gSW4gc3VwZXIucmVhZHkoKSBvdGhlciAnZm9jdXNpbicgYW5kICdmb2N1c291dCcgbGlzdGVuZXJzIG1pZ2h0IGJlXG4gICAgLy8gYWRkZWQsIHNvIHdlIGNhbGwgaXQgYWZ0ZXIgb3VyIG93biBvbmVzIHRvIGVuc3VyZSB0aGV5IGV4ZWN1dGUgZmlyc3QuXG4gICAgLy8gSXNzdWUgdG8gd2F0Y2ggb3V0OiB3aGVuIGluY29ycmVjdCwgPHZhYWRpbi1jb21iby1ib3g+IHJlZm9jdXNlcyB0aGVcbiAgICAvLyBpbnB1dCBmaWVsZCBvbiBpT1MgYWZ0ZXIg4oCcRG9uZeKAnSBpcyBwcmVzc2VkLlxuICAgIHN1cGVyLnJlYWR5KCk7XG5cbiAgICAvLyBUaGlzIGZpeGVzIHRoZSBidWcgaW4gRmlyZWZveCA2MSAoaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTQ3Mjg4NylcbiAgICAvLyB3aGVyZSBmb2N1c291dCBldmVudCBkb2VzIG5vdCBnbyBvdXQgb2Ygc2hhZHkgRE9NIGJlY2F1c2UgY29tcG9zZWQgcHJvcGVydHkgaW4gdGhlIGV2ZW50IGlzIG5vdCB0cnVlXG4gICAgY29uc3QgZW5zdXJlRXZlbnRDb21wb3NlZCA9IGUgPT4ge1xuICAgICAgaWYgKCFlLmNvbXBvc2VkKSB7XG4gICAgICAgIGUudGFyZ2V0LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KGUudHlwZSwge1xuICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgY29tcG9zZWQ6IHRydWUsXG4gICAgICAgICAgY2FuY2VsYWJsZTogZmFsc2VcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5zaGFkb3dSb290LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzaW4nLCBlbnN1cmVFdmVudENvbXBvc2VkKTtcbiAgICB0aGlzLnNoYWRvd1Jvb3QuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXNvdXQnLCBlbnN1cmVFdmVudENvbXBvc2VkKTtcblxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGUgPT4ge1xuICAgICAgaWYgKCFlLmRlZmF1bHRQcmV2ZW50ZWQgJiYgZS5rZXlDb2RlID09PSA5KSB7XG4gICAgICAgIGlmIChlLnNoaWZ0S2V5KSB7XG4gICAgICAgICAgLy8gRmxhZyBpcyBjaGVja2VkIGluIF9mb2N1cyBldmVudCBoYW5kbGVyLlxuICAgICAgICAgIHRoaXMuX2lzU2hpZnRUYWJiaW5nID0gdHJ1ZTtcbiAgICAgICAgICBIVE1MRWxlbWVudC5wcm90b3R5cGUuZm9jdXMuYXBwbHkodGhpcyk7XG4gICAgICAgICAgdGhpcy5fc2V0Rm9jdXNlZChmYWxzZSk7XG4gICAgICAgICAgLy8gRXZlbnQgaGFuZGxpbmcgaW4gSUUgaXMgYXN5bmNocm9ub3VzIGFuZCB0aGUgZmxhZyBpcyByZW1vdmVkIGFzeW5jaHJvbm91c2x5IGFzIHdlbGxcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuX2lzU2hpZnRUYWJiaW5nID0gZmFsc2UsIDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFdvcmthcm91bmQgZm9yIEZGNjMtNjUgYnVnIHRoYXQgY2F1c2VzIHRoZSBmb2N1cyB0byBnZXQgbG9zdCB3aGVuXG4gICAgICAgICAgLy8gYmx1cnJpbmcgYSBzbG90dGVkIGNvbXBvbmVudCB3aXRoIGZvY3VzYWJsZSBzaGFkb3cgcm9vdCBjb250ZW50XG4gICAgICAgICAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTUyODY4NlxuICAgICAgICAgIC8vIFRPRE86IFJlbW92ZSB3aGVuIHNhZmVcbiAgICAgICAgICBjb25zdCBmaXJlZm94ID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0ZpcmVmb3hcXC8oXFxkXFxkXFwuXFxkKS8pO1xuICAgICAgICAgIGlmIChmaXJlZm94XG4gICAgICAgICAgICAmJiBwYXJzZUZsb2F0KGZpcmVmb3hbMV0pID49IDYzXG4gICAgICAgICAgICAmJiBwYXJzZUZsb2F0KGZpcmVmb3hbMV0pIDwgNjZcbiAgICAgICAgICAgICYmIHRoaXMucGFyZW50Tm9kZVxuICAgICAgICAgICAgJiYgdGhpcy5uZXh0U2libGluZykge1xuICAgICAgICAgICAgY29uc3QgZmFrZVRhcmdldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgICAgICBmYWtlVGFyZ2V0LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgICAgICAgIGZha2VUYXJnZXQuc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgICAgICAgICBmYWtlVGFyZ2V0LnRhYkluZGV4ID0gdGhpcy50YWJJbmRleDtcblxuICAgICAgICAgICAgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShmYWtlVGFyZ2V0LCB0aGlzLm5leHRTaWJsaW5nKTtcbiAgICAgICAgICAgIGZha2VUYXJnZXQuZm9jdXMoKTtcbiAgICAgICAgICAgIGZha2VUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXNvdXQnLCAoKSA9PiB0aGlzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZmFrZVRhcmdldCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5hdXRvZm9jdXMgJiYgIXRoaXMuZm9jdXNlZCAmJiAhdGhpcy5kaXNhYmxlZCkge1xuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIHRoaXMuX2ZvY3VzKCk7XG4gICAgICAgIHRoaXMuX3NldEZvY3VzZWQodHJ1ZSk7XG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdmb2N1cy1yaW5nJywgJycpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5fYm91bmRLZXlkb3duTGlzdGVuZXIgPSB0aGlzLl9ib2R5S2V5ZG93bkxpc3RlbmVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fYm91bmRLZXl1cExpc3RlbmVyID0gdGhpcy5fYm9keUtleXVwTGlzdGVuZXIuYmluZCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuXG4gICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5fYm91bmRLZXlkb3duTGlzdGVuZXIsIHRydWUpO1xuICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLl9ib3VuZEtleXVwTGlzdGVuZXIsIHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCk7XG5cbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9ib3VuZEtleWRvd25MaXN0ZW5lciwgdHJ1ZSk7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMuX2JvdW5kS2V5dXBMaXN0ZW5lciwgdHJ1ZSk7XG5cbiAgICAvLyBpbiBub24tQ2hyb21lIGJyb3dzZXJzLCBibHVyIGRvZXMgbm90IGZpcmUgb24gdGhlIGVsZW1lbnQgd2hlbiBpdCBpcyBkaXNjb25uZWN0ZWQuXG4gICAgLy8gcmVwcm9kdWNpYmxlIGluIGA8dmFhZGluLWRhdGUtcGlja2VyPmAgd2hlbiBjbG9zaW5nIG9uIGBDYW5jZWxgIG9yIGBUb2RheWAgY2xpY2suXG4gICAgaWYgKHRoaXMuaGFzQXR0cmlidXRlKCdmb2N1c2VkJykpIHtcbiAgICAgIHRoaXMuX3NldEZvY3VzZWQoZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gIF9zZXRGb2N1c2VkKGZvY3VzZWQpIHtcbiAgICBpZiAoZm9jdXNlZCkge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2ZvY3VzZWQnLCAnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKCdmb2N1c2VkJyk7XG4gICAgfVxuXG4gICAgLy8gZm9jdXMtcmluZyBpcyB0cnVlIHdoZW4gdGhlIGVsZW1lbnQgd2FzIGZvY3VzZWQgZnJvbSB0aGUga2V5Ym9hcmQuXG4gICAgLy8gRm9jdXMgUmluZyBbQTExeWNhc3RzXTogaHR0cHM6Ly95b3V0dS5iZS9pbGoyUDUtNUNqSVxuICAgIGlmIChmb2N1c2VkICYmIHRoaXMuX3RhYlByZXNzZWQpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdmb2N1cy1yaW5nJywgJycpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZSgnZm9jdXMtcmluZycpO1xuICAgIH1cbiAgfVxuXG4gIF9ib2R5S2V5ZG93bkxpc3RlbmVyKGUpIHtcbiAgICB0aGlzLl90YWJQcmVzc2VkID0gZS5rZXlDb2RlID09PSA5O1xuICB9XG5cbiAgX2JvZHlLZXl1cExpc3RlbmVyKCkge1xuICAgIHRoaXMuX3RhYlByZXNzZWQgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbnkgZWxlbWVudCBleHRlbmRpbmcgdGhpcyBtaXhpbiBpcyByZXF1aXJlZCB0byBpbXBsZW1lbnQgdGhpcyBnZXR0ZXIuXG4gICAqIEl0IHJldHVybnMgdGhlIGFjdHVhbCBmb2N1c2FibGUgZWxlbWVudCBpbiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgZ2V0IGZvY3VzRWxlbWVudCgpIHtcbiAgICB3aW5kb3cuY29uc29sZS53YXJuKGBQbGVhc2UgaW1wbGVtZW50IHRoZSAnZm9jdXNFbGVtZW50JyBwcm9wZXJ0eSBpbiA8JHt0aGlzLmxvY2FsTmFtZX0+YCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBfZm9jdXMoZSkge1xuICAgIGlmICh0aGlzLl9pc1NoaWZ0VGFiYmluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZm9jdXNFbGVtZW50LmZvY3VzKCk7XG4gICAgdGhpcy5fc2V0Rm9jdXNlZCh0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNb3ZpbmcgdGhlIGZvY3VzIGZyb20gdGhlIGhvc3QgZWxlbWVudCBjYXVzZXMgZmlyaW5nIG9mIHRoZSBibHVyIGV2ZW50IHdoYXQgbGVhZHMgdG8gcHJvYmxlbXMgaW4gSUUuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmb2N1cygpIHtcbiAgICBpZiAoIXRoaXMuZm9jdXNFbGVtZW50IHx8IHRoaXMuZGlzYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmZvY3VzRWxlbWVudC5mb2N1cygpO1xuICAgIHRoaXMuX3NldEZvY3VzZWQodHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogTmF0aXZlIGJsdXJpbmcgaW4gdGhlIGhvc3QgZWxlbWVudCBkb2VzIG5vdGhpbmcgYmVjYXVzZSBpdCBkb2VzIG5vdCBoYXZlIHRoZSBmb2N1cy5cbiAgICogSW4gY2hyb21lIGl0IHdvcmtzLCBidXQgbm90IGluIEZGLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgYmx1cigpIHtcbiAgICB0aGlzLmZvY3VzRWxlbWVudC5ibHVyKCk7XG4gICAgdGhpcy5fc2V0Rm9jdXNlZChmYWxzZSk7XG4gIH1cblxuICBfZGlzYWJsZWRDaGFuZ2VkKGRpc2FibGVkKSB7XG4gICAgdGhpcy5mb2N1c0VsZW1lbnQuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuYmx1cigpO1xuICAgICAgdGhpcy5fcHJldmlvdXNUYWJJbmRleCA9IHRoaXMudGFiaW5kZXg7XG4gICAgICB0aGlzLnRhYmluZGV4ID0gLTE7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnYXJpYS1kaXNhYmxlZCcsICd0cnVlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5fcHJldmlvdXNUYWJJbmRleCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhpcy50YWJpbmRleCA9IHRoaXMuX3ByZXZpb3VzVGFiSW5kZXg7XG4gICAgICB9XG4gICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1kaXNhYmxlZCcpO1xuICAgIH1cbiAgfVxuXG4gIF90YWJpbmRleENoYW5nZWQodGFiaW5kZXgpIHtcbiAgICBpZiAodGFiaW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5mb2N1c0VsZW1lbnQudGFiSW5kZXggPSB0YWJpbmRleDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5kaXNhYmxlZCAmJiB0aGlzLnRhYmluZGV4KSB7XG4gICAgICAvLyBJZiB0YWJpbmRleCBhdHRyaWJ1dGUgd2FzIGNoYW5nZWQgd2hpbGUgY2hlY2tib3ggd2FzIGRpc2FibGVkXG4gICAgICBpZiAodGhpcy50YWJpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgdGhpcy5fcHJldmlvdXNUYWJJbmRleCA9IHRoaXMudGFiaW5kZXg7XG4gICAgICB9XG4gICAgICB0aGlzLnRhYmluZGV4ID0gdGFiaW5kZXggPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKHdpbmRvdy5TaGFkeURPTSkge1xuICAgICAgdGhpcy5zZXRQcm9wZXJ0aWVzKHt0YWJJbmRleDogdGFiaW5kZXgsIHRhYmluZGV4OiB0YWJpbmRleH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBjbGljaygpIHtcbiAgICBpZiAoIXRoaXMuZGlzYWJsZWQpIHtcbiAgICAgIHN1cGVyLmNsaWNrKCk7XG4gICAgfVxuICB9XG59O1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbmltcG9ydCAnLi9ib290LmpzJztcbmltcG9ydCB7ZW5xdWV1ZURlYm91bmNlciwgZmx1c2hEZWJvdW5jZXJzfSBmcm9tICcuLi91dGlscy9kZWJvdW5jZS5qcyc7XG5leHBvcnQge2VucXVldWVEZWJvdW5jZXJ9O1xuXG4vKipcbiAqIEZvcmNlcyBzZXZlcmFsIGNsYXNzZXMgb2YgYXN5bmNocm9ub3VzbHkgcXVldWVkIHRhc2tzIHRvIGZsdXNoOlxuICogLSBEZWJvdW5jZXJzIGFkZGVkIHZpYSBgZW5xdWV1ZURlYm91bmNlcmBcbiAqIC0gU2hhZHlET00gZGlzdHJpYnV0aW9uXG4gKlxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZXhwb3J0IGNvbnN0IGZsdXNoID0gZnVuY3Rpb24oKSB7XG4gIGxldCBzaGFkeURPTSwgZGVib3VuY2VycztcbiAgZG8ge1xuICAgIHNoYWR5RE9NID0gd2luZG93LlNoYWR5RE9NICYmIFNoYWR5RE9NLmZsdXNoKCk7XG4gICAgaWYgKHdpbmRvdy5TaGFkeUNTUyAmJiB3aW5kb3cuU2hhZHlDU1MuU2NvcGluZ1NoaW0pIHtcbiAgICAgIHdpbmRvdy5TaGFkeUNTUy5TY29waW5nU2hpbS5mbHVzaCgpO1xuICAgIH1cbiAgICBkZWJvdW5jZXJzID0gZmx1c2hEZWJvdW5jZXJzKCk7XG4gIH0gd2hpbGUgKHNoYWR5RE9NIHx8IGRlYm91bmNlcnMpO1xufTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAyMCBWYWFkaW4gTHRkLlxuVGhpcyBwcm9ncmFtIGlzIGF2YWlsYWJsZSB1bmRlciBBcGFjaGUgTGljZW5zZSBWZXJzaW9uIDIuMCwgYXZhaWxhYmxlIGF0IGh0dHBzOi8vdmFhZGluLmNvbS9saWNlbnNlL1xuKi9cbmNvbnN0IERpckhlbHBlciA9IHtcbiAgLyoqXG4gICogR2V0IHRoZSBzY3JvbGwgdHlwZSBpbiB0aGUgY3VycmVudCBicm93c2VyIHZpZXcuXG4gICpcbiAgKiBAcmV0dXJuIHtTdHJpbmd9IHRoZSBzY3JvbGwgdHlwZS4gUG9zc2libGUgdmFsdWVzIGFyZSBgZGVmYXVsdHxyZXZlcnNlfG5lZ2F0aXZlYFxuICAqL1xuICBkZXRlY3RTY3JvbGxUeXBlOiBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXdpbmRvdy5kb2N1bWVudC5ib2R5KSB7XG4gICAgICByZXR1cm4gJ2luZGV0ZXJtaW5hdGUnO1xuICAgIH1cblxuICAgIGNvbnN0IGR1bW15ID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGR1bW15LnRleHRDb250ZW50ID0gJ0FCQ0QnO1xuICAgIGR1bW15LmRpciA9ICdydGwnO1xuICAgIGR1bW15LnN0eWxlLmZvbnRTaXplID0gJzE0cHgnO1xuICAgIGR1bW15LnN0eWxlLndpZHRoID0gJzRweCc7XG4gICAgZHVtbXkuc3R5bGUuaGVpZ2h0ID0gJzFweCc7XG4gICAgZHVtbXkuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgIGR1bW15LnN0eWxlLnRvcCA9ICctMTAwMHB4JztcbiAgICBkdW1teS5zdHlsZS5vdmVyZmxvdyA9ICdzY3JvbGwnO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZHVtbXkpO1xuXG4gICAgbGV0IGNhY2hlZFR5cGUgPSAncmV2ZXJzZSc7XG4gICAgaWYgKGR1bW15LnNjcm9sbExlZnQgPiAwKSB7XG4gICAgICBjYWNoZWRUeXBlID0gJ2RlZmF1bHQnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkdW1teS5zY3JvbGxMZWZ0ID0gMTtcbiAgICAgIGlmIChkdW1teS5zY3JvbGxMZWZ0ID09PSAwKSB7XG4gICAgICAgIGNhY2hlZFR5cGUgPSAnbmVnYXRpdmUnO1xuICAgICAgfVxuICAgIH1cbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGR1bW15KTtcbiAgICByZXR1cm4gY2FjaGVkVHlwZTtcbiAgfSxcblxuICAvKipcbiAgKiBHZXQgdGhlIHNjcm9sbExlZnQgdmFsdWUgb2YgdGhlIGVsZW1lbnQgcmVsYXRpdmUgdG8gdGhlIGRpcmVjdGlvblxuICAqXG4gICogQHBhcmFtIHtTdHJpbmd9IHNjcm9sbFR5cGUgdHlwZSBvZiB0aGUgc2Nyb2xsIGRldGVjdGVkIHdpdGggYGRldGVjdFNjcm9sbFR5cGVgXG4gICogQHBhcmFtIHtTdHJpbmd9IGRpcmVjdGlvbiBjdXJyZW50IGRpcmVjdGlvbiBvZiB0aGUgZWxlbWVudFxuICAqIEBwYXJhbSB7Tm9kZX0gZWxlbWVudFxuICAqIEByZXR1cm4ge051bWJlcn0gdGhlIHNjcm9sbExlZnQgdmFsdWUuXG4gICovXG4gIGdldE5vcm1hbGl6ZWRTY3JvbGxMZWZ0OiBmdW5jdGlvbihzY3JvbGxUeXBlLCBkaXJlY3Rpb24sIGVsZW1lbnQpIHtcbiAgICBjb25zdCB7c2Nyb2xsTGVmdH0gPSBlbGVtZW50O1xuICAgIGlmIChkaXJlY3Rpb24gIT09ICdydGwnIHx8ICFzY3JvbGxUeXBlKSB7XG4gICAgICByZXR1cm4gc2Nyb2xsTGVmdDtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHNjcm9sbFR5cGUpIHtcbiAgICAgIGNhc2UgJ25lZ2F0aXZlJzpcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuc2Nyb2xsV2lkdGggLSBlbGVtZW50LmNsaWVudFdpZHRoICsgc2Nyb2xsTGVmdDtcbiAgICAgIGNhc2UgJ3JldmVyc2UnOlxuICAgICAgICByZXR1cm4gZWxlbWVudC5zY3JvbGxXaWR0aCAtIGVsZW1lbnQuY2xpZW50V2lkdGggLSBzY3JvbGxMZWZ0O1xuICAgIH1cbiAgICByZXR1cm4gc2Nyb2xsTGVmdDtcbiAgfSxcblxuICAvKipcbiAgKiBTZXQgdGhlIHNjcm9sbExlZnQgdmFsdWUgb2YgdGhlIGVsZW1lbnQgcmVsYXRpdmUgdG8gdGhlIGRpcmVjdGlvblxuICAqXG4gICogQHBhcmFtIHtTdHJpbmd9IHNjcm9sbFR5cGUgdHlwZSBvZiB0aGUgc2Nyb2xsIGRldGVjdGVkIHdpdGggYGRldGVjdFNjcm9sbFR5cGVgXG4gICogQHBhcmFtIHtTdHJpbmd9IGRpcmVjdGlvbiBjdXJyZW50IGRpcmVjdGlvbiBvZiB0aGUgZWxlbWVudFxuICAqIEBwYXJhbSB7Tm9kZX0gZWxlbWVudFxuICAqIEBwYXJhbSB7TnVtYmVyfSBzY3JvbGxMZWZ0IHRoZSBzY3JvbGxMZWZ0IHZhbHVlIHRvIGJlIHNldFxuICAqL1xuICBzZXROb3JtYWxpemVkU2Nyb2xsTGVmdDogZnVuY3Rpb24oc2Nyb2xsVHlwZSwgZGlyZWN0aW9uLCBlbGVtZW50LCBzY3JvbGxMZWZ0KSB7XG4gICAgaWYgKGRpcmVjdGlvbiAhPT0gJ3J0bCcgfHwgIXNjcm9sbFR5cGUpIHtcbiAgICAgIGVsZW1lbnQuc2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3dpdGNoIChzY3JvbGxUeXBlKSB7XG4gICAgICBjYXNlICduZWdhdGl2ZSc6XG4gICAgICAgIGVsZW1lbnQuc2Nyb2xsTGVmdCA9IGVsZW1lbnQuY2xpZW50V2lkdGggLSBlbGVtZW50LnNjcm9sbFdpZHRoICsgc2Nyb2xsTGVmdDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyZXZlcnNlJzpcbiAgICAgICAgZWxlbWVudC5zY3JvbGxMZWZ0ID0gZWxlbWVudC5zY3JvbGxXaWR0aCAtIGVsZW1lbnQuY2xpZW50V2lkdGggLSBzY3JvbGxMZWZ0O1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGVsZW1lbnQuc2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQ7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IHsgRGlySGVscGVyIH07XG4iLCJpbXBvcnQgeyBEaXJIZWxwZXIgfSBmcm9tICcuL3ZhYWRpbi1kaXItaGVscGVyLmpzJztcbi8qKlxuICogQXJyYXkgb2YgVmFhZGluIGN1c3RvbSBlbGVtZW50IGNsYXNzZXMgdGhhdCBoYXZlIGJlZW4gc3Vic2NyaWJlZCB0byB0aGUgZGlyIGNoYW5nZXMuXG4gKi9cbmNvbnN0IGRpcmVjdGlvblN1YnNjcmliZXJzID0gW107XG5jb25zdCBkaXJlY3Rpb25VcGRhdGVyID0gZnVuY3Rpb24oKSB7XG4gIGNvbnN0IGRvY3VtZW50RGlyID0gZ2V0RG9jdW1lbnREaXIoKTtcbiAgZGlyZWN0aW9uU3Vic2NyaWJlcnMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICBhbGlnbkRpcnMoZWxlbWVudCwgZG9jdW1lbnREaXIpO1xuICB9KTtcbn07XG5cbmNvbnN0IHNjcm9sbFR5cGUgPSBEaXJIZWxwZXIuZGV0ZWN0U2Nyb2xsVHlwZSgpO1xuXG5jb25zdCBkaXJlY3Rpb25PYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGRpcmVjdGlvblVwZGF0ZXIpO1xuZGlyZWN0aW9uT2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHthdHRyaWJ1dGVzOiB0cnVlLCBhdHRyaWJ1dGVGaWx0ZXI6IFsnZGlyJ119KTtcblxuY29uc3QgYWxpZ25EaXJzID0gZnVuY3Rpb24oZWxlbWVudCwgZG9jdW1lbnREaXIpIHtcbiAgaWYgKGRvY3VtZW50RGlyKSB7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RpcicsIGRvY3VtZW50RGlyKTtcbiAgfSBlbHNlIHtcbiAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnZGlyJyk7XG4gIH1cbn07XG5cbmNvbnN0IGdldERvY3VtZW50RGlyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkaXInKTtcbn07XG5cbi8qKlxuICogQHBvbHltZXJNaXhpblxuICovXG5leHBvcnQgY29uc3QgRGlyTWl4aW4gPSBzdXBlckNsYXNzID0+IGNsYXNzIFZhYWRpbkRpck1peGluIGV4dGVuZHMgc3VwZXJDbGFzcyB7XG4gIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLyoqXG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIGRpcjoge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIHJlYWRPbmx5OiB0cnVlXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuXG4gICAgaWYgKCF0aGlzLmhhc0F0dHJpYnV0ZSgnZGlyJykpIHtcbiAgICAgIHRoaXMuX19zdWJzY3JpYmUoKTtcbiAgICAgIGFsaWduRGlycyh0aGlzLCBnZXREb2N1bWVudERpcigpKTtcbiAgICB9XG4gIH1cblxuICAvKiogQHByb3RlY3RlZCAqL1xuICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sobmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgc3VwZXIuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSk7XG4gICAgaWYgKG5hbWUgIT09ICdkaXInKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gTmV3IHZhbHVlIGVxdWFscyB0byB0aGUgZG9jdW1lbnQgZGlyZWN0aW9uIGFuZCB0aGUgZWxlbWVudCBpcyBub3Qgc3Vic2NyaWJlZCB0byB0aGUgY2hhbmdlc1xuICAgIGNvbnN0IG5ld1ZhbHVlRXFsRG9jRGlyID0gbmV3VmFsdWUgPT09IGdldERvY3VtZW50RGlyKCkgJiYgZGlyZWN0aW9uU3Vic2NyaWJlcnMuaW5kZXhPZih0aGlzKSA9PT0gLTE7XG4gICAgLy8gVmFsdWUgd2FzIGVtcHRpZWQgYW5kIHRoZSBlbGVtZW50IGlzIG5vdCBzdWJzY3JpYmVkIHRvIHRoZSBjaGFuZ2VzXG4gICAgY29uc3QgbmV3VmFsdWVFbXB0aWVkID0gIW5ld1ZhbHVlICYmIG9sZFZhbHVlICYmIGRpcmVjdGlvblN1YnNjcmliZXJzLmluZGV4T2YodGhpcykgPT09IC0xO1xuICAgIC8vIE5ldyB2YWx1ZSBpcyBkaWZmZXJlbnQgYW5kIHRoZSBvbGQgZXF1YWxzIHRvIGRvY3VtZW50IGRpcmVjdGlvbiBhbmQgdGhlIGVsZW1lbnQgaXMgbm90IHN1YnNjcmliZWQgdG8gdGhlIGNoYW5nZXNcbiAgICBjb25zdCBuZXdEaWZmVmFsdWUgPSBuZXdWYWx1ZSAhPT0gZ2V0RG9jdW1lbnREaXIoKSAmJiBvbGRWYWx1ZSA9PT0gZ2V0RG9jdW1lbnREaXIoKTtcblxuICAgIGlmIChuZXdWYWx1ZUVxbERvY0RpciB8fCBuZXdWYWx1ZUVtcHRpZWQpIHtcbiAgICAgIHRoaXMuX19zdWJzY3JpYmUoKTtcbiAgICAgIGFsaWduRGlycyh0aGlzLCBnZXREb2N1bWVudERpcigpKTtcbiAgICB9IGVsc2UgaWYgKG5ld0RpZmZWYWx1ZSkge1xuICAgICAgdGhpcy5fX3N1YnNjcmliZShmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB0aGlzLl9fc3Vic2NyaWJlKGZhbHNlKTtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZSgnZGlyJyk7XG4gIH1cblxuICBfX3N1YnNjcmliZShwdXNoID0gdHJ1ZSkge1xuICAgIGlmIChwdXNoKSB7XG4gICAgICBkaXJlY3Rpb25TdWJzY3JpYmVycy5pbmRleE9mKHRoaXMpID09PSAtMSAmJlxuICAgICAgICBkaXJlY3Rpb25TdWJzY3JpYmVycy5wdXNoKHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkaXJlY3Rpb25TdWJzY3JpYmVycy5pbmRleE9mKHRoaXMpID4gLTEgJiZcbiAgICAgICAgZGlyZWN0aW9uU3Vic2NyaWJlcnMuc3BsaWNlKGRpcmVjdGlvblN1YnNjcmliZXJzLmluZGV4T2YodGhpcyksIDEpO1xuICAgIH1cbiAgfVxuXG4gIF9fZ2V0Tm9ybWFsaXplZFNjcm9sbExlZnQoZWxlbWVudCkge1xuICAgIHJldHVybiBEaXJIZWxwZXIuZ2V0Tm9ybWFsaXplZFNjcm9sbExlZnQoc2Nyb2xsVHlwZSwgdGhpcy5nZXRBdHRyaWJ1dGUoJ2RpcicpIHx8ICdsdHInLCBlbGVtZW50KTtcbiAgfVxuXG4gIF9fc2V0Tm9ybWFsaXplZFNjcm9sbExlZnQoZWxlbWVudCwgc2Nyb2xsTGVmdCkge1xuICAgIHJldHVybiBEaXJIZWxwZXIuc2V0Tm9ybWFsaXplZFNjcm9sbExlZnQoc2Nyb2xsVHlwZSwgdGhpcy5nZXRBdHRyaWJ1dGUoJ2RpcicpIHx8ICdsdHInLCBlbGVtZW50LCBzY3JvbGxMZWZ0KTtcbiAgfVxufTtcbiIsImNvbnN0IERFVl9NT0RFX0NPREVfUkVHRVhQID1cbiAgL1xcL1xcKlxcKlxccyt2YWFkaW4tZGV2LW1vZGU6c3RhcnQoW1xcc1xcU10qKXZhYWRpbi1kZXYtbW9kZTplbmRcXHMrXFwqXFwqXFwvL2k7XG5cbmNvbnN0IEZsb3dDbGllbnRzID0gd2luZG93LlZhYWRpbiAmJiB3aW5kb3cuVmFhZGluLkZsb3cgJiYgd2luZG93LlZhYWRpbi5GbG93LmNsaWVudHM7XG5cbmZ1bmN0aW9uIGlzTWluaWZpZWQoKSB7XG4gIGZ1bmN0aW9uIHRlc3QoKSB7XG4gICAgLyoqIHZhYWRpbi1kZXYtbW9kZTpzdGFydFxuICAgIHJldHVybiBmYWxzZTtcbiAgICB2YWFkaW4tZGV2LW1vZGU6ZW5kICoqL1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiB1bmNvbW1lbnRBbmRSdW4odGVzdCk7XG59XG5cbmZ1bmN0aW9uIGlzRGV2ZWxvcG1lbnRNb2RlKCkge1xuICB0cnkge1xuICAgIGlmIChpc0ZvcmNlZERldmVsb3BtZW50TW9kZSgpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoIWlzTG9jYWxob3N0KCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoRmxvd0NsaWVudHMpIHtcbiAgICAgIHJldHVybiAhaXNGbG93UHJvZHVjdGlvbk1vZGUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gIWlzTWluaWZpZWQoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIFNvbWUgZXJyb3IgaW4gdGhpcyBjb2RlLCBhc3N1bWUgcHJvZHVjdGlvbiBzbyBubyBmdXJ0aGVyIGFjdGlvbnMgd2lsbCBiZSB0YWtlblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0ZvcmNlZERldmVsb3BtZW50TW9kZSgpIHtcbiAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwidmFhZGluLmRldmVsb3BtZW50bW9kZS5mb3JjZVwiKTtcbn1cblxuZnVuY3Rpb24gaXNMb2NhbGhvc3QoKSB7XG4gIHJldHVybiAoW1wibG9jYWxob3N0XCIsXCIxMjcuMC4wLjFcIl0uaW5kZXhPZih3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUpID49IDApO1xufVxuXG5mdW5jdGlvbiBpc0Zsb3dQcm9kdWN0aW9uTW9kZSgpIHtcbiAgaWYgKEZsb3dDbGllbnRzKSB7XG4gICAgY29uc3QgcHJvZHVjdGlvbk1vZGVBcHBzID0gT2JqZWN0LmtleXMoRmxvd0NsaWVudHMpXG4gICAgICAubWFwKGtleSA9PiBGbG93Q2xpZW50c1trZXldKVxuICAgICAgLmZpbHRlcihjbGllbnQgPT4gY2xpZW50LnByb2R1Y3Rpb25Nb2RlKTtcbiAgICBpZiAocHJvZHVjdGlvbk1vZGVBcHBzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHVuY29tbWVudEFuZFJ1bihjYWxsYmFjaywgYXJncykge1xuICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgbWF0Y2ggPSBERVZfTU9ERV9DT0RFX1JFR0VYUC5leGVjKGNhbGxiYWNrLnRvU3RyaW5nKCkpO1xuICBpZiAobWF0Y2gpIHtcbiAgICB0cnkge1xuICAgICAgLy8gcmVxdWlyZXMgQ1NQOiBzY3JpcHQtc3JjICd1bnNhZmUtZXZhbCdcbiAgICAgIGNhbGxiYWNrID0gbmV3IEZ1bmN0aW9uKG1hdGNoWzFdKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBlYXQgdGhlIGV4Y2VwdGlvblxuICAgICAgY29uc29sZS5sb2coJ3ZhYWRpbi1kZXZlbG9wbWVudC1tb2RlLWRldGVjdG9yOiB1bmNvbW1lbnRBbmRSdW4oKSBmYWlsZWQnLCBlKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjYWxsYmFjayhhcmdzKTtcbn1cblxuLy8gQSBndWFyZCBhZ2FpbnN0IHBvbHltZXItbW9kdWxpemVyIHJlbW92aW5nIHRoZSB3aW5kb3cuVmFhZGluXG4vLyBpbml0aWFsaXphdGlvbiBhYm92ZS5cbndpbmRvd1snVmFhZGluJ10gPSB3aW5kb3dbJ1ZhYWRpbiddIHx8IHt9O1xuXG4vKipcbiAqIEluc3BlY3RzIHRoZSBzb3VyY2UgY29kZSBvZiB0aGUgZ2l2ZW4gYGNhbGxiYWNrYCBmdW5jdGlvbiBmb3JcbiAqIHNwZWNpYWxseS1tYXJrZWQgX2NvbW1lbnRlZF8gY29kZS4gSWYgc3VjaCBjb21tZW50ZWQgY29kZSBpcyBmb3VuZCBpbiB0aGVcbiAqIGNhbGxiYWNrIHNvdXJjZSwgdW5jb21tZW50cyBhbmQgcnVucyB0aGF0IGNvZGUgaW5zdGVhZCBvZiB0aGUgY2FsbGJhY2tcbiAqIGl0c2VsZi4gT3RoZXJ3aXNlIHJ1bnMgdGhlIGNhbGxiYWNrIGFzIGlzLlxuICpcbiAqIFRoZSBvcHRpb25hbCBhcmd1bWVudHMgYXJlIHBhc3NlZCBpbnRvIHRoZSBjYWxsYmFjayAvIHVuY29tbWVudGVkIGNvZGUsXG4gKiB0aGUgcmVzdWx0IGlzIHJldHVybmVkLlxuICpcbiAqIFNlZSB0aGUgYGlzTWluaWZpZWQoKWAgZnVuY3Rpb24gc291cmNlIGNvZGUgaW4gdGhpcyBmaWxlIGZvciBhbiBleGFtcGxlLlxuICpcbiAqL1xuZXhwb3J0IGNvbnN0IHJ1bklmRGV2ZWxvcG1lbnRNb2RlID0gZnVuY3Rpb24oY2FsbGJhY2ssIGFyZ3MpIHtcbiAgaWYgKHdpbmRvdy5WYWFkaW4uZGV2ZWxvcG1lbnRNb2RlKSB7XG4gICAgcmV0dXJuIHVuY29tbWVudEFuZFJ1bihjYWxsYmFjaywgYXJncyk7XG4gIH1cbn07XG5cbmlmICh3aW5kb3cuVmFhZGluLmRldmVsb3BtZW50TW9kZSA9PT0gdW5kZWZpbmVkKSB7XG4gIHdpbmRvdy5WYWFkaW4uZGV2ZWxvcG1lbnRNb2RlID0gaXNEZXZlbG9wbWVudE1vZGUoKTtcbn1cbiIsIi8qIFRoaXMgZmlsZSBpcyBhdXRvZ2VuZXJhdGVkIGZyb20gc3JjL3ZhYWRpbi11c2FnZS1zdGF0aXN0aWNzLnRwbC5odG1sICovXG4vKlxuXG5UaGlzIHNjcmlwdCBnYXRoZXJzIHVzYWdlIHN0YXRpc3RpY3MgZnJvbSB0aGUgYXBwbGljYXRpb24gcnVubmluZyBpbiBkZXZlbG9wbWVudCBtb2RlLlxuXG5TdGF0aXN0aWNzIGdhdGhlcmluZyBpcyBhdXRvbWF0aWNhbGx5IGRpc2FibGVkIGFuZCBleGNsdWRlZCBmcm9tIHByb2R1Y3Rpb24gYnVpbGRzLlxuXG5Gb3IgZGV0YWlscyBhbmQgdG8gb3B0LW91dCwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS92YWFkaW4vdmFhZGluLXVzYWdlLXN0YXRpc3RpY3MuXG5cbiovXG4vKlxuICBGSVhNRShwb2x5bWVyLW1vZHVsaXplcik6IHRoZSBhYm92ZSBjb21tZW50cyB3ZXJlIGV4dHJhY3RlZFxuICBmcm9tIEhUTUwgYW5kIG1heSBiZSBvdXQgb2YgcGxhY2UgaGVyZS4gUmV2aWV3IHRoZW0gYW5kXG4gIHRoZW4gZGVsZXRlIHRoaXMgY29tbWVudCFcbiovXG5pbXBvcnQgeyBydW5JZkRldmVsb3BtZW50TW9kZSB9IGZyb20gJ0B2YWFkaW4vdmFhZGluLWRldmVsb3BtZW50LW1vZGUtZGV0ZWN0b3IvdmFhZGluLWRldmVsb3BtZW50LW1vZGUtZGV0ZWN0b3IuanMnO1xuXG5mdW5jdGlvbiBtYXliZUdhdGhlckFuZFNlbmRTdGF0cygpIHtcbiAgLyoqIHZhYWRpbi1kZXYtbW9kZTpzdGFydFxuICAoZnVuY3Rpb24gKCkge1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iajtcbn0gOiBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xufTtcblxudmFyIGNsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07XG5cbnZhciBjcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxudmFyIGdldFBvbHltZXJWZXJzaW9uID0gZnVuY3Rpb24gZ2V0UG9seW1lclZlcnNpb24oKSB7XG4gIHJldHVybiB3aW5kb3cuUG9seW1lciAmJiB3aW5kb3cuUG9seW1lci52ZXJzaW9uO1xufTtcblxudmFyIFN0YXRpc3RpY3NHYXRoZXJlciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3RhdGlzdGljc0dhdGhlcmVyKGxvZ2dlcikge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFN0YXRpc3RpY3NHYXRoZXJlcik7XG5cbiAgICB0aGlzLm5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoU3RhdGlzdGljc0dhdGhlcmVyLCBbe1xuICAgIGtleTogJ2ZyYW1ld29ya1ZlcnNpb25EZXRlY3RvcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmcmFtZXdvcmtWZXJzaW9uRGV0ZWN0b3JzKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgJ0Zsb3cnOiBmdW5jdGlvbiBGbG93KCkge1xuICAgICAgICAgIGlmICh3aW5kb3cuVmFhZGluICYmIHdpbmRvdy5WYWFkaW4uRmxvdyAmJiB3aW5kb3cuVmFhZGluLkZsb3cuY2xpZW50cykge1xuICAgICAgICAgICAgdmFyIGZsb3dWZXJzaW9ucyA9IE9iamVjdC5rZXlzKHdpbmRvdy5WYWFkaW4uRmxvdy5jbGllbnRzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICByZXR1cm4gd2luZG93LlZhYWRpbi5GbG93LmNsaWVudHNba2V5XTtcbiAgICAgICAgICAgIH0pLmZpbHRlcihmdW5jdGlvbiAoY2xpZW50KSB7XG4gICAgICAgICAgICAgIHJldHVybiBjbGllbnQuZ2V0VmVyc2lvbkluZm87XG4gICAgICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKGNsaWVudCkge1xuICAgICAgICAgICAgICByZXR1cm4gY2xpZW50LmdldFZlcnNpb25JbmZvKCkuZmxvdztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGZsb3dWZXJzaW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmbG93VmVyc2lvbnNbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnVmFhZGluIEZyYW1ld29yayc6IGZ1bmN0aW9uIFZhYWRpbkZyYW1ld29yaygpIHtcbiAgICAgICAgICBpZiAod2luZG93LnZhYWRpbiAmJiB3aW5kb3cudmFhZGluLmNsaWVudHMpIHtcbiAgICAgICAgICAgIHZhciBmcmFtZXdvcmtWZXJzaW9ucyA9IE9iamVjdC52YWx1ZXMod2luZG93LnZhYWRpbi5jbGllbnRzKS5maWx0ZXIoZnVuY3Rpb24gKGNsaWVudCkge1xuICAgICAgICAgICAgICByZXR1cm4gY2xpZW50LmdldFZlcnNpb25JbmZvO1xuICAgICAgICAgICAgfSkubWFwKGZ1bmN0aW9uIChjbGllbnQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNsaWVudC5nZXRWZXJzaW9uSW5mbygpLnZhYWRpblZlcnNpb247XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChmcmFtZXdvcmtWZXJzaW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmcmFtZXdvcmtWZXJzaW9uc1swXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdBbmd1bGFySnMnOiBmdW5jdGlvbiBBbmd1bGFySnMoKSB7XG4gICAgICAgICAgaWYgKHdpbmRvdy5hbmd1bGFyICYmIHdpbmRvdy5hbmd1bGFyLnZlcnNpb24gJiYgd2luZG93LmFuZ3VsYXIudmVyc2lvbikge1xuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5hbmd1bGFyLnZlcnNpb24uZnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdBbmd1bGFyJzogZnVuY3Rpb24gQW5ndWxhcigpIHtcbiAgICAgICAgICBpZiAod2luZG93Lm5nKSB7XG4gICAgICAgICAgICB2YXIgdGFncyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmctdmVyc2lvbl1cIik7XG4gICAgICAgICAgICBpZiAodGFncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0YWdzWzBdLmdldEF0dHJpYnV0ZShcIm5nLXZlcnNpb25cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gXCJVbmtub3duXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnQmFja2JvbmUuanMnOiBmdW5jdGlvbiBCYWNrYm9uZUpzKCkge1xuICAgICAgICAgIGlmICh3aW5kb3cuQmFja2JvbmUpIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuQmFja2JvbmUuVkVSU0lPTjtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdSZWFjdCc6IGZ1bmN0aW9uIFJlYWN0KCkge1xuICAgICAgICAgIHZhciByZWFjdFNlbGVjdG9yID0gJ1tkYXRhLXJlYWN0cm9vdF0sIFtkYXRhLXJlYWN0aWRdJztcbiAgICAgICAgICBpZiAoISFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHJlYWN0U2VsZWN0b3IpKSB7XG4gICAgICAgICAgICAvLyBSZWFjdCBkb2VzIG5vdCBwdWJsaXNoIHRoZSB2ZXJzaW9uIGJ5IGRlZmF1bHRcbiAgICAgICAgICAgIHJldHVybiBcInVua25vd25cIjtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdFbWJlcic6IGZ1bmN0aW9uIEVtYmVyKCkge1xuICAgICAgICAgIGlmICh3aW5kb3cuRW0gJiYgd2luZG93LkVtLlZFUlNJT04pIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuRW0uVkVSU0lPTjtcbiAgICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5FbWJlciAmJiB3aW5kb3cuRW1iZXIuVkVSU0lPTikge1xuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5FbWJlci5WRVJTSU9OO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ2pRdWVyeSc6IGZ1bmN0aW9uIChfalF1ZXJ5KSB7XG4gICAgICAgICAgZnVuY3Rpb24galF1ZXJ5KCkge1xuICAgICAgICAgICAgcmV0dXJuIF9qUXVlcnkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBqUXVlcnkudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2pRdWVyeS50b1N0cmluZygpO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICByZXR1cm4galF1ZXJ5O1xuICAgICAgICB9KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGpRdWVyeSA9PT0gJ2Z1bmN0aW9uJyAmJiBqUXVlcnkucHJvdG90eXBlLmpxdWVyeSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4galF1ZXJ5LnByb3RvdHlwZS5qcXVlcnk7XG4gICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAgJ1BvbHltZXInOiBmdW5jdGlvbiBQb2x5bWVyKCkge1xuICAgICAgICAgIHZhciB2ZXJzaW9uID0gZ2V0UG9seW1lclZlcnNpb24oKTtcbiAgICAgICAgICBpZiAodmVyc2lvbikge1xuICAgICAgICAgICAgcmV0dXJuIHZlcnNpb247XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnTGl0RWxlbWVudCc6IGZ1bmN0aW9uIExpdEVsZW1lbnQoKSB7XG4gICAgICAgICAgdmFyIHZlcnNpb24gPSB3aW5kb3cubGl0RWxlbWVudFZlcnNpb25zICYmIHdpbmRvdy5saXRFbGVtZW50VmVyc2lvbnNbMF07XG4gICAgICAgICAgaWYgKHZlcnNpb24pIHtcbiAgICAgICAgICAgIHJldHVybiB2ZXJzaW9uO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ0xpdEh0bWwnOiBmdW5jdGlvbiBMaXRIdG1sKCkge1xuICAgICAgICAgIHZhciB2ZXJzaW9uID0gd2luZG93LmxpdEh0bWxWZXJzaW9ucyAmJiB3aW5kb3cubGl0SHRtbFZlcnNpb25zWzBdO1xuICAgICAgICAgIGlmICh2ZXJzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdmVyc2lvbjtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdWdWUuanMnOiBmdW5jdGlvbiBWdWVKcygpIHtcbiAgICAgICAgICBpZiAod2luZG93LlZ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5WdWUudmVyc2lvbjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0VXNlZFZhYWRpbkVsZW1lbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VXNlZFZhYWRpbkVsZW1lbnRzKGVsZW1lbnRzKSB7XG4gICAgICB2YXIgdmVyc2lvbiA9IGdldFBvbHltZXJWZXJzaW9uKCk7XG4gICAgICB2YXIgZWxlbWVudENsYXNzZXMgPSB2b2lkIDA7XG4gICAgICAvLyBOT1RFOiBJbiBjYXNlIHlvdSBlZGl0IHRoZSBjb2RlIGhlcmUsIFlPVSBNVVNUIFVQREFURSBhbnkgc3RhdGlzdGljcyByZXBvcnRpbmcgY29kZSBpbiBGbG93LlxuICAgICAgLy8gQ2hlY2sgYWxsIGxvY2F0aW9ucyBjYWxsaW5nIHRoZSBtZXRob2QgZ2V0RW50cmllcygpIGluXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdmFhZGluL2Zsb3cvYmxvYi9tYXN0ZXIvZmxvdy1zZXJ2ZXIvc3JjL21haW4vamF2YS9jb20vdmFhZGluL2Zsb3cvaW50ZXJuYWwvVXNhZ2VTdGF0aXN0aWNzLmphdmEjTDEwNlxuICAgICAgLy8gQ3VycmVudGx5IGl0IGlzIG9ubHkgdXNlZCBieSBCb290c3RyYXBIYW5kbGVyLlxuICAgICAgaWYgKHZlcnNpb24gJiYgdmVyc2lvbi5pbmRleE9mKCcyJykgPT09IDApIHtcbiAgICAgICAgLy8gUG9seW1lciAyOiBjb21wb25lbnRzIGNsYXNzZXMgYXJlIHN0b3JlZCBpbiB3aW5kb3cuVmFhZGluXG4gICAgICAgIGVsZW1lbnRDbGFzc2VzID0gT2JqZWN0LmtleXMod2luZG93LlZhYWRpbikubWFwKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgcmV0dXJuIHdpbmRvdy5WYWFkaW5bY107XG4gICAgICAgIH0pLmZpbHRlcihmdW5jdGlvbiAoYykge1xuICAgICAgICAgIHJldHVybiBjLmlzO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFBvbHltZXIgMzogY29tcG9uZW50cyBjbGFzc2VzIGFyZSBzdG9yZWQgaW4gd2luZG93LlZhYWRpbi5yZWdpc3RyYXRpb25zXG4gICAgICAgIGVsZW1lbnRDbGFzc2VzID0gd2luZG93LlZhYWRpbi5yZWdpc3RyYXRpb25zIHx8IFtdO1xuICAgICAgfVxuICAgICAgZWxlbWVudENsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoa2xhc3MpIHtcbiAgICAgICAgdmFyIHZlcnNpb24gPSBrbGFzcy52ZXJzaW9uID8ga2xhc3MudmVyc2lvbiA6IFwiMC4wLjBcIjtcbiAgICAgICAgZWxlbWVudHNba2xhc3MuaXNdID0geyB2ZXJzaW9uOiB2ZXJzaW9uIH07XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRVc2VkVmFhZGluVGhlbWVzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VXNlZFZhYWRpblRoZW1lcyh0aGVtZXMpIHtcbiAgICAgIFsnTHVtbycsICdNYXRlcmlhbCddLmZvckVhY2goZnVuY3Rpb24gKHRoZW1lTmFtZSkge1xuICAgICAgICB2YXIgdGhlbWU7XG4gICAgICAgIHZhciB2ZXJzaW9uID0gZ2V0UG9seW1lclZlcnNpb24oKTtcbiAgICAgICAgaWYgKHZlcnNpb24gJiYgdmVyc2lvbi5pbmRleE9mKCcyJykgPT09IDApIHtcbiAgICAgICAgICAvLyBQb2x5bWVyIDI6IHRoZW1lcyBhcmUgc3RvcmVkIGluIHdpbmRvdy5WYWFkaW5cbiAgICAgICAgICB0aGVtZSA9IHdpbmRvdy5WYWFkaW5bdGhlbWVOYW1lXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBQb2x5bWVyIDM6IHRoZW1lcyBhcmUgc3RvcmVkIGluIGN1c3RvbSBlbGVtZW50IHJlZ2lzdHJ5XG4gICAgICAgICAgdGhlbWUgPSBjdXN0b21FbGVtZW50cy5nZXQoJ3ZhYWRpbi0nICsgdGhlbWVOYW1lLnRvTG93ZXJDYXNlKCkgKyAnLXN0eWxlcycpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGVtZSAmJiB0aGVtZS52ZXJzaW9uKSB7XG4gICAgICAgICAgdGhlbWVzW3RoZW1lTmFtZV0gPSB7IHZlcnNpb246IHRoZW1lLnZlcnNpb24gfTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0RnJhbWV3b3JrcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEZyYW1ld29ya3MoZnJhbWV3b3Jrcykge1xuICAgICAgdmFyIGRldGVjdG9ycyA9IHRoaXMuZnJhbWV3b3JrVmVyc2lvbkRldGVjdG9ycygpO1xuICAgICAgT2JqZWN0LmtleXMoZGV0ZWN0b3JzKS5mb3JFYWNoKGZ1bmN0aW9uIChmcmFtZXdvcmspIHtcbiAgICAgICAgdmFyIGRldGVjdG9yID0gZGV0ZWN0b3JzW2ZyYW1ld29ya107XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFyIHZlcnNpb24gPSBkZXRlY3RvcigpO1xuICAgICAgICAgIGlmICh2ZXJzaW9uKSB7XG4gICAgICAgICAgICBmcmFtZXdvcmtzW2ZyYW1ld29ya10gPSB7IHZlcnNpb246IHZlcnNpb24gfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnYXRoZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnYXRoZXIoc3RvcmFnZSkge1xuICAgICAgdmFyIHN0b3JlZFN0YXRzID0gc3RvcmFnZS5yZWFkKCk7XG4gICAgICB2YXIgZ2F0aGVyZWRTdGF0cyA9IHt9O1xuICAgICAgdmFyIHR5cGVzID0gW1wiZWxlbWVudHNcIiwgXCJmcmFtZXdvcmtzXCIsIFwidGhlbWVzXCJdO1xuXG4gICAgICB0eXBlcy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgIGdhdGhlcmVkU3RhdHNbdHlwZV0gPSB7fTtcbiAgICAgICAgaWYgKCFzdG9yZWRTdGF0c1t0eXBlXSkge1xuICAgICAgICAgIHN0b3JlZFN0YXRzW3R5cGVdID0ge307XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB2YXIgcHJldmlvdXNTdGF0cyA9IEpTT04uc3RyaW5naWZ5KHN0b3JlZFN0YXRzKTtcblxuICAgICAgdGhpcy5nZXRVc2VkVmFhZGluRWxlbWVudHMoZ2F0aGVyZWRTdGF0cy5lbGVtZW50cyk7XG4gICAgICB0aGlzLmdldEZyYW1ld29ya3MoZ2F0aGVyZWRTdGF0cy5mcmFtZXdvcmtzKTtcbiAgICAgIHRoaXMuZ2V0VXNlZFZhYWRpblRoZW1lcyhnYXRoZXJlZFN0YXRzLnRoZW1lcyk7XG5cbiAgICAgIHZhciBub3cgPSB0aGlzLm5vdztcbiAgICAgIHR5cGVzLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhnYXRoZXJlZFN0YXRzW3R5cGVdKTtcbiAgICAgICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICBpZiAoIXN0b3JlZFN0YXRzW3R5cGVdW2tleV0gfHwgX3R5cGVvZihzdG9yZWRTdGF0c1t0eXBlXVtrZXldKSAhPSBfdHlwZW9mKHt9KSkge1xuICAgICAgICAgICAgc3RvcmVkU3RhdHNbdHlwZV1ba2V5XSA9IHsgZmlyc3RVc2VkOiBub3cgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gRGlzY2FyZHMgYW55IHByZXZpb3VzbHkgbG9nZ2VkIHZlcnNpb24gbnVtYmVyXG4gICAgICAgICAgc3RvcmVkU3RhdHNbdHlwZV1ba2V5XS52ZXJzaW9uID0gZ2F0aGVyZWRTdGF0c1t0eXBlXVtrZXldLnZlcnNpb247XG4gICAgICAgICAgc3RvcmVkU3RhdHNbdHlwZV1ba2V5XS5sYXN0VXNlZCA9IG5vdztcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgdmFyIG5ld1N0YXRzID0gSlNPTi5zdHJpbmdpZnkoc3RvcmVkU3RhdHMpO1xuICAgICAgc3RvcmFnZS53cml0ZShuZXdTdGF0cyk7XG4gICAgICBpZiAobmV3U3RhdHMgIT0gcHJldmlvdXNTdGF0cyAmJiBPYmplY3Qua2V5cyhzdG9yZWRTdGF0cykubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcIk5ldyBzdGF0czogXCIgKyBuZXdTdGF0cyk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBTdGF0aXN0aWNzR2F0aGVyZXI7XG59KCk7XG5cbnZhciBTdGF0aXN0aWNzU3RvcmFnZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3RhdGlzdGljc1N0b3JhZ2Uoa2V5KSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RhdGlzdGljc1N0b3JhZ2UpO1xuXG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhTdGF0aXN0aWNzU3RvcmFnZSwgW3tcbiAgICBrZXk6ICdyZWFkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZCgpIHtcbiAgICAgIHZhciBsb2NhbFN0b3JhZ2VTdGF0c1N0cmluZyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMua2V5KTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZVN0YXRzU3RyaW5nID8gbG9jYWxTdG9yYWdlU3RhdHNTdHJpbmcgOiAne30nKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3dyaXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gd3JpdGUoZGF0YSkge1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5rZXksIGRhdGEpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NsZWFyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSh0aGlzLmtleSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaXNFbXB0eScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzRW1wdHkoKSB7XG4gICAgICB2YXIgc3RvcmVkU3RhdHMgPSB0aGlzLnJlYWQoKTtcbiAgICAgIHZhciBlbXB0eSA9IHRydWU7XG4gICAgICBPYmplY3Qua2V5cyhzdG9yZWRTdGF0cykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhzdG9yZWRTdGF0c1trZXldKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgZW1wdHkgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBlbXB0eTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFN0YXRpc3RpY3NTdG9yYWdlO1xufSgpO1xuXG52YXIgU3RhdGlzdGljc1NlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3RhdGlzdGljc1NlbmRlcih1cmwsIGxvZ2dlcikge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFN0YXRpc3RpY3NTZW5kZXIpO1xuXG4gICAgdGhpcy51cmwgPSB1cmw7XG4gICAgdGhpcy5sb2dnZXIgPSBsb2dnZXI7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhTdGF0aXN0aWNzU2VuZGVyLCBbe1xuICAgIGtleTogJ3NlbmQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZW5kKGRhdGEsIGVycm9ySGFuZGxlcikge1xuICAgICAgdmFyIGxvZ2dlciA9IHRoaXMubG9nZ2VyO1xuXG4gICAgICBpZiAobmF2aWdhdG9yLm9uTGluZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKFwiT2ZmbGluZSwgY2FuJ3Qgc2VuZFwiKTtcbiAgICAgICAgZXJyb3JIYW5kbGVyKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxvZ2dlci5kZWJ1ZyhcIlNlbmRpbmcgZGF0YSB0byBcIiArIHRoaXMudXJsKTtcblxuICAgICAgdmFyIHJlcSA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgcmVxLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgICByZXEuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBTdGF0cyBzZW50LCBub3RoaW5nIG1vcmUgdG8gZG9cbiAgICAgICAgbG9nZ2VyLmRlYnVnKFwiUmVzcG9uc2U6IFwiICsgcmVxLnJlc3BvbnNlVGV4dCk7XG4gICAgICB9KTtcbiAgICAgIHJlcS5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBsb2dnZXIuZGVidWcoXCJTZW5kIGZhaWxlZFwiKTtcbiAgICAgICAgZXJyb3JIYW5kbGVyKCk7XG4gICAgICB9KTtcbiAgICAgIHJlcS5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBsb2dnZXIuZGVidWcoXCJTZW5kIGFib3J0ZWRcIik7XG4gICAgICAgIGVycm9ySGFuZGxlcigpO1xuICAgICAgfSk7XG4gICAgICByZXEub3BlbihcIlBPU1RcIiwgdGhpcy51cmwpO1xuICAgICAgcmVxLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuICAgICAgcmVxLnNlbmQoZGF0YSk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBTdGF0aXN0aWNzU2VuZGVyO1xufSgpO1xuXG52YXIgU3RhdGlzdGljc0xvZ2dlciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3RhdGlzdGljc0xvZ2dlcihpZCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFN0YXRpc3RpY3NMb2dnZXIpO1xuXG4gICAgdGhpcy5pZCA9IGlkO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoU3RhdGlzdGljc0xvZ2dlciwgW3tcbiAgICBrZXk6ICdfaXNEZWJ1ZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pc0RlYnVnKCkge1xuICAgICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwidmFhZGluLlwiICsgdGhpcy5pZCArIFwiLmRlYnVnXCIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2RlYnVnJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVidWcobXNnKSB7XG4gICAgICBpZiAodGhpcy5faXNEZWJ1ZygpKSB7XG4gICAgICAgIGNvbnNvbGUuaW5mbyh0aGlzLmlkICsgXCI6IFwiICsgbXNnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFN0YXRpc3RpY3NMb2dnZXI7XG59KCk7XG5cbnZhciBVc2FnZVN0YXRpc3RpY3MgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFVzYWdlU3RhdGlzdGljcygpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBVc2FnZVN0YXRpc3RpY3MpO1xuXG4gICAgdGhpcy5ub3cgPSBuZXcgRGF0ZSgpO1xuICAgIHRoaXMudGltZU5vdyA9IHRoaXMubm93LmdldFRpbWUoKTtcbiAgICB0aGlzLmdhdGhlckRlbGF5ID0gMTA7IC8vIERlbGF5IGJldHdlZW4gbG9hZGluZyB0aGlzIGZpbGUgYW5kIGdhdGhlcmluZyBzdGF0c1xuICAgIHRoaXMuaW5pdGlhbERlbGF5ID0gMjQgKiA2MCAqIDYwO1xuXG4gICAgdGhpcy5sb2dnZXIgPSBuZXcgU3RhdGlzdGljc0xvZ2dlcihcInN0YXRpc3RpY3NcIik7XG4gICAgdGhpcy5zdG9yYWdlID0gbmV3IFN0YXRpc3RpY3NTdG9yYWdlKFwidmFhZGluLnN0YXRpc3RpY3MuYmFza2V0XCIpO1xuICAgIHRoaXMuZ2F0aGVyZXIgPSBuZXcgU3RhdGlzdGljc0dhdGhlcmVyKHRoaXMubG9nZ2VyKTtcbiAgICB0aGlzLnNlbmRlciA9IG5ldyBTdGF0aXN0aWNzU2VuZGVyKFwiaHR0cHM6Ly90b29scy52YWFkaW4uY29tL3VzYWdlLXN0YXRzL3N1Ym1pdFwiLCB0aGlzLmxvZ2dlcik7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhVc2FnZVN0YXRpc3RpY3MsIFt7XG4gICAga2V5OiAnbWF5YmVHYXRoZXJBbmRTZW5kJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbWF5YmVHYXRoZXJBbmRTZW5kKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFVzYWdlU3RhdGlzdGljcy5vcHRPdXRLZXkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuZ2F0aGVyZXIuZ2F0aGVyKHRoaXMuc3RvcmFnZSk7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMubWF5YmVTZW5kKCk7XG4gICAgICB9LCB0aGlzLmdhdGhlckRlbGF5ICogMTAwMCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbG90dGVyeScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxvdHRlcnkoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjdXJyZW50TW9udGgnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjdXJyZW50TW9udGgoKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub3cuZ2V0WWVhcigpICogMTIgKyB0aGlzLm5vdy5nZXRNb250aCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ21heWJlU2VuZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1heWJlU2VuZCgpIHtcbiAgICAgIHZhciBmaXJzdFVzZSA9IE51bWJlcihsb2NhbFN0b3JhZ2UuZ2V0SXRlbShVc2FnZVN0YXRpc3RpY3MuZmlyc3RVc2VLZXkpKTtcbiAgICAgIHZhciBtb250aFByb2Nlc3NlZCA9IE51bWJlcihsb2NhbFN0b3JhZ2UuZ2V0SXRlbShVc2FnZVN0YXRpc3RpY3MubW9udGhQcm9jZXNzZWRLZXkpKTtcblxuICAgICAgaWYgKCFmaXJzdFVzZSkge1xuICAgICAgICAvLyBVc2UgYSBncmFjZSBwZXJpb2QgdG8gYXZvaWQgaW50ZXJmZXJpbmcgd2l0aCB0ZXN0cywgaW5jb2duaXRvIG1vZGUgZXRjXG4gICAgICAgIGZpcnN0VXNlID0gdGhpcy50aW1lTm93O1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShVc2FnZVN0YXRpc3RpY3MuZmlyc3RVc2VLZXksIGZpcnN0VXNlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMudGltZU5vdyA8IGZpcnN0VXNlICsgdGhpcy5pbml0aWFsRGVsYXkgKiAxMDAwKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKFwiTm8gc3RhdGlzdGljcyB3aWxsIGJlIHNlbnQgdW50aWwgdGhlIGluaXRpYWwgZGVsYXkgb2YgXCIgKyB0aGlzLmluaXRpYWxEZWxheSArIFwicyBoYXMgcGFzc2VkXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5jdXJyZW50TW9udGgoKSA8PSBtb250aFByb2Nlc3NlZCkge1xuICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcIlRoaXMgbW9udGggaGFzIGFscmVhZHkgYmVlbiBwcm9jZXNzZWRcIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFVzYWdlU3RhdGlzdGljcy5tb250aFByb2Nlc3NlZEtleSwgdGhpcy5jdXJyZW50TW9udGgoKSk7XG4gICAgICAvLyBVc2UgcmFuZG9tIHNhbXBsaW5nXG4gICAgICBpZiAodGhpcy5sb3R0ZXJ5KCkpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIuZGVidWcoXCJDb25ncmF0dWxhdGlvbnMsIHdlIGhhdmUgYSB3aW5uZXIhXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5sb2dnZXIuZGVidWcoXCJTb3JyeSwgbm8gc3RhdHMgZnJvbSB5b3UgdGhpcyB0aW1lXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2VuZCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NlbmQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZW5kKCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGhhdmUgdGhlIGxhdGVzdCBkYXRhXG4gICAgICB0aGlzLmdhdGhlcmVyLmdhdGhlcih0aGlzLnN0b3JhZ2UpO1xuXG4gICAgICAvLyBSZWFkLCBzZW5kIGFuZCBjbGVhbiB1cFxuICAgICAgdmFyIGRhdGEgPSB0aGlzLnN0b3JhZ2UucmVhZCgpO1xuICAgICAgZGF0YVtcImZpcnN0VXNlXCJdID0gTnVtYmVyKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFVzYWdlU3RhdGlzdGljcy5maXJzdFVzZUtleSkpO1xuICAgICAgZGF0YVtcInVzYWdlU3RhdGlzdGljc1ZlcnNpb25cIl0gPSBVc2FnZVN0YXRpc3RpY3MudmVyc2lvbjtcbiAgICAgIHZhciBpbmZvID0gJ1RoaXMgcmVxdWVzdCBjb250YWlucyB1c2FnZSBzdGF0aXN0aWNzIGdhdGhlcmVkIGZyb20gdGhlIGFwcGxpY2F0aW9uIHJ1bm5pbmcgaW4gZGV2ZWxvcG1lbnQgbW9kZS4gXFxuXFxuU3RhdGlzdGljcyBnYXRoZXJpbmcgaXMgYXV0b21hdGljYWxseSBkaXNhYmxlZCBhbmQgZXhjbHVkZWQgZnJvbSBwcm9kdWN0aW9uIGJ1aWxkcy5cXG5cXG5Gb3IgZGV0YWlscyBhbmQgdG8gb3B0LW91dCwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS92YWFkaW4vdmFhZGluLXVzYWdlLXN0YXRpc3RpY3MuXFxuXFxuXFxuXFxuJztcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHRoaXMuc2VuZGVyLnNlbmQoaW5mbyArIEpTT04uc3RyaW5naWZ5KGRhdGEpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFJldmVydCB0aGUgJ21vbnRoIHByb2Nlc3NlZCcgZmxhZ1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShVc2FnZVN0YXRpc3RpY3MubW9udGhQcm9jZXNzZWRLZXksIHNlbGYuY3VycmVudE1vbnRoKCkgLSAxKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiAndmVyc2lvbicsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQkMSgpIHtcbiAgICAgIHJldHVybiAnMi4xLjAnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2ZpcnN0VXNlS2V5JyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCQxKCkge1xuICAgICAgcmV0dXJuICd2YWFkaW4uc3RhdGlzdGljcy5maXJzdHVzZSc7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbW9udGhQcm9jZXNzZWRLZXknLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0JDEoKSB7XG4gICAgICByZXR1cm4gJ3ZhYWRpbi5zdGF0aXN0aWNzLm1vbnRoUHJvY2Vzc2VkJztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdvcHRPdXRLZXknLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0JDEoKSB7XG4gICAgICByZXR1cm4gJ3ZhYWRpbi5zdGF0aXN0aWNzLm9wdG91dCc7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBVc2FnZVN0YXRpc3RpY3M7XG59KCk7XG5cbnRyeSB7XG4gIHdpbmRvdy5WYWFkaW4gPSB3aW5kb3cuVmFhZGluIHx8IHt9O1xuICB3aW5kb3cuVmFhZGluLnVzYWdlU3RhdHNDaGVja2VyID0gd2luZG93LlZhYWRpbi51c2FnZVN0YXRzQ2hlY2tlciB8fCBuZXcgVXNhZ2VTdGF0aXN0aWNzKCk7XG4gIHdpbmRvdy5WYWFkaW4udXNhZ2VTdGF0c0NoZWNrZXIubWF5YmVHYXRoZXJBbmRTZW5kKCk7XG59IGNhdGNoIChlKSB7XG4gIC8vIEludGVudGlvbmFsbHkgaWdub3JlZCBhcyB0aGlzIGlzIG5vdCBhIHByb2JsZW0gaW4gdGhlIGFwcCBiZWluZyBkZXZlbG9wZWRcbn1cblxufSgpKTtcblxuICB2YWFkaW4tZGV2LW1vZGU6ZW5kICoqL1xufVxuXG5leHBvcnQgY29uc3QgdXNhZ2VTdGF0aXN0aWNzID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0eXBlb2YgcnVuSWZEZXZlbG9wbWVudE1vZGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gcnVuSWZEZXZlbG9wbWVudE1vZGUobWF5YmVHYXRoZXJBbmRTZW5kU3RhdHMpO1xuICB9XG59O1xuIiwiaW1wb3J0IHsgaWRsZVBlcmlvZCB9IGZyb20gJ0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL2FzeW5jLmpzJztcbmltcG9ydCB7IERlYm91bmNlciB9IGZyb20gJ0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL2RlYm91bmNlLmpzJztcbmltcG9ydCB7IGVucXVldWVEZWJvdW5jZXIgfSBmcm9tICdAcG9seW1lci9wb2x5bWVyL2xpYi91dGlscy9mbHVzaC5qcyc7XG5cbmltcG9ydCB7IERpck1peGluIH0gZnJvbSAnLi92YWFkaW4tZGlyLW1peGluLmpzJztcbmltcG9ydCB7IHVzYWdlU3RhdGlzdGljcyB9IGZyb20gJ0B2YWFkaW4vdmFhZGluLXVzYWdlLXN0YXRpc3RpY3MvdmFhZGluLXVzYWdlLXN0YXRpc3RpY3MuanMnO1xuaWYgKCF3aW5kb3cuVmFhZGluKSB7XG4gIHdpbmRvd1snVmFhZGluJ10gPSB7fTtcbn1cblxuLyoqXG4gKiBBcnJheSBvZiBWYWFkaW4gY3VzdG9tIGVsZW1lbnQgY2xhc3NlcyB0aGF0IGhhdmUgYmVlbiBmaW5hbGl6ZWQuXG4gKi9cbndpbmRvd1snVmFhZGluJ10ucmVnaXN0cmF0aW9ucyA9IHdpbmRvdy5WYWFkaW4ucmVnaXN0cmF0aW9ucyB8fCBbXTtcblxuLy8gVXNlIHRoZSBoYWNrIHRvIHByZXZlbnQgcG9seW1lci1tb2R1bGl6ZXIgZnJvbSBjb252ZXJ0aW5nIHRvIGV4cG9ydHNcbndpbmRvd1snVmFhZGluJ10uZGV2ZWxvcG1lbnRNb2RlQ2FsbGJhY2sgPSB3aW5kb3cuVmFhZGluLmRldmVsb3BtZW50TW9kZUNhbGxiYWNrIHx8IHt9O1xud2luZG93WydWYWFkaW4nXS5kZXZlbG9wbWVudE1vZGVDYWxsYmFja1sndmFhZGluLXVzYWdlLXN0YXRpc3RpY3MnXSA9IGZ1bmN0aW9uKCkge1xuICBpZiAodXNhZ2VTdGF0aXN0aWNzKSB7XG4gICAgdXNhZ2VTdGF0aXN0aWNzKCk7XG4gIH1cbn07XG5cbmxldCBzdGF0c0pvYjtcblxuY29uc3QgcmVnaXN0ZXJlZCA9IG5ldyBTZXQoKTtcblxuLyoqXG4gKiBAcG9seW1lck1peGluXG4gKi9cbmV4cG9ydCBjb25zdCBFbGVtZW50TWl4aW4gPSBzdXBlckNsYXNzID0+IGNsYXNzIFZhYWRpbkVsZW1lbnRNaXhpbiBleHRlbmRzIERpck1peGluKHN1cGVyQ2xhc3MpIHtcbiAgLyoqIEBwcm90ZWN0ZWQgKi9cbiAgc3RhdGljIGZpbmFsaXplKCkge1xuICAgIHN1cGVyLmZpbmFsaXplKCk7XG5cbiAgICBjb25zdCB7aXN9ID0gdGhpcztcblxuICAgIC8vIFJlZ2lzdGVycyBhIGNsYXNzIHByb3RvdHlwZSBmb3IgdGVsZW1ldHJ5IHB1cnBvc2VzLlxuICAgIGlmIChpcyAmJiAhcmVnaXN0ZXJlZC5oYXMoaXMpKSB7XG4gICAgICB3aW5kb3cuVmFhZGluLnJlZ2lzdHJhdGlvbnMucHVzaCh0aGlzKTtcbiAgICAgIHJlZ2lzdGVyZWQuYWRkKGlzKTtcblxuICAgICAgaWYgKHdpbmRvdy5WYWFkaW4uZGV2ZWxvcG1lbnRNb2RlQ2FsbGJhY2spIHtcbiAgICAgICAgc3RhdHNKb2IgPSBEZWJvdW5jZXIuZGVib3VuY2Uoc3RhdHNKb2IsXG4gICAgICAgICAgaWRsZVBlcmlvZCwgKCkgPT4ge1xuICAgICAgICAgICAgd2luZG93LlZhYWRpbi5kZXZlbG9wbWVudE1vZGVDYWxsYmFja1sndmFhZGluLXVzYWdlLXN0YXRpc3RpY3MnXSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgZW5xdWV1ZURlYm91bmNlcihzdGF0c0pvYik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgaWYgKGRvY3VtZW50LmRvY3R5cGUgPT09IG51bGwpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ1ZhYWRpbiBjb21wb25lbnRzIHJlcXVpcmUgdGhlIFwic3RhbmRhcmRzIG1vZGVcIiBkZWNsYXJhdGlvbi4gUGxlYXNlIGFkZCA8IURPQ1RZUEUgaHRtbD4gdG8gdGhlIEhUTUwgZG9jdW1lbnQuJ1xuICAgICAgKTtcbiAgICB9XG4gIH1cbn07XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVmFhZGluIEx0ZC5cblRoaXMgcHJvZ3JhbSBpcyBhdmFpbGFibGUgdW5kZXIgQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIGF2YWlsYWJsZSBhdCBodHRwczovL3ZhYWRpbi5jb20vbGljZW5zZS9cbiovXG5pbXBvcnQgeyBQb2x5bWVyRWxlbWVudCB9IGZyb20gJ0Bwb2x5bWVyL3BvbHltZXIvcG9seW1lci1lbGVtZW50LmpzJztcblxuaW1wb3J0IHsgR2VzdHVyZUV2ZW50TGlzdGVuZXJzIH0gZnJvbSAnQHBvbHltZXIvcG9seW1lci9saWIvbWl4aW5zL2dlc3R1cmUtZXZlbnQtbGlzdGVuZXJzLmpzJztcbmltcG9ydCB7IFRoZW1hYmxlTWl4aW4gfSBmcm9tICdAdmFhZGluL3ZhYWRpbi10aGVtYWJsZS1taXhpbi92YWFkaW4tdGhlbWFibGUtbWl4aW4uanMnO1xuaW1wb3J0IHsgQ29udHJvbFN0YXRlTWl4aW4gfSBmcm9tICdAdmFhZGluL3ZhYWRpbi1jb250cm9sLXN0YXRlLW1peGluL3ZhYWRpbi1jb250cm9sLXN0YXRlLW1peGluLmpzJztcbmltcG9ydCB7IEVsZW1lbnRNaXhpbiB9IGZyb20gJ0B2YWFkaW4vdmFhZGluLWVsZW1lbnQtbWl4aW4vdmFhZGluLWVsZW1lbnQtbWl4aW4uanMnO1xuaW1wb3J0IHsgaHRtbCB9IGZyb20gJ0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL2h0bWwtdGFnLmpzJztcbi8qKlxuICogYDx2YWFkaW4tY2hlY2tib3g+YCBpcyBhIFdlYiBDb21wb25lbnQgZm9yIGN1c3RvbWl6ZWQgY2hlY2tib3hlcy5cbiAqXG4gKiBgYGBodG1sXG4gKiA8dmFhZGluLWNoZWNrYm94PlxuICogICBNYWtlIG15IHByb2ZpbGUgdmlzaWJsZVxuICogPC92YWFkaW4tY2hlY2tib3g+XG4gKiBgYGBcbiAqXG4gKiAjIyMgU3R5bGluZ1xuICpcbiAqIFRoZSBmb2xsb3dpbmcgc2hhZG93IERPTSBwYXJ0cyBhcmUgYXZhaWxhYmxlIGZvciBzdHlsaW5nOlxuICpcbiAqIFBhcnQgbmFtZSAgICAgICAgIHwgRGVzY3JpcHRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tXG4gKiBgY2hlY2tib3hgICAgICAgICB8IFRoZSB3cmFwcGVyIGVsZW1lbnQgZm9yIHRoZSBuYXRpdmUgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiPlxuICogYGxhYmVsYCAgICAgICAgICAgfCBUaGUgd3JhcHBlciBlbGVtZW50IGluIHdoaWNoIHRoZSBjb21wb25lbnQncyBjaGlsZHJlbiwgbmFtZWx5IHRoZSBsYWJlbCwgaXMgc2xvdHRlZFxuICpcbiAqIFRoZSBmb2xsb3dpbmcgc3RhdGUgYXR0cmlidXRlcyBhcmUgYXZhaWxhYmxlIGZvciBzdHlsaW5nOlxuICpcbiAqIEF0dHJpYnV0ZSAgICB8IERlc2NyaXB0aW9uIHwgUGFydCBuYW1lXG4gKiAtLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS1cbiAqIGBhY3RpdmVgICAgICB8IFNldCB3aGVuIHRoZSBjaGVja2JveCBpcyBwcmVzc2VkIGRvd24sIGVpdGhlciB3aXRoIG1vdXNlLCB0b3VjaCBvciB0aGUga2V5Ym9hcmQuIHwgYDpob3N0YFxuICogYGRpc2FibGVkYCAgIHwgU2V0IHdoZW4gdGhlIGNoZWNrYm94IGlzIGRpc2FibGVkLiB8IGA6aG9zdGBcbiAqIGBmb2N1cy1yaW5nYCB8IFNldCB3aGVuIHRoZSBjaGVja2JveCBpcyBmb2N1c2VkIHVzaW5nIHRoZSBrZXlib2FyZC4gfCBgOmhvc3RgXG4gKiBgZm9jdXNlZGAgICAgfCBTZXQgd2hlbiB0aGUgY2hlY2tib3ggaXMgZm9jdXNlZC4gfCBgOmhvc3RgXG4gKiBgaW5kZXRlcm1pbmF0ZWAgfCBTZXQgd2hlbiB0aGUgY2hlY2tib3ggaXMgaW4gaW5kZXRlcm1pbmF0ZSBtb2RlLiB8IGA6aG9zdGBcbiAqIGBjaGVja2VkYCB8IFNldCB3aGVuIHRoZSBjaGVja2JveCBpcyBjaGVja2VkLiB8IGA6aG9zdGBcbiAqIGBlbXB0eWAgfCBTZXQgd2hlbiB0aGVyZSBpcyBubyBsYWJlbCBwcm92aWRlZC4gfCBgbGFiZWxgXG4gKlxuICogU2VlIFtUaGVtYWJsZU1peGluIOKAkyBob3cgdG8gYXBwbHkgc3R5bGVzIGZvciBzaGFkb3cgcGFydHNdKGh0dHBzOi8vZ2l0aHViLmNvbS92YWFkaW4vdmFhZGluLXRoZW1hYmxlLW1peGluL3dpa2kpXG4gKlxuICogQG1lbWJlcm9mIFZhYWRpblxuICogQG1peGVzIFZhYWRpbi5FbGVtZW50TWl4aW5cbiAqIEBtaXhlcyBWYWFkaW4uQ29udHJvbFN0YXRlTWl4aW5cbiAqIEBtaXhlcyBWYWFkaW4uVGhlbWFibGVNaXhpblxuICogQG1peGVzIFBvbHltZXIuR2VzdHVyZUV2ZW50TGlzdGVuZXJzXG4gKiBAZGVtbyBkZW1vL2luZGV4Lmh0bWxcbiAqL1xuY2xhc3MgQ2hlY2tib3hFbGVtZW50IGV4dGVuZHNcbiAgRWxlbWVudE1peGluKFxuICAgIENvbnRyb2xTdGF0ZU1peGluKFxuICAgICAgVGhlbWFibGVNaXhpbihcbiAgICAgICAgR2VzdHVyZUV2ZW50TGlzdGVuZXJzKFBvbHltZXJFbGVtZW50KSkpKSB7XG4gIHN0YXRpYyBnZXQgdGVtcGxhdGUoKSB7XG4gICAgcmV0dXJuIGh0bWxgXG4gICAgPHN0eWxlPlxuICAgICAgOmhvc3Qge1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICB9XG5cbiAgICAgIDpob3N0KFtoaWRkZW5dKSB7XG4gICAgICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcbiAgICAgIH1cblxuICAgICAgbGFiZWwge1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGJhc2VsaW5lO1xuICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgfVxuXG4gICAgICBbcGFydD1cImNoZWNrYm94XCJdIHtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgIGZsZXg6IG5vbmU7XG4gICAgICB9XG5cbiAgICAgIGlucHV0W3R5cGU9XCJjaGVja2JveFwiXSB7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgdG9wOiAwO1xuICAgICAgICBsZWZ0OiAwO1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICBjdXJzb3I6IGluaGVyaXQ7XG4gICAgICAgIG1hcmdpbjogMDtcbiAgICAgIH1cblxuICAgICAgOmhvc3QoW2Rpc2FibGVkXSkge1xuICAgICAgICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgfVxuICAgIDwvc3R5bGU+XG5cbiAgICA8bGFiZWw+XG4gICAgICA8c3BhbiBwYXJ0PVwiY2hlY2tib3hcIj5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNoZWNrZWQ9XCJ7e2NoZWNrZWQ6OmNoYW5nZX19XCIgZGlzYWJsZWRcXCQ9XCJbW2Rpc2FibGVkXV1cIiBpbmRldGVybWluYXRlPVwie3tpbmRldGVybWluYXRlOjpjaGFuZ2V9fVwiIHJvbGU9XCJwcmVzZW50YXRpb25cIiB0YWJpbmRleD1cIi0xXCI+XG4gICAgICA8L3NwYW4+XG5cbiAgICAgIDxzcGFuIHBhcnQ9XCJsYWJlbFwiPlxuICAgICAgICA8c2xvdD48L3Nsb3Q+XG4gICAgICA8L3NwYW4+XG4gICAgPC9sYWJlbD5cbmA7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGlzKCkge1xuICAgIHJldHVybiAndmFhZGluLWNoZWNrYm94JztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgdmVyc2lvbigpIHtcbiAgICByZXR1cm4gJzIuMi4xMyc7XG4gIH1cblxuICBzdGF0aWMgZ2V0IHByb3BlcnRpZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogVHJ1ZSBpZiB0aGUgY2hlY2tib3ggaXMgY2hlY2tlZC5cbiAgICAgICAqL1xuICAgICAgY2hlY2tlZDoge1xuICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICB2YWx1ZTogZmFsc2UsXG4gICAgICAgIG5vdGlmeTogdHJ1ZSxcbiAgICAgICAgb2JzZXJ2ZXI6ICdfY2hlY2tlZENoYW5nZWQnLFxuICAgICAgICByZWZsZWN0VG9BdHRyaWJ1dGU6IHRydWVcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogSW5kZXRlcm1pbmF0ZSBzdGF0ZSBvZiB0aGUgY2hlY2tib3ggd2hlbiBpdCdzIG5laXRoZXIgY2hlY2tlZCBub3IgdW5jaGVja2VkLCBidXQgdW5kZXRlcm1pbmVkLlxuICAgICAgICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0L2NoZWNrYm94I0luZGV0ZXJtaW5hdGVfc3RhdGVfY2hlY2tib3hlc1xuICAgICAgICovXG4gICAgICBpbmRldGVybWluYXRlOiB7XG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgIG5vdGlmeTogdHJ1ZSxcbiAgICAgICAgb2JzZXJ2ZXI6ICdfaW5kZXRlcm1pbmF0ZUNoYW5nZWQnLFxuICAgICAgICByZWZsZWN0VG9BdHRyaWJ1dGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiBmYWxzZVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgdmFsdWUgZ2l2ZW4gdG8gdGhlIGRhdGEgc3VibWl0dGVkIHdpdGggdGhlIGNoZWNrYm94J3MgbmFtZSB0byB0aGUgc2VydmVyIHdoZW4gdGhlIGNvbnRyb2wgaXMgaW5zaWRlIGEgZm9ybS5cbiAgICAgICAqL1xuICAgICAgdmFsdWU6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICB2YWx1ZTogJ29uJ1xuICAgICAgfSxcblxuICAgICAgX25hdGl2ZUNoZWNrYm94OiB7XG4gICAgICAgIHR5cGU6IE9iamVjdFxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogTmFtZSBvZiB0aGUgZWxlbWVudC5cbiAgICAgKi9cbiAgICB0aGlzLm5hbWU7XG4gIH1cblxuICBnZXQgbmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jaGVja2VkID8gdGhpcy5fc3RvcmVkTmFtZSA6ICcnO1xuICB9XG5cbiAgc2V0IG5hbWUobmFtZSkge1xuICAgIHRoaXMuX3N0b3JlZE5hbWUgPSBuYW1lO1xuICB9XG5cbiAgcmVhZHkoKSB7XG4gICAgc3VwZXIucmVhZHkoKTtcblxuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdyb2xlJywgJ2NoZWNrYm94Jyk7XG5cbiAgICB0aGlzLl9uYXRpdmVDaGVja2JveCA9IHRoaXMuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKCdpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0nKTtcblxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9oYW5kbGVDbGljay5iaW5kKHRoaXMpKTtcblxuICAgIHRoaXMuX2FkZEFjdGl2ZUxpc3RlbmVycygpO1xuXG4gICAgY29uc3QgYXR0ck5hbWUgPSB0aGlzLmdldEF0dHJpYnV0ZSgnbmFtZScpO1xuICAgIGlmIChhdHRyTmFtZSkge1xuICAgICAgdGhpcy5uYW1lID0gYXR0ck5hbWU7XG4gICAgfVxuXG4gICAgdGhpcy5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoJ1twYXJ0fj1cImxhYmVsXCJdJykucXVlcnlTZWxlY3Rvcignc2xvdCcpXG4gICAgICAuYWRkRXZlbnRMaXN0ZW5lcignc2xvdGNoYW5nZScsIHRoaXMuX3VwZGF0ZUxhYmVsQXR0cmlidXRlLmJpbmQodGhpcykpO1xuXG4gICAgdGhpcy5fdXBkYXRlTGFiZWxBdHRyaWJ1dGUoKTtcbiAgfVxuXG4gIF91cGRhdGVMYWJlbEF0dHJpYnV0ZSgpIHtcbiAgICBjb25zdCBsYWJlbCA9IHRoaXMuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKCdbcGFydH49XCJsYWJlbFwiXScpO1xuICAgIGNvbnN0IGFzc2lnbmVkTm9kZXMgPSBsYWJlbC5maXJzdEVsZW1lbnRDaGlsZC5hc3NpZ25lZE5vZGVzKCk7XG4gICAgaWYgKHRoaXMuX2lzQXNzaWduZWROb2Rlc0VtcHR5KGFzc2lnbmVkTm9kZXMpKSB7XG4gICAgICBsYWJlbC5zZXRBdHRyaWJ1dGUoJ2VtcHR5JywgJycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsYWJlbC5yZW1vdmVBdHRyaWJ1dGUoJ2VtcHR5Jyk7XG4gICAgfVxuICB9XG5cbiAgX2lzQXNzaWduZWROb2Rlc0VtcHR5KG5vZGVzKSB7XG4gICAgLy8gVGhlIGFzc2lnbmVkIG5vZGVzIGNvbnNpZGVyZWQgdG8gYmUgZW1wdHkgaWYgdGhlcmUgaXMgbm8gc2xvdHRlZCBjb250ZW50IG9yIG9ubHkgb25lIGVtcHR5IHRleHQgbm9kZVxuICAgIHJldHVybiBub2Rlcy5sZW5ndGggPT09IDAgfHxcbiAgICAgICAgICAobm9kZXMubGVuZ3RoID09IDFcbiAgICAgICAgICAmJiBub2Rlc1swXS5ub2RlVHlwZSA9PSBOb2RlLlRFWFRfTk9ERVxuICAgICAgICAgICYmIG5vZGVzWzBdLnRleHRDb250ZW50LnRyaW0oKSA9PT0gJycpO1xuICB9XG5cbiAgX2NoZWNrZWRDaGFuZ2VkKGNoZWNrZWQpIHtcbiAgICBpZiAodGhpcy5pbmRldGVybWluYXRlKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnYXJpYS1jaGVja2VkJywgJ21peGVkJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdhcmlhLWNoZWNrZWQnLCBCb29sZWFuKGNoZWNrZWQpKTtcbiAgICB9XG4gIH1cblxuICBfaW5kZXRlcm1pbmF0ZUNoYW5nZWQoaW5kZXRlcm1pbmF0ZSkge1xuICAgIGlmIChpbmRldGVybWluYXRlKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnYXJpYS1jaGVja2VkJywgJ21peGVkJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdhcmlhLWNoZWNrZWQnLCB0aGlzLmNoZWNrZWQpO1xuICAgIH1cbiAgfVxuXG4gIF9hZGRBY3RpdmVMaXN0ZW5lcnMoKSB7XG4gICAgLy8gRE9XTlxuICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJUb05vZGUodGhpcywgJ2Rvd24nLCAoZSkgPT4ge1xuICAgICAgaWYgKHRoaXMuX19pbnRlcmFjdGlvbnNBbGxvd2VkKGUpKSB7XG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdhY3RpdmUnLCAnJyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBVUFxuICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJUb05vZGUodGhpcywgJ3VwJywgKCkgPT4gdGhpcy5yZW1vdmVBdHRyaWJ1dGUoJ2FjdGl2ZScpKTtcblxuICAgIC8vIEtFWURPV05cbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBlID0+IHtcbiAgICAgIGlmICh0aGlzLl9faW50ZXJhY3Rpb25zQWxsb3dlZChlKSAmJiBlLmtleUNvZGUgPT09IDMyKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2FjdGl2ZScsICcnKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEtFWVVQXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGUgPT4ge1xuICAgICAgaWYgKHRoaXMuX19pbnRlcmFjdGlvbnNBbGxvd2VkKGUpICYmIGUua2V5Q29kZSA9PT0gMzIpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLl90b2dnbGVDaGVja2VkKCk7XG4gICAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKCdhY3RpdmUnKTtcblxuICAgICAgICBpZiAodGhpcy5pbmRldGVybWluYXRlKSB7XG4gICAgICAgICAgdGhpcy5pbmRldGVybWluYXRlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBAcHJvdGVjdGVkICovXG4gIGdldCBmb2N1c0VsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRydWUgaWYgdXNlcnMnIGludGVyYWN0aW9ucyAobW91c2Ugb3Iga2V5Ym9hcmQpXG4gICAqIHNob3VsZCB0b2dnbGUgdGhlIGNoZWNrYm94XG4gICAqL1xuICBfX2ludGVyYWN0aW9uc0FsbG93ZWQoZSkge1xuICAgIGlmICh0aGlzLmRpc2FibGVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3ZhYWRpbi92YWFkaW4tY2hlY2tib3gvaXNzdWVzLzYzXG4gICAgaWYgKGUudGFyZ2V0LmxvY2FsTmFtZSA9PT0gJ2EnKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBfaGFuZGxlQ2xpY2soZSkge1xuICAgIGlmICh0aGlzLl9faW50ZXJhY3Rpb25zQWxsb3dlZChlKSkge1xuICAgICAgaWYgKCF0aGlzLmluZGV0ZXJtaW5hdGUpIHtcbiAgICAgICAgaWYgKGUuY29tcG9zZWRQYXRoKClbMF0gIT09IHRoaXMuX25hdGl2ZUNoZWNrYm94KSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHRoaXMuX3RvZ2dsZUNoZWNrZWQoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLypcbiAgICAgICAgICogUmVxdWlyZWQgZm9yIElFIDExIGFuZCBFZGdlLlxuICAgICAgICAgKiBTZWUgaXNzdWUgaGVyZTogaHR0cHM6Ly9kZXZlbG9wZXIubWljcm9zb2Z0LmNvbS9lbi11cy9taWNyb3NvZnQtZWRnZS9wbGF0Zm9ybS9pc3N1ZXMvNzM0NDQxOC9cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaW5kZXRlcm1pbmF0ZSA9IGZhbHNlO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuX3RvZ2dsZUNoZWNrZWQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfdG9nZ2xlQ2hlY2tlZCgpIHtcbiAgICB0aGlzLmNoZWNrZWQgPSAhdGhpcy5jaGVja2VkO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2NoYW5nZScsIHtjb21wb3NlZDogZmFsc2UsIGJ1YmJsZXM6IHRydWV9KSk7XG4gIH1cblxuICAvKipcbiAgICogRmlyZWQgd2hlbiB0aGUgdXNlciBjb21taXRzIGEgdmFsdWUgY2hhbmdlLlxuICAgKlxuICAgKiBAZXZlbnQgY2hhbmdlXG4gICAqL1xufVxuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoQ2hlY2tib3hFbGVtZW50LmlzLCBDaGVja2JveEVsZW1lbnQpO1xuXG5leHBvcnQgeyBDaGVja2JveEVsZW1lbnQgfTtcbiIsImltcG9ydCAnQHZhYWRpbi92YWFkaW4tbHVtby1zdHlsZXMvY29sb3IuanMnO1xuaW1wb3J0ICdAdmFhZGluL3ZhYWRpbi1sdW1vLXN0eWxlcy9mb250LWljb25zLmpzJztcbmltcG9ydCAnQHZhYWRpbi92YWFkaW4tbHVtby1zdHlsZXMvc2l6aW5nLmpzJztcbmltcG9ydCAnQHZhYWRpbi92YWFkaW4tbHVtby1zdHlsZXMvc3BhY2luZy5qcyc7XG5pbXBvcnQgJ0B2YWFkaW4vdmFhZGluLWx1bW8tc3R5bGVzL3N0eWxlLmpzJztcbmltcG9ydCAnQHZhYWRpbi92YWFkaW4tbHVtby1zdHlsZXMvdHlwb2dyYXBoeS5qcyc7XG5pbXBvcnQgJ0B2YWFkaW4vdmFhZGluLWNoZWNrYm94L3RoZW1lL2x1bW8vdmFhZGluLWNoZWNrYm94LmpzJztcbmltcG9ydCB7IGh0bWwgfSBmcm9tICdAcG9seW1lci9wb2x5bWVyL2xpYi91dGlscy9odG1sLXRhZy5qcyc7XG5cbmNvbnN0ICRfZG9jdW1lbnRDb250YWluZXIgPSBodG1sYDxkb20tbW9kdWxlIGlkPVwibHVtby1ncmlkXCIgdGhlbWUtZm9yPVwidmFhZGluLWdyaWRcIj5cbiAgPHRlbXBsYXRlPlxuICAgIDxzdHlsZT5cbiAgICAgIDpob3N0IHtcbiAgICAgICAgZm9udC1mYW1pbHk6IHZhcigtLWx1bW8tZm9udC1mYW1pbHkpO1xuICAgICAgICBmb250LXNpemU6IHZhcigtLWx1bW8tZm9udC1zaXplLW0pO1xuICAgICAgICBsaW5lLWhlaWdodDogdmFyKC0tbHVtby1saW5lLWhlaWdodC1zKTtcbiAgICAgICAgY29sb3I6IHZhcigtLWx1bW8tYm9keS10ZXh0LWNvbG9yKTtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbHVtby1iYXNlLWNvbG9yKTtcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlO1xuICAgICAgICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbiAgICAgICAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcblxuICAgICAgICAvKiBGb3IgaW50ZXJuYWwgdXNlIG9ubHkgKi9cbiAgICAgICAgLS1fbHVtby1ncmlkLWJvcmRlci1jb2xvcjogdmFyKC0tbHVtby1jb250cmFzdC0yMHBjdCk7XG4gICAgICAgIC0tX2x1bW8tZ3JpZC1zZWNvbmRhcnktYm9yZGVyLWNvbG9yOiB2YXIoLS1sdW1vLWNvbnRyYXN0LTEwcGN0KTtcbiAgICAgICAgLS1fbHVtby1ncmlkLWJvcmRlci13aWR0aDogMXB4O1xuICAgICAgICAtLV9sdW1vLWdyaWQtc2VsZWN0ZWQtcm93LWNvbG9yOiB2YXIoLS1sdW1vLXByaW1hcnktY29sb3ItMTBwY3QpO1xuICAgICAgfVxuXG4gICAgICAvKiBObyAob3V0ZXIpIGJvcmRlciAqL1xuXG4gICAgICA6aG9zdCg6bm90KFt0aGVtZX49XCJuby1ib3JkZXJcIl0pKSB7XG4gICAgICAgIGJvcmRlcjogdmFyKC0tX2x1bW8tZ3JpZC1ib3JkZXItd2lkdGgpIHNvbGlkIHZhcigtLV9sdW1vLWdyaWQtYm9yZGVyLWNvbG9yKTtcbiAgICAgIH1cblxuICAgICAgLyogQ2VsbCBzdHlsZXMgKi9cblxuICAgICAgW3BhcnR+PVwiY2VsbFwiXSB7XG4gICAgICAgIG1pbi1oZWlnaHQ6IHZhcigtLWx1bW8tc2l6ZS1tKTtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbHVtby1iYXNlLWNvbG9yKTtcbiAgICAgIH1cblxuICAgICAgW3BhcnR+PVwiY2VsbFwiXSA6OnNsb3R0ZWQodmFhZGluLWdyaWQtY2VsbC1jb250ZW50KSB7XG4gICAgICAgIGN1cnNvcjogZGVmYXVsdDtcbiAgICAgICAgcGFkZGluZzogdmFyKC0tbHVtby1zcGFjZS14cykgdmFyKC0tbHVtby1zcGFjZS1tKTtcbiAgICAgIH1cblxuICAgICAgLyogQXBwbHkgcm93IGJvcmRlcnMgYnkgZGVmYXVsdCBhbmQgaW50cm9kdWNlIHRoZSBcIm5vLXJvdy1ib3JkZXJzXCIgdmFyaWFudCAqL1xuICAgICAgOmhvc3QoOm5vdChbdGhlbWV+PVwibm8tcm93LWJvcmRlcnNcIl0pKSBbcGFydH49XCJjZWxsXCJdOm5vdChbcGFydH49XCJkZXRhaWxzLWNlbGxcIl0pIHtcbiAgICAgICAgYm9yZGVyLXRvcDogdmFyKC0tX2x1bW8tZ3JpZC1ib3JkZXItd2lkdGgpIHNvbGlkIHZhcigtLV9sdW1vLWdyaWQtc2Vjb25kYXJ5LWJvcmRlci1jb2xvcik7XG4gICAgICB9XG5cbiAgICAgIC8qIEhpZGUgZmlyc3QgYm9keSByb3cgdG9wIGJvcmRlciAqL1xuICAgICAgOmhvc3QoOm5vdChbdGhlbWV+PVwibm8tcm93LWJvcmRlcnNcIl0pKSBbcGFydD1cInJvd1wiXVtmaXJzdF0gW3BhcnR+PVwiY2VsbFwiXTpub3QoW3BhcnR+PVwiZGV0YWlscy1jZWxsXCJdKSB7XG4gICAgICAgIGJvcmRlci10b3A6IDA7XG4gICAgICAgIG1pbi1oZWlnaHQ6IGNhbGModmFyKC0tbHVtby1zaXplLW0pIC0gdmFyKC0tX2x1bW8tZ3JpZC1ib3JkZXItd2lkdGgpKTtcbiAgICAgIH1cblxuICAgICAgLyogRm9jdXMtcmluZyAqL1xuXG4gICAgICBbcGFydH49XCJjZWxsXCJdOmZvY3VzIHtcbiAgICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgIH1cblxuICAgICAgOmhvc3QoW25hdmlnYXRpbmddKSBbcGFydH49XCJjZWxsXCJdOmZvY3VzOjpiZWZvcmUge1xuICAgICAgICBjb250ZW50OiBcIlwiO1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHRvcDogMDtcbiAgICAgICAgcmlnaHQ6IDA7XG4gICAgICAgIGJvdHRvbTogMDtcbiAgICAgICAgbGVmdDogMDtcbiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgICAgIGJveC1zaGFkb3c6IGluc2V0IDAgMCAwIDJweCB2YXIoLS1sdW1vLXByaW1hcnktY29sb3ItNTBwY3QpO1xuICAgICAgfVxuXG4gICAgICAvKiBEcmFnIGFuZCBEcm9wIHN0eWxlcyAqL1xuICAgICAgOmhvc3QoW2RyYWdvdmVyXSk6OmFmdGVyIHtcbiAgICAgICAgY29udGVudDogXCJcIjtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB6LWluZGV4OiAxMDA7XG4gICAgICAgIHRvcDogMDtcbiAgICAgICAgcmlnaHQ6IDA7XG4gICAgICAgIGJvdHRvbTogMDtcbiAgICAgICAgbGVmdDogMDtcbiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgICAgIGJveC1zaGFkb3c6IGluc2V0IDAgMCAwIDJweCB2YXIoLS1sdW1vLXByaW1hcnktY29sb3ItNTBwY3QpO1xuICAgICAgfVxuXG4gICAgICBbcGFydH49XCJyb3dcIl1bZHJhZ292ZXJdIHtcbiAgICAgICAgei1pbmRleDogMTAwICFpbXBvcnRhbnQ7XG4gICAgICB9XG5cbiAgICAgIFtwYXJ0fj1cInJvd1wiXVtkcmFnb3Zlcl0gW3BhcnR+PVwiY2VsbFwiXSB7XG4gICAgICAgIG92ZXJmbG93OiB2aXNpYmxlO1xuICAgICAgfVxuXG4gICAgICBbcGFydH49XCJyb3dcIl1bZHJhZ292ZXJdIFtwYXJ0fj1cImNlbGxcIl06OmFmdGVyIHtcbiAgICAgICAgY29udGVudDogXCJcIjtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0b3A6IDA7XG4gICAgICAgIHJpZ2h0OiAwO1xuICAgICAgICBib3R0b206IDA7XG4gICAgICAgIGxlZnQ6IDA7XG4gICAgICAgIGhlaWdodDogY2FsYyh2YXIoLS1fbHVtby1ncmlkLWJvcmRlci13aWR0aCkgKyAycHgpO1xuICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tbHVtby1wcmltYXJ5LWNvbG9yLTUwcGN0KTtcbiAgICAgIH1cblxuICAgICAgOmhvc3QoW3RoZW1lfj1cIm5vLXJvdy1ib3JkZXJzXCJdKSBbZHJhZ292ZXJdIFtwYXJ0fj1cImNlbGxcIl06OmFmdGVyIHtcbiAgICAgICAgaGVpZ2h0OiAycHg7XG4gICAgICB9XG5cbiAgICAgIFtwYXJ0fj1cInJvd1wiXVtkcmFnb3Zlcj1cImJlbG93XCJdIFtwYXJ0fj1cImNlbGxcIl06OmFmdGVyIHtcbiAgICAgICAgdG9wOiAxMDAlO1xuICAgICAgICBib3R0b206IGF1dG87XG4gICAgICAgIG1hcmdpbi10b3A6IC0xcHg7XG4gICAgICB9XG5cbiAgICAgIFtwYXJ0fj1cInJvd1wiXVtkcmFnb3Zlcj1cImFib3ZlXCJdIFtwYXJ0fj1cImNlbGxcIl06OmFmdGVyIHtcbiAgICAgICAgdG9wOiBhdXRvO1xuICAgICAgICBib3R0b206IDEwMCU7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IC0xcHg7XG4gICAgICB9XG5cbiAgICAgIFtwYXJ0fj1cInJvd1wiXVtkZXRhaWxzLW9wZW5lZF1bZHJhZ292ZXI9XCJiZWxvd1wiXSBbcGFydH49XCJjZWxsXCJdOm5vdChbcGFydH49XCJkZXRhaWxzLWNlbGxcIl0pOjphZnRlcixcbiAgICAgIFtwYXJ0fj1cInJvd1wiXVtkZXRhaWxzLW9wZW5lZF1bZHJhZ292ZXI9XCJhYm92ZVwiXSBbcGFydH49XCJkZXRhaWxzLWNlbGxcIl06OmFmdGVyIHtcbiAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgIH1cblxuICAgICAgW3BhcnR+PVwicm93XCJdW2RyYWdvdmVyXVtkcmFnb3Zlcj1cIm9uLXRvcFwiXSBbcGFydH49XCJjZWxsXCJdOjphZnRlciB7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgIH1cblxuICAgICAgW3BhcnR+PVwicm93XCJdW2RyYWdzdGFydF0ge1xuICAgICAgICAvKiBBZGQgYm90dG9tLXNwYWNlIHRvIHRoZSByb3cgc28gdGhlIGRyYWcgbnVtYmVyIGRvZXNuJ3QgZ2V0IGNsaXBwZWQuIE5lZWRlZCBmb3IgSUUvRWRnZSAqL1xuICAgICAgICBib3JkZXItYm90dG9tOiAxMDBweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgICAgICAgei1pbmRleDogMTAwICFpbXBvcnRhbnQ7XG4gICAgICAgIG9wYWNpdHk6IDAuOTtcbiAgICAgIH1cblxuICAgICAgW3BhcnR+PVwicm93XCJdW2RyYWdzdGFydF0gW3BhcnR+PVwiY2VsbFwiXSB7XG4gICAgICAgIGJvcmRlcjogbm9uZSAhaW1wb3J0YW50O1xuICAgICAgICBib3gtc2hhZG93OiBub25lICFpbXBvcnRhbnQ7XG4gICAgICB9XG5cbiAgICAgIFtwYXJ0fj1cInJvd1wiXVtkcmFnc3RhcnRdIFtwYXJ0fj1cImNlbGxcIl1bbGFzdC1jb2x1bW5dIHtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMCB2YXIoLS1sdW1vLWJvcmRlci1yYWRpdXMtcykgdmFyKC0tbHVtby1ib3JkZXItcmFkaXVzLXMpIDA7XG4gICAgICB9XG5cbiAgICAgIFtwYXJ0fj1cInJvd1wiXVtkcmFnc3RhcnRdIFtwYXJ0fj1cImNlbGxcIl1bZmlyc3QtY29sdW1uXSB7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLWx1bW8tYm9yZGVyLXJhZGl1cy1zKSAwIDAgdmFyKC0tbHVtby1ib3JkZXItcmFkaXVzLXMpO1xuICAgICAgfVxuXG4gICAgICBbaW9zXSBbcGFydH49XCJyb3dcIl1bZHJhZ3N0YXJ0XSBbcGFydH49XCJjZWxsXCJdIHtcbiAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tbHVtby1wcmltYXJ5LWNvbG9yLTUwcGN0KTtcbiAgICAgIH1cblxuICAgICAgI3Njcm9sbGVyOm5vdChbaW9zXSkgW3BhcnR+PVwicm93XCJdW2RyYWdzdGFydF06bm90KFtkcmFnc3RhcnQ9XCJcIl0pOjphZnRlciB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIGxlZnQ6IHZhcigtLV9ncmlkLWRyYWctc3RhcnQteCk7XG4gICAgICAgIHRvcDogdmFyKC0tX2dyaWQtZHJhZy1zdGFydC15KTtcbiAgICAgICAgei1pbmRleDogMTAwO1xuICAgICAgICBjb250ZW50OiBhdHRyKGRyYWdzdGFydCk7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICBwYWRkaW5nOiBjYWxjKHZhcigtLWx1bW8tc3BhY2UteHMpICogMC44KTtcbiAgICAgICAgY29sb3I6IHZhcigtLWx1bW8tZXJyb3ItY29udHJhc3QtY29sb3IpO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1sdW1vLWVycm9yLWNvbG9yKTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogdmFyKC0tbHVtby1ib3JkZXItcmFkaXVzLW0pO1xuICAgICAgICBmb250LWZhbWlseTogdmFyKC0tbHVtby1mb250LWZhbWlseSk7XG4gICAgICAgIGZvbnQtc2l6ZTogdmFyKC0tbHVtby1mb250LXNpemUteHhzKTtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDE7XG4gICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgICAgIHRleHQtdHJhbnNmb3JtOiBpbml0aWFsO1xuICAgICAgICBsZXR0ZXItc3BhY2luZzogaW5pdGlhbDtcbiAgICAgICAgbWluLXdpZHRoOiBjYWxjKHZhcigtLWx1bW8tc2l6ZS1zKSAqIDAuNyk7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgIH1cblxuICAgICAgLyogSGVhZGVycyBhbmQgZm9vdGVycyAqL1xuXG4gICAgICBbcGFydH49XCJoZWFkZXItY2VsbFwiXSA6OnNsb3R0ZWQodmFhZGluLWdyaWQtY2VsbC1jb250ZW50KSxcbiAgICAgIFtwYXJ0fj1cImZvb3Rlci1jZWxsXCJdIDo6c2xvdHRlZCh2YWFkaW4tZ3JpZC1jZWxsLWNvbnRlbnQpLFxuICAgICAgW3BhcnR+PVwicmVvcmRlci1naG9zdFwiXSB7XG4gICAgICAgIGZvbnQtc2l6ZTogdmFyKC0tbHVtby1mb250LXNpemUtcyk7XG4gICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgICB9XG5cbiAgICAgIFtwYXJ0fj1cImZvb3Rlci1jZWxsXCJdIDo6c2xvdHRlZCh2YWFkaW4tZ3JpZC1jZWxsLWNvbnRlbnQpIHtcbiAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICAgIH1cblxuICAgICAgW3BhcnQ9XCJyb3dcIl06b25seS1jaGlsZCBbcGFydH49XCJoZWFkZXItY2VsbFwiXSB7XG4gICAgICAgIG1pbi1oZWlnaHQ6IHZhcigtLWx1bW8tc2l6ZS14bCk7XG4gICAgICB9XG5cbiAgICAgIC8qIEhlYWRlciBib3JkZXJzICovXG5cbiAgICAgIC8qIEhpZGUgZmlyc3QgaGVhZGVyIHJvdyB0b3AgYm9yZGVyICovXG4gICAgICA6aG9zdCg6bm90KFt0aGVtZX49XCJuby1yb3ctYm9yZGVyc1wiXSkpIFtwYXJ0PVwicm93XCJdOmZpcnN0LWNoaWxkIFtwYXJ0fj1cImhlYWRlci1jZWxsXCJdIHtcbiAgICAgICAgYm9yZGVyLXRvcDogMDtcbiAgICAgIH1cblxuICAgICAgW3BhcnQ9XCJyb3dcIl06bGFzdC1jaGlsZCBbcGFydH49XCJoZWFkZXItY2VsbFwiXSB7XG4gICAgICAgIGJvcmRlci1ib3R0b206IHZhcigtLV9sdW1vLWdyaWQtYm9yZGVyLXdpZHRoKSBzb2xpZCB0cmFuc3BhcmVudDtcbiAgICAgIH1cblxuICAgICAgOmhvc3QoOm5vdChbdGhlbWV+PVwibm8tcm93LWJvcmRlcnNcIl0pKSBbcGFydD1cInJvd1wiXTpsYXN0LWNoaWxkIFtwYXJ0fj1cImhlYWRlci1jZWxsXCJdIHtcbiAgICAgICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogdmFyKC0tX2x1bW8tZ3JpZC1zZWNvbmRhcnktYm9yZGVyLWNvbG9yKTtcbiAgICAgIH1cblxuICAgICAgLyogT3ZlcmZsb3cgdXNlcyBhIHN0cm9uZ2VyIGJvcmRlciBjb2xvciAqL1xuICAgICAgOmhvc3QoW292ZXJmbG93fj1cInRvcFwiXSkgW3BhcnQ9XCJyb3dcIl06bGFzdC1jaGlsZCBbcGFydH49XCJoZWFkZXItY2VsbFwiXSB7XG4gICAgICAgIGJvcmRlci1ib3R0b20tY29sb3I6IHZhcigtLV9sdW1vLWdyaWQtYm9yZGVyLWNvbG9yKTtcbiAgICAgIH1cblxuICAgICAgLyogRm9vdGVyIGJvcmRlcnMgKi9cblxuICAgICAgW3BhcnQ9XCJyb3dcIl06Zmlyc3QtY2hpbGQgW3BhcnR+PVwiZm9vdGVyLWNlbGxcIl0ge1xuICAgICAgICBib3JkZXItdG9wOiB2YXIoLS1fbHVtby1ncmlkLWJvcmRlci13aWR0aCkgc29saWQgdHJhbnNwYXJlbnQ7XG4gICAgICB9XG5cbiAgICAgIDpob3N0KDpub3QoW3RoZW1lfj1cIm5vLXJvdy1ib3JkZXJzXCJdKSkgW3BhcnQ9XCJyb3dcIl06Zmlyc3QtY2hpbGQgW3BhcnR+PVwiZm9vdGVyLWNlbGxcIl0ge1xuICAgICAgICBib3JkZXItdG9wLWNvbG9yOiB2YXIoLS1fbHVtby1ncmlkLXNlY29uZGFyeS1ib3JkZXItY29sb3IpO1xuICAgICAgfVxuXG4gICAgICAvKiBPdmVyZmxvdyB1c2VzIGEgc3Ryb25nZXIgYm9yZGVyIGNvbG9yICovXG4gICAgICA6aG9zdChbb3ZlcmZsb3d+PVwiYm90dG9tXCJdKSBbcGFydD1cInJvd1wiXTpmaXJzdC1jaGlsZCBbcGFydH49XCJmb290ZXItY2VsbFwiXSB7XG4gICAgICAgIGJvcmRlci10b3AtY29sb3I6IHZhcigtLV9sdW1vLWdyaWQtYm9yZGVyLWNvbG9yKTtcbiAgICAgIH1cblxuICAgICAgLyogQ29sdW1uIHJlb3JkZXJpbmcgKi9cblxuICAgICAgOmhvc3QoW3Jlb3JkZXJpbmddKSBbcGFydH49XCJjZWxsXCJdIHtcbiAgICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHZhcigtLWx1bW8tc2hhZGUtMjBwY3QpLCB2YXIoLS1sdW1vLXNoYWRlLTIwcGN0KSkgdmFyKC0tbHVtby1iYXNlLWNvbG9yKTtcbiAgICAgIH1cblxuICAgICAgOmhvc3QoW3Jlb3JkZXJpbmddKSBbcGFydH49XCJjZWxsXCJdW3Jlb3JkZXItc3RhdHVzPVwiYWxsb3dlZFwiXSB7XG4gICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWx1bW8tYmFzZS1jb2xvcik7XG4gICAgICB9XG5cbiAgICAgIDpob3N0KFtyZW9yZGVyaW5nXSkgW3BhcnR+PVwiY2VsbFwiXVtyZW9yZGVyLXN0YXR1cz1cImRyYWdnaW5nXCJdIHtcbiAgICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHZhcigtLWx1bW8tY29udHJhc3QtNXBjdCksIHZhcigtLWx1bW8tY29udHJhc3QtNXBjdCkpIHZhcigtLWx1bW8tYmFzZS1jb2xvcik7XG4gICAgICB9XG5cbiAgICAgIFtwYXJ0fj1cInJlb3JkZXItZ2hvc3RcIl0ge1xuICAgICAgICBvcGFjaXR5OiAwLjg1O1xuICAgICAgICBib3gtc2hhZG93OiB2YXIoLS1sdW1vLWJveC1zaGFkb3ctcyk7XG4gICAgICAgIC8qIFRPRE8gVXNlIHRoZSBzYW1lIHN0eWxlcyBhcyBmb3IgdGhlIGNlbGwgZWxlbWVudCAocmVvcmRlci1naG9zdCBjb3BpZXMgc3R5bGVzIGZyb20gdGhlIGNlbGwgZWxlbWVudCkgKi9cbiAgICAgICAgcGFkZGluZzogdmFyKC0tbHVtby1zcGFjZS1zKSB2YXIoLS1sdW1vLXNwYWNlLW0pICFpbXBvcnRhbnQ7XG4gICAgICB9XG5cbiAgICAgIC8qIENvbHVtbiByZXNpemluZyAqL1xuXG4gICAgICBbcGFydD1cInJlc2l6ZS1oYW5kbGVcIl0ge1xuICAgICAgICB3aWR0aDogM3B4O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1sdW1vLXByaW1hcnktY29sb3ItNTBwY3QpO1xuICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMnM7XG4gICAgICB9XG5cbiAgICAgIDpob3N0KDpub3QoW3Jlb3JkZXJpbmddKSkgKjpub3QoW2NvbHVtbi1yZXNpemluZ10pIFtwYXJ0fj1cImNlbGxcIl06aG92ZXIgW3BhcnQ9XCJyZXNpemUtaGFuZGxlXCJdLFxuICAgICAgW3BhcnQ9XCJyZXNpemUtaGFuZGxlXCJdOmFjdGl2ZSB7XG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xuICAgICAgfVxuXG4gICAgICAvKiBDb2x1bW4gYm9yZGVycyAqL1xuXG4gICAgICA6aG9zdChbdGhlbWV+PVwiY29sdW1uLWJvcmRlcnNcIl0pIFtwYXJ0fj1cImNlbGxcIl06bm90KFtsYXN0LWNvbHVtbl0pOm5vdChbcGFydH49XCJkZXRhaWxzLWNlbGxcIl0pIHtcbiAgICAgICAgYm9yZGVyLXJpZ2h0OiB2YXIoLS1fbHVtby1ncmlkLWJvcmRlci13aWR0aCkgc29saWQgdmFyKC0tX2x1bW8tZ3JpZC1zZWNvbmRhcnktYm9yZGVyLWNvbG9yKTtcbiAgICAgIH1cblxuICAgICAgLyogRnJvemVuIGNvbHVtbnMgKi9cblxuICAgICAgW2xhc3QtZnJvemVuXSB7XG4gICAgICAgIGJvcmRlci1yaWdodDogdmFyKC0tX2x1bW8tZ3JpZC1ib3JkZXItd2lkdGgpIHNvbGlkIHRyYW5zcGFyZW50O1xuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgfVxuXG4gICAgICA6aG9zdChbb3ZlcmZsb3d+PVwibGVmdFwiXSkgW3BhcnR+PVwiY2VsbFwiXVtsYXN0LWZyb3plbl06bm90KFtwYXJ0fj1cImRldGFpbHMtY2VsbFwiXSkge1xuICAgICAgICBib3JkZXItcmlnaHQtY29sb3I6IHZhcigtLV9sdW1vLWdyaWQtYm9yZGVyLWNvbG9yKTtcbiAgICAgIH1cblxuICAgICAgLyogUm93IHN0cmlwZXMgKi9cblxuICAgICAgOmhvc3QoW3RoZW1lfj1cInJvdy1zdHJpcGVzXCJdKSBbcGFydH49XCJyb3dcIl06bm90KFtvZGRdKSBbcGFydH49XCJib2R5LWNlbGxcIl0sXG4gICAgICA6aG9zdChbdGhlbWV+PVwicm93LXN0cmlwZXNcIl0pIFtwYXJ0fj1cInJvd1wiXTpub3QoW29kZF0pIFtwYXJ0fj1cImRldGFpbHMtY2VsbFwiXSB7XG4gICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh2YXIoLS1sdW1vLWNvbnRyYXN0LTVwY3QpLCB2YXIoLS1sdW1vLWNvbnRyYXN0LTVwY3QpKTtcbiAgICAgICAgYmFja2dyb3VuZC1yZXBlYXQ6IHJlcGVhdC14O1xuICAgICAgfVxuXG4gICAgICAvKiBTZWxlY3RlZCByb3cgKi9cblxuICAgICAgLyogUmFpc2UgdGhlIHNlbGVjdGVkIHJvd3MgYWJvdmUgdW5zZWxlY3RlZCByb3dzIChzbyB0aGF0IGJveC1zaGFkb3cgY2FuIGNvdmVyIHVuc2VsZWN0ZWQgcm93cykgKi9cbiAgICAgIDpob3N0KDpub3QoW3Jlb3JkZXJpbmddKSkgW3BhcnR+PVwicm93XCJdW3NlbGVjdGVkXSB7XG4gICAgICAgIHotaW5kZXg6IDE7XG4gICAgICB9XG5cbiAgICAgIDpob3N0KDpub3QoW3Jlb3JkZXJpbmddKSkgW3BhcnR+PVwicm93XCJdW3NlbGVjdGVkXSBbcGFydH49XCJib2R5LWNlbGxcIl06bm90KFtwYXJ0fj1cImRldGFpbHMtY2VsbFwiXSkge1xuICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodmFyKC0tX2x1bW8tZ3JpZC1zZWxlY3RlZC1yb3ctY29sb3IpLCB2YXIoLS1fbHVtby1ncmlkLXNlbGVjdGVkLXJvdy1jb2xvcikpO1xuICAgICAgICBiYWNrZ3JvdW5kLXJlcGVhdDogcmVwZWF0O1xuICAgICAgfVxuXG4gICAgICAvKiBDb3ZlciB0aGUgYm9yZGVyIG9mIGFuIHVuc2VsZWN0ZWQgcm93ICovXG4gICAgICA6aG9zdCg6bm90KFt0aGVtZX49XCJuby1yb3ctYm9yZGVyc1wiXSkpIFtwYXJ0fj1cInJvd1wiXVtzZWxlY3RlZF0gW3BhcnR+PVwiY2VsbFwiXTpub3QoW3BhcnR+PVwiZGV0YWlscy1jZWxsXCJdKSB7XG4gICAgICAgIGJveC1zaGFkb3c6IDAgdmFyKC0tX2x1bW8tZ3JpZC1ib3JkZXItd2lkdGgpIDAgMCB2YXIoLS1fbHVtby1ncmlkLXNlbGVjdGVkLXJvdy1jb2xvcik7XG4gICAgICB9XG5cbiAgICAgIC8qIENvbXBhY3QgKi9cblxuICAgICAgOmhvc3QoW3RoZW1lfj1cImNvbXBhY3RcIl0pIFtwYXJ0PVwicm93XCJdOm9ubHktY2hpbGQgW3BhcnR+PVwiaGVhZGVyLWNlbGxcIl0ge1xuICAgICAgICBtaW4taGVpZ2h0OiB2YXIoLS1sdW1vLXNpemUtbSk7XG4gICAgICB9XG5cbiAgICAgIDpob3N0KFt0aGVtZX49XCJjb21wYWN0XCJdKSBbcGFydH49XCJjZWxsXCJdIHtcbiAgICAgICAgbWluLWhlaWdodDogdmFyKC0tbHVtby1zaXplLXMpO1xuICAgICAgfVxuXG4gICAgICA6aG9zdChbdGhlbWV+PVwiY29tcGFjdFwiXSkgW3BhcnQ9XCJyb3dcIl1bZmlyc3RdIFtwYXJ0fj1cImNlbGxcIl06bm90KFtwYXJ0fj1cImRldGFpbHMtY2VsbFwiXSkge1xuICAgICAgICBtaW4taGVpZ2h0OiBjYWxjKHZhcigtLWx1bW8tc2l6ZS1zKSAtIHZhcigtLV9sdW1vLWdyaWQtYm9yZGVyLXdpZHRoKSk7XG4gICAgICB9XG5cbiAgICAgIDpob3N0KFt0aGVtZX49XCJjb21wYWN0XCJdKSBbcGFydH49XCJjZWxsXCJdIDo6c2xvdHRlZCh2YWFkaW4tZ3JpZC1jZWxsLWNvbnRlbnQpIHtcbiAgICAgICAgcGFkZGluZzogdmFyKC0tbHVtby1zcGFjZS14cykgdmFyKC0tbHVtby1zcGFjZS1zKTtcbiAgICAgIH1cblxuICAgICAgLyogV3JhcCBjZWxsIGNvbnRlbnRzICovXG5cbiAgICAgIDpob3N0KFt0aGVtZX49XCJ3cmFwLWNlbGwtY29udGVudFwiXSkgW3BhcnR+PVwiY2VsbFwiXSA6OnNsb3R0ZWQodmFhZGluLWdyaWQtY2VsbC1jb250ZW50KSB7XG4gICAgICAgIHdoaXRlLXNwYWNlOiBub3JtYWw7XG4gICAgICB9XG4gICAgPC9zdHlsZT5cbiAgPC90ZW1wbGF0ZT5cbjwvZG9tLW1vZHVsZT48ZG9tLW1vZHVsZSB0aGVtZS1mb3I9XCJ2YWFkaW4tY2hlY2tib3hcIiBpZD1cInZhYWRpbi1ncmlkLXNlbGVjdC1hbGwtY2hlY2tib3gtbHVtb1wiPlxuICA8dGVtcGxhdGU+XG4gICAgPHN0eWxlPlxuICAgICAgOmhvc3QoLnZhYWRpbi1ncmlkLXNlbGVjdC1hbGwtY2hlY2tib3gpIHtcbiAgICAgICAgZm9udC1zaXplOiB2YXIoLS1sdW1vLWZvbnQtc2l6ZS1tKTtcbiAgICAgIH1cbiAgIDwvc3R5bGU+XG4gIDwvdGVtcGxhdGU+XG48L2RvbS1tb2R1bGU+YDtcblxuZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCgkX2RvY3VtZW50Q29udGFpbmVyLmNvbnRlbnQpO1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuLypcbkV4dHJlbWVseSBzaW1wbGUgY3NzIHBhcnNlci4gSW50ZW5kZWQgdG8gYmUgbm90IG1vcmUgdGhhbiB3aGF0IHdlIG5lZWRcbmFuZCBkZWZpbml0ZWx5IG5vdCBuZWNlc3NhcmlseSBjb3JyZWN0ID0pLlxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHVucmVzdHJpY3RlZCAqL1xuY2xhc3MgU3R5bGVOb2RlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgdGhpc1snc3RhcnQnXSA9IDA7XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgdGhpc1snZW5kJ10gPSAwO1xuICAgIC8qKiBAdHlwZSB7U3R5bGVOb2RlfSAqL1xuICAgIHRoaXNbJ3ByZXZpb3VzJ10gPSBudWxsO1xuICAgIC8qKiBAdHlwZSB7U3R5bGVOb2RlfSAqL1xuICAgIHRoaXNbJ3BhcmVudCddID0gbnVsbDtcbiAgICAvKiogQHR5cGUge0FycmF5PFN0eWxlTm9kZT59ICovXG4gICAgdGhpc1sncnVsZXMnXSA9IG51bGw7XG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgdGhpc1sncGFyc2VkQ3NzVGV4dCddID0gJyc7XG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgdGhpc1snY3NzVGV4dCddID0gJyc7XG4gICAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICAgIHRoaXNbJ2F0UnVsZSddID0gZmFsc2U7XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgdGhpc1sndHlwZSddID0gMDtcbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICB0aGlzWydrZXlmcmFtZXNOYW1lJ10gPSAnJztcbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICB0aGlzWydzZWxlY3RvciddID0gJyc7XG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgdGhpc1sncGFyc2VkU2VsZWN0b3InXSA9ICcnO1xuICB9XG59XG5cbmV4cG9ydCB7U3R5bGVOb2RlfVxuXG4vLyBnaXZlbiBhIHN0cmluZyBvZiBjc3MsIHJldHVybiBhIHNpbXBsZSBydWxlIHRyZWVcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAqIEByZXR1cm4ge1N0eWxlTm9kZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlKHRleHQpIHtcbiAgdGV4dCA9IGNsZWFuKHRleHQpO1xuICByZXR1cm4gcGFyc2VDc3MobGV4KHRleHQpLCB0ZXh0KTtcbn1cblxuLy8gcmVtb3ZlIHN0dWZmIHdlIGRvbid0IGNhcmUgYWJvdXQgdGhhdCBtYXkgaGluZGVyIHBhcnNpbmdcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGNzc1RleHRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gY2xlYW4oY3NzVGV4dCkge1xuICByZXR1cm4gY3NzVGV4dC5yZXBsYWNlKFJYLmNvbW1lbnRzLCAnJykucmVwbGFjZShSWC5wb3J0LCAnJyk7XG59XG5cbi8vIHN1cGVyIHNpbXBsZSB7Li4ufSBsZXhlciB0aGF0IHJldHVybnMgYSBub2RlIHRyZWVcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAqIEByZXR1cm4geyFTdHlsZU5vZGV9XG4gKi9cbmZ1bmN0aW9uIGxleCh0ZXh0KSB7XG4gIGxldCByb290ID0gbmV3IFN0eWxlTm9kZSgpO1xuICByb290WydzdGFydCddID0gMDtcbiAgcm9vdFsnZW5kJ10gPSB0ZXh0Lmxlbmd0aFxuICBsZXQgbiA9IHJvb3Q7XG4gIGZvciAobGV0IGkgPSAwLCBsID0gdGV4dC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAodGV4dFtpXSA9PT0gT1BFTl9CUkFDRSkge1xuICAgICAgaWYgKCFuWydydWxlcyddKSB7XG4gICAgICAgIG5bJ3J1bGVzJ10gPSBbXTtcbiAgICAgIH1cbiAgICAgIGxldCBwID0gbjtcbiAgICAgIGxldCBwcmV2aW91cyA9IHBbJ3J1bGVzJ11bcFsncnVsZXMnXS5sZW5ndGggLSAxXSB8fCBudWxsO1xuICAgICAgbiA9IG5ldyBTdHlsZU5vZGUoKTtcbiAgICAgIG5bJ3N0YXJ0J10gPSBpICsgMTtcbiAgICAgIG5bJ3BhcmVudCddID0gcDtcbiAgICAgIG5bJ3ByZXZpb3VzJ10gPSBwcmV2aW91cztcbiAgICAgIHBbJ3J1bGVzJ10ucHVzaChuKTtcbiAgICB9IGVsc2UgaWYgKHRleHRbaV0gPT09IENMT1NFX0JSQUNFKSB7XG4gICAgICBuWydlbmQnXSA9IGkgKyAxO1xuICAgICAgbiA9IG5bJ3BhcmVudCddIHx8IHJvb3Q7XG4gICAgfVxuICB9XG4gIHJldHVybiByb290O1xufVxuXG4vLyBhZGQgc2VsZWN0b3JzL2Nzc1RleHQgdG8gbm9kZSB0cmVlXG4vKipcbiAqIEBwYXJhbSB7U3R5bGVOb2RlfSBub2RlXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICogQHJldHVybiB7IVN0eWxlTm9kZX1cbiAqL1xuZnVuY3Rpb24gcGFyc2VDc3Mobm9kZSwgdGV4dCkge1xuICBsZXQgdCA9IHRleHQuc3Vic3RyaW5nKG5vZGVbJ3N0YXJ0J10sIG5vZGVbJ2VuZCddIC0gMSk7XG4gIG5vZGVbJ3BhcnNlZENzc1RleHQnXSA9IG5vZGVbJ2Nzc1RleHQnXSA9IHQudHJpbSgpO1xuICBpZiAobm9kZVsncGFyZW50J10pIHtcbiAgICBsZXQgc3MgPSBub2RlWydwcmV2aW91cyddID8gbm9kZVsncHJldmlvdXMnXVsnZW5kJ10gOiBub2RlWydwYXJlbnQnXVsnc3RhcnQnXTtcbiAgICB0ID0gdGV4dC5zdWJzdHJpbmcoc3MsIG5vZGVbJ3N0YXJ0J10gLSAxKTtcbiAgICB0ID0gX2V4cGFuZFVuaWNvZGVFc2NhcGVzKHQpO1xuICAgIHQgPSB0LnJlcGxhY2UoUlgubXVsdGlwbGVTcGFjZXMsICcgJyk7XG4gICAgLy8gVE9ETyhzb3J2ZWxsKTogYWQgaG9jOyBtYWtlIHNlbGVjdG9yIGluY2x1ZGUgb25seSBhZnRlciBsYXN0IDtcbiAgICAvLyBoZWxwcyB3aXRoIG1peGluIHN5bnRheFxuICAgIHQgPSB0LnN1YnN0cmluZyh0Lmxhc3RJbmRleE9mKCc7JykgKyAxKTtcbiAgICBsZXQgcyA9IG5vZGVbJ3BhcnNlZFNlbGVjdG9yJ10gPSBub2RlWydzZWxlY3RvciddID0gdC50cmltKCk7XG4gICAgbm9kZVsnYXRSdWxlJ10gPSAocy5pbmRleE9mKEFUX1NUQVJUKSA9PT0gMCk7XG4gICAgLy8gbm90ZSwgc3VwcG9ydCBhIHN1YnNldCBvZiBydWxlIHR5cGVzLi4uXG4gICAgaWYgKG5vZGVbJ2F0UnVsZSddKSB7XG4gICAgICBpZiAocy5pbmRleE9mKE1FRElBX1NUQVJUKSA9PT0gMCkge1xuICAgICAgICBub2RlWyd0eXBlJ10gPSB0eXBlcy5NRURJQV9SVUxFO1xuICAgICAgfSBlbHNlIGlmIChzLm1hdGNoKFJYLmtleWZyYW1lc1J1bGUpKSB7XG4gICAgICAgIG5vZGVbJ3R5cGUnXSA9IHR5cGVzLktFWUZSQU1FU19SVUxFO1xuICAgICAgICBub2RlWydrZXlmcmFtZXNOYW1lJ10gPVxuICAgICAgICAgIG5vZGVbJ3NlbGVjdG9yJ10uc3BsaXQoUlgubXVsdGlwbGVTcGFjZXMpLnBvcCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocy5pbmRleE9mKFZBUl9TVEFSVCkgPT09IDApIHtcbiAgICAgICAgbm9kZVsndHlwZSddID0gdHlwZXMuTUlYSU5fUlVMRTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVbJ3R5cGUnXSA9IHR5cGVzLlNUWUxFX1JVTEU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGxldCByJCA9IG5vZGVbJ3J1bGVzJ107XG4gIGlmIChyJCkge1xuICAgIGZvciAobGV0IGkgPSAwLCBsID0gciQubGVuZ3RoLCByO1xuICAgICAgKGkgPCBsKSAmJiAociA9IHIkW2ldKTsgaSsrKSB7XG4gICAgICBwYXJzZUNzcyhyLCB0ZXh0KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5vZGU7XG59XG5cbi8qKlxuICogY29udmVyc2lvbiBvZiBzb3J0IHVuaWNvZGUgZXNjYXBlcyB3aXRoIHNwYWNlcyBsaWtlIGBcXDMzIGAgKGFuZCBsb25nZXIpIGludG9cbiAqIGV4cGFuZGVkIGZvcm0gdGhhdCBkb2Vzbid0IHJlcXVpcmUgdHJhaWxpbmcgc3BhY2UgYFxcMDAwMDMzYFxuICogQHBhcmFtIHtzdHJpbmd9IHNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gX2V4cGFuZFVuaWNvZGVFc2NhcGVzKHMpIHtcbiAgcmV0dXJuIHMucmVwbGFjZSgvXFxcXChbMC05YS1mXXsxLDZ9KVxccy9naSwgZnVuY3Rpb24oKSB7XG4gICAgbGV0IGNvZGUgPSBhcmd1bWVudHNbMV0sXG4gICAgICByZXBlYXQgPSA2IC0gY29kZS5sZW5ndGg7XG4gICAgd2hpbGUgKHJlcGVhdC0tKSB7XG4gICAgICBjb2RlID0gJzAnICsgY29kZTtcbiAgICB9XG4gICAgcmV0dXJuICdcXFxcJyArIGNvZGU7XG4gIH0pO1xufVxuXG4vKipcbiAqIHN0cmluZ2lmeSBwYXJzZWQgY3NzLlxuICogQHBhcmFtIHtTdHlsZU5vZGV9IG5vZGVcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IHByZXNlcnZlUHJvcGVydGllc1xuICogQHBhcmFtIHtzdHJpbmc9fSB0ZXh0XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnkobm9kZSwgcHJlc2VydmVQcm9wZXJ0aWVzLCB0ZXh0ID0gJycpIHtcbiAgLy8gY2FsYyBydWxlIGNzc1RleHRcbiAgbGV0IGNzc1RleHQgPSAnJztcbiAgaWYgKG5vZGVbJ2Nzc1RleHQnXSB8fCBub2RlWydydWxlcyddKSB7XG4gICAgbGV0IHIkID0gbm9kZVsncnVsZXMnXTtcbiAgICBpZiAociQgJiYgIV9oYXNNaXhpblJ1bGVzKHIkKSkge1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSByJC5sZW5ndGgsIHI7XG4gICAgICAgIChpIDwgbCkgJiYgKHIgPSByJFtpXSk7IGkrKykge1xuICAgICAgICBjc3NUZXh0ID0gc3RyaW5naWZ5KHIsIHByZXNlcnZlUHJvcGVydGllcywgY3NzVGV4dCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNzc1RleHQgPSBwcmVzZXJ2ZVByb3BlcnRpZXMgPyBub2RlWydjc3NUZXh0J10gOlxuICAgICAgICByZW1vdmVDdXN0b21Qcm9wcyhub2RlWydjc3NUZXh0J10pO1xuICAgICAgY3NzVGV4dCA9IGNzc1RleHQudHJpbSgpO1xuICAgICAgaWYgKGNzc1RleHQpIHtcbiAgICAgICAgY3NzVGV4dCA9ICcgICcgKyBjc3NUZXh0ICsgJ1xcbic7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGVtaXQgcnVsZSBpZiB0aGVyZSBpcyBjc3NUZXh0XG4gIGlmIChjc3NUZXh0KSB7XG4gICAgaWYgKG5vZGVbJ3NlbGVjdG9yJ10pIHtcbiAgICAgIHRleHQgKz0gbm9kZVsnc2VsZWN0b3InXSArICcgJyArIE9QRU5fQlJBQ0UgKyAnXFxuJztcbiAgICB9XG4gICAgdGV4dCArPSBjc3NUZXh0O1xuICAgIGlmIChub2RlWydzZWxlY3RvciddKSB7XG4gICAgICB0ZXh0ICs9IENMT1NFX0JSQUNFICsgJ1xcblxcbic7XG4gICAgfVxuICB9XG4gIHJldHVybiB0ZXh0O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8U3R5bGVOb2RlPn0gcnVsZXNcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIF9oYXNNaXhpblJ1bGVzKHJ1bGVzKSB7XG4gIGxldCByID0gcnVsZXNbMF07XG4gIHJldHVybiBCb29sZWFuKHIpICYmIEJvb2xlYW4oclsnc2VsZWN0b3InXSkgJiYgclsnc2VsZWN0b3InXS5pbmRleE9mKFZBUl9TVEFSVCkgPT09IDA7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGNzc1RleHRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQ3VzdG9tUHJvcHMoY3NzVGV4dCkge1xuICBjc3NUZXh0ID0gcmVtb3ZlQ3VzdG9tUHJvcEFzc2lnbm1lbnQoY3NzVGV4dCk7XG4gIHJldHVybiByZW1vdmVDdXN0b21Qcm9wQXBwbHkoY3NzVGV4dCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGNzc1RleHRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUN1c3RvbVByb3BBc3NpZ25tZW50KGNzc1RleHQpIHtcbiAgcmV0dXJuIGNzc1RleHRcbiAgICAucmVwbGFjZShSWC5jdXN0b21Qcm9wLCAnJylcbiAgICAucmVwbGFjZShSWC5taXhpblByb3AsICcnKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gY3NzVGV4dFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiByZW1vdmVDdXN0b21Qcm9wQXBwbHkoY3NzVGV4dCkge1xuICByZXR1cm4gY3NzVGV4dFxuICAgIC5yZXBsYWNlKFJYLm1peGluQXBwbHksICcnKVxuICAgIC5yZXBsYWNlKFJYLnZhckFwcGx5LCAnJyk7XG59XG5cbi8qKiBAZW51bSB7bnVtYmVyfSAqL1xuZXhwb3J0IGNvbnN0IHR5cGVzID0ge1xuICBTVFlMRV9SVUxFOiAxLFxuICBLRVlGUkFNRVNfUlVMRTogNyxcbiAgTUVESUFfUlVMRTogNCxcbiAgTUlYSU5fUlVMRTogMTAwMFxufVxuXG5jb25zdCBPUEVOX0JSQUNFID0gJ3snO1xuY29uc3QgQ0xPU0VfQlJBQ0UgPSAnfSc7XG5cbi8vIGhlbHBlciByZWdleHAnc1xuY29uc3QgUlggPSB7XG4gIGNvbW1lbnRzOiAvXFwvXFwqW14qXSpcXCorKFteLypdW14qXSpcXCorKSpcXC8vZ2ltLFxuICBwb3J0OiAvQGltcG9ydFteO10qOy9naW0sXG4gIGN1c3RvbVByb3A6IC8oPzpeW147XFwtXFxzfV0rKT8tLVteO3t9XSo/Oltee307XSo/KD86WztcXG5dfCQpL2dpbSxcbiAgbWl4aW5Qcm9wOiAvKD86XlteO1xcLVxcc31dKyk/LS1bXjt7fV0qPzpbXnt9O10qP3tbXn1dKj99KD86WztcXG5dfCQpPy9naW0sXG4gIG1peGluQXBwbHk6IC9AYXBwbHlcXHMqXFwoP1teKTtdKlxcKT9cXHMqKD86WztcXG5dfCQpPy9naW0sXG4gIHZhckFwcGx5OiAvW147Ol0qPzpbXjtdKj92YXJcXChbXjtdKlxcKSg/Ols7XFxuXXwkKT8vZ2ltLFxuICBrZXlmcmFtZXNSdWxlOiAvXkBbXlxcc10qa2V5ZnJhbWVzLyxcbiAgbXVsdGlwbGVTcGFjZXM6IC9cXHMrL2dcbn1cblxuY29uc3QgVkFSX1NUQVJUID0gJy0tJztcbmNvbnN0IE1FRElBX1NUQVJUID0gJ0BtZWRpYSc7XG5jb25zdCBBVF9TVEFSVCA9ICdAJztcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHshU2V0PHN0cmluZz59ICovXG5jb25zdCBzdHlsZVRleHRTZXQgPSBuZXcgU2V0KCk7XG5cbmV4cG9ydCBjb25zdCBzY29waW5nQXR0cmlidXRlID0gJ3NoYWR5LXVuc2NvcGVkJztcblxuLyoqXG4gKiBBZGQgYSBzcGVjaWZpY2FsbHktbWFya2VkIHN0eWxlIHRvIHRoZSBkb2N1bWVudCBkaXJlY3RseSwgYW5kIG9ubHkgb25lIGNvcHkgb2YgdGhhdCBzdHlsZS5cbiAqXG4gKiBAcGFyYW0geyFIVE1MU3R5bGVFbGVtZW50fSBzdHlsZVxuICogQHJldHVybiB7dW5kZWZpbmVkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc1Vuc2NvcGVkU3R5bGUoc3R5bGUpIHtcbiAgY29uc3QgdGV4dCA9IHN0eWxlLnRleHRDb250ZW50O1xuICBpZiAoIXN0eWxlVGV4dFNldC5oYXModGV4dCkpIHtcbiAgICBzdHlsZVRleHRTZXQuYWRkKHRleHQpO1xuICAgIGNvbnN0IG5ld1N0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICBuZXdTdHlsZS5zZXRBdHRyaWJ1dGUoJ3NoYWR5LXVuc2NvcGVkJywgJycpO1xuICAgIG5ld1N0eWxlLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKG5ld1N0eWxlKTtcbiAgfVxufVxuXG4vKipcbiAqIENoZWNrIGlmIGEgc3R5bGUgaXMgc3VwcG9zZWQgdG8gYmUgdW5zY29wZWRcbiAqIEBwYXJhbSB7IUhUTUxTdHlsZUVsZW1lbnR9IHN0eWxlXG4gKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIHRoZSBzdHlsZSBoYXMgdGhlIHVuc2NvcGluZyBhdHRyaWJ1dGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVW5zY29wZWRTdHlsZShzdHlsZSkge1xuICByZXR1cm4gc3R5bGUuaGFzQXR0cmlidXRlKHNjb3BpbmdBdHRyaWJ1dGUpO1xufSIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHtuYXRpdmVTaGFkb3csIG5hdGl2ZUNzc1ZhcmlhYmxlcywgY3NzQnVpbGR9IGZyb20gJy4vc3R5bGUtc2V0dGluZ3MuanMnO1xuaW1wb3J0IHtwYXJzZSwgc3RyaW5naWZ5LCB0eXBlcywgU3R5bGVOb2RlfSBmcm9tICcuL2Nzcy1wYXJzZS5qcyc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbmltcG9ydCB7TUVESUFfTUFUQ0h9IGZyb20gJy4vY29tbW9uLXJlZ2V4LmpzJztcbmltcG9ydCB7cHJvY2Vzc1Vuc2NvcGVkU3R5bGUsIGlzVW5zY29wZWRTdHlsZX0gZnJvbSAnLi91bnNjb3BlZC1zdHlsZS1oYW5kbGVyLmpzJztcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ3xTdHlsZU5vZGV9IHJ1bGVzXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFN0eWxlTm9kZSk9fSBjYWxsYmFja1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9Dc3NUZXh0IChydWxlcywgY2FsbGJhY2spIHtcbiAgaWYgKCFydWxlcykge1xuICAgIHJldHVybiAnJztcbiAgfVxuICBpZiAodHlwZW9mIHJ1bGVzID09PSAnc3RyaW5nJykge1xuICAgIHJ1bGVzID0gcGFyc2UocnVsZXMpO1xuICB9XG4gIGlmIChjYWxsYmFjaykge1xuICAgIGZvckVhY2hSdWxlKHJ1bGVzLCBjYWxsYmFjayk7XG4gIH1cbiAgcmV0dXJuIHN0cmluZ2lmeShydWxlcywgbmF0aXZlQ3NzVmFyaWFibGVzKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxTdHlsZUVsZW1lbnR9IHN0eWxlXG4gKiBAcmV0dXJuIHtTdHlsZU5vZGV9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydWxlc0ZvclN0eWxlKHN0eWxlKSB7XG4gIGlmICghc3R5bGVbJ19fY3NzUnVsZXMnXSAmJiBzdHlsZS50ZXh0Q29udGVudCkge1xuICAgIHN0eWxlWydfX2Nzc1J1bGVzJ10gPSBwYXJzZShzdHlsZS50ZXh0Q29udGVudCk7XG4gIH1cbiAgcmV0dXJuIHN0eWxlWydfX2Nzc1J1bGVzJ10gfHwgbnVsbDtcbn1cblxuLy8gVGVzdHMgaWYgYSBydWxlIGlzIGEga2V5ZnJhbWVzIHNlbGVjdG9yLCB3aGljaCBsb29rcyBhbG1vc3QgZXhhY3RseVxuLy8gbGlrZSBhIG5vcm1hbCBzZWxlY3RvciBidXQgaXMgbm90IChpdCBoYXMgbm90aGluZyB0byBkbyB3aXRoIHNjb3Bpbmdcbi8vIGZvciBleGFtcGxlKS5cbi8qKlxuICogQHBhcmFtIHtTdHlsZU5vZGV9IHJ1bGVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0tleWZyYW1lc1NlbGVjdG9yKHJ1bGUpIHtcbiAgcmV0dXJuIEJvb2xlYW4ocnVsZVsncGFyZW50J10pICYmXG4gIHJ1bGVbJ3BhcmVudCddWyd0eXBlJ10gPT09IHR5cGVzLktFWUZSQU1FU19SVUxFO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7U3R5bGVOb2RlfSBub2RlXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gc3R5bGVSdWxlQ2FsbGJhY2tcbiAqIEBwYXJhbSB7RnVuY3Rpb249fSBrZXlmcmFtZXNSdWxlQ2FsbGJhY2tcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9ubHlBY3RpdmVSdWxlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZm9yRWFjaFJ1bGUobm9kZSwgc3R5bGVSdWxlQ2FsbGJhY2ssIGtleWZyYW1lc1J1bGVDYWxsYmFjaywgb25seUFjdGl2ZVJ1bGVzKSB7XG4gIGlmICghbm9kZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgc2tpcFJ1bGVzID0gZmFsc2U7XG4gIGxldCB0eXBlID0gbm9kZVsndHlwZSddO1xuICBpZiAob25seUFjdGl2ZVJ1bGVzKSB7XG4gICAgaWYgKHR5cGUgPT09IHR5cGVzLk1FRElBX1JVTEUpIHtcbiAgICAgIGxldCBtYXRjaE1lZGlhID0gbm9kZVsnc2VsZWN0b3InXS5tYXRjaChNRURJQV9NQVRDSCk7XG4gICAgICBpZiAobWF0Y2hNZWRpYSkge1xuICAgICAgICAvLyBpZiBydWxlIGlzIGEgbm9uIG1hdGNoaW5nIEBtZWRpYSBydWxlLCBza2lwIHN1YnJ1bGVzXG4gICAgICAgIGlmICghd2luZG93Lm1hdGNoTWVkaWEobWF0Y2hNZWRpYVsxXSkubWF0Y2hlcykge1xuICAgICAgICAgIHNraXBSdWxlcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHR5cGUgPT09IHR5cGVzLlNUWUxFX1JVTEUpIHtcbiAgICBzdHlsZVJ1bGVDYWxsYmFjayhub2RlKTtcbiAgfSBlbHNlIGlmIChrZXlmcmFtZXNSdWxlQ2FsbGJhY2sgJiZcbiAgICB0eXBlID09PSB0eXBlcy5LRVlGUkFNRVNfUlVMRSkge1xuICAgIGtleWZyYW1lc1J1bGVDYWxsYmFjayhub2RlKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSB0eXBlcy5NSVhJTl9SVUxFKSB7XG4gICAgc2tpcFJ1bGVzID0gdHJ1ZTtcbiAgfVxuICBsZXQgciQgPSBub2RlWydydWxlcyddO1xuICBpZiAociQgJiYgIXNraXBSdWxlcykge1xuICAgIGZvciAobGV0IGk9MCwgbD1yJC5sZW5ndGgsIHI7IChpPGwpICYmIChyPXIkW2ldKTsgaSsrKSB7XG4gICAgICBmb3JFYWNoUnVsZShyLCBzdHlsZVJ1bGVDYWxsYmFjaywga2V5ZnJhbWVzUnVsZUNhbGxiYWNrLCBvbmx5QWN0aXZlUnVsZXMpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBhZGQgYSBzdHJpbmcgb2YgY3NzVGV4dCB0byB0aGUgZG9jdW1lbnQuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBjc3NUZXh0XG4gKiBAcGFyYW0ge3N0cmluZ30gbW9uaWtlclxuICogQHBhcmFtIHtOb2RlfSB0YXJnZXRcbiAqIEBwYXJhbSB7Tm9kZX0gY29udGV4dE5vZGVcbiAqIEByZXR1cm4ge0hUTUxTdHlsZUVsZW1lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBseUNzcyhjc3NUZXh0LCBtb25pa2VyLCB0YXJnZXQsIGNvbnRleHROb2RlKSB7XG4gIGxldCBzdHlsZSA9IGNyZWF0ZVNjb3BlU3R5bGUoY3NzVGV4dCwgbW9uaWtlcik7XG4gIGFwcGx5U3R5bGUoc3R5bGUsIHRhcmdldCwgY29udGV4dE5vZGUpO1xuICByZXR1cm4gc3R5bGU7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGNzc1RleHRcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb25pa2VyXG4gKiBAcmV0dXJuIHshSFRNTFN0eWxlRWxlbWVudH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNjb3BlU3R5bGUoY3NzVGV4dCwgbW9uaWtlcikge1xuICBsZXQgc3R5bGUgPSAvKiogQHR5cGUge0hUTUxTdHlsZUVsZW1lbnR9ICovKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJykpO1xuICBpZiAobW9uaWtlcikge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnc2NvcGUnLCBtb25pa2VyKTtcbiAgfVxuICBzdHlsZS50ZXh0Q29udGVudCA9IGNzc1RleHQ7XG4gIHJldHVybiBzdHlsZTtcbn1cblxuLyoqXG4gKiBUcmFjayB0aGUgcG9zaXRpb24gb2YgdGhlIGxhc3QgYWRkZWQgc3R5bGUgZm9yIHBsYWNpbmcgcGxhY2Vob2xkZXJzXG4gKiBAdHlwZSB7Tm9kZX1cbiAqL1xubGV0IGxhc3RIZWFkQXBwbHlOb2RlID0gbnVsbDtcblxuLy8gaW5zZXJ0IGEgY29tbWVudCBub2RlIGFzIGEgc3R5bGluZyBwb3NpdGlvbiBwbGFjZWhvbGRlci5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG1vbmlrZXJcbiAqIEByZXR1cm4geyFDb21tZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlTdHlsZVBsYWNlSG9sZGVyKG1vbmlrZXIpIHtcbiAgbGV0IHBsYWNlSG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnIFNoYWR5IERPTSBzdHlsZXMgZm9yICcgK1xuICAgIG1vbmlrZXIgKyAnICcpO1xuICBsZXQgYWZ0ZXIgPSBsYXN0SGVhZEFwcGx5Tm9kZSA/XG4gICAgbGFzdEhlYWRBcHBseU5vZGVbJ25leHRTaWJsaW5nJ10gOiBudWxsO1xuICBsZXQgc2NvcGUgPSBkb2N1bWVudC5oZWFkO1xuICBzY29wZS5pbnNlcnRCZWZvcmUocGxhY2VIb2xkZXIsIGFmdGVyIHx8IHNjb3BlLmZpcnN0Q2hpbGQpO1xuICBsYXN0SGVhZEFwcGx5Tm9kZSA9IHBsYWNlSG9sZGVyO1xuICByZXR1cm4gcGxhY2VIb2xkZXI7XG59XG5cbi8qKlxuICogQHBhcmFtIHtIVE1MU3R5bGVFbGVtZW50fSBzdHlsZVxuICogQHBhcmFtIHs/Tm9kZX0gdGFyZ2V0XG4gKiBAcGFyYW0gez9Ob2RlfSBjb250ZXh0Tm9kZVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlTdHlsZShzdHlsZSwgdGFyZ2V0LCBjb250ZXh0Tm9kZSkge1xuICB0YXJnZXQgPSB0YXJnZXQgfHwgZG9jdW1lbnQuaGVhZDtcbiAgbGV0IGFmdGVyID0gKGNvbnRleHROb2RlICYmIGNvbnRleHROb2RlLm5leHRTaWJsaW5nKSB8fFxuICAgIHRhcmdldC5maXJzdENoaWxkO1xuICB0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBhZnRlcik7XG4gIGlmICghbGFzdEhlYWRBcHBseU5vZGUpIHtcbiAgICBsYXN0SGVhZEFwcGx5Tm9kZSA9IHN0eWxlO1xuICB9IGVsc2Uge1xuICAgIC8vIG9ubHkgdXBkYXRlIGxhc3RIZWFkQXBwbHlOb2RlIGlmIHRoZSBuZXcgc3R5bGUgaXMgaW5zZXJ0ZWQgYWZ0ZXIgdGhlIG9sZCBsYXN0SGVhZEFwcGx5Tm9kZVxuICAgIGxldCBwb3NpdGlvbiA9IHN0eWxlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGxhc3RIZWFkQXBwbHlOb2RlKTtcbiAgICBpZiAocG9zaXRpb24gPT09IE5vZGUuRE9DVU1FTlRfUE9TSVRJT05fUFJFQ0VESU5HKSB7XG4gICAgICBsYXN0SGVhZEFwcGx5Tm9kZSA9IHN0eWxlO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBidWlsZFR5cGVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1RhcmdldGVkQnVpbGQoYnVpbGRUeXBlKSB7XG4gIHJldHVybiBuYXRpdmVTaGFkb3cgPyBidWlsZFR5cGUgPT09ICdzaGFkb3cnIDogYnVpbGRUeXBlID09PSAnc2hhZHknO1xufVxuXG4vKipcbiAqIFdhbGsgZnJvbSB0ZXh0W3N0YXJ0XSBtYXRjaGluZyBwYXJlbnMgYW5kXG4gKiByZXR1cm5zIHBvc2l0aW9uIG9mIHRoZSBvdXRlciBlbmQgcGFyZW5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnRcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRNYXRjaGluZ1BhcmVuKHRleHQsIHN0YXJ0KSB7XG4gIGxldCBsZXZlbCA9IDA7XG4gIGZvciAobGV0IGk9c3RhcnQsIGw9dGV4dC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAodGV4dFtpXSA9PT0gJygnKSB7XG4gICAgICBsZXZlbCsrO1xuICAgIH0gZWxzZSBpZiAodGV4dFtpXSA9PT0gJyknKSB7XG4gICAgICBpZiAoLS1sZXZlbCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nLCBzdHJpbmcsIHN0cmluZywgc3RyaW5nKX0gY2FsbGJhY2tcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NWYXJpYWJsZUFuZEZhbGxiYWNrKHN0ciwgY2FsbGJhY2spIHtcbiAgLy8gZmluZCAndmFyKCdcbiAgbGV0IHN0YXJ0ID0gc3RyLmluZGV4T2YoJ3ZhcignKTtcbiAgaWYgKHN0YXJ0ID09PSAtMSkge1xuICAgIC8vIG5vIHZhcj8sIGV2ZXJ5dGhpbmcgaXMgcHJlZml4XG4gICAgcmV0dXJuIGNhbGxiYWNrKHN0ciwgJycsICcnLCAnJyk7XG4gIH1cbiAgLy8ke3ByZWZpeH12YXIoJHtpbm5lcn0pJHtzdWZmaXh9XG4gIGxldCBlbmQgPSBmaW5kTWF0Y2hpbmdQYXJlbihzdHIsIHN0YXJ0ICsgMyk7XG4gIGxldCBpbm5lciA9IHN0ci5zdWJzdHJpbmcoc3RhcnQgKyA0LCBlbmQpO1xuICBsZXQgcHJlZml4ID0gc3RyLnN1YnN0cmluZygwLCBzdGFydCk7XG4gIC8vIHN1ZmZpeCBtYXkgaGF2ZSBvdGhlciB2YXJpYWJsZXNcbiAgbGV0IHN1ZmZpeCA9IHByb2Nlc3NWYXJpYWJsZUFuZEZhbGxiYWNrKHN0ci5zdWJzdHJpbmcoZW5kICsgMSksIGNhbGxiYWNrKTtcbiAgbGV0IGNvbW1hID0gaW5uZXIuaW5kZXhPZignLCcpO1xuICAvLyB2YWx1ZSBhbmQgZmFsbGJhY2sgYXJncyBzaG91bGQgYmUgdHJpbW1lZCB0byBtYXRjaCBpbiBwcm9wZXJ0eSBsb29rdXBcbiAgaWYgKGNvbW1hID09PSAtMSkge1xuICAgIC8vIHZhcmlhYmxlLCBubyBmYWxsYmFja1xuICAgIHJldHVybiBjYWxsYmFjayhwcmVmaXgsIGlubmVyLnRyaW0oKSwgJycsIHN1ZmZpeCk7XG4gIH1cbiAgLy8gdmFyKCR7dmFsdWV9LCR7ZmFsbGJhY2t9KVxuICBsZXQgdmFsdWUgPSBpbm5lci5zdWJzdHJpbmcoMCwgY29tbWEpLnRyaW0oKTtcbiAgbGV0IGZhbGxiYWNrID0gaW5uZXIuc3Vic3RyaW5nKGNvbW1hICsgMSkudHJpbSgpO1xuICByZXR1cm4gY2FsbGJhY2socHJlZml4LCB2YWx1ZSwgZmFsbGJhY2ssIHN1ZmZpeCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEVsZW1lbnRDbGFzc1JhdyhlbGVtZW50LCB2YWx1ZSkge1xuICAvLyB1c2UgbmF0aXZlIHNldEF0dHJpYnV0ZSBwcm92aWRlZCBieSBTaGFkeURPTSB3aGVuIHNldEF0dHJpYnV0ZSBpcyBwYXRjaGVkXG4gIGlmIChuYXRpdmVTaGFkb3cpIHtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCB2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgd2luZG93WydTaGFkeURPTSddWyduYXRpdmVNZXRob2RzJ11bJ3NldEF0dHJpYnV0ZSddLmNhbGwoZWxlbWVudCwgJ2NsYXNzJywgdmFsdWUpO1xuICB9XG59XG5cbi8qKlxuICogQHR5cGUge2Z1bmN0aW9uKCopOip9XG4gKi9cbmV4cG9ydCBjb25zdCB3cmFwID0gd2luZG93WydTaGFkeURPTSddICYmIHdpbmRvd1snU2hhZHlET00nXVsnd3JhcCddIHx8ICgobm9kZSkgPT4gbm9kZSk7XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50IHwge2lzOiBzdHJpbmcsIGV4dGVuZHM6IHN0cmluZ319IGVsZW1lbnRcbiAqIEByZXR1cm4ge3tpczogc3RyaW5nLCB0eXBlRXh0ZW5zaW9uOiBzdHJpbmd9fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SXNFeHRlbmRzKGVsZW1lbnQpIHtcbiAgbGV0IGxvY2FsTmFtZSA9IGVsZW1lbnRbJ2xvY2FsTmFtZSddO1xuICBsZXQgaXMgPSAnJywgdHlwZUV4dGVuc2lvbiA9ICcnO1xuICAvKlxuICBOT1RFOiB0ZWNobmljYWxseSwgdGhpcyBjYW4gYmUgd3JvbmcgZm9yIGNlcnRhaW4gc3ZnIGVsZW1lbnRzXG4gIHdpdGggYC1gIGluIHRoZSBuYW1lIGxpa2UgYDxmb250LWZhY2U+YFxuICAqL1xuICBpZiAobG9jYWxOYW1lKSB7XG4gICAgaWYgKGxvY2FsTmFtZS5pbmRleE9mKCctJykgPiAtMSkge1xuICAgICAgaXMgPSBsb2NhbE5hbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHR5cGVFeHRlbnNpb24gPSBsb2NhbE5hbWU7XG4gICAgICBpcyA9IChlbGVtZW50LmdldEF0dHJpYnV0ZSAmJiBlbGVtZW50LmdldEF0dHJpYnV0ZSgnaXMnKSkgfHwgJyc7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlzID0gLyoqIEB0eXBlIHs/fSAqLyhlbGVtZW50KS5pcztcbiAgICB0eXBlRXh0ZW5zaW9uID0gLyoqIEB0eXBlIHs/fSAqLyhlbGVtZW50KS5leHRlbmRzO1xuICB9XG4gIHJldHVybiB7aXMsIHR5cGVFeHRlbnNpb259O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudHxEb2N1bWVudEZyYWdtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnYXRoZXJTdHlsZVRleHQoZWxlbWVudCkge1xuICAvKiogQHR5cGUgeyFBcnJheTxzdHJpbmc+fSAqL1xuICBjb25zdCBzdHlsZVRleHRQYXJ0cyA9IFtdO1xuICBjb25zdCBzdHlsZXMgPSAvKiogQHR5cGUgeyFOb2RlTGlzdDwhSFRNTFN0eWxlRWxlbWVudD59ICovKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc3R5bGUnKSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgc3R5bGUgPSBzdHlsZXNbaV07XG4gICAgaWYgKGlzVW5zY29wZWRTdHlsZShzdHlsZSkpIHtcbiAgICAgIGlmICghbmF0aXZlU2hhZG93KSB7XG4gICAgICAgIHByb2Nlc3NVbnNjb3BlZFN0eWxlKHN0eWxlKTtcbiAgICAgICAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlVGV4dFBhcnRzLnB1c2goc3R5bGUudGV4dENvbnRlbnQpO1xuICAgICAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHlsZVRleHRQYXJ0cy5qb2luKCcnKS50cmltKCk7XG59XG5cbi8qKlxuICogU3BsaXQgYSBzZWxlY3RvciBzZXBhcmF0ZWQgYnkgY29tbWFzIGludG8gYW4gYXJyYXkgaW4gYSBzbWFydCB3YXlcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvclxuICogQHJldHVybiB7IUFycmF5PHN0cmluZz59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzcGxpdFNlbGVjdG9yTGlzdChzZWxlY3Rvcikge1xuICBjb25zdCBwYXJ0cyA9IFtdO1xuICBsZXQgcGFydCA9ICcnO1xuICBmb3IgKGxldCBpID0gMDsgaSA+PSAwICYmIGkgPCBzZWxlY3Rvci5sZW5ndGg7IGkrKykge1xuICAgIC8vIEEgc2VsZWN0b3Igd2l0aCBwYXJlbnRoZXNlcyB3aWxsIGJlIG9uZSBjb21wbGV0ZSBwYXJ0XG4gICAgaWYgKHNlbGVjdG9yW2ldID09PSAnKCcpIHtcbiAgICAgIC8vIGZpbmQgdGhlIG1hdGNoaW5nIHBhcmVuXG4gICAgICBjb25zdCBlbmQgPSBmaW5kTWF0Y2hpbmdQYXJlbihzZWxlY3RvciwgaSk7XG4gICAgICAvLyBwdXNoIHRoZSBwYXJlbiBibG9jayBpbnRvIHRoZSBwYXJ0XG4gICAgICBwYXJ0ICs9IHNlbGVjdG9yLnNsaWNlKGksIGVuZCArIDEpO1xuICAgICAgLy8gbW92ZSB0aGUgaW5kZXggdG8gYWZ0ZXIgdGhlIHBhcmVuIGJsb2NrXG4gICAgICBpID0gZW5kO1xuICAgIH0gZWxzZSBpZiAoc2VsZWN0b3JbaV0gPT09ICcsJykge1xuICAgICAgcGFydHMucHVzaChwYXJ0KTtcbiAgICAgIHBhcnQgPSAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgcGFydCArPSBzZWxlY3RvcltpXTtcbiAgICB9XG4gIH1cbiAgLy8gY2F0Y2ggYW55IHBpZWNlcyBhZnRlciB0aGUgbGFzdCBjb21tYVxuICBpZiAocGFydCkge1xuICAgIHBhcnRzLnB1c2gocGFydCk7XG4gIH1cbiAgcmV0dXJuIHBhcnRzO1xufVxuXG5jb25zdCBDU1NfQlVJTERfQVRUUiA9ICdjc3MtYnVpbGQnO1xuXG4vKipcbiAqIFJldHVybiB0aGUgcG9seW1lci1jc3MtYnVpbGQgXCJidWlsZCB0eXBlXCIgYXBwbGllZCB0byB0aGlzIGVsZW1lbnRcbiAqXG4gKiBAcGFyYW0geyFIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7c3RyaW5nfSBDYW4gYmUgXCJcIiwgXCJzaGFkeVwiLCBvciBcInNoYWRvd1wiXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDc3NCdWlsZChlbGVtZW50KSB7XG4gIGlmIChjc3NCdWlsZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyhjc3NCdWlsZCk7XG4gIH1cbiAgaWYgKGVsZW1lbnQuX19jc3NCdWlsZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gdHJ5IGF0dHJpYnV0ZSBmaXJzdCwgYXMgaXQgaXMgdGhlIGNvbW1vbiBjYXNlXG4gICAgY29uc3QgYXR0clZhbHVlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoQ1NTX0JVSUxEX0FUVFIpO1xuICAgIGlmIChhdHRyVmFsdWUpIHtcbiAgICAgIGVsZW1lbnQuX19jc3NCdWlsZCA9IGF0dHJWYWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgYnVpbGRDb21tZW50ID0gZ2V0QnVpbGRDb21tZW50KGVsZW1lbnQpO1xuICAgICAgaWYgKGJ1aWxkQ29tbWVudCAhPT0gJycpIHtcbiAgICAgICAgLy8gcmVtb3ZlIGJ1aWxkIGNvbW1lbnQgc28gaXQgaXMgbm90IG5lZWRsZXNzbHkgY29waWVkIGludG8gZXZlcnkgZWxlbWVudCBpbnN0YW5jZVxuICAgICAgICByZW1vdmVCdWlsZENvbW1lbnQoZWxlbWVudCk7XG4gICAgICB9XG4gICAgICBlbGVtZW50Ll9fY3NzQnVpbGQgPSBidWlsZENvbW1lbnQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBlbGVtZW50Ll9fY3NzQnVpbGQgfHwgJyc7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIGVsZW1lbnQsIGVpdGhlciBhIDx0ZW1wbGF0ZT4gb3IgPHN0eWxlPiwgaGFzIGJlZW4gcHJvY2Vzc2VkXG4gKiBieSBwb2x5bWVyLWNzcy1idWlsZC5cbiAqXG4gKiBJZiBzbywgdGhlbiB3ZSBjYW4gbWFrZSBhIG51bWJlciBvZiBvcHRpbWl6YXRpb25zOlxuICogLSBwb2x5bWVyLWNzcy1idWlsZCB3aWxsIGRlY29tcG9zZSBtaXhpbnMgaW50byBpbmRpdmlkdWFsIENTUyBDdXN0b20gUHJvcGVydGllcyxcbiAqIHNvIHRoZSBBcHBseVNoaW0gY2FuIGJlIHNraXBwZWQgZW50aXJlbHkuXG4gKiAtIFVuZGVyIG5hdGl2ZSBTaGFkb3dET00sIHRoZSBzdHlsZSB0ZXh0IGNhbiBqdXN0IGJlIGNvcGllZCBpbnRvIGVhY2ggaW5zdGFuY2VcbiAqIHdpdGhvdXQgbW9kaWZpY2F0aW9uXG4gKiAtIElmIHRoZSBidWlsZCBpcyBcInNoYWR5XCIgYW5kIFNoYWR5RE9NIGlzIGluIHVzZSwgdGhlIHN0eWxpbmcgZG9lcyBub3QgbmVlZFxuICogc2NvcGluZyBiZXlvbmQgdGhlIHNoaW1taW5nIG9mIENTUyBDdXN0b20gUHJvcGVydGllc1xuICpcbiAqIEBwYXJhbSB7IUhUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gZWxlbWVudEhhc0J1aWx0Q3NzKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGdldENzc0J1aWxkKGVsZW1lbnQpICE9PSAnJztcbn1cblxuLyoqXG4gKiBGb3IgdGVtcGxhdGVzIG1hZGUgd2l0aCB0YWdnZWQgdGVtcGxhdGUgbGl0ZXJhbHMsIHBvbHltZXItY3NzLWJ1aWxkIHdpbGxcbiAqIGluc2VydCBhIGNvbW1lbnQgb2YgdGhlIGZvcm0gYDwhLS1jc3MtYnVpbGQ6c2hhZG93LS0+YFxuICpcbiAqIEBwYXJhbSB7IUhUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRCdWlsZENvbW1lbnQoZWxlbWVudCkge1xuICBjb25zdCBidWlsZENvbW1lbnQgPSBlbGVtZW50LmxvY2FsTmFtZSA9PT0gJ3RlbXBsYXRlJyA/XG4gICAgICAvKiogQHR5cGUgeyFIVE1MVGVtcGxhdGVFbGVtZW50fSAqLyAoZWxlbWVudCkuY29udGVudC5maXJzdENoaWxkIDpcbiAgICAgIGVsZW1lbnQuZmlyc3RDaGlsZDtcbiAgaWYgKGJ1aWxkQ29tbWVudCBpbnN0YW5jZW9mIENvbW1lbnQpIHtcbiAgICBjb25zdCBjb21tZW50UGFydHMgPSBidWlsZENvbW1lbnQudGV4dENvbnRlbnQudHJpbSgpLnNwbGl0KCc6Jyk7XG4gICAgaWYgKGNvbW1lbnRQYXJ0c1swXSA9PT0gQ1NTX0JVSUxEX0FUVFIpIHtcbiAgICAgIHJldHVybiBjb21tZW50UGFydHNbMV07XG4gICAgfVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgY3NzIGJ1aWxkIHN0YXR1cyBpcyBvcHRpbWFsLCBhbmQgZG8gbm8gdW5uZWVkZWQgd29yay5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IGNzc0J1aWxkIENTUyBidWlsZCBzdGF0dXNcbiAqIEByZXR1cm4ge2Jvb2xlYW59IGNzcyBidWlsZCBpcyBvcHRpbWFsIG9yIG5vdFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNPcHRpbWFsQ3NzQnVpbGQoY3NzQnVpbGQgPSAnJykge1xuICAvLyBDU1MgY3VzdG9tIHByb3BlcnR5IHNoaW0gYWx3YXlzIHJlcXVpcmVzIHdvcmtcbiAgaWYgKGNzc0J1aWxkID09PSAnJyB8fCAhbmF0aXZlQ3NzVmFyaWFibGVzKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBuYXRpdmVTaGFkb3cgPyBjc3NCdWlsZCA9PT0gJ3NoYWRvdycgOiBjc3NCdWlsZCA9PT0gJ3NoYWR5Jztcbn1cblxuLyoqXG4gKiBAcGFyYW0geyFIVE1MRWxlbWVudH0gZWxlbWVudFxuICovXG5mdW5jdGlvbiByZW1vdmVCdWlsZENvbW1lbnQoZWxlbWVudCkge1xuICBjb25zdCBidWlsZENvbW1lbnQgPSBlbGVtZW50LmxvY2FsTmFtZSA9PT0gJ3RlbXBsYXRlJyA/XG4gICAgICAvKiogQHR5cGUgeyFIVE1MVGVtcGxhdGVFbGVtZW50fSAqLyAoZWxlbWVudCkuY29udGVudC5maXJzdENoaWxkIDpcbiAgICAgIGVsZW1lbnQuZmlyc3RDaGlsZDtcbiAgYnVpbGRDb21tZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYnVpbGRDb21tZW50KTtcbn1cbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG4vKlxuICogVGhlIGFwcGx5IHNoaW0gc2ltdWxhdGVzIHRoZSBiZWhhdmlvciBvZiBgQGFwcGx5YCBwcm9wb3NlZCBhdFxuICogaHR0cHM6Ly90YWJhdGtpbnMuZ2l0aHViLmlvL3NwZWNzL2Nzcy1hcHBseS1ydWxlLy5cbiAqIFRoZSBhcHByb2FjaCBpcyB0byBjb252ZXJ0IGEgcHJvcGVydHkgbGlrZSB0aGlzOlxuICpcbiAqICAgIC0tZm9vOiB7Y29sb3I6IHJlZDsgYmFja2dyb3VuZDogYmx1ZTt9XG4gKlxuICogdG8gdGhpczpcbiAqXG4gKiAgICAtLWZvb18tX2NvbG9yOiByZWQ7XG4gKiAgICAtLWZvb18tX2JhY2tncm91bmQ6IGJsdWU7XG4gKlxuICogVGhlbiB3aGVyZSBgQGFwcGx5IC0tZm9vYCBpcyB1c2VkLCB0aGF0IGlzIGNvbnZlcnRlZCB0bzpcbiAqXG4gKiAgICBjb2xvcjogdmFyKC0tZm9vXy1fY29sb3IpO1xuICogICAgYmFja2dyb3VuZDogdmFyKC0tZm9vXy1fYmFja2dyb3VuZCk7XG4gKlxuICogVGhpcyBhcHByb2FjaCBnZW5lcmFsbHkgd29ya3MgYnV0IHRoZXJlIGFyZSBzb21lIGlzc3VlcyBhbmQgbGltaXRhdGlvbnMuXG4gKiBDb25zaWRlciwgZm9yIGV4YW1wbGUsIHRoYXQgc29tZXdoZXJlICpiZXR3ZWVuKiB3aGVyZSBgLS1mb29gIGlzIHNldCBhbmQgdXNlZCxcbiAqIGFub3RoZXIgZWxlbWVudCBzZXRzIGl0IHRvOlxuICpcbiAqICAgIC0tZm9vOiB7IGJvcmRlcjogMnB4IHNvbGlkIHJlZDsgfVxuICpcbiAqIFdlIG11c3Qgbm93IGVuc3VyZSB0aGF0IHRoZSBjb2xvciBhbmQgYmFja2dyb3VuZCBmcm9tIHRoZSBwcmV2aW91cyBzZXR0aW5nXG4gKiBkbyBub3QgYXBwbHkuIFRoaXMgaXMgYWNjb21wbGlzaGVkIGJ5IGNoYW5naW5nIHRoZSBwcm9wZXJ0eSBzZXQgdG8gdGhpczpcbiAqXG4gKiAgICAtLWZvb18tX2JvcmRlcjogMnB4IHNvbGlkIHJlZDtcbiAqICAgIC0tZm9vXy1fY29sb3I6IGluaXRpYWw7XG4gKiAgICAtLWZvb18tX2JhY2tncm91bmQ6IGluaXRpYWw7XG4gKlxuICogVGhpcyB3b3JrcyBidXQgaW50cm9kdWNlcyBvbmUgbmV3IGlzc3VlLlxuICogQ29uc2lkZXIgdGhpcyBzZXR1cCBhdCB0aGUgcG9pbnQgd2hlcmUgdGhlIGBAYXBwbHlgIGlzIHVzZWQ6XG4gKlxuICogICAgYmFja2dyb3VuZDogb3JhbmdlO1xuICogICAgYEBhcHBseWAgLS1mb287XG4gKlxuICogSW4gdGhpcyBjYXNlIHRoZSBiYWNrZ3JvdW5kIHdpbGwgYmUgdW5zZXQgKGluaXRpYWwpIHJhdGhlciB0aGFuIHRoZSBkZXNpcmVkXG4gKiBgb3JhbmdlYC4gV2UgYWRkcmVzcyB0aGlzIGJ5IGFsdGVyaW5nIHRoZSBwcm9wZXJ0eSBzZXQgdG8gdXNlIGEgZmFsbGJhY2tcbiAqIHZhbHVlIGxpa2UgdGhpczpcbiAqXG4gKiAgICBjb2xvcjogdmFyKC0tZm9vXy1fY29sb3IpO1xuICogICAgYmFja2dyb3VuZDogdmFyKC0tZm9vXy1fYmFja2dyb3VuZCwgb3JhbmdlKTtcbiAqICAgIGJvcmRlcjogdmFyKC0tZm9vXy1fYm9yZGVyKTtcbiAqXG4gKiBOb3RlIHRoYXQgdGhlIGRlZmF1bHQgaXMgcmV0YWluZWQgaW4gdGhlIHByb3BlcnR5IHNldCBhbmQgdGhlIGBiYWNrZ3JvdW5kYCBpc1xuICogdGhlIGRlc2lyZWQgYG9yYW5nZWAuIFRoaXMgbGVhZHMgdXMgdG8gYSBsaW1pdGF0aW9uLlxuICpcbiAqIExpbWl0YXRpb24gMTpcblxuICogT25seSBwcm9wZXJ0aWVzIGluIHRoZSBydWxlIHdoZXJlIHRoZSBgQGFwcGx5YFxuICogaXMgdXNlZCBhcmUgY29uc2lkZXJlZCBhcyBkZWZhdWx0IHZhbHVlcy5cbiAqIElmIGFub3RoZXIgcnVsZSBtYXRjaGVzIHRoZSBlbGVtZW50IGFuZCBzZXRzIGBiYWNrZ3JvdW5kYCB3aXRoXG4gKiBsZXNzIHNwZWNpZmljaXR5IHRoYW4gdGhlIHJ1bGUgaW4gd2hpY2ggYEBhcHBseWAgYXBwZWFycyxcbiAqIHRoZSBgYmFja2dyb3VuZGAgd2lsbCBub3QgYmUgc2V0LlxuICpcbiAqIExpbWl0YXRpb24gMjpcbiAqXG4gKiBXaGVuIHVzaW5nIFBvbHltZXIncyBgdXBkYXRlU3R5bGVzYCBhcGksIG5ldyBwcm9wZXJ0aWVzIG1heSBub3QgYmUgc2V0IGZvclxuICogYEBhcHBseWAgcHJvcGVydGllcy5cblxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQge2ZvckVhY2hSdWxlLCBwcm9jZXNzVmFyaWFibGVBbmRGYWxsYmFjaywgcnVsZXNGb3JTdHlsZSwgdG9Dc3NUZXh0LCBnYXRoZXJTdHlsZVRleHR9IGZyb20gJy4vc3R5bGUtdXRpbC5qcyc7XG5pbXBvcnQge01JWElOX01BVENILCBWQVJfQVNTSUdOfSBmcm9tICcuL2NvbW1vbi1yZWdleC5qcyc7XG5pbXBvcnQge2RldGVjdE1peGlufSBmcm9tICcuL2NvbW1vbi11dGlscy5qcyc7XG5pbXBvcnQge1N0eWxlTm9kZX0gZnJvbSAnLi9jc3MtcGFyc2UuanMnOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbmNvbnN0IEFQUExZX05BTUVfQ0xFQU4gPSAvO1xccyovbTtcbmNvbnN0IElOSVRJQUxfSU5IRVJJVCA9IC9eXFxzKihpbml0aWFsKXwoaW5oZXJpdClcXHMqJC87XG5jb25zdCBJTVBPUlRBTlQgPSAvXFxzKiFpbXBvcnRhbnQvO1xuXG4vLyBzZXBhcmF0b3IgdXNlZCBiZXR3ZWVuIG1peGluLW5hbWUgYW5kIG1peGluLXByb3BlcnR5LW5hbWUgd2hlbiBwcm9kdWNpbmcgcHJvcGVydGllc1xuLy8gTk9URTogcGxhaW4gJy0nIG1heSBjYXVzZSBjb2xsaXNpb25zIGluIHVzZXIgc3R5bGVzXG5jb25zdCBNSVhJTl9WQVJfU0VQID0gJ18tXyc7XG5cbi8qKlxuICogQHR5cGVkZWYgeyFPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fVxuICovXG5sZXQgUHJvcGVydHlFbnRyeTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4vKipcbiAqIEB0eXBlZGVmIHshT2JqZWN0PHN0cmluZywgYm9vbGVhbj59XG4gKi9cbmxldCBEZXBlbmRhbnRzRW50cnk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuLyoqIEB0eXBlZGVmIHt7XG4gKiAgICBwcm9wZXJ0aWVzOiBQcm9wZXJ0eUVudHJ5LFxuICogICAgZGVwZW5kYW50czogRGVwZW5kYW50c0VudHJ5XG4gKiB9fVxuICovXG5sZXQgTWl4aW5NYXBFbnRyeTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4vLyBtYXAgb2YgbWl4aW4gdG8gcHJvcGVydHkgbmFtZXNcbi8vIC0tZm9vOiB7Ym9yZGVyOiAycHh9IC0+IHtwcm9wZXJ0aWVzOiB7KC0tZm9vLCBbJ2JvcmRlciddKX0sIGRlcGVuZGFudHM6IHsnZWxlbWVudC1uYW1lJzogcHJvdG99fVxuY2xhc3MgTWl4aW5NYXAge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvKiogQHR5cGUgeyFPYmplY3Q8c3RyaW5nLCAhTWl4aW5NYXBFbnRyeT59ICovXG4gICAgdGhpcy5fbWFwID0ge307XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7IVByb3BlcnR5RW50cnl9IHByb3BzXG4gICAqL1xuICBzZXQobmFtZSwgcHJvcHMpIHtcbiAgICBuYW1lID0gbmFtZS50cmltKCk7XG4gICAgdGhpcy5fbWFwW25hbWVdID0ge1xuICAgICAgcHJvcGVydGllczogcHJvcHMsXG4gICAgICBkZXBlbmRhbnRzOiB7fVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHJldHVybiB7TWl4aW5NYXBFbnRyeX1cbiAgICovXG4gIGdldChuYW1lKSB7XG4gICAgbmFtZSA9IG5hbWUudHJpbSgpO1xuICAgIHJldHVybiB0aGlzLl9tYXBbbmFtZV0gfHwgbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIENhbGxiYWNrIGZvciB3aGVuIGFuIGVsZW1lbnQgaXMgbWFya2VkIGludmFsaWRcbiAqIEB0eXBlIHs/ZnVuY3Rpb24oc3RyaW5nKX1cbiAqL1xubGV0IGludmFsaWRDYWxsYmFjayA9IG51bGw7XG5cbi8qKiBAdW5yZXN0cmljdGVkICovXG5jbGFzcyBBcHBseVNoaW0ge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvKiogQHR5cGUgez9zdHJpbmd9ICovXG4gICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSBudWxsO1xuICAgIC8qKiBAdHlwZSB7SFRNTE1ldGFFbGVtZW50fSAqL1xuICAgIHRoaXMuX21lYXN1cmVFbGVtZW50ID0gbnVsbDtcbiAgICB0aGlzLl9tYXAgPSBuZXcgTWl4aW5NYXAoKTtcbiAgfVxuICAvKipcbiAgICogcmV0dXJuIHRydWUgaWYgYGNzc1RleHRgIGNvbnRhaW5zIGEgbWl4aW4gZGVmaW5pdGlvbiBvciBjb25zdW1wdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gY3NzVGV4dFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgZGV0ZWN0TWl4aW4oY3NzVGV4dCkge1xuICAgIHJldHVybiBkZXRlY3RNaXhpbihjc3NUZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHYXRoZXIgc3R5bGVzIGludG8gb25lIHN0eWxlIGZvciBlYXNpZXIgcHJvY2Vzc2luZ1xuICAgKiBAcGFyYW0geyFIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZVxuICAgKiBAcmV0dXJuIHtIVE1MU3R5bGVFbGVtZW50fVxuICAgKi9cbiAgZ2F0aGVyU3R5bGVzKHRlbXBsYXRlKSB7XG4gICAgY29uc3Qgc3R5bGVUZXh0ID0gZ2F0aGVyU3R5bGVUZXh0KHRlbXBsYXRlLmNvbnRlbnQpO1xuICAgIGlmIChzdHlsZVRleHQpIHtcbiAgICAgIGNvbnN0IHN0eWxlID0gLyoqIEB0eXBlIHshSFRNTFN0eWxlRWxlbWVudH0gKi8oZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKSk7XG4gICAgICBzdHlsZS50ZXh0Q29udGVudCA9IHN0eWxlVGV4dDtcbiAgICAgIHRlbXBsYXRlLmNvbnRlbnQuaW5zZXJ0QmVmb3JlKHN0eWxlLCB0ZW1wbGF0ZS5jb250ZW50LmZpcnN0Q2hpbGQpO1xuICAgICAgcmV0dXJuIHN0eWxlO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGVsZW1lbnROYW1lXG4gICAqIEByZXR1cm4ge1N0eWxlTm9kZX1cbiAgICovXG4gIHRyYW5zZm9ybVRlbXBsYXRlKHRlbXBsYXRlLCBlbGVtZW50TmFtZSkge1xuICAgIGlmICh0ZW1wbGF0ZS5fZ2F0aGVyZWRTdHlsZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0ZW1wbGF0ZS5fZ2F0aGVyZWRTdHlsZSA9IHRoaXMuZ2F0aGVyU3R5bGVzKHRlbXBsYXRlKTtcbiAgICB9XG4gICAgLyoqIEB0eXBlIHtIVE1MU3R5bGVFbGVtZW50fSAqL1xuICAgIGNvbnN0IHN0eWxlID0gdGVtcGxhdGUuX2dhdGhlcmVkU3R5bGU7XG4gICAgcmV0dXJuIHN0eWxlID8gdGhpcy50cmFuc2Zvcm1TdHlsZShzdHlsZSwgZWxlbWVudE5hbWUpIDogbnVsbDtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHshSFRNTFN0eWxlRWxlbWVudH0gc3R5bGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGVsZW1lbnROYW1lXG4gICAqIEByZXR1cm4ge1N0eWxlTm9kZX1cbiAgICovXG4gIHRyYW5zZm9ybVN0eWxlKHN0eWxlLCBlbGVtZW50TmFtZSA9ICcnKSB7XG4gICAgbGV0IGFzdCA9IHJ1bGVzRm9yU3R5bGUoc3R5bGUpO1xuICAgIHRoaXMudHJhbnNmb3JtUnVsZXMoYXN0LCBlbGVtZW50TmFtZSk7XG4gICAgc3R5bGUudGV4dENvbnRlbnQgPSB0b0Nzc1RleHQoYXN0KTtcbiAgICByZXR1cm4gYXN0O1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0geyFIVE1MU3R5bGVFbGVtZW50fSBzdHlsZVxuICAgKiBAcmV0dXJuIHtTdHlsZU5vZGV9XG4gICAqL1xuICB0cmFuc2Zvcm1DdXN0b21TdHlsZShzdHlsZSkge1xuICAgIGxldCBhc3QgPSBydWxlc0ZvclN0eWxlKHN0eWxlKTtcbiAgICBmb3JFYWNoUnVsZShhc3QsIChydWxlKSA9PiB7XG4gICAgICBpZiAocnVsZVsnc2VsZWN0b3InXSA9PT0gJzpyb290Jykge1xuICAgICAgICBydWxlWydzZWxlY3RvciddID0gJ2h0bWwnO1xuICAgICAgfVxuICAgICAgdGhpcy50cmFuc2Zvcm1SdWxlKHJ1bGUpO1xuICAgIH0pXG4gICAgc3R5bGUudGV4dENvbnRlbnQgPSB0b0Nzc1RleHQoYXN0KTtcbiAgICByZXR1cm4gYXN0O1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1N0eWxlTm9kZX0gcnVsZXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IGVsZW1lbnROYW1lXG4gICAqL1xuICB0cmFuc2Zvcm1SdWxlcyhydWxlcywgZWxlbWVudE5hbWUpIHtcbiAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IGVsZW1lbnROYW1lO1xuICAgIGZvckVhY2hSdWxlKHJ1bGVzLCAocikgPT4ge1xuICAgICAgdGhpcy50cmFuc2Zvcm1SdWxlKHIpO1xuICAgIH0pO1xuICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gbnVsbDtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHshU3R5bGVOb2RlfSBydWxlXG4gICAqL1xuICB0cmFuc2Zvcm1SdWxlKHJ1bGUpIHtcbiAgICBydWxlWydjc3NUZXh0J10gPSB0aGlzLnRyYW5zZm9ybUNzc1RleHQocnVsZVsncGFyc2VkQ3NzVGV4dCddLCBydWxlKTtcbiAgICAvLyA6cm9vdCB3YXMgb25seSB1c2VkIGZvciB2YXJpYWJsZSBhc3NpZ25tZW50IGluIHByb3BlcnR5IHNoaW0sXG4gICAgLy8gYnV0IGdlbmVyYXRlcyBpbnZhbGlkIHNlbGVjdG9ycyB3aXRoIHJlYWwgcHJvcGVydGllcy5cbiAgICAvLyByZXBsYWNlIHdpdGggYDpob3N0ID4gKmAsIHdoaWNoIHNlcnZlcyB0aGUgc2FtZSBlZmZlY3RcbiAgICBpZiAocnVsZVsnc2VsZWN0b3InXSA9PT0gJzpyb290Jykge1xuICAgICAgcnVsZVsnc2VsZWN0b3InXSA9ICc6aG9zdCA+IConO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNzc1RleHRcbiAgICogQHBhcmFtIHshU3R5bGVOb2RlfSBydWxlXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRyYW5zZm9ybUNzc1RleHQoY3NzVGV4dCwgcnVsZSkge1xuICAgIC8vIHByb2R1Y2UgdmFyaWFibGVzXG4gICAgY3NzVGV4dCA9IGNzc1RleHQucmVwbGFjZShWQVJfQVNTSUdOLCAobWF0Y2hUZXh0LCBwcm9wZXJ0eU5hbWUsIHZhbHVlUHJvcGVydHksIHZhbHVlTWl4aW4pID0+XG4gICAgICB0aGlzLl9wcm9kdWNlQ3NzUHJvcGVydGllcyhtYXRjaFRleHQsIHByb3BlcnR5TmFtZSwgdmFsdWVQcm9wZXJ0eSwgdmFsdWVNaXhpbiwgcnVsZSkpO1xuICAgIC8vIGNvbnN1bWUgbWl4aW5zXG4gICAgcmV0dXJuIHRoaXMuX2NvbnN1bWVDc3NQcm9wZXJ0aWVzKGNzc1RleHQsIHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHlcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgX2dldEluaXRpYWxWYWx1ZUZvclByb3BlcnR5KHByb3BlcnR5KSB7XG4gICAgaWYgKCF0aGlzLl9tZWFzdXJlRWxlbWVudCkge1xuICAgICAgdGhpcy5fbWVhc3VyZUVsZW1lbnQgPSAvKiogQHR5cGUge0hUTUxNZXRhRWxlbWVudH0gKi8oZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbWV0YScpKTtcbiAgICAgIHRoaXMuX21lYXN1cmVFbGVtZW50LnNldEF0dHJpYnV0ZSgnYXBwbHktc2hpbS1tZWFzdXJlJywgJycpO1xuICAgICAgdGhpcy5fbWVhc3VyZUVsZW1lbnQuc3R5bGUuYWxsID0gJ2luaXRpYWwnO1xuICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh0aGlzLl9tZWFzdXJlRWxlbWVudCk7XG4gICAgfVxuICAgIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLl9tZWFzdXJlRWxlbWVudCkuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSk7XG4gIH1cbiAgLyoqXG4gICAqIFdhbGsgb3ZlciBhbGwgcnVsZXMgYmVmb3JlIHRoaXMgcnVsZSB0byBmaW5kIGZhbGxiYWNrcyBmb3IgbWl4aW5zXG4gICAqXG4gICAqIEBwYXJhbSB7IVN0eWxlTm9kZX0gc3RhcnRSdWxlXG4gICAqIEByZXR1cm4geyFPYmplY3R9XG4gICAqL1xuICBfZmFsbGJhY2tzRnJvbVByZXZpb3VzUnVsZXMoc3RhcnRSdWxlKSB7XG4gICAgLy8gZmluZCB0aGUgXCJ0b3BcIiBydWxlXG4gICAgbGV0IHRvcFJ1bGUgPSBzdGFydFJ1bGU7XG4gICAgd2hpbGUgKHRvcFJ1bGVbJ3BhcmVudCddKSB7XG4gICAgICB0b3BSdWxlID0gdG9wUnVsZVsncGFyZW50J107XG4gICAgfVxuICAgIGNvbnN0IGZhbGxiYWNrcyA9IHt9O1xuICAgIGxldCBzZWVuU3RhcnRSdWxlID0gZmFsc2U7XG4gICAgZm9yRWFjaFJ1bGUodG9wUnVsZSwgKHIpID0+IHtcbiAgICAgIC8vIHN0b3Agd2hlbiB3ZSBoaXQgdGhlIGlucHV0IHJ1bGVcbiAgICAgIHNlZW5TdGFydFJ1bGUgPSBzZWVuU3RhcnRSdWxlIHx8IHIgPT09IHN0YXJ0UnVsZTtcbiAgICAgIGlmIChzZWVuU3RhcnRSdWxlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIE5PVEU6IE9ubHkgbWF0Y2hpbmcgc2VsZWN0b3JzIGFyZSBcInNhZmVcIiBmb3IgdGhpcyBmYWxsYmFjayBwcm9jZXNzaW5nXG4gICAgICAvLyBJdCB3b3VsZCBiZSBwcm9oaWJpdGl2ZSB0byBydW4gYG1hdGNoZXNTZWxlY3RvcigpYCBvbiBlYWNoIHNlbGVjdG9yLFxuICAgICAgLy8gc28gd2UgY2hlYXQgYW5kIG9ubHkgY2hlY2sgaWYgdGhlIHNhbWUgc2VsZWN0b3Igc3RyaW5nIGlzIHVzZWQsIHdoaWNoXG4gICAgICAvLyBndWFyYW50ZWVzIHRoaW5ncyBsaWtlIHNwZWNpZmljaXR5IG1hdGNoaW5nXG4gICAgICBpZiAoclsnc2VsZWN0b3InXSA9PT0gc3RhcnRSdWxlWydzZWxlY3RvciddKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oZmFsbGJhY2tzLCB0aGlzLl9jc3NUZXh0VG9NYXAoclsncGFyc2VkQ3NzVGV4dCddKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGZhbGxiYWNrcztcbiAgfVxuICAvKipcbiAgICogcmVwbGFjZSBtaXhpbiBjb25zdW1wdGlvbiB3aXRoIHZhcmlhYmxlIGNvbnN1bXB0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG4gICAqIEBwYXJhbSB7IVN0eWxlTm9kZT19IHJ1bGVcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgX2NvbnN1bWVDc3NQcm9wZXJ0aWVzKHRleHQsIHJ1bGUpIHtcbiAgICAvKiogQHR5cGUge0FycmF5fSAqL1xuICAgIGxldCBtID0gbnVsbDtcbiAgICAvLyBsb29wIG92ZXIgdGV4dCB1bnRpbCBhbGwgbWl4aW5zIHdpdGggZGVmaW50aW9ucyBoYXZlIGJlZW4gYXBwbGllZFxuICAgIHdoaWxlKChtID0gTUlYSU5fTUFUQ0guZXhlYyh0ZXh0KSkpIHtcbiAgICAgIGxldCBtYXRjaFRleHQgPSBtWzBdO1xuICAgICAgbGV0IG1peGluTmFtZSA9IG1bMV07XG4gICAgICBsZXQgaWR4ID0gbS5pbmRleDtcbiAgICAgIC8vIGNvbGxlY3QgcHJvcGVydGllcyBiZWZvcmUgYXBwbHkgdG8gYmUgXCJkZWZhdWx0c1wiIGlmIG1peGluIG1pZ2h0IG92ZXJyaWRlIHRoZW1cbiAgICAgIC8vIG1hdGNoIGluY2x1ZGVzIGEgXCJwcmVmaXhcIiwgc28gZmluZCB0aGUgc3RhcnQgYW5kIGVuZCBwb3NpdGlvbnMgb2YgQGFwcGx5XG4gICAgICBsZXQgYXBwbHlQb3MgPSBpZHggKyBtYXRjaFRleHQuaW5kZXhPZignQGFwcGx5Jyk7XG4gICAgICBsZXQgYWZ0ZXJBcHBseVBvcyA9IGlkeCArIG1hdGNoVGV4dC5sZW5ndGg7XG4gICAgICAvLyBmaW5kIHByb3BzIGRlZmluZWQgYmVmb3JlIHRoaXMgQGFwcGx5XG4gICAgICBsZXQgdGV4dEJlZm9yZUFwcGx5ID0gdGV4dC5zbGljZSgwLCBhcHBseVBvcyk7XG4gICAgICBsZXQgdGV4dEFmdGVyQXBwbHkgPSB0ZXh0LnNsaWNlKGFmdGVyQXBwbHlQb3MpO1xuICAgICAgbGV0IGRlZmF1bHRzID0gcnVsZSA/IHRoaXMuX2ZhbGxiYWNrc0Zyb21QcmV2aW91c1J1bGVzKHJ1bGUpIDoge307XG4gICAgICBPYmplY3QuYXNzaWduKGRlZmF1bHRzLCB0aGlzLl9jc3NUZXh0VG9NYXAodGV4dEJlZm9yZUFwcGx5KSk7XG4gICAgICBsZXQgcmVwbGFjZW1lbnQgPSB0aGlzLl9hdEFwcGx5VG9Dc3NQcm9wZXJ0aWVzKG1peGluTmFtZSwgZGVmYXVsdHMpO1xuICAgICAgLy8gdXNlIHJlZ2V4IG1hdGNoIHBvc2l0aW9uIHRvIHJlcGxhY2UgbWl4aW4sIGtlZXAgbGluZWFyIHByb2Nlc3NpbmcgdGltZVxuICAgICAgdGV4dCA9IGAke3RleHRCZWZvcmVBcHBseX0ke3JlcGxhY2VtZW50fSR7dGV4dEFmdGVyQXBwbHl9YDtcbiAgICAgIC8vIG1vdmUgcmVnZXggc2VhcmNoIHRvIF9hZnRlcl8gcmVwbGFjZW1lbnRcbiAgICAgIE1JWElOX01BVENILmxhc3RJbmRleCA9IGlkeCArIHJlcGxhY2VtZW50Lmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cbiAgLyoqXG4gICAqIHByb2R1Y2UgdmFyaWFibGUgY29uc3VtcHRpb24gYXQgdGhlIHNpdGUgb2YgbWl4aW4gY29uc3VtcHRpb25cbiAgICogYEBhcHBseWAgLS1mb287IC0+IGZvciBhbGwgcHJvcHMgKCR7cHJvcG5hbWV9OiB2YXIoLS1mb29fLV8ke3Byb3BuYW1lfSwgJHtmYWxsYmFja1twcm9wbmFtZV19fSkpXG4gICAqIEV4YW1wbGU6XG4gICAqICBib3JkZXI6IHZhcigtLWZvb18tX2JvcmRlcik7IHBhZGRpbmc6IHZhcigtLWZvb18tX3BhZGRpbmcsIDJweClcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1peGluTmFtZVxuICAgKiBAcGFyYW0ge09iamVjdH0gZmFsbGJhY2tzXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIF9hdEFwcGx5VG9Dc3NQcm9wZXJ0aWVzKG1peGluTmFtZSwgZmFsbGJhY2tzKSB7XG4gICAgbWl4aW5OYW1lID0gbWl4aW5OYW1lLnJlcGxhY2UoQVBQTFlfTkFNRV9DTEVBTiwgJycpO1xuICAgIGxldCB2YXJzID0gW107XG4gICAgbGV0IG1peGluRW50cnkgPSB0aGlzLl9tYXAuZ2V0KG1peGluTmFtZSk7XG4gICAgLy8gaWYgd2UgZGVwZW5kIG9uIGEgbWl4aW4gYmVmb3JlIGl0IGlzIGNyZWF0ZWRcbiAgICAvLyBtYWtlIGEgc2VudGluZWwgZW50cnkgaW4gdGhlIG1hcCB0byBhZGQgdGhpcyBlbGVtZW50IGFzIGEgZGVwZW5kZW5jeSBmb3Igd2hlbiBpdCBpcyBkZWZpbmVkLlxuICAgIGlmICghbWl4aW5FbnRyeSkge1xuICAgICAgdGhpcy5fbWFwLnNldChtaXhpbk5hbWUsIHt9KTtcbiAgICAgIG1peGluRW50cnkgPSB0aGlzLl9tYXAuZ2V0KG1peGluTmFtZSk7XG4gICAgfVxuICAgIGlmIChtaXhpbkVudHJ5KSB7XG4gICAgICBpZiAodGhpcy5fY3VycmVudEVsZW1lbnQpIHtcbiAgICAgICAgbWl4aW5FbnRyeS5kZXBlbmRhbnRzW3RoaXMuX2N1cnJlbnRFbGVtZW50XSA9IHRydWU7XG4gICAgICB9XG4gICAgICBsZXQgcCwgcGFydHMsIGY7XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0gbWl4aW5FbnRyeS5wcm9wZXJ0aWVzO1xuICAgICAgZm9yIChwIGluIHByb3BlcnRpZXMpIHtcbiAgICAgICAgZiA9IGZhbGxiYWNrcyAmJiBmYWxsYmFja3NbcF07XG4gICAgICAgIHBhcnRzID0gW3AsICc6IHZhcignLCBtaXhpbk5hbWUsIE1JWElOX1ZBUl9TRVAsIHBdO1xuICAgICAgICBpZiAoZikge1xuICAgICAgICAgIHBhcnRzLnB1c2goJywnLCBmLnJlcGxhY2UoSU1QT1JUQU5ULCAnJykpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goJyknKTtcbiAgICAgICAgaWYgKElNUE9SVEFOVC50ZXN0KHByb3BlcnRpZXNbcF0pKSB7XG4gICAgICAgICAgcGFydHMucHVzaCgnICFpbXBvcnRhbnQnKTtcbiAgICAgICAgfVxuICAgICAgICB2YXJzLnB1c2gocGFydHMuam9pbignJykpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFycy5qb2luKCc7ICcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgX3JlcGxhY2VJbml0aWFsT3JJbmhlcml0KHByb3BlcnR5LCB2YWx1ZSkge1xuICAgIGxldCBtYXRjaCA9IElOSVRJQUxfSU5IRVJJVC5leGVjKHZhbHVlKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIGlmIChtYXRjaFsxXSkge1xuICAgICAgICAvLyBpbml0aWFsXG4gICAgICAgIC8vIHJlcGxhY2UgYGluaXRpYWxgIHdpdGggdGhlIGNvbmNyZXRlIGluaXRpYWwgdmFsdWUgZm9yIHRoaXMgcHJvcGVydHlcbiAgICAgICAgdmFsdWUgPSB0aGlzLl9nZXRJbml0aWFsVmFsdWVGb3JQcm9wZXJ0eShwcm9wZXJ0eSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpbmhlcml0XG4gICAgICAgIC8vIHdpdGggdGhpcyBwdXJwb3NmdWxseSBpbGxlZ2FsIHZhbHVlLCB0aGUgdmFyaWFibGUgd2lsbCBiZSBpbnZhbGlkIGF0XG4gICAgICAgIC8vIGNvbXB1dGUgdGltZSAoaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy12YXJpYWJsZXMvI2ludmFsaWQtYXQtY29tcHV0ZWQtdmFsdWUtdGltZSlcbiAgICAgICAgLy8gYW5kIGZvciBpbmhlcml0aW5nIHZhbHVlcywgd2lsbCBiZWhhdmUgc2ltaWxhcmx5XG4gICAgICAgIC8vIHdlIGNhbm5vdCBzdXBwb3J0IHRoZSBzYW1lIGJlaGF2aW9yIGZvciBub24gaW5oZXJpdGluZyB2YWx1ZXMgbGlrZSAnYm9yZGVyJ1xuICAgICAgICB2YWx1ZSA9ICdhcHBseS1zaGltLWluaGVyaXQnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogXCJwYXJzZVwiIGEgbWl4aW4gZGVmaW5pdGlvbiBpbnRvIGEgbWFwIG9mIHByb3BlcnRpZXMgYW5kIHZhbHVlc1xuICAgKiBjc3NUZXh0VG9NYXAoJ2JvcmRlcjogMnB4IHNvbGlkIGJsYWNrJykgLT4gKCdib3JkZXInLCAnMnB4IHNvbGlkIGJsYWNrJylcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAgICogQHBhcmFtIHtib29sZWFuPX0gcmVwbGFjZUluaXRpYWxPckluaGVyaXRcbiAgICogQHJldHVybiB7IU9iamVjdDxzdHJpbmcsIHN0cmluZz59XG4gICAqL1xuICBfY3NzVGV4dFRvTWFwKHRleHQsIHJlcGxhY2VJbml0aWFsT3JJbmhlcml0ID0gZmFsc2UpIHtcbiAgICBsZXQgcHJvcHMgPSB0ZXh0LnNwbGl0KCc7Jyk7XG4gICAgbGV0IHByb3BlcnR5LCB2YWx1ZTtcbiAgICBsZXQgb3V0ID0ge307XG4gICAgZm9yIChsZXQgaSA9IDAsIHAsIHNwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHAgPSBwcm9wc1tpXTtcbiAgICAgIGlmIChwKSB7XG4gICAgICAgIHNwID0gcC5zcGxpdCgnOicpO1xuICAgICAgICAvLyBpZ25vcmUgbGluZXMgdGhhdCBhcmVuJ3QgZGVmaW5pdGlvbnMgbGlrZSBAbWVkaWFcbiAgICAgICAgaWYgKHNwLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBwcm9wZXJ0eSA9IHNwWzBdLnRyaW0oKTtcbiAgICAgICAgICAvLyBzb21lIHByb3BlcnRpZXMgbWF5IGhhdmUgJzonIGluIHRoZSB2YWx1ZSwgbGlrZSBkYXRhIHVybHNcbiAgICAgICAgICB2YWx1ZSA9IHNwLnNsaWNlKDEpLmpvaW4oJzonKTtcbiAgICAgICAgICBpZiAocmVwbGFjZUluaXRpYWxPckluaGVyaXQpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdGhpcy5fcmVwbGFjZUluaXRpYWxPckluaGVyaXQocHJvcGVydHksIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3V0W3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtNaXhpbk1hcEVudHJ5fSBtaXhpbkVudHJ5XG4gICAqL1xuICBfaW52YWxpZGF0ZU1peGluRW50cnkobWl4aW5FbnRyeSkge1xuICAgIGlmICghaW52YWxpZENhbGxiYWNrKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAobGV0IGVsZW1lbnROYW1lIGluIG1peGluRW50cnkuZGVwZW5kYW50cykge1xuICAgICAgaWYgKGVsZW1lbnROYW1lICE9PSB0aGlzLl9jdXJyZW50RWxlbWVudCkge1xuICAgICAgICBpbnZhbGlkQ2FsbGJhY2soZWxlbWVudE5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWF0Y2hUZXh0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eU5hbWVcbiAgICogQHBhcmFtIHs/c3RyaW5nfSB2YWx1ZVByb3BlcnR5XG4gICAqIEBwYXJhbSB7P3N0cmluZ30gdmFsdWVNaXhpblxuICAgKiBAcGFyYW0geyFTdHlsZU5vZGV9IHJ1bGVcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgX3Byb2R1Y2VDc3NQcm9wZXJ0aWVzKG1hdGNoVGV4dCwgcHJvcGVydHlOYW1lLCB2YWx1ZVByb3BlcnR5LCB2YWx1ZU1peGluLCBydWxlKSB7XG4gICAgLy8gaGFuZGxlIGNhc2Ugd2hlcmUgcHJvcGVydHkgdmFsdWUgaXMgYSBtaXhpblxuICAgIGlmICh2YWx1ZVByb3BlcnR5KSB7XG4gICAgICAvLyBmb3JtOiAtLW1peGluMjogdmFyKC0tbWl4aW4xKSwgd2hlcmUgLS1taXhpbjEgaXMgaW4gdGhlIG1hcFxuICAgICAgcHJvY2Vzc1ZhcmlhYmxlQW5kRmFsbGJhY2sodmFsdWVQcm9wZXJ0eSwgKHByZWZpeCwgdmFsdWUpID0+IHtcbiAgICAgICAgaWYgKHZhbHVlICYmIHRoaXMuX21hcC5nZXQodmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWVNaXhpbiA9IGBAYXBwbHkgJHt2YWx1ZX07YFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKCF2YWx1ZU1peGluKSB7XG4gICAgICByZXR1cm4gbWF0Y2hUZXh0O1xuICAgIH1cbiAgICBsZXQgbWl4aW5Bc1Byb3BlcnRpZXMgPSB0aGlzLl9jb25zdW1lQ3NzUHJvcGVydGllcygnJyArIHZhbHVlTWl4aW4sIHJ1bGUpO1xuICAgIGxldCBwcmVmaXggPSBtYXRjaFRleHQuc2xpY2UoMCwgbWF0Y2hUZXh0LmluZGV4T2YoJy0tJykpO1xuICAgIC8vIGBpbml0aWFsYCBhbmQgYGluaGVyaXRgIGFzIHByb3BlcnRpZXMgaW4gYSBtYXAgc2hvdWxkIGJlIHJlcGxhY2VkIGJlY2F1c2VcbiAgICAvLyB0aGVzZSBrZXl3b3JkcyBhcmUgZWFnZXJseSBldmFsdWF0ZWQgd2hlbiB0aGUgbWl4aW4gYmVjb21lcyBDU1MgQ3VzdG9tIFByb3BlcnRpZXMsXG4gICAgLy8gYW5kIHdvdWxkIHNldCB0aGUgdmFyaWFibGUgdmFsdWUsIHJhdGhlciB0aGFuIGNhcnJ5IHRoZSBrZXl3b3JkIHRvIHRoZSBgdmFyKClgIHVzYWdlLlxuICAgIGxldCBtaXhpblZhbHVlcyA9IHRoaXMuX2Nzc1RleHRUb01hcChtaXhpbkFzUHJvcGVydGllcywgdHJ1ZSk7XG4gICAgbGV0IGNvbWJpbmVkUHJvcHMgPSBtaXhpblZhbHVlcztcbiAgICBsZXQgbWl4aW5FbnRyeSA9IHRoaXMuX21hcC5nZXQocHJvcGVydHlOYW1lKTtcbiAgICBsZXQgb2xkUHJvcHMgPSBtaXhpbkVudHJ5ICYmIG1peGluRW50cnkucHJvcGVydGllcztcbiAgICBpZiAob2xkUHJvcHMpIHtcbiAgICAgIC8vIE5PVEU6IHNpbmNlIHdlIHVzZSBtaXhpbiwgdGhlIG1hcCBvZiBwcm9wZXJ0aWVzIGlzIHVwZGF0ZWQgaGVyZVxuICAgICAgLy8gYW5kIHRoaXMgaXMgd2hhdCB3ZSB3YW50LlxuICAgICAgY29tYmluZWRQcm9wcyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShvbGRQcm9wcyksIG1peGluVmFsdWVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbWFwLnNldChwcm9wZXJ0eU5hbWUsIGNvbWJpbmVkUHJvcHMpO1xuICAgIH1cbiAgICBsZXQgb3V0ID0gW107XG4gICAgbGV0IHAsIHY7XG4gICAgLy8gc2V0IHZhcmlhYmxlcyBkZWZpbmVkIGJ5IGN1cnJlbnQgbWl4aW5cbiAgICBsZXQgbmVlZFRvSW52YWxpZGF0ZSA9IGZhbHNlO1xuICAgIGZvciAocCBpbiBjb21iaW5lZFByb3BzKSB7XG4gICAgICB2ID0gbWl4aW5WYWx1ZXNbcF07XG4gICAgICAvLyBpZiBwcm9wZXJ0eSBub3QgZGVmaW5lZCBieSBjdXJyZW50IG1peGluLCBzZXQgaW5pdGlhbFxuICAgICAgaWYgKHYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2ID0gJ2luaXRpYWwnO1xuICAgICAgfVxuICAgICAgaWYgKG9sZFByb3BzICYmICEocCBpbiBvbGRQcm9wcykpIHtcbiAgICAgICAgbmVlZFRvSW52YWxpZGF0ZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBvdXQucHVzaChgJHtwcm9wZXJ0eU5hbWV9JHtNSVhJTl9WQVJfU0VQfSR7cH06ICR7dn1gKTtcbiAgICB9XG4gICAgaWYgKG5lZWRUb0ludmFsaWRhdGUpIHtcbiAgICAgIHRoaXMuX2ludmFsaWRhdGVNaXhpbkVudHJ5KG1peGluRW50cnkpO1xuICAgIH1cbiAgICBpZiAobWl4aW5FbnRyeSkge1xuICAgICAgbWl4aW5FbnRyeS5wcm9wZXJ0aWVzID0gY29tYmluZWRQcm9wcztcbiAgICB9XG4gICAgLy8gYmVjYXVzZSB0aGUgbWl4aW5NYXAgaXMgZ2xvYmFsLCB0aGUgbWl4aW4gbWlnaHQgY29uZmxpY3Qgd2l0aFxuICAgIC8vIGEgZGlmZmVyZW50IHNjb3BlJ3Mgc2ltcGxlIHZhcmlhYmxlIGRlZmluaXRpb246XG4gICAgLy8gRXhhbXBsZTpcbiAgICAvLyBzb21lIHN0eWxlIHNvbWV3aGVyZTpcbiAgICAvLyAtLW1peGluMTp7IC4uLiB9XG4gICAgLy8gLS1taXhpbjI6IHZhcigtLW1peGluMSk7XG4gICAgLy8gc29tZSBvdGhlciBlbGVtZW50OlxuICAgIC8vIC0tbWl4aW4xOiAxMHB4IHNvbGlkIHJlZDtcbiAgICAvLyAtLWZvbzogdmFyKC0tbWl4aW4xKTtcbiAgICAvLyBJbiB0aGlzIGNhc2UsIHdlIGxlYXZlIHRoZSBvcmlnaW5hbCB2YXJpYWJsZSBkZWZpbml0aW9uIGluIHBsYWNlLlxuICAgIGlmICh2YWx1ZVByb3BlcnR5KSB7XG4gICAgICBwcmVmaXggPSBgJHttYXRjaFRleHR9OyR7cHJlZml4fWA7XG4gICAgfVxuICAgIHJldHVybiBgJHtwcmVmaXh9JHtvdXQuam9pbignOyAnKX07YDtcbiAgfVxufVxuXG4vKiBleHBvcnRzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1zZWxmLWFzc2lnbiAqL1xuQXBwbHlTaGltLnByb3RvdHlwZVsnZGV0ZWN0TWl4aW4nXSA9IEFwcGx5U2hpbS5wcm90b3R5cGUuZGV0ZWN0TWl4aW47XG5BcHBseVNoaW0ucHJvdG90eXBlWyd0cmFuc2Zvcm1TdHlsZSddID0gQXBwbHlTaGltLnByb3RvdHlwZS50cmFuc2Zvcm1TdHlsZTtcbkFwcGx5U2hpbS5wcm90b3R5cGVbJ3RyYW5zZm9ybUN1c3RvbVN0eWxlJ10gPSBBcHBseVNoaW0ucHJvdG90eXBlLnRyYW5zZm9ybUN1c3RvbVN0eWxlO1xuQXBwbHlTaGltLnByb3RvdHlwZVsndHJhbnNmb3JtUnVsZXMnXSA9IEFwcGx5U2hpbS5wcm90b3R5cGUudHJhbnNmb3JtUnVsZXM7XG5BcHBseVNoaW0ucHJvdG90eXBlWyd0cmFuc2Zvcm1SdWxlJ10gPSBBcHBseVNoaW0ucHJvdG90eXBlLnRyYW5zZm9ybVJ1bGU7XG5BcHBseVNoaW0ucHJvdG90eXBlWyd0cmFuc2Zvcm1UZW1wbGF0ZSddID0gQXBwbHlTaGltLnByb3RvdHlwZS50cmFuc2Zvcm1UZW1wbGF0ZTtcbkFwcGx5U2hpbS5wcm90b3R5cGVbJ19zZXBhcmF0b3InXSA9IE1JWElOX1ZBUl9TRVA7XG4vKiBlc2xpbnQtZW5hYmxlIG5vLXNlbGYtYXNzaWduICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQXBwbHlTaGltLnByb3RvdHlwZSwgJ2ludmFsaWRDYWxsYmFjaycsIHtcbiAgLyoqIEByZXR1cm4gez9mdW5jdGlvbihzdHJpbmcpfSAqL1xuICBnZXQoKSB7XG4gICAgcmV0dXJuIGludmFsaWRDYWxsYmFjaztcbiAgfSxcbiAgLyoqIEBwYXJhbSB7P2Z1bmN0aW9uKHN0cmluZyl9IGNiICovXG4gIHNldChjYikge1xuICAgIGludmFsaWRDYWxsYmFjayA9IGNiO1xuICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQXBwbHlTaGltO1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBjb25zdCB7IU9iamVjdDxzdHJpbmcsICFIVE1MVGVtcGxhdGVFbGVtZW50Pn1cbiAqL1xuY29uc3QgdGVtcGxhdGVNYXAgPSB7fTtcbmV4cG9ydCBkZWZhdWx0IHRlbXBsYXRlTWFwO1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHRlbXBsYXRlTWFwIGZyb20gJy4vdGVtcGxhdGUtbWFwLmpzJztcbmltcG9ydCB7U3R5bGVOb2RlfSBmcm9tICcuL2Nzcy1wYXJzZS5qcyc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuLypcbiAqIFV0aWxpdGllcyBmb3IgaGFuZGxpbmcgaW52YWxpZGF0aW5nIGFwcGx5LXNoaW0gbWl4aW5zIGZvciBhIGdpdmVuIHRlbXBsYXRlLlxuICpcbiAqIFRoZSBpbnZhbGlkYXRpb24gc3RyYXRlZ3kgaW52b2x2ZXMga2VlcGluZyB0cmFjayBvZiB0aGUgXCJjdXJyZW50XCIgdmVyc2lvbiBvZiBhIHRlbXBsYXRlJ3MgbWl4aW5zLCBhbmQgdXBkYXRpbmcgdGhhdCBjb3VudCB3aGVuIGEgbWl4aW4gaXMgaW52YWxpZGF0ZWQuXG4gKiBUaGUgdGVtcGxhdGVcbiAqL1xuXG4vKiogQGNvbnN0IHtzdHJpbmd9ICovXG5jb25zdCBDVVJSRU5UX1ZFUlNJT04gPSAnX2FwcGx5U2hpbUN1cnJlbnRWZXJzaW9uJztcblxuLyoqIEBjb25zdCB7c3RyaW5nfSAqL1xuY29uc3QgTkVYVF9WRVJTSU9OID0gJ19hcHBseVNoaW1OZXh0VmVyc2lvbic7XG5cbi8qKiBAY29uc3Qge3N0cmluZ30gKi9cbmNvbnN0IFZBTElEQVRJTkdfVkVSU0lPTiA9ICdfYXBwbHlTaGltVmFsaWRhdGluZ1ZlcnNpb24nO1xuXG4vKipcbiAqIEBjb25zdCB7UHJvbWlzZTx2b2lkPn1cbiAqL1xuY29uc3QgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50TmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW52YWxpZGF0ZShlbGVtZW50TmFtZSl7XG4gIGxldCB0ZW1wbGF0ZSA9IHRlbXBsYXRlTWFwW2VsZW1lbnROYW1lXTtcbiAgaWYgKHRlbXBsYXRlKSB7XG4gICAgaW52YWxpZGF0ZVRlbXBsYXRlKHRlbXBsYXRlKTtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gY2FuIGJlIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyB0byBtYXJrIGEgdGVtcGxhdGUgaW52YWxpZFxuICogYW5kIHNpZ25hbCB0aGF0IHRoZSBzdHlsZSBpbnNpZGUgbXVzdCBiZSByZWdlbmVyYXRlZC5cbiAqXG4gKiBVc2UgYHN0YXJ0VmFsaWRhdGluZ1RlbXBsYXRlYCB0byBiZWdpbiBhbiBhc3luY2hyb25vdXMgdmFsaWRhdGlvbiBjeWNsZS5cbiAqIER1cmluZyB0aGF0IGN5Y2xlLCBjYWxsIGB0ZW1wbGF0ZUlzVmFsaWRhdGluZ2AgdG8gc2VlIGlmIHRoZSB0ZW1wbGF0ZSBtdXN0XG4gKiBiZSByZXZhbGlkYXRlZFxuICogQHBhcmFtIHtIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW52YWxpZGF0ZVRlbXBsYXRlKHRlbXBsYXRlKSB7XG4gIC8vIGRlZmF1bHQgdGhlIGN1cnJlbnQgdmVyc2lvbiB0byAwXG4gIHRlbXBsYXRlW0NVUlJFTlRfVkVSU0lPTl0gPSB0ZW1wbGF0ZVtDVVJSRU5UX1ZFUlNJT05dIHx8IDA7XG4gIC8vIGVuc3VyZSB0aGUgXCJ2YWxpZGF0aW5nIGZvclwiIGZsYWcgZXhpc3RzXG4gIHRlbXBsYXRlW1ZBTElEQVRJTkdfVkVSU0lPTl0gPSB0ZW1wbGF0ZVtWQUxJREFUSU5HX1ZFUlNJT05dIHx8IDA7XG4gIC8vIGluY3JlbWVudCB0aGUgbmV4dCB2ZXJzaW9uXG4gIHRlbXBsYXRlW05FWFRfVkVSU0lPTl0gPSAodGVtcGxhdGVbTkVYVF9WRVJTSU9OXSB8fCAwKSArIDE7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGVsZW1lbnROYW1lXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZChlbGVtZW50TmFtZSkge1xuICBsZXQgdGVtcGxhdGUgPSB0ZW1wbGF0ZU1hcFtlbGVtZW50TmFtZV07XG4gIGlmICh0ZW1wbGF0ZSkge1xuICAgIHJldHVybiB0ZW1wbGF0ZUlzVmFsaWQodGVtcGxhdGUpO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7SFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0ZW1wbGF0ZUlzVmFsaWQodGVtcGxhdGUpIHtcbiAgcmV0dXJuIHRlbXBsYXRlW0NVUlJFTlRfVkVSU0lPTl0gPT09IHRlbXBsYXRlW05FWFRfVkVSU0lPTl07XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGVsZW1lbnROYW1lXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZGF0aW5nKGVsZW1lbnROYW1lKSB7XG4gIGxldCB0ZW1wbGF0ZSA9IHRlbXBsYXRlTWFwW2VsZW1lbnROYW1lXTtcbiAgaWYgKHRlbXBsYXRlKSB7XG4gICAgcmV0dXJuIHRlbXBsYXRlSXNWYWxpZGF0aW5nKHRlbXBsYXRlKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSB0ZW1wbGF0ZSBpcyBjdXJyZW50bHkgaW52YWxpZCBhbmQgYHN0YXJ0VmFsaWRhdGluZ2AgaGFzIGJlZW4gY2FsbGVkIHNpbmNlIHRoZSBsYXN0IGludmFsaWRhdGlvbi5cbiAqIElmIGZhbHNlLCB0aGUgdGVtcGxhdGUgbXVzdCBiZSB2YWxpZGF0ZWQuXG4gKiBAcGFyYW0ge0hUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gdGVtcGxhdGVJc1ZhbGlkYXRpbmcodGVtcGxhdGUpIHtcbiAgcmV0dXJuICF0ZW1wbGF0ZUlzVmFsaWQodGVtcGxhdGUpICYmIHRlbXBsYXRlW1ZBTElEQVRJTkdfVkVSU0lPTl0gPT09IHRlbXBsYXRlW05FWFRfVkVSU0lPTl07XG59XG5cbi8qKlxuICogdGhlIHRlbXBsYXRlIGlzIG1hcmtlZCBhcyBgdmFsaWRhdGluZ2AgZm9yIG9uZSBtaWNyb3Rhc2sgc28gdGhhdCBhbGwgaW5zdGFuY2VzXG4gKiBmb3VuZCBpbiB0aGUgdHJlZSBjcmF3bCBvZiBgYXBwbHlTdHlsZWAgd2lsbCB1cGRhdGUgdGhlbXNlbHZlcyxcbiAqIGJ1dCB0aGUgdGVtcGxhdGUgd2lsbCBvbmx5IGJlIHVwZGF0ZWQgb25jZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50TmFtZVxuKi9cbmV4cG9ydCBmdW5jdGlvbiBzdGFydFZhbGlkYXRpbmcoZWxlbWVudE5hbWUpIHtcbiAgbGV0IHRlbXBsYXRlID0gdGVtcGxhdGVNYXBbZWxlbWVudE5hbWVdO1xuICBzdGFydFZhbGlkYXRpbmdUZW1wbGF0ZSh0ZW1wbGF0ZSk7XG59XG5cbi8qKlxuICogQmVnaW4gYW4gYXN5bmNocm9ub3VzIGludmFsaWRhdGlvbiBjeWNsZS5cbiAqIFRoaXMgc2hvdWxkIGJlIGNhbGxlZCBhZnRlciBldmVyeSB2YWxpZGF0aW9uIG9mIGEgdGVtcGxhdGVcbiAqXG4gKiBBZnRlciBvbmUgbWljcm90YXNrLCB0aGUgdGVtcGxhdGUgd2lsbCBiZSBtYXJrZWQgYXMgdmFsaWQgdW50aWwgdGhlIG5leHQgY2FsbCB0byBgaW52YWxpZGF0ZVRlbXBsYXRlYFxuICogQHBhcmFtIHtIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRWYWxpZGF0aW5nVGVtcGxhdGUodGVtcGxhdGUpIHtcbiAgLy8gcmVtZW1iZXIgdGhhdCB0aGUgY3VycmVudCBcIm5leHQgdmVyc2lvblwiIGlzIHRoZSByZWFzb24gZm9yIHRoaXMgdmFsaWRhdGlvbiBjeWNsZVxuICB0ZW1wbGF0ZVtWQUxJREFUSU5HX1ZFUlNJT05dID0gdGVtcGxhdGVbTkVYVF9WRVJTSU9OXTtcbiAgLy8gaG93ZXZlciwgdGhlcmUgb25seSBuZWVkcyB0byBiZSBvbmUgYXN5bmMgdGFzayB0byBjbGVhciB0aGUgY291bnRlcnNcbiAgaWYgKCF0ZW1wbGF0ZS5fdmFsaWRhdGluZykge1xuICAgIHRlbXBsYXRlLl92YWxpZGF0aW5nID0gdHJ1ZTtcbiAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAvLyBzeW5jIHRoZSBjdXJyZW50IHZlcnNpb24gdG8gbGV0IGZ1dHVyZSBpbnZhbGlkYXRpb25zIGNhdXNlIGEgcmVmcmVzaCBjeWNsZVxuICAgICAgdGVtcGxhdGVbQ1VSUkVOVF9WRVJTSU9OXSA9IHRlbXBsYXRlW05FWFRfVkVSU0lPTl07XG4gICAgICB0ZW1wbGF0ZS5fdmFsaWRhdGluZyA9IGZhbHNlO1xuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVsZW1lbnRzQXJlSW52YWxpZCgpIHtcbiAgZm9yIChsZXQgZWxlbWVudE5hbWUgaW4gdGVtcGxhdGVNYXApIHtcbiAgICBsZXQgdGVtcGxhdGUgPSB0ZW1wbGF0ZU1hcFtlbGVtZW50TmFtZV07XG4gICAgaWYgKCF0ZW1wbGF0ZUlzVmFsaWQodGVtcGxhdGUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXBwbHlTaGltIGZyb20gJy4uL3NyYy9hcHBseS1zaGltLmpzJztcbmltcG9ydCB0ZW1wbGF0ZU1hcCBmcm9tICcuLi9zcmMvdGVtcGxhdGUtbWFwLmpzJztcbmltcG9ydCB7Z2V0SXNFeHRlbmRzLCB0b0Nzc1RleHQsIGVsZW1lbnRIYXNCdWlsdENzc30gZnJvbSAnLi4vc3JjL3N0eWxlLXV0aWwuanMnO1xuaW1wb3J0ICogYXMgQXBwbHlTaGltVXRpbHMgZnJvbSAnLi4vc3JjL2FwcGx5LXNoaW0tdXRpbHMuanMnO1xuaW1wb3J0IHtnZXRDb21wdXRlZFN0eWxlVmFsdWUsIHVwZGF0ZU5hdGl2ZVByb3BlcnRpZXN9IGZyb20gJy4uL3NyYy9jb21tb24tdXRpbHMuanMnO1xuaW1wb3J0IHtDdXN0b21TdHlsZUludGVyZmFjZUludGVyZmFjZX0gZnJvbSAnLi4vc3JjL2N1c3RvbS1zdHlsZS1pbnRlcmZhY2UuanMnOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5pbXBvcnQge25hdGl2ZUNzc1ZhcmlhYmxlcywgbmF0aXZlU2hhZG93LCBjc3NCdWlsZCwgZGlzYWJsZVJ1bnRpbWV9IGZyb20gJy4uL3NyYy9zdHlsZS1zZXR0aW5ncy5qcyc7XG5cbi8qKiBAY29uc3Qge0FwcGx5U2hpbX0gKi9cbmNvbnN0IGFwcGx5U2hpbSA9IG5ldyBBcHBseVNoaW0oKTtcblxuY2xhc3MgQXBwbHlTaGltSW50ZXJmYWNlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLyoqIEB0eXBlIHs/Q3VzdG9tU3R5bGVJbnRlcmZhY2VJbnRlcmZhY2V9ICovXG4gICAgdGhpcy5jdXN0b21TdHlsZUludGVyZmFjZSA9IG51bGw7XG4gICAgYXBwbHlTaGltWydpbnZhbGlkQ2FsbGJhY2snXSA9IEFwcGx5U2hpbVV0aWxzLmludmFsaWRhdGU7XG4gIH1cbiAgZW5zdXJlKCkge1xuICAgIGlmICh0aGlzLmN1c3RvbVN0eWxlSW50ZXJmYWNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh3aW5kb3cuU2hhZHlDU1MuQ3VzdG9tU3R5bGVJbnRlcmZhY2UpIHtcbiAgICAgIHRoaXMuY3VzdG9tU3R5bGVJbnRlcmZhY2UgPVxuICAgICAgICAgIC8qKiBAdHlwZSB7IUN1c3RvbVN0eWxlSW50ZXJmYWNlSW50ZXJmYWNlfSAqLyAoXG4gICAgICAgICAgICAgIHdpbmRvdy5TaGFkeUNTUy5DdXN0b21TdHlsZUludGVyZmFjZSk7XG4gICAgICB0aGlzLmN1c3RvbVN0eWxlSW50ZXJmYWNlWyd0cmFuc2Zvcm1DYWxsYmFjayddID0gKHN0eWxlKSA9PiB7XG4gICAgICAgIGFwcGx5U2hpbS50cmFuc2Zvcm1DdXN0b21TdHlsZShzdHlsZSk7XG4gICAgICB9O1xuICAgICAgdGhpcy5jdXN0b21TdHlsZUludGVyZmFjZVsndmFsaWRhdGVDYWxsYmFjayddID0gKCkgPT4ge1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIGlmICh0aGlzLmN1c3RvbVN0eWxlSW50ZXJmYWNlWydlbnF1ZXVlZCddKSB7XG4gICAgICAgICAgICB0aGlzLmZsdXNoQ3VzdG9tU3R5bGVzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50TmFtZVxuICAgKi9cbiAgcHJlcGFyZVRlbXBsYXRlKHRlbXBsYXRlLCBlbGVtZW50TmFtZSkge1xuICAgIHRoaXMuZW5zdXJlKCk7XG4gICAgaWYgKGVsZW1lbnRIYXNCdWlsdENzcyh0ZW1wbGF0ZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGVtcGxhdGVNYXBbZWxlbWVudE5hbWVdID0gdGVtcGxhdGU7XG4gICAgbGV0IGFzdCA9IGFwcGx5U2hpbS50cmFuc2Zvcm1UZW1wbGF0ZSh0ZW1wbGF0ZSwgZWxlbWVudE5hbWUpO1xuICAgIC8vIHNhdmUgb3JpZ2luYWwgc3R5bGUgYXN0IHRvIHVzZSBmb3IgcmV2YWxpZGF0aW5nIGluc3RhbmNlc1xuICAgIHRlbXBsYXRlWydfc3R5bGVBc3QnXSA9IGFzdDtcbiAgfVxuICBmbHVzaEN1c3RvbVN0eWxlcygpIHtcbiAgICB0aGlzLmVuc3VyZSgpO1xuICAgIGlmICghdGhpcy5jdXN0b21TdHlsZUludGVyZmFjZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgc3R5bGVzID0gdGhpcy5jdXN0b21TdHlsZUludGVyZmFjZVsncHJvY2Vzc1N0eWxlcyddKCk7XG4gICAgaWYgKCF0aGlzLmN1c3RvbVN0eWxlSW50ZXJmYWNlWydlbnF1ZXVlZCddKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrICkge1xuICAgICAgbGV0IGNzID0gc3R5bGVzW2ldO1xuICAgICAgbGV0IHN0eWxlID0gdGhpcy5jdXN0b21TdHlsZUludGVyZmFjZVsnZ2V0U3R5bGVGb3JDdXN0b21TdHlsZSddKGNzKTtcbiAgICAgIGlmIChzdHlsZSkge1xuICAgICAgICBhcHBseVNoaW0udHJhbnNmb3JtQ3VzdG9tU3R5bGUoc3R5bGUpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmN1c3RvbVN0eWxlSW50ZXJmYWNlWydlbnF1ZXVlZCddID0gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAgICogQHBhcmFtIHtPYmplY3Q9fSBwcm9wZXJ0aWVzXG4gICAqL1xuICBzdHlsZVN1YnRyZWUoZWxlbWVudCwgcHJvcGVydGllcykge1xuICAgIHRoaXMuZW5zdXJlKCk7XG4gICAgaWYgKHByb3BlcnRpZXMpIHtcbiAgICAgIHVwZGF0ZU5hdGl2ZVByb3BlcnRpZXMoZWxlbWVudCwgcHJvcGVydGllcyk7XG4gICAgfVxuICAgIGlmIChlbGVtZW50LnNoYWRvd1Jvb3QpIHtcbiAgICAgIHRoaXMuc3R5bGVFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgbGV0IHNoYWRvd0NoaWxkcmVuID1cbiAgICAgICAgICAvKiogQHR5cGUgeyFQYXJlbnROb2RlfSAqLyAoZWxlbWVudC5zaGFkb3dSb290KS5jaGlsZHJlbiB8fFxuICAgICAgICAgIGVsZW1lbnQuc2hhZG93Um9vdC5jaGlsZE5vZGVzO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGFkb3dDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLnN0eWxlU3VidHJlZSgvKiogQHR5cGUge0hUTUxFbGVtZW50fSAqLyhzaGFkb3dDaGlsZHJlbltpXSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgY2hpbGRyZW4gPSBlbGVtZW50LmNoaWxkcmVuIHx8IGVsZW1lbnQuY2hpbGROb2RlcztcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5zdHlsZVN1YnRyZWUoLyoqIEB0eXBlIHtIVE1MRWxlbWVudH0gKi8oY2hpbGRyZW5baV0pKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAgICovXG4gIHN0eWxlRWxlbWVudChlbGVtZW50KSB7XG4gICAgdGhpcy5lbnN1cmUoKTtcbiAgICBsZXQge2lzfSA9IGdldElzRXh0ZW5kcyhlbGVtZW50KTtcbiAgICBsZXQgdGVtcGxhdGUgPSB0ZW1wbGF0ZU1hcFtpc107XG4gICAgaWYgKHRlbXBsYXRlICYmIGVsZW1lbnRIYXNCdWlsdENzcyh0ZW1wbGF0ZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRlbXBsYXRlICYmICFBcHBseVNoaW1VdGlscy50ZW1wbGF0ZUlzVmFsaWQodGVtcGxhdGUpKSB7XG4gICAgICAvLyBvbmx5IHJldmFsaWRhdGUgdGVtcGxhdGUgb25jZVxuICAgICAgaWYgKCFBcHBseVNoaW1VdGlscy50ZW1wbGF0ZUlzVmFsaWRhdGluZyh0ZW1wbGF0ZSkpIHtcbiAgICAgICAgdGhpcy5wcmVwYXJlVGVtcGxhdGUodGVtcGxhdGUsIGlzKTtcbiAgICAgICAgQXBwbHlTaGltVXRpbHMuc3RhcnRWYWxpZGF0aW5nVGVtcGxhdGUodGVtcGxhdGUpO1xuICAgICAgfVxuICAgICAgLy8gdXBkYXRlIHRoaXMgZWxlbWVudCBpbnN0YW5jZVxuICAgICAgbGV0IHJvb3QgPSBlbGVtZW50LnNoYWRvd1Jvb3Q7XG4gICAgICBpZiAocm9vdCkge1xuICAgICAgICBsZXQgc3R5bGUgPSAvKiogQHR5cGUge0hUTUxTdHlsZUVsZW1lbnR9ICovKHJvb3QucXVlcnlTZWxlY3Rvcignc3R5bGUnKSk7XG4gICAgICAgIGlmIChzdHlsZSkge1xuICAgICAgICAgIC8vIHJldXNlIHRoZSB0ZW1wbGF0ZSdzIHN0eWxlIGFzdCwgaXQgaGFzIGFsbCB0aGUgb3JpZ2luYWwgY3NzIHRleHRcbiAgICAgICAgICBzdHlsZVsnX19jc3NSdWxlcyddID0gdGVtcGxhdGVbJ19zdHlsZUFzdCddO1xuICAgICAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gdG9Dc3NUZXh0KHRlbXBsYXRlWydfc3R5bGVBc3QnXSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtPYmplY3Q9fSBwcm9wZXJ0aWVzXG4gICAqL1xuICBzdHlsZURvY3VtZW50KHByb3BlcnRpZXMpIHtcbiAgICB0aGlzLmVuc3VyZSgpO1xuICAgIHRoaXMuc3R5bGVTdWJ0cmVlKGRvY3VtZW50LmJvZHksIHByb3BlcnRpZXMpO1xuICB9XG59XG5cbmlmICghd2luZG93LlNoYWR5Q1NTIHx8ICF3aW5kb3cuU2hhZHlDU1MuU2NvcGluZ1NoaW0pIHtcbiAgY29uc3QgYXBwbHlTaGltSW50ZXJmYWNlID0gbmV3IEFwcGx5U2hpbUludGVyZmFjZSgpO1xuICBsZXQgQ3VzdG9tU3R5bGVJbnRlcmZhY2UgPSB3aW5kb3cuU2hhZHlDU1MgJiYgd2luZG93LlNoYWR5Q1NTLkN1c3RvbVN0eWxlSW50ZXJmYWNlO1xuXG4gIC8qKiBAc3VwcHJlc3Mge2R1cGxpY2F0ZX0gKi9cbiAgd2luZG93LlNoYWR5Q1NTID0ge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGVsZW1lbnROYW1lXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBlbGVtZW50RXh0ZW5kc1xuICAgICAqL1xuICAgIHByZXBhcmVUZW1wbGF0ZSh0ZW1wbGF0ZSwgZWxlbWVudE5hbWUsIGVsZW1lbnRFeHRlbmRzKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIGFwcGx5U2hpbUludGVyZmFjZS5mbHVzaEN1c3RvbVN0eWxlcygpO1xuICAgICAgYXBwbHlTaGltSW50ZXJmYWNlLnByZXBhcmVUZW1wbGF0ZSh0ZW1wbGF0ZSwgZWxlbWVudE5hbWUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0geyFIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50TmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gZWxlbWVudEV4dGVuZHNcbiAgICAgKi9cbiAgICBwcmVwYXJlVGVtcGxhdGVTdHlsZXModGVtcGxhdGUsIGVsZW1lbnROYW1lLCBlbGVtZW50RXh0ZW5kcykge1xuICAgICAgd2luZG93LlNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZSh0ZW1wbGF0ZSwgZWxlbWVudE5hbWUsIGVsZW1lbnRFeHRlbmRzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZWxlbWVudE5hbWVcbiAgICAgKi9cbiAgICBwcmVwYXJlVGVtcGxhdGVEb20odGVtcGxhdGUsIGVsZW1lbnROYW1lKSB7fSwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHshSFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBzdHlsZVN1YnRyZWUoZWxlbWVudCwgcHJvcGVydGllcykge1xuICAgICAgYXBwbHlTaGltSW50ZXJmYWNlLmZsdXNoQ3VzdG9tU3R5bGVzKCk7XG4gICAgICBhcHBseVNoaW1JbnRlcmZhY2Uuc3R5bGVTdWJ0cmVlKGVsZW1lbnQsIHByb3BlcnRpZXMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0geyFIVE1MRWxlbWVudH0gZWxlbWVudFxuICAgICAqL1xuICAgIHN0eWxlRWxlbWVudChlbGVtZW50KSB7XG4gICAgICBhcHBseVNoaW1JbnRlcmZhY2UuZmx1c2hDdXN0b21TdHlsZXMoKTtcbiAgICAgIGFwcGx5U2hpbUludGVyZmFjZS5zdHlsZUVsZW1lbnQoZWxlbWVudCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gcHJvcGVydGllc1xuICAgICAqL1xuICAgIHN0eWxlRG9jdW1lbnQocHJvcGVydGllcykge1xuICAgICAgYXBwbHlTaGltSW50ZXJmYWNlLmZsdXNoQ3VzdG9tU3R5bGVzKCk7XG4gICAgICBhcHBseVNoaW1JbnRlcmZhY2Uuc3R5bGVEb2N1bWVudChwcm9wZXJ0aWVzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5XG4gICAgICogQHJldHVybiB7c3RyaW5nfVxuICAgICAqL1xuICAgIGdldENvbXB1dGVkU3R5bGVWYWx1ZShlbGVtZW50LCBwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGVWYWx1ZShlbGVtZW50LCBwcm9wZXJ0eSk7XG4gICAgfSxcblxuICAgIGZsdXNoQ3VzdG9tU3R5bGVzKCkge1xuICAgICAgYXBwbHlTaGltSW50ZXJmYWNlLmZsdXNoQ3VzdG9tU3R5bGVzKCk7XG4gICAgfSxcblxuICAgIG5hdGl2ZUNzczogbmF0aXZlQ3NzVmFyaWFibGVzLFxuICAgIG5hdGl2ZVNoYWRvdzogbmF0aXZlU2hhZG93LFxuICAgIGNzc0J1aWxkOiBjc3NCdWlsZCxcbiAgICBkaXNhYmxlUnVudGltZTogZGlzYWJsZVJ1bnRpbWUsXG4gIH07XG5cbiAgaWYgKEN1c3RvbVN0eWxlSW50ZXJmYWNlKSB7XG4gICAgd2luZG93LlNoYWR5Q1NTLkN1c3RvbVN0eWxlSW50ZXJmYWNlID0gQ3VzdG9tU3R5bGVJbnRlcmZhY2U7XG4gIH1cbn1cblxud2luZG93LlNoYWR5Q1NTLkFwcGx5U2hpbSA9IGFwcGx5U2hpbTtcbiIsIi8qKlxuICogQGZpbGVvdmVydmlld1xuICogQHN1cHByZXNzIHtjaGVja1Byb3RvdHlwYWxUeXBlc31cbiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kXG4gKiBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5XG4gKiBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dCBDb2RlIGRpc3RyaWJ1dGVkIGJ5XG4gKiBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc28gc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQXG4gKiByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbmltcG9ydCB7IFByb3BlcnR5QWNjZXNzb3JzIH0gZnJvbSAnLi9wcm9wZXJ0eS1hY2Nlc3NvcnMuanMnO1xuXG5pbXBvcnQgeyBkZWR1cGluZ01peGluIH0gZnJvbSAnLi4vdXRpbHMvbWl4aW4uanMnO1xuXG5jb25zdCBIT1NUX0RJUiA9IC86aG9zdFxcKDpkaXJcXCgobHRyfHJ0bClcXClcXCkvZztcbmNvbnN0IEhPU1RfRElSX1JFUExBQ01FTlQgPSAnOmhvc3QoW2Rpcj1cIiQxXCJdKSc7XG5cbmNvbnN0IEVMX0RJUiA9IC8oW1xcc1xcdy0jXFwuXFxbXFxdXFwqXSopOmRpclxcKChsdHJ8cnRsKVxcKS9nO1xuY29uc3QgRUxfRElSX1JFUExBQ01FTlQgPSAnOmhvc3QoW2Rpcj1cIiQyXCJdKSAkMSc7XG5cbmNvbnN0IERJUl9DSEVDSyA9IC86ZGlyXFwoKD86bHRyfHJ0bClcXCkvO1xuXG5jb25zdCBTSElNX1NIQURPVyA9IEJvb2xlYW4od2luZG93WydTaGFkeURPTSddICYmIHdpbmRvd1snU2hhZHlET00nXVsnaW5Vc2UnXSk7XG5cbi8qKlxuICogQHR5cGUgeyFBcnJheTwhUG9seW1lcl9EaXJNaXhpbj59XG4gKi9cbmNvbnN0IERJUl9JTlNUQU5DRVMgPSBbXTtcblxuLyoqIEB0eXBlIHs/TXV0YXRpb25PYnNlcnZlcn0gKi9cbmxldCBvYnNlcnZlciA9IG51bGw7XG5cbmxldCBkb2N1bWVudERpciA9ICcnO1xuXG5mdW5jdGlvbiBnZXRSVEwoKSB7XG4gIGRvY3VtZW50RGlyID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGlyJyk7XG59XG5cbi8qKlxuICogQHBhcmFtIHshUG9seW1lcl9EaXJNaXhpbn0gaW5zdGFuY2UgSW5zdGFuY2UgdG8gc2V0IFJUTCBzdGF0dXMgb25cbiAqL1xuZnVuY3Rpb24gc2V0UlRMKGluc3RhbmNlKSB7XG4gIGlmICghaW5zdGFuY2UuX19hdXRvRGlyT3B0T3V0KSB7XG4gICAgY29uc3QgZWwgPSAvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi8oaW5zdGFuY2UpO1xuICAgIGVsLnNldEF0dHJpYnV0ZSgnZGlyJywgZG9jdW1lbnREaXIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZURpcmVjdGlvbigpIHtcbiAgZ2V0UlRMKCk7XG4gIGRvY3VtZW50RGlyID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGlyJyk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgRElSX0lOU1RBTkNFUy5sZW5ndGg7IGkrKykge1xuICAgIHNldFJUTChESVJfSU5TVEFOQ0VTW2ldKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0YWtlUmVjb3JkcygpIHtcbiAgaWYgKG9ic2VydmVyICYmIG9ic2VydmVyLnRha2VSZWNvcmRzKCkubGVuZ3RoKSB7XG4gICAgdXBkYXRlRGlyZWN0aW9uKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBFbGVtZW50IGNsYXNzIG1peGluIHRoYXQgYWxsb3dzIGVsZW1lbnRzIHRvIHVzZSB0aGUgYDpkaXJgIENTUyBTZWxlY3RvciB0b1xuICogaGF2ZSB0ZXh0IGRpcmVjdGlvbiBzcGVjaWZpYyBzdHlsaW5nLlxuICpcbiAqIFdpdGggdGhpcyBtaXhpbiwgYW55IHN0eWxlc2hlZXQgcHJvdmlkZWQgaW4gdGhlIHRlbXBsYXRlIHdpbGwgdHJhbnNmb3JtXG4gKiBgOmRpcmAgaW50byBgOmhvc3QoW2Rpcl0pYCBhbmQgc3luYyBkaXJlY3Rpb24gd2l0aCB0aGUgcGFnZSB2aWEgdGhlXG4gKiBlbGVtZW50J3MgYGRpcmAgYXR0cmlidXRlLlxuICpcbiAqIEVsZW1lbnRzIGNhbiBvcHQgb3V0IG9mIHRoZSBnbG9iYWwgcGFnZSB0ZXh0IGRpcmVjdGlvbiBieSBzZXR0aW5nIHRoZSBgZGlyYFxuICogYXR0cmlidXRlIGRpcmVjdGx5IGluIGByZWFkeSgpYCBvciBpbiBIVE1MLlxuICpcbiAqIENhdmVhdHM6XG4gKiAtIEFwcGxpY2F0aW9ucyBtdXN0IHNldCBgPGh0bWwgZGlyPVwibHRyXCI+YCBvciBgPGh0bWwgZGlyPVwicnRsXCI+YCB0byBzeW5jXG4gKiAgIGRpcmVjdGlvblxuICogLSBBdXRvbWF0aWMgbGVmdC10by1yaWdodCBvciByaWdodC10by1sZWZ0IHN0eWxpbmcgaXMgc3luYydkIHdpdGggdGhlXG4gKiAgIGA8aHRtbD5gIGVsZW1lbnQgb25seS5cbiAqIC0gQ2hhbmdpbmcgYGRpcmAgYXQgcnVudGltZSBpcyBzdXBwb3J0ZWQuXG4gKiAtIE9wdGluZyBvdXQgb2YgdGhlIGdsb2JhbCBkaXJlY3Rpb24gc3R5bGluZyBpcyBwZXJtYW5lbnRcbiAqXG4gKiBAbWl4aW5GdW5jdGlvblxuICogQHBvbHltZXJcbiAqIEBhcHBsaWVzTWl4aW4gUHJvcGVydHlBY2Nlc3NvcnNcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKG5ldzpUKX0gc3VwZXJDbGFzcyBDbGFzcyB0byBhcHBseSBtaXhpbiB0by5cbiAqIEByZXR1cm4ge2Z1bmN0aW9uKG5ldzpUKX0gc3VwZXJDbGFzcyB3aXRoIG1peGluIGFwcGxpZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBEaXJNaXhpbiA9IGRlZHVwaW5nTWl4aW4oKGJhc2UpID0+IHtcblxuICBpZiAoIVNISU1fU0hBRE9XKSB7XG4gICAgaWYgKCFvYnNlcnZlcikge1xuICAgICAgZ2V0UlRMKCk7XG4gICAgICBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHVwZGF0ZURpcmVjdGlvbik7XG4gICAgICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwge2F0dHJpYnV0ZXM6IHRydWUsIGF0dHJpYnV0ZUZpbHRlcjogWydkaXInXX0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGltcGxlbWVudHMge1BvbHltZXJfUHJvcGVydHlBY2Nlc3NvcnN9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb25zdCBlbGVtZW50QmFzZSA9IFByb3BlcnR5QWNjZXNzb3JzKGJhc2UpO1xuXG4gIC8qKlxuICAgKiBAcG9seW1lclxuICAgKiBAbWl4aW5DbGFzc1xuICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9EaXJNaXhpbn1cbiAgICovXG4gIGNsYXNzIERpciBleHRlbmRzIGVsZW1lbnRCYXNlIHtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjc3NUZXh0IC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSSSAuXG4gICAgICogQHJldHVybiB7c3RyaW5nfSAuXG4gICAgICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc30gSW50ZXJmYWNlcyBpbiBjbG9zdXJlIGRvIG5vdCBpbmhlcml0IHN0YXRpY3MsIGJ1dCBjbGFzc2VzIGRvXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgX3Byb2Nlc3NTdHlsZVRleHQoY3NzVGV4dCwgYmFzZVVSSSkge1xuICAgICAgLy8gVE9ETyhodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtY29tcGlsZXIvaXNzdWVzLzMyNDApOlxuICAgICAgLy8gICAgIENoYW5nZSBiYWNrIHRvIGp1c3Qgc3VwZXIubWV0aG9kQ2FsbCgpXG4gICAgICBjc3NUZXh0ID0gZWxlbWVudEJhc2UuX3Byb2Nlc3NTdHlsZVRleHQuY2FsbCh0aGlzLCBjc3NUZXh0LCBiYXNlVVJJKTtcbiAgICAgIGlmICghU0hJTV9TSEFET1cgJiYgRElSX0NIRUNLLnRlc3QoY3NzVGV4dCkpIHtcbiAgICAgICAgY3NzVGV4dCA9IHRoaXMuX3JlcGxhY2VEaXJJbkNzc1RleHQoY3NzVGV4dCk7XG4gICAgICAgIHRoaXMuX19hY3RpdmF0ZURpciA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3NzVGV4dDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlIGA6ZGlyYCBpbiB0aGUgZ2l2ZW4gQ1NTIHRleHRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IENTUyB0ZXh0IHRvIHJlcGxhY2UgRElSXG4gICAgICogQHJldHVybiB7c3RyaW5nfSBNb2RpZmllZCBDU1NcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBfcmVwbGFjZURpckluQ3NzVGV4dCh0ZXh0KSB7XG4gICAgICBsZXQgcmVwbGFjZWRUZXh0ID0gdGV4dDtcbiAgICAgIHJlcGxhY2VkVGV4dCA9IHJlcGxhY2VkVGV4dC5yZXBsYWNlKEhPU1RfRElSLCBIT1NUX0RJUl9SRVBMQUNNRU5UKTtcbiAgICAgIHJlcGxhY2VkVGV4dCA9IHJlcGxhY2VkVGV4dC5yZXBsYWNlKEVMX0RJUiwgRUxfRElSX1JFUExBQ01FTlQpO1xuICAgICAgcmV0dXJuIHJlcGxhY2VkVGV4dDtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gICAgICB0aGlzLl9fYXV0b0Rpck9wdE91dCA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBzdXBwcmVzcyB7aW52YWxpZENhc3RzfSBDbG9zdXJlIGRvZXNuJ3QgdW5kZXJzdGFuZCB0aGF0IGB0aGlzYCBpcyBhblxuICAgICAqICAgICBIVE1MRWxlbWVudFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgcmVhZHkoKSB7XG4gICAgICBzdXBlci5yZWFkeSgpO1xuICAgICAgdGhpcy5fX2F1dG9EaXJPcHRPdXQgPSAvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi8odGhpcykuaGFzQXR0cmlidXRlKCdkaXInKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfSBJZiBpdCBleGlzdHMgb24gZWxlbWVudEJhc2UsIGl0IGNhbiBiZVxuICAgICAqICAgc3VwZXInZFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICBpZiAoZWxlbWVudEJhc2UucHJvdG90eXBlLmNvbm5lY3RlZENhbGxiYWNrKSB7XG4gICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3Rvci5fX2FjdGl2YXRlRGlyKSB7XG4gICAgICAgIHRha2VSZWNvcmRzKCk7XG4gICAgICAgIERJUl9JTlNUQU5DRVMucHVzaCh0aGlzKTtcbiAgICAgICAgc2V0UlRMKHRoaXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXN9IElmIGl0IGV4aXN0cyBvbiBlbGVtZW50QmFzZSwgaXQgY2FuIGJlXG4gICAgICogICBzdXBlcidkXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgIGlmIChlbGVtZW50QmFzZS5wcm90b3R5cGUuZGlzY29ubmVjdGVkQ2FsbGJhY2spIHtcbiAgICAgICAgc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yLl9fYWN0aXZhdGVEaXIpIHtcbiAgICAgICAgY29uc3QgaWR4ID0gRElSX0lOU1RBTkNFUy5pbmRleE9mKHRoaXMpO1xuICAgICAgICBpZiAoaWR4ID4gLTEpIHtcbiAgICAgICAgICBESVJfSU5TVEFOQ0VTLnNwbGljZShpZHgsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgRGlyLl9fYWN0aXZhdGVEaXIgPSBmYWxzZTtcblxuICByZXR1cm4gRGlyO1xufSk7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG4vKipcbiAqIE1vZHVsZSBmb3Igc2NoZWR1bGluZyBmbHVzaGFibGUgcHJlLXJlbmRlciBhbmQgcG9zdC1yZW5kZXIgdGFza3MuXG4gKlxuICogQHN1bW1hcnkgTW9kdWxlIGZvciBzY2hlZHVsaW5nIGZsdXNoYWJsZSBwcmUtcmVuZGVyIGFuZCBwb3N0LXJlbmRlciB0YXNrcy5cbiAqL1xuXG5pbXBvcnQgJy4vYm9vdC5qcyc7XG5cbmxldCBzY2hlZHVsZWQgPSBmYWxzZTtcbmxldCBiZWZvcmVSZW5kZXJRdWV1ZSA9IFtdO1xubGV0IGFmdGVyUmVuZGVyUXVldWUgPSBbXTtcblxuZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG4gIHNjaGVkdWxlZCA9IHRydWU7XG4gIC8vIGJlZm9yZSBuZXh0IHJlbmRlclxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24oKSB7XG4gICAgc2NoZWR1bGVkID0gZmFsc2U7XG4gICAgZmx1c2hRdWV1ZShiZWZvcmVSZW5kZXJRdWV1ZSk7XG4gICAgLy8gYWZ0ZXIgdGhlIHJlbmRlclxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBydW5RdWV1ZShhZnRlclJlbmRlclF1ZXVlKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGZsdXNoUXVldWUocXVldWUpIHtcbiAgd2hpbGUgKHF1ZXVlLmxlbmd0aCkge1xuICAgIGNhbGxNZXRob2QocXVldWUuc2hpZnQoKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcnVuUXVldWUocXVldWUpIHtcbiAgZm9yIChsZXQgaT0wLCBsPXF1ZXVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGNhbGxNZXRob2QocXVldWUuc2hpZnQoKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbE1ldGhvZChpbmZvKSB7XG4gIGNvbnN0IGNvbnRleHQgPSBpbmZvWzBdO1xuICBjb25zdCBjYWxsYmFjayA9IGluZm9bMV07XG4gIGNvbnN0IGFyZ3MgPSBpbmZvWzJdO1xuICB0cnkge1xuICAgIGNhbGxiYWNrLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICB9IGNhdGNoKGUpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRocm93IGU7XG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBGbHVzaGVzIGFsbCBgYmVmb3JlTmV4dFJlbmRlcmAgdGFza3MsIGZvbGxvd2VkIGJ5IGFsbCBgYWZ0ZXJOZXh0UmVuZGVyYFxuICogdGFza3MuXG4gKlxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZsdXNoKCkge1xuICB3aGlsZSAoYmVmb3JlUmVuZGVyUXVldWUubGVuZ3RoIHx8IGFmdGVyUmVuZGVyUXVldWUubGVuZ3RoKSB7XG4gICAgZmx1c2hRdWV1ZShiZWZvcmVSZW5kZXJRdWV1ZSk7XG4gICAgZmx1c2hRdWV1ZShhZnRlclJlbmRlclF1ZXVlKTtcbiAgfVxuICBzY2hlZHVsZWQgPSBmYWxzZTtcbn1cblxuXG4vKipcbiAqIEVucXVldWVzIGEgY2FsbGJhY2sgd2hpY2ggd2lsbCBiZSBydW4gYmVmb3JlIHRoZSBuZXh0IHJlbmRlciwgYXRcbiAqIGByZXF1ZXN0QW5pbWF0aW9uRnJhbWVgIHRpbWluZy5cbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyB1c2VmdWwgZm9yIGVucXVldWluZyB3b3JrIHRoYXQgcmVxdWlyZXMgRE9NIG1lYXN1cmVtZW50LFxuICogc2luY2UgbWVhc3VyZW1lbnQgbWF5IG5vdCBiZSByZWxpYWJsZSBpbiBjdXN0b20gZWxlbWVudCBjYWxsYmFja3MgYmVmb3JlXG4gKiB0aGUgZmlyc3QgcmVuZGVyLCBhcyB3ZWxsIGFzIGZvciBiYXRjaGluZyBtZWFzdXJlbWVudCB0YXNrcyBpbiBnZW5lcmFsLlxuICpcbiAqIFRhc2tzIGluIHRoaXMgcXVldWUgbWF5IGJlIGZsdXNoZWQgYnkgY2FsbGluZyBgZmx1c2goKWAuXG4gKlxuICogQHBhcmFtIHsqfSBjb250ZXh0IENvbnRleHQgb2JqZWN0IHRoZSBjYWxsYmFjayBmdW5jdGlvbiB3aWxsIGJlIGJvdW5kIHRvXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKC4uLiopOnZvaWR9IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uXG4gKiBAcGFyYW0geyFBcnJheT19IGFyZ3MgQW4gYXJyYXkgb2YgYXJndW1lbnRzIHRvIGNhbGwgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHdpdGhcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBiZWZvcmVOZXh0UmVuZGVyKGNvbnRleHQsIGNhbGxiYWNrLCBhcmdzKSB7XG4gIGlmICghc2NoZWR1bGVkKSB7XG4gICAgc2NoZWR1bGUoKTtcbiAgfVxuICBiZWZvcmVSZW5kZXJRdWV1ZS5wdXNoKFtjb250ZXh0LCBjYWxsYmFjaywgYXJnc10pO1xufVxuXG4vKipcbiAqIEVucXVldWVzIGEgY2FsbGJhY2sgd2hpY2ggd2lsbCBiZSBydW4gYWZ0ZXIgdGhlIG5leHQgcmVuZGVyLCBlcXVpdmFsZW50XG4gKiB0byBvbmUgdGFzayAoYHNldFRpbWVvdXRgKSBhZnRlciB0aGUgbmV4dCBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lYC5cbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyB1c2VmdWwgZm9yIHR1bmluZyB0aGUgZmlyc3QtcmVuZGVyIHBlcmZvcm1hbmNlIG9mIGFuXG4gKiBlbGVtZW50IG9yIGFwcGxpY2F0aW9uIGJ5IGRlZmVycmluZyBub24tY3JpdGljYWwgd29yayB1bnRpbCBhZnRlciB0aGVcbiAqIGZpcnN0IHBhaW50LiAgVHlwaWNhbCBub24tcmVuZGVyLWNyaXRpY2FsIHdvcmsgbWF5IGluY2x1ZGUgYWRkaW5nIFVJXG4gKiBldmVudCBsaXN0ZW5lcnMgYW5kIGFyaWEgYXR0cmlidXRlcy5cbiAqXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgQ29udGV4dCBvYmplY3QgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHdpbGwgYmUgYm91bmQgdG9cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oLi4uKik6dm9pZH0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb25cbiAqIEBwYXJhbSB7IUFycmF5PX0gYXJncyBBbiBhcnJheSBvZiBhcmd1bWVudHMgdG8gY2FsbCB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gd2l0aFxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFmdGVyTmV4dFJlbmRlcihjb250ZXh0LCBjYWxsYmFjaywgYXJncykge1xuICBpZiAoIXNjaGVkdWxlZCkge1xuICAgIHNjaGVkdWxlKCk7XG4gIH1cbiAgYWZ0ZXJSZW5kZXJRdWV1ZS5wdXNoKFtjb250ZXh0LCBjYWxsYmFjaywgYXJnc10pO1xufVxuXG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG5mdW5jdGlvbiByZXNvbHZlKCkge1xuICBkb2N1bWVudC5ib2R5LnJlbW92ZUF0dHJpYnV0ZSgndW5yZXNvbHZlZCcpO1xufVxuXG5pZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2ludGVyYWN0aXZlJyB8fCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gIHJlc29sdmUoKTtcbn0gZWxzZSB7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgcmVzb2x2ZSk7XG59XG5cbmV4cG9ydCB7fTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgJy4vYm9vdC5qcyc7XG5cbmZ1bmN0aW9uIG5ld1NwbGljZShpbmRleCwgcmVtb3ZlZCwgYWRkZWRDb3VudCkge1xuICByZXR1cm4ge1xuICAgIGluZGV4OiBpbmRleCxcbiAgICByZW1vdmVkOiByZW1vdmVkLFxuICAgIGFkZGVkQ291bnQ6IGFkZGVkQ291bnRcbiAgfTtcbn1cblxuY29uc3QgRURJVF9MRUFWRSA9IDA7XG5jb25zdCBFRElUX1VQREFURSA9IDE7XG5jb25zdCBFRElUX0FERCA9IDI7XG5jb25zdCBFRElUX0RFTEVURSA9IDM7XG5cbi8vIE5vdGU6IFRoaXMgZnVuY3Rpb24gaXMgKmJhc2VkKiBvbiB0aGUgY29tcHV0YXRpb24gb2YgdGhlIExldmVuc2h0ZWluXG4vLyBcImVkaXRcIiBkaXN0YW5jZS4gVGhlIG9uZSBjaGFuZ2UgaXMgdGhhdCBcInVwZGF0ZXNcIiBhcmUgdHJlYXRlZCBhcyB0d29cbi8vIGVkaXRzIC0gbm90IG9uZS4gV2l0aCBBcnJheSBzcGxpY2VzLCBhbiB1cGRhdGUgaXMgcmVhbGx5IGEgZGVsZXRlXG4vLyBmb2xsb3dlZCBieSBhbiBhZGQuIEJ5IHJldGFpbmluZyB0aGlzLCB3ZSBvcHRpbWl6ZSBmb3IgXCJrZWVwaW5nXCIgdGhlXG4vLyBtYXhpbXVtIGFycmF5IGl0ZW1zIGluIHRoZSBvcmlnaW5hbCBhcnJheS4gRm9yIGV4YW1wbGU6XG4vL1xuLy8gICAneHh4eDEyMycgLT4gJzEyM3l5eXknXG4vL1xuLy8gV2l0aCAxLWVkaXQgdXBkYXRlcywgdGhlIHNob3J0ZXN0IHBhdGggd291bGQgYmUganVzdCB0byB1cGRhdGUgYWxsIHNldmVuXG4vLyBjaGFyYWN0ZXJzLiBXaXRoIDItZWRpdCB1cGRhdGVzLCB3ZSBkZWxldGUgNCwgbGVhdmUgMywgYW5kIGFkZCA0LiBUaGlzXG4vLyBsZWF2ZXMgdGhlIHN1YnN0cmluZyAnMTIzJyBpbnRhY3QuXG5mdW5jdGlvbiBjYWxjRWRpdERpc3RhbmNlcyhjdXJyZW50LCBjdXJyZW50U3RhcnQsIGN1cnJlbnRFbmQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkLCBvbGRTdGFydCwgb2xkRW5kKSB7XG4gIC8vIFwiRGVsZXRpb25cIiBjb2x1bW5zXG4gIGxldCByb3dDb3VudCA9IG9sZEVuZCAtIG9sZFN0YXJ0ICsgMTtcbiAgbGV0IGNvbHVtbkNvdW50ID0gY3VycmVudEVuZCAtIGN1cnJlbnRTdGFydCArIDE7XG4gIGxldCBkaXN0YW5jZXMgPSBuZXcgQXJyYXkocm93Q291bnQpO1xuXG4gIC8vIFwiQWRkaXRpb25cIiByb3dzLiBJbml0aWFsaXplIG51bGwgY29sdW1uLlxuICBmb3IgKGxldCBpID0gMDsgaSA8IHJvd0NvdW50OyBpKyspIHtcbiAgICBkaXN0YW5jZXNbaV0gPSBuZXcgQXJyYXkoY29sdW1uQ291bnQpO1xuICAgIGRpc3RhbmNlc1tpXVswXSA9IGk7XG4gIH1cblxuICAvLyBJbml0aWFsaXplIG51bGwgcm93XG4gIGZvciAobGV0IGogPSAwOyBqIDwgY29sdW1uQ291bnQ7IGorKylcbiAgICBkaXN0YW5jZXNbMF1bal0gPSBqO1xuXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgcm93Q291bnQ7IGkrKykge1xuICAgIGZvciAobGV0IGogPSAxOyBqIDwgY29sdW1uQ291bnQ7IGorKykge1xuICAgICAgaWYgKGVxdWFscyhjdXJyZW50W2N1cnJlbnRTdGFydCArIGogLSAxXSwgb2xkW29sZFN0YXJ0ICsgaSAtIDFdKSlcbiAgICAgICAgZGlzdGFuY2VzW2ldW2pdID0gZGlzdGFuY2VzW2kgLSAxXVtqIC0gMV07XG4gICAgICBlbHNlIHtcbiAgICAgICAgbGV0IG5vcnRoID0gZGlzdGFuY2VzW2kgLSAxXVtqXSArIDE7XG4gICAgICAgIGxldCB3ZXN0ID0gZGlzdGFuY2VzW2ldW2ogLSAxXSArIDE7XG4gICAgICAgIGRpc3RhbmNlc1tpXVtqXSA9IG5vcnRoIDwgd2VzdCA/IG5vcnRoIDogd2VzdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGlzdGFuY2VzO1xufVxuXG4vLyBUaGlzIHN0YXJ0cyBhdCB0aGUgZmluYWwgd2VpZ2h0LCBhbmQgd2Fsa3MgXCJiYWNrd2FyZFwiIGJ5IGZpbmRpbmdcbi8vIHRoZSBtaW5pbXVtIHByZXZpb3VzIHdlaWdodCByZWN1cnNpdmVseSB1bnRpbCB0aGUgb3JpZ2luIG9mIHRoZSB3ZWlnaHRcbi8vIG1hdHJpeC5cbmZ1bmN0aW9uIHNwbGljZU9wZXJhdGlvbnNGcm9tRWRpdERpc3RhbmNlcyhkaXN0YW5jZXMpIHtcbiAgbGV0IGkgPSBkaXN0YW5jZXMubGVuZ3RoIC0gMTtcbiAgbGV0IGogPSBkaXN0YW5jZXNbMF0ubGVuZ3RoIC0gMTtcbiAgbGV0IGN1cnJlbnQgPSBkaXN0YW5jZXNbaV1bal07XG4gIGxldCBlZGl0cyA9IFtdO1xuICB3aGlsZSAoaSA+IDAgfHwgaiA+IDApIHtcbiAgICBpZiAoaSA9PSAwKSB7XG4gICAgICBlZGl0cy5wdXNoKEVESVRfQUREKTtcbiAgICAgIGotLTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoaiA9PSAwKSB7XG4gICAgICBlZGl0cy5wdXNoKEVESVRfREVMRVRFKTtcbiAgICAgIGktLTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBsZXQgbm9ydGhXZXN0ID0gZGlzdGFuY2VzW2kgLSAxXVtqIC0gMV07XG4gICAgbGV0IHdlc3QgPSBkaXN0YW5jZXNbaSAtIDFdW2pdO1xuICAgIGxldCBub3J0aCA9IGRpc3RhbmNlc1tpXVtqIC0gMV07XG5cbiAgICBsZXQgbWluO1xuICAgIGlmICh3ZXN0IDwgbm9ydGgpXG4gICAgICBtaW4gPSB3ZXN0IDwgbm9ydGhXZXN0ID8gd2VzdCA6IG5vcnRoV2VzdDtcbiAgICBlbHNlXG4gICAgICBtaW4gPSBub3J0aCA8IG5vcnRoV2VzdCA/IG5vcnRoIDogbm9ydGhXZXN0O1xuXG4gICAgaWYgKG1pbiA9PSBub3J0aFdlc3QpIHtcbiAgICAgIGlmIChub3J0aFdlc3QgPT0gY3VycmVudCkge1xuICAgICAgICBlZGl0cy5wdXNoKEVESVRfTEVBVkUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWRpdHMucHVzaChFRElUX1VQREFURSk7XG4gICAgICAgIGN1cnJlbnQgPSBub3J0aFdlc3Q7XG4gICAgICB9XG4gICAgICBpLS07XG4gICAgICBqLS07XG4gICAgfSBlbHNlIGlmIChtaW4gPT0gd2VzdCkge1xuICAgICAgZWRpdHMucHVzaChFRElUX0RFTEVURSk7XG4gICAgICBpLS07XG4gICAgICBjdXJyZW50ID0gd2VzdDtcbiAgICB9IGVsc2Uge1xuICAgICAgZWRpdHMucHVzaChFRElUX0FERCk7XG4gICAgICBqLS07XG4gICAgICBjdXJyZW50ID0gbm9ydGg7XG4gICAgfVxuICB9XG5cbiAgZWRpdHMucmV2ZXJzZSgpO1xuICByZXR1cm4gZWRpdHM7XG59XG5cbi8qKlxuICogU3BsaWNlIFByb2plY3Rpb24gZnVuY3Rpb25zOlxuICpcbiAqIEEgc3BsaWNlIG1hcCBpcyBhIHJlcHJlc2VudGF0aW9uIG9mIGhvdyBhIHByZXZpb3VzIGFycmF5IG9mIGl0ZW1zXG4gKiB3YXMgdHJhbnNmb3JtZWQgaW50byBhIG5ldyBhcnJheSBvZiBpdGVtcy4gQ29uY2VwdHVhbGx5IGl0IGlzIGEgbGlzdCBvZlxuICogdHVwbGVzIG9mXG4gKlxuICogICA8aW5kZXgsIHJlbW92ZWQsIGFkZGVkQ291bnQ+XG4gKlxuICogd2hpY2ggYXJlIGtlcHQgaW4gYXNjZW5kaW5nIGluZGV4IG9yZGVyIG9mLiBUaGUgdHVwbGUgcmVwcmVzZW50cyB0aGF0IGF0XG4gKiB0aGUgfGluZGV4fCwgfHJlbW92ZWR8IHNlcXVlbmNlIG9mIGl0ZW1zIHdlcmUgcmVtb3ZlZCwgYW5kIGNvdW50aW5nIGZvcndhcmRcbiAqIGZyb20gfGluZGV4fCwgfGFkZGVkQ291bnR8IGl0ZW1zIHdlcmUgYWRkZWQuXG4gKi9cblxuLyoqXG4gKiBMYWNraW5nIGluZGl2aWR1YWwgc3BsaWNlIG11dGF0aW9uIGluZm9ybWF0aW9uLCB0aGUgbWluaW1hbCBzZXQgb2ZcbiAqIHNwbGljZXMgY2FuIGJlIHN5bnRoZXNpemVkIGdpdmVuIHRoZSBwcmV2aW91cyBzdGF0ZSBhbmQgZmluYWwgc3RhdGUgb2YgYW5cbiAqIGFycmF5LiBUaGUgYmFzaWMgYXBwcm9hY2ggaXMgdG8gY2FsY3VsYXRlIHRoZSBlZGl0IGRpc3RhbmNlIG1hdHJpeCBhbmRcbiAqIGNob29zZSB0aGUgc2hvcnRlc3QgcGF0aCB0aHJvdWdoIGl0LlxuICpcbiAqIENvbXBsZXhpdHk6IE8obCAqIHApXG4gKiAgIGw6IFRoZSBsZW5ndGggb2YgdGhlIGN1cnJlbnQgYXJyYXlcbiAqICAgcDogVGhlIGxlbmd0aCBvZiB0aGUgb2xkIGFycmF5XG4gKlxuICogQHBhcmFtIHshQXJyYXl9IGN1cnJlbnQgVGhlIGN1cnJlbnQgXCJjaGFuZ2VkXCIgYXJyYXkgZm9yIHdoaWNoIHRvXG4gKiBjYWxjdWxhdGUgc3BsaWNlcy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50U3RhcnQgU3RhcnRpbmcgaW5kZXggaW4gdGhlIGBjdXJyZW50YCBhcnJheSBmb3JcbiAqIHdoaWNoIHNwbGljZXMgYXJlIGNhbGN1bGF0ZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gY3VycmVudEVuZCBFbmRpbmcgaW5kZXggaW4gdGhlIGBjdXJyZW50YCBhcnJheSBmb3JcbiAqIHdoaWNoIHNwbGljZXMgYXJlIGNhbGN1bGF0ZWQuXG4gKiBAcGFyYW0geyFBcnJheX0gb2xkIFRoZSBvcmlnaW5hbCBcInVuY2hhbmdlZFwiIGFycmF5IHRvIGNvbXBhcmUgYGN1cnJlbnRgXG4gKiBhZ2FpbnN0IHRvIGRldGVybWluZSBzcGxpY2VzLlxuICogQHBhcmFtIHtudW1iZXJ9IG9sZFN0YXJ0IFN0YXJ0aW5nIGluZGV4IGluIHRoZSBgb2xkYCBhcnJheSBmb3JcbiAqIHdoaWNoIHNwbGljZXMgYXJlIGNhbGN1bGF0ZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gb2xkRW5kIEVuZGluZyBpbmRleCBpbiB0aGUgYG9sZGAgYXJyYXkgZm9yXG4gKiB3aGljaCBzcGxpY2VzIGFyZSBjYWxjdWxhdGVkLlxuICogQHJldHVybiB7IUFycmF5fSBSZXR1cm5zIGFuIGFycmF5IG9mIHNwbGljZSByZWNvcmQgb2JqZWN0cy4gRWFjaCBvZiB0aGVzZVxuICogY29udGFpbnM6IGBpbmRleGAgdGhlIGxvY2F0aW9uIHdoZXJlIHRoZSBzcGxpY2Ugb2NjdXJyZWQ7IGByZW1vdmVkYFxuICogdGhlIGFycmF5IG9mIHJlbW92ZWQgaXRlbXMgZnJvbSB0aGlzIGxvY2F0aW9uOyBgYWRkZWRDb3VudGAgdGhlIG51bWJlclxuICogb2YgaXRlbXMgYWRkZWQgYXQgdGhpcyBsb2NhdGlvbi5cbiAqL1xuZnVuY3Rpb24gY2FsY1NwbGljZXMoY3VycmVudCwgY3VycmVudFN0YXJ0LCBjdXJyZW50RW5kLFxuICAgICAgICAgICAgICAgICAgICAgIG9sZCwgb2xkU3RhcnQsIG9sZEVuZCkge1xuICBsZXQgcHJlZml4Q291bnQgPSAwO1xuICBsZXQgc3VmZml4Q291bnQgPSAwO1xuICBsZXQgc3BsaWNlO1xuXG4gIGxldCBtaW5MZW5ndGggPSBNYXRoLm1pbihjdXJyZW50RW5kIC0gY3VycmVudFN0YXJ0LCBvbGRFbmQgLSBvbGRTdGFydCk7XG4gIGlmIChjdXJyZW50U3RhcnQgPT0gMCAmJiBvbGRTdGFydCA9PSAwKVxuICAgIHByZWZpeENvdW50ID0gc2hhcmVkUHJlZml4KGN1cnJlbnQsIG9sZCwgbWluTGVuZ3RoKTtcblxuICBpZiAoY3VycmVudEVuZCA9PSBjdXJyZW50Lmxlbmd0aCAmJiBvbGRFbmQgPT0gb2xkLmxlbmd0aClcbiAgICBzdWZmaXhDb3VudCA9IHNoYXJlZFN1ZmZpeChjdXJyZW50LCBvbGQsIG1pbkxlbmd0aCAtIHByZWZpeENvdW50KTtcblxuICBjdXJyZW50U3RhcnQgKz0gcHJlZml4Q291bnQ7XG4gIG9sZFN0YXJ0ICs9IHByZWZpeENvdW50O1xuICBjdXJyZW50RW5kIC09IHN1ZmZpeENvdW50O1xuICBvbGRFbmQgLT0gc3VmZml4Q291bnQ7XG5cbiAgaWYgKGN1cnJlbnRFbmQgLSBjdXJyZW50U3RhcnQgPT0gMCAmJiBvbGRFbmQgLSBvbGRTdGFydCA9PSAwKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAoY3VycmVudFN0YXJ0ID09IGN1cnJlbnRFbmQpIHtcbiAgICBzcGxpY2UgPSBuZXdTcGxpY2UoY3VycmVudFN0YXJ0LCBbXSwgMCk7XG4gICAgd2hpbGUgKG9sZFN0YXJ0IDwgb2xkRW5kKVxuICAgICAgc3BsaWNlLnJlbW92ZWQucHVzaChvbGRbb2xkU3RhcnQrK10pO1xuXG4gICAgcmV0dXJuIFsgc3BsaWNlIF07XG4gIH0gZWxzZSBpZiAob2xkU3RhcnQgPT0gb2xkRW5kKVxuICAgIHJldHVybiBbIG5ld1NwbGljZShjdXJyZW50U3RhcnQsIFtdLCBjdXJyZW50RW5kIC0gY3VycmVudFN0YXJ0KSBdO1xuXG4gIGxldCBvcHMgPSBzcGxpY2VPcGVyYXRpb25zRnJvbUVkaXREaXN0YW5jZXMoXG4gICAgICBjYWxjRWRpdERpc3RhbmNlcyhjdXJyZW50LCBjdXJyZW50U3RhcnQsIGN1cnJlbnRFbmQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sZCwgb2xkU3RhcnQsIG9sZEVuZCkpO1xuXG4gIHNwbGljZSA9IHVuZGVmaW5lZDtcbiAgbGV0IHNwbGljZXMgPSBbXTtcbiAgbGV0IGluZGV4ID0gY3VycmVudFN0YXJ0O1xuICBsZXQgb2xkSW5kZXggPSBvbGRTdGFydDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHMubGVuZ3RoOyBpKyspIHtcbiAgICBzd2l0Y2gob3BzW2ldKSB7XG4gICAgICBjYXNlIEVESVRfTEVBVkU6XG4gICAgICAgIGlmIChzcGxpY2UpIHtcbiAgICAgICAgICBzcGxpY2VzLnB1c2goc3BsaWNlKTtcbiAgICAgICAgICBzcGxpY2UgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpbmRleCsrO1xuICAgICAgICBvbGRJbmRleCsrO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRURJVF9VUERBVEU6XG4gICAgICAgIGlmICghc3BsaWNlKVxuICAgICAgICAgIHNwbGljZSA9IG5ld1NwbGljZShpbmRleCwgW10sIDApO1xuXG4gICAgICAgIHNwbGljZS5hZGRlZENvdW50Kys7XG4gICAgICAgIGluZGV4Kys7XG5cbiAgICAgICAgc3BsaWNlLnJlbW92ZWQucHVzaChvbGRbb2xkSW5kZXhdKTtcbiAgICAgICAgb2xkSW5kZXgrKztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEVESVRfQUREOlxuICAgICAgICBpZiAoIXNwbGljZSlcbiAgICAgICAgICBzcGxpY2UgPSBuZXdTcGxpY2UoaW5kZXgsIFtdLCAwKTtcblxuICAgICAgICBzcGxpY2UuYWRkZWRDb3VudCsrO1xuICAgICAgICBpbmRleCsrO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRURJVF9ERUxFVEU6XG4gICAgICAgIGlmICghc3BsaWNlKVxuICAgICAgICAgIHNwbGljZSA9IG5ld1NwbGljZShpbmRleCwgW10sIDApO1xuXG4gICAgICAgIHNwbGljZS5yZW1vdmVkLnB1c2gob2xkW29sZEluZGV4XSk7XG4gICAgICAgIG9sZEluZGV4Kys7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzcGxpY2UpIHtcbiAgICBzcGxpY2VzLnB1c2goc3BsaWNlKTtcbiAgfVxuICByZXR1cm4gc3BsaWNlcztcbn1cblxuZnVuY3Rpb24gc2hhcmVkUHJlZml4KGN1cnJlbnQsIG9sZCwgc2VhcmNoTGVuZ3RoKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2VhcmNoTGVuZ3RoOyBpKyspXG4gICAgaWYgKCFlcXVhbHMoY3VycmVudFtpXSwgb2xkW2ldKSlcbiAgICAgIHJldHVybiBpO1xuICByZXR1cm4gc2VhcmNoTGVuZ3RoO1xufVxuXG5mdW5jdGlvbiBzaGFyZWRTdWZmaXgoY3VycmVudCwgb2xkLCBzZWFyY2hMZW5ndGgpIHtcbiAgbGV0IGluZGV4MSA9IGN1cnJlbnQubGVuZ3RoO1xuICBsZXQgaW5kZXgyID0gb2xkLmxlbmd0aDtcbiAgbGV0IGNvdW50ID0gMDtcbiAgd2hpbGUgKGNvdW50IDwgc2VhcmNoTGVuZ3RoICYmIGVxdWFscyhjdXJyZW50Wy0taW5kZXgxXSwgb2xkWy0taW5kZXgyXSkpXG4gICAgY291bnQrKztcblxuICByZXR1cm4gY291bnQ7XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBvZiBzcGxpY2UgcmVjb3JkcyBpbmRpY2F0aW5nIHRoZSBtaW5pbXVtIGVkaXRzIHJlcXVpcmVkXG4gKiB0byB0cmFuc2Zvcm0gdGhlIGBwcmV2aW91c2AgYXJyYXkgaW50byB0aGUgYGN1cnJlbnRgIGFycmF5LlxuICpcbiAqIFNwbGljZSByZWNvcmRzIGFyZSBvcmRlcmVkIGJ5IGluZGV4IGFuZCBjb250YWluIHRoZSBmb2xsb3dpbmcgZmllbGRzOlxuICogLSBgaW5kZXhgOiBpbmRleCB3aGVyZSBlZGl0IHN0YXJ0ZWRcbiAqIC0gYHJlbW92ZWRgOiBhcnJheSBvZiByZW1vdmVkIGl0ZW1zIGZyb20gdGhpcyBpbmRleFxuICogLSBgYWRkZWRDb3VudGA6IG51bWJlciBvZiBpdGVtcyBhZGRlZCBhdCB0aGlzIGluZGV4XG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyBiYXNlZCBvbiB0aGUgTGV2ZW5zaHRlaW4gXCJtaW5pbXVtIGVkaXQgZGlzdGFuY2VcIlxuICogYWxnb3JpdGhtLiBOb3RlIHRoYXQgdXBkYXRlcyBhcmUgdHJlYXRlZCBhcyByZW1vdmFsIGZvbGxvd2VkIGJ5IGFkZGl0aW9uLlxuICpcbiAqIFRoZSB3b3JzdC1jYXNlIHRpbWUgY29tcGxleGl0eSBvZiB0aGlzIGFsZ29yaXRobSBpcyBgTyhsICogcClgXG4gKiAgIGw6IFRoZSBsZW5ndGggb2YgdGhlIGN1cnJlbnQgYXJyYXlcbiAqICAgcDogVGhlIGxlbmd0aCBvZiB0aGUgcHJldmlvdXMgYXJyYXlcbiAqXG4gKiBIb3dldmVyLCB0aGUgd29yc3QtY2FzZSBjb21wbGV4aXR5IGlzIHJlZHVjZWQgYnkgYW4gYE8obilgIG9wdGltaXphdGlvblxuICogdG8gZGV0ZWN0IGFueSBzaGFyZWQgcHJlZml4ICYgc3VmZml4IGJldHdlZW4gdGhlIHR3byBhcnJheXMgYW5kIG9ubHlcbiAqIHBlcmZvcm0gdGhlIG1vcmUgZXhwZW5zaXZlIG1pbmltdW0gZWRpdCBkaXN0YW5jZSBjYWxjdWxhdGlvbiBvdmVyIHRoZVxuICogbm9uLXNoYXJlZCBwb3J0aW9ucyBvZiB0aGUgYXJyYXlzLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHshQXJyYXl9IGN1cnJlbnQgVGhlIFwiY2hhbmdlZFwiIGFycmF5IGZvciB3aGljaCBzcGxpY2VzIHdpbGwgYmVcbiAqIGNhbGN1bGF0ZWQuXG4gKiBAcGFyYW0geyFBcnJheX0gcHJldmlvdXMgVGhlIFwidW5jaGFuZ2VkXCIgb3JpZ2luYWwgYXJyYXkgdG8gY29tcGFyZVxuICogYGN1cnJlbnRgIGFnYWluc3QgdG8gZGV0ZXJtaW5lIHRoZSBzcGxpY2VzLlxuICogQHJldHVybiB7IUFycmF5fSBSZXR1cm5zIGFuIGFycmF5IG9mIHNwbGljZSByZWNvcmQgb2JqZWN0cy4gRWFjaCBvZiB0aGVzZVxuICogY29udGFpbnM6IGBpbmRleGAgdGhlIGxvY2F0aW9uIHdoZXJlIHRoZSBzcGxpY2Ugb2NjdXJyZWQ7IGByZW1vdmVkYFxuICogdGhlIGFycmF5IG9mIHJlbW92ZWQgaXRlbXMgZnJvbSB0aGlzIGxvY2F0aW9uOyBgYWRkZWRDb3VudGAgdGhlIG51bWJlclxuICogb2YgaXRlbXMgYWRkZWQgYXQgdGhpcyBsb2NhdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZVNwbGljZXMoY3VycmVudCwgcHJldmlvdXMpIHtcbiAgcmV0dXJuIGNhbGNTcGxpY2VzKGN1cnJlbnQsIDAsIGN1cnJlbnQubGVuZ3RoLCBwcmV2aW91cywgMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXMubGVuZ3RoKTtcbn1cblxuZnVuY3Rpb24gZXF1YWxzKGN1cnJlbnRWYWx1ZSwgcHJldmlvdXNWYWx1ZSkge1xuICByZXR1cm4gY3VycmVudFZhbHVlID09PSBwcmV2aW91c1ZhbHVlO1xufVxuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbmltcG9ydCAnLi9ib290LmpzJztcblxuaW1wb3J0IHsgY2FsY3VsYXRlU3BsaWNlcyB9IGZyb20gJy4vYXJyYXktc3BsaWNlLmpzJztcbmltcG9ydCB7IG1pY3JvVGFzayB9IGZyb20gJy4vYXN5bmMuanMnO1xuaW1wb3J0IHsgd3JhcCB9IGZyb20gJy4vd3JhcC5qcyc7XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGBub2RlYCBpcyBhIHNsb3QgZWxlbWVudFxuICogQHBhcmFtIHshTm9kZX0gbm9kZSBOb2RlIHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIGBub2RlYCBpcyBhIHNsb3RcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGlzU2xvdChub2RlKSB7XG4gIHJldHVybiAobm9kZS5sb2NhbE5hbWUgPT09ICdzbG90Jyk7XG59XG5cbi8qKlxuICogQ2xhc3MgdGhhdCBsaXN0ZW5zIGZvciBjaGFuZ2VzIChhZGRpdGlvbnMgb3IgcmVtb3ZhbHMpIHRvXG4gKiBcImZsYXR0ZW5lZCBub2Rlc1wiIG9uIGEgZ2l2ZW4gYG5vZGVgLiBUaGUgbGlzdCBvZiBmbGF0dGVuZWQgbm9kZXMgY29uc2lzdHNcbiAqIG9mIGEgbm9kZSdzIGNoaWxkcmVuIGFuZCwgZm9yIGFueSBjaGlsZHJlbiB0aGF0IGFyZSBgPHNsb3Q+YCBlbGVtZW50cyxcbiAqIHRoZSBleHBhbmRlZCBmbGF0dGVuZWQgbGlzdCBvZiBgYXNzaWduZWROb2Rlc2AuXG4gKiBGb3IgZXhhbXBsZSwgaWYgdGhlIG9ic2VydmVkIG5vZGUgaGFzIGNoaWxkcmVuIGA8YT48L2E+PHNsb3Q+PC9zbG90PjxiPjwvYj5gXG4gKiBhbmQgdGhlIGA8c2xvdD5gIGhhcyBvbmUgYDxkaXY+YCBhc3NpZ25lZCB0byBpdCwgdGhlbiB0aGUgZmxhdHRlbmVkXG4gKiBub2RlcyBsaXN0IGlzIGA8YT48L2E+PGRpdj48L2Rpdj48Yj48L2I+YC4gSWYgdGhlIGA8c2xvdD5gIGhhcyBvdGhlclxuICogYDxzbG90PmAgZWxlbWVudHMgYXNzaWduZWQgdG8gaXQsIHRoZXNlIGFyZSBmbGF0dGVuZWQgYXMgd2VsbC5cbiAqXG4gKiBUaGUgcHJvdmlkZWQgYGNhbGxiYWNrYCBpcyBjYWxsZWQgd2hlbmV2ZXIgYW55IGNoYW5nZSB0byB0aGlzIGxpc3RcbiAqIG9mIGZsYXR0ZW5lZCBub2RlcyBvY2N1cnMsIHdoZXJlIGFuIGFkZGl0aW9uIG9yIHJlbW92YWwgb2YgYSBub2RlIGlzXG4gKiBjb25zaWRlcmVkIGEgY2hhbmdlLiBUaGUgYGNhbGxiYWNrYCBpcyBjYWxsZWQgd2l0aCBvbmUgYXJndW1lbnQsIGFuIG9iamVjdFxuICogY29udGFpbmluZyBhbiBhcnJheSBvZiBhbnkgYGFkZGVkTm9kZXNgIGFuZCBgcmVtb3ZlZE5vZGVzYC5cbiAqXG4gKiBOb3RlOiB0aGUgY2FsbGJhY2sgaXMgY2FsbGVkIGFzeW5jaHJvbm91cyB0byBhbnkgY2hhbmdlc1xuICogYXQgYSBtaWNyb3Rhc2sgY2hlY2twb2ludC4gVGhpcyBpcyBiZWNhdXNlIG9ic2VydmF0aW9uIGlzIHBlcmZvcm1lZCB1c2luZ1xuICogYE11dGF0aW9uT2JzZXJ2ZXJgIGFuZCB0aGUgYDxzbG90PmAgZWxlbWVudCdzIGBzbG90Y2hhbmdlYCBldmVudCB3aGljaFxuICogYXJlIGFzeW5jaHJvbm91cy5cbiAqXG4gKiBBbiBleGFtcGxlOlxuICogYGBganNcbiAqIGNsYXNzIFRlc3RTZWxmT2JzZXJ2ZSBleHRlbmRzIFBvbHltZXJFbGVtZW50IHtcbiAqICAgc3RhdGljIGdldCBpcygpIHsgcmV0dXJuICd0ZXN0LXNlbGYtb2JzZXJ2ZSc7fVxuICogICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAqICAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICogICAgIHRoaXMuX29ic2VydmVyID0gbmV3IEZsYXR0ZW5lZE5vZGVzT2JzZXJ2ZXIodGhpcywgKGluZm8pID0+IHtcbiAqICAgICAgIHRoaXMuaW5mbyA9IGluZm87XG4gKiAgICAgfSk7XG4gKiAgIH1cbiAqICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gKiAgICAgc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAqICAgICB0aGlzLl9vYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gKiAgIH1cbiAqIH1cbiAqIGN1c3RvbUVsZW1lbnRzLmRlZmluZShUZXN0U2VsZk9ic2VydmUuaXMsIFRlc3RTZWxmT2JzZXJ2ZSk7XG4gKiBgYGBcbiAqXG4gKiBAc3VtbWFyeSBDbGFzcyB0aGF0IGxpc3RlbnMgZm9yIGNoYW5nZXMgKGFkZGl0aW9ucyBvciByZW1vdmFscykgdG9cbiAqIFwiZmxhdHRlbmVkIG5vZGVzXCIgb24gYSBnaXZlbiBgbm9kZWAuXG4gKiBAaW1wbGVtZW50cyB7UG9seW1lckRvbUFwaS5PYnNlcnZlSGFuZGxlfVxuICovXG5leHBvcnQgbGV0IEZsYXR0ZW5lZE5vZGVzT2JzZXJ2ZXIgPSBjbGFzcyB7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGxpc3Qgb2YgZmxhdHRlbmVkIG5vZGVzIGZvciB0aGUgZ2l2ZW4gYG5vZGVgLlxuICAgKiBUaGlzIGxpc3QgY29uc2lzdHMgb2YgYSBub2RlJ3MgY2hpbGRyZW4gYW5kLCBmb3IgYW55IGNoaWxkcmVuXG4gICAqIHRoYXQgYXJlIGA8c2xvdD5gIGVsZW1lbnRzLCB0aGUgZXhwYW5kZWQgZmxhdHRlbmVkIGxpc3Qgb2YgYGFzc2lnbmVkTm9kZXNgLlxuICAgKiBGb3IgZXhhbXBsZSwgaWYgdGhlIG9ic2VydmVkIG5vZGUgaGFzIGNoaWxkcmVuIGA8YT48L2E+PHNsb3Q+PC9zbG90PjxiPjwvYj5gXG4gICAqIGFuZCB0aGUgYDxzbG90PmAgaGFzIG9uZSBgPGRpdj5gIGFzc2lnbmVkIHRvIGl0LCB0aGVuIHRoZSBmbGF0dGVuZWRcbiAgICogbm9kZXMgbGlzdCBpcyBgPGE+PC9hPjxkaXY+PC9kaXY+PGI+PC9iPmAuIElmIHRoZSBgPHNsb3Q+YCBoYXMgb3RoZXJcbiAgICogYDxzbG90PmAgZWxlbWVudHMgYXNzaWduZWQgdG8gaXQsIHRoZXNlIGFyZSBmbGF0dGVuZWQgYXMgd2VsbC5cbiAgICpcbiAgICogQHBhcmFtIHshSFRNTEVsZW1lbnR8IUhUTUxTbG90RWxlbWVudH0gbm9kZSBUaGUgbm9kZSBmb3Igd2hpY2ggdG9cbiAgICogICAgICByZXR1cm4gdGhlIGxpc3Qgb2YgZmxhdHRlbmVkIG5vZGVzLlxuICAgKiBAcmV0dXJuIHshQXJyYXk8IU5vZGU+fSBUaGUgbGlzdCBvZiBmbGF0dGVuZWQgbm9kZXMgZm9yIHRoZSBnaXZlbiBgbm9kZWAuXG4gICAqIEBub2NvbGxhcHNlIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtY29tcGlsZXIvaXNzdWVzLzI3NjNcbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBzdGF0aWMgZ2V0RmxhdHRlbmVkTm9kZXMobm9kZSkge1xuICAgIGNvbnN0IHdyYXBwZWQgPSB3cmFwKG5vZGUpO1xuICAgIGlmIChpc1Nsb3Qobm9kZSkpIHtcbiAgICAgIG5vZGUgPSAvKiogQHR5cGUgeyFIVE1MU2xvdEVsZW1lbnR9ICovKG5vZGUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtYXNzaWduXG4gICAgICByZXR1cm4gd3JhcHBlZC5hc3NpZ25lZE5vZGVzKHtmbGF0dGVuOiB0cnVlfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBBcnJheS5mcm9tKHdyYXBwZWQuY2hpbGROb2RlcykubWFwKChub2RlKSA9PiB7XG4gICAgICAgIGlmIChpc1Nsb3Qobm9kZSkpIHtcbiAgICAgICAgICBub2RlID0gLyoqIEB0eXBlIHshSFRNTFNsb3RFbGVtZW50fSAqLyhub2RlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWFzc2lnblxuICAgICAgICAgIHJldHVybiB3cmFwKG5vZGUpLmFzc2lnbmVkTm9kZXMoe2ZsYXR0ZW46IHRydWV9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gW25vZGVdO1xuICAgICAgICB9XG4gICAgICB9KS5yZWR1Y2UoKGEsIGIpID0+IGEuY29uY2F0KGIpLCBbXSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUhUTUxFbGVtZW50fSB0YXJnZXQgTm9kZSBvbiB3aGljaCB0byBsaXN0ZW4gZm9yIGNoYW5nZXMuXG4gICAqIEBwYXJhbSB7P2Z1bmN0aW9uKHRoaXM6IEVsZW1lbnQsIHsgdGFyZ2V0OiAhSFRNTEVsZW1lbnQsIGFkZGVkTm9kZXM6ICFBcnJheTwhRWxlbWVudD4sIHJlbW92ZWROb2RlczogIUFycmF5PCFFbGVtZW50PiB9KTp2b2lkfSBjYWxsYmFjayBGdW5jdGlvbiBjYWxsZWQgd2hlbiB0aGVyZSBhcmUgYWRkaXRpb25zXG4gICAqIG9yIHJlbW92YWxzIGZyb20gdGhlIHRhcmdldCdzIGxpc3Qgb2YgZmxhdHRlbmVkIG5vZGVzLlxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIGNvbnN0cnVjdG9yKHRhcmdldCwgY2FsbGJhY2spIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7TXV0YXRpb25PYnNlcnZlcn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX3NoYWR5Q2hpbGRyZW5PYnNlcnZlciA9IG51bGw7XG4gICAgLyoqXG4gICAgICogQHR5cGUge011dGF0aW9uT2JzZXJ2ZXJ9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9uYXRpdmVDaGlsZHJlbk9ic2VydmVyID0gbnVsbDtcbiAgICB0aGlzLl9jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7IUhUTUxFbGVtZW50fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fdGFyZ2V0ID0gdGFyZ2V0O1xuICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB0aGlzLl9lZmZlY3RpdmVOb2RlcyA9IFtdO1xuICAgIHRoaXMuX29ic2VydmVyID0gbnVsbDtcbiAgICB0aGlzLl9zY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7ZnVuY3Rpb24oKX1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2JvdW5kU2NoZWR1bGUgPSAoKSA9PiB7XG4gICAgICB0aGlzLl9zY2hlZHVsZSgpO1xuICAgIH07XG4gICAgdGhpcy5jb25uZWN0KCk7XG4gICAgdGhpcy5fc2NoZWR1bGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBY3RpdmF0ZXMgYW4gb2JzZXJ2ZXIuIFRoaXMgbWV0aG9kIGlzIGF1dG9tYXRpY2FsbHkgY2FsbGVkIHdoZW5cbiAgICogYSBgRmxhdHRlbmVkTm9kZXNPYnNlcnZlcmAgaXMgY3JlYXRlZC4gSXQgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIHRvXG4gICAqIHJlLWFjdGl2YXRlIGFuIG9ic2VydmVyIHRoYXQgaGFzIGJlZW4gZGVhY3RpdmF0ZWQgdmlhIHRoZSBgZGlzY29ubmVjdGAgbWV0aG9kLlxuICAgKlxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgY29ubmVjdCgpIHtcbiAgICBpZiAoaXNTbG90KHRoaXMuX3RhcmdldCkpIHtcbiAgICAgIHRoaXMuX2xpc3RlblNsb3RzKFt0aGlzLl90YXJnZXRdKTtcbiAgICB9IGVsc2UgaWYgKHdyYXAodGhpcy5fdGFyZ2V0KS5jaGlsZHJlbikge1xuICAgICAgdGhpcy5fbGlzdGVuU2xvdHMoXG4gICAgICAgICAgLyoqIEB0eXBlIHshTm9kZUxpc3Q8IU5vZGU+fSAqLyAod3JhcCh0aGlzLl90YXJnZXQpLmNoaWxkcmVuKSk7XG4gICAgICBpZiAod2luZG93LlNoYWR5RE9NKSB7XG4gICAgICAgIHRoaXMuX3NoYWR5Q2hpbGRyZW5PYnNlcnZlciA9XG4gICAgICAgICAgd2luZG93LlNoYWR5RE9NLm9ic2VydmVDaGlsZHJlbih0aGlzLl90YXJnZXQsIChtdXRhdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3NNdXRhdGlvbnMobXV0YXRpb25zKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX25hdGl2ZUNoaWxkcmVuT2JzZXJ2ZXIgPVxuICAgICAgICAgIG5ldyBNdXRhdGlvbk9ic2VydmVyKChtdXRhdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3NNdXRhdGlvbnMobXV0YXRpb25zKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fbmF0aXZlQ2hpbGRyZW5PYnNlcnZlci5vYnNlcnZlKHRoaXMuX3RhcmdldCwge2NoaWxkTGlzdDogdHJ1ZX0pO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9jb25uZWN0ZWQgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIERlYWN0aXZhdGVzIHRoZSBmbGF0dGVuZWQgbm9kZXMgb2JzZXJ2ZXIuIEFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2RcbiAgICogdGhlIG9ic2VydmVyIGNhbGxiYWNrIHdpbGwgbm90IGJlIGNhbGxlZCB3aGVuIGNoYW5nZXMgdG8gZmxhdHRlbmVkIG5vZGVzXG4gICAqIG9jY3VyLiBUaGUgYGNvbm5lY3RgIG1ldGhvZCBtYXkgYmUgc3Vic2VxdWVudGx5IGNhbGxlZCB0byByZWFjdGl2YXRlXG4gICAqIHRoZSBvYnNlcnZlci5cbiAgICpcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBkaXNjb25uZWN0KCkge1xuICAgIGlmIChpc1Nsb3QodGhpcy5fdGFyZ2V0KSkge1xuICAgICAgdGhpcy5fdW5saXN0ZW5TbG90cyhbdGhpcy5fdGFyZ2V0XSk7XG4gICAgfSBlbHNlIGlmICh3cmFwKHRoaXMuX3RhcmdldCkuY2hpbGRyZW4pIHtcbiAgICAgIHRoaXMuX3VubGlzdGVuU2xvdHMoXG4gICAgICAgICAgLyoqIEB0eXBlIHshTm9kZUxpc3Q8IU5vZGU+fSAqLyAod3JhcCh0aGlzLl90YXJnZXQpLmNoaWxkcmVuKSk7XG4gICAgICBpZiAod2luZG93LlNoYWR5RE9NICYmIHRoaXMuX3NoYWR5Q2hpbGRyZW5PYnNlcnZlcikge1xuICAgICAgICB3aW5kb3cuU2hhZHlET00udW5vYnNlcnZlQ2hpbGRyZW4odGhpcy5fc2hhZHlDaGlsZHJlbk9ic2VydmVyKTtcbiAgICAgICAgdGhpcy5fc2hhZHlDaGlsZHJlbk9ic2VydmVyID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fbmF0aXZlQ2hpbGRyZW5PYnNlcnZlcikge1xuICAgICAgICB0aGlzLl9uYXRpdmVDaGlsZHJlbk9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgdGhpcy5fbmF0aXZlQ2hpbGRyZW5PYnNlcnZlciA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX2Nvbm5lY3RlZCA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2NoZWR1bGUoKSB7XG4gICAgaWYgKCF0aGlzLl9zY2hlZHVsZWQpIHtcbiAgICAgIHRoaXMuX3NjaGVkdWxlZCA9IHRydWU7XG4gICAgICBtaWNyb1Rhc2sucnVuKCgpID0+IHRoaXMuZmx1c2goKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7QXJyYXk8TXV0YXRpb25SZWNvcmQ+fSBtdXRhdGlvbnMgTXV0YXRpb25zIHNpZ25hbGVkIGJ5IHRoZSBtdXRhdGlvbiBvYnNlcnZlclxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3Byb2Nlc3NNdXRhdGlvbnMobXV0YXRpb25zKSB7XG4gICAgdGhpcy5fcHJvY2Vzc1Nsb3RNdXRhdGlvbnMobXV0YXRpb25zKTtcbiAgICB0aGlzLmZsdXNoKCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtBcnJheTxNdXRhdGlvblJlY29yZD59IG11dGF0aW9ucyBNdXRhdGlvbnMgc2lnbmFsZWQgYnkgdGhlIG11dGF0aW9uIG9ic2VydmVyXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcHJvY2Vzc1Nsb3RNdXRhdGlvbnMobXV0YXRpb25zKSB7XG4gICAgaWYgKG11dGF0aW9ucykge1xuICAgICAgZm9yIChsZXQgaT0wOyBpIDwgbXV0YXRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBtdXRhdGlvbiA9IG11dGF0aW9uc1tpXTtcbiAgICAgICAgaWYgKG11dGF0aW9uLmFkZGVkTm9kZXMpIHtcbiAgICAgICAgICB0aGlzLl9saXN0ZW5TbG90cyhtdXRhdGlvbi5hZGRlZE5vZGVzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobXV0YXRpb24ucmVtb3ZlZE5vZGVzKSB7XG4gICAgICAgICAgdGhpcy5fdW5saXN0ZW5TbG90cyhtdXRhdGlvbi5yZW1vdmVkTm9kZXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZsdXNoZXMgdGhlIG9ic2VydmVyIGNhdXNpbmcgYW55IHBlbmRpbmcgY2hhbmdlcyB0byBiZSBpbW1lZGlhdGVseVxuICAgKiBkZWxpdmVyZWQgdGhlIG9ic2VydmVyIGNhbGxiYWNrLiBCeSBkZWZhdWx0IHRoZXNlIGNoYW5nZXMgYXJlIGRlbGl2ZXJlZFxuICAgKiBhc3luY2hyb25vdXNseSBhdCB0aGUgbmV4dCBtaWNyb3Rhc2sgY2hlY2twb2ludC5cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIGFueSBwZW5kaW5nIGNoYW5nZXMgY2F1c2VkIHRoZSBvYnNlcnZlclxuICAgKiBjYWxsYmFjayB0byBydW4uXG4gICAqL1xuICBmbHVzaCgpIHtcbiAgICBpZiAoIXRoaXMuX2Nvbm5lY3RlZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAod2luZG93LlNoYWR5RE9NKSB7XG4gICAgICBTaGFkeURPTS5mbHVzaCgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbmF0aXZlQ2hpbGRyZW5PYnNlcnZlcikge1xuICAgICAgdGhpcy5fcHJvY2Vzc1Nsb3RNdXRhdGlvbnModGhpcy5fbmF0aXZlQ2hpbGRyZW5PYnNlcnZlci50YWtlUmVjb3JkcygpKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX3NoYWR5Q2hpbGRyZW5PYnNlcnZlcikge1xuICAgICAgdGhpcy5fcHJvY2Vzc1Nsb3RNdXRhdGlvbnModGhpcy5fc2hhZHlDaGlsZHJlbk9ic2VydmVyLnRha2VSZWNvcmRzKCkpO1xuICAgIH1cbiAgICB0aGlzLl9zY2hlZHVsZWQgPSBmYWxzZTtcbiAgICBsZXQgaW5mbyA9IHtcbiAgICAgIHRhcmdldDogdGhpcy5fdGFyZ2V0LFxuICAgICAgYWRkZWROb2RlczogW10sXG4gICAgICByZW1vdmVkTm9kZXM6IFtdXG4gICAgfTtcbiAgICBsZXQgbmV3Tm9kZXMgPSB0aGlzLmNvbnN0cnVjdG9yLmdldEZsYXR0ZW5lZE5vZGVzKHRoaXMuX3RhcmdldCk7XG4gICAgbGV0IHNwbGljZXMgPSBjYWxjdWxhdGVTcGxpY2VzKG5ld05vZGVzLFxuICAgICAgdGhpcy5fZWZmZWN0aXZlTm9kZXMpO1xuICAgIC8vIHByb2Nlc3MgcmVtb3ZhbHNcbiAgICBmb3IgKGxldCBpPTAsIHM7IChpPHNwbGljZXMubGVuZ3RoKSAmJiAocz1zcGxpY2VzW2ldKTsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqPTAsIG47IChqIDwgcy5yZW1vdmVkLmxlbmd0aCkgJiYgKG49cy5yZW1vdmVkW2pdKTsgaisrKSB7XG4gICAgICAgIGluZm8ucmVtb3ZlZE5vZGVzLnB1c2gobik7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIHByb2Nlc3MgYWRkc1xuICAgIGZvciAobGV0IGk9MCwgczsgKGk8c3BsaWNlcy5sZW5ndGgpICYmIChzPXNwbGljZXNbaV0pOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGo9cy5pbmRleDsgaiA8IHMuaW5kZXggKyBzLmFkZGVkQ291bnQ7IGorKykge1xuICAgICAgICBpbmZvLmFkZGVkTm9kZXMucHVzaChuZXdOb2Rlc1tqXSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVwZGF0ZSBjYWNoZVxuICAgIHRoaXMuX2VmZmVjdGl2ZU5vZGVzID0gbmV3Tm9kZXM7XG4gICAgbGV0IGRpZEZsdXNoID0gZmFsc2U7XG4gICAgaWYgKGluZm8uYWRkZWROb2Rlcy5sZW5ndGggfHwgaW5mby5yZW1vdmVkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBkaWRGbHVzaCA9IHRydWU7XG4gICAgICB0aGlzLmNhbGxiYWNrLmNhbGwodGhpcy5fdGFyZ2V0LCBpbmZvKTtcbiAgICB9XG4gICAgcmV0dXJuIGRpZEZsdXNoO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUFycmF5PCFOb2RlPnwhTm9kZUxpc3Q8IU5vZGU+fSBub2RlTGlzdCBOb2RlcyB0aGF0IGNvdWxkIGNoYW5nZVxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2xpc3RlblNsb3RzKG5vZGVMaXN0KSB7XG4gICAgZm9yIChsZXQgaT0wOyBpIDwgbm9kZUxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBuID0gbm9kZUxpc3RbaV07XG4gICAgICBpZiAoaXNTbG90KG4pKSB7XG4gICAgICAgIG4uYWRkRXZlbnRMaXN0ZW5lcignc2xvdGNoYW5nZScsIHRoaXMuX2JvdW5kU2NoZWR1bGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFBcnJheTwhTm9kZT58IU5vZGVMaXN0PCFOb2RlPn0gbm9kZUxpc3QgTm9kZXMgdGhhdCBjb3VsZCBjaGFuZ2VcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF91bmxpc3RlblNsb3RzKG5vZGVMaXN0KSB7XG4gICAgZm9yIChsZXQgaT0wOyBpIDwgbm9kZUxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBuID0gbm9kZUxpc3RbaV07XG4gICAgICBpZiAoaXNTbG90KG4pKSB7XG4gICAgICAgIG4ucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2xvdGNoYW5nZScsIHRoaXMuX2JvdW5kU2NoZWR1bGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG59OyIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgJy4uL3V0aWxzL2Jvb3QuanMnO1xuaW1wb3J0IHsgd3JhcCB9IGZyb20gJy4uL3V0aWxzL3dyYXAuanMnO1xuaW1wb3J0ICcuLi91dGlscy9zZXR0aW5ncy5qcyc7XG5pbXBvcnQgeyBGbGF0dGVuZWROb2Rlc09ic2VydmVyIH0gZnJvbSAnLi4vdXRpbHMvZmxhdHRlbmVkLW5vZGVzLW9ic2VydmVyLmpzJztcbmV4cG9ydCB7IGZsdXNoLCBlbnF1ZXVlRGVib3VuY2VyIGFzIGFkZERlYm91bmNlciB9IGZyb20gJy4uL3V0aWxzL2ZsdXNoLmpzJztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5pbXBvcnQgeyBEZWJvdW5jZXIgfSBmcm9tICcuLi91dGlscy9kZWJvdW5jZS5qcyc7ICAvLyB1c2VkIGluIHR5cGUgYW5ub3RhdGlvbnNcbi8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuY29uc3QgcCA9IEVsZW1lbnQucHJvdG90eXBlO1xuLyoqXG4gKiBAY29uc3Qge2Z1bmN0aW9uKHRoaXM6Tm9kZSwgc3RyaW5nKTogYm9vbGVhbn1cbiAqL1xuY29uc3Qgbm9ybWFsaXplZE1hdGNoZXNTZWxlY3RvciA9IHAubWF0Y2hlcyB8fCBwLm1hdGNoZXNTZWxlY3RvciB8fFxuICBwLm1vek1hdGNoZXNTZWxlY3RvciB8fCBwLm1zTWF0Y2hlc1NlbGVjdG9yIHx8XG4gIHAub01hdGNoZXNTZWxlY3RvciB8fCBwLndlYmtpdE1hdGNoZXNTZWxlY3RvcjtcblxuLyoqXG4gKiBDcm9zcy1wbGF0Zm9ybSBgZWxlbWVudC5tYXRjaGVzYCBzaGltLlxuICpcbiAqIEBmdW5jdGlvbiBtYXRjaGVzU2VsZWN0b3JcbiAqIEBwYXJhbSB7IU5vZGV9IG5vZGUgTm9kZSB0byBjaGVjayBzZWxlY3RvciBhZ2FpbnN0XG4gKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3IgU2VsZWN0b3IgdG8gbWF0Y2hcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgbm9kZSBtYXRjaGVkIHNlbGVjdG9yXG4gKi9cbmV4cG9ydCBjb25zdCBtYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbihub2RlLCBzZWxlY3Rvcikge1xuICByZXR1cm4gbm9ybWFsaXplZE1hdGNoZXNTZWxlY3Rvci5jYWxsKG5vZGUsIHNlbGVjdG9yKTtcbn07XG5cbi8qKlxuICogTm9kZSBBUEkgd3JhcHBlciBjbGFzcyByZXR1cm5lZCBmcm9tIGBQb2x5bWVyLmRvbS4odGFyZ2V0KWAgd2hlblxuICogYHRhcmdldGAgaXMgYSBgTm9kZWAuXG4gKiBAaW1wbGVtZW50cyB7UG9seW1lckRvbUFwaX1cbiAqIEB1bnJlc3RyaWN0ZWRcbiAqL1xuY2xhc3MgRG9tQXBpTmF0aXZlIHtcblxuICAvKipcbiAgICogQHBhcmFtIHshTm9kZX0gbm9kZSBOb2RlIGZvciB3aGljaCB0byBjcmVhdGUgYSBQb2x5bWVyLmRvbSBoZWxwZXIgb2JqZWN0LlxuICAgKi9cbiAgY29uc3RydWN0b3Iobm9kZSkge1xuICAgIGlmICh3aW5kb3dbJ1NoYWR5RE9NJ10gJiYgd2luZG93WydTaGFkeURPTSddWydpblVzZSddKSB7XG4gICAgICB3aW5kb3dbJ1NoYWR5RE9NJ11bJ3BhdGNoJ10obm9kZSk7XG4gICAgfVxuICAgIHRoaXMubm9kZSA9IG5vZGU7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBpbnN0YW5jZSBvZiBgRmxhdHRlbmVkTm9kZXNPYnNlcnZlcmAgdGhhdFxuICAgKiBsaXN0ZW5zIGZvciBub2RlIGNoYW5nZXMgb24gdGhpcyBlbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHRoaXM6SFRNTEVsZW1lbnQsIHsgdGFyZ2V0OiAhSFRNTEVsZW1lbnQsIGFkZGVkTm9kZXM6ICFBcnJheTwhRWxlbWVudD4sIHJlbW92ZWROb2RlczogIUFycmF5PCFFbGVtZW50PiB9KTp2b2lkfSBjYWxsYmFjayBDYWxsZWQgd2hlbiBkaXJlY3Qgb3IgZGlzdHJpYnV0ZWQgY2hpbGRyZW5cbiAgICogICBvZiB0aGlzIGVsZW1lbnQgY2hhbmdlc1xuICAgKiBAcmV0dXJuIHshUG9seW1lckRvbUFwaS5PYnNlcnZlSGFuZGxlfSBPYnNlcnZlciBpbnN0YW5jZVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIG9ic2VydmVOb2RlcyhjYWxsYmFjaykge1xuICAgIHJldHVybiBuZXcgRmxhdHRlbmVkTm9kZXNPYnNlcnZlcihcbiAgICAgICAgLyoqIEB0eXBlIHshSFRNTEVsZW1lbnR9ICovKHRoaXMubm9kZSksIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNjb25uZWN0cyBhbiBvYnNlcnZlciBwcmV2aW91c2x5IGNyZWF0ZWQgdmlhIGBvYnNlcnZlTm9kZXNgXG4gICAqXG4gICAqIEBwYXJhbSB7IVBvbHltZXJEb21BcGkuT2JzZXJ2ZUhhbmRsZX0gb2JzZXJ2ZXJIYW5kbGUgT2JzZXJ2ZXIgaW5zdGFuY2VcbiAgICogICB0byBkaXNjb25uZWN0LlxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHVub2JzZXJ2ZU5vZGVzKG9ic2VydmVySGFuZGxlKSB7XG4gICAgb2JzZXJ2ZXJIYW5kbGUuZGlzY29ubmVjdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb3ZpZGVkIGFzIGEgYmFja3dhcmRzLWNvbXBhdGlibGUgQVBJIG9ubHkuICBUaGlzIG1ldGhvZCBkb2VzIG5vdGhpbmcuXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBub3RpZnlPYnNlcnZlcigpIHt9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcHJvdmlkZWQgbm9kZSBpcyBjb250YWluZWQgd2l0aCB0aGlzIGVsZW1lbnQnc1xuICAgKiBsaWdodC1ET00gY2hpbGRyZW4gb3Igc2hhZG93IHJvb3QsIGluY2x1ZGluZyBhbnkgbmVzdGVkIHNoYWRvdyByb290c1xuICAgKiBvZiBjaGlsZHJlbiB0aGVyZWluLlxuICAgKlxuICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgTm9kZSB0byB0ZXN0XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gYG5vZGVgIGlzIGNvbnRhaW5lZCB3aXRoaW5cbiAgICogICB0aGlzIGVsZW1lbnQncyBsaWdodCBvciBzaGFkb3cgRE9NLlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGRlZXBDb250YWlucyhub2RlKSB7XG4gICAgaWYgKHdyYXAodGhpcy5ub2RlKS5jb250YWlucyhub2RlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGxldCBuID0gbm9kZTtcbiAgICBsZXQgZG9jID0gbm9kZS5vd25lckRvY3VtZW50O1xuICAgIC8vIHdhbGsgZnJvbSBub2RlIHRvIGB0aGlzYCBvciBgZG9jdW1lbnRgXG4gICAgd2hpbGUgKG4gJiYgbiAhPT0gZG9jICYmIG4gIT09IHRoaXMubm9kZSkge1xuICAgICAgLy8gdXNlIGxvZ2ljYWwgcGFyZW50bm9kZSwgb3IgbmF0aXZlIFNoYWRvd1Jvb3QgaG9zdFxuICAgICAgbiA9IHdyYXAobikucGFyZW50Tm9kZSB8fCB3cmFwKG4pLmhvc3Q7XG4gICAgfVxuICAgIHJldHVybiBuID09PSB0aGlzLm5vZGU7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgcm9vdCBub2RlIG9mIHRoaXMgbm9kZS4gIEVxdWl2YWxlbnQgdG8gYGdldFJvb3ROb2RlKClgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtOb2RlfSBUb3AgbW9zdCBlbGVtZW50IGluIHRoZSBkb20gdHJlZSBpbiB3aGljaCB0aGUgbm9kZVxuICAgKiBleGlzdHMuIElmIHRoZSBub2RlIGlzIGNvbm5lY3RlZCB0byBhIGRvY3VtZW50IHRoaXMgaXMgZWl0aGVyIGFcbiAgICogc2hhZG93Um9vdCBvciB0aGUgZG9jdW1lbnQ7IG90aGVyd2lzZSwgaXQgbWF5IGJlIHRoZSBub2RlXG4gICAqIGl0c2VsZiBvciBhIG5vZGUgb3IgZG9jdW1lbnQgZnJhZ21lbnQgY29udGFpbmluZyBpdC5cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRPd25lclJvb3QoKSB7XG4gICAgcmV0dXJuIHdyYXAodGhpcy5ub2RlKS5nZXRSb290Tm9kZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZvciBzbG90IGVsZW1lbnRzLCByZXR1cm5zIHRoZSBub2RlcyBhc3NpZ25lZCB0byB0aGUgc2xvdDsgb3RoZXJ3aXNlXG4gICAqIGFuIGVtcHR5IGFycmF5LiBJdCBpcyBlcXVpdmFsZW50IHRvIGA8c2xvdD4uYWRkaWduZWROb2Rlcyh7ZmxhdHRlbjp0cnVlfSlgLlxuICAgKlxuICAgKiBAcmV0dXJuIHshQXJyYXk8IU5vZGU+fSBBcnJheSBvZiBhc3NpZ25lZCBub2Rlc1xuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldERpc3RyaWJ1dGVkTm9kZXMoKSB7XG4gICAgcmV0dXJuICh0aGlzLm5vZGUubG9jYWxOYW1lID09PSAnc2xvdCcpID9cbiAgICAgIHdyYXAodGhpcy5ub2RlKS5hc3NpZ25lZE5vZGVzKHtmbGF0dGVuOiB0cnVlfSkgOlxuICAgICAgW107XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBhcnJheSBvZiBhbGwgc2xvdHMgdGhpcyBlbGVtZW50IHdhcyBkaXN0cmlidXRlZCB0by5cbiAgICpcbiAgICogQHJldHVybiB7IUFycmF5PCFIVE1MU2xvdEVsZW1lbnQ+fSBEZXNjcmlwdGlvblxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldERlc3RpbmF0aW9uSW5zZXJ0aW9uUG9pbnRzKCkge1xuICAgIGxldCBpcCQgPSBbXTtcbiAgICBsZXQgbiA9IHdyYXAodGhpcy5ub2RlKS5hc3NpZ25lZFNsb3Q7XG4gICAgd2hpbGUgKG4pIHtcbiAgICAgIGlwJC5wdXNoKG4pO1xuICAgICAgbiA9IHdyYXAobikuYXNzaWduZWRTbG90O1xuICAgIH1cbiAgICByZXR1cm4gaXAkO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxzIGBpbXBvcnROb2RlYCBvbiB0aGUgYG93bmVyRG9jdW1lbnRgIGZvciB0aGlzIG5vZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7IU5vZGV9IG5vZGUgTm9kZSB0byBpbXBvcnRcbiAgICogQHBhcmFtIHtib29sZWFufSBkZWVwIFRydWUgaWYgdGhlIG5vZGUgc2hvdWxkIGJlIGNsb25lZCBkZWVwbHkgZHVyaW5nXG4gICAqICAgaW1wb3J0XG4gICAqIEByZXR1cm4ge05vZGV9IENsb25lIG9mIGdpdmVuIG5vZGUgaW1wb3J0ZWQgdG8gdGhpcyBvd25lciBkb2N1bWVudFxuICAgKi9cbiAgaW1wb3J0Tm9kZShub2RlLCBkZWVwKSB7XG4gICAgbGV0IGRvYyA9IHRoaXMubm9kZSBpbnN0YW5jZW9mIERvY3VtZW50ID8gdGhpcy5ub2RlIDpcbiAgICAgIHRoaXMubm9kZS5vd25lckRvY3VtZW50O1xuICAgIHJldHVybiB3cmFwKGRvYykuaW1wb3J0Tm9kZShub2RlLCBkZWVwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHshQXJyYXk8IU5vZGU+fSBSZXR1cm5zIGEgZmxhdHRlbmVkIGxpc3Qgb2YgYWxsIGNoaWxkIG5vZGVzIGFuZFxuICAgKiBub2RlcyBhc3NpZ25lZCB0byBjaGlsZCBzbG90cy5cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRFZmZlY3RpdmVDaGlsZE5vZGVzKCkge1xuICAgIHJldHVybiBGbGF0dGVuZWROb2Rlc09ic2VydmVyLmdldEZsYXR0ZW5lZE5vZGVzKFxuICAgICAgICAvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi8gKHRoaXMubm9kZSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBmaWx0ZXJlZCBsaXN0IG9mIGZsYXR0ZW5lZCBjaGlsZCBlbGVtZW50cyBmb3IgdGhpcyBlbGVtZW50IGJhc2VkXG4gICAqIG9uIHRoZSBnaXZlbiBzZWxlY3Rvci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yIFNlbGVjdG9yIHRvIGZpbHRlciBub2RlcyBhZ2FpbnN0XG4gICAqIEByZXR1cm4geyFBcnJheTwhSFRNTEVsZW1lbnQ+fSBMaXN0IG9mIGZsYXR0ZW5lZCBjaGlsZCBlbGVtZW50c1xuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHF1ZXJ5RGlzdHJpYnV0ZWRFbGVtZW50cyhzZWxlY3Rvcikge1xuICAgIGxldCBjJCA9IHRoaXMuZ2V0RWZmZWN0aXZlQ2hpbGROb2RlcygpO1xuICAgIGxldCBsaXN0ID0gW107XG4gICAgZm9yIChsZXQgaT0wLCBsPWMkLmxlbmd0aCwgYzsgKGk8bCkgJiYgKGM9YyRbaV0pOyBpKyspIHtcbiAgICAgIGlmICgoYy5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpICYmXG4gICAgICAgICAgbWF0Y2hlc1NlbGVjdG9yKGMsIHNlbGVjdG9yKSkge1xuICAgICAgICBsaXN0LnB1c2goYyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsaXN0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZvciBzaGFkb3cgcm9vdHMsIHJldHVybnMgdGhlIGN1cnJlbnRseSBmb2N1c2VkIGVsZW1lbnQgd2l0aGluIHRoaXNcbiAgICogc2hhZG93IHJvb3QuXG4gICAqXG4gICAqIHJldHVybiB7Tm9kZXx1bmRlZmluZWR9IEN1cnJlbnRseSBmb2N1c2VkIGVsZW1lbnRcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXQgYWN0aXZlRWxlbWVudCgpIHtcbiAgICBsZXQgbm9kZSA9IHRoaXMubm9kZTtcbiAgICByZXR1cm4gbm9kZS5fYWN0aXZlRWxlbWVudCAhPT0gdW5kZWZpbmVkID8gbm9kZS5fYWN0aXZlRWxlbWVudCA6IG5vZGUuYWN0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5mdW5jdGlvbiBmb3J3YXJkTWV0aG9kcyhwcm90bywgbWV0aG9kcykge1xuICBmb3IgKGxldCBpPTA7IGkgPCBtZXRob2RzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IG1ldGhvZCA9IG1ldGhvZHNbaV07XG4gICAgLyogZXNsaW50LWRpc2FibGUgdmFsaWQtanNkb2MgKi9cbiAgICBwcm90b1ttZXRob2RdID0gLyoqIEB0aGlzIHtEb21BcGlOYXRpdmV9ICovIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZVttZXRob2RdLmFwcGx5KHRoaXMubm9kZSwgYXJndW1lbnRzKTtcbiAgICB9O1xuICAgIC8qIGVzbGludC1lbmFibGUgKi9cbiAgfVxufVxuXG5mdW5jdGlvbiBmb3J3YXJkUmVhZE9ubHlQcm9wZXJ0aWVzKHByb3RvLCBwcm9wZXJ0aWVzKSB7XG4gIGZvciAobGV0IGk9MDsgaSA8IHByb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgbmFtZSA9IHByb3BlcnRpZXNbaV07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCBuYW1lLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCBkb21BcGkgPSAvKiogQHR5cGUge0RvbUFwaU5hdGl2ZX0gKi8odGhpcyk7XG4gICAgICAgIHJldHVybiBkb21BcGkubm9kZVtuYW1lXTtcbiAgICAgIH0sXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmb3J3YXJkUHJvcGVydGllcyhwcm90bywgcHJvcGVydGllcykge1xuICBmb3IgKGxldCBpPTA7IGkgPCBwcm9wZXJ0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IG5hbWUgPSBwcm9wZXJ0aWVzW2ldO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90bywgbmFtZSwge1xuICAgICAgLyoqXG4gICAgICAgKiBAdGhpcyB7RG9tQXBpTmF0aXZlfVxuICAgICAgICogQHJldHVybiB7Kn0gLlxuICAgICAgICovXG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ub2RlW25hbWVdO1xuICAgICAgfSxcbiAgICAgIC8qKlxuICAgICAgICogQHRoaXMge0RvbUFwaU5hdGl2ZX1cbiAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgLlxuICAgICAgICovXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHRoaXMubm9kZVtuYW1lXSA9IHZhbHVlO1xuICAgICAgfSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG59XG5cblxuLyoqXG4gKiBFdmVudCBBUEkgd3JhcHBlciBjbGFzcyByZXR1cm5lZCBmcm9tIGBkb20uKHRhcmdldClgIHdoZW5cbiAqIGB0YXJnZXRgIGlzIGFuIGBFdmVudGAuXG4gKi9cbmV4cG9ydCBjbGFzcyBFdmVudEFwaSB7XG4gIGNvbnN0cnVjdG9yKGV2ZW50KSB7XG4gICAgdGhpcy5ldmVudCA9IGV2ZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGZpcnN0IG5vZGUgb24gdGhlIGBjb21wb3NlZFBhdGhgIG9mIHRoaXMgZXZlbnQuXG4gICAqXG4gICAqIEByZXR1cm4geyFFdmVudFRhcmdldH0gVGhlIG5vZGUgdGhpcyBldmVudCB3YXMgZGlzcGF0Y2hlZCB0b1xuICAgKi9cbiAgZ2V0IHJvb3RUYXJnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMucGF0aFswXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBsb2NhbCAocmUtdGFyZ2V0ZWQpIHRhcmdldCBmb3IgdGhpcyBldmVudC5cbiAgICpcbiAgICogQHJldHVybiB7IUV2ZW50VGFyZ2V0fSBUaGUgbG9jYWwgKHJlLXRhcmdldGVkKSB0YXJnZXQgZm9yIHRoaXMgZXZlbnQuXG4gICAqL1xuICBnZXQgbG9jYWxUYXJnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnQudGFyZ2V0O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGBjb21wb3NlZFBhdGhgIGZvciB0aGlzIGV2ZW50LlxuICAgKiBAcmV0dXJuIHshQXJyYXk8IUV2ZW50VGFyZ2V0Pn0gVGhlIG5vZGVzIHRoaXMgZXZlbnQgcHJvcGFnYXRlZCB0aHJvdWdoXG4gICAqL1xuICBnZXQgcGF0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5ldmVudC5jb21wb3NlZFBhdGgoKTtcbiAgfVxufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtib29sZWFuPX0gZGVlcFxuICogQHJldHVybiB7IU5vZGV9XG4gKi9cbkRvbUFwaU5hdGl2ZS5wcm90b3R5cGUuY2xvbmVOb2RlO1xuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7IU5vZGV9IG5vZGVcbiAqIEByZXR1cm4geyFOb2RlfVxuICovXG5Eb21BcGlOYXRpdmUucHJvdG90eXBlLmFwcGVuZENoaWxkO1xuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7IU5vZGV9IG5ld0NoaWxkXG4gKiBAcGFyYW0ge05vZGV9IHJlZkNoaWxkXG4gKiBAcmV0dXJuIHshTm9kZX1cbiAqL1xuRG9tQXBpTmF0aXZlLnByb3RvdHlwZS5pbnNlcnRCZWZvcmU7XG4vKipcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHshTm9kZX0gbm9kZVxuICogQHJldHVybiB7IU5vZGV9XG4gKi9cbkRvbUFwaU5hdGl2ZS5wcm90b3R5cGUucmVtb3ZlQ2hpbGQ7XG4vKipcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHshTm9kZX0gb2xkQ2hpbGRcbiAqIEBwYXJhbSB7IU5vZGV9IG5ld0NoaWxkXG4gKiBAcmV0dXJuIHshTm9kZX1cbiAqL1xuRG9tQXBpTmF0aXZlLnByb3RvdHlwZS5yZXBsYWNlQ2hpbGQ7XG4vKipcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuRG9tQXBpTmF0aXZlLnByb3RvdHlwZS5zZXRBdHRyaWJ1dGU7XG4vKipcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbkRvbUFwaU5hdGl2ZS5wcm90b3R5cGUucmVtb3ZlQXR0cmlidXRlO1xuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvclxuICogQHJldHVybiB7P0VsZW1lbnR9XG4gKi9cbkRvbUFwaU5hdGl2ZS5wcm90b3R5cGUucXVlcnlTZWxlY3Rvcjtcbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3JcbiAqIEByZXR1cm4geyFOb2RlTGlzdDwhRWxlbWVudD59XG4gKi9cbkRvbUFwaU5hdGl2ZS5wcm90b3R5cGUucXVlcnlTZWxlY3RvckFsbDtcblxuLyoqIEB0eXBlIHs/Tm9kZX0gKi9cbkRvbUFwaU5hdGl2ZS5wcm90b3R5cGUucGFyZW50Tm9kZTtcbi8qKiBAdHlwZSB7P05vZGV9ICovXG5Eb21BcGlOYXRpdmUucHJvdG90eXBlLmZpcnN0Q2hpbGQ7XG4vKiogQHR5cGUgez9Ob2RlfSAqL1xuRG9tQXBpTmF0aXZlLnByb3RvdHlwZS5sYXN0Q2hpbGQ7XG4vKiogQHR5cGUgez9Ob2RlfSAqL1xuRG9tQXBpTmF0aXZlLnByb3RvdHlwZS5uZXh0U2libGluZztcbi8qKiBAdHlwZSB7P05vZGV9ICovXG5Eb21BcGlOYXRpdmUucHJvdG90eXBlLnByZXZpb3VzU2libGluZztcbi8qKiBAdHlwZSB7P0hUTUxFbGVtZW50fSAqL1xuRG9tQXBpTmF0aXZlLnByb3RvdHlwZS5maXJzdEVsZW1lbnRDaGlsZDtcbi8qKiBAdHlwZSB7P0hUTUxFbGVtZW50fSAqL1xuRG9tQXBpTmF0aXZlLnByb3RvdHlwZS5sYXN0RWxlbWVudENoaWxkO1xuLyoqIEB0eXBlIHs/SFRNTEVsZW1lbnR9ICovXG5Eb21BcGlOYXRpdmUucHJvdG90eXBlLm5leHRFbGVtZW50U2libGluZztcbi8qKiBAdHlwZSB7P0hUTUxFbGVtZW50fSAqL1xuRG9tQXBpTmF0aXZlLnByb3RvdHlwZS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuLyoqIEB0eXBlIHshQXJyYXk8IU5vZGU+fSAqL1xuRG9tQXBpTmF0aXZlLnByb3RvdHlwZS5jaGlsZE5vZGVzO1xuLyoqIEB0eXBlIHshQXJyYXk8IUhUTUxFbGVtZW50Pn0gKi9cbkRvbUFwaU5hdGl2ZS5wcm90b3R5cGUuY2hpbGRyZW47XG4vKiogQHR5cGUgez9ET01Ub2tlbkxpc3R9ICovXG5Eb21BcGlOYXRpdmUucHJvdG90eXBlLmNsYXNzTGlzdDtcblxuLyoqIEB0eXBlIHtzdHJpbmd9ICovXG5Eb21BcGlOYXRpdmUucHJvdG90eXBlLnRleHRDb250ZW50O1xuLyoqIEB0eXBlIHtzdHJpbmd9ICovXG5Eb21BcGlOYXRpdmUucHJvdG90eXBlLmlubmVySFRNTDtcblxubGV0IERvbUFwaUltcGwgPSBEb21BcGlOYXRpdmU7XG5cbmlmICh3aW5kb3dbJ1NoYWR5RE9NJ10gJiYgd2luZG93WydTaGFkeURPTSddWydpblVzZSddICYmIHdpbmRvd1snU2hhZHlET00nXVsnbm9QYXRjaCddICYmIHdpbmRvd1snU2hhZHlET00nXVsnV3JhcHBlciddKSB7XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBleHRlbmRzIHtIVE1MRWxlbWVudH1cbiAgICovXG4gIGNsYXNzIFdyYXBwZXIgZXh0ZW5kcyB3aW5kb3dbJ1NoYWR5RE9NJ11bJ1dyYXBwZXInXSB7fVxuXG4gIC8vIGNvcHkgYmVzcG9rZSBBUEkgb250byB3cmFwcGVyXG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKERvbUFwaU5hdGl2ZS5wcm90b3R5cGUpLmZvckVhY2goKHByb3ApID0+IHtcbiAgICBpZiAocHJvcCAhPSAnYWN0aXZlRWxlbWVudCcpIHtcbiAgICAgIFdyYXBwZXIucHJvdG90eXBlW3Byb3BdID0gRG9tQXBpTmF0aXZlLnByb3RvdHlwZVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIE5vdGUsIGBjbGFzc0xpc3RgIGlzIGhlcmUgb25seSBmb3IgbGVnYWN5IGNvbXBhdGliaWxpdHkgc2luY2UgaXQgZG9lcyBub3RcbiAgLy8gdHJpZ2dlciBkaXN0cmlidXRpb24gaW4gdjEgU2hhZG93IERPTS5cbiAgZm9yd2FyZFJlYWRPbmx5UHJvcGVydGllcyhXcmFwcGVyLnByb3RvdHlwZSwgW1xuICAgICdjbGFzc0xpc3QnXG4gIF0pO1xuXG4gIERvbUFwaUltcGwgPSBXcmFwcGVyO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEV2ZW50QXBpLnByb3RvdHlwZSwge1xuXG4gICAgLy8gUmV0dXJucyB0aGUgXCJsb3dlc3RcIiBub2RlIGluIHRoZSBzYW1lIHJvb3QgYXMgdGhlIGV2ZW50J3MgY3VycmVudFRhcmdldC5cbiAgICAvLyBXaGVuIGluIGBub1BhdGNoYCBtb2RlLCB0aGlzIG11c3QgYmUgY2FsY3VsYXRlZCBieSB3YWxraW5nIHRoZSBldmVudCdzXG4gICAgLy8gcGF0aC5cbiAgICBsb2NhbFRhcmdldDoge1xuICAgICAgZ2V0KCkge1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5ldmVudC5jdXJyZW50VGFyZ2V0O1xuICAgICAgICBjb25zdCBjdXJyZW50Um9vdCA9IGN1cnJlbnQgJiYgZG9tKGN1cnJlbnQpLmdldE93bmVyUm9vdCgpO1xuICAgICAgICBjb25zdCBwJCA9IHRoaXMucGF0aDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwJC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGUgPSBwJFtpXTtcbiAgICAgICAgICBpZiAoZG9tKGUpLmdldE93bmVyUm9vdCgpID09PSBjdXJyZW50Um9vdCkge1xuICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSxcblxuICAgIHBhdGg6IHtcbiAgICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvd1snU2hhZHlET00nXVsnY29tcG9zZWRQYXRoJ10odGhpcy5ldmVudCk7XG4gICAgICB9LFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcblxufSBlbHNlIHtcblxuICAvLyBNZXRob2RzIHRoYXQgY2FuIHByb3Zva2UgZGlzdHJpYnV0aW9uIG9yIG11c3QgcmV0dXJuIHRoZSBsb2dpY2FsLCBub3RcbiAgLy8gY29tcG9zZWQgdHJlZS5cbiAgZm9yd2FyZE1ldGhvZHMoRG9tQXBpTmF0aXZlLnByb3RvdHlwZSwgW1xuICAgICdjbG9uZU5vZGUnLCAnYXBwZW5kQ2hpbGQnLCAnaW5zZXJ0QmVmb3JlJywgJ3JlbW92ZUNoaWxkJyxcbiAgICAncmVwbGFjZUNoaWxkJywgJ3NldEF0dHJpYnV0ZScsICdyZW1vdmVBdHRyaWJ1dGUnLFxuICAgICdxdWVyeVNlbGVjdG9yJywgJ3F1ZXJ5U2VsZWN0b3JBbGwnXG4gIF0pO1xuXG4gIC8vIFByb3BlcnRpZXMgdGhhdCBzaG91bGQgcmV0dXJuIHRoZSBsb2dpY2FsLCBub3QgY29tcG9zZWQgdHJlZS4gTm90ZSwgYGNsYXNzTGlzdGBcbiAgLy8gaXMgaGVyZSBvbmx5IGZvciBsZWdhY3kgY29tcGF0aWJpbGl0eSBzaW5jZSBpdCBkb2VzIG5vdCB0cmlnZ2VyIGRpc3RyaWJ1dGlvblxuICAvLyBpbiB2MSBTaGFkb3cgRE9NLlxuICBmb3J3YXJkUmVhZE9ubHlQcm9wZXJ0aWVzKERvbUFwaU5hdGl2ZS5wcm90b3R5cGUsIFtcbiAgICAncGFyZW50Tm9kZScsICdmaXJzdENoaWxkJywgJ2xhc3RDaGlsZCcsXG4gICAgJ25leHRTaWJsaW5nJywgJ3ByZXZpb3VzU2libGluZycsICdmaXJzdEVsZW1lbnRDaGlsZCcsXG4gICAgJ2xhc3RFbGVtZW50Q2hpbGQnLCAnbmV4dEVsZW1lbnRTaWJsaW5nJywgJ3ByZXZpb3VzRWxlbWVudFNpYmxpbmcnLFxuICAgICdjaGlsZE5vZGVzJywgJ2NoaWxkcmVuJywgJ2NsYXNzTGlzdCdcbiAgXSk7XG5cbiAgZm9yd2FyZFByb3BlcnRpZXMoRG9tQXBpTmF0aXZlLnByb3RvdHlwZSwgW1xuICAgICd0ZXh0Q29udGVudCcsICdpbm5lckhUTUwnLCAnY2xhc3NOYW1lJ1xuICBdKTtcbn1cblxuZXhwb3J0IGNvbnN0IERvbUFwaSA9IERvbUFwaUltcGw7XG5cbi8qKlxuICogTGVnYWN5IERPTSBhbmQgRXZlbnQgbWFuaXB1bGF0aW9uIEFQSSB3cmFwcGVyIGZhY3RvcnkgdXNlZCB0byBhYnN0cmFjdFxuICogZGlmZmVyZW5jZXMgYmV0d2VlbiBuYXRpdmUgU2hhZG93IERPTSBhbmQgXCJTaGFkeSBET01cIiB3aGVuIHBvbHlmaWxsaW5nIG9uXG4gKiBvbGRlciBicm93c2Vycy5cbiAqXG4gKiBOb3RlIHRoYXQgaW4gUG9seW1lciAyLnggdXNlIG9mIGBQb2x5bWVyLmRvbWAgaXMgbm8gbG9uZ2VyIHJlcXVpcmVkIGFuZFxuICogaW4gdGhlIG1ham9yaXR5IG9mIGNhc2VzIHNpbXBseSBmYWNhZGVzIGRpcmVjdGx5IHRvIHRoZSBzdGFuZGFyZCBuYXRpdmVcbiAqIEFQSS5cbiAqXG4gKiBAc3VtbWFyeSBMZWdhY3kgRE9NIGFuZCBFdmVudCBtYW5pcHVsYXRpb24gQVBJIHdyYXBwZXIgZmFjdG9yeSB1c2VkIHRvXG4gKiBhYnN0cmFjdCBkaWZmZXJlbmNlcyBiZXR3ZWVuIG5hdGl2ZSBTaGFkb3cgRE9NIGFuZCBcIlNoYWR5IERPTS5cIlxuICogQHBhcmFtIHsoTm9kZXxFdmVudHxEb21BcGlOYXRpdmV8RXZlbnRBcGkpPX0gb2JqIE5vZGUgb3IgZXZlbnQgdG8gb3BlcmF0ZSBvblxuICogQHJldHVybiB7IURvbUFwaU5hdGl2ZXwhRXZlbnRBcGl9IFdyYXBwZXIgcHJvdmlkaW5nIGVpdGhlciBub2RlIEFQSSBvciBldmVudCBBUElcbiAqL1xuZXhwb3J0IGNvbnN0IGRvbSA9IGZ1bmN0aW9uKG9iaikge1xuICBvYmogPSBvYmogfHwgZG9jdW1lbnQ7XG4gIGlmIChvYmogaW5zdGFuY2VvZiBEb21BcGlJbXBsKSB7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7IURvbUFwaX0gKi8ob2JqKTtcbiAgfVxuICBpZiAob2JqIGluc3RhbmNlb2YgRXZlbnRBcGkpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshRXZlbnRBcGl9ICovKG9iaik7XG4gIH1cbiAgbGV0IGhlbHBlciA9IG9ialsnX19kb21BcGknXTtcbiAgaWYgKCFoZWxwZXIpIHtcbiAgICBpZiAob2JqIGluc3RhbmNlb2YgRXZlbnQpIHtcbiAgICAgIGhlbHBlciA9IG5ldyBFdmVudEFwaShvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBoZWxwZXIgPSBuZXcgRG9tQXBpSW1wbCgvKiogQHR5cGUge05vZGV9ICovKG9iaikpO1xuICAgIH1cbiAgICBvYmpbJ19fZG9tQXBpJ10gPSBoZWxwZXI7XG4gIH1cbiAgcmV0dXJuIGhlbHBlcjtcbn07XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTkgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG5pbXBvcnQgJy4vYm9vdC5qcyc7XG5pbXBvcnQge3dyYXB9IGZyb20gJy4vd3JhcC5qcyc7XG5cbmNvbnN0IFNoYWR5RE9NID0gd2luZG93LlNoYWR5RE9NO1xuY29uc3QgU2hhZHlDU1MgPSB3aW5kb3cuU2hhZHlDU1M7XG5cbi8qKlxuICogUmV0dXJuIHRydWUgaWYgbm9kZSBzY29wZSBpcyBjb3JyZWN0LlxuICpcbiAqIEBwYXJhbSB7IUVsZW1lbnR9IG5vZGUgTm9kZSB0byBjaGVjayBzY29wZVxuICogQHBhcmFtIHshTm9kZX0gc2NvcGUgU2NvcGUgcmVmZXJlbmNlXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIG5vZGUgaXMgaW4gc2NvcGVcbiAqL1xuZnVuY3Rpb24gc2FtZVNjb3BlKG5vZGUsIHNjb3BlKSB7XG4gIHJldHVybiB3cmFwKG5vZGUpLmdldFJvb3ROb2RlKCkgPT09IHNjb3BlO1xufVxuXG4vKipcbiAqIEVuc3VyZSB0aGF0IGVsZW1lbnRzIGluIGEgU2hhZG93RE9NIGNvbnRhaW5lciBhcmUgc2NvcGVkIGNvcnJlY3RseS5cbiAqIFRoaXMgZnVuY3Rpb24gaXMgb25seSBuZWVkZWQgd2hlbiBTaGFkeURPTSBpcyB1c2VkIGFuZCB1bnBhdGNoZWQgRE9NIEFQSXMgYXJlIHVzZWQgaW4gdGhpcmQgcGFydHkgY29kZS5cbiAqIFRoaXMgY2FuIGhhcHBlbiBpbiBub1BhdGNoIG1vZGUgb3Igd2hlbiBzcGVjaWFsaXplZCBBUElzIGxpa2UgcmFuZ2VzIG9yIHRhYmxlcyBhcmUgdXNlZCB0byBtdXRhdGUgRE9NLlxuICpcbiAqIEBwYXJhbSAgeyFFbGVtZW50fSBjb250YWluZXIgQ29udGFpbmVyIGVsZW1lbnQgdG8gc2NvcGVcbiAqIEBwYXJhbSAge2Jvb2xlYW49fSBzaG91bGRPYnNlcnZlIGlmIHRydWUsIHN0YXJ0IGEgbXV0YXRpb24gb2JzZXJ2ZXIgZm9yIGFkZGVkIG5vZGVzIHRvIHRoZSBjb250YWluZXJcbiAqIEByZXR1cm4gez9NdXRhdGlvbk9ic2VydmVyfSBSZXR1cm5zIGEgbmV3IE11dGF0aW9uT2JzZXJ2ZXIgb24gYGNvbnRhaW5lcmAgaWYgYHNob3VsZE9ic2VydmVgIGlzIHRydWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzY29wZVN1YnRyZWUoY29udGFpbmVyLCBzaG91bGRPYnNlcnZlID0gZmFsc2UpIHtcbiAgLy8gSWYgdXNpbmcgbmF0aXZlIFNoYWRvd0RPTSwgYWJvcnRcbiAgaWYgKCFTaGFkeURPTSB8fCAhU2hhZHlDU1MpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvLyBTaGFkeUNTUyBoYW5kbGVzIERPTSBtdXRhdGlvbnMgd2hlbiBTaGFkeURPTSBkb2VzIG5vdCBoYW5kbGUgc2NvcGluZyBpdHNlbGZcbiAgaWYgKCFTaGFkeURPTVsnaGFuZGxlc0R5bmFtaWNTY29waW5nJ10pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBTY29waW5nU2hpbSA9IFNoYWR5Q1NTWydTY29waW5nU2hpbSddO1xuICAvLyBpZiBTY29waW5nU2hpbSBpcyBub3QgYXZhaWxhYmxlLCBhYm9ydFxuICBpZiAoIVNjb3BpbmdTaGltKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLy8gY2FwdHVyZSBjb3JyZWN0IHNjb3BlIGZvciBjb250YWluZXJcbiAgY29uc3QgY29udGFpbmVyU2NvcGUgPSBTY29waW5nU2hpbVsnc2NvcGVGb3JOb2RlJ10oY29udGFpbmVyKTtcbiAgY29uc3Qgcm9vdCA9IHdyYXAoY29udGFpbmVyKS5nZXRSb290Tm9kZSgpO1xuXG4gIGNvbnN0IHNjb3BpZnkgPSAobm9kZSkgPT4ge1xuICAgIGlmICghc2FtZVNjb3BlKG5vZGUsIHJvb3QpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIE5PVEU6IG5hdGl2ZSBxU0EgZG9lcyBub3QgaG9ub3Igc2NvcGVkIERPTSwgYnV0IGl0IGlzIGZhc3RlciwgYW5kIHRoZSBzYW1lIGJlaGF2aW9yIGFzIFBvbHltZXIgdjFcbiAgICBjb25zdCBlbGVtZW50cyA9IEFycmF5LmZyb20oU2hhZHlET01bJ25hdGl2ZU1ldGhvZHMnXVsncXVlcnlTZWxlY3RvckFsbCddLmNhbGwobm9kZSwgJyonKSk7XG4gICAgZWxlbWVudHMucHVzaChub2RlKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBlbCA9IGVsZW1lbnRzW2ldO1xuICAgICAgaWYgKCFzYW1lU2NvcGUoZWwsIHJvb3QpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgY3VycmVudFNjb3BlID0gU2NvcGluZ1NoaW1bJ2N1cnJlbnRTY29wZUZvck5vZGUnXShlbCk7XG4gICAgICBpZiAoY3VycmVudFNjb3BlICE9PSBjb250YWluZXJTY29wZSkge1xuICAgICAgICBpZiAoY3VycmVudFNjb3BlICE9PSAnJykge1xuICAgICAgICAgIFNjb3BpbmdTaGltWyd1bnNjb3BlTm9kZSddKGVsLCBjdXJyZW50U2NvcGUpO1xuICAgICAgICB9XG4gICAgICAgIFNjb3BpbmdTaGltWydzY29wZU5vZGUnXShlbCwgY29udGFpbmVyU2NvcGUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvLyBzY29wZSBldmVyeXRoaW5nIGluIGNvbnRhaW5lclxuICBzY29waWZ5KGNvbnRhaW5lcik7XG5cbiAgaWYgKHNob3VsZE9ic2VydmUpIHtcbiAgICBjb25zdCBtbyA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChteG5zKSA9PiB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG14bnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgbXhuID0gbXhuc1tpXTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBteG4uYWRkZWROb2Rlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGNvbnN0IGFkZGVkTm9kZSA9IG14bi5hZGRlZE5vZGVzW2pdO1xuICAgICAgICAgIGlmIChhZGRlZE5vZGUubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgICBzY29waWZ5KGFkZGVkTm9kZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgbW8ub2JzZXJ2ZShjb250YWluZXIsIHtjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWV9KTtcbiAgICByZXR1cm4gbW87XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn0iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaW1wb3J0ICdAd2ViY29tcG9uZW50cy9zaGFkeWNzcy9lbnRyeXBvaW50cy9hcHBseS1zaGltLmpzJztcbmltcG9ydCB7IEVsZW1lbnRNaXhpbiB9IGZyb20gJy4uL21peGlucy9lbGVtZW50LW1peGluLmpzJztcbmltcG9ydCB7IEdlc3R1cmVFdmVudExpc3RlbmVycyB9IGZyb20gJy4uL21peGlucy9nZXN0dXJlLWV2ZW50LWxpc3RlbmVycy5qcyc7XG5pbXBvcnQgeyBEaXJNaXhpbiB9IGZyb20gJy4uL21peGlucy9kaXItbWl4aW4uanMnO1xuaW1wb3J0IHsgZGVkdXBpbmdNaXhpbiB9IGZyb20gJy4uL3V0aWxzL21peGluLmpzJztcbmltcG9ydCAnLi4vdXRpbHMvcmVuZGVyLXN0YXR1cy5qcyc7XG5pbXBvcnQgJy4uL3V0aWxzL3VucmVzb2x2ZWQuanMnO1xuaW1wb3J0IHsgZG9tLCBtYXRjaGVzU2VsZWN0b3IgfSBmcm9tICcuL3BvbHltZXIuZG9tLmpzJztcbmltcG9ydCB7IHNldFRvdWNoQWN0aW9uIH0gZnJvbSAnLi4vdXRpbHMvZ2VzdHVyZXMuanMnO1xuaW1wb3J0IHsgRGVib3VuY2VyIH0gZnJvbSAnLi4vdXRpbHMvZGVib3VuY2UuanMnO1xuaW1wb3J0IHsgdGltZU91dCwgbWljcm9UYXNrIH0gZnJvbSAnLi4vdXRpbHMvYXN5bmMuanMnO1xuaW1wb3J0IHsgZ2V0IH0gZnJvbSAnLi4vdXRpbHMvcGF0aC5qcyc7XG5pbXBvcnQgeyB3cmFwIH0gZnJvbSAnLi4vdXRpbHMvd3JhcC5qcyc7XG5pbXBvcnQgeyBzY29wZVN1YnRyZWUgfSBmcm9tICcuLi91dGlscy9zY29wZS1zdWJ0cmVlLmpzJztcblxubGV0IHN0eWxlSW50ZXJmYWNlID0gd2luZG93LlNoYWR5Q1NTO1xuXG4vKipcbiAqIEVsZW1lbnQgY2xhc3MgbWl4aW4gdGhhdCBwcm92aWRlcyBQb2x5bWVyJ3MgXCJsZWdhY3lcIiBBUEkgaW50ZW5kZWQgdG8gYmVcbiAqIGJhY2t3YXJkLWNvbXBhdGlibGUgdG8gdGhlIGdyZWF0ZXN0IGV4dGVudCBwb3NzaWJsZSB3aXRoIHRoZSBBUElcbiAqIGZvdW5kIG9uIHRoZSBQb2x5bWVyIDEueCBgUG9seW1lci5CYXNlYCBwcm90b3R5cGUgYXBwbGllZCB0byBhbGwgZWxlbWVudHNcbiAqIGRlZmluZWQgdXNpbmcgdGhlIGBQb2x5bWVyKHsuLi59KWAgZnVuY3Rpb24uXG4gKlxuICogQG1peGluRnVuY3Rpb25cbiAqIEBwb2x5bWVyXG4gKiBAYXBwbGllc01peGluIEVsZW1lbnRNaXhpblxuICogQGFwcGxpZXNNaXhpbiBHZXN0dXJlRXZlbnRMaXN0ZW5lcnNcbiAqIEBwcm9wZXJ0eSBpc0F0dGFjaGVkIHtib29sZWFufSBTZXQgdG8gYHRydWVgIGluIHRoaXMgZWxlbWVudCdzXG4gKiAgIGBjb25uZWN0ZWRDYWxsYmFja2AgYW5kIGBmYWxzZWAgaW4gYGRpc2Nvbm5lY3RlZENhbGxiYWNrYFxuICogQHN1bW1hcnkgRWxlbWVudCBjbGFzcyBtaXhpbiB0aGF0IHByb3ZpZGVzIFBvbHltZXIncyBcImxlZ2FjeVwiIEFQSVxuICovXG5leHBvcnQgY29uc3QgTGVnYWN5RWxlbWVudE1peGluID0gZGVkdXBpbmdNaXhpbigoYmFzZSkgPT4ge1xuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX0VsZW1lbnRNaXhpbn1cbiAgICogQGltcGxlbWVudHMge1BvbHltZXJfR2VzdHVyZUV2ZW50TGlzdGVuZXJzfVxuICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9EaXJNaXhpbn1cbiAgICogQGV4dGVuZHMge0hUTUxFbGVtZW50fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY29uc3QgbGVnYWN5RWxlbWVudEJhc2UgPSBEaXJNaXhpbihHZXN0dXJlRXZlbnRMaXN0ZW5lcnMoRWxlbWVudE1peGluKGJhc2UpKSk7XG5cbiAgLyoqXG4gICAqIE1hcCBvZiBzaW1wbGUgbmFtZXMgdG8gdG91Y2ggYWN0aW9uIG5hbWVzXG4gICAqIEBkaWN0XG4gICAqL1xuICBjb25zdCBESVJFQ1RJT05fTUFQID0ge1xuICAgICd4JzogJ3Bhbi14JyxcbiAgICAneSc6ICdwYW4teScsXG4gICAgJ25vbmUnOiAnbm9uZScsXG4gICAgJ2FsbCc6ICdhdXRvJ1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcG9seW1lclxuICAgKiBAbWl4aW5DbGFzc1xuICAgKiBAZXh0ZW5kcyB7bGVnYWN5RWxlbWVudEJhc2V9XG4gICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX0xlZ2FjeUVsZW1lbnRNaXhpbn1cbiAgICogQHVucmVzdHJpY3RlZFxuICAgKi9cbiAgY2xhc3MgTGVnYWN5RWxlbWVudCBleHRlbmRzIGxlZ2FjeUVsZW1lbnRCYXNlIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgc3VwZXIoKTtcbiAgICAgIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cbiAgICAgIHRoaXMuaXNBdHRhY2hlZDtcbiAgICAgIC8qKiBAdHlwZSB7P1dlYWtNYXA8IUVsZW1lbnQsICFPYmplY3Q8c3RyaW5nLCAhRnVuY3Rpb24+Pn0gKi9cbiAgICAgIHRoaXMuX19ib3VuZExpc3RlbmVycztcbiAgICAgIC8qKiBAdHlwZSB7P09iamVjdDxzdHJpbmcsID9GdW5jdGlvbj59ICovXG4gICAgICB0aGlzLl9kZWJvdW5jZXJzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZvcndhcmRzIGBpbXBvcnRNZXRhYCBmcm9tIHRoZSBwcm90b3R5cGUgKGkuZS4gZnJvbSB0aGUgaW5mbyBvYmplY3RcbiAgICAgKiBwYXNzZWQgdG8gYFBvbHltZXIoey4uLn0pYCkgdG8gdGhlIHN0YXRpYyBBUEkuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHshT2JqZWN0fSBUaGUgYGltcG9ydC5tZXRhYCBvYmplY3Qgc2V0IG9uIHRoZSBwcm90b3R5cGVcbiAgICAgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfSBgdGhpc2AgaXMgYWx3YXlzIGluIHRoZSBpbnN0YW5jZSBpblxuICAgICAqICBjbG9zdXJlIGZvciBzb21lIHJlYXNvbiBldmVuIGluIGEgc3RhdGljIG1ldGhvZCwgcmF0aGVyIHRoYW4gdGhlIGNsYXNzXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IGltcG9ydE1ldGEoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm90b3R5cGUuaW1wb3J0TWV0YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMZWdhY3kgY2FsbGJhY2sgY2FsbGVkIGR1cmluZyB0aGUgYGNvbnN0cnVjdG9yYCwgZm9yIG92ZXJyaWRpbmdcbiAgICAgKiBieSB0aGUgdXNlci5cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIGNyZWF0ZWQoKSB7fVxuXG4gICAgLyoqXG4gICAgICogUHJvdmlkZXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYGNvbm5lY3RlZENhbGxiYWNrYFxuICAgICAqIHdoaWNoIGFkZHMgUG9seW1lciBsZWdhY3kgQVBJJ3MgYGF0dGFjaGVkYCBtZXRob2QuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICB0aGlzLmlzQXR0YWNoZWQgPSB0cnVlO1xuICAgICAgdGhpcy5hdHRhY2hlZCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExlZ2FjeSBjYWxsYmFjayBjYWxsZWQgZHVyaW5nIGBjb25uZWN0ZWRDYWxsYmFja2AsIGZvciBvdmVycmlkaW5nXG4gICAgICogYnkgdGhlIHVzZXIuXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBhdHRhY2hlZCgpIHt9XG5cbiAgICAvKipcbiAgICAgKiBQcm92aWRlcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBgZGlzY29ubmVjdGVkQ2FsbGJhY2tgXG4gICAgICogd2hpY2ggYWRkcyBQb2x5bWVyIGxlZ2FjeSBBUEkncyBgZGV0YWNoZWRgIG1ldGhvZC5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgIHRoaXMuaXNBdHRhY2hlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5kZXRhY2hlZCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExlZ2FjeSBjYWxsYmFjayBjYWxsZWQgZHVyaW5nIGBkaXNjb25uZWN0ZWRDYWxsYmFja2AsIGZvciBvdmVycmlkaW5nXG4gICAgICogYnkgdGhlIHVzZXIuXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBkZXRhY2hlZCgpIHt9XG5cbiAgICAvKipcbiAgICAgKiBQcm92aWRlcyBhbiBvdmVycmlkZSBpbXBsZW1lbnRhdGlvbiBvZiBgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrYFxuICAgICAqIHdoaWNoIGFkZHMgdGhlIFBvbHltZXIgbGVnYWN5IEFQSSdzIGBhdHRyaWJ1dGVDaGFuZ2VkYCBtZXRob2QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiBhdHRyaWJ1dGUuXG4gICAgICogQHBhcmFtIHs/c3RyaW5nfSBvbGQgT2xkIHZhbHVlIG9mIGF0dHJpYnV0ZS5cbiAgICAgKiBAcGFyYW0gez9zdHJpbmd9IHZhbHVlIEN1cnJlbnQgdmFsdWUgb2YgYXR0cmlidXRlLlxuICAgICAqIEBwYXJhbSB7P3N0cmluZ30gbmFtZXNwYWNlIEF0dHJpYnV0ZSBuYW1lc3BhY2UuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sobmFtZSwgb2xkLCB2YWx1ZSwgbmFtZXNwYWNlKSB7XG4gICAgICBpZiAob2xkICE9PSB2YWx1ZSkge1xuICAgICAgICBzdXBlci5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sobmFtZSwgb2xkLCB2YWx1ZSwgbmFtZXNwYWNlKTtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVDaGFuZ2VkKG5hbWUsIG9sZCwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExlZ2FjeSBjYWxsYmFjayBjYWxsZWQgZHVyaW5nIGBhdHRyaWJ1dGVDaGFuZ2VkQ2hhbGxiYWNrYCwgZm9yIG92ZXJyaWRpbmdcbiAgICAgKiBieSB0aGUgdXNlci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIGF0dHJpYnV0ZS5cbiAgICAgKiBAcGFyYW0gez9zdHJpbmd9IG9sZCBPbGQgdmFsdWUgb2YgYXR0cmlidXRlLlxuICAgICAqIEBwYXJhbSB7P3N0cmluZ30gdmFsdWUgQ3VycmVudCB2YWx1ZSBvZiBhdHRyaWJ1dGUuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBhdHRyaWJ1dGVDaGFuZ2VkKG5hbWUsIG9sZCwgdmFsdWUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlcyB0aGUgZGVmYXVsdCBgUG9seW1lci5Qcm9wZXJ0eUVmZmVjdHNgIGltcGxlbWVudGF0aW9uIHRvXG4gICAgICogYWRkIHN1cHBvcnQgZm9yIGNsYXNzIGluaXRpYWxpemF0aW9uIHZpYSB0aGUgYF9yZWdpc3RlcmVkYCBjYWxsYmFjay5cbiAgICAgKiBUaGlzIGlzIGNhbGxlZCBvbmx5IHdoZW4gdGhlIGZpcnN0IGluc3RhbmNlIG9mIHRoZSBlbGVtZW50IGlzIGNyZWF0ZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBzdXBwcmVzcyB7aW52YWxpZENhc3RzfVxuICAgICAqL1xuICAgIF9pbml0aWFsaXplUHJvcGVydGllcygpIHtcbiAgICAgIGxldCBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKTtcbiAgICAgIGlmICghcHJvdG8uaGFzT3duUHJvcGVydHkoSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnX19oYXNSZWdpc3RlckZpbmlzaGVkJywgcHJvdG8pKSkge1xuICAgICAgICB0aGlzLl9yZWdpc3RlcmVkKCk7XG4gICAgICAgIC8vIGJhY2tzdG9wIGluIGNhc2UgdGhlIGBfcmVnaXN0ZXJlZGAgaW1wbGVtZW50YXRpb24gZG9lcyBub3Qgc2V0IHRoaXNcbiAgICAgICAgcHJvdG8uX19oYXNSZWdpc3RlckZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHN1cGVyLl9pbml0aWFsaXplUHJvcGVydGllcygpO1xuICAgICAgdGhpcy5yb290ID0gLyoqIEB0eXBlIHtIVE1MRWxlbWVudH0gKi8odGhpcyk7XG4gICAgICB0aGlzLmNyZWF0ZWQoKTtcbiAgICAgIC8vIEVuc3VyZSBsaXN0ZW5lcnMgYXJlIGFwcGxpZWQgaW1tZWRpYXRlbHkgc28gdGhhdCB0aGV5IGFyZVxuICAgICAgLy8gYWRkZWQgYmVmb3JlIGRlY2xhcmF0aXZlIGV2ZW50IGxpc3RlbmVycy4gVGhpcyBhbGxvd3MgYW4gZWxlbWVudCB0b1xuICAgICAgLy8gZGVjb3JhdGUgaXRzZWxmIHZpYSBhbiBldmVudCBwcmlvciB0byBhbnkgZGVjbGFyYXRpdmUgbGlzdGVuZXJzXG4gICAgICAvLyBzZWVpbmcgdGhlIGV2ZW50LiBOb3RlLCB0aGlzIGVuc3VyZXMgY29tcGF0aWJpbGl0eSB3aXRoIDEueCBvcmRlcmluZy5cbiAgICAgIHRoaXMuX2FwcGx5TGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIGF1dG9tYXRpY2FsbHkgd2hlbiBhbiBlbGVtZW50IGlzIGluaXRpYWxpemluZy5cbiAgICAgKiBVc2VycyBtYXkgb3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gcGVyZm9ybSBjbGFzcyByZWdpc3RyYXRpb24gdGltZVxuICAgICAqIHdvcmsuIFRoZSBpbXBsZW1lbnRhdGlvbiBzaG91bGQgZW5zdXJlIHRoZSB3b3JrIGlzIHBlcmZvcm1lZFxuICAgICAqIG9ubHkgb25jZSBmb3IgdGhlIGNsYXNzLlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9yZWdpc3RlcmVkKCkge31cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlcyB0aGUgZGVmYXVsdCBgUG9seW1lci5Qcm9wZXJ0eUVmZmVjdHNgIGltcGxlbWVudGF0aW9uIHRvXG4gICAgICogYWRkIHN1cHBvcnQgZm9yIGluc3RhbGxpbmcgYGhvc3RBdHRyaWJ1dGVzYCBhbmQgYGxpc3RlbmVyc2AuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIHJlYWR5KCkge1xuICAgICAgdGhpcy5fZW5zdXJlQXR0cmlidXRlcygpO1xuICAgICAgc3VwZXIucmVhZHkoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbnN1cmVzIGFuIGVsZW1lbnQgaGFzIHJlcXVpcmVkIGF0dHJpYnV0ZXMuIENhbGxlZCB3aGVuIHRoZSBlbGVtZW50XG4gICAgICogaXMgYmVpbmcgcmVhZGllZCB2aWEgYHJlYWR5YC4gVXNlcnMgc2hvdWxkIG92ZXJyaWRlIHRvIHNldCB0aGVcbiAgICAgKiBlbGVtZW50J3MgcmVxdWlyZWQgYXR0cmlidXRlcy4gVGhlIGltcGxlbWVudGF0aW9uIHNob3VsZCBiZSBzdXJlXG4gICAgICogdG8gY2hlY2sgYW5kIG5vdCBvdmVycmlkZSBleGlzdGluZyBhdHRyaWJ1dGVzIGFkZGVkIGJ5XG4gICAgICogdGhlIHVzZXIgb2YgdGhlIGVsZW1lbnQuIFR5cGljYWxseSwgc2V0dGluZyBhdHRyaWJ1dGVzIHNob3VsZCBiZSBsZWZ0XG4gICAgICogdG8gdGhlIGVsZW1lbnQgdXNlciBhbmQgbm90IGRvbmUgaGVyZTsgcmVhc29uYWJsZSBleGNlcHRpb25zIGluY2x1ZGVcbiAgICAgKiBzZXR0aW5nIGFyaWEgcm9sZXMgYW5kIGZvY3VzYWJpbGl0eS5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfZW5zdXJlQXR0cmlidXRlcygpIHt9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGVsZW1lbnQgZXZlbnQgbGlzdGVuZXJzLiBDYWxsZWQgd2hlbiB0aGUgZWxlbWVudFxuICAgICAqIGlzIGJlaW5nIHJlYWRpZWQgdmlhIGByZWFkeWAuIFVzZXJzIHNob3VsZCBvdmVycmlkZSB0b1xuICAgICAqIGFkZCBhbnkgcmVxdWlyZWQgZWxlbWVudCBldmVudCBsaXN0ZW5lcnMuXG4gICAgICogSW4gcGVyZm9ybWFuY2UgY3JpdGljYWwgZWxlbWVudHMsIHRoZSB3b3JrIGRvbmUgaGVyZSBzaG91bGQgYmUga2VwdFxuICAgICAqIHRvIGEgbWluaW11bSBzaW5jZSBpdCBpcyBkb25lIGJlZm9yZSB0aGUgZWxlbWVudCBpcyByZW5kZXJlZC4gSW5cbiAgICAgKiB0aGVzZSBlbGVtZW50cywgY29uc2lkZXIgYWRkaW5nIGxpc3RlbmVycyBhc3luY2hyb25vdXNseSBzbyBhcyBub3QgdG9cbiAgICAgKiBibG9jayByZW5kZXIuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX2FwcGx5TGlzdGVuZXJzKCkge31cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGEgdHlwZWQgSmF2YVNjcmlwdCB2YWx1ZSB0byBhIHN0cmluZy5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhpcyBtZXRob2QgaXMgcHJvdmlkZWQgYXMgYmFja3dhcmQtY29tcGF0aWJsZSBsZWdhY3kgQVBJXG4gICAgICogb25seS4gIEl0IGlzIG5vdCBkaXJlY3RseSBjYWxsZWQgYnkgYW55IFBvbHltZXIgZmVhdHVyZXMuIFRvIGN1c3RvbWl6ZVxuICAgICAqIGhvdyBwcm9wZXJ0aWVzIGFyZSBzZXJpYWxpemVkIHRvIGF0dHJpYnV0ZXMgZm9yIGF0dHJpYnV0ZSBiaW5kaW5ncyBhbmRcbiAgICAgKiBgcmVmbGVjdFRvQXR0cmlidXRlOiB0cnVlYCBwcm9wZXJ0aWVzIGFzIHdlbGwgYXMgdGhpcyBtZXRob2QsIG92ZXJyaWRlXG4gICAgICogdGhlIGBfc2VyaWFsaXplVmFsdWVgIG1ldGhvZCBwcm92aWRlZCBieSBgUG9seW1lci5Qcm9wZXJ0eUFjY2Vzc29yc2AuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIGRlc2VyaWFsaXplXG4gICAgICogQHJldHVybiB7c3RyaW5nIHwgdW5kZWZpbmVkfSBTZXJpYWxpemVkIHZhbHVlXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgc2VyaWFsaXplKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2VyaWFsaXplVmFsdWUodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGEgc3RyaW5nIHRvIGEgdHlwZWQgSmF2YVNjcmlwdCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhpcyBtZXRob2QgaXMgcHJvdmlkZWQgYXMgYmFja3dhcmQtY29tcGF0aWJsZSBsZWdhY3kgQVBJXG4gICAgICogb25seS4gIEl0IGlzIG5vdCBkaXJlY3RseSBjYWxsZWQgYnkgYW55IFBvbHltZXIgZmVhdHVyZXMuICBUbyBjdXN0b21pemVcbiAgICAgKiBob3cgYXR0cmlidXRlcyBhcmUgZGVzZXJpYWxpemVkIHRvIHByb3BlcnRpZXMgZm9yIGluXG4gICAgICogYGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFja2AsIG92ZXJyaWRlIGBfZGVzZXJpYWxpemVWYWx1ZWAgbWV0aG9kXG4gICAgICogcHJvdmlkZWQgYnkgYFBvbHltZXIuUHJvcGVydHlBY2Nlc3NvcnNgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFN0cmluZyB0byBkZXNlcmlhbGl6ZVxuICAgICAqIEBwYXJhbSB7Kn0gdHlwZSBUeXBlIHRvIGRlc2VyaWFsaXplIHRoZSBzdHJpbmcgdG9cbiAgICAgKiBAcmV0dXJuIHsqfSBSZXR1cm5zIHRoZSBkZXNlcmlhbGl6ZWQgdmFsdWUgaW4gdGhlIGB0eXBlYCBnaXZlbi5cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBkZXNlcmlhbGl6ZSh2YWx1ZSwgdHlwZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2Rlc2VyaWFsaXplVmFsdWUodmFsdWUsIHR5cGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlcmlhbGl6ZXMgYSBwcm9wZXJ0eSB0byBpdHMgYXNzb2NpYXRlZCBhdHRyaWJ1dGUuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoaXMgbWV0aG9kIGlzIHByb3ZpZGVkIGFzIGJhY2t3YXJkLWNvbXBhdGlibGUgbGVnYWN5IEFQSVxuICAgICAqIG9ubHkuICBJdCBpcyBub3QgZGlyZWN0bHkgY2FsbGVkIGJ5IGFueSBQb2x5bWVyIGZlYXR1cmVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWUgdG8gcmVmbGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IGF0dHJpYnV0ZSBBdHRyaWJ1dGUgbmFtZSB0byByZWZsZWN0LlxuICAgICAqIEBwYXJhbSB7Kj19IHZhbHVlIFByb3BlcnR5IHZhbHVlIHRvIHJlZmxlY3QuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICByZWZsZWN0UHJvcGVydHlUb0F0dHJpYnV0ZShwcm9wZXJ0eSwgYXR0cmlidXRlLCB2YWx1ZSkge1xuICAgICAgdGhpcy5fcHJvcGVydHlUb0F0dHJpYnV0ZShwcm9wZXJ0eSwgYXR0cmlidXRlLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBhIHR5cGVkIHZhbHVlIHRvIGFuIEhUTUwgYXR0cmlidXRlIG9uIGEgbm9kZS5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhpcyBtZXRob2QgaXMgcHJvdmlkZWQgYXMgYmFja3dhcmQtY29tcGF0aWJsZSBsZWdhY3kgQVBJXG4gICAgICogb25seS4gIEl0IGlzIG5vdCBkaXJlY3RseSBjYWxsZWQgYnkgYW55IFBvbHltZXIgZmVhdHVyZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHNlcmlhbGl6ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYXR0cmlidXRlIEF0dHJpYnV0ZSBuYW1lIHRvIHNlcmlhbGl6ZSB0by5cbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGUgRWxlbWVudCB0byBzZXQgYXR0cmlidXRlIHRvLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgc2VyaWFsaXplVmFsdWVUb0F0dHJpYnV0ZSh2YWx1ZSwgYXR0cmlidXRlLCBub2RlKSB7XG4gICAgICB0aGlzLl92YWx1ZVRvTm9kZUF0dHJpYnV0ZSgvKiogQHR5cGUge0VsZW1lbnR9ICovIChub2RlIHx8IHRoaXMpLCB2YWx1ZSwgYXR0cmlidXRlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgb3duIHByb3BlcnRpZXMgKGluY2x1ZGluZyBhY2Nlc3NvciBkZXNjcmlwdG9ycykgZnJvbSBhIHNvdXJjZVxuICAgICAqIG9iamVjdCB0byBhIHRhcmdldCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvdG90eXBlIFRhcmdldCBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIHRvLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhcGkgU291cmNlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbS5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IHByb3RvdHlwZSBvYmplY3QgdGhhdCB3YXMgcGFzc2VkIGFzIGZpcnN0IGFyZ3VtZW50LlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIGV4dGVuZChwcm90b3R5cGUsIGFwaSkge1xuICAgICAgaWYgKCEocHJvdG90eXBlICYmIGFwaSkpIHtcbiAgICAgICAgcmV0dXJuIHByb3RvdHlwZSB8fCBhcGk7XG4gICAgICB9XG4gICAgICBsZXQgbiQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhcGkpO1xuICAgICAgZm9yIChsZXQgaT0wLCBuOyAoaTxuJC5sZW5ndGgpICYmIChuPW4kW2ldKTsgaSsrKSB7XG4gICAgICAgIGxldCBwZCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYXBpLCBuKTtcbiAgICAgICAgaWYgKHBkKSB7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvdHlwZSwgbiwgcGQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvdG90eXBlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBwcm9wcyBmcm9tIGEgc291cmNlIG9iamVjdCB0byBhIHRhcmdldCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBOb3RlLCB0aGlzIG1ldGhvZCB1c2VzIGEgc2ltcGxlIGBmb3IuLi5pbmAgc3RyYXRlZ3kgZm9yIGVudW1lcmF0aW5nXG4gICAgICogcHJvcGVydGllcy4gIFRvIGVuc3VyZSBvbmx5IGBvd25Qcm9wZXJ0aWVzYCBhcmUgY29waWVkIGZyb20gc291cmNlXG4gICAgICogdG8gdGFyZ2V0IGFuZCB0aGF0IGFjY2Vzc29yIGltcGxlbWVudGF0aW9ucyBhcmUgY29waWVkLCB1c2UgYGV4dGVuZGAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyFPYmplY3R9IHRhcmdldCBUYXJnZXQgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0by5cbiAgICAgKiBAcGFyYW0geyFPYmplY3R9IHNvdXJjZSBTb3VyY2Ugb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICAgICAqIEByZXR1cm4geyFPYmplY3R9IFRhcmdldCBvYmplY3QgdGhhdCB3YXMgcGFzc2VkIGFzIGZpcnN0IGFyZ3VtZW50LlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIG1peGluKHRhcmdldCwgc291cmNlKSB7XG4gICAgICBmb3IgKGxldCBpIGluIHNvdXJjZSkge1xuICAgICAgICB0YXJnZXRbaV0gPSBzb3VyY2VbaV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHByb3RvdHlwZSBvZiBhbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoaXMgbWV0aG9kIGlzIHByb3ZpZGVkIGFzIGJhY2t3YXJkLWNvbXBhdGlibGUgbGVnYWN5IEFQSVxuICAgICAqIG9ubHkuICBJdCBpcyBub3QgZGlyZWN0bHkgY2FsbGVkIGJ5IGFueSBQb2x5bWVyIGZlYXR1cmVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCBvbiB3aGljaCB0byBzZXQgdGhlIHByb3RvdHlwZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvdG90eXBlIFRoZSBwcm90b3R5cGUgdGhhdCB3aWxsIGJlIHNldCBvbiB0aGUgZ2l2ZW5cbiAgICAgKiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFJldHVybnMgdGhlIGdpdmVuIGBvYmplY3RgIHdpdGggaXRzIHByb3RvdHlwZSBzZXRcbiAgICAgKiB0byB0aGUgZ2l2ZW4gYHByb3RvdHlwZWAgb2JqZWN0LlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIGNoYWluT2JqZWN0KG9iamVjdCwgcHJvdG90eXBlKSB7XG4gICAgICBpZiAob2JqZWN0ICYmIHByb3RvdHlwZSAmJiBvYmplY3QgIT09IHByb3RvdHlwZSkge1xuICAgICAgICBvYmplY3QuX19wcm90b19fID0gcHJvdG90eXBlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKiAqKioqIEJlZ2luIFRlbXBsYXRlICoqKiogKi9cblxuICAgIC8qKlxuICAgICAqIENhbGxzIGBpbXBvcnROb2RlYCBvbiB0aGUgYGNvbnRlbnRgIG9mIHRoZSBgdGVtcGxhdGVgIHNwZWNpZmllZCBhbmRcbiAgICAgKiByZXR1cm5zIGEgZG9jdW1lbnQgZnJhZ21lbnQgY29udGFpbmluZyB0aGUgaW1wb3J0ZWQgY29udGVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7SFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGUgSFRNTCB0ZW1wbGF0ZSBlbGVtZW50IHRvIGluc3RhbmNlLlxuICAgICAqIEByZXR1cm4geyFEb2N1bWVudEZyYWdtZW50fSBEb2N1bWVudCBmcmFnbWVudCBjb250YWluaW5nIHRoZSBpbXBvcnRlZFxuICAgICAqICAgdGVtcGxhdGUgY29udGVudC5cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfSBnby9taXNzaW5nZm5wcm9wc1xuICAgICAqL1xuICAgIGluc3RhbmNlVGVtcGxhdGUodGVtcGxhdGUpIHtcbiAgICAgIGxldCBjb250ZW50ID0gdGhpcy5jb25zdHJ1Y3Rvci5fY29udGVudEZvclRlbXBsYXRlKHRlbXBsYXRlKTtcbiAgICAgIGxldCBkb20gPSAvKiogQHR5cGUgeyFEb2N1bWVudEZyYWdtZW50fSAqL1xuICAgICAgICAoZG9jdW1lbnQuaW1wb3J0Tm9kZShjb250ZW50LCB0cnVlKSk7XG4gICAgICByZXR1cm4gZG9tO1xuICAgIH1cblxuICAgIC8qICoqKiogQmVnaW4gRXZlbnRzICoqKiogKi9cblxuXG5cbiAgICAvKipcbiAgICAgKiBEaXNwYXRjaGVzIGEgY3VzdG9tIGV2ZW50IHdpdGggYW4gb3B0aW9uYWwgZGV0YWlsIHZhbHVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgTmFtZSBvZiBldmVudCB0eXBlLlxuICAgICAqIEBwYXJhbSB7Kj19IGRldGFpbCBEZXRhaWwgdmFsdWUgY29udGFpbmluZyBldmVudC1zcGVjaWZpY1xuICAgICAqICAgcGF5bG9hZC5cbiAgICAgKiBAcGFyYW0ge3sgYnViYmxlczogKGJvb2xlYW58dW5kZWZpbmVkKSwgY2FuY2VsYWJsZTogKGJvb2xlYW58dW5kZWZpbmVkKSxcbiAgICAgKiAgICAgY29tcG9zZWQ6IChib29sZWFufHVuZGVmaW5lZCkgfT19XG4gICAgICogIG9wdGlvbnMgT2JqZWN0IHNwZWNpZnlpbmcgb3B0aW9ucy4gIFRoZXNlIG1heSBpbmNsdWRlOlxuICAgICAqICBgYnViYmxlc2AgKGJvb2xlYW4sIGRlZmF1bHRzIHRvIGB0cnVlYCksXG4gICAgICogIGBjYW5jZWxhYmxlYCAoYm9vbGVhbiwgZGVmYXVsdHMgdG8gZmFsc2UpLCBhbmRcbiAgICAgKiAgYG5vZGVgIG9uIHdoaWNoIHRvIGZpcmUgdGhlIGV2ZW50IChIVE1MRWxlbWVudCwgZGVmYXVsdHMgdG8gYHRoaXNgKS5cbiAgICAgKiBAcmV0dXJuIHshRXZlbnR9IFRoZSBuZXcgZXZlbnQgdGhhdCB3YXMgZmlyZWQuXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgZmlyZSh0eXBlLCBkZXRhaWwsIG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgZGV0YWlsID0gKGRldGFpbCA9PT0gbnVsbCB8fCBkZXRhaWwgPT09IHVuZGVmaW5lZCkgPyB7fSA6IGRldGFpbDtcbiAgICAgIGxldCBldmVudCA9IG5ldyBFdmVudCh0eXBlLCB7XG4gICAgICAgIGJ1YmJsZXM6IG9wdGlvbnMuYnViYmxlcyA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IG9wdGlvbnMuYnViYmxlcyxcbiAgICAgICAgY2FuY2VsYWJsZTogQm9vbGVhbihvcHRpb25zLmNhbmNlbGFibGUpLFxuICAgICAgICBjb21wb3NlZDogb3B0aW9ucy5jb21wb3NlZCA9PT0gdW5kZWZpbmVkID8gdHJ1ZTogb3B0aW9ucy5jb21wb3NlZFxuICAgICAgfSk7XG4gICAgICBldmVudC5kZXRhaWwgPSBkZXRhaWw7XG4gICAgICBsZXQgbm9kZSA9IG9wdGlvbnMubm9kZSB8fCB0aGlzO1xuICAgICAgd3JhcChub2RlKS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgIHJldHVybiBldmVudDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZW5pZW5jZSBtZXRob2QgdG8gYWRkIGFuIGV2ZW50IGxpc3RlbmVyIG9uIGEgZ2l2ZW4gZWxlbWVudCxcbiAgICAgKiBsYXRlIGJvdW5kIHRvIGEgbmFtZWQgbWV0aG9kIG9uIHRoaXMgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7P0V2ZW50VGFyZ2V0fSBub2RlIEVsZW1lbnQgdG8gYWRkIGV2ZW50IGxpc3RlbmVyIHRvLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgTmFtZSBvZiBldmVudCB0byBsaXN0ZW4gZm9yLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIE5hbWUgb2YgaGFuZGxlciBtZXRob2Qgb24gYHRoaXNgIHRvIGNhbGwuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBsaXN0ZW4obm9kZSwgZXZlbnROYW1lLCBtZXRob2ROYW1lKSB7XG4gICAgICBub2RlID0gLyoqIEB0eXBlIHshRXZlbnRUYXJnZXR9ICovIChub2RlIHx8IHRoaXMpO1xuICAgICAgbGV0IGhibCA9IHRoaXMuX19ib3VuZExpc3RlbmVycyB8fFxuICAgICAgICAodGhpcy5fX2JvdW5kTGlzdGVuZXJzID0gbmV3IFdlYWtNYXAoKSk7XG4gICAgICBsZXQgYmwgPSBoYmwuZ2V0KG5vZGUpO1xuICAgICAgaWYgKCFibCkge1xuICAgICAgICBibCA9IHt9O1xuICAgICAgICBoYmwuc2V0KG5vZGUsIGJsKTtcbiAgICAgIH1cbiAgICAgIGxldCBrZXkgPSBldmVudE5hbWUgKyBtZXRob2ROYW1lO1xuICAgICAgaWYgKCFibFtrZXldKSB7XG4gICAgICAgIGJsW2tleV0gPSB0aGlzLl9hZGRNZXRob2RFdmVudExpc3RlbmVyVG9Ob2RlKFxuICAgICAgICAgICAgLyoqIEB0eXBlIHshTm9kZX0gKi8gKG5vZGUpLCBldmVudE5hbWUsIG1ldGhvZE5hbWUsIHRoaXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlbmllbmNlIG1ldGhvZCB0byByZW1vdmUgYW4gZXZlbnQgbGlzdGVuZXIgZnJvbSBhIGdpdmVuIGVsZW1lbnQsXG4gICAgICogbGF0ZSBib3VuZCB0byBhIG5hbWVkIG1ldGhvZCBvbiB0aGlzIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gez9FdmVudFRhcmdldH0gbm9kZSBFbGVtZW50IHRvIHJlbW92ZSBldmVudCBsaXN0ZW5lciBmcm9tLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgTmFtZSBvZiBldmVudCB0byBzdG9wIGxpc3RlbmluZyB0by5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBOYW1lIG9mIGhhbmRsZXIgbWV0aG9kIG9uIGB0aGlzYCB0byBub3QgY2FsbFxuICAgICBhbnltb3JlLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgdW5saXN0ZW4obm9kZSwgZXZlbnROYW1lLCBtZXRob2ROYW1lKSB7XG4gICAgICBub2RlID0gLyoqIEB0eXBlIHshRXZlbnRUYXJnZXR9ICovIChub2RlIHx8IHRoaXMpO1xuICAgICAgbGV0IGJsID0gdGhpcy5fX2JvdW5kTGlzdGVuZXJzICYmXG4gICAgICAgICAgdGhpcy5fX2JvdW5kTGlzdGVuZXJzLmdldCgvKiogQHR5cGUgeyFFbGVtZW50fSAqLyAobm9kZSkpO1xuICAgICAgbGV0IGtleSA9IGV2ZW50TmFtZSArIG1ldGhvZE5hbWU7XG4gICAgICBsZXQgaGFuZGxlciA9IGJsICYmIGJsW2tleV07XG4gICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICB0aGlzLl9yZW1vdmVFdmVudExpc3RlbmVyRnJvbU5vZGUoXG4gICAgICAgICAgICAvKiogQHR5cGUgeyFOb2RlfSAqLyAobm9kZSksIGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgICAgIGJsW2tleV0gPSAvKiogQHR5cGUgez99ICovIChudWxsKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZSBzY3JvbGxpbmcgYmVoYXZpb3IgdG8gYWxsIGRpcmVjdGlvbiwgb25lIGRpcmVjdGlvbiwgb3Igbm9uZS5cbiAgICAgKlxuICAgICAqIFZhbGlkIHNjcm9sbCBkaXJlY3Rpb25zOlxuICAgICAqICAgLSAnYWxsJzogc2Nyb2xsIGluIGFueSBkaXJlY3Rpb25cbiAgICAgKiAgIC0gJ3gnOiBzY3JvbGwgb25seSBpbiB0aGUgJ3gnIGRpcmVjdGlvblxuICAgICAqICAgLSAneSc6IHNjcm9sbCBvbmx5IGluIHRoZSAneScgZGlyZWN0aW9uXG4gICAgICogICAtICdub25lJzogZGlzYWJsZSBzY3JvbGxpbmcgZm9yIHRoaXMgbm9kZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBkaXJlY3Rpb24gRGlyZWN0aW9uIHRvIGFsbG93IHNjcm9sbGluZ1xuICAgICAqIERlZmF1bHRzIHRvIGBhbGxgLlxuICAgICAqIEBwYXJhbSB7RWxlbWVudD19IG5vZGUgRWxlbWVudCB0byBhcHBseSBzY3JvbGwgZGlyZWN0aW9uIHNldHRpbmcuXG4gICAgICogRGVmYXVsdHMgdG8gYHRoaXNgLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgc2V0U2Nyb2xsRGlyZWN0aW9uKGRpcmVjdGlvbiwgbm9kZSkge1xuICAgICAgc2V0VG91Y2hBY3Rpb24oXG4gICAgICAgICAgLyoqIEB0eXBlIHshRWxlbWVudH0gKi8gKG5vZGUgfHwgdGhpcyksXG4gICAgICAgICAgRElSRUNUSU9OX01BUFtkaXJlY3Rpb25dIHx8ICdhdXRvJyk7XG4gICAgfVxuICAgIC8qICoqKiogRW5kIEV2ZW50cyAqKioqICovXG5cbiAgICAvKipcbiAgICAgKiBDb252ZW5pZW5jZSBtZXRob2QgdG8gcnVuIGBxdWVyeVNlbGVjdG9yYCBvbiB0aGlzIGxvY2FsIERPTSBzY29wZS5cbiAgICAgKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gY2FsbHMgYFBvbHltZXIuZG9tKHRoaXMucm9vdCkucXVlcnlTZWxlY3RvcihzbGN0cilgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNsY3RyIFNlbGVjdG9yIHRvIHJ1biBvbiB0aGlzIGxvY2FsIERPTSBzY29wZVxuICAgICAqIEByZXR1cm4ge0VsZW1lbnR9IEVsZW1lbnQgZm91bmQgYnkgdGhlIHNlbGVjdG9yLCBvciBudWxsIGlmIG5vdCBmb3VuZC5cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICAkJChzbGN0cikge1xuICAgICAgLy8gTm90ZSwgbm8gbmVlZCB0byBgd3JhcGAgdGhpcyBiZWNhdXNlIHJvb3QgaXMgYWx3YXlzIHBhdGNoZWRcbiAgICAgIHJldHVybiB0aGlzLnJvb3QucXVlcnlTZWxlY3RvcihzbGN0cik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSBlbGVtZW50IHdob3NlIGxvY2FsIGRvbSB3aXRoaW4gd2hpY2ggdGhpcyBlbGVtZW50XG4gICAgICogaXMgY29udGFpbmVkLiBUaGlzIGlzIGEgc2hvcnRoYW5kIGZvclxuICAgICAqIGB0aGlzLmdldFJvb3ROb2RlKCkuaG9zdGAuXG4gICAgICogQHRoaXMge0VsZW1lbnR9XG4gICAgICogQHJldHVybiB7P05vZGV9IFRoZSBlbGVtZW50IHdob3NlIGxvY2FsIGRvbSB3aXRoaW4gd2hpY2ggdGhpcyBlbGVtZW50IGlzXG4gICAgICogY29udGFpbmVkLlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIGdldCBkb21Ib3N0KCkge1xuICAgICAgbGV0IHJvb3QgPSB3cmFwKHRoaXMpLmdldFJvb3ROb2RlKCk7XG4gICAgICByZXR1cm4gKHJvb3QgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KSA/IC8qKiBAdHlwZSB7U2hhZG93Um9vdH0gKi8gKHJvb3QpLmhvc3QgOiByb290O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZvcmNlIHRoaXMgZWxlbWVudCB0byBkaXN0cmlidXRlIGl0cyBjaGlsZHJlbiB0byBpdHMgbG9jYWwgZG9tLlxuICAgICAqIFRoaXMgc2hvdWxkIG5vdCBiZSBuZWNlc3NhcnkgYXMgb2YgUG9seW1lciAyLjAuMiBhbmQgaXMgcHJvdmlkZWQgb25seVxuICAgICAqIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIGRpc3RyaWJ1dGVDb250ZW50KCkge1xuICAgICAgY29uc3QgdGhpc0VsID0gLyoqIEB0eXBlIHtFbGVtZW50fSAqLyAodGhpcyk7XG4gICAgICBjb25zdCBkb21BcGkgPSAvKiogQHR5cGUge1BvbHltZXJEb21BcGl9ICovKGRvbSh0aGlzRWwpKTtcbiAgICAgIGlmICh3aW5kb3cuU2hhZHlET00gJiYgZG9tQXBpLnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgU2hhZHlET00uZmx1c2goKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBub2RlcyB0aGF0IGFyZSB0aGUgZWZmZWN0aXZlIGNoaWxkTm9kZXMuIFRoZSBlZmZlY3RpdmVcbiAgICAgKiBjaGlsZE5vZGVzIGxpc3QgaXMgdGhlIHNhbWUgYXMgdGhlIGVsZW1lbnQncyBjaGlsZE5vZGVzIGV4Y2VwdCB0aGF0XG4gICAgICogYW55IGA8Y29udGVudD5gIGVsZW1lbnRzIGFyZSByZXBsYWNlZCB3aXRoIHRoZSBsaXN0IG9mIG5vZGVzIGRpc3RyaWJ1dGVkXG4gICAgICogdG8gdGhlIGA8Y29udGVudD5gLCB0aGUgcmVzdWx0IG9mIGl0cyBgZ2V0RGlzdHJpYnV0ZWROb2Rlc2AgbWV0aG9kLlxuICAgICAqIEByZXR1cm4geyFBcnJheTwhTm9kZT59IExpc3Qgb2YgZWZmZWN0aXZlIGNoaWxkIG5vZGVzLlxuICAgICAqIEBzdXBwcmVzcyB7aW52YWxpZENhc3RzfSBMZWdhY3lFbGVtZW50TWl4aW4gbXVzdCBiZSBhcHBsaWVkIHRvIGFuXG4gICAgICogICAgIEhUTUxFbGVtZW50XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgZ2V0RWZmZWN0aXZlQ2hpbGROb2RlcygpIHtcbiAgICAgIGNvbnN0IHRoaXNFbCA9IC8qKiBAdHlwZSB7RWxlbWVudH0gKi8gKHRoaXMpO1xuICAgICAgY29uc3QgZG9tQXBpID0gLyoqIEB0eXBlIHtQb2x5bWVyRG9tQXBpfSAqLyAoZG9tKHRoaXNFbCkpO1xuICAgICAgcmV0dXJuIGRvbUFwaS5nZXRFZmZlY3RpdmVDaGlsZE5vZGVzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGxpc3Qgb2Ygbm9kZXMgZGlzdHJpYnV0ZWQgd2l0aGluIHRoaXMgZWxlbWVudCB0aGF0IG1hdGNoXG4gICAgICogYHNlbGVjdG9yYC4gVGhlc2UgY2FuIGJlIGRvbSBjaGlsZHJlbiBvciBlbGVtZW50cyBkaXN0cmlidXRlZCB0b1xuICAgICAqIGNoaWxkcmVuIHRoYXQgYXJlIGluc2VydGlvbiBwb2ludHMuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yIFNlbGVjdG9yIHRvIHJ1bi5cbiAgICAgKiBAcmV0dXJuIHshQXJyYXk8IU5vZGU+fSBMaXN0IG9mIGRpc3RyaWJ1dGVkIGVsZW1lbnRzIHRoYXQgbWF0Y2ggc2VsZWN0b3IuXG4gICAgICogQHN1cHByZXNzIHtpbnZhbGlkQ2FzdHN9IExlZ2FjeUVsZW1lbnRNaXhpbiBtdXN0IGJlIGFwcGxpZWQgdG8gYW5cbiAgICAgKiBIVE1MRWxlbWVudFxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIHF1ZXJ5RGlzdHJpYnV0ZWRFbGVtZW50cyhzZWxlY3Rvcikge1xuICAgICAgY29uc3QgdGhpc0VsID0gLyoqIEB0eXBlIHtFbGVtZW50fSAqLyAodGhpcyk7XG4gICAgICBjb25zdCBkb21BcGkgPSAvKiogQHR5cGUge1BvbHltZXJEb21BcGl9ICovIChkb20odGhpc0VsKSk7XG4gICAgICByZXR1cm4gZG9tQXBpLnF1ZXJ5RGlzdHJpYnV0ZWRFbGVtZW50cyhzZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGxpc3Qgb2YgZWxlbWVudHMgdGhhdCBhcmUgdGhlIGVmZmVjdGl2ZSBjaGlsZHJlbi4gVGhlIGVmZmVjdGl2ZVxuICAgICAqIGNoaWxkcmVuIGxpc3QgaXMgdGhlIHNhbWUgYXMgdGhlIGVsZW1lbnQncyBjaGlsZHJlbiBleGNlcHQgdGhhdFxuICAgICAqIGFueSBgPGNvbnRlbnQ+YCBlbGVtZW50cyBhcmUgcmVwbGFjZWQgd2l0aCB0aGUgbGlzdCBvZiBlbGVtZW50c1xuICAgICAqIGRpc3RyaWJ1dGVkIHRvIHRoZSBgPGNvbnRlbnQ+YC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4geyFBcnJheTwhTm9kZT59IExpc3Qgb2YgZWZmZWN0aXZlIGNoaWxkcmVuLlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIGdldEVmZmVjdGl2ZUNoaWxkcmVuKCkge1xuICAgICAgbGV0IGxpc3QgPSB0aGlzLmdldEVmZmVjdGl2ZUNoaWxkTm9kZXMoKTtcbiAgICAgIHJldHVybiBsaXN0LmZpbHRlcihmdW5jdGlvbigvKiogQHR5cGUgeyFOb2RlfSAqLyBuKSB7XG4gICAgICAgIHJldHVybiAobi5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHN0cmluZyBvZiB0ZXh0IGNvbnRlbnQgdGhhdCBpcyB0aGUgY29uY2F0ZW5hdGlvbiBvZiB0aGVcbiAgICAgKiB0ZXh0IGNvbnRlbnQncyBvZiB0aGUgZWxlbWVudCdzIGVmZmVjdGl2ZSBjaGlsZE5vZGVzICh0aGUgZWxlbWVudHNcbiAgICAgKiByZXR1cm5lZCBieSA8YSBocmVmPVwiI2dldEVmZmVjdGl2ZUNoaWxkTm9kZXM+Z2V0RWZmZWN0aXZlQ2hpbGROb2RlczwvYT4uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IExpc3Qgb2YgZWZmZWN0aXZlIGNoaWxkcmVuLlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIGdldEVmZmVjdGl2ZVRleHRDb250ZW50KCkge1xuICAgICAgbGV0IGNuID0gdGhpcy5nZXRFZmZlY3RpdmVDaGlsZE5vZGVzKCk7XG4gICAgICBsZXQgdGMgPSBbXTtcbiAgICAgIGZvciAobGV0IGk9MCwgYzsgKGMgPSBjbltpXSk7IGkrKykge1xuICAgICAgICBpZiAoYy5ub2RlVHlwZSAhPT0gTm9kZS5DT01NRU5UX05PREUpIHtcbiAgICAgICAgICB0Yy5wdXNoKGMudGV4dENvbnRlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGMuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZmlyc3QgZWZmZWN0aXZlIGNoaWxkTm9kZSB3aXRoaW4gdGhpcyBlbGVtZW50IHRoYXRcbiAgICAgKiBtYXRjaCBgc2VsZWN0b3JgLiBUaGVzZSBjYW4gYmUgZG9tIGNoaWxkIG5vZGVzIG9yIGVsZW1lbnRzIGRpc3RyaWJ1dGVkXG4gICAgICogdG8gY2hpbGRyZW4gdGhhdCBhcmUgaW5zZXJ0aW9uIHBvaW50cy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3IgU2VsZWN0b3IgdG8gcnVuLlxuICAgICAqIEByZXR1cm4ge05vZGV9IEZpcnN0IGVmZmVjdGl2ZSBjaGlsZCBub2RlIHRoYXQgbWF0Y2hlcyBzZWxlY3Rvci5cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBxdWVyeUVmZmVjdGl2ZUNoaWxkcmVuKHNlbGVjdG9yKSB7XG4gICAgICBsZXQgZSQgPSB0aGlzLnF1ZXJ5RGlzdHJpYnV0ZWRFbGVtZW50cyhzZWxlY3Rvcik7XG4gICAgICByZXR1cm4gZSQgJiYgZSRbMF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGxpc3Qgb2YgZWZmZWN0aXZlIGNoaWxkTm9kZXMgd2l0aGluIHRoaXMgZWxlbWVudCB0aGF0XG4gICAgICogbWF0Y2ggYHNlbGVjdG9yYC4gVGhlc2UgY2FuIGJlIGRvbSBjaGlsZCBub2RlcyBvciBlbGVtZW50cyBkaXN0cmlidXRlZFxuICAgICAqIHRvIGNoaWxkcmVuIHRoYXQgYXJlIGluc2VydGlvbiBwb2ludHMuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yIFNlbGVjdG9yIHRvIHJ1bi5cbiAgICAgKiBAcmV0dXJuIHshQXJyYXk8IU5vZGU+fSBMaXN0IG9mIGVmZmVjdGl2ZSBjaGlsZCBub2RlcyB0aGF0IG1hdGNoXG4gICAgICogICAgIHNlbGVjdG9yLlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIHF1ZXJ5QWxsRWZmZWN0aXZlQ2hpbGRyZW4oc2VsZWN0b3IpIHtcbiAgICAgIHJldHVybiB0aGlzLnF1ZXJ5RGlzdHJpYnV0ZWRFbGVtZW50cyhzZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGxpc3Qgb2Ygbm9kZXMgZGlzdHJpYnV0ZWQgdG8gdGhpcyBlbGVtZW50J3MgYDxzbG90PmAuXG4gICAgICpcbiAgICAgKiBJZiB0aGlzIGVsZW1lbnQgY29udGFpbnMgbW9yZSB0aGFuIG9uZSBgPHNsb3Q+YCBpbiBpdHMgbG9jYWwgRE9NLFxuICAgICAqIGFuIG9wdGlvbmFsIHNlbGVjdG9yIG1heSBiZSBwYXNzZWQgdG8gY2hvb3NlIHRoZSBkZXNpcmVkIGNvbnRlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IHNsY3RyIENTUyBzZWxlY3RvciB0byBjaG9vc2UgdGhlIGRlc2lyZWRcbiAgICAgKiAgIGA8c2xvdD5gLiAgRGVmYXVsdHMgdG8gYGNvbnRlbnRgLlxuICAgICAqIEByZXR1cm4geyFBcnJheTwhTm9kZT59IExpc3Qgb2YgZGlzdHJpYnV0ZWQgbm9kZXMgZm9yIHRoZSBgPHNsb3Q+YC5cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBnZXRDb250ZW50Q2hpbGROb2RlcyhzbGN0cikge1xuICAgICAgLy8gTm90ZSwgbm8gbmVlZCB0byBgd3JhcGAgdGhpcyBiZWNhdXNlIHJvb3QgaXMgYWx3YXlzXG4gICAgICBsZXQgY29udGVudCA9IHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKHNsY3RyIHx8ICdzbG90Jyk7XG4gICAgICByZXR1cm4gY29udGVudCA/XG4gICAgICAgICAgLyoqIEB0eXBlIHtQb2x5bWVyRG9tQXBpfSAqLyAoZG9tKGNvbnRlbnQpKS5nZXREaXN0cmlidXRlZE5vZGVzKCkgOlxuICAgICAgICAgIFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBsaXN0IG9mIGVsZW1lbnQgY2hpbGRyZW4gZGlzdHJpYnV0ZWQgdG8gdGhpcyBlbGVtZW50J3NcbiAgICAgKiBgPHNsb3Q+YC5cbiAgICAgKlxuICAgICAqIElmIHRoaXMgZWxlbWVudCBjb250YWlucyBtb3JlIHRoYW4gb25lIGA8c2xvdD5gIGluIGl0c1xuICAgICAqIGxvY2FsIERPTSwgYW4gb3B0aW9uYWwgc2VsZWN0b3IgbWF5IGJlIHBhc3NlZCB0byBjaG9vc2UgdGhlIGRlc2lyZWRcbiAgICAgKiBjb250ZW50LiAgVGhpcyBtZXRob2QgZGlmZmVycyBmcm9tIGBnZXRDb250ZW50Q2hpbGROb2Rlc2AgaW4gdGhhdCBvbmx5XG4gICAgICogZWxlbWVudHMgYXJlIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBzbGN0ciBDU1Mgc2VsZWN0b3IgdG8gY2hvb3NlIHRoZSBkZXNpcmVkXG4gICAgICogICBgPGNvbnRlbnQ+YC4gIERlZmF1bHRzIHRvIGBjb250ZW50YC5cbiAgICAgKiBAcmV0dXJuIHshQXJyYXk8IUhUTUxFbGVtZW50Pn0gTGlzdCBvZiBkaXN0cmlidXRlZCBub2RlcyBmb3IgdGhlXG4gICAgICogICBgPHNsb3Q+YC5cbiAgICAgKiBAc3VwcHJlc3Mge2ludmFsaWRDYXN0c31cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBnZXRDb250ZW50Q2hpbGRyZW4oc2xjdHIpIHtcbiAgICAgIGxldCBjaGlsZHJlbiA9IC8qKiBAdHlwZSB7IUFycmF5PCFIVE1MRWxlbWVudD59ICovKHRoaXMuZ2V0Q29udGVudENoaWxkTm9kZXMoc2xjdHIpLmZpbHRlcihmdW5jdGlvbihuKSB7XG4gICAgICAgIHJldHVybiAobi5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpO1xuICAgICAgfSkpO1xuICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIGFuIGVsZW1lbnQgaXMgaW4gdGhpcyBlbGVtZW50J3MgbGlnaHQgRE9NIHRyZWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gez9Ob2RlfSBub2RlIFRoZSBlbGVtZW50IHRvIGJlIGNoZWNrZWQuXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiBub2RlIGlzIGluIHRoaXMgZWxlbWVudCdzIGxpZ2h0IERPTSB0cmVlLlxuICAgICAqIEBzdXBwcmVzcyB7aW52YWxpZENhc3RzfSBMZWdhY3lFbGVtZW50TWl4aW4gbXVzdCBiZSBhcHBsaWVkIHRvIGFuXG4gICAgICogSFRNTEVsZW1lbnRcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBpc0xpZ2h0RGVzY2VuZGFudChub2RlKSB7XG4gICAgICBjb25zdCB0aGlzTm9kZSA9IC8qKiBAdHlwZSB7Tm9kZX0gKi8gKHRoaXMpO1xuICAgICAgcmV0dXJuIHRoaXNOb2RlICE9PSBub2RlICYmIHdyYXAodGhpc05vZGUpLmNvbnRhaW5zKG5vZGUpICYmXG4gICAgICAgIHdyYXAodGhpc05vZGUpLmdldFJvb3ROb2RlKCkgPT09IHdyYXAobm9kZSkuZ2V0Um9vdE5vZGUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciBhbiBlbGVtZW50IGlzIGluIHRoaXMgZWxlbWVudCdzIGxvY2FsIERPTSB0cmVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHshRWxlbWVudH0gbm9kZSBUaGUgZWxlbWVudCB0byBiZSBjaGVja2VkLlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgbm9kZSBpcyBpbiB0aGlzIGVsZW1lbnQncyBsb2NhbCBET00gdHJlZS5cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBpc0xvY2FsRGVzY2VuZGFudChub2RlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yb290ID09PSB3cmFwKG5vZGUpLmdldFJvb3ROb2RlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTm8tb3AgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LiBUaGlzIHNob3VsZCBub3cgYmUgaGFuZGxlZCBieVxuICAgICAqIFNoYWR5Q3NzIGxpYnJhcnkuXG4gICAgICogQHBhcmFtICB7IUVsZW1lbnR9IGNvbnRhaW5lciBDb250YWluZXIgZWxlbWVudCB0byBzY29wZVxuICAgICAqIEBwYXJhbSAge2Jvb2xlYW49fSBzaG91bGRPYnNlcnZlIGlmIHRydWUsIHN0YXJ0IGEgbXV0YXRpb24gb2JzZXJ2ZXIgZm9yIGFkZGVkIG5vZGVzIHRvIHRoZSBjb250YWluZXJcbiAgICAgKiBAcmV0dXJuIHs/TXV0YXRpb25PYnNlcnZlcn0gUmV0dXJucyBhIG5ldyBNdXRhdGlvbk9ic2VydmVyIG9uIGBjb250YWluZXJgIGlmIGBzaG91bGRPYnNlcnZlYCBpcyB0cnVlLlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIHNjb3BlU3VidHJlZShjb250YWluZXIsIHNob3VsZE9ic2VydmUgPSBmYWxzZSkge1xuICAgICAgcmV0dXJuIHNjb3BlU3VidHJlZShjb250YWluZXIsIHNob3VsZE9ic2VydmUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNvbXB1dGVkIHN0eWxlIHZhbHVlIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFRoZSBjc3MgcHJvcGVydHkgbmFtZS5cbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbXB1dGVkIGNzcyBwcm9wZXJ0eSB2YWx1ZSBmb3IgdGhlIGdpdmVuXG4gICAgICogYHByb3BlcnR5YC5cbiAgICAgKiBAc3VwcHJlc3Mge2ludmFsaWRDYXN0c30gTGVnYWN5RWxlbWVudE1peGluIG11c3QgYmUgYXBwbGllZCB0byBhblxuICAgICAqICAgICBIVE1MRWxlbWVudFxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIGdldENvbXB1dGVkU3R5bGVWYWx1ZShwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIHN0eWxlSW50ZXJmYWNlLmdldENvbXB1dGVkU3R5bGVWYWx1ZSgvKiogQHR5cGUgeyFFbGVtZW50fSAqLyh0aGlzKSwgcHJvcGVydHkpO1xuICAgIH1cblxuICAgIC8vIGRlYm91bmNlXG5cbiAgICAvKipcbiAgICAgKiBDYWxsIGBkZWJvdW5jZWAgdG8gY29sbGFwc2UgbXVsdGlwbGUgcmVxdWVzdHMgZm9yIGEgbmFtZWQgdGFzayBpbnRvXG4gICAgICogb25lIGludm9jYXRpb24gd2hpY2ggaXMgbWFkZSBhZnRlciB0aGUgd2FpdCB0aW1lIGhhcyBlbGFwc2VkIHdpdGhcbiAgICAgKiBubyBuZXcgcmVxdWVzdC4gIElmIG5vIHdhaXQgdGltZSBpcyBnaXZlbiwgdGhlIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkXG4gICAgICogYXQgbWljcm90YXNrIHRpbWluZyAoZ3VhcmFudGVlZCBiZWZvcmUgcGFpbnQpLlxuICAgICAqXG4gICAgICogICAgIGRlYm91bmNlZENsaWNrQWN0aW9uKGUpIHtcbiAgICAgKiAgICAgICAvLyB3aWxsIG5vdCBjYWxsIGBwcm9jZXNzQ2xpY2tgIG1vcmUgdGhhbiBvbmNlIHBlciAxMDBtc1xuICAgICAqICAgICAgIHRoaXMuZGVib3VuY2UoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICogICAgICAgIHRoaXMucHJvY2Vzc0NsaWNrKCk7XG4gICAgICogICAgICAgfSAxMDApO1xuICAgICAqICAgICB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gam9iTmFtZSBTdHJpbmcgdG8gaWRlbnRpZnkgdGhlIGRlYm91bmNlIGpvYi5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCk6dm9pZH0gY2FsbGJhY2sgRnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgKHdpdGggYHRoaXNgXG4gICAgICogICBjb250ZXh0KSB3aGVuIHRoZSB3YWl0IHRpbWUgZWxhcHNlcy5cbiAgICAgKiBAcGFyYW0ge251bWJlcj19IHdhaXQgT3B0aW9uYWwgd2FpdCB0aW1lIGluIG1pbGxpc2Vjb25kcyAobXMpIGFmdGVyIHRoZVxuICAgICAqICAgbGFzdCBzaWduYWwgdGhhdCBtdXN0IGVsYXBzZSBiZWZvcmUgaW52b2tpbmcgYGNhbGxiYWNrYFxuICAgICAqIEByZXR1cm4geyFPYmplY3R9IFJldHVybnMgYSBkZWJvdW5jZXIgb2JqZWN0IG9uIHdoaWNoIGV4aXN0cyB0aGVcbiAgICAgKiBmb2xsb3dpbmcgbWV0aG9kczogYGlzQWN0aXZlKClgIHJldHVybnMgdHJ1ZSBpZiB0aGUgZGVib3VuY2VyIGlzXG4gICAgICogYWN0aXZlOyBgY2FuY2VsKClgIGNhbmNlbHMgdGhlIGRlYm91bmNlciBpZiBpdCBpcyBhY3RpdmU7XG4gICAgICogYGZsdXNoKClgIGltbWVkaWF0ZWx5IGludm9rZXMgdGhlIGRlYm91bmNlZCBjYWxsYmFjayBpZiB0aGUgZGVib3VuY2VyXG4gICAgICogaXMgYWN0aXZlLlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIGRlYm91bmNlKGpvYk5hbWUsIGNhbGxiYWNrLCB3YWl0KSB7XG4gICAgICB0aGlzLl9kZWJvdW5jZXJzID0gdGhpcy5fZGVib3VuY2VycyB8fCB7fTtcbiAgICAgIHJldHVybiB0aGlzLl9kZWJvdW5jZXJzW2pvYk5hbWVdID0gRGVib3VuY2VyLmRlYm91bmNlKFxuICAgICAgICAgICAgdGhpcy5fZGVib3VuY2Vyc1tqb2JOYW1lXVxuICAgICAgICAgICwgd2FpdCA+IDAgPyB0aW1lT3V0LmFmdGVyKHdhaXQpIDogbWljcm9UYXNrXG4gICAgICAgICAgLCBjYWxsYmFjay5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgYSBuYW1lZCBkZWJvdW5jZXIgaXMgYWN0aXZlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGpvYk5hbWUgVGhlIG5hbWUgb2YgdGhlIGRlYm91bmNlciBzdGFydGVkIHdpdGggYGRlYm91bmNlYFxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGRlYm91bmNlciBpcyBhY3RpdmUgKGhhcyBub3QgeWV0IGZpcmVkKS5cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBpc0RlYm91bmNlckFjdGl2ZShqb2JOYW1lKSB7XG4gICAgICB0aGlzLl9kZWJvdW5jZXJzID0gdGhpcy5fZGVib3VuY2VycyB8fCB7fTtcbiAgICAgIGxldCBkZWJvdW5jZXIgPSB0aGlzLl9kZWJvdW5jZXJzW2pvYk5hbWVdO1xuICAgICAgcmV0dXJuICEhKGRlYm91bmNlciAmJiBkZWJvdW5jZXIuaXNBY3RpdmUoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW1tZWRpYXRlbHkgY2FsbHMgdGhlIGRlYm91bmNlciBgY2FsbGJhY2tgIGFuZCBpbmFjdGl2YXRlcyBpdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBqb2JOYW1lIFRoZSBuYW1lIG9mIHRoZSBkZWJvdW5jZXIgc3RhcnRlZCB3aXRoIGBkZWJvdW5jZWBcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIGZsdXNoRGVib3VuY2VyKGpvYk5hbWUpIHtcbiAgICAgIHRoaXMuX2RlYm91bmNlcnMgPSB0aGlzLl9kZWJvdW5jZXJzIHx8IHt9O1xuICAgICAgbGV0IGRlYm91bmNlciA9IHRoaXMuX2RlYm91bmNlcnNbam9iTmFtZV07XG4gICAgICBpZiAoZGVib3VuY2VyKSB7XG4gICAgICAgIGRlYm91bmNlci5mbHVzaCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbmNlbHMgYW4gYWN0aXZlIGRlYm91bmNlci4gIFRoZSBgY2FsbGJhY2tgIHdpbGwgbm90IGJlIGNhbGxlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBqb2JOYW1lIFRoZSBuYW1lIG9mIHRoZSBkZWJvdW5jZXIgc3RhcnRlZCB3aXRoIGBkZWJvdW5jZWBcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIGNhbmNlbERlYm91bmNlcihqb2JOYW1lKSB7XG4gICAgICB0aGlzLl9kZWJvdW5jZXJzID0gdGhpcy5fZGVib3VuY2VycyB8fCB7fTtcbiAgICAgIGxldCBkZWJvdW5jZXIgPSB0aGlzLl9kZWJvdW5jZXJzW2pvYk5hbWVdO1xuICAgICAgaWYgKGRlYm91bmNlcikge1xuICAgICAgICBkZWJvdW5jZXIuY2FuY2VsKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUnVucyBhIGNhbGxiYWNrIGZ1bmN0aW9uIGFzeW5jaHJvbm91c2x5LlxuICAgICAqXG4gICAgICogQnkgZGVmYXVsdCAoaWYgbm8gd2FpdFRpbWUgaXMgc3BlY2lmaWVkKSwgYXN5bmMgY2FsbGJhY2tzIGFyZSBydW4gYXRcbiAgICAgKiBtaWNyb3Rhc2sgdGltaW5nLCB3aGljaCB3aWxsIG9jY3VyIGJlZm9yZSBwYWludC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgZnVuY3Rpb24gdG8gcnVuLCBib3VuZCB0b1xuICAgICAqICAgICBgdGhpc2AuXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSB3YWl0VGltZSBUaW1lIHRvIHdhaXQgYmVmb3JlIGNhbGxpbmcgdGhlXG4gICAgICogICBgY2FsbGJhY2tgLiAgSWYgdW5zcGVjaWZpZWQgb3IgMCwgdGhlIGNhbGxiYWNrIHdpbGwgYmUgcnVuIGF0IG1pY3JvdGFza1xuICAgICAqICAgdGltaW5nIChiZWZvcmUgcGFpbnQpLlxuICAgICAqIEByZXR1cm4ge251bWJlcn0gSGFuZGxlIHRoYXQgbWF5IGJlIHVzZWQgdG8gY2FuY2VsIHRoZSBhc3luYyBqb2IuXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgYXN5bmMoY2FsbGJhY2ssIHdhaXRUaW1lKSB7XG4gICAgICByZXR1cm4gd2FpdFRpbWUgPiAwID8gdGltZU91dC5ydW4oY2FsbGJhY2suYmluZCh0aGlzKSwgd2FpdFRpbWUpIDpcbiAgICAgICAgICB+bWljcm9UYXNrLnJ1bihjYWxsYmFjay5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYW5jZWxzIGFuIGFzeW5jIG9wZXJhdGlvbiBzdGFydGVkIHdpdGggYGFzeW5jYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoYW5kbGUgSGFuZGxlIHJldHVybmVkIGZyb20gb3JpZ2luYWwgYGFzeW5jYCBjYWxsIHRvXG4gICAgICogICBjYW5jZWwuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBjYW5jZWxBc3luYyhoYW5kbGUpIHtcbiAgICAgIGhhbmRsZSA8IDAgPyBtaWNyb1Rhc2suY2FuY2VsKH5oYW5kbGUpIDpcbiAgICAgICAgICB0aW1lT3V0LmNhbmNlbChoYW5kbGUpO1xuICAgIH1cblxuICAgIC8vIG90aGVyXG5cbiAgICAvKipcbiAgICAgKiBDb252ZW5pZW5jZSBtZXRob2QgZm9yIGNyZWF0aW5nIGFuIGVsZW1lbnQgYW5kIGNvbmZpZ3VyaW5nIGl0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZyBIVE1MIGVsZW1lbnQgdGFnIHRvIGNyZWF0ZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdD19IHByb3BzIE9iamVjdCBvZiBwcm9wZXJ0aWVzIHRvIGNvbmZpZ3VyZSBvbiB0aGVcbiAgICAgKiAgICBpbnN0YW5jZS5cbiAgICAgKiBAcmV0dXJuIHshRWxlbWVudH0gTmV3bHkgY3JlYXRlZCBhbmQgY29uZmlndXJlZCBlbGVtZW50LlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIGNyZWF0ZSh0YWcsIHByb3BzKSB7XG4gICAgICBsZXQgZWx0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuICAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgIGlmIChlbHQuc2V0UHJvcGVydGllcykge1xuICAgICAgICAgIGVsdC5zZXRQcm9wZXJ0aWVzKHByb3BzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmb3IgKGxldCBuIGluIHByb3BzKSB7XG4gICAgICAgICAgICBlbHRbbl0gPSBwcm9wc1tuXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBlbHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUG9seWZpbGwgZm9yIEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMsIHdoaWNoIGlzIHNvbWV0aW1lcyBzdGlsbFxuICAgICAqIHByZWZpeGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yIFNlbGVjdG9yIHRvIHRlc3QuXG4gICAgICogQHBhcmFtIHshRWxlbWVudD19IG5vZGUgRWxlbWVudCB0byB0ZXN0IHRoZSBzZWxlY3RvciBhZ2FpbnN0LlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGVsZW1lbnQgbWF0Y2hlcyB0aGUgc2VsZWN0b3IuXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgZWxlbWVudE1hdGNoZXMoc2VsZWN0b3IsIG5vZGUpIHtcbiAgICAgIHJldHVybiBtYXRjaGVzU2VsZWN0b3IoIChub2RlIHx8IHRoaXMpLCBzZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlcyBhbiBIVE1MIGF0dHJpYnV0ZSBvbiBvciBvZmYuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBIVE1MIGF0dHJpYnV0ZSBuYW1lXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gYm9vbCBCb29sZWFuIHRvIGZvcmNlIHRoZSBhdHRyaWJ1dGUgb24gb3Igb2ZmLlxuICAgICAqICAgIFdoZW4gdW5zcGVjaWZpZWQsIHRoZSBzdGF0ZSBvZiB0aGUgYXR0cmlidXRlIHdpbGwgYmUgcmV2ZXJzZWQuXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgYXR0cmlidXRlIG5vdyBleGlzdHNcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICB0b2dnbGVBdHRyaWJ1dGUobmFtZSwgYm9vbCkge1xuICAgICAgbGV0IG5vZGUgPSAvKiogQHR5cGUge0VsZW1lbnR9ICovKHRoaXMpO1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgbm9kZSA9IC8qKiBAdHlwZSB7RWxlbWVudH0gKi8oYXJndW1lbnRzWzJdKTtcbiAgICAgIH1cbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgYm9vbCA9ICFub2RlLmhhc0F0dHJpYnV0ZShuYW1lKTtcbiAgICAgIH1cbiAgICAgIGlmIChib29sKSB7XG4gICAgICAgIHdyYXAobm9kZSkuc2V0QXR0cmlidXRlKG5hbWUsICcnKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3cmFwKG5vZGUpLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlcyBhIENTUyBjbGFzcyBvbiBvciBvZmYuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBDU1MgY2xhc3MgbmFtZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGJvb2wgQm9vbGVhbiB0byBmb3JjZSB0aGUgY2xhc3Mgb24gb3Igb2ZmLlxuICAgICAqICAgIFdoZW4gdW5zcGVjaWZpZWQsIHRoZSBzdGF0ZSBvZiB0aGUgY2xhc3Mgd2lsbCBiZSByZXZlcnNlZC5cbiAgICAgKiBAcGFyYW0ge0VsZW1lbnQ9fSBub2RlIE5vZGUgdG8gdGFyZ2V0LiAgRGVmYXVsdHMgdG8gYHRoaXNgLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgdG9nZ2xlQ2xhc3MobmFtZSwgYm9vbCwgbm9kZSkge1xuICAgICAgbm9kZSA9IC8qKiBAdHlwZSB7RWxlbWVudH0gKi8gKG5vZGUgfHwgdGhpcyk7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgIGJvb2wgPSAhbm9kZS5jbGFzc0xpc3QuY29udGFpbnMobmFtZSk7XG4gICAgICB9XG4gICAgICBpZiAoYm9vbCkge1xuICAgICAgICBub2RlLmNsYXNzTGlzdC5hZGQobmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLmNsYXNzTGlzdC5yZW1vdmUobmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3Jvc3MtcGxhdGZvcm0gaGVscGVyIGZvciBzZXR0aW5nIGFuIGVsZW1lbnQncyBDU1MgYHRyYW5zZm9ybWAgcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHJhbnNmb3JtVGV4dCBUcmFuc2Zvcm0gc2V0dGluZy5cbiAgICAgKiBAcGFyYW0ge0VsZW1lbnQ9fSBub2RlIEVsZW1lbnQgdG8gYXBwbHkgdGhlIHRyYW5zZm9ybSB0by5cbiAgICAgKiBEZWZhdWx0cyB0byBgdGhpc2BcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIHRyYW5zZm9ybSh0cmFuc2Zvcm1UZXh0LCBub2RlKSB7XG4gICAgICBub2RlID0gLyoqIEB0eXBlIHtFbGVtZW50fSAqLyAobm9kZSB8fCB0aGlzKTtcbiAgICAgIG5vZGUuc3R5bGUud2Via2l0VHJhbnNmb3JtID0gdHJhbnNmb3JtVGV4dDtcbiAgICAgIG5vZGUuc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtVGV4dDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcm9zcy1wbGF0Zm9ybSBoZWxwZXIgZm9yIHNldHRpbmcgYW4gZWxlbWVudCdzIENTUyBgdHJhbnNsYXRlM2RgXG4gICAgICogcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IHggWCBvZmZzZXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSB5IFkgb2Zmc2V0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30geiBaIG9mZnNldC5cbiAgICAgKiBAcGFyYW0ge0VsZW1lbnQ9fSBub2RlIEVsZW1lbnQgdG8gYXBwbHkgdGhlIHRyYW5zZm9ybSB0by5cbiAgICAgKiBEZWZhdWx0cyB0byBgdGhpc2AuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICB0cmFuc2xhdGUzZCh4LCB5LCB6LCBub2RlKSB7XG4gICAgICBub2RlID0gLyoqIEB0eXBlIHtFbGVtZW50fSAqLyAobm9kZSB8fCB0aGlzKTtcbiAgICAgIHRoaXMudHJhbnNmb3JtKCd0cmFuc2xhdGUzZCgnICsgeCArICcsJyArIHkgKyAnLCcgKyB6ICsgJyknLCBub2RlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFuIGl0ZW0gZnJvbSBhbiBhcnJheSwgaWYgaXQgZXhpc3RzLlxuICAgICAqXG4gICAgICogSWYgdGhlIGFycmF5IGlzIHNwZWNpZmllZCBieSBwYXRoLCBhIGNoYW5nZSBub3RpZmljYXRpb24gaXNcbiAgICAgKiBnZW5lcmF0ZWQsIHNvIHRoYXQgb2JzZXJ2ZXJzLCBkYXRhIGJpbmRpbmdzIGFuZCBjb21wdXRlZFxuICAgICAqIHByb3BlcnRpZXMgd2F0Y2hpbmcgdGhhdCBwYXRoIGNhbiB1cGRhdGUuXG4gICAgICpcbiAgICAgKiBJZiB0aGUgYXJyYXkgaXMgcGFzc2VkIGRpcmVjdGx5LCAqKm5vIGNoYW5nZVxuICAgICAqIG5vdGlmaWNhdGlvbiBpcyBnZW5lcmF0ZWQqKi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PG51bWJlcnxzdHJpbmc+fSBhcnJheU9yUGF0aCBQYXRoIHRvIGFycmF5IGZyb21cbiAgICAgKiAgICAgd2hpY2ggdG8gcmVtb3ZlIHRoZSBpdGVtXG4gICAgICogICAob3IgdGhlIGFycmF5IGl0c2VsZikuXG4gICAgICogQHBhcmFtIHsqfSBpdGVtIEl0ZW0gdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBjb250YWluaW5nIGl0ZW0gcmVtb3ZlZC5cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBhcnJheURlbGV0ZShhcnJheU9yUGF0aCwgaXRlbSkge1xuICAgICAgbGV0IGluZGV4O1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJyYXlPclBhdGgpKSB7XG4gICAgICAgIGluZGV4ID0gYXJyYXlPclBhdGguaW5kZXhPZihpdGVtKTtcbiAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICByZXR1cm4gYXJyYXlPclBhdGguc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGFyciA9IGdldCh0aGlzLCBhcnJheU9yUGF0aCk7XG4gICAgICAgIGluZGV4ID0gYXJyLmluZGV4T2YoaXRlbSk7XG4gICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc3BsaWNlKGFycmF5T3JQYXRoLCBpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIGxvZ2dpbmdcblxuICAgIC8qKlxuICAgICAqIEZhY2FkZXMgYGNvbnNvbGUubG9nYC9gd2FybmAvYGVycm9yYCBhcyBvdmVycmlkZSBwb2ludC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsZXZlbCBPbmUgb2YgJ2xvZycsICd3YXJuJywgJ2Vycm9yJ1xuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgQXJyYXkgb2Ygc3RyaW5ncyBvciBvYmplY3RzIHRvIGxvZ1xuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX2xvZ2dlcihsZXZlbCwgYXJncykge1xuICAgICAgLy8gYWNjZXB0IFsnZm9vJywgJ2JhciddIGFuZCBbWydmb28nLCAnYmFyJ11dXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShhcmdzKSAmJiBhcmdzLmxlbmd0aCA9PT0gMSAmJiBBcnJheS5pc0FycmF5KGFyZ3NbMF0pKSB7XG4gICAgICAgIGFyZ3MgPSBhcmdzWzBdO1xuICAgICAgfVxuICAgICAgc3dpdGNoKGxldmVsKSB7XG4gICAgICAgIGNhc2UgJ2xvZyc6XG4gICAgICAgIGNhc2UgJ3dhcm4nOlxuICAgICAgICBjYXNlICdlcnJvcic6XG4gICAgICAgICAgY29uc29sZVtsZXZlbF0oLi4uYXJncyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmFjYWRlcyBgY29uc29sZS5sb2dgIGFzIGFuIG92ZXJyaWRlIHBvaW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHsuLi4qfSBhcmdzIEFycmF5IG9mIHN0cmluZ3Mgb3Igb2JqZWN0cyB0byBsb2dcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9sb2coLi4uYXJncykge1xuICAgICAgdGhpcy5fbG9nZ2VyKCdsb2cnLCBhcmdzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGYWNhZGVzIGBjb25zb2xlLndhcm5gIGFzIGFuIG92ZXJyaWRlIHBvaW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHsuLi4qfSBhcmdzIEFycmF5IG9mIHN0cmluZ3Mgb3Igb2JqZWN0cyB0byBsb2dcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF93YXJuKC4uLmFyZ3MpIHtcbiAgICAgIHRoaXMuX2xvZ2dlcignd2FybicsIGFyZ3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZhY2FkZXMgYGNvbnNvbGUuZXJyb3JgIGFzIGFuIG92ZXJyaWRlIHBvaW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHsuLi4qfSBhcmdzIEFycmF5IG9mIHN0cmluZ3Mgb3Igb2JqZWN0cyB0byBsb2dcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9lcnJvciguLi5hcmdzKSB7XG4gICAgICB0aGlzLl9sb2dnZXIoJ2Vycm9yJywgYXJncyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRm9ybWF0cyBhIG1lc3NhZ2UgdXNpbmcgdGhlIGVsZW1lbnQgdHlwZSBhbiBhIG1ldGhvZCBuYW1lLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgTWV0aG9kIG5hbWUgdG8gYXNzb2NpYXRlIHdpdGggbWVzc2FnZVxuICAgICAqIEBwYXJhbSB7Li4uKn0gYXJncyBBcnJheSBvZiBzdHJpbmdzIG9yIG9iamVjdHMgdG8gbG9nXG4gICAgICogQHJldHVybiB7QXJyYXl9IEFycmF5IHdpdGggZm9ybWF0dGluZyBpbmZvcm1hdGlvbiBmb3IgYGNvbnNvbGVgXG4gICAgICogICBsb2dnaW5nLlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9sb2dmKG1ldGhvZE5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgIHJldHVybiBbJ1slczo6JXNdJywgdGhpcy5pcywgbWV0aG9kTmFtZSwgLi4uYXJnc107XG4gICAgfVxuXG4gIH1cblxuICBMZWdhY3lFbGVtZW50LnByb3RvdHlwZS5pcyA9ICcnO1xuXG4gIHJldHVybiBMZWdhY3lFbGVtZW50O1xufSk7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG5pbXBvcnQgeyBMZWdhY3lFbGVtZW50TWl4aW4gfSBmcm9tICcuL2xlZ2FjeS1lbGVtZW50LW1peGluLmpzJztcbmltcG9ydCB7IGxlZ2FjeU9wdGltaXphdGlvbnMgfSBmcm9tICcuLi91dGlscy9zZXR0aW5ncy5qcyc7XG5cbmNvbnN0IGxpZmVjeWNsZVByb3BzID0ge1xuICBhdHRhY2hlZDogdHJ1ZSxcbiAgZGV0YWNoZWQ6IHRydWUsXG4gIHJlYWR5OiB0cnVlLFxuICBjcmVhdGVkOiB0cnVlLFxuICBiZWZvcmVSZWdpc3RlcjogdHJ1ZSxcbiAgcmVnaXN0ZXJlZDogdHJ1ZSxcbiAgYXR0cmlidXRlQ2hhbmdlZDogdHJ1ZSxcbiAgbGlzdGVuZXJzOiB0cnVlLFxuICBob3N0QXR0cmlidXRlczogdHJ1ZVxufTtcblxuY29uc3QgZXhjbHVkZU9uSW5mbyA9IHtcbiAgYXR0YWNoZWQ6IHRydWUsXG4gIGRldGFjaGVkOiB0cnVlLFxuICByZWFkeTogdHJ1ZSxcbiAgY3JlYXRlZDogdHJ1ZSxcbiAgYmVmb3JlUmVnaXN0ZXI6IHRydWUsXG4gIHJlZ2lzdGVyZWQ6IHRydWUsXG4gIGF0dHJpYnV0ZUNoYW5nZWQ6IHRydWUsXG4gIGJlaGF2aW9yczogdHJ1ZSxcbiAgX25vQWNjZXNzb3JzOiB0cnVlXG59O1xuXG5jb25zdCBleGNsdWRlT25CZWhhdmlvcnMgPSBPYmplY3QuYXNzaWduKHtcbiAgbGlzdGVuZXJzOiB0cnVlLFxuICBob3N0QXR0cmlidXRlczogdHJ1ZSxcbiAgcHJvcGVydGllczogdHJ1ZSxcbiAgb2JzZXJ2ZXJzOiB0cnVlLFxufSwgZXhjbHVkZU9uSW5mbyk7XG5cbmZ1bmN0aW9uIGNvcHlQcm9wZXJ0aWVzKHNvdXJjZSwgdGFyZ2V0LCBleGNsdWRlUHJvcHMpIHtcbiAgY29uc3Qgbm9BY2Nlc3NvcnMgPSBzb3VyY2UuX25vQWNjZXNzb3JzO1xuICBjb25zdCBwcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoc291cmNlKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wZXJ0eU5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IHAgPSBwcm9wZXJ0eU5hbWVzW2ldO1xuICAgIGlmIChwIGluIGV4Y2x1ZGVQcm9wcykge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChub0FjY2Vzc29ycykge1xuICAgICAgdGFyZ2V0W3BdID0gc291cmNlW3BdO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgcGQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgcCk7XG4gICAgICBpZiAocGQpIHtcbiAgICAgICAgLy8gZW5zdXJlIHByb3BlcnR5IGlzIGNvbmZpZ3VyYWJsZSBzbyB0aGF0IGEgbGF0ZXIgYmVoYXZpb3IgY2FuXG4gICAgICAgIC8vIHJlLWNvbmZpZ3VyZSBpdC5cbiAgICAgICAgcGQuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcCwgcGQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFwcGxpZXMgYSBcImxlZ2FjeVwiIGJlaGF2aW9yIG9yIGFycmF5IG9mIGJlaGF2aW9ycyB0byB0aGUgcHJvdmlkZWQgY2xhc3MuXG4gKlxuICogTm90ZTogdGhpcyBtZXRob2Qgd2lsbCBhdXRvbWF0aWNhbGx5IGFsc28gYXBwbHkgdGhlIGBMZWdhY3lFbGVtZW50TWl4aW5gXG4gKiB0byBlbnN1cmUgdGhhdCBhbnkgbGVnYWN5IGJlaGF2aW9ycyBjYW4gcmVseSBvbiBsZWdhY3kgUG9seW1lciBBUEkgb25cbiAqIHRoZSB1bmRlcmx5aW5nIGVsZW1lbnQuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHshT2JqZWN0fCFBcnJheTwhT2JqZWN0Pn0gYmVoYXZpb3JzIEJlaGF2aW9yIG9iamVjdCBvciBhcnJheSBvZiBiZWhhdmlvcnMuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKG5ldzpUKX0ga2xhc3MgRWxlbWVudCBjbGFzcy5cbiAqIEByZXR1cm4gez99IFJldHVybnMgYSBuZXcgRWxlbWVudCBjbGFzcyBleHRlbmRlZCBieSB0aGVcbiAqIHBhc3NlZCBpbiBgYmVoYXZpb3JzYCBhbmQgYWxzbyBieSBgTGVnYWN5RWxlbWVudE1peGluYC5cbiAqIEBzdXBwcmVzcyB7aW52YWxpZENhc3RzLCBjaGVja1R5cGVzfVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWl4aW5CZWhhdmlvcnMoYmVoYXZpb3JzLCBrbGFzcykge1xuICByZXR1cm4gR2VuZXJhdGVDbGFzc0Zyb21JbmZvKHt9LCBMZWdhY3lFbGVtZW50TWl4aW4oa2xhc3MpLCBiZWhhdmlvcnMpO1xufVxuXG4vLyBOT1RFOlxuLy8gMS54XG4vLyBCZWhhdmlvcnMgd2VyZSBtaXhlZCBpbiAqaW4gcmV2ZXJzZSBvcmRlciogYW5kIGRlLWR1cGVkIG9uIHRoZSBmbHkuXG4vLyBUaGUgcnVsZSB3YXMgdGhhdCBiZWhhdmlvciBwcm9wZXJ0aWVzIHdlcmUgY29waWVkIG9udG8gdGhlIGVsZW1lbnRcbi8vIHByb3RvdHlwZSBpZiBhbmQgb25seSBpZiB0aGUgcHJvcGVydHkgZGlkIG5vdCBhbHJlYWR5IGV4aXN0LlxuLy8gR2l2ZW46IFBvbHltZXJ7IGJlaGF2aW9yczogW0EsIEIsIEMsIEEsIEJdfSwgcHJvcGVydHkgY29weSBvcmRlciB3YXM6XG4vLyAoMSksIEIsICgyKSwgQSwgKDMpIEMuIFRoaXMgbWVhbnMgcHJvdG90eXBlIHByb3BlcnRpZXMgd2luIG92ZXJcbi8vIEIgcHJvcGVydGllcyB3aW4gb3ZlciBBIHdpbiBvdmVyIEMuIFRoaXMgbWlycm9ycyB3aGF0IHdvdWxkIGhhcHBlblxuLy8gd2l0aCBpbmhlcml0YW5jZSBpZiBlbGVtZW50IGV4dGVuZGVkIEIgZXh0ZW5kZWQgQSBleHRlbmRlZCBDLlxuLy9cbi8vIEFnYWluIGdpdmVuLCBQb2x5bWVyeyBiZWhhdmlvcnM6IFtBLCBCLCBDLCBBLCBCXX0sIHRoZSByZXN1bHRpbmdcbi8vIGBiZWhhdmlvcnNgIGFycmF5IHdhcyBbQywgQSwgQl0uXG4vLyBCZWhhdmlvciBsaWZlY3ljbGUgbWV0aG9kcyB3ZXJlIGNhbGxlZCBpbiBiZWhhdmlvciBhcnJheSBvcmRlclxuLy8gZm9sbG93ZWQgYnkgdGhlIGVsZW1lbnQsIGUuZy4gKDEpIEMuY3JlYXRlZCwgKDIpIEEuY3JlYXRlZCxcbi8vICgzKSBCLmNyZWF0ZWQsICg0KSBlbGVtZW50LmNyZWF0ZWQuIFRoZXJlIHdhcyBubyBzdXBwb3J0IGZvclxuLy8gc3VwZXIsIGFuZCBcInN1cGVyLWJlaGF2aW9yXCIgbWV0aG9kcyB3ZXJlIGNhbGxhYmxlIG9ubHkgYnkgbmFtZSkuXG4vL1xuLy8gMi54XG4vLyBCZWhhdmlvcnMgYXJlIG1hZGUgaW50byBwcm9wZXIgbWl4aW5zIHdoaWNoIGxpdmUgaW4gdGhlXG4vLyBlbGVtZW50J3MgcHJvdG90eXBlIGNoYWluLiBCZWhhdmlvcnMgYXJlIHBsYWNlZCBpbiB0aGUgZWxlbWVudCBwcm90b3R5cGVcbi8vIGVsZGVzdCB0byB5b3VuZ2VzdCBhbmQgZGUtZHVwZWQgeW91bmdlc3QgdG8gb2xkZXN0OlxuLy8gU28sIGZpcnN0IFtBLCBCLCBDLCBBLCBCXSBiZWNvbWVzIFtDLCBBLCBCXSB0aGVuLFxuLy8gdGhlIGVsZW1lbnQgcHJvdG90eXBlIGJlY29tZXMgKG9sZGVzdCkgKDEpIFBvbHltZXJFbGVtZW50LCAoMikgY2xhc3MoQyksXG4vLyAoMykgY2xhc3MoQSksICg0KSBjbGFzcyhCKSwgKDUpIGNsYXNzKFBvbHltZXIoey4uLn0pKS5cbi8vIFJlc3VsdDpcbi8vIFRoaXMgbWVhbnMgZWxlbWVudCBwcm9wZXJ0aWVzIHdpbiBvdmVyIEIgcHJvcGVydGllcyB3aW4gb3ZlciBBIHdpblxuLy8gb3ZlciBDLiAoc2FtZSBhcyAxLngpXG4vLyBJZiBsaWZlY3ljbGUgaXMgY2FsbGVkIChzdXBlciB0aGVuIG1lKSwgb3JkZXIgaXNcbi8vICgxKSBDLmNyZWF0ZWQsICgyKSBBLmNyZWF0ZWQsICgzKSBCLmNyZWF0ZWQsICg0KSBlbGVtZW50LmNyZWF0ZWRcbi8vIChhZ2FpbiBzYW1lIGFzIDEueClcbmZ1bmN0aW9uIGFwcGx5QmVoYXZpb3JzKHByb3RvLCBiZWhhdmlvcnMsIGxpZmVjeWNsZSkge1xuICBmb3IgKGxldCBpPTA7IGk8YmVoYXZpb3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgYXBwbHlJbmZvKHByb3RvLCBiZWhhdmlvcnNbaV0sIGxpZmVjeWNsZSwgZXhjbHVkZU9uQmVoYXZpb3JzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseUluZm8ocHJvdG8sIGluZm8sIGxpZmVjeWNsZSwgZXhjbHVkZVByb3BzKSB7XG4gIGNvcHlQcm9wZXJ0aWVzKGluZm8sIHByb3RvLCBleGNsdWRlUHJvcHMpO1xuICBmb3IgKGxldCBwIGluIGxpZmVjeWNsZVByb3BzKSB7XG4gICAgaWYgKGluZm9bcF0pIHtcbiAgICAgIGxpZmVjeWNsZVtwXSA9IGxpZmVjeWNsZVtwXSB8fCBbXTtcbiAgICAgIGxpZmVjeWNsZVtwXS5wdXNoKGluZm9bcF0pO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXl9IGJlaGF2aW9ycyBMaXN0IG9mIGJlaGF2aW9ycyB0byBmbGF0dGVuLlxuICogQHBhcmFtIHtBcnJheT19IGxpc3QgVGFyZ2V0IGxpc3QgdG8gZmxhdHRlbiBiZWhhdmlvcnMgaW50by5cbiAqIEBwYXJhbSB7QXJyYXk9fSBleGNsdWRlIExpc3Qgb2YgYmVoYXZpb3JzIHRvIGV4Y2x1ZGUgZnJvbSB0aGUgbGlzdC5cbiAqIEByZXR1cm4geyFBcnJheX0gUmV0dXJucyB0aGUgbGlzdCBvZiBmbGF0dGVuZWQgYmVoYXZpb3JzLlxuICovXG5mdW5jdGlvbiBmbGF0dGVuQmVoYXZpb3JzKGJlaGF2aW9ycywgbGlzdCwgZXhjbHVkZSkge1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgZm9yIChsZXQgaT1iZWhhdmlvcnMubGVuZ3RoLTE7IGkgPj0gMDsgaS0tKSB7XG4gICAgbGV0IGIgPSBiZWhhdmlvcnNbaV07XG4gICAgaWYgKGIpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGIpKSB7XG4gICAgICAgIGZsYXR0ZW5CZWhhdmlvcnMoYiwgbGlzdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkZWR1cFxuICAgICAgICBpZiAobGlzdC5pbmRleE9mKGIpIDwgMCAmJiAoIWV4Y2x1ZGUgfHwgZXhjbHVkZS5pbmRleE9mKGIpIDwgMCkpIHtcbiAgICAgICAgICBsaXN0LnVuc2hpZnQoYik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS53YXJuKCdiZWhhdmlvciBpcyBudWxsLCBjaGVjayBmb3IgbWlzc2luZyBvciA0MDQgaW1wb3J0Jyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBsaXN0O1xufVxuXG4vKipcbiAqIENvcGllcyBwcm9wZXJ0eSBkZXNjcmlwdG9ycyBmcm9tIHNvdXJjZSB0byB0YXJnZXQsIG92ZXJ3cml0aW5nIGFsbCBmaWVsZHNcbiAqIG9mIGFueSBwcmV2aW91cyBkZXNjcmlwdG9yIGZvciBhIHByb3BlcnR5ICpleGNlcHQqIGZvciBgdmFsdWVgLCB3aGljaCBpc1xuICogbWVyZ2VkIGluIGZyb20gdGhlIHRhcmdldCBpZiBpdCBkb2VzIG5vdCBleGlzdCBvbiB0aGUgc291cmNlLlxuICpcbiAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRhcmdldCBwcm9wZXJ0aWVzIG9iamVjdFxuICogQHBhcmFtIHsqfSBzb3VyY2UgU291cmNlIHByb3BlcnRpZXMgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIG1lcmdlUHJvcGVydGllcyh0YXJnZXQsIHNvdXJjZSkge1xuICBmb3IgKGNvbnN0IHAgaW4gc291cmNlKSB7XG4gICAgY29uc3QgdGFyZ2V0SW5mbyA9IHRhcmdldFtwXTtcbiAgICBjb25zdCBzb3VyY2VJbmZvID0gc291cmNlW3BdO1xuICAgIGlmICghKCd2YWx1ZScgaW4gc291cmNlSW5mbykgJiYgdGFyZ2V0SW5mbyAmJiAoJ3ZhbHVlJyBpbiB0YXJnZXRJbmZvKSkge1xuICAgICAgdGFyZ2V0W3BdID0gT2JqZWN0LmFzc2lnbih7dmFsdWU6IHRhcmdldEluZm8udmFsdWV9LCBzb3VyY2VJbmZvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0W3BdID0gc291cmNlSW5mbztcbiAgICB9XG4gIH1cbn1cblxuLyogTm90ZSBhYm91dCBjb25zdHJ1Y3Rpb24gYW5kIGV4dGVuc2lvbiBvZiBsZWdhY3kgY2xhc3Nlcy5cbiAgW0NoYW5nZWQgaW4gUTQgMjAxOCB0byBvcHRpbWl6ZSBwZXJmb3JtYW5jZS5dXG5cbiAgV2hlbiBjYWxsaW5nIGBQb2x5bWVyYCBvciBgbWl4aW5CZWhhdmlvcnNgLCB0aGUgZ2VuZXJhdGVkIGNsYXNzIGJlbG93IGlzXG4gIG1hZGUuIFRoZSBsaXN0IG9mIGJlaGF2aW9ycyB3YXMgcHJldmlvdXNseSBtYWRlIGludG8gb25lIGdlbmVyYXRlZCBjbGFzcyBwZXJcbiAgYmVoYXZpb3IsIGJ1dCB0aGlzIGlzIG5vIGxvbmdlciB0aGUgY2FzZSBhcyBiZWhhdmlvcnMgYXJlIG5vdyBjYWxsZWRcbiAgbWFudWFsbHkuIE5vdGUsIHRoZXJlIG1heSAqc3RpbGwqIGJlIG11bHRpcGxlIGdlbmVyYXRlZCBjbGFzc2VzIGluIHRoZVxuICBlbGVtZW50J3MgcHJvdG90eXBlIGNoYWluIGlmIGV4dGVuc2lvbiBpcyB1c2VkIHdpdGggYG1peGluQmVoYXZpb3JzYC5cblxuICBUaGUgZ2VuZXJhdGVkIGNsYXNzIGlzIGRpcmVjdGx5IHRpZWQgdG8gdGhlIGluZm8gb2JqZWN0IGFuZCBiZWhhdmlvcnNcbiAgdXNlZCB0byBjcmVhdGUgaXQuIFRoYXQgbGlzdCBvZiBiZWhhdmlvcnMgaXMgZmlsdGVyZWQgc28gaXQncyBvbmx5IHRoZVxuICBiZWhhdmlvcnMgbm90IGFjdGl2ZSBvbiB0aGUgc3VwZXJjbGFzcy4gSW4gb3JkZXIgdG8gY2FsbCB0aHJvdWdoIHRvIHRoZVxuICBlbnRpcmUgbGlzdCBvZiBsaWZlY3ljbGUgbWV0aG9kcywgaXQncyBpbXBvcnRhbnQgdG8gY2FsbCBgc3VwZXJgLlxuXG4gIFRoZSBlbGVtZW50J3MgYHByb3BlcnRpZXNgIGFuZCBgb2JzZXJ2ZXJzYCBhcmUgY29udHJvbGxlZCB2aWEgdGhlIGZpbmFsaXphdGlvblxuICBtZWNoYW5pc20gcHJvdmlkZWQgYnkgYFByb3BlcnRpZXNNaXhpbmAuIGBQcm9wZXJ0aWVzYCBhbmQgYG9ic2VydmVyc2AgYXJlXG4gIGNvbGxlY3RlZCBieSBtYW51YWxseSB0cmF2ZXJzaW5nIHRoZSBwcm90b3R5cGUgY2hhaW4gYW5kIG1lcmdpbmcuXG5cbiAgVG8gbGltaXQgY2hhbmdlcywgdGhlIGBfcmVnaXN0ZXJlZGAgbWV0aG9kIGlzIGNhbGxlZCB2aWEgYF9pbml0aWFsaXplUHJvcGVydGllc2BcbiAgYW5kIG5vdCBgX2ZpbmFsaXplQ2xhc3NgLlxuXG4qL1xuLyoqXG4gKiBAcGFyYW0geyFQb2x5bWVySW5pdH0gaW5mbyBQb2x5bWVyIGluZm8gb2JqZWN0XG4gKiBAcGFyYW0ge2Z1bmN0aW9uKG5ldzpIVE1MRWxlbWVudCl9IEJhc2UgYmFzZSBjbGFzcyB0byBleHRlbmQgd2l0aCBpbmZvIG9iamVjdFxuICogQHBhcmFtIHtPYmplY3Q9fSBiZWhhdmlvcnMgYmVoYXZpb3JzIHRvIGNvcHkgaW50byB0aGUgZWxlbWVudFxuICogQHJldHVybiB7ZnVuY3Rpb24obmV3OkhUTUxFbGVtZW50KX0gR2VuZXJhdGVkIGNsYXNzXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBHZW5lcmF0ZUNsYXNzRnJvbUluZm8oaW5mbywgQmFzZSwgYmVoYXZpb3JzKSB7XG5cbiAgLy8gbWFuYWdlcyBiZWhhdmlvciBhbmQgbGlmZWN5Y2xlIHByb2Nlc3NpbmcgKGZpbGxlZCBpbiBhZnRlciBjbGFzcyBkZWZpbml0aW9uKVxuICBsZXQgYmVoYXZpb3JMaXN0O1xuICBjb25zdCBsaWZlY3ljbGUgPSB7fTtcblxuICAvKiogQHByaXZhdGUgKi9cbiAgY2xhc3MgUG9seW1lckdlbmVyYXRlZCBleHRlbmRzIEJhc2Uge1xuXG4gICAgLy8gZXhwbGljaXRseSBub3QgY2FsbGluZyBzdXBlci5fZmluYWxpemVDbGFzc1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHN0YXRpYyBfZmluYWxpemVDbGFzcygpIHtcbiAgICAgIC8vIGlmIGNhbGxpbmcgdmlhIGEgc3ViY2xhc3MgdGhhdCBoYXNuJ3QgYmVlbiBnZW5lcmF0ZWQsIHBhc3MgdGhyb3VnaCB0byBzdXBlclxuICAgICAgaWYgKCF0aGlzLmhhc093blByb3BlcnR5KEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ2dlbmVyYXRlZEZyb20nLCB0aGlzKSkpIHtcbiAgICAgICAgLy8gVE9ETyhodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtY29tcGlsZXIvaXNzdWVzLzMyNDApOlxuICAgICAgICAvLyAgICAgQ2hhbmdlIGJhY2sgdG8ganVzdCBzdXBlci5tZXRob2RDYWxsKClcbiAgICAgICAgQmFzZS5fZmluYWxpemVDbGFzcy5jYWxsKHRoaXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaW50ZXJsZWF2ZSBwcm9wZXJ0aWVzIGFuZCBvYnNlcnZlcnMgcGVyIGJlaGF2aW9yIGFuZCBgaW5mb2BcbiAgICAgICAgaWYgKGJlaGF2aW9yTGlzdCkge1xuICAgICAgICAgIGZvciAobGV0IGk9MCwgYjsgaSA8IGJlaGF2aW9yTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYiA9IGJlaGF2aW9yTGlzdFtpXTtcbiAgICAgICAgICAgIGlmIChiLnByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgdGhpcy5jcmVhdGVQcm9wZXJ0aWVzKGIucHJvcGVydGllcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYi5vYnNlcnZlcnMpIHtcbiAgICAgICAgICAgICAgdGhpcy5jcmVhdGVPYnNlcnZlcnMoYi5vYnNlcnZlcnMsIGIucHJvcGVydGllcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpbmZvLnByb3BlcnRpZXMpIHtcbiAgICAgICAgICB0aGlzLmNyZWF0ZVByb3BlcnRpZXMoaW5mby5wcm9wZXJ0aWVzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5mby5vYnNlcnZlcnMpIHtcbiAgICAgICAgICB0aGlzLmNyZWF0ZU9ic2VydmVycyhpbmZvLm9ic2VydmVycywgaW5mby5wcm9wZXJ0aWVzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBtYWtlIHN1cmUgdG8gcHJlcGFyZSB0aGUgZWxlbWVudCB0ZW1wbGF0ZVxuICAgICAgICB0aGlzLl9wcmVwYXJlVGVtcGxhdGUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBzdGF0aWMgZ2V0IHByb3BlcnRpZXMoKSB7XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge307XG4gICAgICBpZiAoYmVoYXZpb3JMaXN0KSB7XG4gICAgICAgIGZvciAobGV0IGk9MDsgaSA8IGJlaGF2aW9yTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIG1lcmdlUHJvcGVydGllcyhwcm9wZXJ0aWVzLCBiZWhhdmlvckxpc3RbaV0ucHJvcGVydGllcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG1lcmdlUHJvcGVydGllcyhwcm9wZXJ0aWVzLCBpbmZvLnByb3BlcnRpZXMpO1xuICAgICAgcmV0dXJuIHByb3BlcnRpZXM7XG4gICAgfVxuXG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgc3RhdGljIGdldCBvYnNlcnZlcnMoKSB7XG4gICAgICBsZXQgb2JzZXJ2ZXJzID0gW107XG4gICAgICBpZiAoYmVoYXZpb3JMaXN0KSB7XG4gICAgICAgIGZvciAobGV0IGk9MCwgYjsgaSA8IGJlaGF2aW9yTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGIgPSBiZWhhdmlvckxpc3RbaV07XG4gICAgICAgICAgaWYgKGIub2JzZXJ2ZXJzKSB7XG4gICAgICAgICAgICBvYnNlcnZlcnMgPSBvYnNlcnZlcnMuY29uY2F0KGIub2JzZXJ2ZXJzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpbmZvLm9ic2VydmVycykge1xuICAgICAgICBvYnNlcnZlcnMgPSBvYnNlcnZlcnMuY29uY2F0KGluZm8ub2JzZXJ2ZXJzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYnNlcnZlcnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBjcmVhdGVkKCkge1xuICAgICAgc3VwZXIuY3JlYXRlZCgpO1xuICAgICAgY29uc3QgbGlzdCA9IGxpZmVjeWNsZS5jcmVhdGVkO1xuICAgICAgaWYgKGxpc3QpIHtcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGxpc3RbaV0uY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgX3JlZ2lzdGVyZWQoKSB7XG4gICAgICAvKiBOT1RFOiBgYmVmb3JlUmVnaXN0ZXJgIGlzIGNhbGxlZCBoZXJlIGZvciBiYywgYnV0IHRoZSBiZWhhdmlvclxuICAgICAgICBpcyBkaWZmZXJlbnQgdGhhbiBpbiAxLnguIEluIDEuMCwgdGhlIG1ldGhvZCB3YXMgY2FsbGVkICphZnRlcipcbiAgICAgICAgbWl4aW5nIHByb3RvdHlwZXMgdG9nZXRoZXIgYnV0ICpiZWZvcmUqIHByb2Nlc3Npbmcgb2YgbWV0YS1vYmplY3RzLlxuICAgICAgICBIb3dldmVyLCBkeW5hbWljIGVmZmVjdHMgY2FuIHN0aWxsIGJlIHNldCBoZXJlIGFuZCBjYW4gYmUgZG9uZSBlaXRoZXJcbiAgICAgICAgaW4gYGJlZm9yZVJlZ2lzdGVyYCBvciBgcmVnaXN0ZXJlZGAuIEl0IGlzIG5vIGxvbmdlciBwb3NzaWJsZSB0byBzZXRcbiAgICAgICAgYGlzYCBpbiBgYmVmb3JlUmVnaXN0ZXJgIGFzIHlvdSBjb3VsZCBpbiAxLnguXG4gICAgICAqL1xuICAgICAgLy8gb25seSBwcm9jZWVkIGlmIHRoZSBnZW5lcmF0ZWQgY2xhc3MnIHByb3RvdHlwZSBoYXMgbm90IGJlZW4gcmVnaXN0ZXJlZC5cbiAgICAgIGNvbnN0IGdlbmVyYXRlZFByb3RvID0gUG9seW1lckdlbmVyYXRlZC5wcm90b3R5cGU7XG4gICAgICBpZiAoIWdlbmVyYXRlZFByb3RvLmhhc093blByb3BlcnR5KEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ19faGFzUmVnaXN0ZXJGaW5pc2hlZCcsIGdlbmVyYXRlZFByb3RvKSkpIHtcbiAgICAgICAgZ2VuZXJhdGVkUHJvdG8uX19oYXNSZWdpc3RlckZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgLy8gZW5zdXJlIHN1cGVyY2xhc3MgaXMgcmVnaXN0ZXJlZCBmaXJzdC5cbiAgICAgICAgc3VwZXIuX3JlZ2lzdGVyZWQoKTtcbiAgICAgICAgLy8gY29weSBwcm9wZXJ0aWVzIG9udG8gdGhlIGdlbmVyYXRlZCBjbGFzcyBsYXppbHkgaWYgd2UncmUgb3B0aW1pemluZyxcbiAgICAgICAgaWYgKGxlZ2FjeU9wdGltaXphdGlvbnMpIHtcbiAgICAgICAgICBjb3B5UHJvcGVydGllc1RvUHJvdG8oZ2VuZXJhdGVkUHJvdG8pO1xuICAgICAgICB9XG4gICAgICAgIC8vIG1ha2Ugc3VyZSBsZWdhY3kgbGlmZWN5Y2xlIGlzIGNhbGxlZCBvbiB0aGUgKmVsZW1lbnQqJ3MgcHJvdG90eXBlXG4gICAgICAgIC8vIGFuZCBub3QgdGhlIGdlbmVyYXRlZCBjbGFzcyBwcm90b3R5cGU7IGlmIHRoZSBlbGVtZW50IGhhcyBiZWVuXG4gICAgICAgIC8vIGV4dGVuZGVkLCB0aGVzZSBhcmUgKm5vdCogdGhlIHNhbWUuXG4gICAgICAgIGNvbnN0IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpO1xuICAgICAgICBsZXQgbGlzdCA9IGxpZmVjeWNsZS5iZWZvcmVSZWdpc3RlcjtcbiAgICAgICAgaWYgKGxpc3QpIHtcbiAgICAgICAgICBmb3IgKGxldCBpPTA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsaXN0W2ldLmNhbGwocHJvdG8pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsaXN0ID0gbGlmZWN5Y2xlLnJlZ2lzdGVyZWQ7XG4gICAgICAgIGlmIChsaXN0KSB7XG4gICAgICAgICAgZm9yIChsZXQgaT0wOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGlzdFtpXS5jYWxsKHByb3RvKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIF9hcHBseUxpc3RlbmVycygpIHtcbiAgICAgIHN1cGVyLl9hcHBseUxpc3RlbmVycygpO1xuICAgICAgY29uc3QgbGlzdCA9IGxpZmVjeWNsZS5saXN0ZW5lcnM7XG4gICAgICBpZiAobGlzdCkge1xuICAgICAgICBmb3IgKGxldCBpPTA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gbGlzdFtpXTtcbiAgICAgICAgICBpZiAobGlzdGVuZXJzKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBsIGluIGxpc3RlbmVycykge1xuICAgICAgICAgICAgICB0aGlzLl9hZGRNZXRob2RFdmVudExpc3RlbmVyVG9Ob2RlKHRoaXMsIGwsIGxpc3RlbmVyc1tsXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gbm90ZTogZXhjZXB0aW9uIHRvIFwic3VwZXIgdGhlbiBtZVwiIHJ1bGU7XG4gICAgLy8gZG8gd29yayBiZWZvcmUgY2FsbGluZyBzdXBlciBzbyB0aGF0IHN1cGVyIGF0dHJpYnV0ZXNcbiAgICAvLyBvbmx5IGFwcGx5IGlmIG5vdCBhbHJlYWR5IHNldC5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIF9lbnN1cmVBdHRyaWJ1dGVzKCkge1xuICAgICAgY29uc3QgbGlzdCA9IGxpZmVjeWNsZS5ob3N0QXR0cmlidXRlcztcbiAgICAgIGlmIChsaXN0KSB7XG4gICAgICAgIGZvciAobGV0IGk9bGlzdC5sZW5ndGgtMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBjb25zdCBob3N0QXR0cmlidXRlcyA9IGxpc3RbaV07XG4gICAgICAgICAgZm9yIChsZXQgYSBpbiBob3N0QXR0cmlidXRlcykge1xuICAgICAgICAgICAgICB0aGlzLl9lbnN1cmVBdHRyaWJ1dGUoYSwgaG9zdEF0dHJpYnV0ZXNbYV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdXBlci5fZW5zdXJlQXR0cmlidXRlcygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgcmVhZHkoKSB7XG4gICAgICBzdXBlci5yZWFkeSgpO1xuICAgICAgbGV0IGxpc3QgPSBsaWZlY3ljbGUucmVhZHk7XG4gICAgICBpZiAobGlzdCkge1xuICAgICAgICBmb3IgKGxldCBpPTA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbGlzdFtpXS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBhdHRhY2hlZCgpIHtcbiAgICAgIHN1cGVyLmF0dGFjaGVkKCk7XG4gICAgICBsZXQgbGlzdCA9IGxpZmVjeWNsZS5hdHRhY2hlZDtcbiAgICAgIGlmIChsaXN0KSB7XG4gICAgICAgIGZvciAobGV0IGk9MDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBsaXN0W2ldLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIGRldGFjaGVkKCkge1xuICAgICAgc3VwZXIuZGV0YWNoZWQoKTtcbiAgICAgIGxldCBsaXN0ID0gbGlmZWN5Y2xlLmRldGFjaGVkO1xuICAgICAgaWYgKGxpc3QpIHtcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGxpc3RbaV0uY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEltcGxlbWVudHMgbmF0aXZlIEN1c3RvbSBFbGVtZW50cyBgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrYCB0b1xuICAgICAqIHNldCBhbiBhdHRyaWJ1dGUgdmFsdWUgdG8gYSBwcm9wZXJ0eSB2aWEgYF9hdHRyaWJ1dGVUb1Byb3BlcnR5YC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgYXR0cmlidXRlIHRoYXQgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7P3N0cmluZ30gb2xkIE9sZCBhdHRyaWJ1dGUgdmFsdWVcbiAgICAgKiBAcGFyYW0gez9zdHJpbmd9IHZhbHVlIE5ldyBhdHRyaWJ1dGUgdmFsdWVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIGF0dHJpYnV0ZUNoYW5nZWQobmFtZSwgb2xkLCB2YWx1ZSkge1xuICAgICAgc3VwZXIuYXR0cmlidXRlQ2hhbmdlZCgpO1xuICAgICAgbGV0IGxpc3QgPSBsaWZlY3ljbGUuYXR0cmlidXRlQ2hhbmdlZDtcbiAgICAgIGlmIChsaXN0KSB7XG4gICAgICAgIGZvciAobGV0IGk9MDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBsaXN0W2ldLmNhbGwodGhpcywgbmFtZSwgb2xkLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBhcHBseSBiZWhhdmlvcnMsIG5vdGUgYWN0dWFsIGNvcHlpbmcgaXMgZG9uZSBsYXppbHkgYXQgZmlyc3QgaW5zdGFuY2UgY3JlYXRpb25cbiAgaWYgKGJlaGF2aW9ycykge1xuICAgIC8vIE5PVEU6IGVuc3VyZSB0aGUgYmVoYXZpb3IgaXMgZXh0ZW5kaW5nIGEgY2xhc3Mgd2l0aFxuICAgIC8vIGxlZ2FjeSBlbGVtZW50IGFwaS4gVGhpcyBpcyBuZWNlc3Nhcnkgc2luY2UgYmVoYXZpb3JzIGV4cGVjdCB0byBiZSBhYmxlXG4gICAgLy8gdG8gYWNjZXNzIDEueCBsZWdhY3kgYXBpLlxuICAgIGlmICghQXJyYXkuaXNBcnJheShiZWhhdmlvcnMpKSB7XG4gICAgICBiZWhhdmlvcnMgPSBbYmVoYXZpb3JzXTtcbiAgICB9XG4gICAgbGV0IHN1cGVyQmVoYXZpb3JzID0gQmFzZS5wcm90b3R5cGUuYmVoYXZpb3JzO1xuICAgIC8vIGdldCBmbGF0dGVuZWQsIGRlZHVwZWQgbGlzdCBvZiBiZWhhdmlvcnMgKm5vdCogYWxyZWFkeSBvbiBzdXBlciBjbGFzc1xuICAgIGJlaGF2aW9yTGlzdCA9IGZsYXR0ZW5CZWhhdmlvcnMoYmVoYXZpb3JzLCBudWxsLCBzdXBlckJlaGF2aW9ycyk7XG4gICAgUG9seW1lckdlbmVyYXRlZC5wcm90b3R5cGUuYmVoYXZpb3JzID0gc3VwZXJCZWhhdmlvcnMgP1xuICAgICAgc3VwZXJCZWhhdmlvcnMuY29uY2F0KGJlaGF2aW9ycykgOiBiZWhhdmlvckxpc3Q7XG4gIH1cblxuICBjb25zdCBjb3B5UHJvcGVydGllc1RvUHJvdG8gPSAocHJvdG8pID0+IHtcbiAgICBpZiAoYmVoYXZpb3JMaXN0KSB7XG4gICAgICBhcHBseUJlaGF2aW9ycyhwcm90bywgYmVoYXZpb3JMaXN0LCBsaWZlY3ljbGUpO1xuICAgIH1cbiAgICBhcHBseUluZm8ocHJvdG8sIGluZm8sIGxpZmVjeWNsZSwgZXhjbHVkZU9uSW5mbyk7XG4gIH07XG5cbiAgLy8gY29weSBwcm9wZXJ0aWVzIGlmIHdlJ3JlIG5vdCBvcHRpbWl6aW5nXG4gIGlmICghbGVnYWN5T3B0aW1pemF0aW9ucykge1xuICAgIGNvcHlQcm9wZXJ0aWVzVG9Qcm90byhQb2x5bWVyR2VuZXJhdGVkLnByb3RvdHlwZSk7XG4gIH1cblxuICBQb2x5bWVyR2VuZXJhdGVkLmdlbmVyYXRlZEZyb20gPSBpbmZvO1xuXG4gIHJldHVybiBQb2x5bWVyR2VuZXJhdGVkO1xufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIGNsYXNzIHRoYXQgZXh0ZW5kcyBgTGVnYWN5RWxlbWVudGAgYmFzZWQgb24gdGhlXG4gKiBwcm92aWRlZCBpbmZvIG9iamVjdC4gIE1ldGFkYXRhIG9iamVjdHMgb24gdGhlIGBpbmZvYCBvYmplY3RcbiAqIChgcHJvcGVydGllc2AsIGBvYnNlcnZlcnNgLCBgbGlzdGVuZXJzYCwgYGJlaGF2aW9yc2AsIGBpc2ApIGFyZSB1c2VkXG4gKiBmb3IgUG9seW1lcidzIG1ldGEtcHJvZ3JhbW1pbmcgc3lzdGVtcywgYW5kIGFueSBmdW5jdGlvbnMgYXJlIGNvcGllZFxuICogdG8gdGhlIGdlbmVyYXRlZCBjbGFzcy5cbiAqXG4gKiBWYWxpZCBcIm1ldGFkYXRhXCIgdmFsdWVzIGFyZSBhcyBmb2xsb3dzOlxuICpcbiAqIGBpc2A6IFN0cmluZyBwcm92aWRpbmcgdGhlIHRhZyBuYW1lIHRvIHJlZ2lzdGVyIHRoZSBlbGVtZW50IHVuZGVyLiBJblxuICogYWRkaXRpb24sIGlmIGEgYGRvbS1tb2R1bGVgIHdpdGggdGhlIHNhbWUgaWQgZXhpc3RzLCB0aGUgZmlyc3QgdGVtcGxhdGVcbiAqIGluIHRoYXQgYGRvbS1tb2R1bGVgIHdpbGwgYmUgc3RhbXBlZCBpbnRvIHRoZSBzaGFkb3cgcm9vdCBvZiB0aGlzIGVsZW1lbnQsXG4gKiB3aXRoIHN1cHBvcnQgZm9yIGRlY2xhcmF0aXZlIGV2ZW50IGxpc3RlbmVycyAoYG9uLS4uLmApLCBQb2x5bWVyIGRhdGFcbiAqIGJpbmRpbmdzIChgW1suLi5dXWAgYW5kIGB7ey4uLn19YCksIGFuZCBpZC1iYXNlZCBub2RlIGZpbmRpbmcgaW50b1xuICogYHRoaXMuJGAuXG4gKlxuICogYHByb3BlcnRpZXNgOiBPYmplY3QgZGVzY3JpYmluZyBwcm9wZXJ0eS1yZWxhdGVkIG1ldGFkYXRhIHVzZWQgYnkgUG9seW1lclxuICogZmVhdHVyZXMgKGtleTogcHJvcGVydHkgbmFtZXMsIHZhbHVlOiBvYmplY3QgY29udGFpbmluZyBwcm9wZXJ0eSBtZXRhZGF0YSkuXG4gKiBWYWxpZCBrZXlzIGluIHBlci1wcm9wZXJ0eSBtZXRhZGF0YSBpbmNsdWRlOlxuICogLSBgdHlwZWAgKFN0cmluZ3xOdW1iZXJ8T2JqZWN0fEFycmF5fC4uLik6IFVzZWQgYnlcbiAqICAgYGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFja2AgdG8gZGV0ZXJtaW5lIGhvdyBzdHJpbmctYmFzZWQgYXR0cmlidXRlc1xuICogICBhcmUgZGVzZXJpYWxpemVkIHRvIEphdmFTY3JpcHQgcHJvcGVydHkgdmFsdWVzLlxuICogLSBgbm90aWZ5YCAoYm9vbGVhbik6IENhdXNlcyBhIGNoYW5nZSBpbiB0aGUgcHJvcGVydHkgdG8gZmlyZSBhXG4gKiAgIG5vbi1idWJibGluZyBldmVudCBjYWxsZWQgYDxwcm9wZXJ0eT4tY2hhbmdlZGAuIEVsZW1lbnRzIHRoYXQgaGF2ZVxuICogICBlbmFibGVkIHR3by13YXkgYmluZGluZyB0byB0aGUgcHJvcGVydHkgdXNlIHRoaXMgZXZlbnQgdG8gb2JzZXJ2ZSBjaGFuZ2VzLlxuICogLSBgcmVhZE9ubHlgIChib29sZWFuKTogQ3JlYXRlcyBhIGdldHRlciBmb3IgdGhlIHByb3BlcnR5LCBidXQgbm8gc2V0dGVyLlxuICogICBUbyBzZXQgYSByZWFkLW9ubHkgcHJvcGVydHksIHVzZSB0aGUgcHJpdmF0ZSBzZXR0ZXIgbWV0aG9kXG4gKiAgIGBfc2V0UHJvcGVydHkocHJvcGVydHksIHZhbHVlKWAuXG4gKiAtIGBvYnNlcnZlcmAgKHN0cmluZyk6IE9ic2VydmVyIG1ldGhvZCBuYW1lIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlblxuICogICB0aGUgcHJvcGVydHkgY2hhbmdlcy4gVGhlIGFyZ3VtZW50cyBvZiB0aGUgbWV0aG9kIGFyZVxuICogICBgKHZhbHVlLCBwcmV2aW91c1ZhbHVlKWAuXG4gKiAtIGBjb21wdXRlZGAgKHN0cmluZyk6IFN0cmluZyBkZXNjcmliaW5nIG1ldGhvZCBhbmQgZGVwZW5kZW50IHByb3BlcnRpZXNcbiAqICAgZm9yIGNvbXB1dGluZyB0aGUgdmFsdWUgb2YgdGhpcyBwcm9wZXJ0eSAoZS5nLiBgJ2NvbXB1dGVGb28oYmFyLCB6b3QpJ2ApLlxuICogICBDb21wdXRlZCBwcm9wZXJ0aWVzIGFyZSByZWFkLW9ubHkgYnkgZGVmYXVsdCBhbmQgY2FuIG9ubHkgYmUgY2hhbmdlZFxuICogICB2aWEgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgY29tcHV0aW5nIG1ldGhvZC5cbiAqXG4gKiBgb2JzZXJ2ZXJzYDogQXJyYXkgb2Ygc3RyaW5ncyBkZXNjcmliaW5nIG11bHRpLXByb3BlcnR5IG9ic2VydmVyIG1ldGhvZHNcbiAqICBhbmQgdGhlaXIgZGVwZW5kZW50IHByb3BlcnRpZXMgKGUuZy4gYCdvYnNlcnZlQUJDKGEsIGIsIGMpJ2ApLlxuICpcbiAqIGBsaXN0ZW5lcnNgOiBPYmplY3QgZGVzY3JpYmluZyBldmVudCBsaXN0ZW5lcnMgdG8gYmUgYWRkZWQgdG8gZWFjaFxuICogIGluc3RhbmNlIG9mIHRoaXMgZWxlbWVudCAoa2V5OiBldmVudCBuYW1lLCB2YWx1ZTogbWV0aG9kIG5hbWUpLlxuICpcbiAqIGBiZWhhdmlvcnNgOiBBcnJheSBvZiBhZGRpdGlvbmFsIGBpbmZvYCBvYmplY3RzIGNvbnRhaW5pbmcgbWV0YWRhdGFcbiAqIGFuZCBjYWxsYmFja3MgaW4gdGhlIHNhbWUgZm9ybWF0IGFzIHRoZSBgaW5mb2Agb2JqZWN0IGhlcmUgd2hpY2ggYXJlXG4gKiBtZXJnZWQgaW50byB0aGlzIGVsZW1lbnQuXG4gKlxuICogYGhvc3RBdHRyaWJ1dGVzYDogT2JqZWN0IGxpc3RpbmcgYXR0cmlidXRlcyB0byBiZSBhcHBsaWVkIHRvIHRoZSBob3N0XG4gKiAgb25jZSBjcmVhdGVkIChrZXk6IGF0dHJpYnV0ZSBuYW1lLCB2YWx1ZTogYXR0cmlidXRlIHZhbHVlKS4gIFZhbHVlc1xuICogIGFyZSBzZXJpYWxpemVkIGJhc2VkIG9uIHRoZSB0eXBlIG9mIHRoZSB2YWx1ZS4gIEhvc3QgYXR0cmlidXRlcyBzaG91bGRcbiAqICBnZW5lcmFsbHkgYmUgbGltaXRlZCB0byBhdHRyaWJ1dGVzIHN1Y2ggYXMgYHRhYkluZGV4YCBhbmQgYGFyaWEtLi4uYC5cbiAqICBBdHRyaWJ1dGVzIGluIGBob3N0QXR0cmlidXRlc2AgYXJlIG9ubHkgYXBwbGllZCBpZiBhIHVzZXItc3VwcGxpZWRcbiAqICBhdHRyaWJ1dGUgaXMgbm90IGFscmVhZHkgcHJlc2VudCAoYXR0cmlidXRlcyBpbiBtYXJrdXAgb3ZlcnJpZGVcbiAqICBgaG9zdEF0dHJpYnV0ZXNgKS5cbiAqXG4gKiBJbiBhZGRpdGlvbiwgdGhlIGZvbGxvd2luZyBQb2x5bWVyLXNwZWNpZmljIGNhbGxiYWNrcyBtYXkgYmUgcHJvdmlkZWQ6XG4gKiAtIGByZWdpc3RlcmVkYDogY2FsbGVkIGFmdGVyIGZpcnN0IGluc3RhbmNlIG9mIHRoaXMgZWxlbWVudCxcbiAqIC0gYGNyZWF0ZWRgOiBjYWxsZWQgZHVyaW5nIGBjb25zdHJ1Y3RvcmBcbiAqIC0gYGF0dGFjaGVkYDogY2FsbGVkIGR1cmluZyBgY29ubmVjdGVkQ2FsbGJhY2tgXG4gKiAtIGBkZXRhY2hlZGA6IGNhbGxlZCBkdXJpbmcgYGRpc2Nvbm5lY3RlZENhbGxiYWNrYFxuICogLSBgcmVhZHlgOiBjYWxsZWQgYmVmb3JlIGZpcnN0IGBhdHRhY2hlZGAsIGFmdGVyIGFsbCBwcm9wZXJ0aWVzIG9mXG4gKiAgIHRoaXMgZWxlbWVudCBoYXZlIGJlZW4gcHJvcGFnYXRlZCB0byBpdHMgdGVtcGxhdGUgYW5kIGFsbCBvYnNlcnZlcnNcbiAqICAgaGF2ZSBydW5cbiAqXG4gKiBAcGFyYW0geyFQb2x5bWVySW5pdH0gaW5mbyBPYmplY3QgY29udGFpbmluZyBQb2x5bWVyIG1ldGFkYXRhIGFuZCBmdW5jdGlvbnNcbiAqICAgdG8gYmVjb21lIGNsYXNzIG1ldGhvZHMuXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtmdW5jdGlvbihUKTpUfSBtaXhpbiBPcHRpb25hbCBtaXhpbiB0byBhcHBseSB0byBsZWdhY3kgYmFzZSBjbGFzc1xuICogICBiZWZvcmUgZXh0ZW5kaW5nIHdpdGggUG9seW1lciBtZXRhcHJvZ3JhbW1pbmcuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbihuZXc6SFRNTEVsZW1lbnQpfSBHZW5lcmF0ZWQgY2xhc3NcbiAqL1xuZXhwb3J0IGNvbnN0IENsYXNzID0gZnVuY3Rpb24oaW5mbywgbWl4aW4pIHtcbiAgaWYgKCFpbmZvKSB7XG4gICAgY29uc29sZS53YXJuKCdQb2x5bWVyLkNsYXNzIHJlcXVpcmVzIGBpbmZvYCBhcmd1bWVudCcpO1xuICB9XG4gIGxldCBrbGFzcyA9IG1peGluID8gbWl4aW4oTGVnYWN5RWxlbWVudE1peGluKEhUTUxFbGVtZW50KSkgOlxuICAgICAgTGVnYWN5RWxlbWVudE1peGluKEhUTUxFbGVtZW50KTtcbiAga2xhc3MgPSBHZW5lcmF0ZUNsYXNzRnJvbUluZm8oaW5mbywga2xhc3MsIGluZm8uYmVoYXZpb3JzKTtcbiAgLy8gZGVjb3JhdGUga2xhc3Mgd2l0aCByZWdpc3RyYXRpb24gaW5mb1xuICBrbGFzcy5pcyA9IGtsYXNzLnByb3RvdHlwZS5pcyA9IGluZm8uaXM7XG4gIHJldHVybiBrbGFzcztcbn07XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaW1wb3J0IHsgQ2xhc3MgfSBmcm9tICcuL2NsYXNzLmpzJztcblxuaW1wb3J0ICcuLi91dGlscy9ib290LmpzJztcblxuLyoqXG4gKiBMZWdhY3kgY2xhc3MgZmFjdG9yeSBhbmQgcmVnaXN0cmF0aW9uIGhlbHBlciBmb3IgZGVmaW5pbmcgUG9seW1lclxuICogZWxlbWVudHMuXG4gKlxuICogVGhpcyBtZXRob2QgaXMgZXF1aXZhbGVudCB0b1xuICpcbiAqICAgICBpbXBvcnQge0NsYXNzfSBmcm9tICdAcG9seW1lci9wb2x5bWVyL2xpYi9sZWdhY3kvY2xhc3MuanMnO1xuICogICAgIGN1c3RvbUVsZW1lbnRzLmRlZmluZShpbmZvLmlzLCBDbGFzcyhpbmZvKSk7XG4gKlxuICogU2VlIGBDbGFzc2AgZm9yIGRldGFpbHMgb24gdmFsaWQgbGVnYWN5IG1ldGFkYXRhIGZvcm1hdCBmb3IgYGluZm9gLlxuICpcbiAqIEBnbG9iYWxcbiAqIEBvdmVycmlkZVxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0geyFQb2x5bWVySW5pdH0gaW5mbyBPYmplY3QgY29udGFpbmluZyBQb2x5bWVyIG1ldGFkYXRhIGFuZCBmdW5jdGlvbnNcbiAqICAgdG8gYmVjb21lIGNsYXNzIG1ldGhvZHMuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbihuZXc6IEhUTUxFbGVtZW50KX0gR2VuZXJhdGVkIGNsYXNzXG4gKiBAc3VwcHJlc3Mge2R1cGxpY2F0ZSwgaW52YWxpZENhc3RzLCBjaGVja1R5cGVzfVxuICovXG5jb25zdCBQb2x5bWVyID0gZnVuY3Rpb24oaW5mbykge1xuICAvLyBpZiBpbnB1dCBpcyBhIGBjbGFzc2AgKGFrYSBhIGZ1bmN0aW9uIHdpdGggYSBwcm90b3R5cGUpLCB1c2UgdGhlIHByb3RvdHlwZVxuICAvLyByZW1lbWJlciB0aGF0IHRoZSBgY29uc3RydWN0b3JgIHdpbGwgbmV2ZXIgYmUgY2FsbGVkXG4gIGxldCBrbGFzcztcbiAgaWYgKHR5cGVvZiBpbmZvID09PSAnZnVuY3Rpb24nKSB7XG4gICAga2xhc3MgPSBpbmZvO1xuICB9IGVsc2Uge1xuICAgIGtsYXNzID0gUG9seW1lci5DbGFzcyhpbmZvKTtcbiAgfVxuICBjdXN0b21FbGVtZW50cy5kZWZpbmUoa2xhc3MuaXMsIC8qKiBAdHlwZSB7IUhUTUxFbGVtZW50fSAqLyhrbGFzcykpO1xuICByZXR1cm4ga2xhc3M7XG59O1xuXG5Qb2x5bWVyLkNsYXNzID0gQ2xhc3M7XG5cbmV4cG9ydCB7IFBvbHltZXIgfTsiLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaW1wb3J0IHsgZGVkdXBpbmdNaXhpbiB9IGZyb20gJy4uL3V0aWxzL21peGluLmpzJztcblxuLy8gQ29tbW9uIGltcGxlbWVudGF0aW9uIGZvciBtaXhpbiAmIGJlaGF2aW9yXG5mdW5jdGlvbiBtdXRhYmxlUHJvcGVydHlDaGFuZ2UoaW5zdCwgcHJvcGVydHksIHZhbHVlLCBvbGQsIG11dGFibGVEYXRhKSB7XG4gIGxldCBpc09iamVjdDtcbiAgaWYgKG11dGFibGVEYXRhKSB7XG4gICAgaXNPYmplY3QgPSAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCk7XG4gICAgLy8gUHVsbCBgb2xkYCBmb3IgT2JqZWN0cyBmcm9tIHRlbXAgY2FjaGUsIGJ1dCB0cmVhdCBgbnVsbGAgYXMgYSBwcmltaXRpdmVcbiAgICBpZiAoaXNPYmplY3QpIHtcbiAgICAgIG9sZCA9IGluc3QuX19kYXRhVGVtcFtwcm9wZXJ0eV07XG4gICAgfVxuICB9XG4gIC8vIFN0cmljdCBlcXVhbGl0eSBjaGVjaywgYnV0IHJldHVybiBmYWxzZSBmb3IgTmFOPT09TmFOXG4gIGxldCBzaG91bGRDaGFuZ2UgPSAob2xkICE9PSB2YWx1ZSAmJiAob2xkID09PSBvbGQgfHwgdmFsdWUgPT09IHZhbHVlKSk7XG4gIC8vIE9iamVjdHMgYXJlIHN0b3JlZCBpbiB0ZW1wb3JhcnkgY2FjaGUgKGNsZWFyZWQgYXQgZW5kIG9mXG4gIC8vIHR1cm4pLCB3aGljaCBpcyB1c2VkIGZvciBkaXJ0eS1jaGVja2luZ1xuICBpZiAoaXNPYmplY3QgJiYgc2hvdWxkQ2hhbmdlKSB7XG4gICAgaW5zdC5fX2RhdGFUZW1wW3Byb3BlcnR5XSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiBzaG91bGRDaGFuZ2U7XG59XG5cbi8qKlxuICogRWxlbWVudCBjbGFzcyBtaXhpbiB0byBza2lwIHN0cmljdCBkaXJ0eS1jaGVja2luZyBmb3Igb2JqZWN0cyBhbmQgYXJyYXlzXG4gKiAoYWx3YXlzIGNvbnNpZGVyIHRoZW0gdG8gYmUgXCJkaXJ0eVwiKSwgZm9yIHVzZSBvbiBlbGVtZW50cyB1dGlsaXppbmdcbiAqIGBQcm9wZXJ0eUVmZmVjdHNgXG4gKlxuICogQnkgZGVmYXVsdCwgYFByb3BlcnR5RWZmZWN0c2AgcGVyZm9ybXMgc3RyaWN0IGRpcnR5IGNoZWNraW5nIG9uXG4gKiBvYmplY3RzLCB3aGljaCBtZWFucyB0aGF0IGFueSBkZWVwIG1vZGlmaWNhdGlvbnMgdG8gYW4gb2JqZWN0IG9yIGFycmF5IHdpbGxcbiAqIG5vdCBiZSBwcm9wYWdhdGVkIHVubGVzcyBcImltbXV0YWJsZVwiIGRhdGEgcGF0dGVybnMgYXJlIHVzZWQgKGkuZS4gYWxsIG9iamVjdFxuICogcmVmZXJlbmNlcyBmcm9tIHRoZSByb290IHRvIHRoZSBtdXRhdGlvbiB3ZXJlIGNoYW5nZWQpLlxuICpcbiAqIFBvbHltZXIgYWxzbyBwcm92aWRlcyBhIHByb3ByaWV0YXJ5IGRhdGEgbXV0YXRpb24gYW5kIHBhdGggbm90aWZpY2F0aW9uIEFQSVxuICogKGUuZy4gYG5vdGlmeVBhdGhgLCBgc2V0YCwgYW5kIGFycmF5IG11dGF0aW9uIEFQSSdzKSB0aGF0IGFsbG93IGVmZmljaWVudFxuICogbXV0YXRpb24gYW5kIG5vdGlmaWNhdGlvbiBvZiBkZWVwIGNoYW5nZXMgaW4gYW4gb2JqZWN0IGdyYXBoIHRvIGFsbCBlbGVtZW50c1xuICogYm91bmQgdG8gdGhlIHNhbWUgb2JqZWN0IGdyYXBoLlxuICpcbiAqIEluIGNhc2VzIHdoZXJlIG5laXRoZXIgaW1tdXRhYmxlIHBhdHRlcm5zIG5vciB0aGUgZGF0YSBtdXRhdGlvbiBBUEkgY2FuIGJlXG4gKiB1c2VkLCBhcHBseWluZyB0aGlzIG1peGluIHdpbGwgY2F1c2UgUG9seW1lciB0byBza2lwIGRpcnR5IGNoZWNraW5nIGZvclxuICogb2JqZWN0cyBhbmQgYXJyYXlzIChhbHdheXMgY29uc2lkZXIgdGhlbSB0byBiZSBcImRpcnR5XCIpLiAgVGhpcyBhbGxvd3MgYVxuICogdXNlciB0byBtYWtlIGEgZGVlcCBtb2RpZmljYXRpb24gdG8gYSBib3VuZCBvYmplY3QgZ3JhcGgsIGFuZCB0aGVuIGVpdGhlclxuICogc2ltcGx5IHJlLXNldCB0aGUgb2JqZWN0IChlLmcuIGB0aGlzLml0ZW1zID0gdGhpcy5pdGVtc2ApIG9yIGNhbGwgYG5vdGlmeVBhdGhgXG4gKiAoZS5nLiBgdGhpcy5ub3RpZnlQYXRoKCdpdGVtcycpYCkgdG8gdXBkYXRlIHRoZSB0cmVlLiAgTm90ZSB0aGF0IGFsbFxuICogZWxlbWVudHMgdGhhdCB3aXNoIHRvIGJlIHVwZGF0ZWQgYmFzZWQgb24gZGVlcCBtdXRhdGlvbnMgbXVzdCBhcHBseSB0aGlzXG4gKiBtaXhpbiBvciBvdGhlcndpc2Ugc2tpcCBzdHJpY3QgZGlydHkgY2hlY2tpbmcgZm9yIG9iamVjdHMvYXJyYXlzLlxuICogU3BlY2lmaWNhbGx5LCBhbnkgZWxlbWVudHMgaW4gdGhlIGJpbmRpbmcgdHJlZSBiZXR3ZWVuIHRoZSBzb3VyY2Ugb2YgYVxuICogbXV0YXRpb24gYW5kIHRoZSBjb25zdW1wdGlvbiBvZiBpdCBtdXN0IGFwcGx5IHRoaXMgbWl4aW4gb3IgZW5hYmxlIHRoZVxuICogYE9wdGlvbmFsTXV0YWJsZURhdGFgIG1peGluLlxuICpcbiAqIEluIG9yZGVyIHRvIG1ha2UgdGhlIGRpcnR5IGNoZWNrIHN0cmF0ZWd5IGNvbmZpZ3VyYWJsZSwgc2VlXG4gKiBgT3B0aW9uYWxNdXRhYmxlRGF0YWAuXG4gKlxuICogTm90ZSwgdGhlIHBlcmZvcm1hbmNlIGNoYXJhY3RlcmlzdGljcyBvZiBwcm9wYWdhdGluZyBsYXJnZSBvYmplY3QgZ3JhcGhzXG4gKiB3aWxsIGJlIHdvcnNlIGFzIG9wcG9zZWQgdG8gdXNpbmcgc3RyaWN0IGRpcnR5IGNoZWNraW5nIHdpdGggaW1tdXRhYmxlXG4gKiBwYXR0ZXJucyBvciBQb2x5bWVyJ3MgcGF0aCBub3RpZmljYXRpb24gQVBJLlxuICpcbiAqIEBtaXhpbkZ1bmN0aW9uXG4gKiBAcG9seW1lclxuICogQHN1bW1hcnkgRWxlbWVudCBjbGFzcyBtaXhpbiB0byBza2lwIHN0cmljdCBkaXJ0eS1jaGVja2luZyBmb3Igb2JqZWN0c1xuICogICBhbmQgYXJyYXlzXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtmdW5jdGlvbihuZXc6VCl9IHN1cGVyQ2xhc3MgQ2xhc3MgdG8gYXBwbHkgbWl4aW4gdG8uXG4gKiBAcmV0dXJuIHtmdW5jdGlvbihuZXc6VCl9IHN1cGVyQ2xhc3Mgd2l0aCBtaXhpbiBhcHBsaWVkLlxuICovXG5leHBvcnQgY29uc3QgTXV0YWJsZURhdGEgPSBkZWR1cGluZ01peGluKHN1cGVyQ2xhc3MgPT4ge1xuXG4gIC8qKlxuICAgKiBAcG9seW1lclxuICAgKiBAbWl4aW5DbGFzc1xuICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9NdXRhYmxlRGF0YX1cbiAgICovXG4gIGNsYXNzIE11dGFibGVEYXRhIGV4dGVuZHMgc3VwZXJDbGFzcyB7XG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGVzIGBQcm9wZXJ0eUVmZmVjdHNgIHRvIHByb3ZpZGUgb3B0aW9uIGZvciBza2lwcGluZ1xuICAgICAqIHN0cmljdCBlcXVhbGl0eSBjaGVja2luZyBmb3IgT2JqZWN0cyBhbmQgQXJyYXlzLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgcHVsbHMgdGhlIHZhbHVlIHRvIGRpcnR5IGNoZWNrIGFnYWluc3QgZnJvbSB0aGUgYF9fZGF0YVRlbXBgXG4gICAgICogY2FjaGUgKHJhdGhlciB0aGFuIHRoZSBub3JtYWwgYF9fZGF0YWAgY2FjaGUpIGZvciBPYmplY3RzLiAgU2luY2UgdGhlIHRlbXBcbiAgICAgKiBjYWNoZSBpcyBjbGVhcmVkIGF0IHRoZSBlbmQgb2YgYSB0dXJuLCB0aGlzIGltcGxlbWVudGF0aW9uIGFsbG93c1xuICAgICAqIHNpZGUtZWZmZWN0cyBvZiBkZWVwIG9iamVjdCBjaGFuZ2VzIHRvIGJlIHByb2Nlc3NlZCBieSByZS1zZXR0aW5nIHRoZVxuICAgICAqIHNhbWUgb2JqZWN0ICh1c2luZyB0aGUgdGVtcCBjYWNoZSBhcyBhbiBpbi10dXJuIGJhY2tzdG9wIHRvIHByZXZlbnRcbiAgICAgKiBjeWNsZXMgZHVlIHRvIDItd2F5IG5vdGlmaWNhdGlvbikuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgTmV3IHByb3BlcnR5IHZhbHVlXG4gICAgICogQHBhcmFtIHsqfSBvbGQgUHJldmlvdXMgcHJvcGVydHkgdmFsdWVcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBzaG91bGQgYmUgY29uc2lkZXJlZCBhIGNoYW5nZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfc2hvdWxkUHJvcGVydHlDaGFuZ2UocHJvcGVydHksIHZhbHVlLCBvbGQpIHtcbiAgICAgIHJldHVybiBtdXRhYmxlUHJvcGVydHlDaGFuZ2UodGhpcywgcHJvcGVydHksIHZhbHVlLCBvbGQsIHRydWUpO1xuICAgIH1cblxuICB9XG5cbiAgcmV0dXJuIE11dGFibGVEYXRhO1xuXG59KTtcblxuLyoqXG4gKiBFbGVtZW50IGNsYXNzIG1peGluIHRvIGFkZCB0aGUgb3B0aW9uYWwgYWJpbGl0eSB0byBza2lwIHN0cmljdFxuICogZGlydHktY2hlY2tpbmcgZm9yIG9iamVjdHMgYW5kIGFycmF5cyAoYWx3YXlzIGNvbnNpZGVyIHRoZW0gdG8gYmVcbiAqIFwiZGlydHlcIikgYnkgc2V0dGluZyBhIGBtdXRhYmxlLWRhdGFgIGF0dHJpYnV0ZSBvbiBhbiBlbGVtZW50IGluc3RhbmNlLlxuICpcbiAqIEJ5IGRlZmF1bHQsIGBQcm9wZXJ0eUVmZmVjdHNgIHBlcmZvcm1zIHN0cmljdCBkaXJ0eSBjaGVja2luZyBvblxuICogb2JqZWN0cywgd2hpY2ggbWVhbnMgdGhhdCBhbnkgZGVlcCBtb2RpZmljYXRpb25zIHRvIGFuIG9iamVjdCBvciBhcnJheSB3aWxsXG4gKiBub3QgYmUgcHJvcGFnYXRlZCB1bmxlc3MgXCJpbW11dGFibGVcIiBkYXRhIHBhdHRlcm5zIGFyZSB1c2VkIChpLmUuIGFsbCBvYmplY3RcbiAqIHJlZmVyZW5jZXMgZnJvbSB0aGUgcm9vdCB0byB0aGUgbXV0YXRpb24gd2VyZSBjaGFuZ2VkKS5cbiAqXG4gKiBQb2x5bWVyIGFsc28gcHJvdmlkZXMgYSBwcm9wcmlldGFyeSBkYXRhIG11dGF0aW9uIGFuZCBwYXRoIG5vdGlmaWNhdGlvbiBBUElcbiAqIChlLmcuIGBub3RpZnlQYXRoYCwgYHNldGAsIGFuZCBhcnJheSBtdXRhdGlvbiBBUEkncykgdGhhdCBhbGxvdyBlZmZpY2llbnRcbiAqIG11dGF0aW9uIGFuZCBub3RpZmljYXRpb24gb2YgZGVlcCBjaGFuZ2VzIGluIGFuIG9iamVjdCBncmFwaCB0byBhbGwgZWxlbWVudHNcbiAqIGJvdW5kIHRvIHRoZSBzYW1lIG9iamVjdCBncmFwaC5cbiAqXG4gKiBJbiBjYXNlcyB3aGVyZSBuZWl0aGVyIGltbXV0YWJsZSBwYXR0ZXJucyBub3IgdGhlIGRhdGEgbXV0YXRpb24gQVBJIGNhbiBiZVxuICogdXNlZCwgYXBwbHlpbmcgdGhpcyBtaXhpbiB3aWxsIGFsbG93IFBvbHltZXIgdG8gc2tpcCBkaXJ0eSBjaGVja2luZyBmb3JcbiAqIG9iamVjdHMgYW5kIGFycmF5cyAoYWx3YXlzIGNvbnNpZGVyIHRoZW0gdG8gYmUgXCJkaXJ0eVwiKS4gIFRoaXMgYWxsb3dzIGFcbiAqIHVzZXIgdG8gbWFrZSBhIGRlZXAgbW9kaWZpY2F0aW9uIHRvIGEgYm91bmQgb2JqZWN0IGdyYXBoLCBhbmQgdGhlbiBlaXRoZXJcbiAqIHNpbXBseSByZS1zZXQgdGhlIG9iamVjdCAoZS5nLiBgdGhpcy5pdGVtcyA9IHRoaXMuaXRlbXNgKSBvciBjYWxsIGBub3RpZnlQYXRoYFxuICogKGUuZy4gYHRoaXMubm90aWZ5UGF0aCgnaXRlbXMnKWApIHRvIHVwZGF0ZSB0aGUgdHJlZS4gIE5vdGUgdGhhdCBhbGxcbiAqIGVsZW1lbnRzIHRoYXQgd2lzaCB0byBiZSB1cGRhdGVkIGJhc2VkIG9uIGRlZXAgbXV0YXRpb25zIG11c3QgYXBwbHkgdGhpc1xuICogbWl4aW4gb3Igb3RoZXJ3aXNlIHNraXAgc3RyaWN0IGRpcnR5IGNoZWNraW5nIGZvciBvYmplY3RzL2FycmF5cy5cbiAqIFNwZWNpZmljYWxseSwgYW55IGVsZW1lbnRzIGluIHRoZSBiaW5kaW5nIHRyZWUgYmV0d2VlbiB0aGUgc291cmNlIG9mIGFcbiAqIG11dGF0aW9uIGFuZCB0aGUgY29uc3VtcHRpb24gb2YgaXQgbXVzdCBlbmFibGUgdGhpcyBtaXhpbiBvciBhcHBseSB0aGVcbiAqIGBNdXRhYmxlRGF0YWAgbWl4aW4uXG4gKlxuICogV2hpbGUgdGhpcyBtaXhpbiBhZGRzIHRoZSBhYmlsaXR5IHRvIGZvcmdvIE9iamVjdC9BcnJheSBkaXJ0eSBjaGVja2luZyxcbiAqIHRoZSBgbXV0YWJsZURhdGFgIGZsYWcgZGVmYXVsdHMgdG8gZmFsc2UgYW5kIG11c3QgYmUgc2V0IG9uIHRoZSBpbnN0YW5jZS5cbiAqXG4gKiBOb3RlLCB0aGUgcGVyZm9ybWFuY2UgY2hhcmFjdGVyaXN0aWNzIG9mIHByb3BhZ2F0aW5nIGxhcmdlIG9iamVjdCBncmFwaHNcbiAqIHdpbGwgYmUgd29yc2UgYnkgcmVseWluZyBvbiBgbXV0YWJsZURhdGE6IHRydWVgIGFzIG9wcG9zZWQgdG8gdXNpbmdcbiAqIHN0cmljdCBkaXJ0eSBjaGVja2luZyB3aXRoIGltbXV0YWJsZSBwYXR0ZXJucyBvciBQb2x5bWVyJ3MgcGF0aCBub3RpZmljYXRpb25cbiAqIEFQSS5cbiAqXG4gKiBAbWl4aW5GdW5jdGlvblxuICogQHBvbHltZXJcbiAqIEBzdW1tYXJ5IEVsZW1lbnQgY2xhc3MgbWl4aW4gdG8gb3B0aW9uYWxseSBza2lwIHN0cmljdCBkaXJ0eS1jaGVja2luZ1xuICogICBmb3Igb2JqZWN0cyBhbmQgYXJyYXlzXG4gKi9cbmV4cG9ydCBjb25zdCBPcHRpb25hbE11dGFibGVEYXRhID0gZGVkdXBpbmdNaXhpbihzdXBlckNsYXNzID0+IHtcblxuICAvKipcbiAgICogQG1peGluQ2xhc3NcbiAgICogQHBvbHltZXJcbiAgICogQGltcGxlbWVudHMge1BvbHltZXJfT3B0aW9uYWxNdXRhYmxlRGF0YX1cbiAgICovXG4gIGNsYXNzIE9wdGlvbmFsTXV0YWJsZURhdGEgZXh0ZW5kcyBzdXBlckNsYXNzIHtcblxuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbnN0YW5jZS1sZXZlbCBmbGFnIGZvciBjb25maWd1cmluZyB0aGUgZGlydHktY2hlY2tpbmcgc3RyYXRlZ3lcbiAgICAgICAgICogZm9yIHRoaXMgZWxlbWVudC4gIFdoZW4gdHJ1ZSwgT2JqZWN0cyBhbmQgQXJyYXlzIHdpbGwgc2tpcCBkaXJ0eVxuICAgICAgICAgKiBjaGVja2luZywgb3RoZXJ3aXNlIHN0cmljdCBlcXVhbGl0eSBjaGVja2luZyB3aWxsIGJlIHVzZWQuXG4gICAgICAgICAqL1xuICAgICAgICBtdXRhYmxlRGF0YTogQm9vbGVhblxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgYFByb3BlcnR5RWZmZWN0c2AgdG8gcHJvdmlkZSBvcHRpb24gZm9yIHNraXBwaW5nXG4gICAgICogc3RyaWN0IGVxdWFsaXR5IGNoZWNraW5nIGZvciBPYmplY3RzIGFuZCBBcnJheXMuXG4gICAgICpcbiAgICAgKiBXaGVuIGB0aGlzLm11dGFibGVEYXRhYCBpcyB0cnVlIG9uIHRoaXMgaW5zdGFuY2UsIHRoaXMgbWV0aG9kXG4gICAgICogcHVsbHMgdGhlIHZhbHVlIHRvIGRpcnR5IGNoZWNrIGFnYWluc3QgZnJvbSB0aGUgYF9fZGF0YVRlbXBgIGNhY2hlXG4gICAgICogKHJhdGhlciB0aGFuIHRoZSBub3JtYWwgYF9fZGF0YWAgY2FjaGUpIGZvciBPYmplY3RzLiAgU2luY2UgdGhlIHRlbXBcbiAgICAgKiBjYWNoZSBpcyBjbGVhcmVkIGF0IHRoZSBlbmQgb2YgYSB0dXJuLCB0aGlzIGltcGxlbWVudGF0aW9uIGFsbG93c1xuICAgICAqIHNpZGUtZWZmZWN0cyBvZiBkZWVwIG9iamVjdCBjaGFuZ2VzIHRvIGJlIHByb2Nlc3NlZCBieSByZS1zZXR0aW5nIHRoZVxuICAgICAqIHNhbWUgb2JqZWN0ICh1c2luZyB0aGUgdGVtcCBjYWNoZSBhcyBhbiBpbi10dXJuIGJhY2tzdG9wIHRvIHByZXZlbnRcbiAgICAgKiBjeWNsZXMgZHVlIHRvIDItd2F5IG5vdGlmaWNhdGlvbikuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgTmV3IHByb3BlcnR5IHZhbHVlXG4gICAgICogQHBhcmFtIHsqfSBvbGQgUHJldmlvdXMgcHJvcGVydHkgdmFsdWVcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBzaG91bGQgYmUgY29uc2lkZXJlZCBhIGNoYW5nZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfc2hvdWxkUHJvcGVydHlDaGFuZ2UocHJvcGVydHksIHZhbHVlLCBvbGQpIHtcbiAgICAgIHJldHVybiBtdXRhYmxlUHJvcGVydHlDaGFuZ2UodGhpcywgcHJvcGVydHksIHZhbHVlLCBvbGQsIHRoaXMubXV0YWJsZURhdGEpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBPcHRpb25hbE11dGFibGVEYXRhO1xuXG59KTtcblxuLy8gRXhwb3J0IGZvciB1c2UgYnkgbGVnYWN5IGJlaGF2aW9yXG5NdXRhYmxlRGF0YS5fbXV0YWJsZVByb3BlcnR5Q2hhbmdlID0gbXV0YWJsZVByb3BlcnR5Q2hhbmdlO1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuLyoqXG4gKiBNb2R1bGUgZm9yIHByZXBhcmluZyBhbmQgc3RhbXBpbmcgaW5zdGFuY2VzIG9mIHRlbXBsYXRlcyB0aGF0IHV0aWxpemVcbiAqIFBvbHltZXIncyBkYXRhLWJpbmRpbmcgYW5kIGRlY2xhcmF0aXZlIGV2ZW50IGxpc3RlbmVyIGZlYXR1cmVzLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgIC8vIEdldCBhIHRlbXBsYXRlIGZyb20gc29tZXdoZXJlLCBlLmcuIGxpZ2h0IERPTVxuICogICAgIGxldCB0ZW1wbGF0ZSA9IHRoaXMucXVlcnlTZWxlY3RvcigndGVtcGxhdGUnKTtcbiAqICAgICAvLyBQcmVwYXJlIHRoZSB0ZW1wbGF0ZVxuICogICAgIGxldCBUZW1wbGF0ZUNsYXNzID0gVGVtcGxhdGl6ZS50ZW1wbGF0aXplKHRlbXBsYXRlKTtcbiAqICAgICAvLyBJbnN0YW5jZSB0aGUgdGVtcGxhdGUgd2l0aCBhbiBpbml0aWFsIGRhdGEgbW9kZWxcbiAqICAgICBsZXQgaW5zdGFuY2UgPSBuZXcgVGVtcGxhdGVDbGFzcyh7bXlQcm9wOiAnaW5pdGlhbCd9KTtcbiAqICAgICAvLyBJbnNlcnQgdGhlIGluc3RhbmNlJ3MgRE9NIHNvbWV3aGVyZSwgZS5nLiBlbGVtZW50J3Mgc2hhZG93IERPTVxuICogICAgIHRoaXMuc2hhZG93Um9vdC5hcHBlbmRDaGlsZChpbnN0YW5jZS5yb290KTtcbiAqICAgICAvLyBDaGFuZ2luZyBhIHByb3BlcnR5IG9uIHRoZSBpbnN0YW5jZSB3aWxsIHByb3BhZ2F0ZSB0byBiaW5kaW5nc1xuICogICAgIC8vIGluIHRoZSB0ZW1wbGF0ZVxuICogICAgIGluc3RhbmNlLm15UHJvcCA9ICduZXcgdmFsdWUnO1xuICpcbiAqIFRoZSBgb3B0aW9uc2AgZGljdGlvbmFyeSBwYXNzZWQgdG8gYHRlbXBsYXRpemVgIGFsbG93cyBmb3IgY3VzdG9taXppbmdcbiAqIGZlYXR1cmVzIG9mIHRoZSBnZW5lcmF0ZWQgdGVtcGxhdGUgY2xhc3MsIGluY2x1ZGluZyBob3cgb3V0ZXItc2NvcGUgaG9zdFxuICogcHJvcGVydGllcyBzaG91bGQgYmUgZm9yd2FyZGVkIGludG8gdGVtcGxhdGUgaW5zdGFuY2VzLCBob3cgYW55IGluc3RhbmNlXG4gKiBwcm9wZXJ0aWVzIGFkZGVkIGludG8gdGhlIHRlbXBsYXRlJ3Mgc2NvcGUgc2hvdWxkIGJlIG5vdGlmaWVkIG91dCB0b1xuICogdGhlIGhvc3QsIGFuZCB3aGV0aGVyIHRoZSBpbnN0YW5jZSBzaG91bGQgYmUgZGVjb3JhdGVkIGFzIGEgXCJwYXJlbnQgbW9kZWxcIlxuICogb2YgYW55IGV2ZW50IGhhbmRsZXJzLlxuICpcbiAqICAgICAvLyBDdXN0b21pemUgcHJvcGVydHkgZm9yd2FyZGluZyBhbmQgZXZlbnQgbW9kZWwgZGVjb3JhdGlvblxuICogICAgIGxldCBUZW1wbGF0ZUNsYXNzID0gVGVtcGxhdGl6ZS50ZW1wbGF0aXplKHRlbXBsYXRlLCB0aGlzLCB7XG4gKiAgICAgICBwYXJlbnRNb2RlbDogdHJ1ZSxcbiAqICAgICAgIGZvcndhcmRIb3N0UHJvcChwcm9wZXJ0eSwgdmFsdWUpIHsuLi59LFxuICogICAgICAgaW5zdGFuY2VQcm9wczogey4uLn0sXG4gKiAgICAgICBub3RpZnlJbnN0YW5jZVByb3AoaW5zdGFuY2UsIHByb3BlcnR5LCB2YWx1ZSkgey4uLn0sXG4gKiAgICAgfSk7XG4gKlxuICogQHN1bW1hcnkgTW9kdWxlIGZvciBwcmVwYXJpbmcgYW5kIHN0YW1waW5nIGluc3RhbmNlcyBvZiB0ZW1wbGF0ZXNcbiAqICAgdXRpbGl6aW5nIFBvbHltZXIgdGVtcGxhdGluZyBmZWF0dXJlcy5cbiAqL1xuXG5pbXBvcnQgJy4vYm9vdC5qcyc7XG5cbmltcG9ydCB7IFByb3BlcnR5RWZmZWN0cyB9IGZyb20gJy4uL21peGlucy9wcm9wZXJ0eS1lZmZlY3RzLmpzJztcbmltcG9ydCB7IE11dGFibGVEYXRhIH0gZnJvbSAnLi4vbWl4aW5zL211dGFibGUtZGF0YS5qcyc7XG5pbXBvcnQgeyBzdHJpY3RUZW1wbGF0ZVBvbGljeSB9IGZyb20gJy4vc2V0dGluZ3MuanMnO1xuaW1wb3J0IHsgd3JhcCB9IGZyb20gJy4vd3JhcC5qcyc7XG5cbi8vIEJhc2UgY2xhc3MgZm9yIEhUTUxUZW1wbGF0ZUVsZW1lbnQgZXh0ZW5zaW9uIHRoYXQgaGFzIHByb3BlcnR5IGVmZmVjdHNcbi8vIG1hY2hpbmVyeSBmb3IgcHJvcGFnYXRpbmcgaG9zdCBwcm9wZXJ0aWVzIHRvIGNoaWxkcmVuLiBUaGlzIGlzIGFuIEVTNVxuLy8gY2xhc3Mgb25seSBiZWNhdXNlIEJhYmVsIChpbmNvcnJlY3RseSkgcmVxdWlyZXMgc3VwZXIoKSBpbiB0aGUgY2xhc3Ncbi8vIGNvbnN0cnVjdG9yIGV2ZW4gdGhvdWdoIG5vIGB0aGlzYCBpcyB1c2VkIGFuZCBpdCByZXR1cm5zIGFuIGluc3RhbmNlLlxubGV0IG5ld0luc3RhbmNlID0gbnVsbDtcblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIHtIVE1MVGVtcGxhdGVFbGVtZW50fVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gSFRNTFRlbXBsYXRlRWxlbWVudEV4dGVuc2lvbigpIHsgcmV0dXJuIG5ld0luc3RhbmNlOyB9XG5IVE1MVGVtcGxhdGVFbGVtZW50RXh0ZW5zaW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSFRNTFRlbXBsYXRlRWxlbWVudC5wcm90b3R5cGUsIHtcbiAgY29uc3RydWN0b3I6IHtcbiAgICB2YWx1ZTogSFRNTFRlbXBsYXRlRWxlbWVudEV4dGVuc2lvbixcbiAgICB3cml0YWJsZTogdHJ1ZVxuICB9XG59KTtcblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c31cbiAqIEBleHRlbmRzIHtIVE1MVGVtcGxhdGVFbGVtZW50RXh0ZW5zaW9ufVxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgRGF0YVRlbXBsYXRlID0gUHJvcGVydHlFZmZlY3RzKEhUTUxUZW1wbGF0ZUVsZW1lbnRFeHRlbnNpb24pO1xuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICogQGltcGxlbWVudHMge1BvbHltZXJfTXV0YWJsZURhdGF9XG4gKiBAZXh0ZW5kcyB7RGF0YVRlbXBsYXRlfVxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgTXV0YWJsZURhdGFUZW1wbGF0ZSA9IE11dGFibGVEYXRhKERhdGFUZW1wbGF0ZSk7XG5cbi8vIEFwcGxpZXMgYSBEYXRhVGVtcGxhdGUgc3ViY2xhc3MgdG8gYSA8dGVtcGxhdGU+IGluc3RhbmNlXG5mdW5jdGlvbiB1cGdyYWRlVGVtcGxhdGUodGVtcGxhdGUsIGNvbnN0cnVjdG9yKSB7XG4gIG5ld0luc3RhbmNlID0gdGVtcGxhdGU7XG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZih0ZW1wbGF0ZSwgY29uc3RydWN0b3IucHJvdG90eXBlKTtcbiAgbmV3IGNvbnN0cnVjdG9yKCk7XG4gIG5ld0luc3RhbmNlID0gbnVsbDtcbn1cblxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBUZW1wbGF0ZUluc3RhbmNlLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyB7SFRNTEVsZW1lbnR9XG4gKiBAaW1wbGVtZW50cyB7UG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9XG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCB0ZW1wbGF0ZUluc3RhbmNlQmFzZSA9IFByb3BlcnR5RWZmZWN0cyhcbiAgICAvLyBUaGlzIGNhc3Qgc2hvdWxkbid0IGJlIG5lY2Nlc3NhcnksIGJ1dCBDbG9zdXJlIGRvZXNuJ3QgdW5kZXJzdGFuZCB0aGF0XG4gICAgLy8gXCJjbGFzcyB7fVwiIGlzIGEgY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gICAgLyoqIEB0eXBlIHtmdW5jdGlvbihuZXc6T2JqZWN0KX0gKi8oY2xhc3Mge30pKTtcblxuLyoqXG4gKiBAcG9seW1lclxuICogQGN1c3RvbUVsZW1lbnRcbiAqIEBhcHBsaWVzTWl4aW4gUHJvcGVydHlFZmZlY3RzXG4gKiBAdW5yZXN0cmljdGVkXG4gKi9cbmNsYXNzIFRlbXBsYXRlSW5zdGFuY2VCYXNlIGV4dGVuZHMgdGVtcGxhdGVJbnN0YW5jZUJhc2Uge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fY29uZmlndXJlUHJvcGVydGllcyhwcm9wcyk7XG4gICAgLyoqIEB0eXBlIHshU3RhbXBlZFRlbXBsYXRlfSAqL1xuICAgIHRoaXMucm9vdCA9IHRoaXMuX3N0YW1wVGVtcGxhdGUodGhpcy5fX2RhdGFIb3N0KTtcbiAgICAvLyBTYXZlIGxpc3Qgb2Ygc3RhbXBlZCBjaGlsZHJlblxuICAgIGxldCBjaGlsZHJlbiA9IFtdO1xuICAgIC8qKiBAc3VwcHJlc3Mge2ludmFsaWRDYXN0c30gKi9cbiAgICB0aGlzLmNoaWxkcmVuID0gLyoqIEB0eXBlIHshTm9kZUxpc3R9ICovIChjaGlsZHJlbik7XG4gICAgLy8gUG9seW1lciAxLnggZGlkIG5vdCB1c2UgYFBvbHltZXIuZG9tYCBoZXJlIHNvIG5vdCBib3RoZXJpbmcuXG4gICAgZm9yIChsZXQgbiA9IHRoaXMucm9vdC5maXJzdENoaWxkOyBuOyBuPW4ubmV4dFNpYmxpbmcpIHtcbiAgICAgIGNoaWxkcmVuLnB1c2gobik7XG4gICAgICBuLl9fdGVtcGxhdGl6ZUluc3RhbmNlID0gdGhpcztcbiAgICB9XG4gICAgaWYgKHRoaXMuX190ZW1wbGF0aXplT3duZXIgJiZcbiAgICAgIHRoaXMuX190ZW1wbGF0aXplT3duZXIuX19oaWRlVGVtcGxhdGVDaGlsZHJlbl9fKSB7XG4gICAgICB0aGlzLl9zaG93SGlkZUNoaWxkcmVuKHRydWUpO1xuICAgIH1cbiAgICAvLyBGbHVzaCBwcm9wcyBvbmx5IHdoZW4gcHJvcHMgYXJlIHBhc3NlZCBpZiBpbnN0YW5jZSBwcm9wcyBleGlzdFxuICAgIC8vIG9yIHdoZW4gdGhlcmUgaXNuJ3QgaW5zdGFuY2UgcHJvcHMuXG4gICAgbGV0IG9wdGlvbnMgPSB0aGlzLl9fdGVtcGxhdGl6ZU9wdGlvbnM7XG4gICAgaWYgKChwcm9wcyAmJiBvcHRpb25zLmluc3RhbmNlUHJvcHMpIHx8ICFvcHRpb25zLmluc3RhbmNlUHJvcHMpIHtcbiAgICAgIHRoaXMuX2VuYWJsZVByb3BlcnRpZXMoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENvbmZpZ3VyZSB0aGUgZ2l2ZW4gYHByb3BzYCBieSBjYWxsaW5nIGBfc2V0UGVuZGluZ1Byb3BlcnR5YC4gQWxzb1xuICAgKiBzZXRzIGFueSBwcm9wZXJ0aWVzIHN0b3JlZCBpbiBgX19ob3N0UHJvcHNgLlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgT2JqZWN0IG9mIHByb3BlcnR5IG5hbWUtdmFsdWUgcGFpcnMgdG8gc2V0LlxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgX2NvbmZpZ3VyZVByb3BlcnRpZXMocHJvcHMpIHtcbiAgICBsZXQgb3B0aW9ucyA9IHRoaXMuX190ZW1wbGF0aXplT3B0aW9ucztcbiAgICBpZiAob3B0aW9ucy5mb3J3YXJkSG9zdFByb3ApIHtcbiAgICAgIGZvciAobGV0IGhwcm9wIGluIHRoaXMuX19ob3N0UHJvcHMpIHtcbiAgICAgICAgdGhpcy5fc2V0UGVuZGluZ1Byb3BlcnR5KGhwcm9wLCB0aGlzLl9fZGF0YUhvc3RbJ19ob3N0XycgKyBocHJvcF0pO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBBbnkgaW5zdGFuY2UgcHJvcHMgcGFzc2VkIGluIHRoZSBjb25zdHJ1Y3RvciB3aWxsIG92ZXJ3cml0ZSBob3N0IHByb3BzO1xuICAgIC8vIG5vcm1hbGx5IHRoaXMgd291bGQgYmUgYSB1c2VyIGVycm9yIGJ1dCB3ZSBkb24ndCBzcGVjaWZpY2FsbHkgZmlsdGVyIHRoZW1cbiAgICBmb3IgKGxldCBpcHJvcCBpbiBwcm9wcykge1xuICAgICAgdGhpcy5fc2V0UGVuZGluZ1Byb3BlcnR5KGlwcm9wLCBwcm9wc1tpcHJvcF0pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRm9yd2FyZHMgYSBob3N0IHByb3BlcnR5IHRvIHRoaXMgaW5zdGFuY2UuICBUaGlzIG1ldGhvZCBzaG91bGQgYmVcbiAgICogY2FsbGVkIG9uIGluc3RhbmNlcyBmcm9tIHRoZSBgb3B0aW9ucy5mb3J3YXJkSG9zdFByb3BgIGNhbGxiYWNrXG4gICAqIHRvIHByb3BhZ2F0ZSBjaGFuZ2VzIG9mIGhvc3QgcHJvcGVydGllcyB0byBlYWNoIGluc3RhbmNlLlxuICAgKlxuICAgKiBOb3RlIHRoaXMgbWV0aG9kIGVucXVldWVzIHRoZSBjaGFuZ2UsIHdoaWNoIGFyZSBmbHVzaGVkIGFzIGEgYmF0Y2guXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIFByb3BlcnR5IG9yIHBhdGggbmFtZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIG9mIHRoZSBwcm9wZXJ0eSB0byBmb3J3YXJkXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBmb3J3YXJkSG9zdFByb3AocHJvcCwgdmFsdWUpIHtcbiAgICBpZiAodGhpcy5fc2V0UGVuZGluZ1Byb3BlcnR5T3JQYXRoKHByb3AsIHZhbHVlLCBmYWxzZSwgdHJ1ZSkpIHtcbiAgICAgIHRoaXMuX19kYXRhSG9zdC5fZW5xdWV1ZUNsaWVudCh0aGlzKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogT3ZlcnJpZGUgcG9pbnQgZm9yIGFkZGluZyBjdXN0b20gb3Igc2ltdWxhdGVkIGV2ZW50IGhhbmRsaW5nLlxuICAgKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHBhcmFtIHshTm9kZX0gbm9kZSBOb2RlIHRvIGFkZCBldmVudCBsaXN0ZW5lciB0b1xuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIE5hbWUgb2YgZXZlbnRcbiAgICogQHBhcmFtIHtmdW5jdGlvbighRXZlbnQpOnZvaWR9IGhhbmRsZXIgTGlzdGVuZXIgZnVuY3Rpb24gdG8gYWRkXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBfYWRkRXZlbnRMaXN0ZW5lclRvTm9kZShub2RlLCBldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgICBpZiAodGhpcy5fbWV0aG9kSG9zdCAmJiB0aGlzLl9fdGVtcGxhdGl6ZU9wdGlvbnMucGFyZW50TW9kZWwpIHtcbiAgICAgIC8vIElmIHRoaXMgaW5zdGFuY2Ugc2hvdWxkIGJlIGNvbnNpZGVyZWQgYSBwYXJlbnQgbW9kZWwsIGRlY29yYXRlXG4gICAgICAvLyBldmVudHMgdGhpcyB0ZW1wbGF0ZSBpbnN0YW5jZSBhcyBgbW9kZWxgXG4gICAgICB0aGlzLl9tZXRob2RIb3N0Ll9hZGRFdmVudExpc3RlbmVyVG9Ob2RlKG5vZGUsIGV2ZW50TmFtZSwgKGUpID0+IHtcbiAgICAgICAgZS5tb2RlbCA9IHRoaXM7XG4gICAgICAgIGhhbmRsZXIoZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT3RoZXJ3aXNlIGRlbGVnYXRlIHRvIHRoZSB0ZW1wbGF0ZSdzIGhvc3QgKHdoaWNoIGNvdWxkIGJlKVxuICAgICAgLy8gYW5vdGhlciB0ZW1wbGF0ZSBpbnN0YW5jZVxuICAgICAgbGV0IHRlbXBsYXRlSG9zdCA9IHRoaXMuX19kYXRhSG9zdC5fX2RhdGFIb3N0O1xuICAgICAgaWYgKHRlbXBsYXRlSG9zdCkge1xuICAgICAgICB0ZW1wbGF0ZUhvc3QuX2FkZEV2ZW50TGlzdGVuZXJUb05vZGUobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFNob3dzIG9yIGhpZGVzIHRoZSB0ZW1wbGF0ZSBpbnN0YW5jZSB0b3AgbGV2ZWwgY2hpbGQgZWxlbWVudHMuIEZvclxuICAgKiB0ZXh0IG5vZGVzLCBgdGV4dENvbnRlbnRgIGlzIHJlbW92ZWQgd2hpbGUgXCJoaWRkZW5cIiBhbmQgcmVwbGFjZWQgd2hlblxuICAgKiBcInNob3duLlwiXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaGlkZSBTZXQgdG8gdHJ1ZSB0byBoaWRlIHRoZSBjaGlsZHJlbjtcbiAgICogc2V0IHRvIGZhbHNlIHRvIHNob3cgdGhlbS5cbiAgICogQHJldHVybiB7dm9pZH1cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX3Nob3dIaWRlQ2hpbGRyZW4oaGlkZSkge1xuICAgIGxldCBjID0gdGhpcy5jaGlsZHJlbjtcbiAgICBmb3IgKGxldCBpPTA7IGk8Yy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IG4gPSBjW2ldO1xuICAgICAgLy8gSWdub3JlIG5vbi1jaGFuZ2VzXG4gICAgICBpZiAoQm9vbGVhbihoaWRlKSAhPSBCb29sZWFuKG4uX19oaWRlVGVtcGxhdGVDaGlsZHJlbl9fKSkge1xuICAgICAgICBpZiAobi5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcbiAgICAgICAgICBpZiAoaGlkZSkge1xuICAgICAgICAgICAgbi5fX3BvbHltZXJUZXh0Q29udGVudF9fID0gbi50ZXh0Q29udGVudDtcbiAgICAgICAgICAgIG4udGV4dENvbnRlbnQgPSAnJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbi50ZXh0Q29udGVudCA9IG4uX19wb2x5bWVyVGV4dENvbnRlbnRfXztcbiAgICAgICAgICB9XG4gICAgICAgIC8vIHJlbW92ZSBhbmQgcmVwbGFjZSBzbG90XG4gICAgICAgIH0gZWxzZSBpZiAobi5sb2NhbE5hbWUgPT09ICdzbG90Jykge1xuICAgICAgICAgIGlmIChoaWRlKSB7XG4gICAgICAgICAgICBuLl9fcG9seW1lclJlcGxhY2VkX18gPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KCdoaWRkZW4tc2xvdCcpO1xuICAgICAgICAgICAgd3JhcCh3cmFwKG4pLnBhcmVudE5vZGUpLnJlcGxhY2VDaGlsZChuLl9fcG9seW1lclJlcGxhY2VkX18sIG4pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCByZXBsYWNlID0gbi5fX3BvbHltZXJSZXBsYWNlZF9fO1xuICAgICAgICAgICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgICAgICAgICAgd3JhcCh3cmFwKHJlcGxhY2UpLnBhcmVudE5vZGUpLnJlcGxhY2VDaGlsZChuLCByZXBsYWNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBlbHNlIGlmIChuLnN0eWxlKSB7XG4gICAgICAgICAgaWYgKGhpZGUpIHtcbiAgICAgICAgICAgIG4uX19wb2x5bWVyRGlzcGxheV9fID0gbi5zdHlsZS5kaXNwbGF5O1xuICAgICAgICAgICAgbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuLnN0eWxlLmRpc3BsYXkgPSBuLl9fcG9seW1lckRpc3BsYXlfXztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG4uX19oaWRlVGVtcGxhdGVDaGlsZHJlbl9fID0gaGlkZTtcbiAgICAgIGlmIChuLl9zaG93SGlkZUNoaWxkcmVuKSB7XG4gICAgICAgIG4uX3Nob3dIaWRlQ2hpbGRyZW4oaGlkZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBPdmVycmlkZXMgZGVmYXVsdCBwcm9wZXJ0eS1lZmZlY3RzIGltcGxlbWVudGF0aW9uIHRvIGludGVyY2VwdFxuICAgKiB0ZXh0Q29udGVudCBiaW5kaW5ncyB3aGlsZSBjaGlsZHJlbiBhcmUgXCJoaWRkZW5cIiBhbmQgY2FjaGUgaW5cbiAgICogcHJpdmF0ZSBzdG9yYWdlIGZvciBsYXRlciByZXRyaWV2YWwuXG4gICAqXG4gICAqIEBvdmVycmlkZVxuICAgKiBAcGFyYW0geyFOb2RlfSBub2RlIFRoZSBub2RlIHRvIHNldCBhIHByb3BlcnR5IG9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIFRoZSBwcm9wZXJ0eSB0byBzZXRcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0XG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9zZXRVbm1hbmFnZWRQcm9wZXJ0eVRvTm9kZShub2RlLCBwcm9wLCB2YWx1ZSkge1xuICAgIGlmIChub2RlLl9faGlkZVRlbXBsYXRlQ2hpbGRyZW5fXyAmJlxuICAgICAgICBub2RlLm5vZGVUeXBlID09IE5vZGUuVEVYVF9OT0RFICYmIHByb3AgPT0gJ3RleHRDb250ZW50Jykge1xuICAgICAgbm9kZS5fX3BvbHltZXJUZXh0Q29udGVudF9fID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1cGVyLl9zZXRVbm1hbmFnZWRQcm9wZXJ0eVRvTm9kZShub2RlLCBwcm9wLCB2YWx1ZSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBGaW5kIHRoZSBwYXJlbnQgbW9kZWwgb2YgdGhpcyB0ZW1wbGF0ZSBpbnN0YW5jZS4gIFRoZSBwYXJlbnQgbW9kZWxcbiAgICogaXMgZWl0aGVyIGFub3RoZXIgdGVtcGxhdGl6ZSBpbnN0YW5jZSB0aGF0IGhhZCBvcHRpb24gYHBhcmVudE1vZGVsOiB0cnVlYCxcbiAgICogb3IgZWxzZSB0aGUgaG9zdCBlbGVtZW50LlxuICAgKlxuICAgKiBAcmV0dXJuIHshUG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9IFRoZSBwYXJlbnQgbW9kZWwgb2YgdGhpcyBpbnN0YW5jZVxuICAgKi9cbiAgZ2V0IHBhcmVudE1vZGVsKCkge1xuICAgIGxldCBtb2RlbCA9IHRoaXMuX19wYXJlbnRNb2RlbDtcbiAgICBpZiAoIW1vZGVsKSB7XG4gICAgICBsZXQgb3B0aW9ucztcbiAgICAgIG1vZGVsID0gdGhpcztcbiAgICAgIGRvIHtcbiAgICAgICAgLy8gQSB0ZW1wbGF0ZSBpbnN0YW5jZSdzIGBfX2RhdGFIb3N0YCBpcyBhIDx0ZW1wbGF0ZT5cbiAgICAgICAgLy8gYG1vZGVsLl9fZGF0YUhvc3QuX19kYXRhSG9zdGAgaXMgdGhlIHRlbXBsYXRlJ3MgaG9zdFxuICAgICAgICBtb2RlbCA9IG1vZGVsLl9fZGF0YUhvc3QuX19kYXRhSG9zdDtcbiAgICAgIH0gd2hpbGUgKChvcHRpb25zID0gbW9kZWwuX190ZW1wbGF0aXplT3B0aW9ucykgJiYgIW9wdGlvbnMucGFyZW50TW9kZWwpO1xuICAgICAgdGhpcy5fX3BhcmVudE1vZGVsID0gbW9kZWw7XG4gICAgfVxuICAgIHJldHVybiBtb2RlbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdHViIG9mIEhUTUxFbGVtZW50J3MgYGRpc3BhdGNoRXZlbnRgLCBzbyB0aGF0IGVmZmVjdHMgdGhhdCBtYXlcbiAgICogZGlzcGF0Y2ggZXZlbnRzIHNhZmVseSBuby1vcC5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgRXZlbnQgdG8gZGlzcGF0Y2hcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gQWx3YXlzIHRydWUuXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgIGRpc3BhdGNoRXZlbnQoZXZlbnQpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG4vKiogQHR5cGUgeyFEYXRhVGVtcGxhdGV9ICovXG5UZW1wbGF0ZUluc3RhbmNlQmFzZS5wcm90b3R5cGUuX19kYXRhSG9zdDtcbi8qKiBAdHlwZSB7IVRlbXBsYXRpemVPcHRpb25zfSAqL1xuVGVtcGxhdGVJbnN0YW5jZUJhc2UucHJvdG90eXBlLl9fdGVtcGxhdGl6ZU9wdGlvbnM7XG4vKiogQHR5cGUgeyFQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c30gKi9cblRlbXBsYXRlSW5zdGFuY2VCYXNlLnByb3RvdHlwZS5fbWV0aG9kSG9zdDtcbi8qKiBAdHlwZSB7IU9iamVjdH0gKi9cblRlbXBsYXRlSW5zdGFuY2VCYXNlLnByb3RvdHlwZS5fX3RlbXBsYXRpemVPd25lcjtcbi8qKiBAdHlwZSB7IU9iamVjdH0gKi9cblRlbXBsYXRlSW5zdGFuY2VCYXNlLnByb3RvdHlwZS5fX2hvc3RQcm9wcztcblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIHtUZW1wbGF0ZUluc3RhbmNlQmFzZX1cbiAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX011dGFibGVEYXRhfVxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgTXV0YWJsZVRlbXBsYXRlSW5zdGFuY2VCYXNlID0gTXV0YWJsZURhdGEoXG4gICAgLy8gVGhpcyBjYXN0IHNob3VsZG4ndCBiZSBuZWNlc3NhcnksIGJ1dCBDbG9zdXJlIGRvZXNuJ3Qgc2VlbSB0byB1bmRlcnN0YW5kXG4gICAgLy8gdGhpcyBjb25zdHJ1Y3Rvci5cbiAgICAvKiogQHR5cGUge2Z1bmN0aW9uKG5ldzpUZW1wbGF0ZUluc3RhbmNlQmFzZSl9ICovKFRlbXBsYXRlSW5zdGFuY2VCYXNlKSk7XG5cbmZ1bmN0aW9uIGZpbmRNZXRob2RIb3N0KHRlbXBsYXRlKSB7XG4gIC8vIFRlY2huaWNhbGx5IHRoaXMgc2hvdWxkIGJlIHRoZSBvd25lciBvZiB0aGUgb3V0ZXJtb3N0IHRlbXBsYXRlLlxuICAvLyBJbiBzaGFkb3cgZG9tLCB0aGlzIGlzIGFsd2F5cyBnZXRSb290Tm9kZSgpLmhvc3QsIGJ1dCB3ZSBjYW5cbiAgLy8gYXBwcm94aW1hdGUgdGhpcyB2aWEgY29vcGVyYXRpb24gd2l0aCBvdXIgZGF0YUhvc3QgYWx3YXlzIHNldHRpbmdcbiAgLy8gYF9tZXRob2RIb3N0YCBhcyBsb25nIGFzIHRoZXJlIHdlcmUgYmluZGluZ3MgKG9yIGlkJ3MpIG9uIHRoaXNcbiAgLy8gaW5zdGFuY2UgY2F1c2luZyBpdCB0byBnZXQgYSBkYXRhSG9zdC5cbiAgbGV0IHRlbXBsYXRlSG9zdCA9IHRlbXBsYXRlLl9fZGF0YUhvc3Q7XG4gIHJldHVybiB0ZW1wbGF0ZUhvc3QgJiYgdGVtcGxhdGVIb3N0Ll9tZXRob2RIb3N0IHx8IHRlbXBsYXRlSG9zdDtcbn1cblxuLyogZXNsaW50LWRpc2FibGUgdmFsaWQtanNkb2MgKi9cbi8qKlxuICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc30gY2xhc3MucHJvdG90eXBlIGlzIG5vdCBkZWZpbmVkIGZvciBzb21lIHJlYXNvblxuICovXG5mdW5jdGlvbiBjcmVhdGVUZW1wbGF0aXplckNsYXNzKHRlbXBsYXRlLCB0ZW1wbGF0ZUluZm8sIG9wdGlvbnMpIHtcbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAZXh0ZW5kcyB7VGVtcGxhdGVJbnN0YW5jZUJhc2V9XG4gICAqL1xuICBsZXQgdGVtcGxhdGl6ZXJCYXNlID0gb3B0aW9ucy5tdXRhYmxlRGF0YSA/XG4gICAgTXV0YWJsZVRlbXBsYXRlSW5zdGFuY2VCYXNlIDogVGVtcGxhdGVJbnN0YW5jZUJhc2U7XG5cbiAgLy8gQWZmb3JkYW5jZSBmb3IgZ2xvYmFsIG1peGlucyBvbnRvIFRlbXBsYXRpemVJbnN0YW5jZVxuICBpZiAodGVtcGxhdGl6ZS5taXhpbikge1xuICAgIHRlbXBsYXRpemVyQmFzZSA9IHRlbXBsYXRpemUubWl4aW4odGVtcGxhdGl6ZXJCYXNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbm9ueW1vdXMgY2xhc3MgY3JlYXRlZCBieSB0aGUgdGVtcGxhdGl6ZVxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGxldCBrbGFzcyA9IGNsYXNzIGV4dGVuZHMgdGVtcGxhdGl6ZXJCYXNlIHsgfTtcbiAgLyoqIEBvdmVycmlkZSAqL1xuICBrbGFzcy5wcm90b3R5cGUuX190ZW1wbGF0aXplT3B0aW9ucyA9IG9wdGlvbnM7XG4gIGtsYXNzLnByb3RvdHlwZS5fYmluZFRlbXBsYXRlKHRlbXBsYXRlKTtcbiAgYWRkTm90aWZ5RWZmZWN0cyhrbGFzcywgdGVtcGxhdGUsIHRlbXBsYXRlSW5mbywgb3B0aW9ucyk7XG4gIHJldHVybiBrbGFzcztcbn1cblxuLyoqXG4gKiBBZGRzIHByb3BhZ2F0ZSBlZmZlY3RzIGZyb20gdGhlIHRlbXBsYXRlIHRvIHRoZSB0ZW1wbGF0ZSBpbnN0YW5jZSBmb3JcbiAqIHByb3BlcnRpZXMgdGhhdCB0aGUgaG9zdCBiaW5kcyB0byB0aGUgdGVtcGxhdGUgdXNpbmcgdGhlIGBfaG9zdF9gIHByZWZpeC5cbiAqIFxuICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc30gY2xhc3MucHJvdG90eXBlIGlzIG5vdCBkZWZpbmVkIGZvciBzb21lIHJlYXNvblxuICovXG5mdW5jdGlvbiBhZGRQcm9wYWdhdGVFZmZlY3RzKHRlbXBsYXRlLCB0ZW1wbGF0ZUluZm8sIG9wdGlvbnMpIHtcbiAgbGV0IHVzZXJGb3J3YXJkSG9zdFByb3AgPSBvcHRpb25zLmZvcndhcmRIb3N0UHJvcDtcbiAgaWYgKHVzZXJGb3J3YXJkSG9zdFByb3AgJiYgdGVtcGxhdGVJbmZvLmhhc0hvc3RQcm9wcykge1xuICAgIC8vIFByb3ZpZGUgZGF0YSBBUEkgYW5kIHByb3BlcnR5IGVmZmVjdHMgb24gbWVtb2l6ZWQgdGVtcGxhdGUgY2xhc3NcbiAgICBsZXQga2xhc3MgPSB0ZW1wbGF0ZUluZm8udGVtcGxhdGl6ZVRlbXBsYXRlQ2xhc3M7XG4gICAgaWYgKCFrbGFzcykge1xuICAgICAgLyoqXG4gICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAqIEBleHRlbmRzIHtEYXRhVGVtcGxhdGV9XG4gICAgICAgKi9cbiAgICAgIGxldCB0ZW1wbGF0aXplZEJhc2UgPSBvcHRpb25zLm11dGFibGVEYXRhID8gTXV0YWJsZURhdGFUZW1wbGF0ZSA6IERhdGFUZW1wbGF0ZTtcbiAgICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgICAga2xhc3MgPSB0ZW1wbGF0ZUluZm8udGVtcGxhdGl6ZVRlbXBsYXRlQ2xhc3MgPVxuICAgICAgICBjbGFzcyBUZW1wbGF0aXplZFRlbXBsYXRlIGV4dGVuZHMgdGVtcGxhdGl6ZWRCYXNlIHt9O1xuICAgICAgLy8gQWRkIHRlbXBsYXRlIC0gPmluc3RhbmNlcyBlZmZlY3RzXG4gICAgICAvLyBhbmQgaG9zdCA8LSB0ZW1wbGF0ZSBlZmZlY3RzXG4gICAgICBsZXQgaG9zdFByb3BzID0gdGVtcGxhdGVJbmZvLmhvc3RQcm9wcztcbiAgICAgIGZvciAobGV0IHByb3AgaW4gaG9zdFByb3BzKSB7XG4gICAgICAgIGtsYXNzLnByb3RvdHlwZS5fYWRkUHJvcGVydHlFZmZlY3QoJ19ob3N0XycgKyBwcm9wLFxuICAgICAgICAgIGtsYXNzLnByb3RvdHlwZS5QUk9QRVJUWV9FRkZFQ1RfVFlQRVMuUFJPUEFHQVRFLFxuICAgICAgICAgIHtmbjogY3JlYXRlRm9yd2FyZEhvc3RQcm9wRWZmZWN0KHByb3AsIHVzZXJGb3J3YXJkSG9zdFByb3ApfSk7XG4gICAgICAgIGtsYXNzLnByb3RvdHlwZS5fY3JlYXRlTm90aWZ5aW5nUHJvcGVydHkoJ19ob3N0XycgKyBwcm9wKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdXBncmFkZVRlbXBsYXRlKHRlbXBsYXRlLCBrbGFzcyk7XG4gICAgLy8gTWl4IGFueSBwcmUtYm91bmQgZGF0YSBpbnRvIF9fZGF0YTsgbm8gbmVlZCB0byBmbHVzaCB0aGlzIHRvXG4gICAgLy8gaW5zdGFuY2VzIHNpbmNlIHRoZXkgcHVsbCBmcm9tIHRoZSB0ZW1wbGF0ZSBhdCBpbnN0YW5jZS10aW1lXG4gICAgaWYgKHRlbXBsYXRlLl9fZGF0YVByb3RvKSB7XG4gICAgICAvLyBOb3RlLCBnZW5lcmFsbHkgYF9fZGF0YVByb3RvYCBjb3VsZCBiZSBjaGFpbmVkLCBidXQgaXQncyBndWFyYW50ZWVkXG4gICAgICAvLyB0byBub3QgYmUgc2luY2UgdGhpcyBpcyBhIHZhbmlsbGEgdGVtcGxhdGUgd2UganVzdCBhZGRlZCBlZmZlY3RzIHRvXG4gICAgICBPYmplY3QuYXNzaWduKHRlbXBsYXRlLl9fZGF0YSwgdGVtcGxhdGUuX19kYXRhUHJvdG8pO1xuICAgIH1cbiAgICAvLyBDbGVhciBhbnkgcGVuZGluZyBkYXRhIGZvciBwZXJmb3JtYW5jZVxuICAgIHRlbXBsYXRlLl9fZGF0YVRlbXAgPSB7fTtcbiAgICB0ZW1wbGF0ZS5fX2RhdGFQZW5kaW5nID0gbnVsbDtcbiAgICB0ZW1wbGF0ZS5fX2RhdGFPbGQgPSBudWxsO1xuICAgIHRlbXBsYXRlLl9lbmFibGVQcm9wZXJ0aWVzKCk7XG4gIH1cbn1cbi8qIGVzbGludC1lbmFibGUgdmFsaWQtanNkb2MgKi9cblxuZnVuY3Rpb24gY3JlYXRlRm9yd2FyZEhvc3RQcm9wRWZmZWN0KGhvc3RQcm9wLCB1c2VyRm9yd2FyZEhvc3RQcm9wKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmb3J3YXJkSG9zdFByb3AodGVtcGxhdGUsIHByb3AsIHByb3BzKSB7XG4gICAgdXNlckZvcndhcmRIb3N0UHJvcC5jYWxsKHRlbXBsYXRlLl9fdGVtcGxhdGl6ZU93bmVyLFxuICAgICAgcHJvcC5zdWJzdHJpbmcoJ19ob3N0XycubGVuZ3RoKSwgcHJvcHNbcHJvcF0pO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhZGROb3RpZnlFZmZlY3RzKGtsYXNzLCB0ZW1wbGF0ZSwgdGVtcGxhdGVJbmZvLCBvcHRpb25zKSB7XG4gIGxldCBob3N0UHJvcHMgPSB0ZW1wbGF0ZUluZm8uaG9zdFByb3BzIHx8IHt9O1xuICBmb3IgKGxldCBpcHJvcCBpbiBvcHRpb25zLmluc3RhbmNlUHJvcHMpIHtcbiAgICBkZWxldGUgaG9zdFByb3BzW2lwcm9wXTtcbiAgICBsZXQgdXNlck5vdGlmeUluc3RhbmNlUHJvcCA9IG9wdGlvbnMubm90aWZ5SW5zdGFuY2VQcm9wO1xuICAgIGlmICh1c2VyTm90aWZ5SW5zdGFuY2VQcm9wKSB7XG4gICAgICBrbGFzcy5wcm90b3R5cGUuX2FkZFByb3BlcnR5RWZmZWN0KGlwcm9wLFxuICAgICAgICBrbGFzcy5wcm90b3R5cGUuUFJPUEVSVFlfRUZGRUNUX1RZUEVTLk5PVElGWSxcbiAgICAgICAge2ZuOiBjcmVhdGVOb3RpZnlJbnN0YW5jZVByb3BFZmZlY3QoaXByb3AsIHVzZXJOb3RpZnlJbnN0YW5jZVByb3ApfSk7XG4gICAgfVxuICB9XG4gIGlmIChvcHRpb25zLmZvcndhcmRIb3N0UHJvcCAmJiB0ZW1wbGF0ZS5fX2RhdGFIb3N0KSB7XG4gICAgZm9yIChsZXQgaHByb3AgaW4gaG9zdFByb3BzKSB7XG4gICAgICAvLyBBcyB3ZSdyZSBpdGVyYXRpbmcgaG9zdFByb3BzIGluIHRoaXMgZnVuY3Rpb24sIG5vdGUgd2hldGhlclxuICAgICAgLy8gdGhlcmUgd2VyZSBhbnksIGZvciBhbiBvcHRpbWl6YXRpb24gaW4gYWRkUHJvcGFnYXRlRWZmZWN0c1xuICAgICAgaWYgKCF0ZW1wbGF0ZUluZm8uaGFzSG9zdFByb3BzKSB7XG4gICAgICAgIHRlbXBsYXRlSW5mby5oYXNIb3N0UHJvcHMgPSB0cnVlO1xuICAgICAgfVxuICAgICAga2xhc3MucHJvdG90eXBlLl9hZGRQcm9wZXJ0eUVmZmVjdChocHJvcCxcbiAgICAgICAga2xhc3MucHJvdG90eXBlLlBST1BFUlRZX0VGRkVDVF9UWVBFUy5OT1RJRlksXG4gICAgICAgIHtmbjogY3JlYXRlTm90aWZ5SG9zdFByb3BFZmZlY3QoKX0pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVOb3RpZnlJbnN0YW5jZVByb3BFZmZlY3QoaW5zdFByb3AsIHVzZXJOb3RpZnlJbnN0YW5jZVByb3ApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIG5vdGlmeUluc3RhbmNlUHJvcChpbnN0LCBwcm9wLCBwcm9wcykge1xuICAgIHVzZXJOb3RpZnlJbnN0YW5jZVByb3AuY2FsbChpbnN0Ll9fdGVtcGxhdGl6ZU93bmVyLFxuICAgICAgaW5zdCwgcHJvcCwgcHJvcHNbcHJvcF0pO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVOb3RpZnlIb3N0UHJvcEVmZmVjdCgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIG5vdGlmeUhvc3RQcm9wKGluc3QsIHByb3AsIHByb3BzKSB7XG4gICAgaW5zdC5fX2RhdGFIb3N0Ll9zZXRQZW5kaW5nUHJvcGVydHlPclBhdGgoJ19ob3N0XycgKyBwcm9wLCBwcm9wc1twcm9wXSwgdHJ1ZSwgdHJ1ZSk7XG4gIH07XG59XG5cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFub255bW91cyBgUHJvcGVydHlFZmZlY3RzYCBjbGFzcyBib3VuZCB0byB0aGVcbiAqIGA8dGVtcGxhdGU+YCBwcm92aWRlZC4gIEluc3RhbmNpbmcgdGhlIGNsYXNzIHdpbGwgcmVzdWx0IGluIHRoZVxuICogdGVtcGxhdGUgYmVpbmcgc3RhbXBlZCBpbnRvIGEgZG9jdW1lbnQgZnJhZ21lbnQgc3RvcmVkIGFzIHRoZSBpbnN0YW5jZSdzXG4gKiBgcm9vdGAgcHJvcGVydHksIGFmdGVyIHdoaWNoIGl0IGNhbiBiZSBhcHBlbmRlZCB0byB0aGUgRE9NLlxuICpcbiAqIFRlbXBsYXRlcyBtYXkgdXRpbGl6ZSBhbGwgUG9seW1lciBkYXRhLWJpbmRpbmcgZmVhdHVyZXMgYXMgd2VsbCBhc1xuICogZGVjbGFyYXRpdmUgZXZlbnQgbGlzdGVuZXJzLiAgRXZlbnQgbGlzdGVuZXJzIGFuZCBpbmxpbmUgY29tcHV0aW5nXG4gKiBmdW5jdGlvbnMgaW4gdGhlIHRlbXBsYXRlIHdpbGwgYmUgY2FsbGVkIG9uIHRoZSBob3N0IG9mIHRoZSB0ZW1wbGF0ZS5cbiAqXG4gKiBUaGUgY29uc3RydWN0b3IgcmV0dXJuZWQgdGFrZXMgYSBzaW5nbGUgYXJndW1lbnQgZGljdGlvbmFyeSBvZiBpbml0aWFsXG4gKiBwcm9wZXJ0eSB2YWx1ZXMgdG8gcHJvcGFnYXRlIGludG8gdGVtcGxhdGUgYmluZGluZ3MuICBBZGRpdGlvbmFsbHlcbiAqIGhvc3QgcHJvcGVydGllcyBjYW4gYmUgZm9yd2FyZGVkIGluLCBhbmQgaW5zdGFuY2UgcHJvcGVydGllcyBjYW4gYmVcbiAqIG5vdGlmaWVkIG91dCBieSBwcm92aWRpbmcgb3B0aW9uYWwgY2FsbGJhY2tzIGluIHRoZSBgb3B0aW9uc2AgZGljdGlvbmFyeS5cbiAqXG4gKiBWYWxpZCBjb25maWd1cmF0aW9uIGluIGBvcHRpb25zYCBhcmUgYXMgZm9sbG93czpcbiAqXG4gKiAtIGBmb3J3YXJkSG9zdFByb3AocHJvcGVydHksIHZhbHVlKWA6IENhbGxlZCB3aGVuIGEgcHJvcGVydHkgcmVmZXJlbmNlZFxuICogICBpbiB0aGUgdGVtcGxhdGUgY2hhbmdlZCBvbiB0aGUgdGVtcGxhdGUncyBob3N0LiBBcyB0aGlzIGxpYnJhcnkgZG9lc1xuICogICBub3QgcmV0YWluIHJlZmVyZW5jZXMgdG8gdGVtcGxhdGVzIGluc3RhbmNlZCBieSB0aGUgdXNlciwgaXQgaXMgdGhlXG4gKiAgIHRlbXBsYXRpemUgb3duZXIncyByZXNwb25zaWJpbGl0eSB0byBmb3J3YXJkIGhvc3QgcHJvcGVydHkgY2hhbmdlcyBpbnRvXG4gKiAgIHVzZXItc3RhbXBlZCBpbnN0YW5jZXMuICBUaGUgYGluc3RhbmNlLmZvcndhcmRIb3N0UHJvcChwcm9wZXJ0eSwgdmFsdWUpYFxuICogICAgbWV0aG9kIG9uIHRoZSBnZW5lcmF0ZWQgY2xhc3Mgc2hvdWxkIGJlIGNhbGxlZCB0byBmb3J3YXJkIGhvc3RcbiAqICAgcHJvcGVydGllcyBpbnRvIHRoZSB0ZW1wbGF0ZSB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IHByb3BlcnR5LWNoYW5nZWRcbiAqICAgbm90aWZpY2F0aW9ucy4gQW55IHByb3BlcnRpZXMgcmVmZXJlbmNlZCBpbiB0aGUgdGVtcGxhdGUgdGhhdCBhcmUgbm90XG4gKiAgIGRlZmluZWQgaW4gYGluc3RhbmNlUHJvcHNgIHdpbGwgYmUgbm90aWZpZWQgdXAgdG8gdGhlIHRlbXBsYXRlJ3MgaG9zdFxuICogICBhdXRvbWF0aWNhbGx5LlxuICogLSBgaW5zdGFuY2VQcm9wc2A6IERpY3Rpb25hcnkgb2YgcHJvcGVydHkgbmFtZXMgdGhhdCB3aWxsIGJlIGFkZGVkXG4gKiAgIHRvIHRoZSBpbnN0YW5jZSBieSB0aGUgdGVtcGxhdGl6ZSBvd25lci4gIFRoZXNlIHByb3BlcnRpZXMgc2hhZG93IGFueVxuICogICBob3N0IHByb3BlcnRpZXMsIGFuZCBjaGFuZ2VzIHdpdGhpbiB0aGUgdGVtcGxhdGUgdG8gdGhlc2UgcHJvcGVydGllc1xuICogICB3aWxsIHJlc3VsdCBpbiBgbm90aWZ5SW5zdGFuY2VQcm9wYCBiZWluZyBjYWxsZWQuXG4gKiAtIGBtdXRhYmxlRGF0YWA6IFdoZW4gYHRydWVgLCB0aGUgZ2VuZXJhdGVkIGNsYXNzIHdpbGwgc2tpcCBzdHJpY3RcbiAqICAgZGlydHktY2hlY2tpbmcgZm9yIG9iamVjdHMgYW5kIGFycmF5cyAoYWx3YXlzIGNvbnNpZGVyIHRoZW0gdG8gYmVcbiAqICAgXCJkaXJ0eVwiKS5cbiAqIC0gYG5vdGlmeUluc3RhbmNlUHJvcChpbnN0YW5jZSwgcHJvcGVydHksIHZhbHVlKWA6IENhbGxlZCB3aGVuXG4gKiAgIGFuIGluc3RhbmNlIHByb3BlcnR5IGNoYW5nZXMuICBVc2VycyBtYXkgY2hvb3NlIHRvIGNhbGwgYG5vdGlmeVBhdGhgXG4gKiAgIG9uIGUuZy4gdGhlIG93bmVyIHRvIG5vdGlmeSB0aGUgY2hhbmdlLlxuICogLSBgcGFyZW50TW9kZWxgOiBXaGVuIGB0cnVlYCwgZXZlbnRzIGhhbmRsZWQgYnkgZGVjbGFyYXRpdmUgZXZlbnQgbGlzdGVuZXJzXG4gKiAgIChgb24tZXZlbnQ9XCJoYW5kbGVyXCJgKSB3aWxsIGJlIGRlY29yYXRlZCB3aXRoIGEgYG1vZGVsYCBwcm9wZXJ0eSBwb2ludGluZ1xuICogICB0byB0aGUgdGVtcGxhdGUgaW5zdGFuY2UgdGhhdCBzdGFtcGVkIGl0LiAgSXQgd2lsbCBhbHNvIGJlIHJldHVybmVkXG4gKiAgIGZyb20gYGluc3RhbmNlLnBhcmVudE1vZGVsYCBpbiBjYXNlcyB3aGVyZSB0ZW1wbGF0ZSBpbnN0YW5jZSBuZXN0aW5nXG4gKiAgIGNhdXNlcyBhbiBpbm5lciBtb2RlbCB0byBzaGFkb3cgYW4gb3V0ZXIgbW9kZWwuXG4gKlxuICogQWxsIGNhbGxiYWNrcyBhcmUgY2FsbGVkIGJvdW5kIHRvIHRoZSBgb3duZXJgLiBBbnkgY29udGV4dFxuICogbmVlZGVkIGZvciB0aGUgY2FsbGJhY2tzIChzdWNoIGFzIHJlZmVyZW5jZXMgdG8gYGluc3RhbmNlc2Agc3RhbXBlZClcbiAqIHNob3VsZCBiZSBzdG9yZWQgb24gdGhlIGBvd25lcmAgc3VjaCB0aGF0IHRoZXkgY2FuIGJlIHJldHJpZXZlZCB2aWFcbiAqIGB0aGlzYC5cbiAqXG4gKiBXaGVuIGBvcHRpb25zLmZvcndhcmRIb3N0UHJvcGAgaXMgZGVjbGFyZWQgYXMgYW4gb3B0aW9uLCBhbnkgcHJvcGVydGllc1xuICogcmVmZXJlbmNlZCBpbiB0aGUgdGVtcGxhdGUgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGZvcndhcmRlZCBmcm9tIHRoZSBob3N0IG9mXG4gKiB0aGUgYDx0ZW1wbGF0ZT5gIHRvIGluc3RhbmNlcywgd2l0aCB0aGUgZXhjZXB0aW9uIG9mIGFueSBwcm9wZXJ0aWVzIGxpc3RlZCBpblxuICogdGhlIGBvcHRpb25zLmluc3RhbmNlUHJvcHNgIG9iamVjdC4gIGBpbnN0YW5jZVByb3BzYCBhcmUgYXNzdW1lZCB0byBiZVxuICogbWFuYWdlZCBieSB0aGUgb3duZXIgb2YgdGhlIGluc3RhbmNlcywgZWl0aGVyIHBhc3NlZCBpbnRvIHRoZSBjb25zdHJ1Y3RvclxuICogb3Igc2V0IGFmdGVyIHRoZSBmYWN0LiAgTm90ZSwgYW55IHByb3BlcnRpZXMgcGFzc2VkIGludG8gdGhlIGNvbnN0cnVjdG9yIHdpbGxcbiAqIGFsd2F5cyBiZSBzZXQgdG8gdGhlIGluc3RhbmNlIChyZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhleSB3b3VsZCBub3JtYWxseVxuICogYmUgZm9yd2FyZGVkIGZyb20gdGhlIGhvc3QpLlxuICpcbiAqIE5vdGUgdGhhdCBgdGVtcGxhdGl6ZSgpYCBjYW4gYmUgcnVuIG9ubHkgb25jZSBmb3IgYSBnaXZlbiBgPHRlbXBsYXRlPmAuXG4gKiBGdXJ0aGVyIGNhbGxzIHdpbGwgcmVzdWx0IGluIGFuIGVycm9yLiBBbHNvLCB0aGVyZSBpcyBhIHNwZWNpYWxcbiAqIGJlaGF2aW9yIGlmIHRoZSB0ZW1wbGF0ZSB3YXMgZHVwbGljYXRlZCB0aHJvdWdoIGEgbWVjaGFuaXNtIHN1Y2ggYXNcbiAqIGA8ZG9tLXJlcGVhdD5gIG9yIGA8dGVzdC1maXh0dXJlPmAuIEluIHRoaXMgY2FzZSwgYWxsIGNhbGxzIHRvXG4gKiBgdGVtcGxhdGl6ZSgpYCByZXR1cm4gdGhlIHNhbWUgY2xhc3MgZm9yIGFsbCBkdXBsaWNhdGVzIG9mIGEgdGVtcGxhdGUuXG4gKiBUaGUgY2xhc3MgcmV0dXJuZWQgZnJvbSBgdGVtcGxhdGl6ZSgpYCBpcyBnZW5lcmF0ZWQgb25seSBvbmNlIHVzaW5nXG4gKiB0aGUgYG9wdGlvbnNgIGZyb20gdGhlIGZpcnN0IGNhbGwuIFRoaXMgbWVhbnMgdGhhdCBhbnkgYG9wdGlvbnNgXG4gKiBwcm92aWRlZCB0byBzdWJzZXF1ZW50IGNhbGxzIHdpbGwgYmUgaWdub3JlZC4gVGhlcmVmb3JlLCBpdCBpcyB2ZXJ5XG4gKiBpbXBvcnRhbnQgbm90IHRvIGNsb3NlIG92ZXIgYW55IHZhcmlhYmxlcyBpbnNpZGUgdGhlIGNhbGxiYWNrcy4gQWxzbyxcbiAqIGFycm93IGZ1bmN0aW9ucyBtdXN0IGJlIGF2b2lkZWQgYmVjYXVzZSB0aGV5IGJpbmQgdGhlIG91dGVyIGB0aGlzYC5cbiAqIEluc2lkZSB0aGUgY2FsbGJhY2tzLCBhbnkgY29udGV4dHVhbCBpbmZvcm1hdGlvbiBjYW4gYmUgYWNjZXNzZWRcbiAqIHRocm91Z2ggYHRoaXNgLCB3aGljaCBwb2ludHMgdG8gdGhlIGBvd25lcmAuXG4gKlxuICogQHBhcmFtIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGUgVGVtcGxhdGUgdG8gdGVtcGxhdGl6ZVxuICogQHBhcmFtIHtQb2x5bWVyX1Byb3BlcnR5RWZmZWN0cz19IG93bmVyIE93bmVyIG9mIHRoZSB0ZW1wbGF0ZSBpbnN0YW5jZXM7XG4gKiAgIGFueSBvcHRpb25hbCBjYWxsYmFja3Mgd2lsbCBiZSBib3VuZCB0byB0aGlzIG93bmVyLlxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zIE9wdGlvbnMgZGljdGlvbmFyeSAoc2VlIHN1bW1hcnkgZm9yIGRldGFpbHMpXG4gKiBAcmV0dXJuIHtmdW5jdGlvbihuZXc6VGVtcGxhdGVJbnN0YW5jZUJhc2UsIE9iamVjdD0pfSBHZW5lcmF0ZWQgY2xhc3MgYm91bmRcbiAqICAgdG8gdGhlIHRlbXBsYXRlIHByb3ZpZGVkXG4gKiBAc3VwcHJlc3Mge2ludmFsaWRDYXN0c31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRlbXBsYXRpemUodGVtcGxhdGUsIG93bmVyLCBvcHRpb25zKSB7XG4gIC8vIFVuZGVyIHN0cmljdFRlbXBsYXRlUG9saWN5LCB0aGUgdGVtcGxhdGl6ZWQgZWxlbWVudCBtdXN0IGJlIG93bmVkXG4gIC8vIGJ5IGEgKHRydXN0ZWQpIFBvbHltZXIgZWxlbWVudCwgaW5kaWNhdGVkIGJ5IGV4aXN0ZW5jZSBvZiBfbWV0aG9kSG9zdDtcbiAgLy8gZS5nLiBmb3IgZG9tLWlmICYgZG9tLXJlcGVhdCBpbiBtYWluIGRvY3VtZW50LCBfbWV0aG9kSG9zdCBpcyBudWxsXG4gIGlmIChzdHJpY3RUZW1wbGF0ZVBvbGljeSAmJiAhZmluZE1ldGhvZEhvc3QodGVtcGxhdGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzdHJpY3RUZW1wbGF0ZVBvbGljeTogdGVtcGxhdGUgb3duZXIgbm90IHRydXN0ZWQnKTtcbiAgfVxuICBvcHRpb25zID0gLyoqIEB0eXBlIHshVGVtcGxhdGl6ZU9wdGlvbnN9ICovKG9wdGlvbnMgfHwge30pO1xuICBpZiAodGVtcGxhdGUuX190ZW1wbGF0aXplT3duZXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgPHRlbXBsYXRlPiBjYW4gb25seSBiZSB0ZW1wbGF0aXplZCBvbmNlJyk7XG4gIH1cbiAgdGVtcGxhdGUuX190ZW1wbGF0aXplT3duZXIgPSBvd25lcjtcbiAgY29uc3QgY3RvciA9IG93bmVyID8gb3duZXIuY29uc3RydWN0b3IgOiBUZW1wbGF0ZUluc3RhbmNlQmFzZTtcbiAgbGV0IHRlbXBsYXRlSW5mbyA9IGN0b3IuX3BhcnNlVGVtcGxhdGUodGVtcGxhdGUpO1xuICAvLyBHZXQgbWVtb2l6ZWQgYmFzZSBjbGFzcyBmb3IgdGhlIHByb3RvdHlwaWNhbCB0ZW1wbGF0ZSwgd2hpY2hcbiAgLy8gaW5jbHVkZXMgcHJvcGVydHkgZWZmZWN0cyBmb3IgYmluZGluZyB0ZW1wbGF0ZSAmIGZvcndhcmRpbmdcbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAZXh0ZW5kcyB7VGVtcGxhdGVJbnN0YW5jZUJhc2V9XG4gICAqL1xuICBsZXQgYmFzZUNsYXNzID0gdGVtcGxhdGVJbmZvLnRlbXBsYXRpemVJbnN0YW5jZUNsYXNzO1xuICBpZiAoIWJhc2VDbGFzcykge1xuICAgIGJhc2VDbGFzcyA9IGNyZWF0ZVRlbXBsYXRpemVyQ2xhc3ModGVtcGxhdGUsIHRlbXBsYXRlSW5mbywgb3B0aW9ucyk7XG4gICAgdGVtcGxhdGVJbmZvLnRlbXBsYXRpemVJbnN0YW5jZUNsYXNzID0gYmFzZUNsYXNzO1xuICB9XG4gIC8vIEhvc3QgcHJvcGVydHkgZm9yd2FyZGluZyBtdXN0IGJlIGluc3RhbGxlZCBvbnRvIHRlbXBsYXRlIGluc3RhbmNlXG4gIGFkZFByb3BhZ2F0ZUVmZmVjdHModGVtcGxhdGUsIHRlbXBsYXRlSW5mbywgb3B0aW9ucyk7XG4gIC8vIFN1YmNsYXNzIGJhc2UgY2xhc3MgYW5kIGFkZCByZWZlcmVuY2UgZm9yIHRoaXMgc3BlY2lmaWMgdGVtcGxhdGVcbiAgLyoqIEBwcml2YXRlICovXG4gIGxldCBrbGFzcyA9IGNsYXNzIFRlbXBsYXRlSW5zdGFuY2UgZXh0ZW5kcyBiYXNlQ2xhc3Mge307XG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAga2xhc3MucHJvdG90eXBlLl9tZXRob2RIb3N0ID0gZmluZE1ldGhvZEhvc3QodGVtcGxhdGUpO1xuICAvKiogQG92ZXJyaWRlICovXG4gIGtsYXNzLnByb3RvdHlwZS5fX2RhdGFIb3N0ID0gLyoqIEB0eXBlIHshRGF0YVRlbXBsYXRlfSAqLyAodGVtcGxhdGUpO1xuICAvKiogQG92ZXJyaWRlICovXG4gIGtsYXNzLnByb3RvdHlwZS5fX3RlbXBsYXRpemVPd25lciA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKG93bmVyKTtcbiAgLyoqIEBvdmVycmlkZSAqL1xuICBrbGFzcy5wcm90b3R5cGUuX19ob3N0UHJvcHMgPSB0ZW1wbGF0ZUluZm8uaG9zdFByb3BzO1xuICBrbGFzcyA9IC8qKiBAdHlwZSB7ZnVuY3Rpb24obmV3OlRlbXBsYXRlSW5zdGFuY2VCYXNlKX0gKi8oa2xhc3MpOyAvL2VzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1hc3NpZ25cbiAgcmV0dXJuIGtsYXNzO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHRlbXBsYXRlIFwibW9kZWxcIiBhc3NvY2lhdGVkIHdpdGggYSBnaXZlbiBlbGVtZW50LCB3aGljaFxuICogc2VydmVzIGFzIHRoZSBiaW5kaW5nIHNjb3BlIGZvciB0aGUgdGVtcGxhdGUgaW5zdGFuY2UgdGhlIGVsZW1lbnQgaXNcbiAqIGNvbnRhaW5lZCBpbi4gQSB0ZW1wbGF0ZSBtb2RlbCBpcyBhbiBpbnN0YW5jZSBvZlxuICogYFRlbXBsYXRlSW5zdGFuY2VCYXNlYCwgYW5kIHNob3VsZCBiZSB1c2VkIHRvIG1hbmlwdWxhdGUgZGF0YVxuICogYXNzb2NpYXRlZCB3aXRoIHRoaXMgdGVtcGxhdGUgaW5zdGFuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgIGxldCBtb2RlbCA9IG1vZGVsRm9yRWxlbWVudChlbCk7XG4gKiAgIGlmIChtb2RlbC5pbmRleCA8IDEwKSB7XG4gKiAgICAgbW9kZWwuc2V0KCdpdGVtLmNoZWNrZWQnLCB0cnVlKTtcbiAqICAgfVxuICpcbiAqIEBwYXJhbSB7SFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGUgVGhlIG1vZGVsIHdpbGwgYmUgcmV0dXJuZWQgZm9yXG4gKiAgIGVsZW1lbnRzIHN0YW1wZWQgZnJvbSB0aGlzIHRlbXBsYXRlXG4gKiBAcGFyYW0ge05vZGU9fSBub2RlIE5vZGUgZm9yIHdoaWNoIHRvIHJldHVybiBhIHRlbXBsYXRlIG1vZGVsLlxuICogQHJldHVybiB7VGVtcGxhdGVJbnN0YW5jZUJhc2V9IFRlbXBsYXRlIGluc3RhbmNlIHJlcHJlc2VudGluZyB0aGVcbiAqICAgYmluZGluZyBzY29wZSBmb3IgdGhlIGVsZW1lbnRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1vZGVsRm9yRWxlbWVudCh0ZW1wbGF0ZSwgbm9kZSkge1xuICBsZXQgbW9kZWw7XG4gIHdoaWxlIChub2RlKSB7XG4gICAgLy8gQW4gZWxlbWVudCB3aXRoIGEgX190ZW1wbGF0aXplSW5zdGFuY2UgbWFya3MgdGhlIHRvcCBib3VuZGFyeVxuICAgIC8vIG9mIGEgc2NvcGU7IHdhbGsgdXAgdW50aWwgd2UgZmluZCBvbmUsIGFuZCB0aGVuIGVuc3VyZSB0aGF0XG4gICAgLy8gaXRzIF9fZGF0YUhvc3QgbWF0Y2hlcyBgdGhpc2AsIG1lYW5pbmcgdGhpcyBkb20tcmVwZWF0IHN0YW1wZWQgaXRcbiAgICBpZiAoKG1vZGVsID0gbm9kZS5fX3RlbXBsYXRpemVJbnN0YW5jZSkpIHtcbiAgICAgIC8vIEZvdW5kIGFuIGVsZW1lbnQgc3RhbXBlZCBieSBhbm90aGVyIHRlbXBsYXRlOyBrZWVwIHdhbGtpbmcgdXBcbiAgICAgIC8vIGZyb20gaXRzIF9fZGF0YUhvc3RcbiAgICAgIGlmIChtb2RlbC5fX2RhdGFIb3N0ICE9IHRlbXBsYXRlKSB7XG4gICAgICAgIG5vZGUgPSBtb2RlbC5fX2RhdGFIb3N0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG1vZGVsO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTdGlsbCBpbiBhIHRlbXBsYXRlIHNjb3BlLCBrZWVwIGdvaW5nIHVwIHVudGlsXG4gICAgICAvLyBhIF9fdGVtcGxhdGl6ZUluc3RhbmNlIGlzIGZvdW5kXG4gICAgICBub2RlID0gd3JhcChub2RlKS5wYXJlbnROb2RlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IHsgVGVtcGxhdGVJbnN0YW5jZUJhc2UgfTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5cbi8qKlxuICogQGZpbGVvdmVydmlld1xuICpcbiAqIE1vZHVsZSB0byBoaWRlIGA8ZG9tLWJpbmQ+YCwgYDxkb20taWY+YCwgYW5kIGA8ZG9tLXJlcGVhdD5gIGVsZW1lbnRzXG4gKiBvcHRpbWFsbHkgaW4gU2hhZHlET01cbiAqL1xuXG5pbXBvcnQge2xlZ2FjeU9wdGltaXphdGlvbnMsIHVzZVNoYWRvd30gZnJvbSAnLi9zZXR0aW5ncy5qcyc7XG5cbmxldCBlbGVtZW50c0hpZGRlbiA9IGZhbHNlO1xuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgZWxlbWVudHMgd2lsbCBiZSBoaWRkZW4gZ2xvYmFsbHlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhpZGVFbGVtZW50c0dsb2JhbGx5KCkge1xuICBpZiAobGVnYWN5T3B0aW1pemF0aW9ucyAmJiAhdXNlU2hhZG93KSB7XG4gICAgaWYgKCFlbGVtZW50c0hpZGRlbikge1xuICAgICAgZWxlbWVudHNIaWRkZW4gPSB0cnVlO1xuICAgICAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgc3R5bGUudGV4dENvbnRlbnQgPSAnZG9tLWJpbmQsZG9tLWlmLGRvbS1yZXBlYXR7ZGlzcGxheTpub25lO30nO1xuICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn0iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaW1wb3J0ICcuLi91dGlscy9ib290LmpzJztcblxuaW1wb3J0IHsgUHJvcGVydHlFZmZlY3RzIH0gZnJvbSAnLi4vbWl4aW5zL3Byb3BlcnR5LWVmZmVjdHMuanMnO1xuaW1wb3J0IHsgT3B0aW9uYWxNdXRhYmxlRGF0YSB9IGZyb20gJy4uL21peGlucy9tdXRhYmxlLWRhdGEuanMnO1xuaW1wb3J0IHsgR2VzdHVyZUV2ZW50TGlzdGVuZXJzIH0gZnJvbSAnLi4vbWl4aW5zL2dlc3R1cmUtZXZlbnQtbGlzdGVuZXJzLmpzJztcbmltcG9ydCB7IHN0cmljdFRlbXBsYXRlUG9saWN5IH0gZnJvbSAnLi4vdXRpbHMvc2V0dGluZ3MuanMnO1xuaW1wb3J0IHsgd3JhcCB9IGZyb20gJy4uL3V0aWxzL3dyYXAuanMnO1xuaW1wb3J0IHsgaGlkZUVsZW1lbnRzR2xvYmFsbHkgfSBmcm9tICcuLi91dGlscy9oaWRlLXRlbXBsYXRlLWNvbnRyb2xzLmpzJztcblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIHtIVE1MRWxlbWVudH1cbiAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c31cbiAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX09wdGlvbmFsTXV0YWJsZURhdGF9XG4gKiBAaW1wbGVtZW50cyB7UG9seW1lcl9HZXN0dXJlRXZlbnRMaXN0ZW5lcnN9XG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBkb21CaW5kQmFzZSA9XG4gIEdlc3R1cmVFdmVudExpc3RlbmVycyhcbiAgICBPcHRpb25hbE11dGFibGVEYXRhKFxuICAgICAgUHJvcGVydHlFZmZlY3RzKEhUTUxFbGVtZW50KSkpO1xuXG4vKipcbiAqIEN1c3RvbSBlbGVtZW50IHRvIGFsbG93IHVzaW5nIFBvbHltZXIncyB0ZW1wbGF0ZSBmZWF0dXJlcyAoZGF0YSBiaW5kaW5nLFxuICogZGVjbGFyYXRpdmUgZXZlbnQgbGlzdGVuZXJzLCBldGMuKSBpbiB0aGUgbWFpbiBkb2N1bWVudCB3aXRob3V0IGRlZmluaW5nXG4gKiBhIG5ldyBjdXN0b20gZWxlbWVudC5cbiAqXG4gKiBgPHRlbXBsYXRlPmAgdGFncyB1dGlsaXppbmcgYmluZGluZ3MgbWF5IGJlIHdyYXBwZWQgd2l0aCB0aGUgYDxkb20tYmluZD5gXG4gKiBlbGVtZW50LCB3aGljaCB3aWxsIGltbWVkaWF0ZWx5IHN0YW1wIHRoZSB3cmFwcGVkIHRlbXBsYXRlIGludG8gdGhlIG1haW5cbiAqIGRvY3VtZW50IGFuZCBiaW5kIGVsZW1lbnRzIHRvIHRoZSBgZG9tLWJpbmRgIGVsZW1lbnQgaXRzZWxmIGFzIHRoZVxuICogYmluZGluZyBzY29wZS5cbiAqXG4gKiBAcG9seW1lclxuICogQGN1c3RvbUVsZW1lbnRcbiAqIEBhcHBsaWVzTWl4aW4gUHJvcGVydHlFZmZlY3RzXG4gKiBAYXBwbGllc01peGluIE9wdGlvbmFsTXV0YWJsZURhdGFcbiAqIEBhcHBsaWVzTWl4aW4gR2VzdHVyZUV2ZW50TGlzdGVuZXJzXG4gKiBAZXh0ZW5kcyB7ZG9tQmluZEJhc2V9XG4gKiBAc3VtbWFyeSBDdXN0b20gZWxlbWVudCB0byBhbGxvdyB1c2luZyBQb2x5bWVyJ3MgdGVtcGxhdGUgZmVhdHVyZXMgKGRhdGFcbiAqICAgYmluZGluZywgZGVjbGFyYXRpdmUgZXZlbnQgbGlzdGVuZXJzLCBldGMuKSBpbiB0aGUgbWFpbiBkb2N1bWVudC5cbiAqL1xuZXhwb3J0IGNsYXNzIERvbUJpbmQgZXh0ZW5kcyBkb21CaW5kQmFzZSB7XG5cbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7IHJldHVybiBbJ211dGFibGUtZGF0YSddOyB9XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpZiAoc3RyaWN0VGVtcGxhdGVQb2xpY3kpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgc3RyaWN0VGVtcGxhdGVQb2xpY3k6IGRvbS1iaW5kIG5vdCBhbGxvd2VkYCk7XG4gICAgfVxuICAgIHRoaXMucm9vdCA9IG51bGw7XG4gICAgdGhpcy4kID0gbnVsbDtcbiAgICB0aGlzLl9fY2hpbGRyZW4gPSBudWxsO1xuICB9XG5cbiAgLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIGF0dHJpYnV0ZSB0aGF0IGNoYW5nZWRcbiAgICogQHBhcmFtIHs/c3RyaW5nfSBvbGQgT2xkIGF0dHJpYnV0ZSB2YWx1ZVxuICAgKiBAcGFyYW0gez9zdHJpbmd9IHZhbHVlIE5ldyBhdHRyaWJ1dGUgdmFsdWVcbiAgICogQHBhcmFtIHs/c3RyaW5nfSBuYW1lc3BhY2UgQXR0cmlidXRlIG5hbWVzcGFjZS5cbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGQsIHZhbHVlLCBuYW1lc3BhY2UpIHtcbiAgICAvLyBhc3N1bWVzIG9ubHkgb25lIG9ic2VydmVkIGF0dHJpYnV0ZVxuICAgIHRoaXMubXV0YWJsZURhdGEgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgaWYgKCFoaWRlRWxlbWVudHNHbG9iYWxseSgpKSB7XG4gICAgICB0aGlzLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgfVxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICB0aGlzLl9fcmVtb3ZlQ2hpbGRyZW4oKTtcbiAgfVxuXG4gIF9faW5zZXJ0Q2hpbGRyZW4oKSB7XG4gICAgd3JhcCh3cmFwKHRoaXMpLnBhcmVudE5vZGUpLmluc2VydEJlZm9yZSh0aGlzLnJvb3QsIHRoaXMpO1xuICB9XG5cbiAgX19yZW1vdmVDaGlsZHJlbigpIHtcbiAgICBpZiAodGhpcy5fX2NoaWxkcmVuKSB7XG4gICAgICBmb3IgKGxldCBpPTA7IGk8dGhpcy5fX2NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMucm9vdC5hcHBlbmRDaGlsZCh0aGlzLl9fY2hpbGRyZW5baV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGb3JjZXMgdGhlIGVsZW1lbnQgdG8gcmVuZGVyIGl0cyBjb250ZW50LiBUaGlzIGlzIHR5cGljYWxseSBvbmx5XG4gICAqIG5lY2Vzc2FyeSB0byBjYWxsIGlmIEhUTUxJbXBvcnRzIHdpdGggdGhlIGFzeW5jIGF0dHJpYnV0ZSBhcmUgdXNlZC5cbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIHJlbmRlcigpIHtcbiAgICBsZXQgdGVtcGxhdGU7XG4gICAgaWYgKCF0aGlzLl9fY2hpbGRyZW4pIHtcbiAgICAgIHRlbXBsYXRlID0gLyoqIEB0eXBlIHs/SFRNTFRlbXBsYXRlRWxlbWVudH0gKi8odGVtcGxhdGUgfHwgdGhpcy5xdWVyeVNlbGVjdG9yKCd0ZW1wbGF0ZScpKTtcbiAgICAgIGlmICghdGVtcGxhdGUpIHtcbiAgICAgICAgLy8gV2FpdCB1bnRpbCBjaGlsZExpc3QgY2hhbmdlcyBhbmQgdGVtcGxhdGUgc2hvdWxkIGJlIHRoZXJlIGJ5IHRoZW5cbiAgICAgICAgbGV0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKCkgPT4ge1xuICAgICAgICAgIHRlbXBsYXRlID0gLyoqIEB0eXBlIHtIVE1MVGVtcGxhdGVFbGVtZW50fSAqLyh0aGlzLnF1ZXJ5U2VsZWN0b3IoJ3RlbXBsYXRlJykpO1xuICAgICAgICAgIGlmICh0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdkb20tYmluZCByZXF1aXJlcyBhIDx0ZW1wbGF0ZT4gY2hpbGQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBvYnNlcnZlci5vYnNlcnZlKHRoaXMsIHtjaGlsZExpc3Q6IHRydWV9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5yb290ID0gdGhpcy5fc3RhbXBUZW1wbGF0ZShcbiAgICAgICAgLyoqIEB0eXBlIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gKi8odGVtcGxhdGUpKTtcbiAgICAgIHRoaXMuJCA9IHRoaXMucm9vdC4kO1xuICAgICAgdGhpcy5fX2NoaWxkcmVuID0gW107XG4gICAgICBmb3IgKGxldCBuPXRoaXMucm9vdC5maXJzdENoaWxkOyBuOyBuPW4ubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgdGhpcy5fX2NoaWxkcmVuW3RoaXMuX19jaGlsZHJlbi5sZW5ndGhdID0gbjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2VuYWJsZVByb3BlcnRpZXMoKTtcbiAgICB9XG4gICAgdGhpcy5fX2luc2VydENoaWxkcmVuKCk7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnZG9tLWNoYW5nZScsIHtcbiAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICBjb21wb3NlZDogdHJ1ZVxuICAgIH0pKTtcbiAgfVxuXG59XG5cbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnZG9tLWJpbmQnLCBEb21CaW5kKTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgeyBQb2x5bWVyRWxlbWVudCB9IGZyb20gJy4uLy4uL3BvbHltZXItZWxlbWVudC5qcyc7XG5cbmltcG9ydCB7IFRlbXBsYXRlSW5zdGFuY2VCYXNlLCB0ZW1wbGF0aXplLCBtb2RlbEZvckVsZW1lbnQgfSBmcm9tICcuLi91dGlscy90ZW1wbGF0aXplLmpzJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuaW1wb3J0IHsgRGVib3VuY2VyIH0gZnJvbSAnLi4vdXRpbHMvZGVib3VuY2UuanMnO1xuaW1wb3J0IHsgZW5xdWV1ZURlYm91bmNlciwgZmx1c2ggfSBmcm9tICcuLi91dGlscy9mbHVzaC5qcyc7XG5pbXBvcnQgeyBPcHRpb25hbE11dGFibGVEYXRhIH0gZnJvbSAnLi4vbWl4aW5zL211dGFibGUtZGF0YS5qcyc7XG5pbXBvcnQgeyBtYXRjaGVzLCB0cmFuc2xhdGUgfSBmcm9tICcuLi91dGlscy9wYXRoLmpzJztcbmltcG9ydCB7IHRpbWVPdXQsIG1pY3JvVGFzayB9IGZyb20gJy4uL3V0aWxzL2FzeW5jLmpzJztcbmltcG9ydCB7IHdyYXAgfSBmcm9tICcuLi91dGlscy93cmFwLmpzJztcbmltcG9ydCB7IGhpZGVFbGVtZW50c0dsb2JhbGx5IH0gZnJvbSAnLi4vdXRpbHMvaGlkZS10ZW1wbGF0ZS1jb250cm9scy5qcyc7XG5cbi8qKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAaW1wbGVtZW50cyB7UG9seW1lcl9PcHRpb25hbE11dGFibGVEYXRhfVxuICogQGV4dGVuZHMge1BvbHltZXJFbGVtZW50fVxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgZG9tUmVwZWF0QmFzZSA9IE9wdGlvbmFsTXV0YWJsZURhdGEoUG9seW1lckVsZW1lbnQpO1xuXG4vKipcbiAqIFRoZSBgPGRvbS1yZXBlYXQ+YCBlbGVtZW50IHdpbGwgYXV0b21hdGljYWxseSBzdGFtcCBhbmQgYmluZHMgb25lIGluc3RhbmNlXG4gKiBvZiB0ZW1wbGF0ZSBjb250ZW50IHRvIGVhY2ggb2JqZWN0IGluIGEgdXNlci1wcm92aWRlZCBhcnJheS5cbiAqIGBkb20tcmVwZWF0YCBhY2NlcHRzIGFuIGBpdGVtc2AgcHJvcGVydHksIGFuZCBvbmUgaW5zdGFuY2Ugb2YgdGhlIHRlbXBsYXRlXG4gKiBpcyBzdGFtcGVkIGZvciBlYWNoIGl0ZW0gaW50byB0aGUgRE9NIGF0IHRoZSBsb2NhdGlvbiBvZiB0aGUgYGRvbS1yZXBlYXRgXG4gKiBlbGVtZW50LiAgVGhlIGBpdGVtYCBwcm9wZXJ0eSB3aWxsIGJlIHNldCBvbiBlYWNoIGluc3RhbmNlJ3MgYmluZGluZ1xuICogc2NvcGUsIHRodXMgdGVtcGxhdGVzIHNob3VsZCBiaW5kIHRvIHN1Yi1wcm9wZXJ0aWVzIG9mIGBpdGVtYC5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkb20tbW9kdWxlIGlkPVwiZW1wbG95ZWUtbGlzdFwiPlxuICpcbiAqICAgPHRlbXBsYXRlPlxuICpcbiAqICAgICA8ZGl2PiBFbXBsb3llZSBsaXN0OiA8L2Rpdj5cbiAqICAgICA8ZG9tLXJlcGVhdCBpdGVtcz1cInt7ZW1wbG95ZWVzfX1cIj5cbiAqICAgICAgIDx0ZW1wbGF0ZT5cbiAqICAgICAgICAgPGRpdj5GaXJzdCBuYW1lOiA8c3Bhbj57e2l0ZW0uZmlyc3R9fTwvc3Bhbj48L2Rpdj5cbiAqICAgICAgICAgPGRpdj5MYXN0IG5hbWU6IDxzcGFuPnt7aXRlbS5sYXN0fX08L3NwYW4+PC9kaXY+XG4gKiAgICAgICA8L3RlbXBsYXRlPlxuICogICAgIDwvZG9tLXJlcGVhdD5cbiAqXG4gKiAgIDwvdGVtcGxhdGU+XG4gKlxuICogPC9kb20tbW9kdWxlPlxuICogYGBgXG4gKlxuICogV2l0aCB0aGUgZm9sbG93aW5nIGN1c3RvbSBlbGVtZW50IGRlZmluaXRpb246XG4gKlxuICogYGBganNcbiAqIGNsYXNzIEVtcGxveWVlTGlzdCBleHRlbmRzIFBvbHltZXJFbGVtZW50IHtcbiAqICAgc3RhdGljIGdldCBpcygpIHsgcmV0dXJuICdlbXBsb3llZS1saXN0JzsgfVxuICogICBzdGF0aWMgZ2V0IHByb3BlcnRpZXMoKSB7XG4gKiAgICAgcmV0dXJuIHtcbiAqICAgICAgIGVtcGxveWVlczoge1xuICogICAgICAgICB2YWx1ZSgpIHtcbiAqICAgICAgICAgICByZXR1cm4gW1xuICogICAgICAgICAgICAge2ZpcnN0OiAnQm9iJywgbGFzdDogJ1NtaXRoJ30sXG4gKiAgICAgICAgICAgICB7Zmlyc3Q6ICdTYWxseScsIGxhc3Q6ICdKb2huc29uJ30sXG4gKiAgICAgICAgICAgICAuLi5cbiAqICAgICAgICAgICBdO1xuICogICAgICAgICB9XG4gKiAgICAgICB9XG4gKiAgICAgfTtcbiAqICAgfVxuICogfVxuICogYGBgXG4gKlxuICogTm90aWZpY2F0aW9ucyBmb3IgY2hhbmdlcyB0byBpdGVtcyBzdWItcHJvcGVydGllcyB3aWxsIGJlIGZvcndhcmRlZCB0byB0ZW1wbGF0ZVxuICogaW5zdGFuY2VzLCB3aGljaCB3aWxsIHVwZGF0ZSB2aWEgdGhlIG5vcm1hbCBzdHJ1Y3R1cmVkIGRhdGEgbm90aWZpY2F0aW9uIHN5c3RlbS5cbiAqXG4gKiBNdXRhdGlvbnMgdG8gdGhlIGBpdGVtc2AgYXJyYXkgaXRzZWxmIHNob3VsZCBiZSBtYWRlIHVzaW5nIHRoZSBBcnJheVxuICogbXV0YXRpb24gQVBJJ3Mgb24gdGhlIFByb3BlcnR5RWZmZWN0cyBtaXhpbiAoYHB1c2hgLCBgcG9wYCwgYHNwbGljZWAsXG4gKiBgc2hpZnRgLCBgdW5zaGlmdGApLCBhbmQgdGVtcGxhdGUgaW5zdGFuY2VzIHdpbGwgYmUga2VwdCBpbiBzeW5jIHdpdGggdGhlXG4gKiBkYXRhIGluIHRoZSBhcnJheS5cbiAqXG4gKiBFdmVudHMgY2F1Z2h0IGJ5IGV2ZW50IGhhbmRsZXJzIHdpdGhpbiB0aGUgYGRvbS1yZXBlYXRgIHRlbXBsYXRlIHdpbGwgYmVcbiAqIGRlY29yYXRlZCB3aXRoIGEgYG1vZGVsYCBwcm9wZXJ0eSwgd2hpY2ggcmVwcmVzZW50cyB0aGUgYmluZGluZyBzY29wZSBmb3JcbiAqIGVhY2ggdGVtcGxhdGUgaW5zdGFuY2UuICBUaGUgbW9kZWwgc2hvdWxkIGJlIHVzZWQgdG8gbWFuaXB1bGF0ZSBkYXRhIG9uIHRoZVxuICogaW5zdGFuY2UsIGZvciBleGFtcGxlIGBldmVudC5tb2RlbC5zZXQoJ2l0ZW0uY2hlY2tlZCcsIHRydWUpO2AuXG4gKlxuICogQWx0ZXJuYXRpdmVseSwgdGhlIG1vZGVsIGZvciBhIHRlbXBsYXRlIGluc3RhbmNlIGZvciBhbiBlbGVtZW50IHN0YW1wZWQgYnlcbiAqIGEgYGRvbS1yZXBlYXRgIGNhbiBiZSBvYnRhaW5lZCB1c2luZyB0aGUgYG1vZGVsRm9yRWxlbWVudGAgQVBJIG9uIHRoZVxuICogYGRvbS1yZXBlYXRgIHRoYXQgc3RhbXBlZCBpdCwgZm9yIGV4YW1wbGVcbiAqIGB0aGlzLiQuZG9tUmVwZWF0Lm1vZGVsRm9yRWxlbWVudChldmVudC50YXJnZXQpLnNldCgnaXRlbS5jaGVja2VkJywgdHJ1ZSk7YC5cbiAqIFRoaXMgbWF5IGJlIHVzZWZ1bCBmb3IgbWFuaXB1bGF0aW5nIGluc3RhbmNlIGRhdGEgb2YgZXZlbnQgdGFyZ2V0cyBvYnRhaW5lZFxuICogYnkgZXZlbnQgaGFuZGxlcnMgb24gcGFyZW50cyBvZiB0aGUgYGRvbS1yZXBlYXRgIChldmVudCBkZWxlZ2F0aW9uKS5cbiAqXG4gKiBBIHZpZXctc3BlY2lmaWMgZmlsdGVyL3NvcnQgbWF5IGJlIGFwcGxpZWQgdG8gZWFjaCBgZG9tLXJlcGVhdGAgYnkgc3VwcGx5aW5nIGFcbiAqIGBmaWx0ZXJgIGFuZC9vciBgc29ydGAgcHJvcGVydHkuICBUaGlzIG1heSBiZSBhIHN0cmluZyB0aGF0IG5hbWVzIGEgZnVuY3Rpb24gb25cbiAqIHRoZSBob3N0LCBvciBhIGZ1bmN0aW9uIG1heSBiZSBhc3NpZ25lZCB0byB0aGUgcHJvcGVydHkgZGlyZWN0bHkuICBUaGUgZnVuY3Rpb25zXG4gKiBzaG91bGQgaW1wbGVtZW50ZWQgZm9sbG93aW5nIHRoZSBzdGFuZGFyZCBgQXJyYXlgIGZpbHRlci9zb3J0IEFQSS5cbiAqXG4gKiBJbiBvcmRlciB0byByZS1ydW4gdGhlIGZpbHRlciBvciBzb3J0IGZ1bmN0aW9ucyBiYXNlZCBvbiBjaGFuZ2VzIHRvIHN1Yi1maWVsZHNcbiAqIG9mIGBpdGVtc2AsIHRoZSBgb2JzZXJ2ZWAgcHJvcGVydHkgbWF5IGJlIHNldCBhcyBhIHNwYWNlLXNlcGFyYXRlZCBsaXN0IG9mXG4gKiBgaXRlbWAgc3ViLWZpZWxkcyB0aGF0IHNob3VsZCBjYXVzZSBhIHJlLWZpbHRlci9zb3J0IHdoZW4gbW9kaWZpZWQuICBJZlxuICogdGhlIGZpbHRlciBvciBzb3J0IGZ1bmN0aW9uIGRlcGVuZHMgb24gcHJvcGVydGllcyBub3QgY29udGFpbmVkIGluIGBpdGVtc2AsXG4gKiB0aGUgdXNlciBzaG91bGQgb2JzZXJ2ZSBjaGFuZ2VzIHRvIHRob3NlIHByb3BlcnRpZXMgYW5kIGNhbGwgYHJlbmRlcmAgdG8gdXBkYXRlXG4gKiB0aGUgdmlldyBiYXNlZCBvbiB0aGUgZGVwZW5kZW5jeSBjaGFuZ2UuXG4gKlxuICogRm9yIGV4YW1wbGUsIGZvciBhbiBgZG9tLXJlcGVhdGAgd2l0aCBhIGZpbHRlciBvZiB0aGUgZm9sbG93aW5nOlxuICpcbiAqIGBgYGpzXG4gKiBpc0VuZ2luZWVyKGl0ZW0pIHtcbiAqICAgcmV0dXJuIGl0ZW0udHlwZSA9PSAnZW5naW5lZXInIHx8IGl0ZW0ubWFuYWdlci50eXBlID09ICdlbmdpbmVlcic7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBUaGVuIHRoZSBgb2JzZXJ2ZWAgcHJvcGVydHkgc2hvdWxkIGJlIGNvbmZpZ3VyZWQgYXMgZm9sbG93czpcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZG9tLXJlcGVhdCBpdGVtcz1cInt7ZW1wbG95ZWVzfX1cIiBmaWx0ZXI9XCJpc0VuZ2luZWVyXCIgb2JzZXJ2ZT1cInR5cGUgbWFuYWdlci50eXBlXCI+XG4gKiBgYGBcbiAqXG4gKiBAY3VzdG9tRWxlbWVudFxuICogQHBvbHltZXJcbiAqIEBleHRlbmRzIHtkb21SZXBlYXRCYXNlfVxuICogQGFwcGxpZXNNaXhpbiBPcHRpb25hbE11dGFibGVEYXRhXG4gKiBAc3VtbWFyeSBDdXN0b20gZWxlbWVudCBmb3Igc3RhbXBpbmcgaW5zdGFuY2Ugb2YgYSB0ZW1wbGF0ZSBib3VuZCB0b1xuICogICBpdGVtcyBpbiBhbiBhcnJheS5cbiAqL1xuZXhwb3J0IGNsYXNzIERvbVJlcGVhdCBleHRlbmRzIGRvbVJlcGVhdEJhc2Uge1xuXG4gIC8vIE5vdCBuZWVkZWQgdG8gZmluZCB0ZW1wbGF0ZTsgY2FuIGJlIHJlbW92ZWQgb25jZSB0aGUgYW5hbHl6ZXJcbiAgLy8gY2FuIGZpbmQgdGhlIHRhZyBuYW1lIGZyb20gY3VzdG9tRWxlbWVudHMuZGVmaW5lIGNhbGxcbiAgc3RhdGljIGdldCBpcygpIHsgcmV0dXJuICdkb20tcmVwZWF0JzsgfVxuXG4gIHN0YXRpYyBnZXQgdGVtcGxhdGUoKSB7IHJldHVybiBudWxsOyB9XG5cbiAgc3RhdGljIGdldCBwcm9wZXJ0aWVzKCkge1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbmV2ZXIgRE9NIGlzIGFkZGVkIG9yIHJlbW92ZWQgYnkgdGhpcyB0ZW1wbGF0ZSAoYnlcbiAgICAgKiBkZWZhdWx0LCByZW5kZXJpbmcgb2NjdXJzIGxhemlseSkuICBUbyBmb3JjZSBpbW1lZGlhdGUgcmVuZGVyaW5nLCBjYWxsXG4gICAgICogYHJlbmRlcmAuXG4gICAgICpcbiAgICAgKiBAZXZlbnQgZG9tLWNoYW5nZVxuICAgICAqL1xuICAgIHJldHVybiB7XG5cbiAgICAgIC8qKlxuICAgICAgICogQW4gYXJyYXkgY29udGFpbmluZyBpdGVtcyBkZXRlcm1pbmluZyBob3cgbWFueSBpbnN0YW5jZXMgb2YgdGhlIHRlbXBsYXRlXG4gICAgICAgKiB0byBzdGFtcCBhbmQgdGhhdCB0aGF0IGVhY2ggdGVtcGxhdGUgaW5zdGFuY2Ugc2hvdWxkIGJpbmQgdG8uXG4gICAgICAgKi9cbiAgICAgIGl0ZW1zOiB7XG4gICAgICAgIHR5cGU6IEFycmF5XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSBuYW1lIG9mIHRoZSB2YXJpYWJsZSB0byBhZGQgdG8gdGhlIGJpbmRpbmcgc2NvcGUgZm9yIHRoZSBhcnJheVxuICAgICAgICogZWxlbWVudCBhc3NvY2lhdGVkIHdpdGggYSBnaXZlbiB0ZW1wbGF0ZSBpbnN0YW5jZS5cbiAgICAgICAqL1xuICAgICAgYXM6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICB2YWx1ZTogJ2l0ZW0nXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSBuYW1lIG9mIHRoZSB2YXJpYWJsZSB0byBhZGQgdG8gdGhlIGJpbmRpbmcgc2NvcGUgd2l0aCB0aGUgaW5kZXhcbiAgICAgICAqIG9mIHRoZSBpbnN0YW5jZSBpbiB0aGUgc29ydGVkIGFuZCBmaWx0ZXJlZCBsaXN0IG9mIHJlbmRlcmVkIGl0ZW1zLlxuICAgICAgICogTm90ZSwgZm9yIHRoZSBpbmRleCBpbiB0aGUgYHRoaXMuaXRlbXNgIGFycmF5LCB1c2UgdGhlIHZhbHVlIG9mIHRoZVxuICAgICAgICogYGl0ZW1zSW5kZXhBc2AgcHJvcGVydHkuXG4gICAgICAgKi9cbiAgICAgIGluZGV4QXM6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICB2YWx1ZTogJ2luZGV4J1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbmFtZSBvZiB0aGUgdmFyaWFibGUgdG8gYWRkIHRvIHRoZSBiaW5kaW5nIHNjb3BlIHdpdGggdGhlIGluZGV4XG4gICAgICAgKiBvZiB0aGUgaW5zdGFuY2UgaW4gdGhlIGB0aGlzLml0ZW1zYCBhcnJheS4gTm90ZSwgZm9yIHRoZSBpbmRleCBvZlxuICAgICAgICogdGhpcyBpbnN0YW5jZSBpbiB0aGUgc29ydGVkIGFuZCBmaWx0ZXJlZCBsaXN0IG9mIHJlbmRlcmVkIGl0ZW1zLFxuICAgICAgICogdXNlIHRoZSB2YWx1ZSBvZiB0aGUgYGluZGV4QXNgIHByb3BlcnR5LlxuICAgICAgICovXG4gICAgICBpdGVtc0luZGV4QXM6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICB2YWx1ZTogJ2l0ZW1zSW5kZXgnXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEEgZnVuY3Rpb24gdGhhdCBzaG91bGQgZGV0ZXJtaW5lIHRoZSBzb3J0IG9yZGVyIG9mIHRoZSBpdGVtcy4gIFRoaXNcbiAgICAgICAqIHByb3BlcnR5IHNob3VsZCBlaXRoZXIgYmUgcHJvdmlkZWQgYXMgYSBzdHJpbmcsIGluZGljYXRpbmcgYSBtZXRob2RcbiAgICAgICAqIG5hbWUgb24gdGhlIGVsZW1lbnQncyBob3N0LCBvciBlbHNlIGJlIGFuIGFjdHVhbCBmdW5jdGlvbi4gIFRoZVxuICAgICAgICogZnVuY3Rpb24gc2hvdWxkIG1hdGNoIHRoZSBzb3J0IGZ1bmN0aW9uIHBhc3NlZCB0byBgQXJyYXkuc29ydGAuXG4gICAgICAgKiBVc2luZyBhIHNvcnQgZnVuY3Rpb24gaGFzIG5vIGVmZmVjdCBvbiB0aGUgdW5kZXJseWluZyBgaXRlbXNgIGFycmF5LlxuICAgICAgICovXG4gICAgICBzb3J0OiB7XG4gICAgICAgIHR5cGU6IEZ1bmN0aW9uLFxuICAgICAgICBvYnNlcnZlcjogJ19fc29ydENoYW5nZWQnXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEEgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCB0byBmaWx0ZXIgaXRlbXMgb3V0IG9mIHRoZSB2aWV3LiAgVGhpc1xuICAgICAgICogcHJvcGVydHkgc2hvdWxkIGVpdGhlciBiZSBwcm92aWRlZCBhcyBhIHN0cmluZywgaW5kaWNhdGluZyBhIG1ldGhvZFxuICAgICAgICogbmFtZSBvbiB0aGUgZWxlbWVudCdzIGhvc3QsIG9yIGVsc2UgYmUgYW4gYWN0dWFsIGZ1bmN0aW9uLiAgVGhlXG4gICAgICAgKiBmdW5jdGlvbiBzaG91bGQgbWF0Y2ggdGhlIHNvcnQgZnVuY3Rpb24gcGFzc2VkIHRvIGBBcnJheS5maWx0ZXJgLlxuICAgICAgICogVXNpbmcgYSBmaWx0ZXIgZnVuY3Rpb24gaGFzIG5vIGVmZmVjdCBvbiB0aGUgdW5kZXJseWluZyBgaXRlbXNgIGFycmF5LlxuICAgICAgICovXG4gICAgICBmaWx0ZXI6IHtcbiAgICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICAgIG9ic2VydmVyOiAnX19maWx0ZXJDaGFuZ2VkJ1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBXaGVuIHVzaW5nIGEgYGZpbHRlcmAgb3IgYHNvcnRgIGZ1bmN0aW9uLCB0aGUgYG9ic2VydmVgIHByb3BlcnR5XG4gICAgICAgKiBzaG91bGQgYmUgc2V0IHRvIGEgc3BhY2Utc2VwYXJhdGVkIGxpc3Qgb2YgdGhlIG5hbWVzIG9mIGl0ZW1cbiAgICAgICAqIHN1Yi1maWVsZHMgdGhhdCBzaG91bGQgdHJpZ2dlciBhIHJlLXNvcnQgb3IgcmUtZmlsdGVyIHdoZW4gY2hhbmdlZC5cbiAgICAgICAqIFRoZXNlIHNob3VsZCBnZW5lcmFsbHkgYmUgZmllbGRzIG9mIGBpdGVtYCB0aGF0IHRoZSBzb3J0IG9yIGZpbHRlclxuICAgICAgICogZnVuY3Rpb24gZGVwZW5kcyBvbi5cbiAgICAgICAqL1xuICAgICAgb2JzZXJ2ZToge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIG9ic2VydmVyOiAnX19vYnNlcnZlQ2hhbmdlZCdcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogV2hlbiB1c2luZyBhIGBmaWx0ZXJgIG9yIGBzb3J0YCBmdW5jdGlvbiwgdGhlIGBkZWxheWAgcHJvcGVydHlcbiAgICAgICAqIGRldGVybWluZXMgYSBkZWJvdW5jZSB0aW1lIGluIG1zIGFmdGVyIGEgY2hhbmdlIHRvIG9ic2VydmVkIGl0ZW1cbiAgICAgICAqIHByb3BlcnRpZXMgdGhhdCBtdXN0IHBhc3MgYmVmb3JlIHRoZSBmaWx0ZXIgb3Igc29ydCBpcyByZS1ydW4uXG4gICAgICAgKiBUaGlzIGlzIHVzZWZ1bCBpbiByYXRlLWxpbWl0aW5nIHNodWZmbGluZyBvZiB0aGUgdmlldyB3aGVuXG4gICAgICAgKiBpdGVtIGNoYW5nZXMgbWF5IGJlIGZyZXF1ZW50LlxuICAgICAgICovXG4gICAgICBkZWxheTogTnVtYmVyLFxuXG4gICAgICAvKipcbiAgICAgICAqIENvdW50IG9mIGN1cnJlbnRseSByZW5kZXJlZCBpdGVtcyBhZnRlciBgZmlsdGVyYCAoaWYgYW55KSBoYXMgYmVlbiBhcHBsaWVkLlxuICAgICAgICogSWYgXCJjaHVua2luZyBtb2RlXCIgaXMgZW5hYmxlZCwgYHJlbmRlcmVkSXRlbUNvdW50YCBpcyB1cGRhdGVkIGVhY2ggdGltZSBhXG4gICAgICAgKiBzZXQgb2YgdGVtcGxhdGUgaW5zdGFuY2VzIGlzIHJlbmRlcmVkLlxuICAgICAgICpcbiAgICAgICAqL1xuICAgICAgcmVuZGVyZWRJdGVtQ291bnQ6IHtcbiAgICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgICBub3RpZnk6IHRydWUsXG4gICAgICAgIHJlYWRPbmx5OiB0cnVlXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIERlZmluZXMgYW4gaW5pdGlhbCBjb3VudCBvZiB0ZW1wbGF0ZSBpbnN0YW5jZXMgdG8gcmVuZGVyIGFmdGVyIHNldHRpbmdcbiAgICAgICAqIHRoZSBgaXRlbXNgIGFycmF5LCBiZWZvcmUgdGhlIG5leHQgcGFpbnQsIGFuZCBwdXRzIHRoZSBgZG9tLXJlcGVhdGBcbiAgICAgICAqIGludG8gXCJjaHVua2luZyBtb2RlXCIuICBUaGUgcmVtYWluaW5nIGl0ZW1zIHdpbGwgYmUgY3JlYXRlZCBhbmQgcmVuZGVyZWRcbiAgICAgICAqIGluY3JlbWVudGFsbHkgYXQgZWFjaCBhbmltYXRpb24gZnJhbWUgdGhlcm9mIHVudGlsIGFsbCBpbnN0YW5jZXMgaGF2ZVxuICAgICAgICogYmVlbiByZW5kZXJlZC5cbiAgICAgICAqL1xuICAgICAgaW5pdGlhbENvdW50OiB7XG4gICAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgICAgb2JzZXJ2ZXI6ICdfX2luaXRpYWxpemVDaHVua2luZydcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogV2hlbiBgaW5pdGlhbENvdW50YCBpcyB1c2VkLCB0aGlzIHByb3BlcnR5IGRlZmluZXMgYSBmcmFtZSByYXRlIChpblxuICAgICAgICogZnBzKSB0byB0YXJnZXQgYnkgdGhyb3R0bGluZyB0aGUgbnVtYmVyIG9mIGluc3RhbmNlcyByZW5kZXJlZCBlYWNoXG4gICAgICAgKiBmcmFtZSB0byBub3QgZXhjZWVkIHRoZSBidWRnZXQgZm9yIHRoZSB0YXJnZXQgZnJhbWUgcmF0ZS4gIFRoZVxuICAgICAgICogZnJhbWVyYXRlIGlzIGVmZmVjdGl2ZWx5IHRoZSBudW1iZXIgb2YgYHJlcXVlc3RBbmltYXRpb25GcmFtZWBzIHRoYXRcbiAgICAgICAqIGl0IHRyaWVzIHRvIGFsbG93IHRvIGFjdHVhbGx5IGZpcmUgaW4gYSBnaXZlbiBzZWNvbmQuIEl0IGRvZXMgdGhpc1xuICAgICAgICogYnkgbWVhc3VyaW5nIHRoZSB0aW1lIGJldHdlZW4gYHJBRmBzIGFuZCBjb250aW51b3VzbHkgYWRqdXN0aW5nIHRoZVxuICAgICAgICogbnVtYmVyIG9mIGl0ZW1zIGNyZWF0ZWQgZWFjaCBgckFGYCB0byBtYWludGFpbiB0aGUgdGFyZ2V0IGZyYW1lcmF0ZS5cbiAgICAgICAqIFNldHRpbmcgdGhpcyB0byBhIGhpZ2hlciBudW1iZXIgYWxsb3dzIGxvd2VyIGxhdGVuY3kgYW5kIGhpZ2hlclxuICAgICAgICogdGhyb3VnaHB1dCBmb3IgZXZlbnQgaGFuZGxlcnMgYW5kIG90aGVyIHRhc2tzLCBidXQgcmVzdWx0cyBpbiBhXG4gICAgICAgKiBsb25nZXIgdGltZSBmb3IgdGhlIHJlbWFpbmluZyBpdGVtcyB0byBjb21wbGV0ZSByZW5kZXJpbmcuXG4gICAgICAgKi9cbiAgICAgIHRhcmdldEZyYW1lcmF0ZToge1xuICAgICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICAgIHZhbHVlOiAyMFxuICAgICAgfSxcblxuICAgICAgX3RhcmdldEZyYW1lVGltZToge1xuICAgICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICAgIGNvbXB1dGVkOiAnX19jb21wdXRlRnJhbWVUaW1lKHRhcmdldEZyYW1lcmF0ZSknXG4gICAgICB9XG5cbiAgICB9O1xuXG4gIH1cblxuICBzdGF0aWMgZ2V0IG9ic2VydmVycygpIHtcbiAgICByZXR1cm4gWyAnX19pdGVtc0NoYW5nZWQoaXRlbXMuKiknIF07XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX19pbnN0YW5jZXMgPSBbXTtcbiAgICB0aGlzLl9fbGltaXQgPSBJbmZpbml0eTtcbiAgICB0aGlzLl9fcG9vbCA9IFtdO1xuICAgIHRoaXMuX19yZW5kZXJEZWJvdW5jZXIgPSBudWxsO1xuICAgIHRoaXMuX19pdGVtc0lkeFRvSW5zdElkeCA9IHt9O1xuICAgIHRoaXMuX19jaHVua0NvdW50ID0gbnVsbDtcbiAgICB0aGlzLl9fbGFzdENodW5rVGltZSA9IG51bGw7XG4gICAgdGhpcy5fX3NvcnRGbiA9IG51bGw7XG4gICAgdGhpcy5fX2ZpbHRlckZuID0gbnVsbDtcbiAgICB0aGlzLl9fb2JzZXJ2ZVBhdGhzID0gbnVsbDtcbiAgICAvKiogQHR5cGUgez9mdW5jdGlvbihuZXc6VGVtcGxhdGVJbnN0YW5jZUJhc2UsIE9iamVjdD0pfSAqL1xuICAgIHRoaXMuX19jdG9yID0gbnVsbDtcbiAgICB0aGlzLl9faXNEZXRhY2hlZCA9IHRydWU7XG4gICAgdGhpcy50ZW1wbGF0ZSA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHRoaXMuX19pc0RldGFjaGVkID0gdHJ1ZTtcbiAgICBmb3IgKGxldCBpPTA7IGk8dGhpcy5fX2luc3RhbmNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5fX2RldGFjaEluc3RhbmNlKGkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgaWYgKCFoaWRlRWxlbWVudHNHbG9iYWxseSgpKSB7XG4gICAgICB0aGlzLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgfVxuICAgIC8vIG9ubHkgcGVyZm9ybSBhdHRhY2htZW50IGlmIHRoZSBlbGVtZW50IHdhcyBwcmV2aW91c2x5IGRldGFjaGVkLlxuICAgIGlmICh0aGlzLl9faXNEZXRhY2hlZCkge1xuICAgICAgdGhpcy5fX2lzRGV0YWNoZWQgPSBmYWxzZTtcbiAgICAgIGxldCB3cmFwcGVkUGFyZW50ID0gd3JhcCh3cmFwKHRoaXMpLnBhcmVudE5vZGUpO1xuICAgICAgZm9yIChsZXQgaT0wOyBpPHRoaXMuX19pbnN0YW5jZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5fX2F0dGFjaEluc3RhbmNlKGksIHdyYXBwZWRQYXJlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9fZW5zdXJlVGVtcGxhdGl6ZWQoKSB7XG4gICAgLy8gVGVtcGxhdGl6aW5nIChnZW5lcmF0aW5nIHRoZSBpbnN0YW5jZSBjb25zdHJ1Y3RvcikgbmVlZHMgdG8gd2FpdFxuICAgIC8vIHVudGlsIHJlYWR5LCBzaW5jZSB3b24ndCBoYXZlIGl0cyB0ZW1wbGF0ZSBjb250ZW50IGhhbmRlZCBiYWNrIHRvXG4gICAgLy8gaXQgdW50aWwgdGhlblxuICAgIGlmICghdGhpcy5fX2N0b3IpIHtcbiAgICAgIGxldCB0ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGUgPSAvKiogQHR5cGUge0hUTUxUZW1wbGF0ZUVsZW1lbnR9ICovKHRoaXMucXVlcnlTZWxlY3RvcigndGVtcGxhdGUnKSk7XG4gICAgICBpZiAoIXRlbXBsYXRlKSB7XG4gICAgICAgIC8vIC8vIFdhaXQgdW50aWwgY2hpbGRMaXN0IGNoYW5nZXMgYW5kIHRlbXBsYXRlIHNob3VsZCBiZSB0aGVyZSBieSB0aGVuXG4gICAgICAgIGxldCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHtcbiAgICAgICAgICBpZiAodGhpcy5xdWVyeVNlbGVjdG9yKCd0ZW1wbGF0ZScpKSB7XG4gICAgICAgICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICB0aGlzLl9fcmVuZGVyKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZG9tLXJlcGVhdCByZXF1aXJlcyBhIDx0ZW1wbGF0ZT4gY2hpbGQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBvYnNlcnZlci5vYnNlcnZlKHRoaXMsIHtjaGlsZExpc3Q6IHRydWV9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gVGVtcGxhdGUgaW5zdGFuY2UgcHJvcHMgdGhhdCBzaG91bGQgYmUgZXhjbHVkZWQgZnJvbSBmb3J3YXJkaW5nXG4gICAgICBsZXQgaW5zdGFuY2VQcm9wcyA9IHt9O1xuICAgICAgaW5zdGFuY2VQcm9wc1t0aGlzLmFzXSA9IHRydWU7XG4gICAgICBpbnN0YW5jZVByb3BzW3RoaXMuaW5kZXhBc10gPSB0cnVlO1xuICAgICAgaW5zdGFuY2VQcm9wc1t0aGlzLml0ZW1zSW5kZXhBc10gPSB0cnVlO1xuICAgICAgdGhpcy5fX2N0b3IgPSB0ZW1wbGF0aXplKHRlbXBsYXRlLCB0aGlzLCB7XG4gICAgICAgIG11dGFibGVEYXRhOiB0aGlzLm11dGFibGVEYXRhLFxuICAgICAgICBwYXJlbnRNb2RlbDogdHJ1ZSxcbiAgICAgICAgaW5zdGFuY2VQcm9wczogaW5zdGFuY2VQcm9wcyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0aGlzIHtEb21SZXBlYXR9XG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIFByb3BlcnR5IHRvIHNldFxuICAgICAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHNldCBwcm9wZXJ0eSB0b1xuICAgICAgICAgKi9cbiAgICAgICAgZm9yd2FyZEhvc3RQcm9wOiBmdW5jdGlvbihwcm9wLCB2YWx1ZSkge1xuICAgICAgICAgIGxldCBpJCA9IHRoaXMuX19pbnN0YW5jZXM7XG4gICAgICAgICAgZm9yIChsZXQgaT0wLCBpbnN0OyAoaTxpJC5sZW5ndGgpICYmIChpbnN0PWkkW2ldKTsgaSsrKSB7XG4gICAgICAgICAgICBpbnN0LmZvcndhcmRIb3N0UHJvcChwcm9wLCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQHRoaXMge0RvbVJlcGVhdH1cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGluc3QgSW5zdGFuY2UgdG8gbm90aWZ5XG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIFByb3BlcnR5IHRvIG5vdGlmeVxuICAgICAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIG5vdGlmeVxuICAgICAgICAgKi9cbiAgICAgICAgbm90aWZ5SW5zdGFuY2VQcm9wOiBmdW5jdGlvbihpbnN0LCBwcm9wLCB2YWx1ZSkge1xuICAgICAgICAgIGlmIChtYXRjaGVzKHRoaXMuYXMsIHByb3ApKSB7XG4gICAgICAgICAgICBsZXQgaWR4ID0gaW5zdFt0aGlzLml0ZW1zSW5kZXhBc107XG4gICAgICAgICAgICBpZiAocHJvcCA9PSB0aGlzLmFzKSB7XG4gICAgICAgICAgICAgIHRoaXMuaXRlbXNbaWR4XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHBhdGggPSB0cmFuc2xhdGUodGhpcy5hcywgYCR7SlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnaXRlbXMnLCB0aGlzKX0uJHtpZHh9YCwgcHJvcCk7XG4gICAgICAgICAgICB0aGlzLm5vdGlmeVBhdGgocGF0aCwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgX19nZXRNZXRob2RIb3N0KCkge1xuICAgIC8vIFRlY2huaWNhbGx5IHRoaXMgc2hvdWxkIGJlIHRoZSBvd25lciBvZiB0aGUgb3V0ZXJtb3N0IHRlbXBsYXRlLlxuICAgIC8vIEluIHNoYWRvdyBkb20sIHRoaXMgaXMgYWx3YXlzIGdldFJvb3ROb2RlKCkuaG9zdCwgYnV0IHdlIGNhblxuICAgIC8vIGFwcHJveGltYXRlIHRoaXMgdmlhIGNvb3BlcmF0aW9uIHdpdGggb3VyIGRhdGFIb3N0IGFsd2F5cyBzZXR0aW5nXG4gICAgLy8gYF9tZXRob2RIb3N0YCBhcyBsb25nIGFzIHRoZXJlIHdlcmUgYmluZGluZ3MgKG9yIGlkJ3MpIG9uIHRoaXNcbiAgICAvLyBpbnN0YW5jZSBjYXVzaW5nIGl0IHRvIGdldCBhIGRhdGFIb3N0LlxuICAgIHJldHVybiB0aGlzLl9fZGF0YUhvc3QuX21ldGhvZEhvc3QgfHwgdGhpcy5fX2RhdGFIb3N0O1xuICB9XG5cbiAgX19mdW5jdGlvbkZyb21Qcm9wZXJ0eVZhbHVlKGZ1bmN0aW9uT3JNZXRob2ROYW1lKSB7XG4gICAgaWYgKHR5cGVvZiBmdW5jdGlvbk9yTWV0aG9kTmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGxldCBtZXRob2ROYW1lID0gZnVuY3Rpb25Pck1ldGhvZE5hbWU7XG4gICAgICBsZXQgb2JqID0gdGhpcy5fX2dldE1ldGhvZEhvc3QoKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHsgcmV0dXJuIG9ialttZXRob2ROYW1lXS5hcHBseShvYmosIGFyZ3VtZW50cyk7IH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uT3JNZXRob2ROYW1lO1xuICB9XG5cbiAgX19zb3J0Q2hhbmdlZChzb3J0KSB7XG4gICAgdGhpcy5fX3NvcnRGbiA9IHRoaXMuX19mdW5jdGlvbkZyb21Qcm9wZXJ0eVZhbHVlKHNvcnQpO1xuICAgIGlmICh0aGlzLml0ZW1zKSB7IHRoaXMuX19kZWJvdW5jZVJlbmRlcih0aGlzLl9fcmVuZGVyKTsgfVxuICB9XG5cbiAgX19maWx0ZXJDaGFuZ2VkKGZpbHRlcikge1xuICAgIHRoaXMuX19maWx0ZXJGbiA9IHRoaXMuX19mdW5jdGlvbkZyb21Qcm9wZXJ0eVZhbHVlKGZpbHRlcik7XG4gICAgaWYgKHRoaXMuaXRlbXMpIHsgdGhpcy5fX2RlYm91bmNlUmVuZGVyKHRoaXMuX19yZW5kZXIpOyB9XG4gIH1cblxuICBfX2NvbXB1dGVGcmFtZVRpbWUocmF0ZSkge1xuICAgIHJldHVybiBNYXRoLmNlaWwoMTAwMC9yYXRlKTtcbiAgfVxuXG4gIF9faW5pdGlhbGl6ZUNodW5raW5nKCkge1xuICAgIGlmICh0aGlzLmluaXRpYWxDb3VudCkge1xuICAgICAgdGhpcy5fX2xpbWl0ID0gdGhpcy5pbml0aWFsQ291bnQ7XG4gICAgICB0aGlzLl9fY2h1bmtDb3VudCA9IHRoaXMuaW5pdGlhbENvdW50O1xuICAgICAgdGhpcy5fX2xhc3RDaHVua1RpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICB9XG4gIH1cblxuICBfX3RyeVJlbmRlckNodW5rKCkge1xuICAgIC8vIERlYm91bmNlZCBzbyB0aGF0IG11bHRpcGxlIGNhbGxzIHRocm91Z2ggYF9yZW5kZXJgIGJldHdlZW4gYW5pbWF0aW9uXG4gICAgLy8gZnJhbWVzIG9ubHkgcXVldWUgb25lIG5ldyByQUYgKGUuZy4gYXJyYXkgbXV0YXRpb24gJiBjaHVua2VkIHJlbmRlcilcbiAgICBpZiAodGhpcy5pdGVtcyAmJiB0aGlzLl9fbGltaXQgPCB0aGlzLml0ZW1zLmxlbmd0aCkge1xuICAgICAgdGhpcy5fX2RlYm91bmNlUmVuZGVyKHRoaXMuX19yZXF1ZXN0UmVuZGVyQ2h1bmspO1xuICAgIH1cbiAgfVxuXG4gIF9fcmVxdWVzdFJlbmRlckNodW5rKCkge1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKT0+dGhpcy5fX3JlbmRlckNodW5rKCkpO1xuICB9XG5cbiAgX19yZW5kZXJDaHVuaygpIHtcbiAgICAvLyBTaW1wbGUgYXV0byBjaHVua1NpemUgdGhyb3R0bGluZyBhbGdvcml0aG0gYmFzZWQgb24gZmVlZGJhY2sgbG9vcDpcbiAgICAvLyBtZWFzdXJlIGFjdHVhbCB0aW1lIGJldHdlZW4gZnJhbWVzIGFuZCBzY2FsZSBjaHVuayBjb3VudCBieSByYXRpb1xuICAgIC8vIG9mIHRhcmdldC9hY3R1YWwgZnJhbWUgdGltZVxuICAgIGxldCBjdXJyQ2h1bmtUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgbGV0IHJhdGlvID0gdGhpcy5fdGFyZ2V0RnJhbWVUaW1lIC8gKGN1cnJDaHVua1RpbWUgLSB0aGlzLl9fbGFzdENodW5rVGltZSk7XG4gICAgdGhpcy5fX2NodW5rQ291bnQgPSBNYXRoLnJvdW5kKHRoaXMuX19jaHVua0NvdW50ICogcmF0aW8pIHx8IDE7XG4gICAgdGhpcy5fX2xpbWl0ICs9IHRoaXMuX19jaHVua0NvdW50O1xuICAgIHRoaXMuX19sYXN0Q2h1bmtUaW1lID0gY3VyckNodW5rVGltZTtcbiAgICB0aGlzLl9fZGVib3VuY2VSZW5kZXIodGhpcy5fX3JlbmRlcik7XG4gIH1cblxuICBfX29ic2VydmVDaGFuZ2VkKCkge1xuICAgIHRoaXMuX19vYnNlcnZlUGF0aHMgPSB0aGlzLm9ic2VydmUgJiZcbiAgICAgIHRoaXMub2JzZXJ2ZS5yZXBsYWNlKCcuKicsICcuJykuc3BsaXQoJyAnKTtcbiAgfVxuXG4gIF9faXRlbXNDaGFuZ2VkKGNoYW5nZSkge1xuICAgIGlmICh0aGlzLml0ZW1zICYmICFBcnJheS5pc0FycmF5KHRoaXMuaXRlbXMpKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ2RvbS1yZXBlYXQgZXhwZWN0ZWQgYXJyYXkgZm9yIGBpdGVtc2AsIGZvdW5kJywgdGhpcy5pdGVtcyk7XG4gICAgfVxuICAgIC8vIElmIHBhdGggd2FzIHRvIGFuIGl0ZW0gKGUuZy4gJ2l0ZW1zLjMnIG9yICdpdGVtcy4zLmZvbycpLCBmb3J3YXJkIHRoZVxuICAgIC8vIHBhdGggdG8gdGhhdCBpbnN0YW5jZSBzeW5jaHJvbm91c2x5IChyZXR1cm5zIGZhbHNlIGZvciBub24taXRlbSBwYXRocylcbiAgICBpZiAoIXRoaXMuX19oYW5kbGVJdGVtUGF0aChjaGFuZ2UucGF0aCwgY2hhbmdlLnZhbHVlKSkge1xuICAgICAgLy8gT3RoZXJ3aXNlLCB0aGUgYXJyYXkgd2FzIHJlc2V0ICgnaXRlbXMnKSBvciBzcGxpY2VkICgnaXRlbXMuc3BsaWNlcycpLFxuICAgICAgLy8gc28gcXVldWUgYSBmdWxsIHJlZnJlc2hcbiAgICAgIHRoaXMuX19pbml0aWFsaXplQ2h1bmtpbmcoKTtcbiAgICAgIHRoaXMuX19kZWJvdW5jZVJlbmRlcih0aGlzLl9fcmVuZGVyKTtcbiAgICB9XG4gIH1cblxuICBfX2hhbmRsZU9ic2VydmVkUGF0aHMocGF0aCkge1xuICAgIC8vIEhhbmRsZSBjYXNlcyB3aGVyZSBwYXRoIGNoYW5nZXMgc2hvdWxkIGNhdXNlIGEgcmUtc29ydC9maWx0ZXJcbiAgICBpZiAodGhpcy5fX3NvcnRGbiB8fCB0aGlzLl9fZmlsdGVyRm4pIHtcbiAgICAgIGlmICghcGF0aCkge1xuICAgICAgICAvLyBBbHdheXMgcmUtcmVuZGVyIGlmIHRoZSBpdGVtIGl0c2VsZiBjaGFuZ2VkXG4gICAgICAgIHRoaXMuX19kZWJvdW5jZVJlbmRlcih0aGlzLl9fcmVuZGVyLCB0aGlzLmRlbGF5KTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fX29ic2VydmVQYXRocykge1xuICAgICAgICAvLyBPdGhlcndpc2UsIHJlLXJlbmRlciBpZiB0aGUgcGF0aCBjaGFuZ2VkIG1hdGNoZXMgYW4gb2JzZXJ2ZWQgcGF0aFxuICAgICAgICBsZXQgcGF0aHMgPSB0aGlzLl9fb2JzZXJ2ZVBhdGhzO1xuICAgICAgICBmb3IgKGxldCBpPTA7IGk8cGF0aHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAocGF0aC5pbmRleE9mKHBhdGhzW2ldKSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5fX2RlYm91bmNlUmVuZGVyKHRoaXMuX19yZW5kZXIsIHRoaXMuZGVsYXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHRoaXM6RG9tUmVwZWF0KX0gZm4gRnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gZGVsYXkgRGVsYXkgaW4gbXMgdG8gZGVib3VuY2UgYnkuXG4gICAqL1xuICBfX2RlYm91bmNlUmVuZGVyKGZuLCBkZWxheSA9IDApIHtcbiAgICB0aGlzLl9fcmVuZGVyRGVib3VuY2VyID0gRGVib3VuY2VyLmRlYm91bmNlKFxuICAgICAgICAgIHRoaXMuX19yZW5kZXJEZWJvdW5jZXJcbiAgICAgICAgLCBkZWxheSA+IDAgPyB0aW1lT3V0LmFmdGVyKGRlbGF5KSA6IG1pY3JvVGFza1xuICAgICAgICAsIGZuLmJpbmQodGhpcykpO1xuICAgIGVucXVldWVEZWJvdW5jZXIodGhpcy5fX3JlbmRlckRlYm91bmNlcik7XG4gIH1cblxuICAvKipcbiAgICogRm9yY2VzIHRoZSBlbGVtZW50IHRvIHJlbmRlciBpdHMgY29udGVudC4gTm9ybWFsbHkgcmVuZGVyaW5nIGlzXG4gICAqIGFzeW5jaHJvbm91cyB0byBhIHByb3Zva2luZyBjaGFuZ2UuIFRoaXMgaXMgZG9uZSBmb3IgZWZmaWNpZW5jeSBzb1xuICAgKiB0aGF0IG11bHRpcGxlIGNoYW5nZXMgdHJpZ2dlciBvbmx5IGEgc2luZ2xlIHJlbmRlci4gVGhlIHJlbmRlciBtZXRob2RcbiAgICogc2hvdWxkIGJlIGNhbGxlZCBpZiwgZm9yIGV4YW1wbGUsIHRlbXBsYXRlIHJlbmRlcmluZyBpcyByZXF1aXJlZCB0b1xuICAgKiB2YWxpZGF0ZSBhcHBsaWNhdGlvbiBzdGF0ZS5cbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIHJlbmRlcigpIHtcbiAgICAvLyBRdWV1ZSB0aGlzIHJlcGVhdGVyLCB0aGVuIGZsdXNoIGFsbCBpbiBvcmRlclxuICAgIHRoaXMuX19kZWJvdW5jZVJlbmRlcih0aGlzLl9fcmVuZGVyKTtcbiAgICBmbHVzaCgpO1xuICB9XG5cbiAgX19yZW5kZXIoKSB7XG4gICAgaWYgKCF0aGlzLl9fZW5zdXJlVGVtcGxhdGl6ZWQoKSkge1xuICAgICAgLy8gTm8gdGVtcGxhdGUgZm91bmQgeWV0XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX19hcHBseUZ1bGxSZWZyZXNoKCk7XG4gICAgLy8gUmVzZXQgdGhlIHBvb2xcbiAgICAvLyBUT0RPKGtzY2hhYWYpOiBSZXVzZSBwb29sIGFjcm9zcyB0dXJucyBhbmQgbmVzdGVkIHRlbXBsYXRlc1xuICAgIC8vIE5vdyB0aGF0IG9iamVjdHMvYXJyYXlzIGFyZSByZS1ldmFsdWF0ZWQgd2hlbiBzZXQsIHdlIGNhbiBzYWZlbHlcbiAgICAvLyByZXVzZSBwb29sZWQgaW5zdGFuY2VzIGFjcm9zcyB0dXJucywgaG93ZXZlciB3ZSBzdGlsbCBuZWVkIHRvIGRlY2lkZVxuICAgIC8vIHNlbWFudGljcyByZWdhcmRpbmcgaG93IGxvbmcgdG8gaG9sZCwgaG93IG1hbnkgdG8gaG9sZCwgZXRjLlxuICAgIHRoaXMuX19wb29sLmxlbmd0aCA9IDA7XG4gICAgLy8gU2V0IHJlbmRlcmVkIGl0ZW0gY291bnRcbiAgICB0aGlzLl9zZXRSZW5kZXJlZEl0ZW1Db3VudCh0aGlzLl9faW5zdGFuY2VzLmxlbmd0aCk7XG4gICAgLy8gTm90aWZ5IHVzZXJzXG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnZG9tLWNoYW5nZScsIHtcbiAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICBjb21wb3NlZDogdHJ1ZVxuICAgIH0pKTtcbiAgICAvLyBDaGVjayB0byBzZWUgaWYgd2UgbmVlZCB0byByZW5kZXIgbW9yZSBpdGVtc1xuICAgIHRoaXMuX190cnlSZW5kZXJDaHVuaygpO1xuICB9XG5cbiAgX19hcHBseUZ1bGxSZWZyZXNoKCkge1xuICAgIGxldCBpdGVtcyA9IHRoaXMuaXRlbXMgfHwgW107XG4gICAgbGV0IGlzbnRJZHhUb0l0ZW1zSWR4ID0gbmV3IEFycmF5KGl0ZW1zLmxlbmd0aCk7XG4gICAgZm9yIChsZXQgaT0wOyBpPGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpc250SWR4VG9JdGVtc0lkeFtpXSA9IGk7XG4gICAgfVxuICAgIC8vIEFwcGx5IHVzZXIgZmlsdGVyXG4gICAgaWYgKHRoaXMuX19maWx0ZXJGbikge1xuICAgICAgaXNudElkeFRvSXRlbXNJZHggPSBpc250SWR4VG9JdGVtc0lkeC5maWx0ZXIoKGksIGlkeCwgYXJyYXkpID0+XG4gICAgICAgIHRoaXMuX19maWx0ZXJGbihpdGVtc1tpXSwgaWR4LCBhcnJheSkpO1xuICAgIH1cbiAgICAvLyBBcHBseSB1c2VyIHNvcnRcbiAgICBpZiAodGhpcy5fX3NvcnRGbikge1xuICAgICAgaXNudElkeFRvSXRlbXNJZHguc29ydCgoYSwgYikgPT4gdGhpcy5fX3NvcnRGbihpdGVtc1thXSwgaXRlbXNbYl0pKTtcbiAgICB9XG4gICAgLy8gaXRlbXMtPmluc3QgbWFwIGtlcHQgZm9yIGl0ZW0gcGF0aCBmb3J3YXJkaW5nXG4gICAgY29uc3QgaXRlbXNJZHhUb0luc3RJZHggPSB0aGlzLl9faXRlbXNJZHhUb0luc3RJZHggPSB7fTtcbiAgICBsZXQgaW5zdElkeCA9IDA7XG4gICAgLy8gR2VuZXJhdGUgaW5zdGFuY2VzIGFuZCBhc3NpZ24gaXRlbXNcbiAgICBjb25zdCBsaW1pdCA9IE1hdGgubWluKGlzbnRJZHhUb0l0ZW1zSWR4Lmxlbmd0aCwgdGhpcy5fX2xpbWl0KTtcbiAgICBmb3IgKDsgaW5zdElkeDxsaW1pdDsgaW5zdElkeCsrKSB7XG4gICAgICBsZXQgaW5zdCA9IHRoaXMuX19pbnN0YW5jZXNbaW5zdElkeF07XG4gICAgICBsZXQgaXRlbUlkeCA9IGlzbnRJZHhUb0l0ZW1zSWR4W2luc3RJZHhdO1xuICAgICAgbGV0IGl0ZW0gPSBpdGVtc1tpdGVtSWR4XTtcbiAgICAgIGl0ZW1zSWR4VG9JbnN0SWR4W2l0ZW1JZHhdID0gaW5zdElkeDtcbiAgICAgIGlmIChpbnN0KSB7XG4gICAgICAgIGluc3QuX3NldFBlbmRpbmdQcm9wZXJ0eSh0aGlzLmFzLCBpdGVtKTtcbiAgICAgICAgaW5zdC5fc2V0UGVuZGluZ1Byb3BlcnR5KHRoaXMuaW5kZXhBcywgaW5zdElkeCk7XG4gICAgICAgIGluc3QuX3NldFBlbmRpbmdQcm9wZXJ0eSh0aGlzLml0ZW1zSW5kZXhBcywgaXRlbUlkeCk7XG4gICAgICAgIGluc3QuX2ZsdXNoUHJvcGVydGllcygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fX2luc2VydEluc3RhbmNlKGl0ZW0sIGluc3RJZHgsIGl0ZW1JZHgpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBSZW1vdmUgYW55IGV4dHJhIGluc3RhbmNlcyBmcm9tIHByZXZpb3VzIHN0YXRlXG4gICAgZm9yIChsZXQgaT10aGlzLl9faW5zdGFuY2VzLmxlbmd0aC0xOyBpPj1pbnN0SWR4OyBpLS0pIHtcbiAgICAgIHRoaXMuX19kZXRhY2hBbmRSZW1vdmVJbnN0YW5jZShpKTtcbiAgICB9XG4gIH1cblxuICBfX2RldGFjaEluc3RhbmNlKGlkeCkge1xuICAgIGxldCBpbnN0ID0gdGhpcy5fX2luc3RhbmNlc1tpZHhdO1xuICAgIGNvbnN0IHdyYXBwZWRSb290ID0gd3JhcChpbnN0LnJvb3QpO1xuICAgIGZvciAobGV0IGk9MDsgaTxpbnN0LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgZWwgPSBpbnN0LmNoaWxkcmVuW2ldO1xuICAgICAgd3JhcHBlZFJvb3QuYXBwZW5kQ2hpbGQoZWwpO1xuICAgIH1cbiAgICByZXR1cm4gaW5zdDtcbiAgfVxuXG4gIF9fYXR0YWNoSW5zdGFuY2UoaWR4LCBwYXJlbnQpIHtcbiAgICBsZXQgaW5zdCA9IHRoaXMuX19pbnN0YW5jZXNbaWR4XTtcbiAgICAvLyBOb3RlLCB0aGlzIGlzIHByZS13cmFwcGVkIGFzIGFuIG9wdGltaXphdGlvblxuICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoaW5zdC5yb290LCB0aGlzKTtcbiAgfVxuXG4gIF9fZGV0YWNoQW5kUmVtb3ZlSW5zdGFuY2UoaWR4KSB7XG4gICAgbGV0IGluc3QgPSB0aGlzLl9fZGV0YWNoSW5zdGFuY2UoaWR4KTtcbiAgICBpZiAoaW5zdCkge1xuICAgICAgdGhpcy5fX3Bvb2wucHVzaChpbnN0KTtcbiAgICB9XG4gICAgdGhpcy5fX2luc3RhbmNlcy5zcGxpY2UoaWR4LCAxKTtcbiAgfVxuXG4gIF9fc3RhbXBJbnN0YW5jZShpdGVtLCBpbnN0SWR4LCBpdGVtSWR4KSB7XG4gICAgbGV0IG1vZGVsID0ge307XG4gICAgbW9kZWxbdGhpcy5hc10gPSBpdGVtO1xuICAgIG1vZGVsW3RoaXMuaW5kZXhBc10gPSBpbnN0SWR4O1xuICAgIG1vZGVsW3RoaXMuaXRlbXNJbmRleEFzXSA9IGl0ZW1JZHg7XG4gICAgcmV0dXJuIG5ldyB0aGlzLl9fY3Rvcihtb2RlbCk7XG4gIH1cblxuICBfX2luc2VydEluc3RhbmNlKGl0ZW0sIGluc3RJZHgsIGl0ZW1JZHgpIHtcbiAgICBsZXQgaW5zdCA9IHRoaXMuX19wb29sLnBvcCgpO1xuICAgIGlmIChpbnN0KSB7XG4gICAgICAvLyBUT0RPKGtzY2hhYWYpOiBJZiB0aGUgcG9vbCBpcyBzaGFyZWQgYWNyb3NzIHR1cm5zLCBob3N0UHJvcHNcbiAgICAgIC8vIG5lZWQgdG8gYmUgcmUtc2V0IHRvIHJldXNlZCBpbnN0YW5jZXMgaW4gYWRkaXRpb24gdG8gaXRlbVxuICAgICAgaW5zdC5fc2V0UGVuZGluZ1Byb3BlcnR5KHRoaXMuYXMsIGl0ZW0pO1xuICAgICAgaW5zdC5fc2V0UGVuZGluZ1Byb3BlcnR5KHRoaXMuaW5kZXhBcywgaW5zdElkeCk7XG4gICAgICBpbnN0Ll9zZXRQZW5kaW5nUHJvcGVydHkodGhpcy5pdGVtc0luZGV4QXMsIGl0ZW1JZHgpO1xuICAgICAgaW5zdC5fZmx1c2hQcm9wZXJ0aWVzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc3QgPSB0aGlzLl9fc3RhbXBJbnN0YW5jZShpdGVtLCBpbnN0SWR4LCBpdGVtSWR4KTtcbiAgICB9XG4gICAgbGV0IGJlZm9yZVJvdyA9IHRoaXMuX19pbnN0YW5jZXNbaW5zdElkeCArIDFdO1xuICAgIGxldCBiZWZvcmVOb2RlID0gYmVmb3JlUm93ID8gYmVmb3JlUm93LmNoaWxkcmVuWzBdIDogdGhpcztcbiAgICB3cmFwKHdyYXAodGhpcykucGFyZW50Tm9kZSkuaW5zZXJ0QmVmb3JlKGluc3Qucm9vdCwgYmVmb3JlTm9kZSk7XG4gICAgdGhpcy5fX2luc3RhbmNlc1tpbnN0SWR4XSA9IGluc3Q7XG4gICAgcmV0dXJuIGluc3Q7XG4gIH1cblxuICAvLyBJbXBsZW1lbnRzIGV4dGVuc2lvbiBwb2ludCBmcm9tIFRlbXBsYXRpemUgbWl4aW5cbiAgLyoqXG4gICAqIFNob3dzIG9yIGhpZGVzIHRoZSB0ZW1wbGF0ZSBpbnN0YW5jZSB0b3AgbGV2ZWwgY2hpbGQgZWxlbWVudHMuIEZvclxuICAgKiB0ZXh0IG5vZGVzLCBgdGV4dENvbnRlbnRgIGlzIHJlbW92ZWQgd2hpbGUgXCJoaWRkZW5cIiBhbmQgcmVwbGFjZWQgd2hlblxuICAgKiBcInNob3duLlwiXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaGlkZGVuIFNldCB0byB0cnVlIHRvIGhpZGUgdGhlIGNoaWxkcmVuO1xuICAgKiBzZXQgdG8gZmFsc2UgdG8gc2hvdyB0aGVtLlxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfc2hvd0hpZGVDaGlsZHJlbihoaWRkZW4pIHtcbiAgICBmb3IgKGxldCBpPTA7IGk8dGhpcy5fX2luc3RhbmNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5fX2luc3RhbmNlc1tpXS5fc2hvd0hpZGVDaGlsZHJlbihoaWRkZW4pO1xuICAgIH1cbiAgfVxuXG4gIC8vIENhbGxlZCBhcyBhIHNpZGUgZWZmZWN0IG9mIGEgaG9zdCBpdGVtcy48a2V5Pi48cGF0aD4gcGF0aCBjaGFuZ2UsXG4gIC8vIHJlc3BvbnNpYmxlIGZvciBub3RpZnlpbmcgaXRlbS48cGF0aD4gY2hhbmdlcyB0byBpbnN0IGZvciBrZXlcbiAgX19oYW5kbGVJdGVtUGF0aChwYXRoLCB2YWx1ZSkge1xuICAgIGxldCBpdGVtc1BhdGggPSBwYXRoLnNsaWNlKDYpOyAvLyAnaXRlbXMuJy5sZW5ndGggPT0gNlxuICAgIGxldCBkb3QgPSBpdGVtc1BhdGguaW5kZXhPZignLicpO1xuICAgIGxldCBpdGVtc0lkeCA9IGRvdCA8IDAgPyBpdGVtc1BhdGggOiBpdGVtc1BhdGguc3Vic3RyaW5nKDAsIGRvdCk7XG4gICAgLy8gSWYgcGF0aCB3YXMgaW5kZXggaW50byBhcnJheS4uLlxuICAgIGlmIChpdGVtc0lkeCA9PSBwYXJzZUludChpdGVtc0lkeCwgMTApKSB7XG4gICAgICBsZXQgaXRlbVN1YlBhdGggPSBkb3QgPCAwID8gJycgOiBpdGVtc1BhdGguc3Vic3RyaW5nKGRvdCsxKTtcbiAgICAgIC8vIElmIHRoZSBwYXRoIGlzIG9ic2VydmVkLCBpdCB3aWxsIHRyaWdnZXIgYSBmdWxsIHJlZnJlc2hcbiAgICAgIHRoaXMuX19oYW5kbGVPYnNlcnZlZFBhdGhzKGl0ZW1TdWJQYXRoKTtcbiAgICAgIC8vIE5vdGUsIGV2ZW4gaWYgYSBydWxsIHJlZnJlc2ggaXMgdHJpZ2dlcmVkLCBhbHdheXMgZG8gdGhlIHBhdGhcbiAgICAgIC8vIG5vdGlmaWNhdGlvbiBiZWNhdXNlIHVubGVzcyBtdXRhYmxlRGF0YSBpcyB1c2VkIGZvciBkb20tcmVwZWF0XG4gICAgICAvLyBhbmQgYWxsIGVsZW1lbnRzIGluIHRoZSBpbnN0YW5jZSBzdWJ0cmVlLCBhIGZ1bGwgcmVmcmVzaCBtYXlcbiAgICAgIC8vIG5vdCB0cmlnZ2VyIHRoZSBwcm9wZXIgdXBkYXRlLlxuICAgICAgbGV0IGluc3RJZHggPSB0aGlzLl9faXRlbXNJZHhUb0luc3RJZHhbaXRlbXNJZHhdO1xuICAgICAgbGV0IGluc3QgPSB0aGlzLl9faW5zdGFuY2VzW2luc3RJZHhdO1xuICAgICAgaWYgKGluc3QpIHtcbiAgICAgICAgbGV0IGl0ZW1QYXRoID0gdGhpcy5hcyArIChpdGVtU3ViUGF0aCA/ICcuJyArIGl0ZW1TdWJQYXRoIDogJycpO1xuICAgICAgICAvLyBUaGlzIGlzIGVmZmVjdGl2ZWx5IGBub3RpZnlQYXRoYCwgYnV0IGF2b2lkcyBzb21lIG9mIHRoZSBvdmVyaGVhZFxuICAgICAgICAvLyBvZiB0aGUgcHVibGljIEFQSVxuICAgICAgICBpbnN0Ll9zZXRQZW5kaW5nUHJvcGVydHlPclBhdGgoaXRlbVBhdGgsIHZhbHVlLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIGluc3QuX2ZsdXNoUHJvcGVydGllcygpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGl0ZW0gYXNzb2NpYXRlZCB3aXRoIGEgZ2l2ZW4gZWxlbWVudCBzdGFtcGVkIGJ5XG4gICAqIHRoaXMgYGRvbS1yZXBlYXRgLlxuICAgKlxuICAgKiBOb3RlLCB0byBtb2RpZnkgc3ViLXByb3BlcnRpZXMgb2YgdGhlIGl0ZW0sXG4gICAqIGBtb2RlbEZvckVsZW1lbnQoZWwpLnNldCgnaXRlbS48c3ViLXByb3A+JywgdmFsdWUpYFxuICAgKiBzaG91bGQgYmUgdXNlZC5cbiAgICpcbiAgICogQHBhcmFtIHshSFRNTEVsZW1lbnR9IGVsIEVsZW1lbnQgZm9yIHdoaWNoIHRvIHJldHVybiB0aGUgaXRlbS5cbiAgICogQHJldHVybiB7Kn0gSXRlbSBhc3NvY2lhdGVkIHdpdGggdGhlIGVsZW1lbnQuXG4gICAqL1xuICBpdGVtRm9yRWxlbWVudChlbCkge1xuICAgIGxldCBpbnN0YW5jZSA9IHRoaXMubW9kZWxGb3JFbGVtZW50KGVsKTtcbiAgICByZXR1cm4gaW5zdGFuY2UgJiYgaW5zdGFuY2VbdGhpcy5hc107XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgaW5zdCBpbmRleCBmb3IgYSBnaXZlbiBlbGVtZW50IHN0YW1wZWQgYnkgdGhpcyBgZG9tLXJlcGVhdGAuXG4gICAqIElmIGBzb3J0YCBpcyBwcm92aWRlZCwgdGhlIGluZGV4IHdpbGwgcmVmbGVjdCB0aGUgc29ydGVkIG9yZGVyIChyYXRoZXJcbiAgICogdGhhbiB0aGUgb3JpZ2luYWwgYXJyYXkgb3JkZXIpLlxuICAgKlxuICAgKiBAcGFyYW0geyFIVE1MRWxlbWVudH0gZWwgRWxlbWVudCBmb3Igd2hpY2ggdG8gcmV0dXJuIHRoZSBpbmRleC5cbiAgICogQHJldHVybiB7P251bWJlcn0gUm93IGluZGV4IGFzc29jaWF0ZWQgd2l0aCB0aGUgZWxlbWVudCAobm90ZSB0aGlzIG1heVxuICAgKiAgIG5vdCBjb3JyZXNwb25kIHRvIHRoZSBhcnJheSBpbmRleCBpZiBhIHVzZXIgYHNvcnRgIGlzIGFwcGxpZWQpLlxuICAgKi9cbiAgaW5kZXhGb3JFbGVtZW50KGVsKSB7XG4gICAgbGV0IGluc3RhbmNlID0gdGhpcy5tb2RlbEZvckVsZW1lbnQoZWwpO1xuICAgIHJldHVybiBpbnN0YW5jZSAmJiBpbnN0YW5jZVt0aGlzLmluZGV4QXNdO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHRlbXBsYXRlIFwibW9kZWxcIiBhc3NvY2lhdGVkIHdpdGggYSBnaXZlbiBlbGVtZW50LCB3aGljaFxuICAgKiBzZXJ2ZXMgYXMgdGhlIGJpbmRpbmcgc2NvcGUgZm9yIHRoZSB0ZW1wbGF0ZSBpbnN0YW5jZSB0aGUgZWxlbWVudCBpc1xuICAgKiBjb250YWluZWQgaW4uIEEgdGVtcGxhdGUgbW9kZWxcbiAgICogc2hvdWxkIGJlIHVzZWQgdG8gbWFuaXB1bGF0ZSBkYXRhIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHRlbXBsYXRlIGluc3RhbmNlLlxuICAgKlxuICAgKiBFeGFtcGxlOlxuICAgKlxuICAgKiAgIGxldCBtb2RlbCA9IG1vZGVsRm9yRWxlbWVudChlbCk7XG4gICAqICAgaWYgKG1vZGVsLmluZGV4IDwgMTApIHtcbiAgICogICAgIG1vZGVsLnNldCgnaXRlbS5jaGVja2VkJywgdHJ1ZSk7XG4gICAqICAgfVxuICAgKlxuICAgKiBAcGFyYW0geyFIVE1MRWxlbWVudH0gZWwgRWxlbWVudCBmb3Igd2hpY2ggdG8gcmV0dXJuIGEgdGVtcGxhdGUgbW9kZWwuXG4gICAqIEByZXR1cm4ge1RlbXBsYXRlSW5zdGFuY2VCYXNlfSBNb2RlbCByZXByZXNlbnRpbmcgdGhlIGJpbmRpbmcgc2NvcGUgZm9yXG4gICAqICAgdGhlIGVsZW1lbnQuXG4gICAqL1xuICBtb2RlbEZvckVsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gbW9kZWxGb3JFbGVtZW50KHRoaXMudGVtcGxhdGUsIGVsKTtcbiAgfVxuXG59XG5cbmN1c3RvbUVsZW1lbnRzLmRlZmluZShEb21SZXBlYXQuaXMsIERvbVJlcGVhdCk7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaW1wb3J0IHsgUG9seW1lckVsZW1lbnQgfSBmcm9tICcuLi8uLi9wb2x5bWVyLWVsZW1lbnQuanMnO1xuXG5pbXBvcnQgeyB0ZW1wbGF0aXplIH0gZnJvbSAnLi4vdXRpbHMvdGVtcGxhdGl6ZS5qcyc7XG5pbXBvcnQgeyBEZWJvdW5jZXIgfSBmcm9tICcuLi91dGlscy9kZWJvdW5jZS5qcyc7XG5pbXBvcnQgeyBlbnF1ZXVlRGVib3VuY2VyLCBmbHVzaCB9IGZyb20gJy4uL3V0aWxzL2ZsdXNoLmpzJztcbmltcG9ydCB7IG1pY3JvVGFzayB9IGZyb20gJy4uL3V0aWxzL2FzeW5jLmpzJztcbmltcG9ydCB7IHJvb3QgfSBmcm9tICcuLi91dGlscy9wYXRoLmpzJztcbmltcG9ydCB7IHdyYXAgfSBmcm9tICcuLi91dGlscy93cmFwLmpzJztcbmltcG9ydCB7IGhpZGVFbGVtZW50c0dsb2JhbGx5IH0gZnJvbSAnLi4vdXRpbHMvaGlkZS10ZW1wbGF0ZS1jb250cm9scy5qcyc7XG5cbi8qKlxuICogVGhlIGA8ZG9tLWlmPmAgZWxlbWVudCB3aWxsIHN0YW1wIGEgbGlnaHQtZG9tIGA8dGVtcGxhdGU+YCBjaGlsZCB3aGVuXG4gKiB0aGUgYGlmYCBwcm9wZXJ0eSBiZWNvbWVzIHRydXRoeSwgYW5kIHRoZSB0ZW1wbGF0ZSBjYW4gdXNlIFBvbHltZXJcbiAqIGRhdGEtYmluZGluZyBhbmQgZGVjbGFyYXRpdmUgZXZlbnQgZmVhdHVyZXMgd2hlbiB1c2VkIGluIHRoZSBjb250ZXh0IG9mXG4gKiBhIFBvbHltZXIgZWxlbWVudCdzIHRlbXBsYXRlLlxuICpcbiAqIFdoZW4gYGlmYCBiZWNvbWVzIGZhbHN5LCB0aGUgc3RhbXBlZCBjb250ZW50IGlzIGhpZGRlbiBidXQgbm90XG4gKiByZW1vdmVkIGZyb20gZG9tLiBXaGVuIGBpZmAgc3Vic2VxdWVudGx5IGJlY29tZXMgdHJ1dGh5IGFnYWluLCB0aGUgY29udGVudFxuICogaXMgc2ltcGx5IHJlLXNob3duLiBUaGlzIGFwcHJvYWNoIGlzIHVzZWQgZHVlIHRvIGl0cyBmYXZvcmFibGUgcGVyZm9ybWFuY2VcbiAqIGNoYXJhY3RlcmlzdGljczogdGhlIGV4cGVuc2Ugb2YgY3JlYXRpbmcgdGVtcGxhdGUgY29udGVudCBpcyBwYWlkIG9ubHlcbiAqIG9uY2UgYW5kIGxhemlseS5cbiAqXG4gKiBTZXQgdGhlIGByZXN0YW1wYCBwcm9wZXJ0eSB0byB0cnVlIHRvIGZvcmNlIHRoZSBzdGFtcGVkIGNvbnRlbnQgdG8gYmVcbiAqIGNyZWF0ZWQgLyBkZXN0cm95ZWQgd2hlbiB0aGUgYGlmYCBjb25kaXRpb24gY2hhbmdlcy5cbiAqXG4gKiBAY3VzdG9tRWxlbWVudFxuICogQHBvbHltZXJcbiAqIEBleHRlbmRzIFBvbHltZXJFbGVtZW50XG4gKiBAc3VtbWFyeSBDdXN0b20gZWxlbWVudCB0aGF0IGNvbmRpdGlvbmFsbHkgc3RhbXBzIGFuZCBoaWRlcyBvciByZW1vdmVzXG4gKiAgIHRlbXBsYXRlIGNvbnRlbnQgYmFzZWQgb24gYSBib29sZWFuIGZsYWcuXG4gKi9cbmV4cG9ydCBjbGFzcyBEb21JZiBleHRlbmRzIFBvbHltZXJFbGVtZW50IHtcblxuICAvLyBOb3QgbmVlZGVkIHRvIGZpbmQgdGVtcGxhdGU7IGNhbiBiZSByZW1vdmVkIG9uY2UgdGhlIGFuYWx5emVyXG4gIC8vIGNhbiBmaW5kIHRoZSB0YWcgbmFtZSBmcm9tIGN1c3RvbUVsZW1lbnRzLmRlZmluZSBjYWxsXG4gIHN0YXRpYyBnZXQgaXMoKSB7IHJldHVybiAnZG9tLWlmJzsgfVxuXG4gIHN0YXRpYyBnZXQgdGVtcGxhdGUoKSB7IHJldHVybiBudWxsOyB9XG5cbiAgc3RhdGljIGdldCBwcm9wZXJ0aWVzKCkge1xuXG4gICAgcmV0dXJuIHtcblxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlZCB3aGVuZXZlciBET00gaXMgYWRkZWQgb3IgcmVtb3ZlZC9oaWRkZW4gYnkgdGhpcyB0ZW1wbGF0ZSAoYnlcbiAgICAgICAqIGRlZmF1bHQsIHJlbmRlcmluZyBvY2N1cnMgbGF6aWx5KS4gIFRvIGZvcmNlIGltbWVkaWF0ZSByZW5kZXJpbmcsIGNhbGxcbiAgICAgICAqIGByZW5kZXJgLlxuICAgICAgICpcbiAgICAgICAqIEBldmVudCBkb20tY2hhbmdlXG4gICAgICAgKi9cblxuICAgICAgLyoqXG4gICAgICAgKiBBIGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoaXMgdGVtcGxhdGUgc2hvdWxkIHN0YW1wLlxuICAgICAgICovXG4gICAgICBpZjoge1xuICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICBvYnNlcnZlcjogJ19fZGVib3VuY2VSZW5kZXInXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFdoZW4gdHJ1ZSwgZWxlbWVudHMgd2lsbCBiZSByZW1vdmVkIGZyb20gRE9NIGFuZCBkaXNjYXJkZWQgd2hlbiBgaWZgXG4gICAgICAgKiBiZWNvbWVzIGZhbHNlIGFuZCByZS1jcmVhdGVkIGFuZCBhZGRlZCBiYWNrIHRvIHRoZSBET00gd2hlbiBgaWZgXG4gICAgICAgKiBiZWNvbWVzIHRydWUuICBCeSBkZWZhdWx0LCBzdGFtcGVkIGVsZW1lbnRzIHdpbGwgYmUgaGlkZGVuIGJ1dCBsZWZ0XG4gICAgICAgKiBpbiB0aGUgRE9NIHdoZW4gYGlmYCBiZWNvbWVzIGZhbHNlLCB3aGljaCBpcyBnZW5lcmFsbHkgcmVzdWx0c1xuICAgICAgICogaW4gYmV0dGVyIHBlcmZvcm1hbmNlLlxuICAgICAgICovXG4gICAgICByZXN0YW1wOiB7XG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgIG9ic2VydmVyOiAnX19kZWJvdW5jZVJlbmRlcidcbiAgICAgIH1cblxuICAgIH07XG5cbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fX3JlbmRlckRlYm91bmNlciA9IG51bGw7XG4gICAgdGhpcy5fX2ludmFsaWRQcm9wcyA9IG51bGw7XG4gICAgdGhpcy5fX2luc3RhbmNlID0gbnVsbDtcbiAgICB0aGlzLl9sYXN0SWYgPSBmYWxzZTtcbiAgICB0aGlzLl9fY3RvciA9IG51bGw7XG4gICAgdGhpcy5fX2hpZGVUZW1wbGF0ZUNoaWxkcmVuX18gPSBmYWxzZTtcbiAgfVxuXG4gIF9fZGVib3VuY2VSZW5kZXIoKSB7XG4gICAgLy8gUmVuZGVyIGlzIGFzeW5jIGZvciAyIHJlYXNvbnM6XG4gICAgLy8gMS4gVG8gZWxpbWluYXRlIGRvbSBjcmVhdGlvbiB0cmFzaGluZyBpZiB1c2VyIGNvZGUgdGhyYXNoZXMgYGlmYCBpbiB0aGVcbiAgICAvLyAgICBzYW1lIHR1cm4uIFRoaXMgd2FzIG1vcmUgY29tbW9uIGluIDEueCB3aGVyZSBhIGNvbXBvdW5kIGNvbXB1dGVkXG4gICAgLy8gICAgcHJvcGVydHkgY291bGQgcmVzdWx0IGluIHRoZSByZXN1bHQgY2hhbmdpbmcgbXVsdGlwbGUgdGltZXMsIGJ1dCBpc1xuICAgIC8vICAgIG1pdGlnYXRlZCB0byBhIGxhcmdlIGV4dGVudCBieSBiYXRjaGVkIHByb3BlcnR5IHByb2Nlc3NpbmcgaW4gMi54LlxuICAgIC8vIDIuIFRvIGF2b2lkIGRvdWJsZSBvYmplY3QgcHJvcGFnYXRpb24gd2hlbiBhIGJhZyBpbmNsdWRpbmcgdmFsdWVzIGJvdW5kXG4gICAgLy8gICAgdG8gdGhlIGBpZmAgcHJvcGVydHkgYXMgd2VsbCBhcyBvbmUgb3IgbW9yZSBob3N0UHJvcHMgY291bGQgZW5xdWV1ZVxuICAgIC8vICAgIHRoZSA8ZG9tLWlmPiB0byBmbHVzaCBiZWZvcmUgdGhlIDx0ZW1wbGF0ZT4ncyBob3N0IHByb3BlcnR5XG4gICAgLy8gICAgZm9yd2FyZGluZy4gSW4gdGhhdCBzY2VuYXJpbyBjcmVhdGluZyBhbiBpbnN0YW5jZSB3b3VsZCByZXN1bHQgaW5cbiAgICAvLyAgICB0aGUgaG9zdCBwcm9wcyBiZWluZyBzZXQgb25jZSwgYW5kIHRoZW4gdGhlIGVucXVldWVkIGNoYW5nZXMgb24gdGhlXG4gICAgLy8gICAgdGVtcGxhdGUgd291bGQgc2V0IHByb3BlcnRpZXMgYSBzZWNvbmQgdGltZSwgcG90ZW50aWFsbHkgY2F1c2luZyBhblxuICAgIC8vICAgIG9iamVjdCB0byBiZSBzZXQgdG8gYW4gaW5zdGFuY2UgbW9yZSB0aGFuIG9uY2UuICBDcmVhdGluZyB0aGVcbiAgICAvLyAgICBpbnN0YW5jZSBhc3luYyBmcm9tIGZsdXNoaW5nIGRhdGEgZW5zdXJlcyB0aGlzIGRvZXNuJ3QgaGFwcGVuLiBJZlxuICAgIC8vICAgIHdlIHdhbnRlZCBhIHN5bmMgb3B0aW9uIGluIHRoZSBmdXR1cmUsIHNpbXBseSBoYXZpbmcgPGRvbS1pZj4gZmx1c2hcbiAgICAvLyAgICAob3IgY2xlYXIpIGl0cyB0ZW1wbGF0ZSdzIHBlbmRpbmcgaG9zdCBwcm9wZXJ0aWVzIGJlZm9yZSBjcmVhdGluZ1xuICAgIC8vICAgIHRoZSBpbnN0YW5jZSB3b3VsZCBhbHNvIGF2b2lkIHRoZSBwcm9ibGVtLlxuICAgIHRoaXMuX19yZW5kZXJEZWJvdW5jZXIgPSBEZWJvdW5jZXIuZGVib3VuY2UoXG4gICAgICAgICAgdGhpcy5fX3JlbmRlckRlYm91bmNlclxuICAgICAgICAsIG1pY3JvVGFza1xuICAgICAgICAsICgpID0+IHRoaXMuX19yZW5kZXIoKSk7XG4gICAgZW5xdWV1ZURlYm91bmNlcih0aGlzLl9fcmVuZGVyRGVib3VuY2VyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgY29uc3QgcGFyZW50ID0gd3JhcCh0aGlzKS5wYXJlbnROb2RlO1xuICAgIGlmICghcGFyZW50IHx8IChwYXJlbnQubm9kZVR5cGUgPT0gTm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFICYmXG4gICAgICAgICF3cmFwKHBhcmVudCkuaG9zdCkpIHtcbiAgICAgIHRoaXMuX190ZWFyZG93bkluc3RhbmNlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICBpZiAoIWhpZGVFbGVtZW50c0dsb2JhbGx5KCkpIHtcbiAgICAgIHRoaXMuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB9XG4gICAgaWYgKHRoaXMuaWYpIHtcbiAgICAgIHRoaXMuX19kZWJvdW5jZVJlbmRlcigpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGb3JjZXMgdGhlIGVsZW1lbnQgdG8gcmVuZGVyIGl0cyBjb250ZW50LiBOb3JtYWxseSByZW5kZXJpbmcgaXNcbiAgICogYXN5bmNocm9ub3VzIHRvIGEgcHJvdm9raW5nIGNoYW5nZS4gVGhpcyBpcyBkb25lIGZvciBlZmZpY2llbmN5IHNvXG4gICAqIHRoYXQgbXVsdGlwbGUgY2hhbmdlcyB0cmlnZ2VyIG9ubHkgYSBzaW5nbGUgcmVuZGVyLiBUaGUgcmVuZGVyIG1ldGhvZFxuICAgKiBzaG91bGQgYmUgY2FsbGVkIGlmLCBmb3IgZXhhbXBsZSwgdGVtcGxhdGUgcmVuZGVyaW5nIGlzIHJlcXVpcmVkIHRvXG4gICAqIHZhbGlkYXRlIGFwcGxpY2F0aW9uIHN0YXRlLlxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgcmVuZGVyKCkge1xuICAgIGZsdXNoKCk7XG4gIH1cblxuICBfX3JlbmRlcigpIHtcbiAgICBpZiAodGhpcy5pZikge1xuICAgICAgaWYgKCF0aGlzLl9fZW5zdXJlSW5zdGFuY2UoKSkge1xuICAgICAgICAvLyBObyB0ZW1wbGF0ZSBmb3VuZCB5ZXRcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5fc2hvd0hpZGVDaGlsZHJlbigpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5yZXN0YW1wKSB7XG4gICAgICB0aGlzLl9fdGVhcmRvd25JbnN0YW5jZSgpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMucmVzdGFtcCAmJiB0aGlzLl9faW5zdGFuY2UpIHtcbiAgICAgIHRoaXMuX3Nob3dIaWRlQ2hpbGRyZW4oKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaWYgIT0gdGhpcy5fbGFzdElmKSB7XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdkb20tY2hhbmdlJywge1xuICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICBjb21wb3NlZDogdHJ1ZVxuICAgICAgfSkpO1xuICAgICAgdGhpcy5fbGFzdElmID0gdGhpcy5pZjtcbiAgICB9XG4gIH1cblxuICBfX2Vuc3VyZUluc3RhbmNlKCkge1xuICAgIGxldCBwYXJlbnROb2RlID0gd3JhcCh0aGlzKS5wYXJlbnROb2RlO1xuICAgIC8vIEd1YXJkIGFnYWluc3QgZWxlbWVudCBiZWluZyBkZXRhY2hlZCB3aGlsZSByZW5kZXIgd2FzIHF1ZXVlZFxuICAgIGlmIChwYXJlbnROb2RlKSB7XG4gICAgICBpZiAoIXRoaXMuX19jdG9yKSB7XG4gICAgICAgIGxldCB0ZW1wbGF0ZSA9IC8qKiBAdHlwZSB7SFRNTFRlbXBsYXRlRWxlbWVudH0gKi8od3JhcCh0aGlzKS5xdWVyeVNlbGVjdG9yKCd0ZW1wbGF0ZScpKTtcbiAgICAgICAgaWYgKCF0ZW1wbGF0ZSkge1xuICAgICAgICAgIC8vIFdhaXQgdW50aWwgY2hpbGRMaXN0IGNoYW5nZXMgYW5kIHRlbXBsYXRlIHNob3VsZCBiZSB0aGVyZSBieSB0aGVuXG4gICAgICAgICAgbGV0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHdyYXAodGhpcykucXVlcnlTZWxlY3RvcigndGVtcGxhdGUnKSkge1xuICAgICAgICAgICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICAgIHRoaXMuX19yZW5kZXIoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZG9tLWlmIHJlcXVpcmVzIGEgPHRlbXBsYXRlPiBjaGlsZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUodGhpcywge2NoaWxkTGlzdDogdHJ1ZX0pO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9fY3RvciA9IHRlbXBsYXRpemUodGVtcGxhdGUsIHRoaXMsIHtcbiAgICAgICAgICAvLyBkb20taWYgdGVtcGxhdGl6ZXIgaW5zdGFuY2VzIHJlcXVpcmUgYG11dGFibGU6IHRydWVgLCBhc1xuICAgICAgICAgIC8vIGBfX3N5bmNIb3N0UHJvcGVydGllc2AgcmVsaWVzIG9uIHRoYXQgYmVoYXZpb3IgdG8gc3luYyBvYmplY3RzXG4gICAgICAgICAgbXV0YWJsZURhdGE6IHRydWUsXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3AgUHJvcGVydHkgdG8gZm9yd2FyZFxuICAgICAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgb2YgcHJvcGVydHlcbiAgICAgICAgICAgKiBAdGhpcyB7RG9tSWZ9XG4gICAgICAgICAgICovXG4gICAgICAgICAgZm9yd2FyZEhvc3RQcm9wOiBmdW5jdGlvbihwcm9wLCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX19pbnN0YW5jZSkge1xuICAgICAgICAgICAgICBpZiAodGhpcy5pZikge1xuICAgICAgICAgICAgICAgIHRoaXMuX19pbnN0YW5jZS5mb3J3YXJkSG9zdFByb3AocHJvcCwgdmFsdWUpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIElmIHdlIGhhdmUgYW4gaW5zdGFuY2UgYnV0IGFyZSBzcXVlbGNoaW5nIGhvc3QgcHJvcGVydHlcbiAgICAgICAgICAgICAgICAvLyBmb3J3YXJkaW5nIGR1ZSB0byBpZiBiZWluZyBmYWxzZSwgbm90ZSB0aGUgaW52YWxpZGF0ZWRcbiAgICAgICAgICAgICAgICAvLyBwcm9wZXJ0aWVzIHNvIGBfX3N5bmNIb3N0UHJvcGVydGllc2AgY2FuIHN5bmMgdGhlbSB0aGUgbmV4dFxuICAgICAgICAgICAgICAgIC8vIHRpbWUgYGlmYCBiZWNvbWVzIHRydWVcbiAgICAgICAgICAgICAgICB0aGlzLl9faW52YWxpZFByb3BzID0gdGhpcy5fX2ludmFsaWRQcm9wcyB8fCBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgICAgICAgIHRoaXMuX19pbnZhbGlkUHJvcHNbcm9vdChwcm9wKV0gPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5fX2luc3RhbmNlKSB7XG4gICAgICAgIHRoaXMuX19pbnN0YW5jZSA9IG5ldyB0aGlzLl9fY3RvcigpO1xuICAgICAgICB3cmFwKHBhcmVudE5vZGUpLmluc2VydEJlZm9yZSh0aGlzLl9faW5zdGFuY2Uucm9vdCwgdGhpcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9fc3luY0hvc3RQcm9wZXJ0aWVzKCk7XG4gICAgICAgIGxldCBjJCA9IHRoaXMuX19pbnN0YW5jZS5jaGlsZHJlbjtcbiAgICAgICAgaWYgKGMkICYmIGMkLmxlbmd0aCkge1xuICAgICAgICAgIC8vIERldGVjdCBjYXNlIHdoZXJlIGRvbS1pZiB3YXMgcmUtYXR0YWNoZWQgaW4gbmV3IHBvc2l0aW9uXG4gICAgICAgICAgbGV0IGxhc3RDaGlsZCA9IHdyYXAodGhpcykucHJldmlvdXNTaWJsaW5nO1xuICAgICAgICAgIGlmIChsYXN0Q2hpbGQgIT09IGMkW2MkLmxlbmd0aC0xXSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaT0wLCBuOyAoaTxjJC5sZW5ndGgpICYmIChuPWMkW2ldKTsgaSsrKSB7XG4gICAgICAgICAgICAgIHdyYXAocGFyZW50Tm9kZSkuaW5zZXJ0QmVmb3JlKG4sIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIF9fc3luY0hvc3RQcm9wZXJ0aWVzKCkge1xuICAgIGxldCBwcm9wcyA9IHRoaXMuX19pbnZhbGlkUHJvcHM7XG4gICAgaWYgKHByb3BzKSB7XG4gICAgICBmb3IgKGxldCBwcm9wIGluIHByb3BzKSB7XG4gICAgICAgIHRoaXMuX19pbnN0YW5jZS5fc2V0UGVuZGluZ1Byb3BlcnR5KHByb3AsIHRoaXMuX19kYXRhSG9zdFtwcm9wXSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9faW52YWxpZFByb3BzID0gbnVsbDtcbiAgICAgIHRoaXMuX19pbnN0YW5jZS5fZmx1c2hQcm9wZXJ0aWVzKCk7XG4gICAgfVxuICB9XG5cbiAgX190ZWFyZG93bkluc3RhbmNlKCkge1xuICAgIGlmICh0aGlzLl9faW5zdGFuY2UpIHtcbiAgICAgIGxldCBjJCA9IHRoaXMuX19pbnN0YW5jZS5jaGlsZHJlbjtcbiAgICAgIGlmIChjJCAmJiBjJC5sZW5ndGgpIHtcbiAgICAgICAgLy8gdXNlIGZpcnN0IGNoaWxkIHBhcmVudCwgZm9yIGNhc2Ugd2hlbiBkb20taWYgbWF5IGhhdmUgYmVlbiBkZXRhY2hlZFxuICAgICAgICBsZXQgcGFyZW50ID0gd3JhcChjJFswXSkucGFyZW50Tm9kZTtcbiAgICAgICAgLy8gSW5zdGFuY2UgY2hpbGRyZW4gbWF5IGJlIGRpc2Nvbm5lY3RlZCBmcm9tIHBhcmVudHMgd2hlbiBkb20taWZcbiAgICAgICAgLy8gZGV0YWNoZXMgaWYgYSB0cmVlIHdhcyBpbm5lckhUTUwnZWRcbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgIHBhcmVudCA9IHdyYXAocGFyZW50KTtcbiAgICAgICAgICBmb3IgKGxldCBpPTAsIG47IChpPGMkLmxlbmd0aCkgJiYgKG49YyRbaV0pOyBpKyspIHtcbiAgICAgICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChuKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuX19pbnN0YW5jZSA9IG51bGw7XG4gICAgICB0aGlzLl9faW52YWxpZFByb3BzID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2hvd3Mgb3IgaGlkZXMgdGhlIHRlbXBsYXRlIGluc3RhbmNlIHRvcCBsZXZlbCBjaGlsZCBlbGVtZW50cy4gRm9yXG4gICAqIHRleHQgbm9kZXMsIGB0ZXh0Q29udGVudGAgaXMgcmVtb3ZlZCB3aGlsZSBcImhpZGRlblwiIGFuZCByZXBsYWNlZCB3aGVuXG4gICAqIFwic2hvd24uXCJcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICogQHByb3RlY3RlZFxuICAgKiBAc3VwcHJlc3Mge3Zpc2liaWxpdHl9XG4gICAqL1xuICBfc2hvd0hpZGVDaGlsZHJlbigpIHtcbiAgICBsZXQgaGlkZGVuID0gdGhpcy5fX2hpZGVUZW1wbGF0ZUNoaWxkcmVuX18gfHwgIXRoaXMuaWY7XG4gICAgaWYgKHRoaXMuX19pbnN0YW5jZSkge1xuICAgICAgdGhpcy5fX2luc3RhbmNlLl9zaG93SGlkZUNoaWxkcmVuKGhpZGRlbik7XG4gICAgfVxuICB9XG5cbn1cblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKERvbUlmLmlzLCBEb21JZik7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaW1wb3J0IHsgUG9seW1lckVsZW1lbnQgfSBmcm9tICcuLi8uLi9wb2x5bWVyLWVsZW1lbnQuanMnO1xuXG5pbXBvcnQgeyBkZWR1cGluZ01peGluIH0gZnJvbSAnLi4vdXRpbHMvbWl4aW4uanMnO1xuaW1wb3J0IHsgY2FsY3VsYXRlU3BsaWNlcyB9IGZyb20gJy4uL3V0aWxzL2FycmF5LXNwbGljZS5qcyc7XG5pbXBvcnQgeyBFbGVtZW50TWl4aW4gfSBmcm9tICcuLi9taXhpbnMvZWxlbWVudC1taXhpbi5qcyc7XG5cbi8qKlxuICogRWxlbWVudCBtaXhpbiBmb3IgcmVjb3JkaW5nIGR5bmFtaWMgYXNzb2NpYXRpb25zIGJldHdlZW4gaXRlbSBwYXRocyBpbiBhXG4gKiBtYXN0ZXIgYGl0ZW1zYCBhcnJheSBhbmQgYSBgc2VsZWN0ZWRgIGFycmF5IHN1Y2ggdGhhdCBwYXRoIGNoYW5nZXMgdG8gdGhlXG4gKiBtYXN0ZXIgYXJyYXkgKGF0IHRoZSBob3N0KSBlbGVtZW50IG9yIGVsc2V3aGVyZSB2aWEgZGF0YS1iaW5kaW5nKSBhcmVcbiAqIGNvcnJlY3RseSBwcm9wYWdhdGVkIHRvIGl0ZW1zIGluIHRoZSBzZWxlY3RlZCBhcnJheSBhbmQgdmljZS12ZXJzYS5cbiAqXG4gKiBUaGUgYGl0ZW1zYCBwcm9wZXJ0eSBhY2NlcHRzIGFuIGFycmF5IG9mIHVzZXIgZGF0YSwgYW5kIHZpYSB0aGVcbiAqIGBzZWxlY3QoaXRlbSlgIGFuZCBgZGVzZWxlY3QoaXRlbSlgIEFQSSwgdXBkYXRlcyB0aGUgYHNlbGVjdGVkYCBwcm9wZXJ0eVxuICogd2hpY2ggbWF5IGJlIGJvdW5kIHRvIG90aGVyIHBhcnRzIG9mIHRoZSBhcHBsaWNhdGlvbiwgYW5kIGFueSBjaGFuZ2VzIHRvXG4gKiBzdWItZmllbGRzIG9mIGBzZWxlY3RlZGAgaXRlbShzKSB3aWxsIGJlIGtlcHQgaW4gc3luYyB3aXRoIGl0ZW1zIGluIHRoZVxuICogYGl0ZW1zYCBhcnJheS4gIFdoZW4gYG11bHRpYCBpcyBmYWxzZSwgYHNlbGVjdGVkYCBpcyBhIHByb3BlcnR5XG4gKiByZXByZXNlbnRpbmcgdGhlIGxhc3Qgc2VsZWN0ZWQgaXRlbS4gIFdoZW4gYG11bHRpYCBpcyB0cnVlLCBgc2VsZWN0ZWRgXG4gKiBpcyBhbiBhcnJheSBvZiBtdWx0aXBseSBzZWxlY3RlZCBpdGVtcy5cbiAqXG4gKiBAcG9seW1lclxuICogQG1peGluRnVuY3Rpb25cbiAqIEBhcHBsaWVzTWl4aW4gRWxlbWVudE1peGluXG4gKiBAc3VtbWFyeSBFbGVtZW50IG1peGluIGZvciByZWNvcmRpbmcgZHluYW1pYyBhc3NvY2lhdGlvbnMgYmV0d2VlbiBpdGVtIHBhdGhzIGluIGFcbiAqIG1hc3RlciBgaXRlbXNgIGFycmF5IGFuZCBhIGBzZWxlY3RlZGAgYXJyYXlcbiAqL1xubGV0IEFycmF5U2VsZWN0b3JNaXhpbiA9IGRlZHVwaW5nTWl4aW4oc3VwZXJDbGFzcyA9PiB7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9FbGVtZW50TWl4aW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBsZXQgZWxlbWVudEJhc2UgPSBFbGVtZW50TWl4aW4oc3VwZXJDbGFzcyk7XG5cbiAgLyoqXG4gICAqIEBwb2x5bWVyXG4gICAqIEBtaXhpbkNsYXNzXG4gICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX0FycmF5U2VsZWN0b3JNaXhpbn1cbiAgICogQHVucmVzdHJpY3RlZFxuICAgKi9cbiAgY2xhc3MgQXJyYXlTZWxlY3Rvck1peGluIGV4dGVuZHMgZWxlbWVudEJhc2Uge1xuXG4gICAgc3RhdGljIGdldCBwcm9wZXJ0aWVzKCkge1xuICAgICAgcmV0dXJuIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQW4gYXJyYXkgY29udGFpbmluZyBpdGVtcyBmcm9tIHdoaWNoIHNlbGVjdGlvbiB3aWxsIGJlIG1hZGUuXG4gICAgICAgICAqL1xuICAgICAgICBpdGVtczoge1xuICAgICAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGVuIGB0cnVlYCwgbXVsdGlwbGUgaXRlbXMgbWF5IGJlIHNlbGVjdGVkIGF0IG9uY2UgKGluIHRoaXMgY2FzZSxcbiAgICAgICAgICogYHNlbGVjdGVkYCBpcyBhbiBhcnJheSBvZiBjdXJyZW50bHkgc2VsZWN0ZWQgaXRlbXMpLiAgV2hlbiBgZmFsc2VgLFxuICAgICAgICAgKiBvbmx5IG9uZSBpdGVtIG1heSBiZSBzZWxlY3RlZCBhdCBhIHRpbWUuXG4gICAgICAgICAqL1xuICAgICAgICBtdWx0aToge1xuICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgICAgdmFsdWU6IGZhbHNlLFxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGVuIGBtdWx0aWAgaXMgdHJ1ZSwgdGhpcyBpcyBhbiBhcnJheSB0aGF0IGNvbnRhaW5zIGFueSBzZWxlY3RlZC5cbiAgICAgICAgICogV2hlbiBgbXVsdGlgIGlzIGZhbHNlLCB0aGlzIGlzIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgaXRlbSwgb3IgYG51bGxgXG4gICAgICAgICAqIGlmIG5vIGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAgICAgICAqIEB0eXBlIHs/T2JqZWN0fD9BcnJheTwhT2JqZWN0Pn1cbiAgICAgICAgICovXG4gICAgICAgIHNlbGVjdGVkOiB7dHlwZTogT2JqZWN0LCBub3RpZnk6IHRydWV9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGVuIGBtdWx0aWAgaXMgZmFsc2UsIHRoaXMgaXMgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBpdGVtLCBvciBgbnVsbGBcbiAgICAgICAgICogaWYgbm8gaXRlbSBpcyBzZWxlY3RlZC5cbiAgICAgICAgICogQHR5cGUgez9PYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICBzZWxlY3RlZEl0ZW06IHt0eXBlOiBPYmplY3QsIG5vdGlmeTogdHJ1ZX0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZW4gYHRydWVgLCBjYWxsaW5nIGBzZWxlY3RgIG9uIGFuIGl0ZW0gdGhhdCBpcyBhbHJlYWR5IHNlbGVjdGVkXG4gICAgICAgICAqIHdpbGwgZGVzZWxlY3QgdGhlIGl0ZW0uXG4gICAgICAgICAqL1xuICAgICAgICB0b2dnbGU6IHt0eXBlOiBCb29sZWFuLCB2YWx1ZTogZmFsc2V9XG5cbiAgICAgIH07XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBvYnNlcnZlcnMoKSB7XG4gICAgICByZXR1cm4gWydfX3VwZGF0ZVNlbGVjdGlvbihtdWx0aSwgaXRlbXMuKiknXTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgICB0aGlzLl9fbGFzdEl0ZW1zID0gbnVsbDtcbiAgICAgIHRoaXMuX19sYXN0TXVsdGkgPSBudWxsO1xuICAgICAgdGhpcy5fX3NlbGVjdGVkTWFwID0gbnVsbDtcbiAgICB9XG5cbiAgICBfX3VwZGF0ZVNlbGVjdGlvbihtdWx0aSwgaXRlbXNJbmZvKSB7XG4gICAgICBsZXQgcGF0aCA9IGl0ZW1zSW5mby5wYXRoO1xuICAgICAgaWYgKHBhdGggPT0gSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnaXRlbXMnLCB0aGlzKSkge1xuICAgICAgICAvLyBDYXNlIDEgLSBpdGVtcyBhcnJheSBjaGFuZ2VkLCBzbyBkaWZmIGFnYWluc3QgcHJldmlvdXMgYXJyYXkgYW5kXG4gICAgICAgIC8vIGRlc2VsZWN0IGFueSByZW1vdmVkIGl0ZW1zIGFuZCBhZGp1c3Qgc2VsZWN0ZWQgaW5kaWNlc1xuICAgICAgICBsZXQgbmV3SXRlbXMgPSBpdGVtc0luZm8uYmFzZSB8fCBbXTtcbiAgICAgICAgbGV0IGxhc3RJdGVtcyA9IHRoaXMuX19sYXN0SXRlbXM7XG4gICAgICAgIGxldCBsYXN0TXVsdGkgPSB0aGlzLl9fbGFzdE11bHRpO1xuICAgICAgICBpZiAobXVsdGkgIT09IGxhc3RNdWx0aSkge1xuICAgICAgICAgIHRoaXMuY2xlYXJTZWxlY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGFzdEl0ZW1zKSB7XG4gICAgICAgICAgbGV0IHNwbGljZXMgPSBjYWxjdWxhdGVTcGxpY2VzKG5ld0l0ZW1zLCBsYXN0SXRlbXMpO1xuICAgICAgICAgIHRoaXMuX19hcHBseVNwbGljZXMoc3BsaWNlcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fX2xhc3RJdGVtcyA9IG5ld0l0ZW1zO1xuICAgICAgICB0aGlzLl9fbGFzdE11bHRpID0gbXVsdGk7XG4gICAgICB9IGVsc2UgaWYgKGl0ZW1zSW5mby5wYXRoID09IGAke0pTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ2l0ZW1zJywgdGhpcyl9LnNwbGljZXNgKSB7XG4gICAgICAgIC8vIENhc2UgMiAtIGdvdCBzcGVjaWZpYyBzcGxpY2UgaW5mb3JtYXRpb24gZGVzY3JpYmluZyB0aGUgYXJyYXkgbXV0YXRpb246XG4gICAgICAgIC8vIGRlc2VsZWN0IGFueSByZW1vdmVkIGl0ZW1zIGFuZCBhZGp1c3Qgc2VsZWN0ZWQgaW5kaWNlc1xuICAgICAgICB0aGlzLl9fYXBwbHlTcGxpY2VzKGl0ZW1zSW5mby52YWx1ZS5pbmRleFNwbGljZXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQ2FzZSAzIC0gYW4gYXJyYXkgZWxlbWVudCB3YXMgY2hhbmdlZCwgc28gZGVzZWxlY3QgdGhlIHByZXZpb3VzXG4gICAgICAgIC8vIGl0ZW0gZm9yIHRoYXQgaW5kZXggaWYgaXQgd2FzIHByZXZpb3VzbHkgc2VsZWN0ZWRcbiAgICAgICAgbGV0IHBhcnQgPSBwYXRoLnNsaWNlKGAke0pTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ2l0ZW1zJywgdGhpcyl9LmAubGVuZ3RoKTtcbiAgICAgICAgbGV0IGlkeCA9IHBhcnNlSW50KHBhcnQsIDEwKTtcbiAgICAgICAgaWYgKChwYXJ0LmluZGV4T2YoJy4nKSA8IDApICYmIHBhcnQgPT0gaWR4KSB7XG4gICAgICAgICAgdGhpcy5fX2Rlc2VsZWN0Q2hhbmdlZElkeChpZHgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgX19hcHBseVNwbGljZXMoc3BsaWNlcykge1xuICAgICAgbGV0IHNlbGVjdGVkID0gdGhpcy5fX3NlbGVjdGVkTWFwO1xuICAgICAgLy8gQWRqdXN0IHNlbGVjdGVkIGluZGljZXMgYW5kIG1hcmsgcmVtb3ZhbHNcbiAgICAgIGZvciAobGV0IGk9MDsgaTxzcGxpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBzID0gc3BsaWNlc1tpXTtcbiAgICAgICAgc2VsZWN0ZWQuZm9yRWFjaCgoaWR4LCBpdGVtKSA9PiB7XG4gICAgICAgICAgaWYgKGlkeCA8IHMuaW5kZXgpIHtcbiAgICAgICAgICAgIC8vIG5vIGNoYW5nZVxuICAgICAgICAgIH0gZWxzZSBpZiAoaWR4ID49IHMuaW5kZXggKyBzLnJlbW92ZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBhZGp1c3QgaW5kZXhcbiAgICAgICAgICAgIHNlbGVjdGVkLnNldChpdGVtLCBpZHggKyBzLmFkZGVkQ291bnQgLSBzLnJlbW92ZWQubGVuZ3RoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIGluZGV4XG4gICAgICAgICAgICBzZWxlY3RlZC5zZXQoaXRlbSwgLTEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGZvciAobGV0IGo9MDsgajxzLmFkZGVkQ291bnQ7IGorKykge1xuICAgICAgICAgIGxldCBpZHggPSBzLmluZGV4ICsgajtcbiAgICAgICAgICBpZiAoc2VsZWN0ZWQuaGFzKHRoaXMuaXRlbXNbaWR4XSkpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkLnNldCh0aGlzLml0ZW1zW2lkeF0sIGlkeCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBVcGRhdGUgbGlua2VkIHBhdGhzXG4gICAgICB0aGlzLl9fdXBkYXRlTGlua3MoKTtcbiAgICAgIC8vIFJlbW92ZSBzZWxlY3RlZCBpdGVtcyB0aGF0IHdlcmUgcmVtb3ZlZCBmcm9tIHRoZSBpdGVtcyBhcnJheVxuICAgICAgbGV0IHNpZHggPSAwO1xuICAgICAgc2VsZWN0ZWQuZm9yRWFjaCgoaWR4LCBpdGVtKSA9PiB7XG4gICAgICAgIGlmIChpZHggPCAwKSB7XG4gICAgICAgICAgaWYgKHRoaXMubXVsdGkpIHtcbiAgICAgICAgICAgIHRoaXMuc3BsaWNlKEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ3NlbGVjdGVkJywgdGhpcyksIHNpZHgsIDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkID0gdGhpcy5zZWxlY3RlZEl0ZW0gPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZWxlY3RlZC5kZWxldGUoaXRlbSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2lkeCsrO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBfX3VwZGF0ZUxpbmtzKCkge1xuICAgICAgdGhpcy5fX2RhdGFMaW5rZWRQYXRocyA9IHt9O1xuICAgICAgaWYgKHRoaXMubXVsdGkpIHtcbiAgICAgICAgbGV0IHNpZHggPSAwO1xuICAgICAgICB0aGlzLl9fc2VsZWN0ZWRNYXAuZm9yRWFjaChpZHggPT4ge1xuICAgICAgICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgICAgICAgdGhpcy5saW5rUGF0aHMoXG4gICAgICAgICAgICAgICAgYCR7SlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnaXRlbXMnLCB0aGlzKX0uJHtpZHh9YCxcbiAgICAgICAgICAgICAgICBgJHtKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdzZWxlY3RlZCcsIHRoaXMpfS4ke3NpZHgrK31gKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fX3NlbGVjdGVkTWFwLmZvckVhY2goaWR4ID0+IHtcbiAgICAgICAgICB0aGlzLmxpbmtQYXRocyhcbiAgICAgICAgICAgICAgSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnc2VsZWN0ZWQnLCB0aGlzKSxcbiAgICAgICAgICAgICAgYCR7SlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnaXRlbXMnLCB0aGlzKX0uJHtpZHh9YCk7XG4gICAgICAgICAgdGhpcy5saW5rUGF0aHMoXG4gICAgICAgICAgICAgIEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ3NlbGVjdGVkSXRlbScsIHRoaXMpLFxuICAgICAgICAgICAgICBgJHtKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdpdGVtcycsIHRoaXMpfS4ke2lkeH1gKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xlYXJzIHRoZSBzZWxlY3Rpb24gc3RhdGUuXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBjbGVhclNlbGVjdGlvbigpIHtcbiAgICAgIC8vIFVuYmluZCBwcmV2aW91cyBzZWxlY3Rpb25cbiAgICAgIHRoaXMuX19kYXRhTGlua2VkUGF0aHMgPSB7fTtcbiAgICAgIC8vIFRoZSBzZWxlY3RlZCBtYXAgc3RvcmVzIDMgcGllY2VzIG9mIGluZm9ybWF0aW9uOlxuICAgICAgLy8ga2V5OiBpdGVtcyBhcnJheSBvYmplY3RcbiAgICAgIC8vIHZhbHVlOiBpdGVtcyBhcnJheSBpbmRleFxuICAgICAgLy8gb3JkZXI6IHNlbGVjdGVkIGFycmF5IGluZGV4XG4gICAgICB0aGlzLl9fc2VsZWN0ZWRNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAvLyBJbml0aWFsaXplIHNlbGVjdGlvblxuICAgICAgdGhpcy5zZWxlY3RlZCA9IHRoaXMubXVsdGkgPyBbXSA6IG51bGw7XG4gICAgICB0aGlzLnNlbGVjdGVkSXRlbSA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBpdGVtIGlzIGN1cnJlbnRseSBzZWxlY3RlZC5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7Kn0gaXRlbSBJdGVtIGZyb20gYGl0ZW1zYCBhcnJheSB0byB0ZXN0XG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgaXRlbSBpcyBzZWxlY3RlZFxuICAgICAqL1xuICAgIGlzU2VsZWN0ZWQoaXRlbSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19zZWxlY3RlZE1hcC5oYXMoaXRlbSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBpdGVtIGlzIGN1cnJlbnRseSBzZWxlY3RlZC5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpZHggSW5kZXggZnJvbSBgaXRlbXNgIGFycmF5IHRvIHRlc3RcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBpdGVtIGlzIHNlbGVjdGVkXG4gICAgICovXG4gICAgaXNJbmRleFNlbGVjdGVkKGlkeCkge1xuICAgICAgcmV0dXJuIHRoaXMuaXNTZWxlY3RlZCh0aGlzLml0ZW1zW2lkeF0pO1xuICAgIH1cblxuICAgIF9fZGVzZWxlY3RDaGFuZ2VkSWR4KGlkeCkge1xuICAgICAgbGV0IHNpZHggPSB0aGlzLl9fc2VsZWN0ZWRJbmRleEZvckl0ZW1JbmRleChpZHgpO1xuICAgICAgaWYgKHNpZHggPj0gMCkge1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIHRoaXMuX19zZWxlY3RlZE1hcC5mb3JFYWNoKChpZHgsIGl0ZW0pID0+IHtcbiAgICAgICAgICBpZiAoc2lkeCA9PSBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuZGVzZWxlY3QoaXRlbSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfX3NlbGVjdGVkSW5kZXhGb3JJdGVtSW5kZXgoaWR4KSB7XG4gICAgICBsZXQgc2VsZWN0ZWQgPSB0aGlzLl9fZGF0YUxpbmtlZFBhdGhzW2Ake0pTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ2l0ZW1zJywgdGhpcyl9LiR7aWR4fWBdO1xuICAgICAgaWYgKHNlbGVjdGVkKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludChzZWxlY3RlZC5zbGljZShgJHtKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdzZWxlY3RlZCcsIHRoaXMpfS5gLmxlbmd0aCksIDEwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXNlbGVjdHMgdGhlIGdpdmVuIGl0ZW0gaWYgaXQgaXMgYWxyZWFkeSBzZWxlY3RlZC5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7Kn0gaXRlbSBJdGVtIGZyb20gYGl0ZW1zYCBhcnJheSB0byBkZXNlbGVjdFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgZGVzZWxlY3QoaXRlbSkge1xuICAgICAgbGV0IGlkeCA9IHRoaXMuX19zZWxlY3RlZE1hcC5nZXQoaXRlbSk7XG4gICAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgICAgdGhpcy5fX3NlbGVjdGVkTWFwLmRlbGV0ZShpdGVtKTtcbiAgICAgICAgbGV0IHNpZHg7XG4gICAgICAgIGlmICh0aGlzLm11bHRpKSB7XG4gICAgICAgICAgc2lkeCA9IHRoaXMuX19zZWxlY3RlZEluZGV4Rm9ySXRlbUluZGV4KGlkeCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fX3VwZGF0ZUxpbmtzKCk7XG4gICAgICAgIGlmICh0aGlzLm11bHRpKSB7XG4gICAgICAgICAgdGhpcy5zcGxpY2UoSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnc2VsZWN0ZWQnLCB0aGlzKSwgc2lkeCwgMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zZWxlY3RlZCA9IHRoaXMuc2VsZWN0ZWRJdGVtID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc2VsZWN0cyB0aGUgZ2l2ZW4gaW5kZXggaWYgaXQgaXMgYWxyZWFkeSBzZWxlY3RlZC5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpZHggSW5kZXggZnJvbSBgaXRlbXNgIGFycmF5IHRvIGRlc2VsZWN0XG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBkZXNlbGVjdEluZGV4KGlkeCkge1xuICAgICAgdGhpcy5kZXNlbGVjdCh0aGlzLml0ZW1zW2lkeF0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbGVjdHMgdGhlIGdpdmVuIGl0ZW0uICBXaGVuIGB0b2dnbGVgIGlzIHRydWUsIHRoaXMgd2lsbCBhdXRvbWF0aWNhbGx5XG4gICAgICogZGVzZWxlY3QgdGhlIGl0ZW0gaWYgYWxyZWFkeSBzZWxlY3RlZC5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7Kn0gaXRlbSBJdGVtIGZyb20gYGl0ZW1zYCBhcnJheSB0byBzZWxlY3RcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIHNlbGVjdChpdGVtKSB7XG4gICAgICB0aGlzLnNlbGVjdEluZGV4KHRoaXMuaXRlbXMuaW5kZXhPZihpdGVtKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VsZWN0cyB0aGUgZ2l2ZW4gaW5kZXguICBXaGVuIGB0b2dnbGVgIGlzIHRydWUsIHRoaXMgd2lsbCBhdXRvbWF0aWNhbGx5XG4gICAgICogZGVzZWxlY3QgdGhlIGl0ZW0gaWYgYWxyZWFkeSBzZWxlY3RlZC5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpZHggSW5kZXggZnJvbSBgaXRlbXNgIGFycmF5IHRvIHNlbGVjdFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgc2VsZWN0SW5kZXgoaWR4KSB7XG4gICAgICBsZXQgaXRlbSA9IHRoaXMuaXRlbXNbaWR4XTtcbiAgICAgIGlmICghdGhpcy5pc1NlbGVjdGVkKGl0ZW0pKSB7XG4gICAgICAgIGlmICghdGhpcy5tdWx0aSkge1xuICAgICAgICAgIHRoaXMuX19zZWxlY3RlZE1hcC5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX19zZWxlY3RlZE1hcC5zZXQoaXRlbSwgaWR4KTtcbiAgICAgICAgdGhpcy5fX3VwZGF0ZUxpbmtzKCk7XG4gICAgICAgIGlmICh0aGlzLm11bHRpKSB7XG4gICAgICAgICAgdGhpcy5wdXNoKEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ3NlbGVjdGVkJywgdGhpcyksIGl0ZW0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc2VsZWN0ZWQgPSB0aGlzLnNlbGVjdGVkSXRlbSA9IGl0ZW07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy50b2dnbGUpIHtcbiAgICAgICAgdGhpcy5kZXNlbGVjdEluZGV4KGlkeCk7XG4gICAgICB9XG4gICAgfVxuXG4gIH1cblxuICByZXR1cm4gQXJyYXlTZWxlY3Rvck1peGluO1xuXG59KTtcblxuLy8gZXhwb3J0IG1peGluXG5leHBvcnQgeyBBcnJheVNlbGVjdG9yTWl4aW4gfTtcblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIHtQb2x5bWVyRWxlbWVudH1cbiAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX0FycmF5U2VsZWN0b3JNaXhpbn1cbiAqIEBwcml2YXRlXG4gKi9cbmxldCBiYXNlQXJyYXlTZWxlY3RvciA9IEFycmF5U2VsZWN0b3JNaXhpbihQb2x5bWVyRWxlbWVudCk7XG5cbi8qKlxuICogRWxlbWVudCBpbXBsZW1lbnRpbmcgdGhlIGBBcnJheVNlbGVjdG9yYCBtaXhpbiwgd2hpY2ggcmVjb3Jkc1xuICogZHluYW1pYyBhc3NvY2lhdGlvbnMgYmV0d2VlbiBpdGVtIHBhdGhzIGluIGEgbWFzdGVyIGBpdGVtc2AgYXJyYXkgYW5kIGFcbiAqIGBzZWxlY3RlZGAgYXJyYXkgc3VjaCB0aGF0IHBhdGggY2hhbmdlcyB0byB0aGUgbWFzdGVyIGFycmF5IChhdCB0aGUgaG9zdClcbiAqIGVsZW1lbnQgb3IgZWxzZXdoZXJlIHZpYSBkYXRhLWJpbmRpbmcpIGFyZSBjb3JyZWN0bHkgcHJvcGFnYXRlZCB0byBpdGVtc1xuICogaW4gdGhlIHNlbGVjdGVkIGFycmF5IGFuZCB2aWNlLXZlcnNhLlxuICpcbiAqIFRoZSBgaXRlbXNgIHByb3BlcnR5IGFjY2VwdHMgYW4gYXJyYXkgb2YgdXNlciBkYXRhLCBhbmQgdmlhIHRoZVxuICogYHNlbGVjdChpdGVtKWAgYW5kIGBkZXNlbGVjdChpdGVtKWAgQVBJLCB1cGRhdGVzIHRoZSBgc2VsZWN0ZWRgIHByb3BlcnR5XG4gKiB3aGljaCBtYXkgYmUgYm91bmQgdG8gb3RoZXIgcGFydHMgb2YgdGhlIGFwcGxpY2F0aW9uLCBhbmQgYW55IGNoYW5nZXMgdG9cbiAqIHN1Yi1maWVsZHMgb2YgYHNlbGVjdGVkYCBpdGVtKHMpIHdpbGwgYmUga2VwdCBpbiBzeW5jIHdpdGggaXRlbXMgaW4gdGhlXG4gKiBgaXRlbXNgIGFycmF5LiAgV2hlbiBgbXVsdGlgIGlzIGZhbHNlLCBgc2VsZWN0ZWRgIGlzIGEgcHJvcGVydHlcbiAqIHJlcHJlc2VudGluZyB0aGUgbGFzdCBzZWxlY3RlZCBpdGVtLiAgV2hlbiBgbXVsdGlgIGlzIHRydWUsIGBzZWxlY3RlZGBcbiAqIGlzIGFuIGFycmF5IG9mIG11bHRpcGx5IHNlbGVjdGVkIGl0ZW1zLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIGltcG9ydCB7UG9seW1lckVsZW1lbnR9IGZyb20gJ0Bwb2x5bWVyL3BvbHltZXInO1xuICogaW1wb3J0ICdAcG9seW1lci9wb2x5bWVyL2xpYi9lbGVtZW50cy9hcnJheS1zZWxlY3Rvci5qcyc7XG4gKlxuICogY2xhc3MgRW1wbG95ZWVMaXN0IGV4dGVuZHMgUG9seW1lckVsZW1lbnQge1xuICogICBzdGF0aWMgZ2V0IF90ZW1wbGF0ZSgpIHtcbiAqICAgICByZXR1cm4gaHRtbGBcbiAqICAgICAgICAgPGRpdj4gRW1wbG95ZWUgbGlzdDogPC9kaXY+XG4gKiAgICAgICAgIDxkb20tcmVwZWF0IGlkPVwiZW1wbG95ZWVMaXN0XCIgaXRlbXM9XCJ7e2VtcGxveWVlc319XCI+XG4gKiAgICAgICAgICAgPHRlbXBsYXRlPlxuICogICAgICAgICAgICAgPGRpdj5GaXJzdCBuYW1lOiA8c3Bhbj57e2l0ZW0uZmlyc3R9fTwvc3Bhbj48L2Rpdj5cbiAqICAgICAgICAgICAgICAgPGRpdj5MYXN0IG5hbWU6IDxzcGFuPnt7aXRlbS5sYXN0fX08L3NwYW4+PC9kaXY+XG4gKiAgICAgICAgICAgICAgIDxidXR0b24gb24tY2xpY2s9XCJ0b2dnbGVTZWxlY3Rpb25cIj5TZWxlY3Q8L2J1dHRvbj5cbiAqICAgICAgICAgICA8L3RlbXBsYXRlPlxuICogICAgICAgICA8L2RvbS1yZXBlYXQ+XG4gKlxuICogICAgICAgICA8YXJyYXktc2VsZWN0b3IgaWQ9XCJzZWxlY3RvclwiXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcz1cInt7ZW1wbG95ZWVzfX1cIlxuICogICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQ9XCJ7e3NlbGVjdGVkfX1cIlxuICogICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGkgdG9nZ2xlPjwvYXJyYXktc2VsZWN0b3I+XG4gKlxuICogICAgICAgICA8ZGl2PiBTZWxlY3RlZCBlbXBsb3llZXM6IDwvZGl2PlxuICogICAgICAgICA8ZG9tLXJlcGVhdCBpdGVtcz1cInt7c2VsZWN0ZWR9fVwiPlxuICogICAgICAgICAgIDx0ZW1wbGF0ZT5cbiAqICAgICAgICAgICAgIDxkaXY+Rmlyc3QgbmFtZTogPHNwYW4+e3tpdGVtLmZpcnN0fX08L3NwYW4+PC9kaXY+XG4gKiAgICAgICAgICAgICA8ZGl2Pkxhc3QgbmFtZTogPHNwYW4+e3tpdGVtLmxhc3R9fTwvc3Bhbj48L2Rpdj5cbiAqICAgICAgICAgICA8L3RlbXBsYXRlPlxuICogICAgICAgICA8L2RvbS1yZXBlYXQ+YDtcbiAqICAgfVxuICogICBzdGF0aWMgZ2V0IGlzKCkgeyByZXR1cm4gJ2VtcGxveWVlLWxpc3QnOyB9XG4gKiAgIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcbiAqICAgICByZXR1cm4ge1xuICogICAgICAgZW1wbG95ZWVzOiB7XG4gKiAgICAgICAgIHZhbHVlKCkge1xuICogICAgICAgICAgIHJldHVybiBbXG4gKiAgICAgICAgICAgICB7Zmlyc3Q6ICdCb2InLCBsYXN0OiAnU21pdGgnfSxcbiAqICAgICAgICAgICAgIHtmaXJzdDogJ1NhbGx5JywgbGFzdDogJ0pvaG5zb24nfSxcbiAqICAgICAgICAgICAgIC4uLlxuICogICAgICAgICAgIF07XG4gKiAgICAgICAgIH1cbiAqICAgICAgIH1cbiAqICAgICB9O1xuICogICB9XG4gKiAgIHRvZ2dsZVNlbGVjdGlvbihlKSB7XG4gKiAgICAgY29uc3QgaXRlbSA9IHRoaXMuJC5lbXBsb3llZUxpc3QuaXRlbUZvckVsZW1lbnQoZS50YXJnZXQpO1xuICogICAgIHRoaXMuJC5zZWxlY3Rvci5zZWxlY3QoaXRlbSk7XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwb2x5bWVyXG4gKiBAY3VzdG9tRWxlbWVudFxuICogQGV4dGVuZHMge2Jhc2VBcnJheVNlbGVjdG9yfVxuICogQGFwcGxpZXNNaXhpbiBBcnJheVNlbGVjdG9yTWl4aW5cbiAqIEBzdW1tYXJ5IEN1c3RvbSBlbGVtZW50IHRoYXQgbGlua3MgcGF0aHMgYmV0d2VlbiBhbiBpbnB1dCBgaXRlbXNgIGFycmF5IGFuZFxuICogICBhbiBvdXRwdXQgYHNlbGVjdGVkYCBpdGVtIG9yIGFycmF5IGJhc2VkIG9uIGNhbGxzIHRvIGl0cyBzZWxlY3Rpb24gQVBJLlxuICovXG5jbGFzcyBBcnJheVNlbGVjdG9yIGV4dGVuZHMgYmFzZUFycmF5U2VsZWN0b3Ige1xuICAvLyBOb3QgbmVlZGVkIHRvIGZpbmQgdGVtcGxhdGU7IGNhbiBiZSByZW1vdmVkIG9uY2UgdGhlIGFuYWx5emVyXG4gIC8vIGNhbiBmaW5kIHRoZSB0YWcgbmFtZSBmcm9tIGN1c3RvbUVsZW1lbnRzLmRlZmluZSBjYWxsXG4gIHN0YXRpYyBnZXQgaXMoKSB7IHJldHVybiAnYXJyYXktc2VsZWN0b3InOyB9XG4gIHN0YXRpYyBnZXQgdGVtcGxhdGUoKSB7IHJldHVybiBudWxsOyB9XG59XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoQXJyYXlTZWxlY3Rvci5pcywgQXJyYXlTZWxlY3Rvcik7XG5leHBvcnQgeyBBcnJheVNlbGVjdG9yIH07XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaW1wb3J0IHsgTXV0YWJsZURhdGEgfSBmcm9tICcuLi9taXhpbnMvbXV0YWJsZS1kYXRhLmpzJztcblxubGV0IG11dGFibGVQcm9wZXJ0eUNoYW5nZTtcbi8qKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfSAqL1xuKCgpID0+IHtcbiAgbXV0YWJsZVByb3BlcnR5Q2hhbmdlID0gTXV0YWJsZURhdGEuX211dGFibGVQcm9wZXJ0eUNoYW5nZTtcbn0pKCk7XG5cbi8qKlxuICogTGVnYWN5IGVsZW1lbnQgYmVoYXZpb3IgdG8gc2tpcCBzdHJpY3QgZGlydHktY2hlY2tpbmcgZm9yIG9iamVjdHMgYW5kIGFycmF5cyxcbiAqIChhbHdheXMgY29uc2lkZXIgdGhlbSB0byBiZSBcImRpcnR5XCIpIGZvciB1c2Ugb24gbGVnYWN5IEFQSSBQb2x5bWVyIGVsZW1lbnRzLlxuICpcbiAqIEJ5IGRlZmF1bHQsIGBQb2x5bWVyLlByb3BlcnR5RWZmZWN0c2AgcGVyZm9ybXMgc3RyaWN0IGRpcnR5IGNoZWNraW5nIG9uXG4gKiBvYmplY3RzLCB3aGljaCBtZWFucyB0aGF0IGFueSBkZWVwIG1vZGlmaWNhdGlvbnMgdG8gYW4gb2JqZWN0IG9yIGFycmF5IHdpbGxcbiAqIG5vdCBiZSBwcm9wYWdhdGVkIHVubGVzcyBcImltbXV0YWJsZVwiIGRhdGEgcGF0dGVybnMgYXJlIHVzZWQgKGkuZS4gYWxsIG9iamVjdFxuICogcmVmZXJlbmNlcyBmcm9tIHRoZSByb290IHRvIHRoZSBtdXRhdGlvbiB3ZXJlIGNoYW5nZWQpLlxuICpcbiAqIFBvbHltZXIgYWxzbyBwcm92aWRlcyBhIHByb3ByaWV0YXJ5IGRhdGEgbXV0YXRpb24gYW5kIHBhdGggbm90aWZpY2F0aW9uIEFQSVxuICogKGUuZy4gYG5vdGlmeVBhdGhgLCBgc2V0YCwgYW5kIGFycmF5IG11dGF0aW9uIEFQSSdzKSB0aGF0IGFsbG93IGVmZmljaWVudFxuICogbXV0YXRpb24gYW5kIG5vdGlmaWNhdGlvbiBvZiBkZWVwIGNoYW5nZXMgaW4gYW4gb2JqZWN0IGdyYXBoIHRvIGFsbCBlbGVtZW50c1xuICogYm91bmQgdG8gdGhlIHNhbWUgb2JqZWN0IGdyYXBoLlxuICpcbiAqIEluIGNhc2VzIHdoZXJlIG5laXRoZXIgaW1tdXRhYmxlIHBhdHRlcm5zIG5vciB0aGUgZGF0YSBtdXRhdGlvbiBBUEkgY2FuIGJlXG4gKiB1c2VkLCBhcHBseWluZyB0aGlzIG1peGluIHdpbGwgY2F1c2UgUG9seW1lciB0byBza2lwIGRpcnR5IGNoZWNraW5nIGZvclxuICogb2JqZWN0cyBhbmQgYXJyYXlzIChhbHdheXMgY29uc2lkZXIgdGhlbSB0byBiZSBcImRpcnR5XCIpLiAgVGhpcyBhbGxvd3MgYVxuICogdXNlciB0byBtYWtlIGEgZGVlcCBtb2RpZmljYXRpb24gdG8gYSBib3VuZCBvYmplY3QgZ3JhcGgsIGFuZCB0aGVuIGVpdGhlclxuICogc2ltcGx5IHJlLXNldCB0aGUgb2JqZWN0IChlLmcuIGB0aGlzLml0ZW1zID0gdGhpcy5pdGVtc2ApIG9yIGNhbGwgYG5vdGlmeVBhdGhgXG4gKiAoZS5nLiBgdGhpcy5ub3RpZnlQYXRoKCdpdGVtcycpYCkgdG8gdXBkYXRlIHRoZSB0cmVlLiAgTm90ZSB0aGF0IGFsbFxuICogZWxlbWVudHMgdGhhdCB3aXNoIHRvIGJlIHVwZGF0ZWQgYmFzZWQgb24gZGVlcCBtdXRhdGlvbnMgbXVzdCBhcHBseSB0aGlzXG4gKiBtaXhpbiBvciBvdGhlcndpc2Ugc2tpcCBzdHJpY3QgZGlydHkgY2hlY2tpbmcgZm9yIG9iamVjdHMvYXJyYXlzLlxuICogU3BlY2lmaWNhbGx5LCBhbnkgZWxlbWVudHMgaW4gdGhlIGJpbmRpbmcgdHJlZSBiZXR3ZWVuIHRoZSBzb3VyY2Ugb2YgYVxuICogbXV0YXRpb24gYW5kIHRoZSBjb25zdW1wdGlvbiBvZiBpdCBtdXN0IGFwcGx5IHRoaXMgYmVoYXZpb3Igb3IgZW5hYmxlIHRoZVxuICogYFBvbHltZXIuT3B0aW9uYWxNdXRhYmxlRGF0YUJlaGF2aW9yYC5cbiAqXG4gKiBJbiBvcmRlciB0byBtYWtlIHRoZSBkaXJ0eSBjaGVjayBzdHJhdGVneSBjb25maWd1cmFibGUsIHNlZVxuICogYFBvbHltZXIuT3B0aW9uYWxNdXRhYmxlRGF0YUJlaGF2aW9yYC5cbiAqXG4gKiBOb3RlLCB0aGUgcGVyZm9ybWFuY2UgY2hhcmFjdGVyaXN0aWNzIG9mIHByb3BhZ2F0aW5nIGxhcmdlIG9iamVjdCBncmFwaHNcbiAqIHdpbGwgYmUgd29yc2UgYXMgb3Bwb3NlZCB0byB1c2luZyBzdHJpY3QgZGlydHkgY2hlY2tpbmcgd2l0aCBpbW11dGFibGVcbiAqIHBhdHRlcm5zIG9yIFBvbHltZXIncyBwYXRoIG5vdGlmaWNhdGlvbiBBUEkuXG4gKlxuICogQHBvbHltZXJCZWhhdmlvclxuICogQHN1bW1hcnkgQmVoYXZpb3IgdG8gc2tpcCBzdHJpY3QgZGlydHktY2hlY2tpbmcgZm9yIG9iamVjdHMgYW5kXG4gKiAgIGFycmF5c1xuICovXG5leHBvcnQgY29uc3QgTXV0YWJsZURhdGFCZWhhdmlvciA9IHtcblxuICAvKipcbiAgICogT3ZlcnJpZGVzIGBQb2x5bWVyLlByb3BlcnR5RWZmZWN0c2AgdG8gcHJvdmlkZSBvcHRpb24gZm9yIHNraXBwaW5nXG4gICAqIHN0cmljdCBlcXVhbGl0eSBjaGVja2luZyBmb3IgT2JqZWN0cyBhbmQgQXJyYXlzLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBwdWxscyB0aGUgdmFsdWUgdG8gZGlydHkgY2hlY2sgYWdhaW5zdCBmcm9tIHRoZSBgX19kYXRhVGVtcGBcbiAgICogY2FjaGUgKHJhdGhlciB0aGFuIHRoZSBub3JtYWwgYF9fZGF0YWAgY2FjaGUpIGZvciBPYmplY3RzLiAgU2luY2UgdGhlIHRlbXBcbiAgICogY2FjaGUgaXMgY2xlYXJlZCBhdCB0aGUgZW5kIG9mIGEgdHVybiwgdGhpcyBpbXBsZW1lbnRhdGlvbiBhbGxvd3NcbiAgICogc2lkZS1lZmZlY3RzIG9mIGRlZXAgb2JqZWN0IGNoYW5nZXMgdG8gYmUgcHJvY2Vzc2VkIGJ5IHJlLXNldHRpbmcgdGhlXG4gICAqIHNhbWUgb2JqZWN0ICh1c2luZyB0aGUgdGVtcCBjYWNoZSBhcyBhbiBpbi10dXJuIGJhY2tzdG9wIHRvIHByZXZlbnRcbiAgICogY3ljbGVzIGR1ZSB0byAyLXdheSBub3RpZmljYXRpb24pLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlIE5ldyBwcm9wZXJ0eSB2YWx1ZVxuICAgKiBAcGFyYW0geyp9IG9sZCBQcmV2aW91cyBwcm9wZXJ0eSB2YWx1ZVxuICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBzaG91bGQgYmUgY29uc2lkZXJlZCBhIGNoYW5nZVxuICAgKiBAcHJvdGVjdGVkXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgX3Nob3VsZFByb3BlcnR5Q2hhbmdlKHByb3BlcnR5LCB2YWx1ZSwgb2xkKSB7XG4gICAgcmV0dXJuIG11dGFibGVQcm9wZXJ0eUNoYW5nZSh0aGlzLCBwcm9wZXJ0eSwgdmFsdWUsIG9sZCwgdHJ1ZSk7XG4gIH1cbn07XG5cbi8qKlxuICogTGVnYWN5IGVsZW1lbnQgYmVoYXZpb3IgdG8gYWRkIHRoZSBvcHRpb25hbCBhYmlsaXR5IHRvIHNraXAgc3RyaWN0XG4gKiBkaXJ0eS1jaGVja2luZyBmb3Igb2JqZWN0cyBhbmQgYXJyYXlzIChhbHdheXMgY29uc2lkZXIgdGhlbSB0byBiZVxuICogXCJkaXJ0eVwiKSBieSBzZXR0aW5nIGEgYG11dGFibGUtZGF0YWAgYXR0cmlidXRlIG9uIGFuIGVsZW1lbnQgaW5zdGFuY2UuXG4gKlxuICogQnkgZGVmYXVsdCwgYFBvbHltZXIuUHJvcGVydHlFZmZlY3RzYCBwZXJmb3JtcyBzdHJpY3QgZGlydHkgY2hlY2tpbmcgb25cbiAqIG9iamVjdHMsIHdoaWNoIG1lYW5zIHRoYXQgYW55IGRlZXAgbW9kaWZpY2F0aW9ucyB0byBhbiBvYmplY3Qgb3IgYXJyYXkgd2lsbFxuICogbm90IGJlIHByb3BhZ2F0ZWQgdW5sZXNzIFwiaW1tdXRhYmxlXCIgZGF0YSBwYXR0ZXJucyBhcmUgdXNlZCAoaS5lLiBhbGwgb2JqZWN0XG4gKiByZWZlcmVuY2VzIGZyb20gdGhlIHJvb3QgdG8gdGhlIG11dGF0aW9uIHdlcmUgY2hhbmdlZCkuXG4gKlxuICogUG9seW1lciBhbHNvIHByb3ZpZGVzIGEgcHJvcHJpZXRhcnkgZGF0YSBtdXRhdGlvbiBhbmQgcGF0aCBub3RpZmljYXRpb24gQVBJXG4gKiAoZS5nLiBgbm90aWZ5UGF0aGAsIGBzZXRgLCBhbmQgYXJyYXkgbXV0YXRpb24gQVBJJ3MpIHRoYXQgYWxsb3cgZWZmaWNpZW50XG4gKiBtdXRhdGlvbiBhbmQgbm90aWZpY2F0aW9uIG9mIGRlZXAgY2hhbmdlcyBpbiBhbiBvYmplY3QgZ3JhcGggdG8gYWxsIGVsZW1lbnRzXG4gKiBib3VuZCB0byB0aGUgc2FtZSBvYmplY3QgZ3JhcGguXG4gKlxuICogSW4gY2FzZXMgd2hlcmUgbmVpdGhlciBpbW11dGFibGUgcGF0dGVybnMgbm9yIHRoZSBkYXRhIG11dGF0aW9uIEFQSSBjYW4gYmVcbiAqIHVzZWQsIGFwcGx5aW5nIHRoaXMgbWl4aW4gd2lsbCBhbGxvdyBQb2x5bWVyIHRvIHNraXAgZGlydHkgY2hlY2tpbmcgZm9yXG4gKiBvYmplY3RzIGFuZCBhcnJheXMgKGFsd2F5cyBjb25zaWRlciB0aGVtIHRvIGJlIFwiZGlydHlcIikuICBUaGlzIGFsbG93cyBhXG4gKiB1c2VyIHRvIG1ha2UgYSBkZWVwIG1vZGlmaWNhdGlvbiB0byBhIGJvdW5kIG9iamVjdCBncmFwaCwgYW5kIHRoZW4gZWl0aGVyXG4gKiBzaW1wbHkgcmUtc2V0IHRoZSBvYmplY3QgKGUuZy4gYHRoaXMuaXRlbXMgPSB0aGlzLml0ZW1zYCkgb3IgY2FsbCBgbm90aWZ5UGF0aGBcbiAqIChlLmcuIGB0aGlzLm5vdGlmeVBhdGgoJ2l0ZW1zJylgKSB0byB1cGRhdGUgdGhlIHRyZWUuICBOb3RlIHRoYXQgYWxsXG4gKiBlbGVtZW50cyB0aGF0IHdpc2ggdG8gYmUgdXBkYXRlZCBiYXNlZCBvbiBkZWVwIG11dGF0aW9ucyBtdXN0IGFwcGx5IHRoaXNcbiAqIG1peGluIG9yIG90aGVyd2lzZSBza2lwIHN0cmljdCBkaXJ0eSBjaGVja2luZyBmb3Igb2JqZWN0cy9hcnJheXMuXG4gKiBTcGVjaWZpY2FsbHksIGFueSBlbGVtZW50cyBpbiB0aGUgYmluZGluZyB0cmVlIGJldHdlZW4gdGhlIHNvdXJjZSBvZiBhXG4gKiBtdXRhdGlvbiBhbmQgdGhlIGNvbnN1bXB0aW9uIG9mIGl0IG11c3QgZW5hYmxlIHRoaXMgYmVoYXZpb3Igb3IgYXBwbHkgdGhlXG4gKiBgUG9seW1lci5PcHRpb25hbE11dGFibGVEYXRhQmVoYXZpb3JgLlxuICpcbiAqIFdoaWxlIHRoaXMgYmVoYXZpb3IgYWRkcyB0aGUgYWJpbGl0eSB0byBmb3JnbyBPYmplY3QvQXJyYXkgZGlydHkgY2hlY2tpbmcsXG4gKiB0aGUgYG11dGFibGVEYXRhYCBmbGFnIGRlZmF1bHRzIHRvIGZhbHNlIGFuZCBtdXN0IGJlIHNldCBvbiB0aGUgaW5zdGFuY2UuXG4gKlxuICogTm90ZSwgdGhlIHBlcmZvcm1hbmNlIGNoYXJhY3RlcmlzdGljcyBvZiBwcm9wYWdhdGluZyBsYXJnZSBvYmplY3QgZ3JhcGhzXG4gKiB3aWxsIGJlIHdvcnNlIGJ5IHJlbHlpbmcgb24gYG11dGFibGVEYXRhOiB0cnVlYCBhcyBvcHBvc2VkIHRvIHVzaW5nXG4gKiBzdHJpY3QgZGlydHkgY2hlY2tpbmcgd2l0aCBpbW11dGFibGUgcGF0dGVybnMgb3IgUG9seW1lcidzIHBhdGggbm90aWZpY2F0aW9uXG4gKiBBUEkuXG4gKlxuICogQHBvbHltZXJCZWhhdmlvclxuICogQHN1bW1hcnkgQmVoYXZpb3IgdG8gb3B0aW9uYWxseSBza2lwIHN0cmljdCBkaXJ0eS1jaGVja2luZyBmb3Igb2JqZWN0cyBhbmRcbiAqICAgYXJyYXlzXG4gKi9cbmV4cG9ydCBjb25zdCBPcHRpb25hbE11dGFibGVEYXRhQmVoYXZpb3IgPSB7XG5cbiAgcHJvcGVydGllczoge1xuICAgIC8qKlxuICAgICAqIEluc3RhbmNlLWxldmVsIGZsYWcgZm9yIGNvbmZpZ3VyaW5nIHRoZSBkaXJ0eS1jaGVja2luZyBzdHJhdGVneVxuICAgICAqIGZvciB0aGlzIGVsZW1lbnQuICBXaGVuIHRydWUsIE9iamVjdHMgYW5kIEFycmF5cyB3aWxsIHNraXAgZGlydHlcbiAgICAgKiBjaGVja2luZywgb3RoZXJ3aXNlIHN0cmljdCBlcXVhbGl0eSBjaGVja2luZyB3aWxsIGJlIHVzZWQuXG4gICAgICovXG4gICAgbXV0YWJsZURhdGE6IEJvb2xlYW5cbiAgfSxcblxuICAvKipcbiAgICogT3ZlcnJpZGVzIGBQb2x5bWVyLlByb3BlcnR5RWZmZWN0c2AgdG8gc2tpcCBzdHJpY3QgZXF1YWxpdHkgY2hlY2tpbmdcbiAgICogZm9yIE9iamVjdHMgYW5kIEFycmF5cy5cbiAgICpcbiAgICogUHVsbHMgdGhlIHZhbHVlIHRvIGRpcnR5IGNoZWNrIGFnYWluc3QgZnJvbSB0aGUgYF9fZGF0YVRlbXBgIGNhY2hlXG4gICAqIChyYXRoZXIgdGhhbiB0aGUgbm9ybWFsIGBfX2RhdGFgIGNhY2hlKSBmb3IgT2JqZWN0cy4gIFNpbmNlIHRoZSB0ZW1wXG4gICAqIGNhY2hlIGlzIGNsZWFyZWQgYXQgdGhlIGVuZCBvZiBhIHR1cm4sIHRoaXMgaW1wbGVtZW50YXRpb24gYWxsb3dzXG4gICAqIHNpZGUtZWZmZWN0cyBvZiBkZWVwIG9iamVjdCBjaGFuZ2VzIHRvIGJlIHByb2Nlc3NlZCBieSByZS1zZXR0aW5nIHRoZVxuICAgKiBzYW1lIG9iamVjdCAodXNpbmcgdGhlIHRlbXAgY2FjaGUgYXMgYW4gaW4tdHVybiBiYWNrc3RvcCB0byBwcmV2ZW50XG4gICAqIGN5Y2xlcyBkdWUgdG8gMi13YXkgbm90aWZpY2F0aW9uKS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBOZXcgcHJvcGVydHkgdmFsdWVcbiAgICogQHBhcmFtIHsqfSBvbGQgUHJldmlvdXMgcHJvcGVydHkgdmFsdWVcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgcHJvcGVydHkgc2hvdWxkIGJlIGNvbnNpZGVyZWQgYSBjaGFuZ2VcbiAgICogQHByb3RlY3RlZFxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIF9zaG91bGRQcm9wZXJ0eUNoYW5nZShwcm9wZXJ0eSwgdmFsdWUsIG9sZCkge1xuICAgIHJldHVybiBtdXRhYmxlUHJvcGVydHlDaGFuZ2UodGhpcywgcHJvcGVydHksIHZhbHVlLCBvbGQsIHRoaXMubXV0YWJsZURhdGEpO1xuICB9XG59O1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuaW1wb3J0IHsgTGVnYWN5RWxlbWVudE1peGluIH0gZnJvbSAnLi9saWIvbGVnYWN5L2xlZ2FjeS1lbGVtZW50LW1peGluLmpzJztcbmV4cG9ydCB7IFBvbHltZXIgfSBmcm9tICAnLi9saWIvbGVnYWN5L3BvbHltZXItZm4uanMnO1xuLyogdGVtcGxhdGUgZWxlbWVudHMgKi9cbmltcG9ydCAnLi9saWIvbGVnYWN5L3RlbXBsYXRpemVyLWJlaGF2aW9yLmpzJztcbmltcG9ydCAnLi9saWIvZWxlbWVudHMvZG9tLWJpbmQuanMnO1xuaW1wb3J0ICcuL2xpYi9lbGVtZW50cy9kb20tcmVwZWF0LmpzJztcbmltcG9ydCAnLi9saWIvZWxlbWVudHMvZG9tLWlmLmpzJztcbmltcG9ydCAnLi9saWIvZWxlbWVudHMvYXJyYXktc2VsZWN0b3IuanMnO1xuLyogY3VzdG9tLXN0eWxlICovXG5pbXBvcnQgJy4vbGliL2VsZW1lbnRzL2N1c3RvbS1zdHlsZS5qcyc7XG4vKiBiYyBiZWhhdmlvcnMgKi9cbmltcG9ydCAnLi9saWIvbGVnYWN5L211dGFibGUtZGF0YS1iZWhhdmlvci5qcyc7XG4vKiBpbXBvcnQgaHRtbC10YWcgdG8gZXhwb3J0IGh0bWwgKi9cbmV4cG9ydCB7IGh0bWwgfSBmcm9tICcuL2xpYi91dGlscy9odG1sLXRhZy5qcyc7XG5cbi8vIGJjXG5leHBvcnQgY29uc3QgQmFzZSA9IExlZ2FjeUVsZW1lbnRNaXhpbihIVE1MRWxlbWVudCkucHJvdG90eXBlO1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE1IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0IFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbmh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmVcbmZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0IENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzXG5wYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzbyBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50XG5mb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgJ0Bwb2x5bWVyL3BvbHltZXIvcG9seW1lci1sZWdhY3kuanMnO1xuXG5pbXBvcnQge2RvbX0gZnJvbSAnQHBvbHltZXIvcG9seW1lci9saWIvbGVnYWN5L3BvbHltZXIuZG9tLmpzJztcbmltcG9ydCB7dXNlU2hhZG93fSBmcm9tICdAcG9seW1lci9wb2x5bWVyL2xpYi91dGlscy9zZXR0aW5ncy5qcyc7XG5cbi8vIENvbnRhaW5zIGFsbCBjb25uZWN0ZWQgcmVzaXphYmxlcyB0aGF0IGRvIG5vdCBoYXZlIGEgcGFyZW50LlxudmFyIE9SUEhBTlMgPSBuZXcgU2V0KCk7XG5cbi8qKlxuICogYElyb25SZXNpemFibGVCZWhhdmlvcmAgaXMgYSBiZWhhdmlvciB0aGF0IGNhbiBiZSB1c2VkIGluIFBvbHltZXIgZWxlbWVudHMgdG9cbiAqIGNvb3JkaW5hdGUgdGhlIGZsb3cgb2YgcmVzaXplIGV2ZW50cyBiZXR3ZWVuIFwicmVzaXplcnNcIiAoZWxlbWVudHMgdGhhdFxuICpjb250cm9sIHRoZSBzaXplIG9yIGhpZGRlbiBzdGF0ZSBvZiB0aGVpciBjaGlsZHJlbikgYW5kIFwicmVzaXphYmxlc1wiIChlbGVtZW50c1xuICp0aGF0IG5lZWQgdG8gYmUgbm90aWZpZWQgd2hlbiB0aGV5IGFyZSByZXNpemVkIG9yIHVuLWhpZGRlbiBieSB0aGVpciBwYXJlbnRzXG4gKmluIG9yZGVyIHRvIHRha2UgYWN0aW9uIG9uIHRoZWlyIG5ldyBtZWFzdXJlbWVudHMpLlxuICpcbiAqIEVsZW1lbnRzIHRoYXQgcGVyZm9ybSBtZWFzdXJlbWVudCBzaG91bGQgYWRkIHRoZSBgSXJvblJlc2l6YWJsZUJlaGF2aW9yYFxuICpiZWhhdmlvciB0byB0aGVpciBlbGVtZW50IGRlZmluaXRpb24gYW5kIGxpc3RlbiBmb3IgdGhlIGBpcm9uLXJlc2l6ZWAgZXZlbnQgb25cbiAqdGhlbXNlbHZlcy4gVGhpcyBldmVudCB3aWxsIGJlIGZpcmVkIHdoZW4gdGhleSBiZWNvbWUgc2hvd2luZyBhZnRlciBoYXZpbmdcbiAqYmVlbiBoaWRkZW4sIHdoZW4gdGhleSBhcmUgcmVzaXplZCBleHBsaWNpdGx5IGJ5IGFub3RoZXIgcmVzaXphYmxlLCBvciB3aGVuXG4gKnRoZSB3aW5kb3cgaGFzIGJlZW4gcmVzaXplZC5cbiAqXG4gKiBOb3RlLCB0aGUgYGlyb24tcmVzaXplYCBldmVudCBpcyBub24tYnViYmxpbmcuXG4gKlxuICogQHBvbHltZXJCZWhhdmlvclxuICogQGRlbW8gZGVtby9pbmRleC5odG1sXG4gKiovXG5leHBvcnQgY29uc3QgSXJvblJlc2l6YWJsZUJlaGF2aW9yID0ge1xuICBwcm9wZXJ0aWVzOiB7XG4gICAgLyoqXG4gICAgICogVGhlIGNsb3Nlc3QgYW5jZXN0b3IgZWxlbWVudCB0aGF0IGltcGxlbWVudHMgYElyb25SZXNpemFibGVCZWhhdmlvcmAuXG4gICAgICovXG4gICAgX3BhcmVudFJlc2l6YWJsZToge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgb2JzZXJ2ZXI6ICdfcGFyZW50UmVzaXphYmxlQ2hhbmdlZCcsXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRydWUgaWYgdGhpcyBlbGVtZW50IGlzIGN1cnJlbnRseSBub3RpZnlpbmcgaXRzIGRlc2NlbmRhbnQgZWxlbWVudHMgb2ZcbiAgICAgKiByZXNpemUuXG4gICAgICovXG4gICAgX25vdGlmeWluZ0Rlc2NlbmRhbnQ6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICB2YWx1ZTogZmFsc2UsXG4gICAgfVxuICB9LFxuXG4gIGxpc3RlbmVyczoge1xuICAgICdpcm9uLXJlcXVlc3QtcmVzaXplLW5vdGlmaWNhdGlvbnMnOiAnX29uSXJvblJlcXVlc3RSZXNpemVOb3RpZmljYXRpb25zJ1xuICB9LFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgIC8vIFdlIGRvbid0IHJlYWxseSBuZWVkIHByb3BlcnR5IGVmZmVjdHMgb24gdGhlc2UsIGFuZCBhbHNvIHdlIHdhbnQgdGhlbVxuICAgIC8vIHRvIGJlIGNyZWF0ZWQgYmVmb3JlIHRoZSBgX3BhcmVudFJlc2l6YWJsZWAgb2JzZXJ2ZXIgZmlyZXM6XG4gICAgdGhpcy5faW50ZXJlc3RlZFJlc2l6YWJsZXMgPSBbXTtcbiAgICB0aGlzLl9ib3VuZE5vdGlmeVJlc2l6ZSA9IHRoaXMubm90aWZ5UmVzaXplLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fYm91bmRPbkRlc2NlbmRhbnRJcm9uUmVzaXplID0gdGhpcy5fb25EZXNjZW5kYW50SXJvblJlc2l6ZS5iaW5kKHRoaXMpO1xuICB9LFxuXG4gIGF0dGFjaGVkOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9yZXF1ZXN0UmVzaXplTm90aWZpY2F0aW9ucygpO1xuICB9LFxuXG4gIGRldGFjaGVkOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fcGFyZW50UmVzaXphYmxlKSB7XG4gICAgICB0aGlzLl9wYXJlbnRSZXNpemFibGUuc3RvcFJlc2l6ZU5vdGlmaWNhdGlvbnNGb3IodGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIE9SUEhBTlMuZGVsZXRlKHRoaXMpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuX2JvdW5kTm90aWZ5UmVzaXplKTtcbiAgICB9XG5cbiAgICB0aGlzLl9wYXJlbnRSZXNpemFibGUgPSBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDYW4gYmUgY2FsbGVkIHRvIG1hbnVhbGx5IG5vdGlmeSBhIHJlc2l6YWJsZSBhbmQgaXRzIGRlc2NlbmRhbnRcbiAgICogcmVzaXphYmxlcyBvZiBhIHJlc2l6ZSBjaGFuZ2UuXG4gICAqL1xuICBub3RpZnlSZXNpemU6IGZ1bmN0aW9uKCkge1xuICAgIGlmICghdGhpcy5pc0F0dGFjaGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5faW50ZXJlc3RlZFJlc2l6YWJsZXMuZm9yRWFjaChmdW5jdGlvbihyZXNpemFibGUpIHtcbiAgICAgIGlmICh0aGlzLnJlc2l6ZXJTaG91bGROb3RpZnkocmVzaXphYmxlKSkge1xuICAgICAgICB0aGlzLl9ub3RpZnlEZXNjZW5kYW50KHJlc2l6YWJsZSk7XG4gICAgICB9XG4gICAgfSwgdGhpcyk7XG5cbiAgICB0aGlzLl9maXJlUmVzaXplKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gYXNzaWduIHRoZSBjbG9zZXN0IHJlc2l6YWJsZSBhbmNlc3RvciB0byB0aGlzIHJlc2l6YWJsZVxuICAgKiBpZiB0aGUgYW5jZXN0b3IgZGV0ZWN0cyBhIHJlcXVlc3QgZm9yIG5vdGlmaWNhdGlvbnMuXG4gICAqL1xuICBhc3NpZ25QYXJlbnRSZXNpemFibGU6IGZ1bmN0aW9uKHBhcmVudFJlc2l6YWJsZSkge1xuICAgIGlmICh0aGlzLl9wYXJlbnRSZXNpemFibGUpIHtcbiAgICAgIHRoaXMuX3BhcmVudFJlc2l6YWJsZS5zdG9wUmVzaXplTm90aWZpY2F0aW9uc0Zvcih0aGlzKTtcbiAgICB9XG5cbiAgICB0aGlzLl9wYXJlbnRSZXNpemFibGUgPSBwYXJlbnRSZXNpemFibGU7XG5cbiAgICBpZiAocGFyZW50UmVzaXphYmxlICYmXG4gICAgICAgIHBhcmVudFJlc2l6YWJsZS5faW50ZXJlc3RlZFJlc2l6YWJsZXMuaW5kZXhPZih0aGlzKSA9PT0gLTEpIHtcbiAgICAgIHBhcmVudFJlc2l6YWJsZS5faW50ZXJlc3RlZFJlc2l6YWJsZXMucHVzaCh0aGlzKTtcbiAgICAgIHBhcmVudFJlc2l6YWJsZS5fc3Vic2NyaWJlSXJvblJlc2l6ZSh0aGlzKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gcmVtb3ZlIGEgcmVzaXphYmxlIGRlc2NlbmRhbnQgZnJvbSB0aGUgbGlzdCBvZiBkZXNjZW5kYW50c1xuICAgKiB0aGF0IHNob3VsZCBiZSBub3RpZmllZCBvZiBhIHJlc2l6ZSBjaGFuZ2UuXG4gICAqL1xuICBzdG9wUmVzaXplTm90aWZpY2F0aW9uc0ZvcjogZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5faW50ZXJlc3RlZFJlc2l6YWJsZXMuaW5kZXhPZih0YXJnZXQpO1xuXG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHRoaXMuX2ludGVyZXN0ZWRSZXNpemFibGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICB0aGlzLl91bnN1YnNjcmliZUlyb25SZXNpemUodGFyZ2V0KTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZSB0aGlzIGVsZW1lbnQgdG8gbGlzdGVuIHRvIGlyb24tcmVzaXplIGV2ZW50cyBvbiB0aGUgZ2l2ZW4gdGFyZ2V0LlxuICAgKlxuICAgKiBQcmVmZXJyZWQgb3ZlciB0YXJnZXQubGlzdGVuIGJlY2F1c2UgdGhlIHByb3BlcnR5IHJlbmFtZXIgZG9lcyBub3RcbiAgICogdW5kZXJzdGFuZCB0byByZW5hbWUgd2hlbiB0aGUgdGFyZ2V0IGlzIG5vdCBzcGVjaWZpY2FsbHkgXCJ0aGlzXCJcbiAgICpcbiAgICogQHBhcmFtIHshSFRNTEVsZW1lbnR9IHRhcmdldCBFbGVtZW50IHRvIGxpc3RlbiB0byBmb3IgaXJvbi1yZXNpemUgZXZlbnRzLlxuICAgKi9cbiAgX3N1YnNjcmliZUlyb25SZXNpemU6IGZ1bmN0aW9uKHRhcmdldCkge1xuICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdpcm9uLXJlc2l6ZScsIHRoaXMuX2JvdW5kT25EZXNjZW5kYW50SXJvblJlc2l6ZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVuc3Vic2NyaWJlIHRoaXMgZWxlbWVudCBmcm9tIGxpc3RlbmluZyB0byB0byBpcm9uLXJlc2l6ZSBldmVudHMgb24gdGhlXG4gICAqIGdpdmVuIHRhcmdldC5cbiAgICpcbiAgICogUHJlZmVycmVkIG92ZXIgdGFyZ2V0LnVubGlzdGVuIGJlY2F1c2UgdGhlIHByb3BlcnR5IHJlbmFtZXIgZG9lcyBub3RcbiAgICogdW5kZXJzdGFuZCB0byByZW5hbWUgd2hlbiB0aGUgdGFyZ2V0IGlzIG5vdCBzcGVjaWZpY2FsbHkgXCJ0aGlzXCJcbiAgICpcbiAgICogQHBhcmFtIHshSFRNTEVsZW1lbnR9IHRhcmdldCBFbGVtZW50IHRvIGxpc3RlbiB0byBmb3IgaXJvbi1yZXNpemUgZXZlbnRzLlxuICAgKi9cbiAgX3Vuc3Vic2NyaWJlSXJvblJlc2l6ZTogZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICdpcm9uLXJlc2l6ZScsIHRoaXMuX2JvdW5kT25EZXNjZW5kYW50SXJvblJlc2l6ZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBvdmVycmlkZGVuIHRvIGZpbHRlciBuZXN0ZWQgZWxlbWVudHMgdGhhdCBzaG91bGQgb3JcbiAgICogc2hvdWxkIG5vdCBiZSBub3RpZmllZCBieSB0aGUgY3VycmVudCBlbGVtZW50LiBSZXR1cm4gdHJ1ZSBpZiBhbiBlbGVtZW50XG4gICAqIHNob3VsZCBiZSBub3RpZmllZCwgb3IgZmFsc2UgaWYgaXQgc2hvdWxkIG5vdCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCBBIGNhbmRpZGF0ZSBkZXNjZW5kYW50IGVsZW1lbnQgdGhhdFxuICAgKiBpbXBsZW1lbnRzIGBJcm9uUmVzaXphYmxlQmVoYXZpb3JgLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBgZWxlbWVudGAgc2hvdWxkIGJlIG5vdGlmaWVkIG9mIHJlc2l6ZS5cbiAgICovXG4gIHJlc2l6ZXJTaG91bGROb3RpZnk6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcblxuICBfb25EZXNjZW5kYW50SXJvblJlc2l6ZTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBpZiAodGhpcy5fbm90aWZ5aW5nRGVzY2VuZGFudCkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gbm8gbmVlZCB0byB1c2UgdGhpcyBkdXJpbmcgc2hhZG93IGRvbSBiZWNhdXNlIG9mIGV2ZW50IHJldGFyZ2V0aW5nXG4gICAgaWYgKCF1c2VTaGFkb3cpIHtcbiAgICAgIHRoaXMuX2ZpcmVSZXNpemUoKTtcbiAgICB9XG4gIH0sXG5cbiAgX2ZpcmVSZXNpemU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuZmlyZSgnaXJvbi1yZXNpemUnLCBudWxsLCB7bm9kZTogdGhpcywgYnViYmxlczogZmFsc2V9KTtcbiAgfSxcblxuICBfb25Jcm9uUmVxdWVzdFJlc2l6ZU5vdGlmaWNhdGlvbnM6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIHRhcmdldCA9IC8qKiBAdHlwZSB7IUV2ZW50VGFyZ2V0fSAqLyAoZG9tKGV2ZW50KS5yb290VGFyZ2V0KTtcbiAgICBpZiAodGFyZ2V0ID09PSB0aGlzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFzc2lnblBhcmVudFJlc2l6YWJsZSh0aGlzKTtcbiAgICB0aGlzLl9ub3RpZnlEZXNjZW5kYW50KHRhcmdldCk7XG5cbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfSxcblxuICBfcGFyZW50UmVzaXphYmxlQ2hhbmdlZDogZnVuY3Rpb24ocGFyZW50UmVzaXphYmxlKSB7XG4gICAgaWYgKHBhcmVudFJlc2l6YWJsZSkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuX2JvdW5kTm90aWZ5UmVzaXplKTtcbiAgICB9XG4gIH0sXG5cbiAgX25vdGlmeURlc2NlbmRhbnQ6IGZ1bmN0aW9uKGRlc2NlbmRhbnQpIHtcbiAgICAvLyBOT1RFKGNkYXRhKTogSW4gSUUxMCwgYXR0YWNoZWQgaXMgZmlyZWQgb24gY2hpbGRyZW4gZmlyc3QsIHNvIGl0J3NcbiAgICAvLyBpbXBvcnRhbnQgbm90IHRvIG5vdGlmeSB0aGVtIGlmIHRoZSBwYXJlbnQgaXMgbm90IGF0dGFjaGVkIHlldCAob3JcbiAgICAvLyBlbHNlIHRoZXkgd2lsbCBnZXQgcmVkdW5kYW50bHkgbm90aWZpZWQgd2hlbiB0aGUgcGFyZW50IGF0dGFjaGVzKS5cbiAgICBpZiAoIXRoaXMuaXNBdHRhY2hlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX25vdGlmeWluZ0Rlc2NlbmRhbnQgPSB0cnVlO1xuICAgIGRlc2NlbmRhbnQubm90aWZ5UmVzaXplKCk7XG4gICAgdGhpcy5fbm90aWZ5aW5nRGVzY2VuZGFudCA9IGZhbHNlO1xuICB9LFxuXG4gIF9yZXF1ZXN0UmVzaXplTm90aWZpY2F0aW9uczogZnVuY3Rpb24oKSB7XG4gICAgaWYgKCF0aGlzLmlzQXR0YWNoZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2xvYWRpbmcnKSB7XG4gICAgICB2YXIgX3JlcXVlc3RSZXNpemVOb3RpZmljYXRpb25zID1cbiAgICAgICAgICB0aGlzLl9yZXF1ZXN0UmVzaXplTm90aWZpY2F0aW9ucy5iaW5kKHRoaXMpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAncmVhZHlzdGF0ZWNoYW5nZScsIGZ1bmN0aW9uIHJlYWR5c3RhdGVjaGFuZ2VkKCkge1xuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVhZHlzdGF0ZWNoYW5nZScsIHJlYWR5c3RhdGVjaGFuZ2VkKTtcbiAgICAgICAgICAgIF9yZXF1ZXN0UmVzaXplTm90aWZpY2F0aW9ucygpO1xuICAgICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9maW5kUGFyZW50KCk7XG5cbiAgICAgIGlmICghdGhpcy5fcGFyZW50UmVzaXphYmxlKSB7XG4gICAgICAgIC8vIElmIHRoaXMgcmVzaXphYmxlIGlzIGFuIG9ycGhhbiwgdGVsbCBvdGhlciBvcnBoYW5zIHRvIHRyeSB0byBmaW5kXG4gICAgICAgIC8vIHRoZWlyIHBhcmVudCBhZ2FpbiwgaW4gY2FzZSBpdCdzIHRoaXMgcmVzaXphYmxlLlxuICAgICAgICBPUlBIQU5TLmZvckVhY2goZnVuY3Rpb24ob3JwaGFuKSB7XG4gICAgICAgICAgaWYgKG9ycGhhbiAhPT0gdGhpcykge1xuICAgICAgICAgICAgb3JwaGFuLl9maW5kUGFyZW50KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCB0aGlzKTtcblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5fYm91bmROb3RpZnlSZXNpemUpO1xuICAgICAgICB0aGlzLm5vdGlmeVJlc2l6ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSWYgdGhpcyByZXNpemFibGUgaGFzIGEgcGFyZW50LCB0ZWxsIG90aGVyIGNoaWxkIHJlc2l6YWJsZXMgb2ZcbiAgICAgICAgLy8gdGhhdCBwYXJlbnQgdG8gdHJ5IGZpbmRpbmcgdGhlaXIgcGFyZW50IGFnYWluLCBpbiBjYXNlIGl0J3MgdGhpc1xuICAgICAgICAvLyByZXNpemFibGUuXG4gICAgICAgIHRoaXMuX3BhcmVudFJlc2l6YWJsZS5faW50ZXJlc3RlZFJlc2l6YWJsZXNcbiAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uKHJlc2l6YWJsZSkge1xuICAgICAgICAgICAgICBpZiAocmVzaXphYmxlICE9PSB0aGlzKSB7XG4gICAgICAgICAgICAgICAgcmVzaXphYmxlLl9maW5kUGFyZW50KCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBfZmluZFBhcmVudDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5hc3NpZ25QYXJlbnRSZXNpemFibGUobnVsbCk7XG4gICAgdGhpcy5maXJlKFxuICAgICAgICAnaXJvbi1yZXF1ZXN0LXJlc2l6ZS1ub3RpZmljYXRpb25zJyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAge25vZGU6IHRoaXMsIGJ1YmJsZXM6IHRydWUsIGNhbmNlbGFibGU6IHRydWV9KTtcblxuICAgIGlmICghdGhpcy5fcGFyZW50UmVzaXphYmxlKSB7XG4gICAgICBPUlBIQU5TLmFkZCh0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgT1JQSEFOUy5kZWxldGUodGhpcyk7XG4gICAgfVxuICB9XG59O1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0IFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbmh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmVcbmZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0IENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzXG5wYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzbyBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50XG5mb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgJ0Bwb2x5bWVyL3BvbHltZXIvcG9seW1lci1sZWdhY3kuanMnO1xuXG5pbXBvcnQge2RvbX0gZnJvbSAnQHBvbHltZXIvcG9seW1lci9saWIvbGVnYWN5L3BvbHltZXIuZG9tLmpzJztcblxuLyoqXG4gKiBgUG9seW1lci5Jcm9uU2Nyb2xsVGFyZ2V0QmVoYXZpb3JgIGFsbG93cyBhbiBlbGVtZW50IHRvIHJlc3BvbmQgdG8gc2Nyb2xsXG4gKiBldmVudHMgZnJvbSBhIGRlc2lnbmF0ZWQgc2Nyb2xsIHRhcmdldC5cbiAqXG4gKiBFbGVtZW50cyB0aGF0IGNvbnN1bWUgdGhpcyBiZWhhdmlvciBjYW4gb3ZlcnJpZGUgdGhlIGBfc2Nyb2xsSGFuZGxlcmBcbiAqIG1ldGhvZCB0byBhZGQgbG9naWMgb24gdGhlIHNjcm9sbCBldmVudC5cbiAqXG4gKiBAZGVtbyBkZW1vL3Njcm9sbGluZy1yZWdpb24uaHRtbCBTY3JvbGxpbmcgUmVnaW9uXG4gKiBAZGVtbyBkZW1vL2RvY3VtZW50Lmh0bWwgRG9jdW1lbnQgRWxlbWVudFxuICogQHBvbHltZXJCZWhhdmlvclxuICovXG5leHBvcnQgY29uc3QgSXJvblNjcm9sbFRhcmdldEJlaGF2aW9yID0ge1xuXG4gIHByb3BlcnRpZXM6IHtcblxuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgZWxlbWVudCB0aGF0IHdpbGwgaGFuZGxlIHRoZSBzY3JvbGwgZXZlbnRcbiAgICAgKiBvbiB0aGUgYmVoYWxmIG9mIHRoZSBjdXJyZW50IGVsZW1lbnQuIFRoaXMgaXMgdHlwaWNhbGx5IGEgcmVmZXJlbmNlIHRvIGFuXG4gICAgICplbGVtZW50LCBidXQgdGhlcmUgYXJlIGEgZmV3IG1vcmUgcG9zaWJpbGl0aWVzOlxuICAgICAqXG4gICAgICogIyMjIEVsZW1lbnRzIGlkXG4gICAgICpcbiAgICAgKmBgYGh0bWxcbiAgICAgKiA8ZGl2IGlkPVwic2Nyb2xsYWJsZS1lbGVtZW50XCIgc3R5bGU9XCJvdmVyZmxvdzogYXV0bztcIj5cbiAgICAgKiAgPHgtZWxlbWVudCBzY3JvbGwtdGFyZ2V0PVwic2Nyb2xsYWJsZS1lbGVtZW50XCI+XG4gICAgICogICAgPCEtLSBDb250ZW50LS0+XG4gICAgICogIDwveC1lbGVtZW50PlxuICAgICAqIDwvZGl2PlxuICAgICAqYGBgXG4gICAgICogSW4gdGhpcyBjYXNlLCB0aGUgYHNjcm9sbFRhcmdldGAgd2lsbCBwb2ludCB0byB0aGUgb3V0ZXIgZGl2IGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiAjIyMgRG9jdW1lbnQgc2Nyb2xsaW5nXG4gICAgICpcbiAgICAgKiBGb3IgZG9jdW1lbnQgc2Nyb2xsaW5nLCB5b3UgY2FuIHVzZSB0aGUgcmVzZXJ2ZWQgd29yZCBgZG9jdW1lbnRgOlxuICAgICAqXG4gICAgICpgYGBodG1sXG4gICAgICogPHgtZWxlbWVudCBzY3JvbGwtdGFyZ2V0PVwiZG9jdW1lbnRcIj5cbiAgICAgKiAgIDwhLS0gQ29udGVudCAtLT5cbiAgICAgKiA8L3gtZWxlbWVudD5cbiAgICAgKmBgYFxuICAgICAqXG4gICAgICogIyMjIEVsZW1lbnRzIHJlZmVyZW5jZVxuICAgICAqXG4gICAgICpgYGBqc1xuICAgICAqIGFwcEhlYWRlci5zY3JvbGxUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2Nyb2xsYWJsZS1lbGVtZW50Jyk7XG4gICAgICpgYGBcbiAgICAgKlxuICAgICAqIEB0eXBlIHtIVE1MRWxlbWVudH1cbiAgICAgKiBAZGVmYXVsdCBkb2N1bWVudFxuICAgICAqL1xuICAgIHNjcm9sbFRhcmdldDoge1xuICAgICAgdHlwZTogSFRNTEVsZW1lbnQsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWZhdWx0U2Nyb2xsVGFyZ2V0O1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBvYnNlcnZlcnM6IFsnX3Njcm9sbFRhcmdldENoYW5nZWQoc2Nyb2xsVGFyZ2V0LCBpc0F0dGFjaGVkKSddLFxuXG4gIC8qKlxuICAgKiBUcnVlIGlmIHRoZSBldmVudCBsaXN0ZW5lciBzaG91bGQgYmUgaW5zdGFsbGVkLlxuICAgKi9cbiAgX3Nob3VsZEhhdmVMaXN0ZW5lcjogdHJ1ZSxcblxuICBfc2Nyb2xsVGFyZ2V0Q2hhbmdlZDogZnVuY3Rpb24oc2Nyb2xsVGFyZ2V0LCBpc0F0dGFjaGVkKSB7XG4gICAgdmFyIGV2ZW50VGFyZ2V0O1xuXG4gICAgaWYgKHRoaXMuX29sZFNjcm9sbFRhcmdldCkge1xuICAgICAgdGhpcy5fdG9nZ2xlU2Nyb2xsTGlzdGVuZXIoZmFsc2UsIHRoaXMuX29sZFNjcm9sbFRhcmdldCk7XG4gICAgICB0aGlzLl9vbGRTY3JvbGxUYXJnZXQgPSBudWxsO1xuICAgIH1cbiAgICBpZiAoIWlzQXR0YWNoZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gU3VwcG9ydCBlbGVtZW50IGlkIHJlZmVyZW5jZXNcbiAgICBpZiAoc2Nyb2xsVGFyZ2V0ID09PSAnZG9jdW1lbnQnKSB7XG4gICAgICB0aGlzLnNjcm9sbFRhcmdldCA9IHRoaXMuX2RvYztcblxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHNjcm9sbFRhcmdldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBkb21Ib3N0ID0gdGhpcy5kb21Ib3N0O1xuXG4gICAgICB0aGlzLnNjcm9sbFRhcmdldCA9IGRvbUhvc3QgJiYgZG9tSG9zdC4kID9cbiAgICAgICAgICBkb21Ib3N0LiRbc2Nyb2xsVGFyZ2V0XSA6XG4gICAgICAgICAgZG9tKHRoaXMub3duZXJEb2N1bWVudCkucXVlcnlTZWxlY3RvcignIycgKyBzY3JvbGxUYXJnZXQpO1xuXG4gICAgfSBlbHNlIGlmICh0aGlzLl9pc1ZhbGlkU2Nyb2xsVGFyZ2V0KCkpIHtcbiAgICAgIHRoaXMuX29sZFNjcm9sbFRhcmdldCA9IHNjcm9sbFRhcmdldDtcbiAgICAgIHRoaXMuX3RvZ2dsZVNjcm9sbExpc3RlbmVyKHRoaXMuX3Nob3VsZEhhdmVMaXN0ZW5lciwgc2Nyb2xsVGFyZ2V0KTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJ1bnMgb24gZXZlcnkgc2Nyb2xsIGV2ZW50LiBDb25zdW1lciBvZiB0aGlzIGJlaGF2aW9yIG1heSBvdmVycmlkZSB0aGlzXG4gICAqIG1ldGhvZC5cbiAgICpcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX3Njcm9sbEhhbmRsZXI6IGZ1bmN0aW9uIHNjcm9sbEhhbmRsZXIoKSB7fSxcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgc2Nyb2xsIHRhcmdldC4gQ29uc3VtZXJzIG9mIHRoaXMgYmVoYXZpb3IgbWF5IHdhbnQgdG8gY3VzdG9taXplXG4gICAqIHRoZSBkZWZhdWx0IHNjcm9sbCB0YXJnZXQuXG4gICAqXG4gICAqIEB0eXBlIHtFbGVtZW50fVxuICAgKi9cbiAgZ2V0IF9kZWZhdWx0U2Nyb2xsVGFyZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLl9kb2M7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNob3J0Y3V0IGZvciB0aGUgZG9jdW1lbnQgZWxlbWVudFxuICAgKlxuICAgKiBAdHlwZSB7RWxlbWVudH1cbiAgICovXG4gIGdldCBfZG9jKCkge1xuICAgIHJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBudW1iZXIgb2YgcGl4ZWxzIHRoYXQgdGhlIGNvbnRlbnQgb2YgYW4gZWxlbWVudCBpcyBzY3JvbGxlZFxuICAgKiB1cHdhcmQuXG4gICAqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgX3Njcm9sbFRvcCgpIHtcbiAgICBpZiAodGhpcy5faXNWYWxpZFNjcm9sbFRhcmdldCgpKSB7XG4gICAgICByZXR1cm4gdGhpcy5zY3JvbGxUYXJnZXQgPT09IHRoaXMuX2RvYyA/IHdpbmRvdy5wYWdlWU9mZnNldCA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsVGFyZ2V0LnNjcm9sbFRvcDtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBwaXhlbHMgdGhhdCB0aGUgY29udGVudCBvZiBhbiBlbGVtZW50IGlzIHNjcm9sbGVkIHRvIHRoZVxuICAgKiBsZWZ0LlxuICAgKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IF9zY3JvbGxMZWZ0KCkge1xuICAgIGlmICh0aGlzLl9pc1ZhbGlkU2Nyb2xsVGFyZ2V0KCkpIHtcbiAgICAgIHJldHVybiB0aGlzLnNjcm9sbFRhcmdldCA9PT0gdGhpcy5fZG9jID8gd2luZG93LnBhZ2VYT2Zmc2V0IDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxUYXJnZXQuc2Nyb2xsTGVmdDtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIG51bWJlciBvZiBwaXhlbHMgdGhhdCB0aGUgY29udGVudCBvZiBhbiBlbGVtZW50IGlzIHNjcm9sbGVkXG4gICAqIHVwd2FyZC5cbiAgICpcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHNldCBfc2Nyb2xsVG9wKHRvcCkge1xuICAgIGlmICh0aGlzLnNjcm9sbFRhcmdldCA9PT0gdGhpcy5fZG9jKSB7XG4gICAgICB3aW5kb3cuc2Nyb2xsVG8od2luZG93LnBhZ2VYT2Zmc2V0LCB0b3ApO1xuICAgIH0gZWxzZSBpZiAodGhpcy5faXNWYWxpZFNjcm9sbFRhcmdldCgpKSB7XG4gICAgICB0aGlzLnNjcm9sbFRhcmdldC5zY3JvbGxUb3AgPSB0b3A7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBudW1iZXIgb2YgcGl4ZWxzIHRoYXQgdGhlIGNvbnRlbnQgb2YgYW4gZWxlbWVudCBpcyBzY3JvbGxlZCB0byB0aGVcbiAgICogbGVmdC5cbiAgICpcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHNldCBfc2Nyb2xsTGVmdChsZWZ0KSB7XG4gICAgaWYgKHRoaXMuc2Nyb2xsVGFyZ2V0ID09PSB0aGlzLl9kb2MpIHtcbiAgICAgIHdpbmRvdy5zY3JvbGxUbyhsZWZ0LCB3aW5kb3cucGFnZVlPZmZzZXQpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5faXNWYWxpZFNjcm9sbFRhcmdldCgpKSB7XG4gICAgICB0aGlzLnNjcm9sbFRhcmdldC5zY3JvbGxMZWZ0ID0gbGVmdDtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNjcm9sbHMgdGhlIGNvbnRlbnQgdG8gYSBwYXJ0aWN1bGFyIHBsYWNlLlxuICAgKlxuICAgKiBAbWV0aG9kIHNjcm9sbFxuICAgKiBAcGFyYW0ge251bWJlcnwhe2xlZnQ6IG51bWJlciwgdG9wOiBudW1iZXJ9fSBsZWZ0T3JPcHRpb25zIFRoZSBsZWZ0IHBvc2l0aW9uIG9yIHNjcm9sbCBvcHRpb25zXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gdG9wIFRoZSB0b3AgcG9zaXRpb25cbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIHNjcm9sbDogZnVuY3Rpb24obGVmdE9yT3B0aW9ucywgdG9wKSB7XG4gICAgdmFyIGxlZnQ7XG5cbiAgICBpZiAodHlwZW9mIGxlZnRPck9wdGlvbnMgPT09ICdvYmplY3QnKSB7XG4gICAgICBsZWZ0ID0gbGVmdE9yT3B0aW9ucy5sZWZ0O1xuICAgICAgdG9wID0gbGVmdE9yT3B0aW9ucy50b3A7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlZnQgPSBsZWZ0T3JPcHRpb25zO1xuICAgIH1cblxuICAgIGxlZnQgPSBsZWZ0IHx8IDA7XG4gICAgdG9wID0gdG9wIHx8IDA7XG4gICAgaWYgKHRoaXMuc2Nyb2xsVGFyZ2V0ID09PSB0aGlzLl9kb2MpIHtcbiAgICAgIHdpbmRvdy5zY3JvbGxUbyhsZWZ0LCB0b3ApO1xuICAgIH0gZWxzZSBpZiAodGhpcy5faXNWYWxpZFNjcm9sbFRhcmdldCgpKSB7XG4gICAgICB0aGlzLnNjcm9sbFRhcmdldC5zY3JvbGxMZWZ0ID0gbGVmdDtcbiAgICAgIHRoaXMuc2Nyb2xsVGFyZ2V0LnNjcm9sbFRvcCA9IHRvcDtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHdpZHRoIG9mIHRoZSBzY3JvbGwgdGFyZ2V0LlxuICAgKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IF9zY3JvbGxUYXJnZXRXaWR0aCgpIHtcbiAgICBpZiAodGhpcy5faXNWYWxpZFNjcm9sbFRhcmdldCgpKSB7XG4gICAgICByZXR1cm4gdGhpcy5zY3JvbGxUYXJnZXQgPT09IHRoaXMuX2RvYyA/IHdpbmRvdy5pbm5lcldpZHRoIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxUYXJnZXQub2Zmc2V0V2lkdGg7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBoZWlnaHQgb2YgdGhlIHNjcm9sbCB0YXJnZXQuXG4gICAqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgX3Njcm9sbFRhcmdldEhlaWdodCgpIHtcbiAgICBpZiAodGhpcy5faXNWYWxpZFNjcm9sbFRhcmdldCgpKSB7XG4gICAgICByZXR1cm4gdGhpcy5zY3JvbGxUYXJnZXQgPT09IHRoaXMuX2RvYyA/IHdpbmRvdy5pbm5lckhlaWdodCA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsVGFyZ2V0Lm9mZnNldEhlaWdodDtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc2Nyb2xsIHRhcmdldCBpcyBhIHZhbGlkIEhUTUxFbGVtZW50LlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgX2lzVmFsaWRTY3JvbGxUYXJnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnNjcm9sbFRhcmdldCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xuICB9LFxuXG4gIF90b2dnbGVTY3JvbGxMaXN0ZW5lcjogZnVuY3Rpb24oeWVzLCBzY3JvbGxUYXJnZXQpIHtcbiAgICB2YXIgZXZlbnRUYXJnZXQgPSBzY3JvbGxUYXJnZXQgPT09IHRoaXMuX2RvYyA/IHdpbmRvdyA6IHNjcm9sbFRhcmdldDtcbiAgICBpZiAoeWVzKSB7XG4gICAgICBpZiAoIXRoaXMuX2JvdW5kU2Nyb2xsSGFuZGxlcikge1xuICAgICAgICB0aGlzLl9ib3VuZFNjcm9sbEhhbmRsZXIgPSB0aGlzLl9zY3JvbGxIYW5kbGVyLmJpbmQodGhpcyk7XG4gICAgICAgIGV2ZW50VGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuX2JvdW5kU2Nyb2xsSGFuZGxlcik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLl9ib3VuZFNjcm9sbEhhbmRsZXIpIHtcbiAgICAgICAgZXZlbnRUYXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5fYm91bmRTY3JvbGxIYW5kbGVyKTtcbiAgICAgICAgdGhpcy5fYm91bmRTY3JvbGxIYW5kbGVyID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIHNjcm9sbCBldmVudCBsaXN0ZW5lci5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSB5ZXMgVHJ1ZSB0byBhZGQgdGhlIGV2ZW50LCBGYWxzZSB0byByZW1vdmUgaXQuXG4gICAqL1xuICB0b2dnbGVTY3JvbGxMaXN0ZW5lcjogZnVuY3Rpb24oeWVzKSB7XG4gICAgdGhpcy5fc2hvdWxkSGF2ZUxpc3RlbmVyID0geWVzO1xuICAgIHRoaXMuX3RvZ2dsZVNjcm9sbExpc3RlbmVyKHllcywgdGhpcy5zY3JvbGxUYXJnZXQpO1xuICB9XG5cbn07XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTYgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuLyoqXG5cblRoaXMgaXMgYSBmb3JrIG9mIDxpcm9uLWxpc3Q+IGZvciA8dmFhZGluLWdyaWQ+J3MgaW50ZXJuYWwgcHVycG9zZXMgb25seSFcblRvIHVwZGF0ZTpcbjEuIEdldCB0aGUgbW9zdCByZWNlbnQgY29kZSBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9Qb2x5bWVyRWxlbWVudHMvaXJvbi1saXN0L1xuMi4gUmVtb3ZlIHRoZSAgPGRvbS1tb2R1bGUgaWQ9XCJpcm9uLWxpc3RcIj4gdG8gYXZvaWQgY29sbGlzaW9ucyB3aXRoIGFjdHVhbCA8aXJvbi1saXN0PlxuMy4gQ2hhbmdlIFwiUG9seW1lcih7XCIgdG8gXCJ3aW5kb3cuUG9seW1lcklyb25MaXN0ID0gUG9seW1lci5DbGFzcyh7XCIgdG8gZXhwb3NlIHRoZSBjbGFzc1xuMy4xLiBBZGQgQG5hbWVzcGFjZVxuNC4gT3B0aW9uYWw6IFJlbW92ZSBhbGwgcHJvcGVydGllcyBhbmQgZnVuY3Rpb25zIG5vdCBuZWVkZWQgYnkgPHZhYWRpbi1ncmlkPlxuNS4gUHJvZml0IVxuXG4qL1xuLypcbiAgRklYTUUocG9seW1lci1tb2R1bGl6ZXIpOiB0aGUgYWJvdmUgY29tbWVudHMgd2VyZSBleHRyYWN0ZWRcbiAgZnJvbSBIVE1MIGFuZCBtYXkgYmUgb3V0IG9mIHBsYWNlIGhlcmUuIFJldmlldyB0aGVtIGFuZFxuICB0aGVuIGRlbGV0ZSB0aGlzIGNvbW1lbnQhXG4qL1xuaW1wb3J0ICdAcG9seW1lci9wb2x5bWVyL3BvbHltZXItbGVnYWN5LmpzJztcblxuaW1wb3J0IHsgSXJvblJlc2l6YWJsZUJlaGF2aW9yIH0gZnJvbSAnQHBvbHltZXIvaXJvbi1yZXNpemFibGUtYmVoYXZpb3IvaXJvbi1yZXNpemFibGUtYmVoYXZpb3IuanMnO1xuaW1wb3J0IHsgSXJvblNjcm9sbFRhcmdldEJlaGF2aW9yIH0gZnJvbSAnQHBvbHltZXIvaXJvbi1zY3JvbGwtdGFyZ2V0LWJlaGF2aW9yL2lyb24tc2Nyb2xsLXRhcmdldC1iZWhhdmlvci5qcyc7XG5pbXBvcnQgeyBhbmltYXRpb25GcmFtZSwgaWRsZVBlcmlvZCwgbWljcm9UYXNrIH0gZnJvbSAnQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvYXN5bmMuanMnO1xuaW1wb3J0IHsgQ2xhc3MgfSBmcm9tICdAcG9seW1lci9wb2x5bWVyL2xpYi9sZWdhY3kvY2xhc3MuanMnO1xuaW1wb3J0IHsgZmx1c2gsIGVucXVldWVEZWJvdW5jZXIgfSBmcm9tICdAcG9seW1lci9wb2x5bWVyL2xpYi91dGlscy9mbHVzaC5qcyc7XG5pbXBvcnQgeyBmbHVzaCBhcyBmbHVzaCQwIH0gZnJvbSAnQHBvbHltZXIvcG9seW1lci9saWIvbGVnYWN5L3BvbHltZXIuZG9tLmpzJztcbmltcG9ydCB7IERlYm91bmNlciB9IGZyb20gJ0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL2RlYm91bmNlLmpzJztcbnZhciBJT1MgPSBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9pUCg/OmhvbmV8YWQ7KD86IFU7KT8gQ1BVKSBPUyAoXFxkKykvKTtcbnZhciBJT1NfVE9VQ0hfU0NST0xMSU5HID0gSU9TICYmIElPU1sxXSA+PSA4O1xudmFyIERFRkFVTFRfUEhZU0lDQUxfQ09VTlQgPSAzO1xudmFyIEFOSU1BVElPTl9GUkFNRSA9IGFuaW1hdGlvbkZyYW1lO1xudmFyIElETEVfVElNRSA9IGlkbGVQZXJpb2Q7XG52YXIgTUlDUk9fVEFTSyA9IG1pY3JvVGFzaztcblxuZXhwb3J0IGNvbnN0IFBvbHltZXJJcm9uTGlzdCA9IENsYXNzKHtcblxuICBiZWhhdmlvcnM6IFtcbiAgICBJcm9uUmVzaXphYmxlQmVoYXZpb3IsXG4gICAgSXJvblNjcm9sbFRhcmdldEJlaGF2aW9yXG4gIF0sXG5cbiAgLyoqXG4gICAqIFRoZSByYXRpbyBvZiBoaWRkZW4gdGlsZXMgdGhhdCBzaG91bGQgcmVtYWluIGluIHRoZSBzY3JvbGwgZGlyZWN0aW9uLlxuICAgKiBSZWNvbW1lbmRlZCB2YWx1ZSB+MC41LCBzbyBpdCB3aWxsIGRpc3RyaWJ1dGUgdGlsZXMgZXZlbmx5IGluIGJvdGggZGlyZWN0aW9ucy5cbiAgICovXG4gIF9yYXRpbzogMC41LFxuXG4gIC8qKlxuICAgKiBUaGUgcGFkZGluZy10b3AgdmFsdWUgZm9yIHRoZSBsaXN0LlxuICAgKi9cbiAgX3Njcm9sbGVyUGFkZGluZ1RvcDogMCxcblxuICAvKipcbiAgICogVGhpcyB2YWx1ZSBpcyB0aGUgc2FtZSBhcyBgc2Nyb2xsVG9wYC5cbiAgICovXG4gIF9zY3JvbGxQb3NpdGlvbjogMCxcblxuICAvKipcbiAgICogVGhlIHN1bSBvZiB0aGUgaGVpZ2h0cyBvZiBhbGwgdGhlIHRpbGVzIGluIHRoZSBET00uXG4gICAqL1xuICBfcGh5c2ljYWxTaXplOiAwLFxuXG4gIC8qKlxuICAgKiBUaGUgYXZlcmFnZSBgb2Zmc2V0SGVpZ2h0YCBvZiB0aGUgdGlsZXMgb2JzZXJ2ZWQgdGlsbCBub3cuXG4gICAqL1xuICBfcGh5c2ljYWxBdmVyYWdlOiAwLFxuXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIHRpbGVzIHdoaWNoIGBvZmZzZXRIZWlnaHRgID4gMCBvYnNlcnZlZCB1bnRpbCBub3cuXG4gICAqL1xuICBfcGh5c2ljYWxBdmVyYWdlQ291bnQ6IDAsXG5cbiAgLyoqXG4gICAqIFRoZSBZIHBvc2l0aW9uIG9mIHRoZSBpdGVtIHJlbmRlcmVkIGluIHRoZSBgX3BoeXNpY2FsU3RhcnRgXG4gICAqIHRpbGUgcmVsYXRpdmUgdG8gdGhlIHNjcm9sbGluZyBsaXN0LlxuICAgKi9cbiAgX3BoeXNpY2FsVG9wOiAwLFxuXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIGl0ZW1zIGluIHRoZSBsaXN0LlxuICAgKi9cbiAgX3ZpcnR1YWxDb3VudDogMCxcblxuICAvKipcbiAgICogVGhlIGVzdGltYXRlZCBzY3JvbGwgaGVpZ2h0IGJhc2VkIG9uIGBfcGh5c2ljYWxBdmVyYWdlYFxuICAgKi9cbiAgX2VzdFNjcm9sbEhlaWdodDogMCxcblxuICAvKipcbiAgICogVGhlIHNjcm9sbCBoZWlnaHQgb2YgdGhlIGRvbSBub2RlXG4gICAqL1xuICBfc2Nyb2xsSGVpZ2h0OiAwLFxuXG4gIC8qKlxuICAgKiBUaGUgaGVpZ2h0IG9mIHRoZSBsaXN0LiBUaGlzIGlzIHJlZmVycmVkIGFzIHRoZSB2aWV3cG9ydCBpbiB0aGUgY29udGV4dCBvZiBsaXN0LlxuICAgKi9cbiAgX3ZpZXdwb3J0SGVpZ2h0OiAwLFxuXG4gIC8qKlxuICAgKiBUaGUgd2lkdGggb2YgdGhlIGxpc3QuIFRoaXMgaXMgcmVmZXJyZWQgYXMgdGhlIHZpZXdwb3J0IGluIHRoZSBjb250ZXh0IG9mIGxpc3QuXG4gICAqL1xuICBfdmlld3BvcnRXaWR0aDogMCxcblxuICAvKipcbiAgICogQW4gYXJyYXkgb2YgRE9NIG5vZGVzIHRoYXQgYXJlIGN1cnJlbnRseSBpbiB0aGUgdHJlZVxuICAgKiBAdHlwZSB7P0FycmF5PCFUZW1wbGF0aXplck5vZGU+fVxuICAgKi9cbiAgX3BoeXNpY2FsSXRlbXM6IG51bGwsXG5cbiAgLyoqXG4gICAqIEFuIGFycmF5IG9mIGhlaWdodHMgZm9yIGVhY2ggaXRlbSBpbiBgX3BoeXNpY2FsSXRlbXNgXG4gICAqIEB0eXBlIHs/QXJyYXk8bnVtYmVyPn1cbiAgICovXG4gIF9waHlzaWNhbFNpemVzOiBudWxsLFxuXG4gIC8qKlxuICAgKiBBIGNhY2hlZCB2YWx1ZSBmb3IgdGhlIGZpcnN0IHZpc2libGUgaW5kZXguXG4gICAqIFNlZSBgZmlyc3RWaXNpYmxlSW5kZXhgXG4gICAqIEB0eXBlIHs/bnVtYmVyfVxuICAgKi9cbiAgX2ZpcnN0VmlzaWJsZUluZGV4VmFsOiBudWxsLFxuXG4gIC8qKlxuICAgKiBBIFBvbHltZXIgY29sbGVjdGlvbiBmb3IgdGhlIGl0ZW1zLlxuICAgKiBAdHlwZSB7P1BvbHltZXIuQ29sbGVjdGlvbn1cbiAgICovXG4gIF9jb2xsZWN0aW9uOiBudWxsLFxuXG4gIC8qKlxuICAgKiBBIGNhY2hlZCB2YWx1ZSBmb3IgdGhlIGxhc3QgdmlzaWJsZSBpbmRleC5cbiAgICogU2VlIGBsYXN0VmlzaWJsZUluZGV4YFxuICAgKiBAdHlwZSB7P251bWJlcn1cbiAgICovXG4gIF9sYXN0VmlzaWJsZUluZGV4VmFsOiBudWxsLFxuXG4gIC8qKlxuICAgKiBUaGUgbWF4IG51bWJlciBvZiBwYWdlcyB0byByZW5kZXIuIE9uZSBwYWdlIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGhlaWdodCBvZiB0aGUgbGlzdC5cbiAgICovXG4gIF9tYXhQYWdlczogMixcblxuICAvKipcbiAgICogVGhlIHZpcnR1YWwgaW5kZXggb2YgdGhlIGZvY3VzZWQgaXRlbS5cbiAgICovXG4gIF9mb2N1c2VkVmlydHVhbEluZGV4OiAtMSxcblxuICAvKipcbiAgICogVGhlIG1heGltdW0gaXRlbXMgcGVyIHJvd1xuICAgKi9cbiAgX2l0ZW1zUGVyUm93OiAxLFxuXG4gIC8qKlxuICAgKiBUaGUgaGVpZ2h0IG9mIHRoZSByb3cgaW4gZ3JpZCBsYXlvdXQuXG4gICAqL1xuICBfcm93SGVpZ2h0OiAwLFxuXG4gIC8qKlxuICAgKiBUaGUgY29zdCBvZiBzdGFtcGluZyBhIHRlbXBsYXRlIGluIG1zLlxuICAgKi9cbiAgX3RlbXBsYXRlQ29zdDogMCxcblxuICAvKipcbiAgICogVGhlIGJvdHRvbSBvZiB0aGUgcGh5c2ljYWwgY29udGVudC5cbiAgICovXG4gIGdldCBfcGh5c2ljYWxCb3R0b20oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BoeXNpY2FsVG9wICsgdGhpcy5fcGh5c2ljYWxTaXplO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUaGUgYm90dG9tIG9mIHRoZSBzY3JvbGwuXG4gICAqL1xuICBnZXQgX3Njcm9sbEJvdHRvbSgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2Nyb2xsUG9zaXRpb24gKyB0aGlzLl92aWV3cG9ydEhlaWdodDtcbiAgfSxcblxuICAvKipcbiAgICogVGhlIG4tdGggaXRlbSByZW5kZXJlZCBpbiB0aGUgbGFzdCBwaHlzaWNhbCBpdGVtLlxuICAgKi9cbiAgZ2V0IF92aXJ0dWFsRW5kKCkge1xuICAgIHJldHVybiB0aGlzLl92aXJ0dWFsU3RhcnQgKyB0aGlzLl9waHlzaWNhbENvdW50IC0gMTtcbiAgfSxcblxuICAvKipcbiAgICogVGhlIGhlaWdodCBvZiB0aGUgcGh5c2ljYWwgY29udGVudCB0aGF0IGlzbid0IG9uIHRoZSBzY3JlZW4uXG4gICAqL1xuICBnZXQgX2hpZGRlbkNvbnRlbnRTaXplKCkge1xuICAgIHZhciBzaXplID0gdGhpcy5ncmlkID8gdGhpcy5fcGh5c2ljYWxSb3dzICogdGhpcy5fcm93SGVpZ2h0IDogdGhpcy5fcGh5c2ljYWxTaXplO1xuICAgIHJldHVybiBzaXplIC0gdGhpcy5fdmlld3BvcnRIZWlnaHQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIHNjcm9sbCB0b3AgdmFsdWUuXG4gICAqL1xuICBnZXQgX21heFNjcm9sbFRvcCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZXN0U2Nyb2xsSGVpZ2h0IC0gdGhpcy5fdmlld3BvcnRIZWlnaHQgKyB0aGlzLl9zY3JvbGxPZmZzZXQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZSBsYXJnZXN0IG4tdGggdmFsdWUgZm9yIGFuIGl0ZW0gc3VjaCB0aGF0IGl0IGNhbiBiZSByZW5kZXJlZCBpbiBgX3BoeXNpY2FsU3RhcnRgLlxuICAgKi9cbiAgZ2V0IF9tYXhWaXJ0dWFsU3RhcnQoKSB7XG4gICAgdmFyIHZpcnR1YWxDb3VudCA9IHRoaXMuX2NvbnZlcnRJbmRleFRvQ29tcGxldGVSb3codGhpcy5fdmlydHVhbENvdW50KTtcbiAgICByZXR1cm4gTWF0aC5tYXgoMCwgdmlydHVhbENvdW50IC0gdGhpcy5fcGh5c2ljYWxDb3VudCk7XG4gIH0sXG5cbiAgc2V0IF92aXJ0dWFsU3RhcnQodmFsKSB7XG4gICAgdmFsID0gdGhpcy5fY2xhbXAodmFsLCAwLCB0aGlzLl9tYXhWaXJ0dWFsU3RhcnQpO1xuICAgIGlmICh0aGlzLmdyaWQpIHtcbiAgICAgIHZhbCA9IHZhbCAtICh2YWwgJSB0aGlzLl9pdGVtc1BlclJvdyk7XG4gICAgfVxuICAgIHRoaXMuX3ZpcnR1YWxTdGFydFZhbCA9IHZhbDtcbiAgfSxcblxuICBnZXQgX3ZpcnR1YWxTdGFydCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmlydHVhbFN0YXJ0VmFsIHx8IDA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZSBrLXRoIHRpbGUgdGhhdCBpcyBhdCB0aGUgdG9wIG9mIHRoZSBzY3JvbGxpbmcgbGlzdC5cbiAgICovXG4gIHNldCBfcGh5c2ljYWxTdGFydCh2YWwpIHtcbiAgICB2YWwgPSB2YWwgJSB0aGlzLl9waHlzaWNhbENvdW50O1xuICAgIGlmICh2YWwgPCAwKSB7XG4gICAgICB2YWwgPSB0aGlzLl9waHlzaWNhbENvdW50ICsgdmFsO1xuICAgIH1cbiAgICBpZiAodGhpcy5ncmlkKSB7XG4gICAgICB2YWwgPSB2YWwgLSAodmFsICUgdGhpcy5faXRlbXNQZXJSb3cpO1xuICAgIH1cbiAgICB0aGlzLl9waHlzaWNhbFN0YXJ0VmFsID0gdmFsO1xuICB9LFxuXG4gIGdldCBfcGh5c2ljYWxTdGFydCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcGh5c2ljYWxTdGFydFZhbCB8fCAwO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUaGUgay10aCB0aWxlIHRoYXQgaXMgYXQgdGhlIGJvdHRvbSBvZiB0aGUgc2Nyb2xsaW5nIGxpc3QuXG4gICAqL1xuICBnZXQgX3BoeXNpY2FsRW5kKCkge1xuICAgIHJldHVybiAodGhpcy5fcGh5c2ljYWxTdGFydCArIHRoaXMuX3BoeXNpY2FsQ291bnQgLSAxKSAlIHRoaXMuX3BoeXNpY2FsQ291bnQ7XG4gIH0sXG5cbiAgc2V0IF9waHlzaWNhbENvdW50KHZhbCkge1xuICAgIHRoaXMuX3BoeXNpY2FsQ291bnRWYWwgPSB2YWw7XG4gIH0sXG5cbiAgZ2V0IF9waHlzaWNhbENvdW50KCkge1xuICAgIHJldHVybiB0aGlzLl9waHlzaWNhbENvdW50VmFsIHx8IDA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFuIG9wdGltYWwgcGh5c2ljYWwgc2l6ZSBzdWNoIHRoYXQgd2Ugd2lsbCBoYXZlIGVub3VnaCBwaHlzaWNhbCBpdGVtc1xuICAgKiB0byBmaWxsIHVwIHRoZSB2aWV3cG9ydCBhbmQgcmVjeWNsZSB3aGVuIHRoZSB1c2VyIHNjcm9sbHMuXG4gICAqXG4gICAqIFRoaXMgZGVmYXVsdCB2YWx1ZSBhc3N1bWVzIHRoYXQgd2Ugd2lsbCBhdCBsZWFzdCBoYXZlIHRoZSBlcXVpdmFsZW50XG4gICAqIHRvIGEgdmlld3BvcnQgb2YgcGh5c2ljYWwgaXRlbXMgYWJvdmUgYW5kIGJlbG93IHRoZSB1c2VyJ3Mgdmlld3BvcnQuXG4gICAqL1xuICBnZXQgX29wdFBoeXNpY2FsU2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmlld3BvcnRIZWlnaHQgPT09IDAgPyBJbmZpbml0eSA6IHRoaXMuX3ZpZXdwb3J0SGVpZ2h0ICogdGhpcy5fbWF4UGFnZXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRydWUgaWYgdGhlIGN1cnJlbnQgbGlzdCBpcyB2aXNpYmxlLlxuICAgKi9cbiAgZ2V0IF9pc1Zpc2libGUoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy5vZmZzZXRXaWR0aCB8fCB0aGlzLm9mZnNldEhlaWdodCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCB2aXNpYmxlIGl0ZW0gaW4gdGhlIHZpZXdwb3J0LlxuICAgKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IGZpcnN0VmlzaWJsZUluZGV4KCkge1xuICAgIHZhciBpZHggPSB0aGlzLl9maXJzdFZpc2libGVJbmRleFZhbDtcbiAgICBpZiAoaWR4ID09IG51bGwpIHtcbiAgICAgIHZhciBwaHlzaWNhbE9mZnNldCA9IHRoaXMuX3BoeXNpY2FsVG9wICsgdGhpcy5fc2Nyb2xsT2Zmc2V0O1xuXG4gICAgICBpZHggPSB0aGlzLl9pdGVyYXRlSXRlbXMoZnVuY3Rpb24ocGlkeCwgdmlkeCkge1xuICAgICAgICBwaHlzaWNhbE9mZnNldCArPSB0aGlzLl9nZXRQaHlzaWNhbFNpemVJbmNyZW1lbnQocGlkeCk7XG5cbiAgICAgICAgaWYgKHBoeXNpY2FsT2Zmc2V0ID4gdGhpcy5fc2Nyb2xsUG9zaXRpb24pIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5ncmlkID8gdmlkeCAtICh2aWR4ICUgdGhpcy5faXRlbXNQZXJSb3cpIDogdmlkeDtcbiAgICAgICAgfVxuICAgICAgICAvLyBIYW5kbGUgYSBwYXJ0aWFsbHkgcmVuZGVyZWQgZmluYWwgcm93IGluIGdyaWQgbW9kZVxuICAgICAgICBpZiAodGhpcy5ncmlkICYmIHRoaXMuX3ZpcnR1YWxDb3VudCAtIDEgPT09IHZpZHgpIHtcbiAgICAgICAgICByZXR1cm4gdmlkeCAtICh2aWR4ICUgdGhpcy5faXRlbXNQZXJSb3cpO1xuICAgICAgICB9XG4gICAgICB9KSB8fCAwO1xuICAgICAgdGhpcy5fZmlyc3RWaXNpYmxlSW5kZXhWYWwgPSBpZHg7XG4gICAgfVxuICAgIHJldHVybiBpZHg7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHZpc2libGUgaXRlbSBpbiB0aGUgdmlld3BvcnQuXG4gICAqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgbGFzdFZpc2libGVJbmRleCgpIHtcbiAgICB2YXIgaWR4ID0gdGhpcy5fbGFzdFZpc2libGVJbmRleFZhbDtcbiAgICBpZiAoaWR4ID09IG51bGwpIHtcbiAgICAgIGlmICh0aGlzLmdyaWQpIHtcbiAgICAgICAgaWR4ID0gTWF0aC5taW4odGhpcy5fdmlydHVhbENvdW50LCB0aGlzLmZpcnN0VmlzaWJsZUluZGV4ICsgdGhpcy5fZXN0Um93c0luVmlldyAqIHRoaXMuX2l0ZW1zUGVyUm93IC0gMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcGh5c2ljYWxPZmZzZXQgPSB0aGlzLl9waHlzaWNhbFRvcCArIHRoaXMuX3Njcm9sbE9mZnNldDtcbiAgICAgICAgdGhpcy5faXRlcmF0ZUl0ZW1zKGZ1bmN0aW9uKHBpZHgsIHZpZHgpIHtcbiAgICAgICAgICBpZiAocGh5c2ljYWxPZmZzZXQgPCB0aGlzLl9zY3JvbGxCb3R0b20pIHtcbiAgICAgICAgICAgIGlkeCA9IHZpZHg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBoeXNpY2FsT2Zmc2V0ICs9IHRoaXMuX2dldFBoeXNpY2FsU2l6ZUluY3JlbWVudChwaWR4KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9sYXN0VmlzaWJsZUluZGV4VmFsID0gaWR4O1xuICAgIH1cbiAgICByZXR1cm4gaWR4O1xuICB9LFxuXG4gIGdldCBfc2Nyb2xsT2Zmc2V0KCkge1xuICAgIHJldHVybiB0aGlzLl9zY3JvbGxlclBhZGRpbmdUb3A7XG4gIH0sXG5cbiAgYXR0YWNoZWQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2RlYm91bmNlKCdfcmVuZGVyJywgdGhpcy5fcmVuZGVyLCBBTklNQVRJT05fRlJBTUUpO1xuICAgIC8vIGBpcm9uLXJlc2l6ZWAgaXMgZmlyZWQgd2hlbiB0aGUgbGlzdCBpcyBhdHRhY2hlZCBpZiB0aGUgZXZlbnQgaXMgYWRkZWRcbiAgICAvLyBiZWZvcmUgYXR0YWNoZWQgY2F1c2luZyB1bm5lY2Vzc2FyeSB3b3JrLlxuICAgIHRoaXMubGlzdGVuKHRoaXMsICdpcm9uLXJlc2l6ZScsICdfcmVzaXplSGFuZGxlcicpO1xuICB9LFxuXG4gIGRldGFjaGVkOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnVubGlzdGVuKHRoaXMsICdpcm9uLXJlc2l6ZScsICdfcmVzaXplSGFuZGxlcicpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbnZva2UgdGhpcyBtZXRob2QgaWYgeW91IGR5bmFtaWNhbGx5IHVwZGF0ZSB0aGUgdmlld3BvcnQnc1xuICAgKiBzaXplIG9yIENTUyBwYWRkaW5nLlxuICAgKlxuICAgKiBAbWV0aG9kIHVwZGF0ZVZpZXdwb3J0Qm91bmRhcmllc1xuICAgKi9cbiAgdXBkYXRlVmlld3BvcnRCb3VuZGFyaWVzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcyk7XG4gICAgdGhpcy5fc2Nyb2xsZXJQYWRkaW5nVG9wID0gdGhpcy5zY3JvbGxUYXJnZXQgPT09IHRoaXMgPyAwIDogcGFyc2VJbnQoc3R5bGVzWydwYWRkaW5nLXRvcCddLCAxMCk7XG4gICAgdGhpcy5faXNSVEwgPSBCb29sZWFuKHN0eWxlcy5kaXJlY3Rpb24gPT09ICdydGwnKTtcbiAgICB0aGlzLl92aWV3cG9ydFdpZHRoID0gdGhpcy4kLml0ZW1zLm9mZnNldFdpZHRoO1xuICAgIHRoaXMuX3ZpZXdwb3J0SGVpZ2h0ID0gdGhpcy5fc2Nyb2xsVGFyZ2V0SGVpZ2h0O1xuICAgIHRoaXMuZ3JpZCAmJiB0aGlzLl91cGRhdGVHcmlkTWV0cmljcygpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWN5Y2xlcyB0aGUgcGh5c2ljYWwgaXRlbXMgd2hlbiBuZWVkZWQuXG4gICAqL1xuICBfc2Nyb2xsSGFuZGxlcjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjcm9sbFRvcCA9IE1hdGgubWF4KDAsIE1hdGgubWluKHRoaXMuX21heFNjcm9sbFRvcCwgdGhpcy5fc2Nyb2xsVG9wKSk7XG4gICAgdmFyIGRlbHRhID0gc2Nyb2xsVG9wIC0gdGhpcy5fc2Nyb2xsUG9zaXRpb247XG4gICAgdmFyIGlzU2Nyb2xsaW5nRG93biA9IGRlbHRhID49IDA7XG4gICAgLy8gVHJhY2sgdGhlIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uLlxuICAgIHRoaXMuX3Njcm9sbFBvc2l0aW9uID0gc2Nyb2xsVG9wO1xuICAgIC8vIENsZWFyIGluZGV4ZXMgZm9yIGZpcnN0IGFuZCBsYXN0IHZpc2libGUgaW5kZXhlcy5cbiAgICB0aGlzLl9maXJzdFZpc2libGVJbmRleFZhbCA9IG51bGw7XG4gICAgdGhpcy5fbGFzdFZpc2libGVJbmRleFZhbCA9IG51bGw7XG4gICAgLy8gUmFuZG9tIGFjY2Vzcy5cbiAgICBpZiAoTWF0aC5hYnMoZGVsdGEpID4gdGhpcy5fcGh5c2ljYWxTaXplICYmIHRoaXMuX3BoeXNpY2FsU2l6ZSA+IDApIHtcbiAgICAgIGRlbHRhID0gZGVsdGEgLSB0aGlzLl9zY3JvbGxPZmZzZXQ7XG4gICAgICB2YXIgaWR4QWRqdXN0bWVudCA9IE1hdGgucm91bmQoZGVsdGEgLyB0aGlzLl9waHlzaWNhbEF2ZXJhZ2UpICogdGhpcy5faXRlbXNQZXJSb3c7XG4gICAgICB0aGlzLl92aXJ0dWFsU3RhcnQgPSB0aGlzLl92aXJ0dWFsU3RhcnQgKyBpZHhBZGp1c3RtZW50O1xuICAgICAgdGhpcy5fcGh5c2ljYWxTdGFydCA9IHRoaXMuX3BoeXNpY2FsU3RhcnQgKyBpZHhBZGp1c3RtZW50O1xuICAgICAgLy8gRXN0aW1hdGUgbmV3IHBoeXNpY2FsIG9mZnNldC5cbiAgICAgIHRoaXMuX3BoeXNpY2FsVG9wID0gTWF0aC5mbG9vcih0aGlzLl92aXJ0dWFsU3RhcnQgLyB0aGlzLl9pdGVtc1BlclJvdykgKiB0aGlzLl9waHlzaWNhbEF2ZXJhZ2U7XG4gICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX3BoeXNpY2FsQ291bnQgPiAwKSB7XG4gICAgICB2YXIgcmV1c2FibGVzID0gdGhpcy5fZ2V0UmV1c2FibGVzKGlzU2Nyb2xsaW5nRG93bik7XG4gICAgICBpZiAoaXNTY3JvbGxpbmdEb3duKSB7XG4gICAgICAgIHRoaXMuX3BoeXNpY2FsVG9wID0gcmV1c2FibGVzLnBoeXNpY2FsVG9wO1xuICAgICAgICB0aGlzLl92aXJ0dWFsU3RhcnQgPSB0aGlzLl92aXJ0dWFsU3RhcnQgKyByZXVzYWJsZXMuaW5kZXhlcy5sZW5ndGg7XG4gICAgICAgIHRoaXMuX3BoeXNpY2FsU3RhcnQgPSB0aGlzLl9waHlzaWNhbFN0YXJ0ICsgcmV1c2FibGVzLmluZGV4ZXMubGVuZ3RoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fdmlydHVhbFN0YXJ0ID0gdGhpcy5fdmlydHVhbFN0YXJ0IC0gcmV1c2FibGVzLmluZGV4ZXMubGVuZ3RoO1xuICAgICAgICB0aGlzLl9waHlzaWNhbFN0YXJ0ID0gdGhpcy5fcGh5c2ljYWxTdGFydCAtIHJldXNhYmxlcy5pbmRleGVzLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3VwZGF0ZShyZXVzYWJsZXMuaW5kZXhlcywgaXNTY3JvbGxpbmdEb3duID8gbnVsbCA6IHJldXNhYmxlcy5pbmRleGVzKTtcbiAgICAgIHRoaXMuX2RlYm91bmNlKCdfaW5jcmVhc2VQb29sSWZOZWVkZWQnLCB0aGlzLl9pbmNyZWFzZVBvb2xJZk5lZWRlZC5iaW5kKHRoaXMsIDApLCBNSUNST19UQVNLKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIGluZGV4ZXMgb2YgdGhlIHBoeXNpY2FsIGl0ZW1zXG4gICAqIHRoYXQgbWlnaHQgYmUgcmV1c2VkIGFuZCB0aGUgcGh5c2ljYWxUb3AuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZnJvbVRvcCBJZiB0aGUgcG90ZW50aWFsIHJldXNhYmxlIGl0ZW1zIGFyZSBhYm92ZSB0aGUgc2Nyb2xsaW5nIHJlZ2lvbi5cbiAgICovXG4gIF9nZXRSZXVzYWJsZXM6IGZ1bmN0aW9uKGZyb21Ub3ApIHtcbiAgICB2YXIgaXRoLCBvZmZzZXRDb250ZW50LCBwaHlzaWNhbEl0ZW1IZWlnaHQ7XG4gICAgdmFyIGlkeHMgPSBbXTtcbiAgICB2YXIgcHJvdGVjdGVkT2Zmc2V0Q29udGVudCA9IHRoaXMuX2hpZGRlbkNvbnRlbnRTaXplICogdGhpcy5fcmF0aW87XG4gICAgdmFyIHZpcnR1YWxTdGFydCA9IHRoaXMuX3ZpcnR1YWxTdGFydDtcbiAgICB2YXIgdmlydHVhbEVuZCA9IHRoaXMuX3ZpcnR1YWxFbmQ7XG4gICAgdmFyIHBoeXNpY2FsQ291bnQgPSB0aGlzLl9waHlzaWNhbENvdW50O1xuICAgIHZhciB0b3AgPSB0aGlzLl9waHlzaWNhbFRvcCArIHRoaXMuX3Njcm9sbE9mZnNldDtcbiAgICB2YXIgYm90dG9tID0gdGhpcy5fcGh5c2ljYWxCb3R0b20gKyB0aGlzLl9zY3JvbGxPZmZzZXQ7XG4gICAgdmFyIHNjcm9sbFRvcCA9IHRoaXMuX3Njcm9sbFRvcDtcbiAgICB2YXIgc2Nyb2xsQm90dG9tID0gdGhpcy5fc2Nyb2xsQm90dG9tO1xuXG4gICAgaWYgKGZyb21Ub3ApIHtcbiAgICAgIGl0aCA9IHRoaXMuX3BoeXNpY2FsU3RhcnQ7XG4gICAgICBvZmZzZXRDb250ZW50ID0gc2Nyb2xsVG9wIC0gdG9wO1xuICAgIH0gZWxzZSB7XG4gICAgICBpdGggPSB0aGlzLl9waHlzaWNhbEVuZDtcbiAgICAgIG9mZnNldENvbnRlbnQgPSBib3R0b20gLSBzY3JvbGxCb3R0b207XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgcGh5c2ljYWxJdGVtSGVpZ2h0ID0gdGhpcy5fZ2V0UGh5c2ljYWxTaXplSW5jcmVtZW50KGl0aCk7XG4gICAgICBvZmZzZXRDb250ZW50ID0gb2Zmc2V0Q29udGVudCAtIHBoeXNpY2FsSXRlbUhlaWdodDtcbiAgICAgIGlmIChpZHhzLmxlbmd0aCA+PSBwaHlzaWNhbENvdW50IHx8IG9mZnNldENvbnRlbnQgPD0gcHJvdGVjdGVkT2Zmc2V0Q29udGVudCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChmcm9tVG9wKSB7XG4gICAgICAgIC8vIENoZWNrIHRoYXQgaW5kZXggaXMgd2l0aGluIHRoZSB2YWxpZCByYW5nZS5cbiAgICAgICAgaWYgKHZpcnR1YWxFbmQgKyBpZHhzLmxlbmd0aCArIDEgPj0gdGhpcy5fdmlydHVhbENvdW50KSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2hlY2sgdGhhdCB0aGUgaW5kZXggaXMgbm90IHZpc2libGUuXG4gICAgICAgIGlmICh0b3AgKyBwaHlzaWNhbEl0ZW1IZWlnaHQgPj0gc2Nyb2xsVG9wIC0gdGhpcy5fc2Nyb2xsT2Zmc2V0KSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWR4cy5wdXNoKGl0aCk7XG4gICAgICAgIHRvcCA9IHRvcCArIHBoeXNpY2FsSXRlbUhlaWdodDtcbiAgICAgICAgaXRoID0gKGl0aCArIDEpICUgcGh5c2ljYWxDb3VudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIENoZWNrIHRoYXQgaW5kZXggaXMgd2l0aGluIHRoZSB2YWxpZCByYW5nZS5cbiAgICAgICAgaWYgKHZpcnR1YWxTdGFydCAtIGlkeHMubGVuZ3RoIDw9IDApIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLyBDaGVjayB0aGF0IHRoZSBpbmRleCBpcyBub3QgdmlzaWJsZS5cbiAgICAgICAgaWYgKHRvcCArIHRoaXMuX3BoeXNpY2FsU2l6ZSAtIHBoeXNpY2FsSXRlbUhlaWdodCA8PSBzY3JvbGxCb3R0b20pIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZHhzLnB1c2goaXRoKTtcbiAgICAgICAgdG9wID0gdG9wIC0gcGh5c2ljYWxJdGVtSGVpZ2h0O1xuICAgICAgICBpdGggPSAoaXRoID09PSAwKSA/IHBoeXNpY2FsQ291bnQgLSAxIDogaXRoIC0gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtpbmRleGVzOiBpZHhzLCBwaHlzaWNhbFRvcDogdG9wIC0gdGhpcy5fc2Nyb2xsT2Zmc2V0fTtcbiAgfSxcblxuICAvKipcbiAgICogVXBkYXRlIHRoZSBsaXN0IG9mIGl0ZW1zLCBzdGFydGluZyBmcm9tIHRoZSBgX3ZpcnR1YWxTdGFydGAgaXRlbS5cbiAgICogQHBhcmFtIHshQXJyYXk8bnVtYmVyPj19IGl0ZW1TZXRcbiAgICogQHBhcmFtIHshQXJyYXk8bnVtYmVyPj19IG1vdmluZ1VwXG4gICAqL1xuICBfdXBkYXRlOiBmdW5jdGlvbihpdGVtU2V0LCBtb3ZpbmdVcCkge1xuICAgIGlmICgoaXRlbVNldCAmJiBpdGVtU2V0Lmxlbmd0aCA9PT0gMCkgfHwgdGhpcy5fcGh5c2ljYWxDb3VudCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9tYW5hZ2VGb2N1cygpO1xuICAgIHRoaXMuX2Fzc2lnbk1vZGVscyhpdGVtU2V0KTtcbiAgICB0aGlzLl91cGRhdGVNZXRyaWNzKGl0ZW1TZXQpO1xuICAgIC8vIEFkanVzdCBvZmZzZXQgYWZ0ZXIgbWVhc3VyaW5nLlxuICAgIGlmIChtb3ZpbmdVcCkge1xuICAgICAgd2hpbGUgKG1vdmluZ1VwLmxlbmd0aCkge1xuICAgICAgICB2YXIgaWR4ID0gbW92aW5nVXAucG9wKCk7XG4gICAgICAgIHRoaXMuX3BoeXNpY2FsVG9wIC09IHRoaXMuX2dldFBoeXNpY2FsU2l6ZUluY3JlbWVudChpZHgpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9wb3NpdGlvbkl0ZW1zKCk7XG4gICAgdGhpcy5fdXBkYXRlU2Nyb2xsZXJTaXplKCk7XG4gIH0sXG5cbiAgX2lzQ2xpZW50RnVsbDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Njcm9sbEJvdHRvbSAhPSAwICYmIHRoaXMuX3BoeXNpY2FsQm90dG9tIC0gMSA+PSB0aGlzLl9zY3JvbGxCb3R0b20gJiZcbiAgICAgICAgdGhpcy5fcGh5c2ljYWxUb3AgPD0gdGhpcy5fc2Nyb2xsUG9zaXRpb247XG4gIH0sXG5cbiAgLyoqXG4gICAqIEluY3JlYXNlcyB0aGUgcG9vbCBzaXplLlxuICAgKi9cbiAgX2luY3JlYXNlUG9vbElmTmVlZGVkOiBmdW5jdGlvbihjb3VudCkge1xuICAgIHZhciBuZXh0UGh5c2ljYWxDb3VudCA9IHRoaXMuX2NsYW1wKHRoaXMuX3BoeXNpY2FsQ291bnQgKyBjb3VudCxcbiAgICAgIERFRkFVTFRfUEhZU0lDQUxfQ09VTlQsIHRoaXMuX3ZpcnR1YWxDb3VudCAtIHRoaXMuX3ZpcnR1YWxTdGFydCk7XG4gICAgbmV4dFBoeXNpY2FsQ291bnQgPSB0aGlzLl9jb252ZXJ0SW5kZXhUb0NvbXBsZXRlUm93KG5leHRQaHlzaWNhbENvdW50KTtcbiAgICB2YXIgZGVsdGEgPSBuZXh0UGh5c2ljYWxDb3VudCAtIHRoaXMuX3BoeXNpY2FsQ291bnQ7XG4gICAgdmFyIG5leHRJbmNyZWFzZSA9IE1hdGgucm91bmQodGhpcy5fcGh5c2ljYWxDb3VudCAqIDAuNSk7XG5cbiAgICBpZiAoZGVsdGEgPCAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChkZWx0YSA+IDApIHtcbiAgICAgIHZhciB0cyA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgIC8vIENvbmNhdCBhcnJheXMgaW4gcGxhY2UuXG4gICAgICBbXS5wdXNoLmFwcGx5KHRoaXMuX3BoeXNpY2FsSXRlbXMsIHRoaXMuX2NyZWF0ZVBvb2woZGVsdGEpKTtcbiAgICAgIC8vIFB1c2ggMHMgaW50byBwaHlzaWNhbFNpemVzLiBDYW4ndCB1c2UgQXJyYXkuZmlsbCBiZWNhdXNlIElFMTEgZG9lc24ndCBzdXBwb3J0IGl0LlxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZWx0YTsgaSsrKSB7XG4gICAgICAgIHRoaXMuX3BoeXNpY2FsU2l6ZXMucHVzaCgwKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3BoeXNpY2FsQ291bnQgPSB0aGlzLl9waHlzaWNhbENvdW50ICsgZGVsdGE7XG4gICAgICAvLyBVcGRhdGUgdGhlIHBoeXNpY2FsIHN0YXJ0IGlmIGl0IG5lZWRzIHRvIHByZXNlcnZlIHRoZSBtb2RlbCBvZiB0aGUgZm9jdXNlZCBpdGVtLlxuICAgICAgLy8gSW4gdGhpcyBzaXR1YXRpb24sIHRoZSBmb2N1c2VkIGl0ZW0gaXMgY3VycmVudGx5IHJlbmRlcmVkIGFuZCBpdHMgbW9kZWwgd291bGRcbiAgICAgIC8vIGhhdmUgY2hhbmdlZCBhZnRlciBpbmNyZWFzaW5nIHRoZSBwb29sIGlmIHRoZSBwaHlzaWNhbCBzdGFydCByZW1haW5lZCB1bmNoYW5nZWQuXG4gICAgICBpZiAodGhpcy5fcGh5c2ljYWxTdGFydCA+IHRoaXMuX3BoeXNpY2FsRW5kICYmXG4gICAgICAgICAgdGhpcy5faXNJbmRleFJlbmRlcmVkKHRoaXMuX2ZvY3VzZWRWaXJ0dWFsSW5kZXgpICYmXG4gICAgICAgICAgdGhpcy5fZ2V0UGh5c2ljYWxJbmRleCh0aGlzLl9mb2N1c2VkVmlydHVhbEluZGV4KSA8IHRoaXMuX3BoeXNpY2FsRW5kKSB7XG4gICAgICAgIHRoaXMuX3BoeXNpY2FsU3RhcnQgPSB0aGlzLl9waHlzaWNhbFN0YXJ0ICsgZGVsdGE7XG4gICAgICB9XG4gICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICAgIHRoaXMuX3RlbXBsYXRlQ29zdCA9ICh3aW5kb3cucGVyZm9ybWFuY2Uubm93KCkgLSB0cykgLyBkZWx0YTtcbiAgICAgIG5leHRJbmNyZWFzZSA9IE1hdGgucm91bmQodGhpcy5fcGh5c2ljYWxDb3VudCAqIDAuNSk7XG4gICAgfVxuICAgIC8vIFRoZSB1cHBlciBib3VuZHMgaXMgbm90IGZpeGVkIHdoZW4gZGVhbGluZyB3aXRoIGEgZ3JpZCB0aGF0IGRvZXNuJ3RcbiAgICAvLyBmaWxsIGl0J3MgbGFzdCByb3cgd2l0aCB0aGUgZXhhY3QgbnVtYmVyIG9mIGl0ZW1zIHBlciByb3cuXG4gICAgaWYgKHRoaXMuX3ZpcnR1YWxFbmQgPj0gdGhpcy5fdmlydHVhbENvdW50IC0gMSB8fCBuZXh0SW5jcmVhc2UgPT09IDApIHtcbiAgICAgIC8vIERvIG5vdGhpbmcuXG4gICAgfSBlbHNlIGlmICghdGhpcy5faXNDbGllbnRGdWxsKCkpIHtcbiAgICAgIHRoaXMuX2RlYm91bmNlKFxuICAgICAgICAnX2luY3JlYXNlUG9vbElmTmVlZGVkJyxcbiAgICAgICAgdGhpcy5faW5jcmVhc2VQb29sSWZOZWVkZWQuYmluZChcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIG5leHRJbmNyZWFzZVxuICAgICAgICApLCBNSUNST19UQVNLKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX3BoeXNpY2FsU2l6ZSA8IHRoaXMuX29wdFBoeXNpY2FsU2l6ZSkge1xuICAgICAgLy8gWWllbGQgYW5kIGluY3JlYXNlIHRoZSBwb29sIGR1cmluZyBpZGxlIHRpbWUgdW50aWwgdGhlIHBoeXNpY2FsIHNpemUgaXMgb3B0aW1hbC5cbiAgICAgIHRoaXMuX2RlYm91bmNlKFxuICAgICAgICAnX2luY3JlYXNlUG9vbElmTmVlZGVkJyxcbiAgICAgICAgdGhpcy5faW5jcmVhc2VQb29sSWZOZWVkZWQuYmluZChcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIHRoaXMuX2NsYW1wKE1hdGgucm91bmQoNTAgLyB0aGlzLl90ZW1wbGF0ZUNvc3QpLCAxLCBuZXh0SW5jcmVhc2UpXG4gICAgICAgICksIElETEVfVElNRSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoZSBhIG5ldyBsaXN0LlxuICAgKi9cbiAgX3JlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgaWYgKCF0aGlzLmlzQXR0YWNoZWQgfHwgIXRoaXMuX2lzVmlzaWJsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5fcGh5c2ljYWxDb3VudCAhPT0gMCkge1xuICAgICAgdmFyIHJldXNhYmxlcyA9IHRoaXMuX2dldFJldXNhYmxlcyh0cnVlKTtcbiAgICAgIHRoaXMuX3BoeXNpY2FsVG9wID0gcmV1c2FibGVzLnBoeXNpY2FsVG9wO1xuICAgICAgdGhpcy5fdmlydHVhbFN0YXJ0ID0gdGhpcy5fdmlydHVhbFN0YXJ0ICsgcmV1c2FibGVzLmluZGV4ZXMubGVuZ3RoO1xuICAgICAgdGhpcy5fcGh5c2ljYWxTdGFydCA9IHRoaXMuX3BoeXNpY2FsU3RhcnQgKyByZXVzYWJsZXMuaW5kZXhlcy5sZW5ndGg7XG4gICAgICB0aGlzLl91cGRhdGUocmV1c2FibGVzLmluZGV4ZXMpO1xuICAgICAgdGhpcy5fdXBkYXRlKCk7XG4gICAgICB0aGlzLl9pbmNyZWFzZVBvb2xJZk5lZWRlZCgwKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX3ZpcnR1YWxDb3VudCA+IDApIHtcbiAgICAgIC8vIEluaXRpYWwgcmVuZGVyXG4gICAgICB0aGlzLnVwZGF0ZVZpZXdwb3J0Qm91bmRhcmllcygpO1xuICAgICAgdGhpcy5faW5jcmVhc2VQb29sSWZOZWVkZWQoREVGQVVMVF9QSFlTSUNBTF9DT1VOVCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB0aGUgaXRlbXMgaGF2ZSBjaGFuZ2VkLiBUaGF0IGlzLCByZWFzc2lnbm1lbnRzXG4gICAqIHRvIGBpdGVtc2AsIHNwbGljZXMgb3IgdXBkYXRlcyB0byBhIHNpbmdsZSBpdGVtLlxuICAgKi9cbiAgX2l0ZW1zQ2hhbmdlZDogZnVuY3Rpb24oY2hhbmdlKSB7XG4gICAgaWYgKGNoYW5nZS5wYXRoID09PSAnaXRlbXMnKSB7XG4gICAgICB0aGlzLl92aXJ0dWFsU3RhcnQgPSAwO1xuICAgICAgdGhpcy5fcGh5c2ljYWxUb3AgPSAwO1xuICAgICAgdGhpcy5fdmlydHVhbENvdW50ID0gdGhpcy5pdGVtcyA/IHRoaXMuaXRlbXMubGVuZ3RoIDogMDtcbiAgICAgIHRoaXMuX2NvbGxlY3Rpb24gPSB0aGlzLml0ZW1zICYmIHVuZGVmaW5lZCA/XG4gICAgICAgIHVuZGVmaW5lZC5nZXQodGhpcy5pdGVtcykgOiBudWxsO1xuICAgICAgdGhpcy5fcGh5c2ljYWxJbmRleEZvcktleSA9IHt9O1xuICAgICAgdGhpcy5fZmlyc3RWaXNpYmxlSW5kZXhWYWwgPSBudWxsO1xuICAgICAgdGhpcy5fbGFzdFZpc2libGVJbmRleFZhbCA9IG51bGw7XG4gICAgICB0aGlzLl9waHlzaWNhbENvdW50ID0gdGhpcy5fcGh5c2ljYWxDb3VudCB8fCAwO1xuICAgICAgdGhpcy5fcGh5c2ljYWxJdGVtcyA9IHRoaXMuX3BoeXNpY2FsSXRlbXMgfHwgW107XG4gICAgICB0aGlzLl9waHlzaWNhbFNpemVzID0gdGhpcy5fcGh5c2ljYWxTaXplcyB8fCBbXTtcbiAgICAgIHRoaXMuX3BoeXNpY2FsU3RhcnQgPSAwO1xuICAgICAgaWYgKHRoaXMuX3Njcm9sbFRvcCA+IHRoaXMuX3Njcm9sbE9mZnNldCkge1xuICAgICAgICB0aGlzLl9yZXNldFNjcm9sbFBvc2l0aW9uKDApO1xuICAgICAgfVxuICAgICAgdGhpcy5fcmVtb3ZlRm9jdXNlZEl0ZW0oKTtcbiAgICAgIHRoaXMuX2RlYm91bmNlKCdfcmVuZGVyJywgdGhpcy5fcmVuZGVyLCBBTklNQVRJT05fRlJBTUUpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogRXhlY3V0ZXMgYSBwcm92aWRlZCBmdW5jdGlvbiBwZXIgZXZlcnkgcGh5c2ljYWwgaW5kZXggaW4gYGl0ZW1TZXRgXG4gICAqIGBpdGVtU2V0YCBkZWZhdWx0IHZhbHVlIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGVudGlyZSBzZXQgb2YgcGh5c2ljYWwgaW5kZXhlcy5cbiAgICpcbiAgICogQHBhcmFtIHshZnVuY3Rpb24obnVtYmVyLCBudW1iZXIpfSBmblxuICAgKiBAcGFyYW0geyFBcnJheTxudW1iZXI+PX0gaXRlbVNldFxuICAgKi9cbiAgX2l0ZXJhdGVJdGVtczogZnVuY3Rpb24oZm4sIGl0ZW1TZXQpIHtcbiAgICB2YXIgcGlkeCwgdmlkeCwgcnRuLCBpO1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgaXRlbVNldCkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGl0ZW1TZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcGlkeCA9IGl0ZW1TZXRbaV07XG4gICAgICAgIHZpZHggPSB0aGlzLl9jb21wdXRlVmlkeChwaWR4KTtcbiAgICAgICAgaWYgKChydG4gPSBmbi5jYWxsKHRoaXMsIHBpZHgsIHZpZHgpKSAhPSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIHJ0bjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwaWR4ID0gdGhpcy5fcGh5c2ljYWxTdGFydDtcbiAgICAgIHZpZHggPSB0aGlzLl92aXJ0dWFsU3RhcnQ7XG4gICAgICBmb3IgKDsgcGlkeCA8IHRoaXMuX3BoeXNpY2FsQ291bnQ7IHBpZHgrKywgdmlkeCsrKSB7XG4gICAgICAgIGlmICgocnRuID0gZm4uY2FsbCh0aGlzLCBwaWR4LCB2aWR4KSkgIT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBydG47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAocGlkeCA9IDA7IHBpZHggPCB0aGlzLl9waHlzaWNhbFN0YXJ0OyBwaWR4KyssIHZpZHgrKykge1xuICAgICAgICBpZiAoKHJ0biA9IGZuLmNhbGwodGhpcywgcGlkeCwgdmlkeCkpICE9IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gcnRuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB2aXJ0dWFsIGluZGV4IGZvciBhIGdpdmVuIHBoeXNpY2FsIGluZGV4XG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwaWR4IFBoeXNpY2FsIGluZGV4XG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIF9jb21wdXRlVmlkeDogZnVuY3Rpb24ocGlkeCkge1xuICAgIGlmIChwaWR4ID49IHRoaXMuX3BoeXNpY2FsU3RhcnQpIHtcbiAgICAgIHJldHVybiB0aGlzLl92aXJ0dWFsU3RhcnQgKyAocGlkeCAtIHRoaXMuX3BoeXNpY2FsU3RhcnQpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fdmlydHVhbFN0YXJ0ICsgKHRoaXMuX3BoeXNpY2FsQ291bnQgLSB0aGlzLl9waHlzaWNhbFN0YXJ0KSArIHBpZHg7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIGhlaWdodCBmb3IgYSBnaXZlbiBzZXQgb2YgaXRlbXMuXG4gICAqXG4gICAqIEBwYXJhbSB7IUFycmF5PG51bWJlcj49fSBpdGVtU2V0XG4gICAqL1xuICBfdXBkYXRlTWV0cmljczogZnVuY3Rpb24oaXRlbVNldCkge1xuICAgIC8vIE1ha2Ugc3VyZSB3ZSBkaXN0cmlidXRlZCBhbGwgdGhlIHBoeXNpY2FsIGl0ZW1zXG4gICAgLy8gc28gd2UgY2FuIG1lYXN1cmUgdGhlbS5cbiAgICBmbHVzaCA/IGZsdXNoKCkgOiBmbHVzaCQwKCk7XG5cbiAgICB2YXIgbmV3UGh5c2ljYWxTaXplID0gMDtcbiAgICB2YXIgb2xkUGh5c2ljYWxTaXplID0gMDtcbiAgICB2YXIgcHJldkF2Z0NvdW50ID0gdGhpcy5fcGh5c2ljYWxBdmVyYWdlQ291bnQ7XG4gICAgdmFyIHByZXZQaHlzaWNhbEF2ZyA9IHRoaXMuX3BoeXNpY2FsQXZlcmFnZTtcblxuICAgIHRoaXMuX2l0ZXJhdGVJdGVtcyhmdW5jdGlvbihwaWR4LCB2aWR4KSB7XG4gICAgICBvbGRQaHlzaWNhbFNpemUgKz0gdGhpcy5fcGh5c2ljYWxTaXplc1twaWR4XTtcbiAgICAgIHRoaXMuX3BoeXNpY2FsU2l6ZXNbcGlkeF0gPSB0aGlzLl9waHlzaWNhbEl0ZW1zW3BpZHhdLm9mZnNldEhlaWdodDtcbiAgICAgIG5ld1BoeXNpY2FsU2l6ZSArPSB0aGlzLl9waHlzaWNhbFNpemVzW3BpZHhdO1xuICAgICAgdGhpcy5fcGh5c2ljYWxBdmVyYWdlQ291bnQgKz0gdGhpcy5fcGh5c2ljYWxTaXplc1twaWR4XSA/IDEgOiAwO1xuICAgIH0sIGl0ZW1TZXQpO1xuXG4gICAgaWYgKHRoaXMuZ3JpZCkge1xuICAgICAgdGhpcy5fdXBkYXRlR3JpZE1ldHJpY3MoKTtcbiAgICAgIHRoaXMuX3BoeXNpY2FsU2l6ZSA9IE1hdGguY2VpbCh0aGlzLl9waHlzaWNhbENvdW50IC8gdGhpcy5faXRlbXNQZXJSb3cpICogdGhpcy5fcm93SGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBvbGRQaHlzaWNhbFNpemUgPSAodGhpcy5faXRlbXNQZXJSb3cgPT09IDEpID9cbiAgICAgICAgb2xkUGh5c2ljYWxTaXplIDpcbiAgICAgICAgTWF0aC5jZWlsKHRoaXMuX3BoeXNpY2FsQ291bnQgLyB0aGlzLl9pdGVtc1BlclJvdykgKiB0aGlzLl9yb3dIZWlnaHQ7XG4gICAgICB0aGlzLl9waHlzaWNhbFNpemUgPSB0aGlzLl9waHlzaWNhbFNpemUgKyBuZXdQaHlzaWNhbFNpemUgLSBvbGRQaHlzaWNhbFNpemU7XG4gICAgICB0aGlzLl9pdGVtc1BlclJvdyA9IDE7XG4gICAgfVxuICAgIC8vIFVwZGF0ZSB0aGUgYXZlcmFnZSBpZiBpdCBtZWFzdXJlZCBzb21ldGhpbmcuXG4gICAgaWYgKHRoaXMuX3BoeXNpY2FsQXZlcmFnZUNvdW50ICE9PSBwcmV2QXZnQ291bnQpIHtcbiAgICAgIHRoaXMuX3BoeXNpY2FsQXZlcmFnZSA9IE1hdGgucm91bmQoXG4gICAgICAgICgocHJldlBoeXNpY2FsQXZnICogcHJldkF2Z0NvdW50KSArIG5ld1BoeXNpY2FsU2l6ZSkgL1xuICAgICAgICB0aGlzLl9waHlzaWNhbEF2ZXJhZ2VDb3VudCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBwb3NpdGlvbiBvZiB0aGUgcGh5c2ljYWwgaXRlbXMuXG4gICAqL1xuICBfcG9zaXRpb25JdGVtczogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fYWRqdXN0U2Nyb2xsUG9zaXRpb24oKTtcblxuICAgIHZhciB5ID0gdGhpcy5fcGh5c2ljYWxUb3A7XG5cbiAgICB0aGlzLl9pdGVyYXRlSXRlbXMoZnVuY3Rpb24ocGlkeCwgdmlkeCkge1xuICAgICAgdGhpcy50cmFuc2xhdGUzZCgwLCB5ICsgJ3B4JywgMCwgdGhpcy5fcGh5c2ljYWxJdGVtc1twaWR4XSk7XG4gICAgICB5ICs9IHRoaXMuX3BoeXNpY2FsU2l6ZXNbcGlkeF07XG4gICAgfSk7XG4gIH0sXG5cbiAgX2dldFBoeXNpY2FsU2l6ZUluY3JlbWVudDogZnVuY3Rpb24ocGlkeCkge1xuICAgIGlmICghdGhpcy5ncmlkKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcGh5c2ljYWxTaXplc1twaWR4XTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2NvbXB1dGVWaWR4KHBpZHgpICUgdGhpcy5faXRlbXNQZXJSb3cgIT09IHRoaXMuX2l0ZW1zUGVyUm93IC0gMSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9yb3dIZWlnaHQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFkanVzdHMgdGhlIHNjcm9sbCBwb3NpdGlvbiB3aGVuIGl0IHdhcyBvdmVyZXN0aW1hdGVkLlxuICAgKi9cbiAgX2FkanVzdFNjcm9sbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZGVsdGFIZWlnaHQgPSB0aGlzLl92aXJ0dWFsU3RhcnQgPT09IDAgPyB0aGlzLl9waHlzaWNhbFRvcCA6IE1hdGgubWluKHRoaXMuX3Njcm9sbFBvc2l0aW9uICsgdGhpcy5fcGh5c2ljYWxUb3AsIDApO1xuICAgIC8vIE5vdGU6IHRoZSBkZWx0YSBjYW4gYmUgcG9zaXRpdmUgb3IgbmVnYXRpdmUuXG4gICAgaWYgKGRlbHRhSGVpZ2h0ICE9PSAwKSB7XG4gICAgICB0aGlzLl9waHlzaWNhbFRvcCA9IHRoaXMuX3BoeXNpY2FsVG9wIC0gZGVsdGFIZWlnaHQ7XG4gICAgICB2YXIgc2Nyb2xsVG9wID0gdGhpcy5fc2Nyb2xsVG9wO1xuICAgICAgLy8ganVraW5nIHNjcm9sbCBwb3NpdGlvbiBkdXJpbmcgaW50ZXJpYWwgc2Nyb2xsaW5nIG9uIGlPUyBpcyBubyBidWVub1xuICAgICAgaWYgKCFJT1NfVE9VQ0hfU0NST0xMSU5HICYmIHNjcm9sbFRvcCA+IDApIHtcbiAgICAgICAgdGhpcy5fcmVzZXRTY3JvbGxQb3NpdGlvbihzY3JvbGxUb3AgLSBkZWx0YUhlaWdodCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBwb3NpdGlvbiBvZiB0aGUgc2Nyb2xsLlxuICAgKi9cbiAgX3Jlc2V0U2Nyb2xsUG9zaXRpb246IGZ1bmN0aW9uKHBvcykge1xuICAgIGlmICh0aGlzLnNjcm9sbFRhcmdldCAmJiBwb3MgPj0gMCkge1xuICAgICAgdGhpcy5fc2Nyb2xsVG9wID0gcG9zO1xuICAgICAgdGhpcy5fc2Nyb2xsUG9zaXRpb24gPSB0aGlzLl9zY3JvbGxUb3A7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBzY3JvbGwgaGVpZ2h0LCB0aGF0J3MgdGhlIGhlaWdodCBvZiB0aGUgY29udGVudCxcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFuPX0gZm9yY2VVcGRhdGUgSWYgdHJ1ZSwgdXBkYXRlcyB0aGUgaGVpZ2h0IG5vIG1hdHRlciB3aGF0LlxuICAgKi9cbiAgX3VwZGF0ZVNjcm9sbGVyU2l6ZTogZnVuY3Rpb24oZm9yY2VVcGRhdGUpIHtcbiAgICBpZiAodGhpcy5ncmlkKSB7XG4gICAgICB0aGlzLl9lc3RTY3JvbGxIZWlnaHQgPSB0aGlzLl92aXJ0dWFsUm93Q291bnQgKiB0aGlzLl9yb3dIZWlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2VzdFNjcm9sbEhlaWdodCA9ICh0aGlzLl9waHlzaWNhbEJvdHRvbSArXG4gICAgICAgICAgTWF0aC5tYXgodGhpcy5fdmlydHVhbENvdW50IC0gdGhpcy5fcGh5c2ljYWxDb3VudCAtIHRoaXMuX3ZpcnR1YWxTdGFydCwgMCkgKiB0aGlzLl9waHlzaWNhbEF2ZXJhZ2UpO1xuICAgIH1cbiAgICBmb3JjZVVwZGF0ZSA9IGZvcmNlVXBkYXRlIHx8IHRoaXMuX3Njcm9sbEhlaWdodCA9PT0gMDtcbiAgICBmb3JjZVVwZGF0ZSA9IGZvcmNlVXBkYXRlIHx8IHRoaXMuX3Njcm9sbFBvc2l0aW9uID49IHRoaXMuX2VzdFNjcm9sbEhlaWdodCAtIHRoaXMuX3BoeXNpY2FsU2l6ZTtcbiAgICBmb3JjZVVwZGF0ZSA9IGZvcmNlVXBkYXRlIHx8IHRoaXMuZ3JpZCAmJiB0aGlzLiQuaXRlbXMuc3R5bGUuaGVpZ2h0IDwgdGhpcy5fZXN0U2Nyb2xsSGVpZ2h0O1xuICAgIC8vIEFtb3J0aXplIGhlaWdodCBhZGp1c3RtZW50LCBzbyBpdCB3b24ndCB0cmlnZ2VyIGxhcmdlIHJlcGFpbnRzIHRvbyBvZnRlbi5cbiAgICBpZiAoZm9yY2VVcGRhdGUgfHwgTWF0aC5hYnModGhpcy5fZXN0U2Nyb2xsSGVpZ2h0IC0gdGhpcy5fc2Nyb2xsSGVpZ2h0KSA+PSB0aGlzLl92aWV3cG9ydEhlaWdodCkge1xuICAgICAgdGhpcy4kLml0ZW1zLnN0eWxlLmhlaWdodCA9IHRoaXMuX2VzdFNjcm9sbEhlaWdodCArICdweCc7XG4gICAgICB0aGlzLl9zY3JvbGxIZWlnaHQgPSB0aGlzLl9lc3RTY3JvbGxIZWlnaHQ7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBTY3JvbGwgdG8gYSBzcGVjaWZpYyBpbmRleCBpbiB0aGUgdmlydHVhbCBsaXN0IHJlZ2FyZGxlc3NcbiAgICogb2YgdGhlIHBoeXNpY2FsIGl0ZW1zIGluIHRoZSBET00gdHJlZS5cbiAgICpcbiAgICogQG1ldGhvZCBzY3JvbGxUb0luZGV4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpZHggVGhlIGluZGV4IG9mIHRoZSBpdGVtXG4gICAqL1xuICBzY3JvbGxUb0luZGV4OiBmdW5jdGlvbihpZHgpIHtcbiAgICBpZiAodHlwZW9mIGlkeCAhPT0gJ251bWJlcicgfHwgaWR4IDwgMCB8fCBpZHggPiB0aGlzLml0ZW1zLmxlbmd0aCAtIDEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZmx1c2ggPyBmbHVzaCgpIDogZmx1c2gkMCgpO1xuICAgIC8vIEl0ZW1zIHNob3VsZCBoYXZlIGJlZW4gcmVuZGVyZWQgcHJpb3Igc2Nyb2xsaW5nIHRvIGFuIGluZGV4LlxuICAgIGlmICh0aGlzLl9waHlzaWNhbENvdW50ID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlkeCA9IHRoaXMuX2NsYW1wKGlkeCwgMCwgdGhpcy5fdmlydHVhbENvdW50IC0gMSk7XG4gICAgLy8gVXBkYXRlIHRoZSB2aXJ0dWFsIHN0YXJ0IG9ubHkgd2hlbiBuZWVkZWQuXG4gICAgaWYgKCF0aGlzLl9pc0luZGV4UmVuZGVyZWQoaWR4KSB8fCBpZHggPj0gdGhpcy5fbWF4VmlydHVhbFN0YXJ0KSB7XG4gICAgICB0aGlzLl92aXJ0dWFsU3RhcnQgPSB0aGlzLmdyaWQgPyAoaWR4IC0gdGhpcy5faXRlbXNQZXJSb3cgKiAyKSA6IChpZHggLSAxKTtcbiAgICB9XG4gICAgdGhpcy5fbWFuYWdlRm9jdXMoKTtcbiAgICB0aGlzLl9hc3NpZ25Nb2RlbHMoKTtcbiAgICB0aGlzLl91cGRhdGVNZXRyaWNzKCk7XG4gICAgLy8gRXN0aW1hdGUgbmV3IHBoeXNpY2FsIG9mZnNldC5cbiAgICB0aGlzLl9waHlzaWNhbFRvcCA9IE1hdGguZmxvb3IodGhpcy5fdmlydHVhbFN0YXJ0IC8gdGhpcy5faXRlbXNQZXJSb3cpICogdGhpcy5fcGh5c2ljYWxBdmVyYWdlO1xuXG4gICAgdmFyIGN1cnJlbnRUb3BJdGVtID0gdGhpcy5fcGh5c2ljYWxTdGFydDtcbiAgICB2YXIgY3VycmVudFZpcnR1YWxJdGVtID0gdGhpcy5fdmlydHVhbFN0YXJ0O1xuICAgIHZhciB0YXJnZXRPZmZzZXRUb3AgPSAwO1xuICAgIHZhciBoaWRkZW5Db250ZW50U2l6ZSA9IHRoaXMuX2hpZGRlbkNvbnRlbnRTaXplO1xuICAgIC8vIHNjcm9sbCB0byB0aGUgaXRlbSBhcyBtdWNoIGFzIHdlIGNhbi5cbiAgICB3aGlsZSAoY3VycmVudFZpcnR1YWxJdGVtIDwgaWR4ICYmIHRhcmdldE9mZnNldFRvcCA8PSBoaWRkZW5Db250ZW50U2l6ZSkge1xuICAgICAgdGFyZ2V0T2Zmc2V0VG9wID0gdGFyZ2V0T2Zmc2V0VG9wICsgdGhpcy5fZ2V0UGh5c2ljYWxTaXplSW5jcmVtZW50KGN1cnJlbnRUb3BJdGVtKTtcbiAgICAgIGN1cnJlbnRUb3BJdGVtID0gKGN1cnJlbnRUb3BJdGVtICsgMSkgJSB0aGlzLl9waHlzaWNhbENvdW50O1xuICAgICAgY3VycmVudFZpcnR1YWxJdGVtKys7XG4gICAgfVxuICAgIHRoaXMuX3VwZGF0ZVNjcm9sbGVyU2l6ZSh0cnVlKTtcbiAgICB0aGlzLl9wb3NpdGlvbkl0ZW1zKCk7XG4gICAgdGhpcy5fcmVzZXRTY3JvbGxQb3NpdGlvbih0aGlzLl9waHlzaWNhbFRvcCArIHRoaXMuX3Njcm9sbE9mZnNldCArIHRhcmdldE9mZnNldFRvcCk7XG4gICAgdGhpcy5faW5jcmVhc2VQb29sSWZOZWVkZWQoMCk7XG4gICAgLy8gY2xlYXIgY2FjaGVkIHZpc2libGUgaW5kZXguXG4gICAgdGhpcy5fZmlyc3RWaXNpYmxlSW5kZXhWYWwgPSBudWxsO1xuICAgIHRoaXMuX2xhc3RWaXNpYmxlSW5kZXhWYWwgPSBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXNldCB0aGUgcGh5c2ljYWwgYXZlcmFnZSBhbmQgdGhlIGF2ZXJhZ2UgY291bnQuXG4gICAqL1xuICBfcmVzZXRBdmVyYWdlOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9waHlzaWNhbEF2ZXJhZ2UgPSAwO1xuICAgIHRoaXMuX3BoeXNpY2FsQXZlcmFnZUNvdW50ID0gMDtcbiAgfSxcblxuICAvKipcbiAgICogQSBoYW5kbGVyIGZvciB0aGUgYGlyb24tcmVzaXplYCBldmVudCB0cmlnZ2VyZWQgYnkgYElyb25SZXNpemFibGVCZWhhdmlvcmBcbiAgICogd2hlbiB0aGUgZWxlbWVudCBpcyByZXNpemVkLlxuICAgKi9cbiAgX3Jlc2l6ZUhhbmRsZXI6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2RlYm91bmNlKCdfcmVuZGVyJywgZnVuY3Rpb24oKSB7XG4gICAgICAvLyBjbGVhciBjYWNoZWQgdmlzaWJsZSBpbmRleC5cbiAgICAgIHRoaXMuX2ZpcnN0VmlzaWJsZUluZGV4VmFsID0gbnVsbDtcbiAgICAgIHRoaXMuX2xhc3RWaXNpYmxlSW5kZXhWYWwgPSBudWxsO1xuICAgICAgLy8gU2tpcCB0aGUgcmVzaXplIGV2ZW50IG9uIHRvdWNoIGRldmljZXMgd2hlbiB0aGUgYWRkcmVzcyBiYXIgc2xpZGVzIHVwLlxuICAgICAgdGhpcy51cGRhdGVWaWV3cG9ydEJvdW5kYXJpZXMoKTtcbiAgICAgIGlmICh0aGlzLl9pc1Zpc2libGUpIHtcbiAgICAgICAgLy8gUmVpbnN0YWxsIHRoZSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIuXG4gICAgICAgIHRoaXMudG9nZ2xlU2Nyb2xsTGlzdGVuZXIodHJ1ZSk7XG4gICAgICAgIHRoaXMuX3Jlc2V0QXZlcmFnZSgpO1xuICAgICAgICB0aGlzLl9yZW5kZXIoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFVuaW5zdGFsbCB0aGUgc2Nyb2xsIGV2ZW50IGxpc3RlbmVyLlxuICAgICAgICB0aGlzLnRvZ2dsZVNjcm9sbExpc3RlbmVyKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9LCBBTklNQVRJT05fRlJBTUUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhIHJhbmRvbSBpbmRleCB0byB0aGUgaW5kZXggb2YgdGhlIGl0ZW0gdGhhdCBjb21wbGV0ZXMgaXQncyByb3cuXG4gICAqIEFsbG93cyBmb3IgYmV0dGVyIG9yZGVyIGFuZCBmaWxsIGNvbXB1dGF0aW9uIHdoZW4gZ3JpZCA9PSB0cnVlLlxuICAgKi9cbiAgX2NvbnZlcnRJbmRleFRvQ29tcGxldGVSb3c6IGZ1bmN0aW9uKGlkeCkge1xuICAgIC8vIHdoZW4gZ3JpZCA9PSBmYWxzZSBfaXRlbVBlclJvdyBjYW4gYmUgdW5zZXQuXG4gICAgdGhpcy5faXRlbXNQZXJSb3cgPSB0aGlzLl9pdGVtc1BlclJvdyB8fCAxO1xuICAgIHJldHVybiB0aGlzLmdyaWQgPyBNYXRoLmNlaWwoaWR4IC8gdGhpcy5faXRlbXNQZXJSb3cpICogdGhpcy5faXRlbXNQZXJSb3cgOiBpZHg7XG4gIH0sXG5cbiAgX2lzSW5kZXhSZW5kZXJlZDogZnVuY3Rpb24oaWR4KSB7XG4gICAgcmV0dXJuIGlkeCA+PSB0aGlzLl92aXJ0dWFsU3RhcnQgJiYgaWR4IDw9IHRoaXMuX3ZpcnR1YWxFbmQ7XG4gIH0sXG5cbiAgX2dldFBoeXNpY2FsSW5kZXg6IGZ1bmN0aW9uKHZpZHgpIHtcbiAgICByZXR1cm4gKHRoaXMuX3BoeXNpY2FsU3RhcnQgKyAodmlkeCAtIHRoaXMuX3ZpcnR1YWxTdGFydCkpICUgdGhpcy5fcGh5c2ljYWxDb3VudDtcbiAgfSxcblxuICBfY2xhbXA6IGZ1bmN0aW9uKHYsIG1pbiwgbWF4KSB7XG4gICAgcmV0dXJuIE1hdGgubWluKG1heCwgTWF0aC5tYXgobWluLCB2KSk7XG4gIH0sXG5cbiAgX2RlYm91bmNlOiBmdW5jdGlvbihuYW1lLCBjYiwgYXN5bmNNb2R1bGUpIHtcbiAgICB0aGlzLl9kZWJvdW5jZXJzID0gdGhpcy5fZGVib3VuY2VycyB8fCB7fTtcbiAgICB0aGlzLl9kZWJvdW5jZXJzW25hbWVdID0gRGVib3VuY2VyLmRlYm91bmNlKFxuICAgICAgdGhpcy5fZGVib3VuY2Vyc1tuYW1lXSxcbiAgICAgIGFzeW5jTW9kdWxlLFxuICAgICAgY2IuYmluZCh0aGlzKSk7XG4gICAgZW5xdWV1ZURlYm91bmNlcih0aGlzLl9kZWJvdW5jZXJzW25hbWVdKTtcbiAgfVxuXG59KTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBWYWFkaW4gTHRkLlxuVGhpcyBwcm9ncmFtIGlzIGF2YWlsYWJsZSB1bmRlciBBcGFjaGUgTGljZW5zZSBWZXJzaW9uIDIuMCwgYXZhaWxhYmxlIGF0IGh0dHBzOi8vdmFhZGluLmNvbS9saWNlbnNlL1xuKi9cbmltcG9ydCB7IGFmdGVyTmV4dFJlbmRlciB9IGZyb20gJ0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL3JlbmRlci1zdGF0dXMuanMnO1xuXG5pbXBvcnQgeyBhbmltYXRpb25GcmFtZSB9IGZyb20gJ0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL2FzeW5jLmpzJztcbmltcG9ydCB7IGZsdXNoIH0gZnJvbSAnQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvZmx1c2guanMnO1xuaW1wb3J0IHsgUG9seW1lcklyb25MaXN0IH0gZnJvbSAnLi9pcm9uLWxpc3QuanMnO1xuaW1wb3J0IHsgRGVib3VuY2VyIH0gZnJvbSAnQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvZGVib3VuY2UuanMnO1xuLyoqXG4gKiBUaGlzIEVsZW1lbnQgaXMgdXNlZCBpbnRlcm5hbGx5IGJ5IHZhYWRpbi1ncmlkLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIEdyaWRTY3JvbGxlckVsZW1lbnQgZXh0ZW5kcyBQb2x5bWVySXJvbkxpc3Qge1xuXG4gIHN0YXRpYyBnZXQgaXMoKSB7XG4gICAgcmV0dXJuICd2YWFkaW4tZ3JpZC1zY3JvbGxlcic7XG4gIH1cblxuICBzdGF0aWMgZ2V0IHByb3BlcnRpZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNpemU6IHtcbiAgICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgICBub3RpZnk6IHRydWVcbiAgICAgIH0sXG4gICAgICBfdmlkeE9mZnNldDoge1xuICAgICAgICB2YWx1ZTogMFxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0IG9ic2VydmVycygpIHtcbiAgICByZXR1cm4gW1xuICAgICAgJ19lZmZlY3RpdmVTaXplQ2hhbmdlZChfZWZmZWN0aXZlU2l6ZSknXG4gICAgXTtcbiAgfVxuXG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgdGhpcy5fc2Nyb2xsSGFuZGxlcigpO1xuICB9XG5cbiAgLyoqXG4gICogQHByb3RlY3RlZFxuICAqL1xuICBfdXBkYXRlU2Nyb2xsZXJJdGVtKGl0ZW0sIGluZGV4KSB7fVxuICAvKipcbiAgKiBAcHJvdGVjdGVkXG4gICovXG4gIF9hZnRlclNjcm9sbCgpIHt9XG4gIC8qKlxuICAqIEBwcm90ZWN0ZWRcbiAgKi9cbiAgX2dldFJvd1RhcmdldCgpIHt9XG4gIC8qKlxuICAqIEBwcm90ZWN0ZWRcbiAgKi9cbiAgX2NyZWF0ZVNjcm9sbGVyUm93cygpIHt9XG4gIC8qKlxuICAqIEBwcm90ZWN0ZWRcbiAgKi9cbiAgX2NhblBvcHVsYXRlKCkge31cblxuICAvKipcbiAgKiBAcHJpdmF0ZVxuICAqL1xuICBzY3JvbGxUb0luZGV4KGluZGV4KSB7XG4gICAgdGhpcy5fd2FyblByaXZhdGVBUElBY2Nlc3MoJ3Njcm9sbFRvSW5kZXgnKTtcblxuICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgIHRoaXMuX3BlbmRpbmdTY3JvbGxUb0luZGV4ID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKCFwYXJzZUludCh0aGlzLiQuaXRlbXMuc3R5bGUuYm9yZGVyVG9wV2lkdGgpICYmIGluZGV4ID4gMCkge1xuICAgICAgLy8gU2NoZWR1bGUgYW5vdGhlciBzY3JvbGwgdG8gYmUgaW52b2tlZCBvbmNlIGluaXQgaXMgY29tcGxldGVcbiAgICAgIHRoaXMuX3BlbmRpbmdTY3JvbGxUb0luZGV4ID0gaW5kZXg7XG4gICAgfVxuXG4gICAgdGhpcy5fc2Nyb2xsaW5nVG9JbmRleCA9IHRydWU7XG4gICAgaW5kZXggPSBNYXRoLm1pbihNYXRoLm1heChpbmRleCwgMCksIHRoaXMuX2VmZmVjdGl2ZVNpemUgLSAxKTtcbiAgICB0aGlzLiQudGFibGUuc2Nyb2xsVG9wID0gaW5kZXggLyB0aGlzLl9lZmZlY3RpdmVTaXplICogKHRoaXMuJC50YWJsZS5zY3JvbGxIZWlnaHQgLSB0aGlzLiQudGFibGUub2Zmc2V0SGVpZ2h0KTtcbiAgICB0aGlzLl9zY3JvbGxIYW5kbGVyKCk7XG5cbiAgICBpZiAodGhpcy5fYWNjZXNzSXJvbkxpc3RBUEkoKCkgPT4gdGhpcy5fbWF4U2Nyb2xsVG9wKSAmJiB0aGlzLl92aXJ0dWFsQ291bnQgPCB0aGlzLl9lZmZlY3RpdmVTaXplKSB7XG4gICAgICB0aGlzLl9hZGp1c3RWaXJ0dWFsSW5kZXhPZmZzZXQoMTAwMDAwMCk7XG4gICAgfVxuXG4gICAgdGhpcy5fYWNjZXNzSXJvbkxpc3RBUEkoKCkgPT4gc3VwZXIuc2Nyb2xsVG9JbmRleChpbmRleCAtIHRoaXMuX3ZpZHhPZmZzZXQpKTtcbiAgICB0aGlzLl9zY3JvbGxIYW5kbGVyKCk7XG5cbiAgICAvLyBFbnN1cmUgc2Nyb2xsIHBvc2l0aW9uXG4gICAgY29uc3Qgcm93ID0gQXJyYXkuZnJvbSh0aGlzLiQuaXRlbXMuY2hpbGRyZW4pLmZpbHRlcihjaGlsZCA9PiBjaGlsZC5pbmRleCA9PT0gaW5kZXgpWzBdO1xuICAgIGlmIChyb3cpIHtcbiAgICAgIGNvbnN0IGhlYWRlck9mZnNldCA9IHJvdy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgLSB0aGlzLiQuaGVhZGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbTtcbiAgICAgIGlmIChNYXRoLmFicyhoZWFkZXJPZmZzZXQpID4gMSkge1xuICAgICAgICB0aGlzLiQudGFibGUuc2Nyb2xsVG9wICs9IGhlYWRlck9mZnNldDtcbiAgICAgICAgdGhpcy5fc2Nyb2xsSGFuZGxlcigpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX3Njcm9sbGluZ1RvSW5kZXggPSBmYWxzZTtcbiAgfVxuXG4gIF9lZmZlY3RpdmVTaXplQ2hhbmdlZChzaXplKSB7XG4gICAgbGV0IGZ2aTsgLy8gZmlyc3QgdmlzaWJsZSAoYWRqdXN0ZWQpIGluZGV4XG4gICAgbGV0IGZ2aU9mZnNldCA9IDA7XG4gICAgdGhpcy5faXRlcmF0ZUl0ZW1zKChwaWR4LCB2aWR4KSA9PiB7XG4gICAgICBpZiAodmlkeCA9PT0gdGhpcy5fZmlyc3RWaXNpYmxlSW5kZXgpIHtcbiAgICAgICAgY29uc3Qgcm93ID0gdGhpcy5fcGh5c2ljYWxJdGVtc1twaWR4XTtcbiAgICAgICAgZnZpID0gcm93LmluZGV4O1xuICAgICAgICBmdmlPZmZzZXQgPSByb3cuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMuaXRlbXMgJiYgc2l6ZSA8IHRoaXMuaXRlbXMubGVuZ3RoKSB7XG4gICAgICAvLyBTaXplIHdhcyByZWR1Y2VkLCBzY3JvbGwgdG8gMCBmaXJzdFxuICAgICAgdGhpcy5fc2Nyb2xsVG9wID0gMDtcbiAgICB9XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHRoaXMuaXRlbXMpKSB7XG4gICAgICAvLyBFZGdlL0lFIHNlZW1zIHRvIGhhdmUgdGhlIGxvd2VzdCBtYXhpbXVtXG4gICAgICBjb25zdCBtYXhWaXJ0dWFsSXRlbXMgPSB0aGlzLl9lZGdlIHx8IHRoaXMuX2llID8gMzAwMDAgOiAxMDAwMDA7XG4gICAgICB0aGlzLml0ZW1zID0ge2xlbmd0aDogTWF0aC5taW4oc2l6ZSwgbWF4VmlydHVhbEl0ZW1zKX07XG4gICAgfVxuXG4gICAgdGhpcy5fYWNjZXNzSXJvbkxpc3RBUEkoKCkgPT4gc3VwZXIuX2l0ZW1zQ2hhbmdlZCh7cGF0aDogJ2l0ZW1zJ30pKTtcblxuICAgIHRoaXMuX3ZpcnR1YWxDb3VudCA9IE1hdGgubWluKHRoaXMuaXRlbXMubGVuZ3RoLCBzaXplKSB8fCAwO1xuXG4gICAgaWYgKHRoaXMuX3Njcm9sbFRvcCA9PT0gMCkge1xuICAgICAgdGhpcy5fYWNjZXNzSXJvbkxpc3RBUEkoKCkgPT4gdGhpcy5fc2Nyb2xsVG9JbmRleChNYXRoLm1pbihzaXplIC0gMSwgZnZpKSkpO1xuICAgICAgdGhpcy5faXRlcmF0ZUl0ZW1zKChwaWR4LCB2aWR4KSA9PiB7XG4gICAgICAgIGNvbnN0IHJvdyA9IHRoaXMuX3BoeXNpY2FsSXRlbXNbcGlkeF07XG4gICAgICAgIGlmIChyb3cuaW5kZXggPT09IGZ2aSkge1xuICAgICAgICAgIHRoaXMuJC50YWJsZS5zY3JvbGxUb3AgKz0gTWF0aC5yb3VuZChyb3cuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wIC0gZnZpT2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZXN0b3JlIGtleWJvYXJkIGZvY3VzIHRvIHRoZSByaWdodCBjZWxsXG4gICAgICAgIGlmIChyb3cuaW5kZXggPT09IHRoaXMuX2ZvY3VzZWRJdGVtSW5kZXggJiYgdGhpcy5faXRlbXNGb2N1c2FibGUgJiYgdGhpcy4kLml0ZW1zLmNvbnRhaW5zKHRoaXMuc2hhZG93Um9vdC5hY3RpdmVFbGVtZW50KSkge1xuICAgICAgICAgIGNvbnN0IGNlbGxJbmRleCA9IEFycmF5LmZyb20odGhpcy5faXRlbXNGb2N1c2FibGUucGFyZW50RWxlbWVudC5jaGlsZHJlbikuaW5kZXhPZih0aGlzLl9pdGVtc0ZvY3VzYWJsZSk7XG4gICAgICAgICAgcm93LmNoaWxkcmVuW2NlbGxJbmRleF0uZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuX2Fzc2lnbk1vZGVscygpO1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLl91cGRhdGUoKSk7XG4gIH1cblxuICBfcG9zaXRpb25JdGVtcygpIHtcbiAgICB0aGlzLl9hZGp1c3RTY3JvbGxQb3NpdGlvbigpO1xuXG4gICAgbGV0IHJlUG9zaXRpb247XG4gICAgaWYgKGlzTmFOKHRoaXMuX3BoeXNpY2FsVG9wKSkge1xuICAgICAgcmVQb3NpdGlvbiA9IHRydWU7XG4gICAgICB0aGlzLl9waHlzaWNhbFRvcCA9IDA7XG4gICAgfVxuXG4gICAgbGV0IHkgPSB0aGlzLl9waHlzaWNhbFRvcDtcbiAgICB0aGlzLl9pdGVyYXRlSXRlbXMoKHBpZHgsIHZpZHgpID0+IHtcbiAgICAgIHRoaXMuX3BoeXNpY2FsSXRlbXNbcGlkeF0uc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVkoJHt5fXB4KWA7XG4gICAgICB5ICs9IHRoaXMuX3BoeXNpY2FsU2l6ZXNbcGlkeF07XG4gICAgfSk7XG5cbiAgICBpZiAocmVQb3NpdGlvbikge1xuICAgICAgdGhpcy5fc2Nyb2xsVG9JbmRleCgwKTtcbiAgICB9XG4gIH1cblxuICBfaW5jcmVhc2VQb29sSWZOZWVkZWQoY291bnQpIHtcbiAgICBpZiAoKGNvdW50ID09PSAwICYmIHRoaXMuX3Njcm9sbGluZ1RvSW5kZXgpIHx8ICF0aGlzLl9jYW5Qb3B1bGF0ZSgpIHx8ICF0aGlzLl9lZmZlY3RpdmVTaXplKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9pbml0aWFsUG9vbENyZWF0ZWQpIHtcbiAgICAgIHRoaXMuX2luaXRpYWxQb29sQ3JlYXRlZCA9IHRydWU7XG4gICAgICBzdXBlci5faW5jcmVhc2VQb29sSWZOZWVkZWQoMjUpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fb3B0UGh5c2ljYWxTaXplICE9PSBJbmZpbml0eSkge1xuICAgICAgdGhpcy5fZGVib3VuY2VJbmNyZWFzZVBvb2wgPSBEZWJvdW5jZXIuZGVib3VuY2UoXG4gICAgICAgIHRoaXMuX2RlYm91bmNlSW5jcmVhc2VQb29sLFxuICAgICAgICBhbmltYXRpb25GcmFtZSxcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgIHRoaXMuX3VwZGF0ZU1ldHJpY3MoKTtcbiAgICAgICAgICBjb25zdCByZW1haW5pbmdQaHlzaWNhbFNpemUgPSB0aGlzLl9vcHRQaHlzaWNhbFNpemUgLSB0aGlzLl9waHlzaWNhbFNpemU7XG4gICAgICAgICAgbGV0IGVzdGltYXRlZE1pc3NpbmdSb3dDb3VudCA9IE1hdGguY2VpbChyZW1haW5pbmdQaHlzaWNhbFNpemUgLyB0aGlzLl9waHlzaWNhbEF2ZXJhZ2UpO1xuXG4gICAgICAgICAgaWYgKHRoaXMuX3BoeXNpY2FsQ291bnQgKyBlc3RpbWF0ZWRNaXNzaW5nUm93Q291bnQgPiB0aGlzLl9lZmZlY3RpdmVTaXplKSB7XG4gICAgICAgICAgICAvLyBEbyBub3QgaW5jcmVhc2UgdGhlIHBoeXNpY2FsIGl0ZW0gY291bnQgYWJvdmUgdGhlIHRoaXMuX2VmZmVjdGl2ZVNpemVcbiAgICAgICAgICAgIGVzdGltYXRlZE1pc3NpbmdSb3dDb3VudCA9IE1hdGgubWF4KDAsIHRoaXMuX2VmZmVjdGl2ZVNpemUgLSB0aGlzLl9waHlzaWNhbENvdW50KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5fcGh5c2ljYWxTaXplICYmIGVzdGltYXRlZE1pc3NpbmdSb3dDb3VudCA+IDApIHtcbiAgICAgICAgICAgIHN1cGVyLl9pbmNyZWFzZVBvb2xJZk5lZWRlZChlc3RpbWF0ZWRNaXNzaW5nUm93Q291bnQpO1xuICAgICAgICAgICAgLy8gRW5zdXJlIHRoZSByb3dzIGFyZSBpbiBvcmRlciBhZnRlciBpbmNyZWFzaW5nIHBvb2xcbiAgICAgICAgICAgIHRoaXMuX19yZW9yZGVyQ2hpbGROb2RlcygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgX19yZW9yZGVyQ2hpbGROb2RlcygpIHtcbiAgICBjb25zdCBjaGlsZE5vZGVzID0gQXJyYXkuZnJvbSh0aGlzLiQuaXRlbXMuY2hpbGROb2Rlcyk7XG4gICAgY29uc3Qgcm93c0luT3JkZXIgPSAhIWNoaWxkTm9kZXMucmVkdWNlKChpbk9yZGVyLCBjdXJyZW50LCBjdXJyZW50SW5kZXgsIGFycmF5KSA9PiB7XG4gICAgICBpZiAoY3VycmVudEluZGV4ID09PSAwIHx8IGFycmF5W2N1cnJlbnRJbmRleCAtIDFdLmluZGV4ID09PSBjdXJyZW50LmluZGV4IC0gMSkge1xuICAgICAgICByZXR1cm4gaW5PcmRlcjtcbiAgICAgIH1cbiAgICB9LCB0cnVlKTtcblxuICAgIGlmICghcm93c0luT3JkZXIpIHtcbiAgICAgIGNoaWxkTm9kZXMuc29ydCgocm93MSwgcm93MikgPT4ge1xuICAgICAgICByZXR1cm4gcm93MS5pbmRleCAtIHJvdzIuaW5kZXg7XG4gICAgICB9KS5mb3JFYWNoKHJvdyA9PiB0aGlzLiQuaXRlbXMuYXBwZW5kQ2hpbGQocm93KSk7XG4gICAgfVxuICB9XG5cbiAgX2NyZWF0ZVBvb2woc2l6ZSkge1xuICAgIGNvbnN0IGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgIGNvbnN0IHBoeXNpY2FsSXRlbXMgPSB0aGlzLl9jcmVhdGVTY3JvbGxlclJvd3Moc2l6ZSk7XG5cbiAgICBwaHlzaWNhbEl0ZW1zLmZvckVhY2goaW5zdCA9PiBmcmFnbWVudC5hcHBlbmRDaGlsZChpbnN0KSk7XG4gICAgdGhpcy5fZ2V0Um93VGFyZ2V0KCkuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpO1xuXG4gICAgLy8gV2VpcmQgaGFjayBuZWVkZWQgdG8gZ2V0IFNhZmFyaSB0byBhY3R1YWxseSBkaXN0cmlidXRlIHNsb3RzXG4gICAgY29uc3QgY29udGVudCA9IHRoaXMucXVlcnlTZWxlY3RvcignW3Nsb3RdJyk7XG4gICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgIGNvbnN0IHNsb3QgPSBjb250ZW50LmdldEF0dHJpYnV0ZSgnc2xvdCcpO1xuICAgICAgY29udGVudC5zZXRBdHRyaWJ1dGUoJ3Nsb3QnLCAnZm9vLWJhcicpO1xuICAgICAgY29udGVudC5zZXRBdHRyaWJ1dGUoJ3Nsb3QnLCBzbG90KTtcbiAgICB9XG5cbiAgICB0aGlzLl91cGRhdGVIZWFkZXJGb290ZXJNZXRyaWNzKCk7XG5cbiAgICBhZnRlck5leHRSZW5kZXIodGhpcywgKCkgPT4gdGhpcy5ub3RpZnlSZXNpemUoKSk7XG4gICAgcmV0dXJuIHBoeXNpY2FsSXRlbXM7XG4gIH1cblxuICAvKipcbiAgICogQXNzaWducyB0aGUgZGF0YSBtb2RlbHMgdG8gYSBnaXZlbiBzZXQgb2YgaXRlbXMuXG4gICAqIEBwYXJhbSB7IUFycmF5PG51bWJlcj49fSBpdGVtU2V0XG4gICAqL1xuICBfYXNzaWduTW9kZWxzKGl0ZW1TZXQpIHtcbiAgICB0aGlzLl9pdGVyYXRlSXRlbXMoKHBpZHgsIHZpZHgpID0+IHtcbiAgICAgIGNvbnN0IGVsID0gdGhpcy5fcGh5c2ljYWxJdGVtc1twaWR4XTtcbiAgICAgIHRoaXMuX3RvZ2dsZUF0dHJpYnV0ZSgnaGlkZGVuJywgdmlkeCA+PSB0aGlzLl9lZmZlY3RpdmVTaXplLCBlbCk7XG4gICAgICB0aGlzLl91cGRhdGVTY3JvbGxlckl0ZW0oZWwsIHZpZHggKyAodGhpcy5fdmlkeE9mZnNldCB8fCAwKSk7XG4gICAgfSwgaXRlbVNldCk7XG4gIH1cblxuICBfc2Nyb2xsSGFuZGxlcigpIHtcbiAgICBjb25zdCBkZWx0YSA9IHRoaXMuJC50YWJsZS5zY3JvbGxUb3AgLSB0aGlzLl9zY3JvbGxQb3NpdGlvbjtcbiAgICB0aGlzLl9hY2Nlc3NJcm9uTGlzdEFQSShzdXBlci5fc2Nyb2xsSGFuZGxlcik7XG4gICAgY29uc3Qgb2xkT2Zmc2V0ID0gdGhpcy5fdmlkeE9mZnNldDtcbiAgICBpZiAodGhpcy5fYWNjZXNzSXJvbkxpc3RBUEkoKCkgPT4gdGhpcy5fbWF4U2Nyb2xsVG9wKSAmJiB0aGlzLl92aXJ0dWFsQ291bnQgPCB0aGlzLl9lZmZlY3RpdmVTaXplKSB7XG4gICAgICB0aGlzLl9hZGp1c3RWaXJ0dWFsSW5kZXhPZmZzZXQoZGVsdGEpO1xuICAgIH1cbiAgICBpZiAodGhpcy5fdmlkeE9mZnNldCAhPT0gb2xkT2Zmc2V0KSB7XG4gICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICB9XG4gICAgdGhpcy5fYWZ0ZXJTY3JvbGwoKTtcbiAgfVxuXG4gIF9hZGp1c3RWaXJ0dWFsSW5kZXhPZmZzZXQoZGVsdGEpIHtcbiAgICBpZiAoTWF0aC5hYnMoZGVsdGEpID4gMTAwMDApIHtcbiAgICAgIGlmICh0aGlzLl9ub1NjYWxlKSB7XG4gICAgICAgIHRoaXMuX25vU2NhbGUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3Qgc2NhbGUgPSB0aGlzLiQudGFibGUuc2Nyb2xsVG9wIC8gKHRoaXMuJC50YWJsZS5zY3JvbGxIZWlnaHQgLSB0aGlzLiQudGFibGUub2Zmc2V0SGVpZ2h0KTtcbiAgICAgIGNvbnN0IG9mZnNldCA9IHNjYWxlICogdGhpcy5fZWZmZWN0aXZlU2l6ZTtcbiAgICAgIHRoaXMuX3ZpZHhPZmZzZXQgPSBNYXRoLnJvdW5kKG9mZnNldCAtIHNjYWxlICogdGhpcy5fdmlydHVhbENvdW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTWFrZSBzdXJlIHVzZXIgY2FuIGFsd2F5cyBzd2lwZS93aGVlbCBzY3JvbGwgdG8gdGhlIHN0YXJ0IGFuZCBlbmRcbiAgICAgIGNvbnN0IG9sZE9mZnNldCA9IHRoaXMuX3ZpZHhPZmZzZXQgfHwgMDtcbiAgICAgIGNvbnN0IHRocmVzaG9sZCA9IDEwMDA7XG4gICAgICBjb25zdCBtYXhTaGlmdCA9IDEwMDtcbiAgICAgIC8vIEF0IHN0YXJ0XG4gICAgICBpZiAodGhpcy5fc2Nyb2xsVG9wID09PSAwKSB7XG4gICAgICAgIHRoaXMuX3ZpZHhPZmZzZXQgPSAwO1xuICAgICAgICBpZiAob2xkT2Zmc2V0ICE9PSB0aGlzLl92aWR4T2Zmc2V0KSB7XG4gICAgICAgICAgc3VwZXIuc2Nyb2xsVG9JbmRleCgwKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0aGlzLmZpcnN0VmlzaWJsZUluZGV4IDwgdGhyZXNob2xkICYmIHRoaXMuX3ZpZHhPZmZzZXQgPiAwKSB7XG4gICAgICAgIHRoaXMuX3ZpZHhPZmZzZXQgLT0gTWF0aC5taW4odGhpcy5fdmlkeE9mZnNldCwgbWF4U2hpZnQpO1xuICAgICAgICBpZiAob2xkT2Zmc2V0ICE9PSB0aGlzLl92aWR4T2Zmc2V0KSB7XG4gICAgICAgICAgc3VwZXIuc2Nyb2xsVG9JbmRleCh0aGlzLmZpcnN0VmlzaWJsZUluZGV4ICsgKG9sZE9mZnNldCAtIHRoaXMuX3ZpZHhPZmZzZXQpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9ub1NjYWxlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIC8vIEF0IGVuZFxuICAgICAgY29uc3QgbWF4T2Zmc2V0ID0gdGhpcy5fZWZmZWN0aXZlU2l6ZSAtIHRoaXMuX3ZpcnR1YWxDb3VudDtcbiAgICAgIGlmICh0aGlzLl9zY3JvbGxUb3AgPj0gdGhpcy5fbWF4U2Nyb2xsVG9wICYmIHRoaXMuX21heFNjcm9sbFRvcCA+IDApIHtcbiAgICAgICAgdGhpcy5fdmlkeE9mZnNldCA9IG1heE9mZnNldDtcbiAgICAgICAgaWYgKG9sZE9mZnNldCAhPT0gdGhpcy5fdmlkeE9mZnNldCkge1xuICAgICAgICAgIHN1cGVyLnNjcm9sbFRvSW5kZXgodGhpcy5fdmlydHVhbENvdW50KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0aGlzLmZpcnN0VmlzaWJsZUluZGV4ID4gdGhpcy5fdmlydHVhbENvdW50IC0gdGhyZXNob2xkICYmIHRoaXMuX3ZpZHhPZmZzZXQgPCBtYXhPZmZzZXQpIHtcbiAgICAgICAgdGhpcy5fdmlkeE9mZnNldCArPSBNYXRoLm1pbihtYXhPZmZzZXQgLSB0aGlzLl92aWR4T2Zmc2V0LCBtYXhTaGlmdCk7XG4gICAgICAgIGlmIChvbGRPZmZzZXQgIT09IHRoaXMuX3ZpZHhPZmZzZXQpIHtcbiAgICAgICAgICBzdXBlci5zY3JvbGxUb0luZGV4KHRoaXMuZmlyc3RWaXNpYmxlSW5kZXggLSAodGhpcy5fdmlkeE9mZnNldCAtIG9sZE9mZnNldCkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX25vU2NhbGUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9hY2Nlc3NJcm9uTGlzdEFQSShjYikge1xuICAgIHRoaXMuX3dhcm5Qcml2YXRlQVBJQWNjZXNzQXN5bmNFbmFibGVkID0gZmFsc2U7XG4gICAgY29uc3QgcmV0dXJuVmFsdWUgPSBjYi5hcHBseSh0aGlzKTtcbiAgICB0aGlzLl9kZWJvdW5jZXJXYXJuUHJpdmF0ZUFQSUFjY2VzcyA9IERlYm91bmNlci5kZWJvdW5jZShcbiAgICAgIHRoaXMuX2RlYm91bmNlcldhcm5Qcml2YXRlQVBJQWNjZXNzLFxuICAgICAgYW5pbWF0aW9uRnJhbWUsXG4gICAgICAoKSA9PiB0aGlzLl93YXJuUHJpdmF0ZUFQSUFjY2Vzc0FzeW5jRW5hYmxlZCA9IHRydWVcbiAgICApO1xuICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgfVxuXG4gIC8qIEFsbG93IGlyb24tbGlzdCB0byBhY2Nlc3MgaXRzIEFQSXMgZnJvbSBkZWJvdW5jZWQgY2FsbGJhY2tzIHdpdGhvdXQgd2FybnMgKi9cbiAgX2RlYm91bmNlUmVuZGVyKGNiLCBhc3luY01vZHVsZSkge1xuICAgIHN1cGVyLl9kZWJvdW5jZVJlbmRlcigoKSA9PiB0aGlzLl9hY2Nlc3NJcm9uTGlzdEFQSShjYiksIGFzeW5jTW9kdWxlKTtcbiAgfVxuXG4gIC8qIFdhcm4gd2hlbiBpcm9uLWxpc3QgQVBJcyBhcmUgYmVpbmcgYWNjZXNzZWQgZGlyZWN0bHkgKi9cbiAgX3dhcm5Qcml2YXRlQVBJQWNjZXNzKGFwaU5hbWUpIHtcbiAgICBpZiAodGhpcy5fd2FyblByaXZhdGVBUElBY2Nlc3NBc3luY0VuYWJsZWQpIHtcbiAgICAgIGNvbnNvbGUud2FybihgQWNjZXNzaW5nIHByaXZhdGUgQVBJICgke2FwaU5hbWV9KSFgKTtcbiAgICB9XG4gIH1cblxuICBfcmVuZGVyKCkge1xuICAgIHRoaXMuX2FjY2Vzc0lyb25MaXN0QVBJKHN1cGVyLl9yZW5kZXIpO1xuICB9XG5cbiAgX2NyZWF0ZUZvY3VzQmFja2ZpbGxJdGVtKCkgeyAvKiBJZ25vcmUgKi8gfVxuICBfbXVsdGlTZWxlY3Rpb25DaGFuZ2VkKCkgeyAvKiBJZ25vcmUgKi8gfVxuICBjbGVhclNlbGVjdGlvbigpIHsgLyogSWdub3JlICovIH1cbiAgX2l0ZW1zQ2hhbmdlZCgpIHsgLyogSWdub3JlICovIH1cbiAgX21hbmFnZUZvY3VzKCkgeyAvKiBJZ25vcmUgKi8gfVxuICBfcmVtb3ZlRm9jdXNlZEl0ZW0oKSB7IC8qIElnbm9yZSAqLyB9XG5cbiAgZ2V0IF9maXJzdFZpc2libGVJbmRleCgpIHtcbiAgICByZXR1cm4gdGhpcy5fYWNjZXNzSXJvbkxpc3RBUEkoKCkgPT4gc3VwZXIuZmlyc3RWaXNpYmxlSW5kZXgpO1xuICB9XG4gIGdldCBfbGFzdFZpc2libGVJbmRleCgpIHtcbiAgICByZXR1cm4gdGhpcy5fYWNjZXNzSXJvbkxpc3RBUEkoKCkgPT4gc3VwZXIubGFzdFZpc2libGVJbmRleCk7XG4gIH1cbiAgX3Njcm9sbFRvSW5kZXgoaW5kZXgpIHtcbiAgICB0aGlzLl9hY2Nlc3NJcm9uTGlzdEFQSSgoKSA9PiB0aGlzLnNjcm9sbFRvSW5kZXgoaW5kZXgpKTtcbiAgfVxuICBnZXQgZmlyc3RWaXNpYmxlSW5kZXgoKSB7XG4gICAgdGhpcy5fd2FyblByaXZhdGVBUElBY2Nlc3MoJ2ZpcnN0VmlzaWJsZUluZGV4Jyk7IHJldHVybiBzdXBlci5maXJzdFZpc2libGVJbmRleDtcbiAgfVxuICBzZXQgZmlyc3RWaXNpYmxlSW5kZXgodmFsdWUpIHtcbiAgICB0aGlzLl93YXJuUHJpdmF0ZUFQSUFjY2VzcygnZmlyc3RWaXNpYmxlSW5kZXgnKTsgc3VwZXIuZmlyc3RWaXNpYmxlSW5kZXggPSB2YWx1ZTtcbiAgfVxuICBnZXQgbGFzdFZpc2libGVJbmRleCgpIHtcbiAgICB0aGlzLl93YXJuUHJpdmF0ZUFQSUFjY2VzcygnbGFzdFZpc2libGVJbmRleCcpOyByZXR1cm4gc3VwZXIubGFzdFZpc2libGVJbmRleDtcbiAgfVxuICBzZXQgbGFzdFZpc2libGVJbmRleCh2YWx1ZSkge1xuICAgIHRoaXMuX3dhcm5Qcml2YXRlQVBJQWNjZXNzKCdsYXN0VmlzaWJsZUluZGV4Jyk7IHN1cGVyLmxhc3RWaXNpYmxlSW5kZXggPSB2YWx1ZTtcbiAgfVxuICB1cGRhdGVWaWV3cG9ydEJvdW5kYXJpZXMoKSB7XG4gICAgdGhpcy5fd2FyblByaXZhdGVBUElBY2Nlc3MoJ3VwZGF0ZVZpZXdwb3J0Qm91bmRhcmllcycpOyBzdXBlci51cGRhdGVWaWV3cG9ydEJvdW5kYXJpZXMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuICBfcmVzaXplSGFuZGxlcigpIHtcbiAgICBzdXBlci5fcmVzaXplSGFuZGxlcigpO1xuICAgIGZsdXNoKCk7XG4gIH1cbn1cblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKEdyaWRTY3JvbGxlckVsZW1lbnQuaXMsIEdyaWRTY3JvbGxlckVsZW1lbnQpO1xuXG5leHBvcnQgeyBHcmlkU2Nyb2xsZXJFbGVtZW50IGFzIFNjcm9sbGVyRWxlbWVudCB9O1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFZhYWRpbiBMdGQuXG5UaGlzIHByb2dyYW0gaXMgYXZhaWxhYmxlIHVuZGVyIEFwYWNoZSBMaWNlbnNlIFZlcnNpb24gMi4wLCBhdmFpbGFibGUgYXQgaHR0cHM6Ly92YWFkaW4uY29tL2xpY2Vuc2UvXG4qL1xuLyoqXG4gKiBAcG9seW1lck1peGluXG4gKi9cbmV4cG9ydCBjb25zdCBBMTF5TWl4aW4gPSBzdXBlckNsYXNzID0+IGNsYXNzIEExMXlNaXhpbiBleHRlbmRzIHN1cGVyQ2xhc3Mge1xuICBzdGF0aWMgZ2V0IG9ic2VydmVycygpIHtcbiAgICByZXR1cm4gW1xuICAgICAgJ19hMTF5VXBkYXRlR3JpZFNpemUoc2l6ZSwgX2NvbHVtblRyZWUsIF9jb2x1bW5UcmVlLiopJ1xuICAgIF07XG4gIH1cblxuICBfYTExeUdldEhlYWRlclJvd0NvdW50KF9jb2x1bW5UcmVlKSB7XG4gICAgcmV0dXJuIF9jb2x1bW5UcmVlLmZpbHRlcihsZXZlbCA9PiBsZXZlbC5zb21lKGNvbCA9PiBjb2wuX2hlYWRlclRlbXBsYXRlIHx8IGNvbC5oZWFkZXJSZW5kZXJlciB8fCBjb2wucGF0aCB8fCBjb2wuaGVhZGVyKSkubGVuZ3RoO1xuICB9XG5cbiAgX2ExMXlHZXRGb290ZXJSb3dDb3VudChfY29sdW1uVHJlZSkge1xuICAgIHJldHVybiBfY29sdW1uVHJlZS5maWx0ZXIobGV2ZWwgPT4gbGV2ZWwuc29tZShjb2wgPT4gY29sLl9oZWFkZXJUZW1wbGF0ZSB8fCBjb2wuaGVhZGVyUmVuZGVyZXIpKS5sZW5ndGg7XG4gIH1cblxuICBfYTExeVVwZGF0ZUdyaWRTaXplKHNpemUsIF9jb2x1bW5UcmVlKSB7XG4gICAgaWYgKHNpemUgPT09IHVuZGVmaW5lZCB8fCBfY29sdW1uVHJlZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgYm9keUNvbHVtbnMgPSBfY29sdW1uVHJlZVtfY29sdW1uVHJlZS5sZW5ndGggLSAxXTtcbiAgICB0aGlzLiQudGFibGUuc2V0QXR0cmlidXRlKFxuICAgICAgJ2FyaWEtcm93Y291bnQnLFxuICAgICAgc2l6ZSArIHRoaXMuX2ExMXlHZXRIZWFkZXJSb3dDb3VudChfY29sdW1uVHJlZSkgKyB0aGlzLl9hMTF5R2V0Rm9vdGVyUm93Q291bnQoX2NvbHVtblRyZWUpXG4gICAgKTtcbiAgICB0aGlzLiQudGFibGUuc2V0QXR0cmlidXRlKCdhcmlhLWNvbGNvdW50JywgYm9keUNvbHVtbnMgJiYgYm9keUNvbHVtbnMubGVuZ3RoIHx8IDApO1xuXG4gICAgdGhpcy5fYTExeVVwZGF0ZUhlYWRlclJvd3MoKTtcbiAgICB0aGlzLl9hMTF5VXBkYXRlRm9vdGVyUm93cygpO1xuICB9XG5cbiAgX2ExMXlVcGRhdGVIZWFkZXJSb3dzKCkge1xuICAgIEFycmF5LmZyb20odGhpcy4kLmhlYWRlci5jaGlsZHJlbikuZm9yRWFjaCgoaGVhZGVyUm93LCBpbmRleCkgPT5cbiAgICAgIGhlYWRlclJvdy5zZXRBdHRyaWJ1dGUoJ2FyaWEtcm93aW5kZXgnLCBpbmRleCArIDEpXG4gICAgKTtcbiAgfVxuXG4gIF9hMTF5VXBkYXRlRm9vdGVyUm93cygpIHtcbiAgICBBcnJheS5mcm9tKHRoaXMuJC5mb290ZXIuY2hpbGRyZW4pLmZvckVhY2goKGZvb3RlclJvdywgaW5kZXgpID0+XG4gICAgICBmb290ZXJSb3cuc2V0QXR0cmlidXRlKFxuICAgICAgICAnYXJpYS1yb3dpbmRleCcsXG4gICAgICAgIHRoaXMuX2ExMXlHZXRIZWFkZXJSb3dDb3VudCh0aGlzLl9jb2x1bW5UcmVlKSArIHRoaXMuc2l6ZSArIGluZGV4ICsgMVxuICAgICAgKVxuICAgICk7XG4gIH1cblxuICBfYTExeVVwZGF0ZVJvd1Jvd2luZGV4KHJvdywgaW5kZXgpIHtcbiAgICByb3cuc2V0QXR0cmlidXRlKCdhcmlhLXJvd2luZGV4JywgaW5kZXggKyB0aGlzLl9hMTF5R2V0SGVhZGVyUm93Q291bnQodGhpcy5fY29sdW1uVHJlZSkgKyAxKTtcbiAgfVxuXG4gIF9hMTF5VXBkYXRlUm93U2VsZWN0ZWQocm93LCBzZWxlY3RlZCkge1xuICAgIC8vIEphd3MgcmVhZHMgc2VsZWN0aW9uIG9ubHkgZm9yIHJvd3MsIE5WREEgb25seSBmb3IgY2VsbHNcbiAgICByb3cuc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgQm9vbGVhbihzZWxlY3RlZCkpO1xuICAgIEFycmF5LmZyb20ocm93LmNoaWxkcmVuKS5mb3JFYWNoKGNlbGwgPT5cbiAgICAgIGNlbGwuc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgQm9vbGVhbihzZWxlY3RlZCkpXG4gICAgKTtcbiAgfVxuXG4gIF9hMTF5VXBkYXRlUm93TGV2ZWwocm93LCBsZXZlbCkge1xuICAgIHJvdy5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGV2ZWwnLCBsZXZlbCArIDEpO1xuICB9XG5cbiAgX2ExMXlVcGRhdGVSb3dEZXRhaWxzT3BlbmVkKHJvdywgZGV0YWlsc09wZW5lZCkge1xuICAgIEFycmF5LmZyb20ocm93LmNoaWxkcmVuKS5mb3JFYWNoKGNlbGwgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBkZXRhaWxzT3BlbmVkID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgY2VsbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCBkZXRhaWxzT3BlbmVkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChjZWxsLmhhc0F0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcpKSB7XG4gICAgICAgICAgY2VsbC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgX2ExMXlTZXRSb3dEZXRhaWxzQ2VsbChyb3csIGRldGFpbHNDZWxsKSB7XG4gICAgQXJyYXkuZnJvbShyb3cuY2hpbGRyZW4pLmZvckVhY2goY2VsbCA9PiB7XG4gICAgICBpZiAoY2VsbCAhPT0gZGV0YWlsc0NlbGwpIHtcbiAgICAgICAgY2VsbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtY29udHJvbHMnLCBkZXRhaWxzQ2VsbC5pZCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBfYTExeVVwZGF0ZUNlbGxDb2xzcGFuKGNlbGwsIGNvbHNwYW4pIHtcbiAgICBjZWxsLnNldEF0dHJpYnV0ZSgnYXJpYS1jb2xzcGFuJywgTnVtYmVyKGNvbHNwYW4pKTtcbiAgfVxuXG4gIF9hMTF5VXBkYXRlU29ydGVycygpIHtcbiAgICBBcnJheS5mcm9tKHRoaXMucXVlcnlTZWxlY3RvckFsbCgndmFhZGluLWdyaWQtc29ydGVyJykpLmZvckVhY2goc29ydGVyID0+IHtcbiAgICAgIGxldCBjZWxsQ29udGVudCA9IHNvcnRlci5wYXJlbnROb2RlO1xuICAgICAgd2hpbGUgKGNlbGxDb250ZW50ICYmIGNlbGxDb250ZW50LmxvY2FsTmFtZSAhPT0gJ3ZhYWRpbi1ncmlkLWNlbGwtY29udGVudCcpIHtcbiAgICAgICAgY2VsbENvbnRlbnQgPSBjZWxsQ29udGVudC5wYXJlbnROb2RlO1xuICAgICAgfVxuICAgICAgaWYgKGNlbGxDb250ZW50ICYmIGNlbGxDb250ZW50LmFzc2lnbmVkU2xvdCkge1xuICAgICAgICBjb25zdCBjZWxsID0gY2VsbENvbnRlbnQuYXNzaWduZWRTbG90LnBhcmVudE5vZGU7XG4gICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKCdhcmlhLXNvcnQnLCB7XG4gICAgICAgICAgJ2FzYyc6ICdhc2NlbmRpbmcnLFxuICAgICAgICAgICdkZXNjJzogJ2Rlc2NlbmRpbmcnXG4gICAgICAgIH1bU3RyaW5nKHNvcnRlci5kaXJlY3Rpb24pXSB8fCAnbm9uZScpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFZhYWRpbiBMdGQuXG5UaGlzIHByb2dyYW0gaXMgYXZhaWxhYmxlIHVuZGVyIEFwYWNoZSBMaWNlbnNlIFZlcnNpb24gMi4wLCBhdmFpbGFibGUgYXQgaHR0cHM6Ly92YWFkaW4uY29tL2xpY2Vuc2UvXG4qL1xuLyoqXG4gKiBAcG9seW1lck1peGluXG4gKi9cbmV4cG9ydCBjb25zdCBBY3RpdmVJdGVtTWl4aW4gPSBzdXBlckNsYXNzID0+IGNsYXNzIEFjdGl2ZUl0ZW1NaXhpbiBleHRlbmRzIHN1cGVyQ2xhc3Mge1xuXG4gIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgaXRlbSB1c2VyIGhhcyBsYXN0IGludGVyYWN0ZWQgd2l0aC4gVHVybnMgdG8gYG51bGxgIGFmdGVyIHVzZXIgZGVhY3RpdmF0ZXNcbiAgICAgICAqIHRoZSBpdGVtIGJ5IHJlLWludGVyYWN0aW5nIHdpdGggdGhlIGN1cnJlbnRseSBhY3RpdmUgaXRlbS5cbiAgICAgICAqL1xuICAgICAgYWN0aXZlSXRlbToge1xuICAgICAgICB0eXBlOiBPYmplY3QsXG4gICAgICAgIG5vdGlmeTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IG51bGxcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgcmVhZHkoKSB7XG4gICAgc3VwZXIucmVhZHkoKTtcblxuICAgIHRoaXMuJC5zY3JvbGxlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX29uQ2xpY2suYmluZCh0aGlzKSk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdjZWxsLWFjdGl2YXRlJywgdGhpcy5fYWN0aXZhdGVJdGVtLmJpbmQodGhpcykpO1xuICB9XG5cbiAgX2FjdGl2YXRlSXRlbShlKSB7XG4gICAgY29uc3QgbW9kZWwgPSBlLmRldGFpbC5tb2RlbDtcbiAgICBjb25zdCBjbGlja2VkSXRlbSA9IG1vZGVsID8gbW9kZWwuaXRlbSA6IG51bGw7XG5cbiAgICBpZiAoY2xpY2tlZEl0ZW0pIHtcbiAgICAgIHRoaXMuYWN0aXZlSXRlbSA9ICF0aGlzLl9pdGVtc0VxdWFsKHRoaXMuYWN0aXZlSXRlbSwgY2xpY2tlZEl0ZW0pID8gY2xpY2tlZEl0ZW0gOiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8vIHdlIG5lZWQgdG8gbGlzdGVuIHRvIGNsaWNrIGluc3RlYWQgb2YgdGFwIGJlY2F1c2Ugb24gbW9iaWxlIHNhZmFyaSwgdGhlXG4gIC8vIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaGFzIG5vdCBiZWVuIHVwZGF0ZWQgKGZvY3VzIGhhcyBub3QgYmVlbiBzaGlmdGVkKVxuICAvLyB5ZXQgYXQgdGhlIHBvaW50IHdoZW4gdGFwIGV2ZW50IGlzIGJlaW5nIGV4ZWN1dGVkLlxuICBfb25DbGljayhlKSB7XG4gICAgaWYgKGUuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgLy8gU29tZXRoaW5nIGhhcyBoYW5kbGVkIHRoaXMgY2xpY2sgYWxyZWFkeSwgZS4gZy4sIDx2YWFkaW4tZ3JpZC1zb3J0ZXI+XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcGF0aCA9IGUuY29tcG9zZWRQYXRoKCk7XG4gICAgY29uc3QgY2VsbCA9IHBhdGhbcGF0aC5pbmRleE9mKHRoaXMuJC50YWJsZSkgLSAzXTtcbiAgICBpZiAoIWNlbGwgfHwgY2VsbC5nZXRBdHRyaWJ1dGUoJ3BhcnQnKS5pbmRleE9mKCdkZXRhaWxzLWNlbGwnKSA+IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGNlbGxDb250ZW50ID0gY2VsbC5fY29udGVudDtcblxuICAgIGNvbnN0IGFjdGl2ZUVsZW1lbnQgPSB0aGlzLmdldFJvb3ROb2RlKCkuYWN0aXZlRWxlbWVudDtcbiAgICBjb25zdCBjZWxsQ29udGVudEhhc0ZvY3VzID0gY2VsbENvbnRlbnQuY29udGFpbnMoYWN0aXZlRWxlbWVudCkgJiZcbiAgICAgIC8vIE1TSUUgYnVnOiBmbGV4IGNoaWxkcmVuIHJlY2VpdmUgZm9jdXMuIE1ha2UgdHlwZSAmIGF0dHJpYnV0ZXMgY2hlY2suXG4gICAgICAoIXRoaXMuX2llIHx8IHRoaXMuX2lzRm9jdXNhYmxlKGFjdGl2ZUVsZW1lbnQpKTtcbiAgICBpZiAoIWNlbGxDb250ZW50SGFzRm9jdXMgJiYgIXRoaXMuX2lzRm9jdXNhYmxlKGUudGFyZ2V0KSkge1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnY2VsbC1hY3RpdmF0ZScsIHtkZXRhaWw6IHtcbiAgICAgICAgbW9kZWw6IHRoaXMuX19nZXRSb3dNb2RlbChjZWxsLnBhcmVudEVsZW1lbnQpXG4gICAgICB9fSkpO1xuICAgIH1cbiAgfVxuXG4gIF9pc0ZvY3VzYWJsZSh0YXJnZXQpIHtcbiAgICBpZiAoIXRhcmdldC5wYXJlbnROb2RlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGZvY3VzYWJsZXMgPSBBcnJheS5mcm9tKHRhcmdldC5wYXJlbnROb2RlXG4gICAgICAucXVlcnlTZWxlY3RvckFsbCgnW3RhYmluZGV4XSwgYnV0dG9uLCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgb2JqZWN0LCBpZnJhbWUsIGxhYmVsLCBhW2hyZWZdLCBhcmVhW2hyZWZdJykpXG4gICAgICAuZmlsdGVyKGVsZW1lbnQgPT4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3BhcnQnKSAhPT0gJ2NlbGwgYm9keS1jZWxsJyk7XG5cbiAgICBjb25zdCBpc0ZvY3VzYWJsZUVsZW1lbnQgPSBmb2N1c2FibGVzLmluZGV4T2YodGFyZ2V0KSAhPT0gLTE7XG4gICAgcmV0dXJuICF0YXJnZXQuZGlzYWJsZWQgJiYgaXNGb2N1c2FibGVFbGVtZW50O1xuICB9XG59O1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFZhYWRpbiBMdGQuXG5UaGlzIHByb2dyYW0gaXMgYXZhaWxhYmxlIHVuZGVyIEFwYWNoZSBMaWNlbnNlIFZlcnNpb24gMi4wLCBhdmFpbGFibGUgYXQgaHR0cHM6Ly92YWFkaW4uY29tL2xpY2Vuc2UvXG4qL1xuaW1wb3J0IHsgQmFzZSB9IGZyb20gJ0Bwb2x5bWVyL3BvbHltZXIvcG9seW1lci1sZWdhY3kuanMnO1xuXG4vKipcbiAqIEBwb2x5bWVyTWl4aW5cbiAqL1xuZXhwb3J0IGNvbnN0IEFycmF5RGF0YVByb3ZpZGVyTWl4aW4gPSBzdXBlckNsYXNzID0+IGNsYXNzIEFycmF5RGF0YVByb3ZpZGVyTWl4aW4gZXh0ZW5kcyBzdXBlckNsYXNzIHtcblxuICBzdGF0aWMgZ2V0IHByb3BlcnRpZXMoKSB7XG5cbiAgICByZXR1cm4ge1xuICAgICAgLyoqXG4gICAgICAgKiBBbiBhcnJheSBjb250YWluaW5nIHRoZSBpdGVtcyB3aGljaCB3aWxsIGJlIHN0YW1wZWQgdG8gdGhlIGNvbHVtbiB0ZW1wbGF0ZVxuICAgICAgICogaW5zdGFuY2VzLlxuICAgICAgICovXG4gICAgICBpdGVtczogQXJyYXlcblxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0IG9ic2VydmVycygpIHtcbiAgICByZXR1cm4gW1xuICAgICAgJ19pdGVtc0NoYW5nZWQoaXRlbXMsIGl0ZW1zLiosIGlzQXR0YWNoZWQpJ1xuICAgIF07XG4gIH1cblxuICBfaXRlbXNDaGFuZ2VkKGl0ZW1zLCBzcGxpY2VzLCBpc0F0dGFjaGVkKSB7XG4gICAgaWYgKCFpc0F0dGFjaGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghQXJyYXkuaXNBcnJheShpdGVtcykpIHtcbiAgICAgIGlmIChpdGVtcyA9PT0gdW5kZWZpbmVkIHx8IGl0ZW1zID09PSBudWxsKSB7XG4gICAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5kYXRhUHJvdmlkZXIgPT09IHRoaXMuX2FycmF5RGF0YVByb3ZpZGVyKSB7XG4gICAgICAgIHRoaXMuZGF0YVByb3ZpZGVyID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc2l6ZSA9IGl0ZW1zLmxlbmd0aDtcbiAgICB0aGlzLmRhdGFQcm92aWRlciA9IHRoaXMuZGF0YVByb3ZpZGVyIHx8IHRoaXMuX2FycmF5RGF0YVByb3ZpZGVyO1xuICAgIHRoaXMuY2xlYXJDYWNoZSgpO1xuICAgIHRoaXMuX2Vuc3VyZUZpcnN0UGFnZUxvYWRlZCgpO1xuICB9XG5cbiAgX2FycmF5RGF0YVByb3ZpZGVyKG9wdHMsIGNiKSB7XG4gICAgbGV0IGl0ZW1zID0gKEFycmF5LmlzQXJyYXkodGhpcy5pdGVtcykgPyB0aGlzLml0ZW1zIDogW10pLnNsaWNlKDApO1xuXG4gICAgaWYgKHRoaXMuX2ZpbHRlcnMgJiYgdGhpcy5fY2hlY2tQYXRocyh0aGlzLl9maWx0ZXJzLCAnZmlsdGVyaW5nJywgaXRlbXMpKSB7XG4gICAgICBpdGVtcyA9IHRoaXMuX2ZpbHRlcihpdGVtcyk7XG4gICAgfVxuXG4gICAgdGhpcy5zaXplID0gaXRlbXMubGVuZ3RoO1xuXG4gICAgaWYgKG9wdHMuc29ydE9yZGVycy5sZW5ndGggJiYgdGhpcy5fY2hlY2tQYXRocyh0aGlzLl9zb3J0ZXJzLCAnc29ydGluZycsIGl0ZW1zKSkge1xuICAgICAgaXRlbXMgPSBpdGVtcy5zb3J0KHRoaXMuX211bHRpU29ydC5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICBjb25zdCBzdGFydCA9IG9wdHMucGFnZSAqIG9wdHMucGFnZVNpemU7XG4gICAgY29uc3QgZW5kID0gc3RhcnQgKyBvcHRzLnBhZ2VTaXplO1xuICAgIGNvbnN0IHNsaWNlID0gaXRlbXMuc2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgY2Ioc2xpY2UsIGl0ZW1zLmxlbmd0aCk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgYXJyYXkgb2YgZmlsdGVycy9zb3J0ZXJzIGZvciBwYXRocyB2YWxpZGl0eSwgY29uc29sZS53YXJuIGludmFsaWQgaXRlbXNcbiAgICogQHBhcmFtIHtBcnJheX0gIGFycmF5VG9DaGVjayBUaGUgYXJyYXkgb2YgZmlsdGVycy9zb3J0ZXJzIHRvIGNoZWNrXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhY3Rpb24gICAgICAgVGhlIG5hbWUgb2YgYWN0aW9uIHRvIGluY2x1ZGUgaW4gd2FybmluZyAoZmlsdGVyaW5nLCBzb3J0aW5nKVxuICAgKiBAcGFyYW0ge0FycmF5fSAgaXRlbXNcbiAgICovXG4gIF9jaGVja1BhdGhzKGFycmF5VG9DaGVjaywgYWN0aW9uLCBpdGVtcykge1xuICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRydWU7XG5cbiAgICBmb3IgKHZhciBpIGluIGFycmF5VG9DaGVjaykge1xuICAgICAgY29uc3QgcGF0aCA9IGFycmF5VG9DaGVja1tpXS5wYXRoO1xuXG4gICAgICAvLyBza2lwIHNpbXBsZSBwYXRoc1xuICAgICAgaWYgKCFwYXRoIHx8IHBhdGguaW5kZXhPZignLicpID09PSAtMSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcGFyZW50UHJvcGVydHkgPSBwYXRoLnJlcGxhY2UoL1xcLlteXFwuXSokLywgJycpOyAvLyBhLmIuYyAtPiBhLmJcbiAgICAgIGlmIChCYXNlLmdldChwYXJlbnRQcm9wZXJ0eSwgaXRlbXNbMF0pID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBQYXRoIFwiJHtwYXRofVwiIHVzZWQgZm9yICR7YWN0aW9ufSBkb2VzIG5vdCBleGlzdCBpbiBhbGwgb2YgdGhlIGl0ZW1zLCAke2FjdGlvbn0gaXMgZGlzYWJsZWQuYCk7XG4gICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBfbXVsdGlTb3J0KGEsIGIpIHtcbiAgICByZXR1cm4gdGhpcy5fc29ydGVycy5tYXAoc29ydCA9PiB7XG4gICAgICBpZiAoc29ydC5kaXJlY3Rpb24gPT09ICdhc2MnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb21wYXJlKEJhc2UuZ2V0KHNvcnQucGF0aCwgYSksIEJhc2UuZ2V0KHNvcnQucGF0aCwgYikpO1xuICAgICAgfSBlbHNlIGlmIChzb3J0LmRpcmVjdGlvbiA9PT0gJ2Rlc2MnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb21wYXJlKEJhc2UuZ2V0KHNvcnQucGF0aCwgYiksIEJhc2UuZ2V0KHNvcnQucGF0aCwgYSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfSkucmVkdWNlKChwLCBuKSA9PiB7XG4gICAgICByZXR1cm4gcCA/IHAgOiBuO1xuICAgIH0sIDApO1xuICB9XG5cbiAgX25vcm1hbGl6ZUVtcHR5VmFsdWUodmFsdWUpIHtcbiAgICBpZiAoW3VuZGVmaW5lZCwgbnVsbF0uaW5kZXhPZih2YWx1ZSkgPj0gMCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH0gZWxzZSBpZiAoaXNOYU4odmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIF9jb21wYXJlKGEsIGIpIHtcbiAgICBhID0gdGhpcy5fbm9ybWFsaXplRW1wdHlWYWx1ZShhKTtcbiAgICBiID0gdGhpcy5fbm9ybWFsaXplRW1wdHlWYWx1ZShiKTtcblxuICAgIGlmIChhIDwgYikge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBpZiAoYSA+IGIpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIF9maWx0ZXIoaXRlbXMpIHtcbiAgICByZXR1cm4gaXRlbXMuZmlsdGVyKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuX2ZpbHRlcnMuZmlsdGVyKGZpbHRlciA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5fbm9ybWFsaXplRW1wdHlWYWx1ZShCYXNlLmdldChmaWx0ZXIucGF0aCwgaXRlbSkpO1xuICAgICAgICBjb25zdCBmaWx0ZXJWYWx1ZUxvd2VyY2FzZSA9IHRoaXMuX25vcm1hbGl6ZUVtcHR5VmFsdWUoZmlsdGVyLnZhbHVlKS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihmaWx0ZXJWYWx1ZUxvd2VyY2FzZSkgPT09IC0xO1xuICAgICAgfSkubGVuZ3RoID09PSAwO1xuICAgIH0pO1xuICB9XG5cbn07XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVmFhZGluIEx0ZC5cblRoaXMgcHJvZ3JhbSBpcyBhdmFpbGFibGUgdW5kZXIgQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIGF2YWlsYWJsZSBhdCBodHRwczovL3ZhYWRpbi5jb20vbGljZW5zZS9cbiovXG5pbXBvcnQgeyBHZXN0dXJlRXZlbnRMaXN0ZW5lcnMgfSBmcm9tICdAcG9seW1lci9wb2x5bWVyL2xpYi9taXhpbnMvZ2VzdHVyZS1ldmVudC1saXN0ZW5lcnMuanMnO1xuXG5pbXBvcnQgeyBhZGRMaXN0ZW5lciB9IGZyb20gJ0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL2dlc3R1cmVzLmpzJztcblxuLyoqXG4gKiBAcG9seW1lck1peGluXG4gKi9cbmV4cG9ydCBjb25zdCBDb2x1bW5SZXNpemluZ01peGluID0gc3VwZXJDbGFzcyA9PiBjbGFzcyBDb2x1bW5SZXNpemluZ01peGluIGV4dGVuZHMgR2VzdHVyZUV2ZW50TGlzdGVuZXJzKHN1cGVyQ2xhc3MpIHtcblxuICByZWFkeSgpIHtcbiAgICBzdXBlci5yZWFkeSgpO1xuICAgIGNvbnN0IHNjcm9sbGVyID0gdGhpcy4kLnNjcm9sbGVyO1xuICAgIGFkZExpc3RlbmVyKHNjcm9sbGVyLCAndHJhY2snLCB0aGlzLl9vbkhlYWRlclRyYWNrLmJpbmQodGhpcykpO1xuXG4gICAgLy8gRGlzYWxsb3cgc2Nyb2xsaW5nIHdoaWxlIHJlc2l6aW5nXG4gICAgc2Nyb2xsZXIuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgZSA9PiBzY3JvbGxlci5oYXNBdHRyaWJ1dGUoJ2NvbHVtbi1yZXNpemluZycpICYmIGUucHJldmVudERlZmF1bHQoKSk7XG5cbiAgICAvLyBEaXNhYmxlIGNvbnRleHRtZW51IG9uIGFueSByZXNpemUgc2VwYXJhdG9yLlxuICAgIHNjcm9sbGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnRleHRtZW51JywgZSA9PiBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ3BhcnQnKSA9PSAncmVzaXplLWhhbmRsZScgJiYgZS5wcmV2ZW50RGVmYXVsdCgpKTtcblxuICAgIC8vIERpc2FibGUgbmF0aXZlIGNlbGwgZm9jdXMgd2hlbiByZXNpemluZ1xuICAgIHNjcm9sbGVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGUgPT4gZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdwYXJ0JykgPT09ICdyZXNpemUtaGFuZGxlJyAmJiBlLnByZXZlbnREZWZhdWx0KCkpO1xuICB9XG5cbiAgX29uSGVhZGVyVHJhY2soZSkge1xuICAgIGNvbnN0IGhhbmRsZSA9IGUudGFyZ2V0O1xuICAgIGlmIChoYW5kbGUuZ2V0QXR0cmlidXRlKCdwYXJ0JykgPT09ICdyZXNpemUtaGFuZGxlJykge1xuICAgICAgY29uc3QgY2VsbCA9IGhhbmRsZS5wYXJlbnRFbGVtZW50O1xuICAgICAgbGV0IGNvbHVtbiA9IGNlbGwuX2NvbHVtbjtcblxuICAgICAgdGhpcy5fdG9nZ2xlQXR0cmlidXRlKCdjb2x1bW4tcmVzaXppbmcnLCB0cnVlLCB0aGlzLiQuc2Nyb2xsZXIpO1xuXG4gICAgICAvLyBHZXQgdGhlIHRhcmdldCBjb2x1bW4gdG8gcmVzaXplXG4gICAgICB3aGlsZSAoY29sdW1uLmxvY2FsTmFtZSA9PT0gJ3ZhYWRpbi1ncmlkLWNvbHVtbi1ncm91cCcpIHtcbiAgICAgICAgY29sdW1uID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoY29sdW1uLl9jaGlsZENvbHVtbnMsIDApXG4gICAgICAgICAgLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGEuX29yZGVyIC0gYi5fb3JkZXI7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKGNvbHVtbikge1xuICAgICAgICAgICAgcmV0dXJuICFjb2x1bW4uaGlkZGVuO1xuICAgICAgICAgIH0pLnBvcCgpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBjb2x1bW5Sb3dDZWxscyA9IEFycmF5LmZyb20odGhpcy4kLmhlYWRlci5xdWVyeVNlbGVjdG9yQWxsKCdbcGFydH49XCJyb3dcIl06bGFzdC1jaGlsZCBbcGFydH49XCJjZWxsXCJdJykpO1xuICAgICAgdmFyIHRhcmdldENlbGwgPSBjb2x1bW5Sb3dDZWxscy5maWx0ZXIoY2VsbCA9PiBjZWxsLl9jb2x1bW4gPT09IGNvbHVtbilbMF07XG4gICAgICAvLyBSZXNpemUgdGhlIHRhcmdldCBjb2x1bW5cbiAgICAgIGlmICh0YXJnZXRDZWxsLm9mZnNldFdpZHRoKSB7XG4gICAgICAgIHZhciBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRhcmdldENlbGwpO1xuICAgICAgICB2YXIgbWluV2lkdGggPSAxMCArIHBhcnNlSW50KHN0eWxlLnBhZGRpbmdMZWZ0KSArIHBhcnNlSW50KHN0eWxlLnBhZGRpbmdSaWdodCkgKyBwYXJzZUludChzdHlsZS5ib3JkZXJMZWZ0V2lkdGgpXG4gICAgICAgICAgKyBwYXJzZUludChzdHlsZS5ib3JkZXJSaWdodFdpZHRoKSArIHBhcnNlSW50KHN0eWxlLm1hcmdpbkxlZnQpICsgcGFyc2VJbnQoc3R5bGUubWFyZ2luUmlnaHQpO1xuICAgICAgICBjb2x1bW4ud2lkdGggPSBNYXRoLm1heChtaW5XaWR0aCwgdGFyZ2V0Q2VsbC5vZmZzZXRXaWR0aCArIGUuZGV0YWlsLnggLSB0YXJnZXRDZWxsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnJpZ2h0KSArICdweCc7XG4gICAgICAgIGNvbHVtbi5mbGV4R3JvdyA9IDA7XG4gICAgICB9XG4gICAgICAvLyBGaXggd2lkdGggYW5kIGZsZXgtZ3JvdyBmb3IgYWxsIHByZWNlZGluZyBjb2x1bW5zXG4gICAgICBjb2x1bW5Sb3dDZWxsc1xuICAgICAgICAuc29ydChcbiAgICAgICAgICBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5fY29sdW1uLl9vcmRlciAtIGIuX2NvbHVtbi5fb3JkZXI7XG4gICAgICAgICAgfSlcbiAgICAgICAgLmZvckVhY2goZnVuY3Rpb24oY2VsbCwgaW5kZXgsIGFycmF5KSB7XG4gICAgICAgICAgaWYgKGluZGV4IDwgYXJyYXkuaW5kZXhPZih0YXJnZXRDZWxsKSkge1xuICAgICAgICAgICAgY2VsbC5fY29sdW1uLndpZHRoID0gY2VsbC5vZmZzZXRXaWR0aCArICdweCc7XG4gICAgICAgICAgICBjZWxsLl9jb2x1bW4uZmxleEdyb3cgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgIGlmIChlLmRldGFpbC5zdGF0ZSA9PT0gJ2VuZCcpIHtcbiAgICAgICAgdGhpcy5fdG9nZ2xlQXR0cmlidXRlKCdjb2x1bW4tcmVzaXppbmcnLCBmYWxzZSwgdGhpcy4kLnNjcm9sbGVyKTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnY29sdW1uLXJlc2l6ZScsIHtcbiAgICAgICAgICBkZXRhaWw6IHtyZXNpemVkQ29sdW1uOiBjb2x1bW59XG4gICAgICAgIH0pKTtcbiAgICAgIH1cblxuICAgICAgLy8gTm90aWZ5IHJlc2l6ZVxuICAgICAgdGhpcy5fcmVzaXplSGFuZGxlcigpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAqIEZpcmVkIHdoZW4gYSBjb2x1bW4gaW4gdGhlIGdyaWQgaXMgcmVzaXplZCBieSB0aGUgdXNlci5cbiAgKlxuICAqIEBldmVudCBjb2x1bW4tcmVzaXplXG4gICogQHBhcmFtIHtPYmplY3R9IGRldGFpbFxuICAqIEBwYXJhbSB7T2JqZWN0fSBkZXRhaWwucmVzaXplZENvbHVtbiB0aGUgY29sdW1uIHRoYXQgd2FzIHJlc2l6ZWRcbiAgKi9cbn07XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVmFhZGluIEx0ZC5cblRoaXMgcHJvZ3JhbSBpcyBhdmFpbGFibGUgdW5kZXIgQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIGF2YWlsYWJsZSBhdCBodHRwczovL3ZhYWRpbi5jb20vbGljZW5zZS9cbiovXG5pbXBvcnQgeyBEZWJvdW5jZXIgfSBmcm9tICdAcG9seW1lci9wb2x5bWVyL2xpYi91dGlscy9kZWJvdW5jZS5qcyc7XG5cbmltcG9ydCB7IHRpbWVPdXQgfSBmcm9tICdAcG9seW1lci9wb2x5bWVyL2xpYi91dGlscy9hc3luYy5qcyc7XG5cbmV4cG9ydCBjb25zdCBJdGVtQ2FjaGUgPSBjbGFzcyBJdGVtQ2FjaGUge1xuXG4gIGNvbnN0cnVjdG9yKGdyaWQsIHBhcmVudENhY2hlLCBwYXJlbnRJdGVtKSB7XG4gICAgdGhpcy5ncmlkID0gZ3JpZDtcbiAgICB0aGlzLnBhcmVudENhY2hlID0gcGFyZW50Q2FjaGU7XG4gICAgdGhpcy5wYXJlbnRJdGVtID0gcGFyZW50SXRlbTtcbiAgICB0aGlzLml0ZW1DYWNoZXMgPSB7fTtcbiAgICB0aGlzLml0ZW1zID0ge307XG4gICAgdGhpcy5lZmZlY3RpdmVTaXplID0gMDtcbiAgICB0aGlzLnNpemUgPSAwO1xuICAgIHRoaXMucGVuZGluZ1JlcXVlc3RzID0ge307XG4gIH1cblxuICBpc0xvYWRpbmcoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMucGVuZGluZ1JlcXVlc3RzKS5sZW5ndGggfHwgT2JqZWN0LmtleXModGhpcy5pdGVtQ2FjaGVzKS5maWx0ZXIoaW5kZXggPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuaXRlbUNhY2hlc1tpbmRleF0uaXNMb2FkaW5nKCk7XG4gICAgfSlbMF07XG4gIH1cblxuICBnZXRJdGVtRm9ySW5kZXgoaW5kZXgpIHtcbiAgICBjb25zdCB7Y2FjaGUsIHNjYWxlZEluZGV4fSA9IHRoaXMuZ2V0Q2FjaGVBbmRJbmRleChpbmRleCk7XG4gICAgcmV0dXJuIGNhY2hlLml0ZW1zW3NjYWxlZEluZGV4XTtcbiAgfVxuXG4gIHVwZGF0ZVNpemUoKSB7XG4gICAgdGhpcy5lZmZlY3RpdmVTaXplID0gKCF0aGlzLnBhcmVudEl0ZW0gfHwgdGhpcy5ncmlkLl9pc0V4cGFuZGVkKHRoaXMucGFyZW50SXRlbSkpID9cbiAgICAgIHRoaXMuc2l6ZSArIE9iamVjdC5rZXlzKHRoaXMuaXRlbUNhY2hlcykucmVkdWNlKChwcmV2LCBjdXJyKSA9PiB7XG4gICAgICAgIGNvbnN0IHN1YkNhY2hlID0gdGhpcy5pdGVtQ2FjaGVzW2N1cnJdO1xuICAgICAgICBzdWJDYWNoZS51cGRhdGVTaXplKCk7XG4gICAgICAgIHJldHVybiBwcmV2ICsgc3ViQ2FjaGUuZWZmZWN0aXZlU2l6ZTtcbiAgICAgIH0sIDApIDpcbiAgICAgIDA7XG4gIH1cblxuICBlbnN1cmVTdWJDYWNoZUZvclNjYWxlZEluZGV4KHNjYWxlZEluZGV4KSB7XG4gICAgaWYgKCF0aGlzLml0ZW1DYWNoZXNbc2NhbGVkSW5kZXhdKSB7XG4gICAgICBjb25zdCBzdWJDYWNoZSA9IG5ldyBJdGVtQ2FjaGUodGhpcy5ncmlkLCB0aGlzLCB0aGlzLml0ZW1zW3NjYWxlZEluZGV4XSk7XG4gICAgICB0aGlzLml0ZW1DYWNoZXNbc2NhbGVkSW5kZXhdID0gc3ViQ2FjaGU7XG4gICAgICB0aGlzLmdyaWQuX2xvYWRQYWdlKDAsIHN1YkNhY2hlKTtcbiAgICB9XG4gIH1cblxuICBnZXRDYWNoZUFuZEluZGV4KGluZGV4KSB7XG4gICAgbGV0IHRoaXNMZXZlbEluZGV4ID0gaW5kZXg7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMuaXRlbUNhY2hlcyk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBleHBhbmRlZEluZGV4ID0gTnVtYmVyKGtleXNbaV0pO1xuICAgICAgY29uc3Qgc3ViQ2FjaGUgPSB0aGlzLml0ZW1DYWNoZXNbZXhwYW5kZWRJbmRleF07XG4gICAgICBpZiAodGhpc0xldmVsSW5kZXggPD0gZXhwYW5kZWRJbmRleCkge1xuICAgICAgICByZXR1cm4ge2NhY2hlOiB0aGlzLCBzY2FsZWRJbmRleDogdGhpc0xldmVsSW5kZXh9O1xuICAgICAgfSBlbHNlIGlmICh0aGlzTGV2ZWxJbmRleCA8PSBleHBhbmRlZEluZGV4ICsgc3ViQ2FjaGUuZWZmZWN0aXZlU2l6ZSkge1xuICAgICAgICByZXR1cm4gc3ViQ2FjaGUuZ2V0Q2FjaGVBbmRJbmRleCh0aGlzTGV2ZWxJbmRleCAtIGV4cGFuZGVkSW5kZXggLSAxKTtcbiAgICAgIH1cbiAgICAgIHRoaXNMZXZlbEluZGV4IC09IHN1YkNhY2hlLmVmZmVjdGl2ZVNpemU7XG4gICAgfVxuICAgIHJldHVybiB7Y2FjaGU6IHRoaXMsIHNjYWxlZEluZGV4OiB0aGlzTGV2ZWxJbmRleH07XG4gIH1cblxufTtcblxuLyoqXG4gKiBAcG9seW1lck1peGluXG4gKi9cbmV4cG9ydCBjb25zdCBEYXRhUHJvdmlkZXJNaXhpbiA9IHN1cGVyQ2xhc3MgPT4gY2xhc3MgRGF0YVByb3ZpZGVyTWl4aW4gZXh0ZW5kcyBzdXBlckNsYXNzIHtcblxuICBzdGF0aWMgZ2V0IHByb3BlcnRpZXMoKSB7XG4gICAgcmV0dXJuIHtcblxuICAgICAgLyoqXG4gICAgICAgKiBOdW1iZXIgb2YgaXRlbXMgZmV0Y2hlZCBhdCBhIHRpbWUgZnJvbSB0aGUgZGF0YXByb3ZpZGVyLlxuICAgICAgICovXG4gICAgICBwYWdlU2l6ZToge1xuICAgICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICAgIHZhbHVlOiA1MCxcbiAgICAgICAgb2JzZXJ2ZXI6ICdfcGFnZVNpemVDaGFuZ2VkJ1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBGdW5jdGlvbiB0aGF0IHByb3ZpZGVzIGl0ZW1zIGxhemlseS4gUmVjZWl2ZXMgYXJndW1lbnRzIGBwYXJhbXNgLCBgY2FsbGJhY2tgXG4gICAgICAgKlxuICAgICAgICogYHBhcmFtcy5wYWdlYCBSZXF1ZXN0ZWQgcGFnZSBpbmRleFxuICAgICAgICpcbiAgICAgICAqIGBwYXJhbXMucGFnZVNpemVgIEN1cnJlbnQgcGFnZSBzaXplXG4gICAgICAgKlxuICAgICAgICogYHBhcmFtcy5maWx0ZXJzYCBDdXJyZW50bHkgYXBwbGllZCBmaWx0ZXJzXG4gICAgICAgKlxuICAgICAgICogYHBhcmFtcy5zb3J0T3JkZXJzYCBDdXJyZW50bHkgYXBwbGllZCBzb3J0aW5nIG9yZGVyc1xuICAgICAgICpcbiAgICAgICAqIGBwYXJhbXMucGFyZW50SXRlbWAgV2hlbiB0cmVlIGlzIHVzZWQsIGFuZCBzdWJsZXZlbCBpdGVtc1xuICAgICAgICogYXJlIHJlcXVlc3RlZCwgcmVmZXJlbmNlIHRvIHBhcmVudCBpdGVtIG9mIHRoZSByZXF1ZXN0ZWQgc3VibGV2ZWwuXG4gICAgICAgKiBPdGhlcndpc2UgYHVuZGVmaW5lZGAuXG4gICAgICAgKlxuICAgICAgICogYGNhbGxiYWNrKGl0ZW1zLCBzaXplKWAgQ2FsbGJhY2sgZnVuY3Rpb24gd2l0aCBhcmd1bWVudHM6XG4gICAgICAgKiAgIC0gYGl0ZW1zYCBDdXJyZW50IHBhZ2Ugb2YgaXRlbXNcbiAgICAgICAqICAgLSBgc2l6ZWAgVG90YWwgbnVtYmVyIG9mIGl0ZW1zLiBXaGVuIHRyZWUgc3VibGV2ZWwgaXRlbXNcbiAgICAgICAqICAgICBhcmUgcmVxdWVzdGVkLCB0b3RhbCBudW1iZXIgb2YgaXRlbXMgaW4gdGhlIHJlcXVlc3RlZCBzdWJsZXZlbC5cbiAgICAgICAqICAgICBPcHRpb25hbCB3aGVuIHRyZWUgaXMgbm90IHVzZWQsIHJlcXVpcmVkIGZvciB0cmVlLlxuICAgICAgICovXG4gICAgICBkYXRhUHJvdmlkZXI6IHtcbiAgICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgICBub3RpZnk6IHRydWUsXG4gICAgICAgIG9ic2VydmVyOiAnX2RhdGFQcm92aWRlckNoYW5nZWQnXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIGB0cnVlYCB3aGlsZSBkYXRhIGlzIGJlaW5nIHJlcXVlc3RlZCBmcm9tIHRoZSBkYXRhIHByb3ZpZGVyLlxuICAgICAgICovXG4gICAgICBsb2FkaW5nOiB7XG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgIG5vdGlmeTogdHJ1ZSxcbiAgICAgICAgcmVhZE9ubHk6IHRydWUsXG4gICAgICAgIHJlZmxlY3RUb0F0dHJpYnV0ZTogdHJ1ZVxuICAgICAgfSxcblxuICAgICAgX2NhY2hlOiB7XG4gICAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGNvbnN0IGNhY2hlID0gbmV3IEl0ZW1DYWNoZSh0aGlzKTtcbiAgICAgICAgICByZXR1cm4gY2FjaGU7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogUGF0aCB0byBhbiBpdGVtIHN1Yi1wcm9wZXJ0eSB0aGF0IGlkZW50aWZpZXMgdGhlIGl0ZW0uXG4gICAgICAgKi9cbiAgICAgIGl0ZW1JZFBhdGg6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICB2YWx1ZTogbnVsbFxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBBbiBhcnJheSB0aGF0IGNvbnRhaW5zIHRoZSBleHBhbmRlZCBpdGVtcy5cbiAgICAgICAqL1xuICAgICAgZXhwYW5kZWRJdGVtczoge1xuICAgICAgICB0eXBlOiBPYmplY3QsXG4gICAgICAgIG5vdGlmeTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6ICgpID0+IFtdXG4gICAgICB9XG5cbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGdldCBvYnNlcnZlcnMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICdfc2l6ZUNoYW5nZWQoc2l6ZSknLFxuICAgICAgJ19pdGVtSWRQYXRoQ2hhbmdlZChpdGVtSWRQYXRoKScsXG4gICAgICAnX2V4cGFuZGVkSXRlbXNDaGFuZ2VkKGV4cGFuZGVkSXRlbXMuKiknXG4gICAgXTtcbiAgfVxuXG4gIF9zaXplQ2hhbmdlZChzaXplKSB7XG4gICAgY29uc3QgZGVsdGEgPSBzaXplIC0gdGhpcy5fY2FjaGUuc2l6ZTtcbiAgICB0aGlzLl9jYWNoZS5zaXplICs9IGRlbHRhO1xuICAgIHRoaXMuX2NhY2hlLmVmZmVjdGl2ZVNpemUgKz0gZGVsdGE7XG4gICAgdGhpcy5fZWZmZWN0aXZlU2l6ZSA9IHRoaXMuX2NhY2hlLmVmZmVjdGl2ZVNpemU7XG4gIH1cblxuICBfdXBkYXRlUm93SXRlbShpdGVtLCBlbCkge1xuICAgIGVsLmNoaWxkcmVuLmZvckVhY2goY2VsbCA9PiB7XG4gICAgICBjZWxsLl9pbnN0YW5jZSAmJiAoY2VsbC5faW5zdGFuY2UuaXRlbSA9IGl0ZW0pO1xuICAgIH0pO1xuICB9XG5cbiAgX2dldEl0ZW0oaW5kZXgsIGVsKSB7XG4gICAgaWYgKGluZGV4ID49IHRoaXMuX2VmZmVjdGl2ZVNpemUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBlbC5pbmRleCA9IGluZGV4O1xuICAgIGNvbnN0IHtjYWNoZSwgc2NhbGVkSW5kZXh9ID0gdGhpcy5fY2FjaGUuZ2V0Q2FjaGVBbmRJbmRleChpbmRleCk7XG4gICAgY29uc3QgaXRlbSA9IGNhY2hlLml0ZW1zW3NjYWxlZEluZGV4XTtcbiAgICBpZiAoaXRlbSkge1xuICAgICAgdGhpcy5fdG9nZ2xlQXR0cmlidXRlKCdsb2FkaW5nJywgZmFsc2UsIGVsKTtcbiAgICAgIHRoaXMuX3VwZGF0ZUl0ZW0oZWwsIGl0ZW0pO1xuICAgICAgaWYgKHRoaXMuX2lzRXhwYW5kZWQoaXRlbSkpIHtcbiAgICAgICAgY2FjaGUuZW5zdXJlU3ViQ2FjaGVGb3JTY2FsZWRJbmRleChzY2FsZWRJbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3RvZ2dsZUF0dHJpYnV0ZSgnbG9hZGluZycsIHRydWUsIGVsKTtcbiAgICAgIHRoaXMuX2xvYWRQYWdlKHRoaXMuX2dldFBhZ2VGb3JJbmRleChzY2FsZWRJbmRleCksIGNhY2hlKTtcbiAgICB9XG5cbiAgfVxuXG4gIF9wYWdlc0ZvclBoeXNpY2FsSXRlbXMoKSB7XG4gICAgLy8gVE9ETzogcG90ZW50aWFsbHkgaGVhdnkgb3BlcmF0aW9uIHRvIHJ1biBmaXJzdCB2aXNpYmxlIGluZGV4LFxuICAgIC8vIHJlY29uc2lkZXIgaWYgcGVyZm9ybWFuY2UgaXNzdWVzIG9jY3VyIG9uIGRhdGEgYmluZGluZyAvIHNjcm9sbGluZy5cbiAgICAvLyBUT0RPOiBfdmlkeE9mZnNldCBzaG91bGRuJ3QgYmUgcmVhZCBmcm9tIGhlcmUuXG4gICAgY29uc3QgZmlyc3RWaXNpYmxlUGFnZSA9IHRoaXMuX2dldFBhZ2VGb3JJbmRleCh0aGlzLl9maXJzdFZpc2libGVJbmRleCArIHRoaXMuX3ZpZHhPZmZzZXQpO1xuXG4gICAgcmV0dXJuIFtmaXJzdFZpc2libGVQYWdlXS5jb25jYXQoXG4gICAgICB0aGlzLl9waHlzaWNhbEl0ZW1zXG4gICAgICAgIC5maWx0ZXIocm93ID0+IHJvdy5pbmRleClcbiAgICAgICAgLml0ZW1zKHJvdyA9PiB0aGlzLl9nZXRQYWdlRm9ySW5kZXgocm93LmluZGV4KSlcbiAgICApLnJlZHVjZSgocHJldiwgY3VycikgPT4ge1xuICAgICAgaWYgKHByZXYuaW5kZXhPZihjdXJyKSA9PT0gLTEpIHtcbiAgICAgICAgcHJldi5wdXNoKGN1cnIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldjtcbiAgICB9LCBbXSk7XG4gIH1cblxuICBfZXhwYW5kZWRJbnN0YW5jZUNoYW5nZWRDYWxsYmFjayhpbnN0LCB2YWx1ZSkge1xuICAgIGlmIChpbnN0Lml0ZW0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMuZXhwYW5kSXRlbShpbnN0Lml0ZW0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvbGxhcHNlSXRlbShpbnN0Lml0ZW0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgdmFsdWUgdGhhdCBpZGVudGlmaWVzIHRoZSBpdGVtLiBVc2VzIGBpdGVtSWRQYXRoYCBpZiBhdmFpbGFibGUuXG4gICAqIENhbiBiZSBjdXN0b21pemVkIGJ5IG92ZXJyaWRpbmcuXG4gICAqL1xuICBnZXRJdGVtSWQoaXRlbSkge1xuICAgIHJldHVybiB0aGlzLml0ZW1JZFBhdGggPyB0aGlzLmdldCh0aGlzLml0ZW1JZFBhdGgsIGl0ZW0pIDogaXRlbTtcbiAgfVxuXG4gIF9pc0V4cGFuZGVkKGl0ZW0pIHtcbiAgICByZXR1cm4gdGhpcy5fX2V4cGFuZGVkS2V5cy5oYXModGhpcy5nZXRJdGVtSWQoaXRlbSkpO1xuICB9XG5cbiAgX2V4cGFuZGVkSXRlbXNDaGFuZ2VkKGUpIHtcbiAgICB0aGlzLl9fY2FjaGVFeHBhbmRlZEtleXMoKTtcbiAgICB0aGlzLl9jYWNoZS51cGRhdGVTaXplKCk7XG4gICAgdGhpcy5fZWZmZWN0aXZlU2l6ZSA9IHRoaXMuX2NhY2hlLmVmZmVjdGl2ZVNpemU7XG4gICAgdGhpcy5fYXNzaWduTW9kZWxzKCk7XG4gIH1cblxuICBfaXRlbUlkUGF0aENoYW5nZWQoZSkge1xuICAgIHRoaXMuX19jYWNoZUV4cGFuZGVkS2V5cygpO1xuICB9XG5cbiAgX19jYWNoZUV4cGFuZGVkS2V5cygpIHtcbiAgICBpZiAodGhpcy5leHBhbmRlZEl0ZW1zKSB7XG4gICAgICB0aGlzLl9fZXhwYW5kZWRLZXlzID0gbmV3IFNldCgpO1xuICAgICAgdGhpcy5leHBhbmRlZEl0ZW1zLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgIHRoaXMuX19leHBhbmRlZEtleXMuYWRkKHRoaXMuZ2V0SXRlbUlkKGl0ZW0pKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFeHBhbmRzIHRoZSBnaXZlbiBpdGVtIHRyZWUuXG4gICAqL1xuICBleHBhbmRJdGVtKGl0ZW0pIHtcbiAgICBpZiAoIXRoaXMuX2lzRXhwYW5kZWQoaXRlbSkpIHtcbiAgICAgIHRoaXMucHVzaCgnZXhwYW5kZWRJdGVtcycsIGl0ZW0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDb2xsYXBzZXMgdGhlIGdpdmVuIGl0ZW0gdHJlZS5cbiAgICovXG4gIGNvbGxhcHNlSXRlbShpdGVtKSB7XG4gICAgaWYgKHRoaXMuX2lzRXhwYW5kZWQoaXRlbSkpIHtcbiAgICAgIHRoaXMuc3BsaWNlKCdleHBhbmRlZEl0ZW1zJywgdGhpcy5fZ2V0SXRlbUluZGV4SW5BcnJheShpdGVtLCB0aGlzLmV4cGFuZGVkSXRlbXMpLCAxKTtcbiAgICB9XG4gIH1cblxuICBfZ2V0SW5kZXhMZXZlbChpbmRleCkge1xuICAgIGxldCB7Y2FjaGV9ID0gdGhpcy5fY2FjaGUuZ2V0Q2FjaGVBbmRJbmRleChpbmRleCk7XG4gICAgbGV0IGxldmVsID0gMDtcbiAgICB3aGlsZSAoY2FjaGUucGFyZW50Q2FjaGUpIHtcbiAgICAgIGNhY2hlID0gY2FjaGUucGFyZW50Q2FjaGU7XG4gICAgICBsZXZlbCsrO1xuICAgIH1cbiAgICByZXR1cm4gbGV2ZWw7XG4gIH1cblxuICBfY2FuUG9wdWxhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2hhc0RhdGEgJiYgdGhpcy5fY29sdW1uVHJlZTtcbiAgfVxuXG4gIF9sb2FkUGFnZShwYWdlLCBjYWNoZSkge1xuICAgIC8vIG1ha2Ugc3VyZSBzYW1lIHBhZ2UgaXNuJ3QgcmVxdWVzdGVkIG11bHRpcGxlIHRpbWVzLlxuICAgIGlmICghY2FjaGUucGVuZGluZ1JlcXVlc3RzW3BhZ2VdICYmIHRoaXMuZGF0YVByb3ZpZGVyKSB7XG4gICAgICB0aGlzLl9zZXRMb2FkaW5nKHRydWUpO1xuICAgICAgY2FjaGUucGVuZGluZ1JlcXVlc3RzW3BhZ2VdID0gdHJ1ZTtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgcGFnZSxcbiAgICAgICAgcGFnZVNpemU6IHRoaXMucGFnZVNpemUsXG4gICAgICAgIHNvcnRPcmRlcnM6IHRoaXMuX21hcFNvcnRlcnMoKSxcbiAgICAgICAgZmlsdGVyczogdGhpcy5fbWFwRmlsdGVycygpLFxuICAgICAgICBwYXJlbnRJdGVtOiBjYWNoZS5wYXJlbnRJdGVtXG4gICAgICB9O1xuXG4gICAgICB0aGlzLmRhdGFQcm92aWRlcihwYXJhbXMsIChpdGVtcywgc2l6ZSkgPT4ge1xuICAgICAgICBpZiAoc2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2FjaGUuc2l6ZSA9IHNpemU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHBhcmFtcy5wYXJlbnRJdGVtKSB7XG4gICAgICAgICAgICBjYWNoZS5zaXplID0gaXRlbXMubGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGN1cnJlbnRJdGVtcyA9IEFycmF5LmZyb20odGhpcy4kLml0ZW1zLmNoaWxkcmVuKS5tYXAocm93ID0+IHJvdy5faXRlbSk7XG5cbiAgICAgICAgLy8gUG9wdWxhdGUgdGhlIGNhY2hlIHdpdGggbmV3IGl0ZW1zXG4gICAgICAgIGl0ZW1zLmZvckVhY2goKGl0ZW0sIGl0ZW1zSW5kZXgpID0+IHtcbiAgICAgICAgICBjb25zdCBpdGVtSW5kZXggPSBwYWdlICogdGhpcy5wYWdlU2l6ZSArIGl0ZW1zSW5kZXg7XG4gICAgICAgICAgY2FjaGUuaXRlbXNbaXRlbUluZGV4XSA9IGl0ZW07XG4gICAgICAgICAgaWYgKHRoaXMuX2lzRXhwYW5kZWQoaXRlbSkgJiYgY3VycmVudEl0ZW1zLmluZGV4T2YoaXRlbSkgPiAtMSkge1xuICAgICAgICAgICAgLy8gRm9yY2Ugc3luY2hyb25vdXMgZGF0YSByZXF1ZXN0IGZvciBleHBhbmRlZCBpdGVtIHN1Yi1jYWNoZVxuICAgICAgICAgICAgY2FjaGUuZW5zdXJlU3ViQ2FjaGVGb3JTY2FsZWRJbmRleChpdGVtSW5kZXgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5faGFzRGF0YSA9IHRydWU7XG5cbiAgICAgICAgZGVsZXRlIGNhY2hlLnBlbmRpbmdSZXF1ZXN0c1twYWdlXTtcblxuICAgICAgICB0aGlzLl9zZXRMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgdGhpcy5fY2FjaGUudXBkYXRlU2l6ZSgpO1xuICAgICAgICB0aGlzLl9lZmZlY3RpdmVTaXplID0gdGhpcy5fY2FjaGUuZWZmZWN0aXZlU2l6ZTtcblxuICAgICAgICBBcnJheS5mcm9tKHRoaXMuJC5pdGVtcy5jaGlsZHJlbilcbiAgICAgICAgICAuZmlsdGVyKHJvdyA9PiAhcm93LmhpZGRlbilcbiAgICAgICAgICAuZm9yRWFjaChyb3cgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2FjaGVkSXRlbSA9IHRoaXMuX2NhY2hlLmdldEl0ZW1Gb3JJbmRleChyb3cuaW5kZXgpO1xuICAgICAgICAgICAgaWYgKGNhY2hlZEl0ZW0pIHtcbiAgICAgICAgICAgICAgdGhpcy5fdG9nZ2xlQXR0cmlidXRlKCdsb2FkaW5nJywgZmFsc2UsIHJvdyk7XG4gICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUl0ZW0ocm93LCBjYWNoZWRJdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLl9pbmNyZWFzZVBvb2xJZk5lZWRlZCgwKTtcblxuICAgICAgICB0aGlzLl9faXRlbXNSZWNlaXZlZCgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgX2dldFBhZ2VGb3JJbmRleChpbmRleCkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKGluZGV4IC8gdGhpcy5wYWdlU2l6ZSk7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXJzIHRoZSBjYWNoZWQgcGFnZXMgYW5kIHJlbG9hZHMgZGF0YSBmcm9tIGRhdGFwcm92aWRlciB3aGVuIG5lZWRlZC5cbiAgICovXG4gIGNsZWFyQ2FjaGUoKSB7XG4gICAgdGhpcy5fY2FjaGUgPSBuZXcgSXRlbUNhY2hlKHRoaXMpO1xuICAgIEFycmF5LmZyb20odGhpcy4kLml0ZW1zLmNoaWxkcmVuKS5mb3JFYWNoKHJvdyA9PiB7XG4gICAgICBBcnJheS5mcm9tKHJvdy5jaGlsZHJlbikuZm9yRWFjaChjZWxsID0+IHtcbiAgICAgICAgLy8gRm9yY2UgZGF0YSBzeXN0ZW0gdG8gcGljayB1cCBzdWJwcm9wZXJ0eSBjaGFuZ2VzXG4gICAgICAgIGNlbGwuX2luc3RhbmNlICYmIGNlbGwuX2luc3RhbmNlLl9zZXRQZW5kaW5nUHJvcGVydHkoJ2l0ZW0nLCB7fSwgZmFsc2UpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdGhpcy5fY2FjaGUuc2l6ZSA9IHRoaXMuc2l6ZSB8fCAwO1xuICAgIHRoaXMuX2NhY2hlLnVwZGF0ZVNpemUoKTtcbiAgICB0aGlzLl9oYXNEYXRhID0gZmFsc2U7XG4gICAgdGhpcy5fYXNzaWduTW9kZWxzKCk7XG5cbiAgICBpZiAoIXRoaXMuX2VmZmVjdGl2ZVNpemUpIHtcbiAgICAgIHRoaXMuX2xvYWRQYWdlKDAsIHRoaXMuX2NhY2hlKTtcbiAgICB9XG4gIH1cblxuICBfZmx1c2hJdGVtc0RlYm91bmNlcigpIHtcbiAgICBpZiAodGhpcy5fZGVib3VuY2VyTG9hZCkge1xuICAgICAgdGhpcy5fZGVib3VuY2VyTG9hZC5mbHVzaCgpO1xuICAgIH1cbiAgfVxuXG4gIF9wYWdlU2l6ZUNoYW5nZWQocGFnZVNpemUsIG9sZFBhZ2VTaXplKSB7XG4gICAgaWYgKG9sZFBhZ2VTaXplICE9PSB1bmRlZmluZWQgJiYgcGFnZVNpemUgIT09IG9sZFBhZ2VTaXplKSB7XG4gICAgICB0aGlzLmNsZWFyQ2FjaGUoKTtcbiAgICB9XG4gIH1cblxuICBfY2hlY2tTaXplKCkge1xuICAgIGlmICh0aGlzLnNpemUgPT09IHVuZGVmaW5lZCAmJiB0aGlzLl9lZmZlY3RpdmVTaXplID09PSAwKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdUaGUgPHZhYWRpbi1ncmlkPiBuZWVkcyB0aGUgdG90YWwgbnVtYmVyIG9mIGl0ZW1zJyArXG4gICAgICAgICcgaW4gb3JkZXIgdG8gZGlzcGxheSByb3dzLiBTZXQgdGhlIHRvdGFsIG51bWJlciBvZiBpdGVtcycgK1xuICAgICAgICAnIHRvIHRoZSBgc2l6ZWAgcHJvcGVydHksIG9yIHByb3ZpZGUgdGhlIHRvdGFsIG51bWJlciBvZiBpdGVtcycgK1xuICAgICAgICAnIGluIHRoZSBzZWNvbmQgYXJndW1lbnQgb2YgdGhlIGBkYXRhUHJvdmlkZXJg4oCZcyBgY2FsbGJhY2tgIGNhbGwuJ1xuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBfZGF0YVByb3ZpZGVyQ2hhbmdlZChkYXRhUHJvdmlkZXIsIG9sZERhdGFQcm92aWRlcikge1xuICAgIGlmIChvbGREYXRhUHJvdmlkZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5jbGVhckNhY2hlKCk7XG4gICAgfVxuXG4gICAgaWYgKGRhdGFQcm92aWRlciAmJiB0aGlzLml0ZW1zICYmIHRoaXMuaXRlbXMubGVuZ3RoKSB7XG4gICAgICAvLyBGaXhlcyBwb3NzaWJseSBpbnZhbGlkIGNhY2hlZCBsYXN0VmlzaWJsZUluZGV4IHZhbHVlIGluIDxpcm9uLWxpc3Q+XG4gICAgICB0aGlzLl9zY3JvbGxUb0luZGV4KHRoaXMuX2ZpcnN0VmlzaWJsZUluZGV4KTtcbiAgICB9XG5cbiAgICB0aGlzLl9lbnN1cmVGaXJzdFBhZ2VMb2FkZWQoKTtcblxuICAgIHRoaXMuX2RlYm91bmNlckNoZWNrU2l6ZSA9IERlYm91bmNlci5kZWJvdW5jZShcbiAgICAgIHRoaXMuX2RlYm91bmNlckNoZWNrU2l6ZSxcbiAgICAgIHRpbWVPdXQuYWZ0ZXIoMjAwMCksXG4gICAgICB0aGlzLl9jaGVja1NpemUuYmluZCh0aGlzKSk7XG5cbiAgICB0aGlzLl9zY3JvbGxIYW5kbGVyKCk7XG4gIH1cblxuICBfZW5zdXJlRmlyc3RQYWdlTG9hZGVkKCkge1xuICAgIGlmICghdGhpcy5faGFzRGF0YSkge1xuICAgICAgLy8gbG9hZCBkYXRhIGJlZm9yZSBhZGRpbmcgcm93cyB0byBtYWtlIHN1cmUgdGhleSBoYXZlIGNvbnRlbnQgd2hlblxuICAgICAgLy8gcmVuZGVyZWQgZm9yIHRoZSBmaXJzdCB0aW1lLlxuICAgICAgdGhpcy5fbG9hZFBhZ2UoMCwgdGhpcy5fY2FjaGUsICgpID0+IHtcbiAgICAgICAgY29uc3QgaGFkRGF0YSA9IHRoaXMuX2hhc0RhdGE7XG4gICAgICAgIHRoaXMuX2hhc0RhdGEgPSB0cnVlO1xuICAgICAgICBpZiAoIWhhZERhdGEpIHtcbiAgICAgICAgICB0aGlzLm5vdGlmeVJlc2l6ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBfaXRlbXNFcXVhbChpdGVtMSwgaXRlbTIpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRJdGVtSWQoaXRlbTEpID09PSB0aGlzLmdldEl0ZW1JZChpdGVtMik7XG4gIH1cblxuICBfZ2V0SXRlbUluZGV4SW5BcnJheShpdGVtLCBhcnJheSkge1xuICAgIGxldCByZXN1bHQgPSAtMTtcbiAgICBhcnJheS5mb3JFYWNoKChpLCBpZHgpID0+IHtcbiAgICAgIGlmICh0aGlzLl9pdGVtc0VxdWFsKGksIGl0ZW0pKSB7XG4gICAgICAgIHJlc3VsdCA9IGlkeDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbn07XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVmFhZGluIEx0ZC5cblRoaXMgcHJvZ3JhbSBpcyBhdmFpbGFibGUgdW5kZXIgQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIGF2YWlsYWJsZSBhdCBodHRwczovL3ZhYWRpbi5jb20vbGljZW5zZS9cbiovXG5pbXBvcnQgeyBGbGF0dGVuZWROb2Rlc09ic2VydmVyIH0gZnJvbSAnQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvZmxhdHRlbmVkLW5vZGVzLW9ic2VydmVyLmpzJztcblxuaW1wb3J0IHsgRGVib3VuY2VyIH0gZnJvbSAnQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvZGVib3VuY2UuanMnO1xuaW1wb3J0IHsgdGltZU91dCB9IGZyb20gJ0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL2FzeW5jLmpzJztcbmltcG9ydCB7IFBvbHltZXJFbGVtZW50IH0gZnJvbSAnQHBvbHltZXIvcG9seW1lci9wb2x5bWVyLWVsZW1lbnQuanMnO1xuXG4vKipcbiAqIEBwb2x5bWVyTWl4aW5cbiAqL1xuZXhwb3J0IGNvbnN0IER5bmFtaWNDb2x1bW5zTWl4aW4gPSBzdXBlckNsYXNzID0+IGNsYXNzIER5bmFtaWNDb2x1bW5zTWl4aW4gZXh0ZW5kcyBzdXBlckNsYXNzIHtcblxuICByZWFkeSgpIHtcbiAgICBzdXBlci5yZWFkeSgpO1xuICAgIHRoaXMuX2FkZE5vZGVPYnNlcnZlcigpO1xuICB9XG5cbiAgX2hhc0NvbHVtbkdyb3Vwcyhjb2x1bW5zKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb2x1bW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoY29sdW1uc1tpXS5sb2NhbE5hbWUgPT09ICd2YWFkaW4tZ3JpZC1jb2x1bW4tZ3JvdXAnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIF9nZXRDaGlsZENvbHVtbnMoZWwpIHtcbiAgICByZXR1cm4gRmxhdHRlbmVkTm9kZXNPYnNlcnZlci5nZXRGbGF0dGVuZWROb2RlcyhlbCkuZmlsdGVyKHRoaXMuX2lzQ29sdW1uRWxlbWVudCk7XG4gIH1cblxuICBfZmxhdHRlbkNvbHVtbkdyb3Vwcyhjb2x1bW5zKSB7XG4gICAgcmV0dXJuIGNvbHVtbnMubWFwKGNvbCA9PiB7XG4gICAgICBpZiAoY29sLmxvY2FsTmFtZSA9PT0gJ3ZhYWRpbi1ncmlkLWNvbHVtbi1ncm91cCcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldENoaWxkQ29sdW1ucyhjb2wpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFtjb2xdO1xuICAgICAgfVxuICAgIH0pLnJlZHVjZSgocHJldiwgY3VycikgPT4ge1xuICAgICAgcmV0dXJuIHByZXYuY29uY2F0KGN1cnIpO1xuICAgIH0sIFtdKTtcbiAgfVxuXG4gIF9nZXRDb2x1bW5UcmVlKCkge1xuICAgIHZhciByb290Q29sdW1ucyA9IEZsYXR0ZW5lZE5vZGVzT2JzZXJ2ZXIuZ2V0RmxhdHRlbmVkTm9kZXModGhpcykuZmlsdGVyKHRoaXMuX2lzQ29sdW1uRWxlbWVudCk7XG4gICAgdmFyIF9jb2x1bW5UcmVlID0gW107XG5cbiAgICBmb3IgKHZhciBjID0gcm9vdENvbHVtbnM7IDspIHtcbiAgICAgIF9jb2x1bW5UcmVlLnB1c2goYyk7XG4gICAgICBpZiAoIXRoaXMuX2hhc0NvbHVtbkdyb3VwcyhjKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGMgPSB0aGlzLl9mbGF0dGVuQ29sdW1uR3JvdXBzKGMpO1xuICAgIH1cblxuICAgIHJldHVybiBfY29sdW1uVHJlZTtcbiAgfVxuXG4gIF91cGRhdGVDb2x1bW5UcmVlKCkge1xuICAgIHZhciBjb2x1bW5UcmVlID0gdGhpcy5fZ2V0Q29sdW1uVHJlZSgpO1xuICAgIGlmICghdGhpcy5fYXJyYXlFcXVhbHMoY29sdW1uVHJlZSwgdGhpcy5fY29sdW1uVHJlZSkpIHtcbiAgICAgIHRoaXMuX2NvbHVtblRyZWUgPSBjb2x1bW5UcmVlO1xuICAgIH1cbiAgfVxuXG4gIF9hZGROb2RlT2JzZXJ2ZXIoKSB7XG4gICAgdGhpcy5fb2JzZXJ2ZXIgPSBuZXcgRmxhdHRlbmVkTm9kZXNPYnNlcnZlcih0aGlzLCBpbmZvID0+IHtcblxuICAgICAgY29uc3Qgcm93RGV0YWlsc1RlbXBsYXRlID0gaW5mby5hZGRlZE5vZGVzLmZpbHRlcihuID0+IG4ubG9jYWxOYW1lID09PSAndGVtcGxhdGUnICYmIG4uY2xhc3NMaXN0LmNvbnRhaW5zKCdyb3ctZGV0YWlscycpKVswXTtcbiAgICAgIGlmIChyb3dEZXRhaWxzVGVtcGxhdGUgJiYgdGhpcy5fcm93RGV0YWlsc1RlbXBsYXRlICE9PSByb3dEZXRhaWxzVGVtcGxhdGUpIHtcbiAgICAgICAgdGhpcy5fcm93RGV0YWlsc1RlbXBsYXRlID0gcm93RGV0YWlsc1RlbXBsYXRlO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5mby5hZGRlZE5vZGVzLmZpbHRlcih0aGlzLl9pc0NvbHVtbkVsZW1lbnQpLmxlbmd0aCA+IDAgfHxcbiAgICAgICAgaW5mby5yZW1vdmVkTm9kZXMuZmlsdGVyKHRoaXMuX2lzQ29sdW1uRWxlbWVudCkubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLl91cGRhdGVDb2x1bW5UcmVlKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2RlYm91bmNlckNoZWNrSW1wb3J0cyA9IERlYm91bmNlci5kZWJvdW5jZShcbiAgICAgICAgdGhpcy5fZGVib3VuY2VyQ2hlY2tJbXBvcnRzLFxuICAgICAgICB0aW1lT3V0LmFmdGVyKDIwMDApLFxuICAgICAgICB0aGlzLl9jaGVja0ltcG9ydHMuYmluZCh0aGlzKSk7XG5cbiAgICAgIHRoaXMuX2Vuc3VyZUZpcnN0UGFnZUxvYWRlZCgpO1xuICAgIH0pO1xuICB9XG5cbiAgX2FycmF5RXF1YWxzKGFycjEsIGFycjIpIHtcbiAgICBpZiAoIWFycjEgfHwgIWFycjIgfHwgYXJyMS5sZW5ndGggIT0gYXJyMi5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFycjEubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAvLyBDaGVjayBpZiB3ZSBoYXZlIG5lc3RlZCBhcnJheXNcbiAgICAgIGlmIChhcnIxW2ldIGluc3RhbmNlb2YgQXJyYXkgJiYgYXJyMltpXSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIC8vIHJlY3Vyc2UgaW50byB0aGUgbmVzdGVkIGFycmF5c1xuICAgICAgICBpZiAoIXRoaXMuX2FycmF5RXF1YWxzKGFycjFbaV0sIGFycjJbaV0pKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFycjFbaV0gIT0gYXJyMltpXSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgX2NoZWNrSW1wb3J0cygpIHtcbiAgICBbXG4gICAgICAndmFhZGluLWdyaWQtY29sdW1uLWdyb3VwJyxcbiAgICAgICd2YWFkaW4tZ3JpZC1maWx0ZXInLFxuICAgICAgJ3ZhYWRpbi1ncmlkLWZpbHRlci1jb2x1bW4nLFxuICAgICAgJ3ZhYWRpbi1ncmlkLXRyZWUtdG9nZ2xlJyxcbiAgICAgICd2YWFkaW4tZ3JpZC1zZWxlY3Rpb24tY29sdW1uJyxcbiAgICAgICd2YWFkaW4tZ3JpZC1zb3J0LWNvbHVtbicsXG4gICAgICAndmFhZGluLWdyaWQtc29ydGVyJ1xuICAgIF0uZm9yRWFjaChlbGVtZW50TmFtZSA9PiB7XG4gICAgICB2YXIgZWxlbWVudCA9IHRoaXMucXVlcnlTZWxlY3RvcihlbGVtZW50TmFtZSk7XG4gICAgICBpZiAoZWxlbWVudCAmJiAhKGVsZW1lbnQgaW5zdGFuY2VvZiBQb2x5bWVyRWxlbWVudCkpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBNYWtlIHN1cmUgeW91IGhhdmUgaW1wb3J0ZWQgdGhlIHJlcXVpcmVkIG1vZHVsZSBmb3IgPCR7ZWxlbWVudE5hbWV9PiBlbGVtZW50LmApO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgX3VwZGF0ZUZpcnN0QW5kTGFzdENvbHVtbigpIHtcbiAgICBBcnJheS5mcm9tKHRoaXMuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yQWxsKCd0cicpKS5mb3JFYWNoKHJvdyA9PiB0aGlzLl91cGRhdGVGaXJzdEFuZExhc3RDb2x1bW5Gb3JSb3cocm93KSk7XG4gIH1cblxuICBfdXBkYXRlRmlyc3RBbmRMYXN0Q29sdW1uRm9yUm93KHJvdykge1xuICAgIEFycmF5LmZyb20ocm93LnF1ZXJ5U2VsZWN0b3JBbGwoJ1twYXJ0fj1cImNlbGxcIl06bm90KFtwYXJ0fj1cImRldGFpbHMtY2VsbFwiXSknKSlcbiAgICAgIC5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgIHJldHVybiBhLl9jb2x1bW4uX29yZGVyIC0gYi5fY29sdW1uLl9vcmRlcjtcbiAgICAgIH0pLmZvckVhY2goKGNlbGwsIGNlbGxJbmRleCwgY2hpbGRyZW4pID0+IHtcbiAgICAgICAgdGhpcy5fdG9nZ2xlQXR0cmlidXRlKCdmaXJzdC1jb2x1bW4nLCBjZWxsSW5kZXggPT09IDAsIGNlbGwpO1xuICAgICAgICB0aGlzLl90b2dnbGVBdHRyaWJ1dGUoJ2xhc3QtY29sdW1uJywgY2VsbEluZGV4ID09PSBjaGlsZHJlbi5sZW5ndGggLSAxLCBjZWxsKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgX2lzQ29sdW1uRWxlbWVudChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFICYmIC9cXGJjb2x1bW5cXGIvLnRlc3Qobm9kZS5sb2NhbE5hbWUpO1xuICB9XG59O1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE4IFZhYWRpbiBMdGQuXG5UaGlzIHByb2dyYW0gaXMgYXZhaWxhYmxlIHVuZGVyIEFwYWNoZSBMaWNlbnNlIFZlcnNpb24gMi4wLCBhdmFpbGFibGUgYXQgaHR0cHM6Ly92YWFkaW4uY29tL2xpY2Vuc2UvXG4qL1xuLyoqXG4gKiBAcG9seW1lck1peGluXG4gKi9cbmV4cG9ydCBjb25zdCBFdmVudENvbnRleHRNaXhpbiA9IHN1cGVyQ2xhc3MgPT4gY2xhc3MgRXZlbnRDb250ZXh0TWl4aW4gZXh0ZW5kcyBzdXBlckNsYXNzIHtcblxuICAvKipcbiAgICogUmV0dXJucyBhbiBvYmplY3Qgd2l0aCBjb250ZXh0IGluZm9ybWF0aW9uIGFib3V0IHRoZSBldmVudCB0YXJnZXQ6XG4gICAqIC0gYGl0ZW1gOiB0aGUgZGF0YSBvYmplY3QgY29ycmVzcG9uZGluZyB0byB0aGUgdGFyZ2V0ZWQgcm93IChub3Qgc3BlY2lmaWVkIHdoZW4gdGFyZ2V0aW5nIGhlYWRlciBvciBmb290ZXIpXG4gICAqIC0gYGNvbHVtbmA6IHRoZSBjb2x1bW4gZWxlbWVudCBjb3JyZXNwb25kaW5nIHRvIHRoZSB0YXJnZXRlZCBjZWxsIChub3Qgc3BlY2lmaWVkIHdoZW4gdGFyZ2V0aW5nIHJvdyBkZXRhaWxzKVxuICAgKiAtIGBzZWN0aW9uYDogd2hldGhlciB0aGUgZXZlbnQgdGFyZ2V0ZWQgdGhlIGJvZHksIGhlYWRlciwgZm9vdGVyIG9yIGRldGFpbHMgb2YgdGhlIGdyaWRcbiAgICpcbiAgICogVGhlc2UgYWRkaXRpb25hbCBwcm9wZXJ0aWVzIGFyZSBpbmNsdWRlZCB3aGVuIGBpdGVtYCBpcyBzcGVjaWZpZWQ6XG4gICAqIC0gYGluZGV4YDogdGhlIGluZGV4IG9mIHRoZSBpdGVtXG4gICAqIC0gYHNlbGVjdGVkYDogdGhlIHNlbGVjdGVkIHN0YXRlIG9mIHRoZSBpdGVtXG4gICAqIC0gYGRldGFpbHNPcGVuZWRgOiB3aGV0aGVyIHRoZSByb3cgZGV0YWlscyBhcmUgb3BlbiBmb3IgdGhlIGl0ZW1cbiAgICogLSBgZXhwYW5kZWRgOiB0aGUgZXhwYW5kZWQgc3RhdGUgb2YgdGhlIHRyZWUgdG9nZ2xlXG4gICAqIC0gYGxldmVsYDogdGhlIHRyZWUgaGllcmFyY2h5IGxldmVsXG4gICAqXG4gICAqIFRoZSByZXR1cm5lZCBvYmplY3QgaXMgcG9wdWxhdGVkIG9ubHkgd2hlbiBhIGdyaWQgY2VsbCwgaGVhZGVyLCBmb290ZXIgb3Igcm93IGRldGFpbHMgaXMgZm91bmQgaW4gYGV2ZW50LmNvbXBvc2VkUGF0aCgpYC5cbiAgICogVGhpcyBtZWFucyBtb3N0bHkgbW91c2UgYW5kIGtleWJvYXJkIGV2ZW50cy4gSWYgc3VjaCBhIGdyaWQgcGFydCBpcyBub3QgZm91bmQgaW4gdGhlIHBhdGgsIGFuIGVtcHR5IG9iamVjdCBpcyByZXR1cm5lZC5cbiAgICogVGhpcyBtYXkgYmUgdGhlIGNhc2UgZWcuIGlmIHRoZSBldmVudCBpcyBmaXJlZCBvbiB0aGUgYDx2YWFkaW4tZ3JpZD5gIGVsZW1lbnQgYW5kIG5vdCBhbnkgZGVlcGVyIGluIHRoZSBET00sIG9yIGlmXG4gICAqIHRoZSBldmVudCB0YXJnZXRzIHRoZSBlbXB0eSBwYXJ0IG9mIHRoZSBncmlkIGJvZHkuXG4gICAqL1xuICBnZXRFdmVudENvbnRleHQoZXZlbnQpIHtcblxuICAgIGNvbnN0IGNvbnRleHQgPSB7fTtcblxuICAgIGNvbnN0IHBhdGggPSBldmVudC5jb21wb3NlZFBhdGgoKTtcbiAgICBjb25zdCBjZWxsID0gcGF0aFtwYXRoLmluZGV4T2YodGhpcy4kLnRhYmxlKSAtIDNdO1xuXG4gICAgaWYgKCFjZWxsKSB7XG4gICAgICByZXR1cm4gY29udGV4dDtcbiAgICB9XG5cbiAgICBjb250ZXh0LnNlY3Rpb24gPSBbJ2JvZHknLCAnaGVhZGVyJywgJ2Zvb3RlcicsICdkZXRhaWxzJ11cbiAgICAgIC5maWx0ZXIoc2VjdGlvbiA9PiBjZWxsLmdldEF0dHJpYnV0ZSgncGFydCcpLmluZGV4T2Yoc2VjdGlvbikgPiAtMSlbMF07XG5cbiAgICBpZiAoY2VsbC5fY29sdW1uKSB7XG4gICAgICBjb250ZXh0LmNvbHVtbiA9IGNlbGwuX2NvbHVtbjtcbiAgICB9XG5cbiAgICBpZiAoY29udGV4dC5zZWN0aW9uID09PSAnYm9keScgfHwgY29udGV4dC5zZWN0aW9uID09PSAnZGV0YWlscycpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24oY29udGV4dCwgdGhpcy5fX2dldFJvd01vZGVsKGNlbGwucGFyZW50RWxlbWVudCkpO1xuICAgIH1cblxuICAgIHJldHVybiBjb250ZXh0O1xuICB9XG5cbn07XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVmFhZGluIEx0ZC5cblRoaXMgcHJvZ3JhbSBpcyBhdmFpbGFibGUgdW5kZXIgQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIGF2YWlsYWJsZSBhdCBodHRwczovL3ZhYWRpbi5jb20vbGljZW5zZS9cbiovXG4vKipcbiAqIEBwb2x5bWVyTWl4aW5cbiAqL1xuZXhwb3J0IGNvbnN0IEZpbHRlck1peGluID0gc3VwZXJDbGFzcyA9PiBjbGFzcyBGaWx0ZXJNaXhpbiBleHRlbmRzIHN1cGVyQ2xhc3Mge1xuXG4gIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgX2ZpbHRlcnM6IHtcbiAgICAgICAgdHlwZTogQXJyYXksXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgcmVhZHkoKSB7XG4gICAgc3VwZXIucmVhZHkoKTtcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2ZpbHRlci1jaGFuZ2VkJywgdGhpcy5fZmlsdGVyQ2hhbmdlZC5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIF9maWx0ZXJDaGFuZ2VkKGUpIHtcbiAgICBpZiAodGhpcy5fZmlsdGVycy5pbmRleE9mKGUudGFyZ2V0KSA9PT0gLTEpIHtcbiAgICAgIHRoaXMuX2ZpbHRlcnMucHVzaChlLnRhcmdldCk7XG4gICAgfVxuXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIGlmICh0aGlzLmRhdGFQcm92aWRlcikge1xuICAgICAgdGhpcy5jbGVhckNhY2hlKCk7XG4gICAgfVxuICB9XG5cbiAgX21hcEZpbHRlcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ZpbHRlcnMubWFwKGZpbHRlciA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXRoOiBmaWx0ZXIucGF0aCxcbiAgICAgICAgdmFsdWU6IGZpbHRlci52YWx1ZVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxufTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBWYWFkaW4gTHRkLlxuVGhpcyBwcm9ncmFtIGlzIGF2YWlsYWJsZSB1bmRlciBBcGFjaGUgTGljZW5zZSBWZXJzaW9uIDIuMCwgYXZhaWxhYmxlIGF0IGh0dHBzOi8vdmFhZGluLmNvbS9saWNlbnNlL1xuKi9cbmltcG9ydCB7IFBvbHltZXJFbGVtZW50IH0gZnJvbSAnQHBvbHltZXIvcG9seW1lci9wb2x5bWVyLWVsZW1lbnQuanMnO1xuXG5pbXBvcnQgeyB0ZW1wbGF0aXplIH0gZnJvbSAnQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvdGVtcGxhdGl6ZS5qcyc7XG4vKipcbiAqIGB2YWFkaW4tZ3JpZC10ZW1wbGF0aXplcmAgaXMgYSBoZWxwZXIgZWxlbWVudCBmb3IgdGhlIGB2YWFkaW4tZ3JpZGAgdGhhdCBpcyBwcmVwYXJpbmcgYW5kXG4gKiBzdGFtcGluZyBpbnN0YW5jZXMgb2YgY2VsbHMgYW5kIGNvbHVtbnMgdGVtcGxhdGVzXG4gKlxuICogQG1lbWJlcm9mIFZhYWRpblxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgR3JpZFRlbXBsYXRpemVyIGV4dGVuZHMgKGNsYXNzIGV4dGVuZHMgUG9seW1lckVsZW1lbnQge30pIHtcbiAgc3RhdGljIGdldCBpcygpIHtcbiAgICByZXR1cm4gJ3ZhYWRpbi1ncmlkLXRlbXBsYXRpemVyJztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGF0YUhvc3Q6IE9iamVjdCxcblxuICAgICAgdGVtcGxhdGU6IE9iamVjdCxcblxuICAgICAgX3RlbXBsYXRlSW5zdGFuY2VzOiB7XG4gICAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBfcGFyZW50UGF0aFZhbHVlczoge1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBfZ3JpZDogT2JqZWN0XG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZXJzKCkge1xuICAgIHJldHVybiBbXG4gICAgICAnX3RlbXBsYXRlSW5zdGFuY2VzQ2hhbmdlZChfdGVtcGxhdGVJbnN0YW5jZXMuKiwgX3BhcmVudFBhdGhWYWx1ZXMuKiknXG4gICAgXTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLl9pbnN0YW5jZVByb3BzID0ge1xuICAgICAgZGV0YWlsc09wZW5lZDogdHJ1ZSxcbiAgICAgIGluZGV4OiB0cnVlLFxuICAgICAgaXRlbTogdHJ1ZSxcbiAgICAgIHNlbGVjdGVkOiB0cnVlLFxuICAgICAgZXhwYW5kZWQ6IHRydWUsXG4gICAgICBsZXZlbDogdHJ1ZVxuICAgIH07XG4gIH1cblxuICBjcmVhdGVJbnN0YW5jZSgpIHtcbiAgICB0aGlzLl9lbnN1cmVUZW1wbGF0aXplZCgpO1xuICAgIGNvbnN0IGluc3RhbmNlID0gbmV3IHRoaXMuX1RlbXBsYXRlQ2xhc3Moe30pO1xuICAgIHRoaXMuYWRkSW5zdGFuY2UoaW5zdGFuY2UpO1xuXG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9XG5cbiAgYWRkSW5zdGFuY2UoaW5zdGFuY2UpIHtcbiAgICBpZiAodGhpcy5fdGVtcGxhdGVJbnN0YW5jZXMuaW5kZXhPZihpbnN0YW5jZSkgPT09IC0xKSB7XG4gICAgICB0aGlzLl90ZW1wbGF0ZUluc3RhbmNlcy5wdXNoKGluc3RhbmNlKTtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLm5vdGlmeVBhdGgoJ190ZW1wbGF0ZUluc3RhbmNlcy4qJywgdGhpcy5fdGVtcGxhdGVJbnN0YW5jZXMpKTtcbiAgICB9XG4gIH1cblxuICByZW1vdmVJbnN0YW5jZShpbnN0YW5jZSkge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fdGVtcGxhdGVJbnN0YW5jZXMuaW5kZXhPZihpbnN0YW5jZSk7XG4gICAgdGhpcy5zcGxpY2UoJ190ZW1wbGF0ZUluc3RhbmNlcycsIGluZGV4LCAxKTtcbiAgfVxuXG4gIF9lbnN1cmVUZW1wbGF0aXplZCgpIHtcbiAgICBpZiAoIXRoaXMuX1RlbXBsYXRlQ2xhc3MpIHtcbiAgICAgIHRoaXMuX1RlbXBsYXRlQ2xhc3MgPSB0ZW1wbGF0aXplKHRoaXMudGVtcGxhdGUsIHRoaXMsIHtcbiAgICAgICAgaW5zdGFuY2VQcm9wczogdGhpcy5faW5zdGFuY2VQcm9wcyxcbiAgICAgICAgcGFyZW50TW9kZWw6IHRydWUsXG5cbiAgICAgICAgZm9yd2FyZEhvc3RQcm9wOiBmdW5jdGlvbihwcm9wLCB2YWx1ZSkge1xuICAgICAgICAgIHRoaXMuX2ZvcndhcmRQYXJlbnRQcm9wKHByb3AsIHZhbHVlKTtcblxuICAgICAgICAgIGlmICh0aGlzLl90ZW1wbGF0ZUluc3RhbmNlcykge1xuICAgICAgICAgICAgdGhpcy5fdGVtcGxhdGVJbnN0YW5jZXMuZm9yRWFjaChpbnN0ID0+IGluc3Qubm90aWZ5UGF0aChwcm9wLCB2YWx1ZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBub3RpZnlJbnN0YW5jZVByb3A6IGZ1bmN0aW9uKGluc3QsIHByb3AsIHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHByb3AgPT09ICdpbmRleCcgfHwgcHJvcCA9PT0gJ2l0ZW0nKSB7XG4gICAgICAgICAgICAvLyBXZSBkb27igJl0IG5lZWQgYSBjaGFuZ2Ugbm90aWZpY2F0aW9uIGZvciB0aGVzZS5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBvcmlnaW5hbFByb3AgPSBgX18ke3Byb3B9X19gO1xuXG4gICAgICAgICAgLy8gTm90aWZ5IGZvciBvbmx5IHVzZXItYWN0aW9uIGNoYW5nZXMsIG5vdCBmb3Igc2Nyb2xsaW5nIHVwZGF0ZXMuIEUuIGcuLFxuICAgICAgICAgIC8vIGlmIGBkZXRhaWxzT3BlbmVkYCBpcyBkaWZmZXJlbnQgZnJvbSBgX19kZXRhaWxzT3BlbmVkX19gLCB3aGljaCB3YXMgc2V0IGR1cmluZyByZW5kZXIuXG4gICAgICAgICAgaWYgKGluc3Rbb3JpZ2luYWxQcm9wXSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaW5zdFtvcmlnaW5hbFByb3BdID0gdmFsdWU7XG5cbiAgICAgICAgICBjb25zdCByb3cgPSBBcnJheS5mcm9tKHRoaXMuX2dyaWQuJC5pdGVtcy5jaGlsZHJlbikuZmlsdGVyKHJvdyA9PiB0aGlzLl9ncmlkLl9pdGVtc0VxdWFsKHJvdy5faXRlbSwgaW5zdC5pdGVtKSlbMF07XG4gICAgICAgICAgaWYgKHJvdykge1xuICAgICAgICAgICAgQXJyYXkuZnJvbShyb3cuY2hpbGRyZW4pLmZvckVhY2goY2VsbCA9PiB7XG4gICAgICAgICAgICAgIGlmIChjZWxsLl9pbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIGNlbGwuX2luc3RhbmNlW29yaWdpbmFsUHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBjZWxsLl9pbnN0YW5jZS5ub3RpZnlQYXRoKHByb3AsIHZhbHVlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgaXRlbVByZWZpeCA9ICdpdGVtLic7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5fZ3JpZC5pdGVtcykgJiYgcHJvcC5pbmRleE9mKGl0ZW1QcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtc0luZGV4ID0gdGhpcy5fZ3JpZC5pdGVtcy5pbmRleE9mKGluc3QuaXRlbSk7XG4gICAgICAgICAgICBjb25zdCBwYXRoID0gcHJvcC5zbGljZShpdGVtUHJlZml4Lmxlbmd0aCk7XG4gICAgICAgICAgICB0aGlzLl9ncmlkLm5vdGlmeVBhdGgoYGl0ZW1zLiR7aXRlbXNJbmRleH0uJHtwYXRofWAsIHZhbHVlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBncmlkQ2FsbGJhY2sgPSBgXyR7cHJvcH1JbnN0YW5jZUNoYW5nZWRDYWxsYmFja2A7XG4gICAgICAgICAgaWYgKHRoaXMuX2dyaWQgJiYgdGhpcy5fZ3JpZFtncmlkQ2FsbGJhY2tdKSB7XG4gICAgICAgICAgICB0aGlzLl9ncmlkW2dyaWRDYWxsYmFja10oaW5zdCwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBfZm9yd2FyZFBhcmVudFByb3AocHJvcCwgdmFsdWUpIHtcbiAgICB0aGlzLl9wYXJlbnRQYXRoVmFsdWVzW3Byb3BdID0gdmFsdWU7XG4gICAgdGhpcy5fdGVtcGxhdGVJbnN0YW5jZXMuZm9yRWFjaChpbnN0ID0+IGluc3Qubm90aWZ5UGF0aChwcm9wLCB2YWx1ZSkpO1xuICB9XG5cbiAgX3RlbXBsYXRlSW5zdGFuY2VzQ2hhbmdlZCh0LCBwKSB7XG4gICAgbGV0IGluZGV4LCBjb3VudDtcbiAgICBpZiAodC5wYXRoID09PSAnX3RlbXBsYXRlSW5zdGFuY2VzJykge1xuICAgICAgLy8gSXRlcmF0ZSBhbGwgaW5zdGFuY2VzXG4gICAgICBpbmRleCA9IDA7XG4gICAgICBjb3VudCA9IHRoaXMuX3RlbXBsYXRlSW5zdGFuY2VzLmxlbmd0aDtcbiAgICB9IGVsc2UgaWYgKHQucGF0aCA9PT0gJ190ZW1wbGF0ZUluc3RhbmNlcy5zcGxpY2VzJykge1xuICAgICAgLy8gSXRlcmF0ZSBvbmx5IG5ldyBpbnN0YW5jZXNcbiAgICAgIGluZGV4ID0gdC52YWx1ZS5pbmRleDtcbiAgICAgIGNvdW50ID0gdC52YWx1ZS5hZGRlZENvdW50O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIE9iamVjdC5rZXlzKHRoaXMuX3BhcmVudFBhdGhWYWx1ZXMgfHwge30pLmZvckVhY2goa2V5TmFtZSA9PiB7XG4gICAgICBmb3IgKHZhciBpID0gaW5kZXg7IGkgPCBpbmRleCArIGNvdW50OyBpKyspIHtcbiAgICAgICAgdGhpcy5fdGVtcGxhdGVJbnN0YW5jZXNbaV0uc2V0KGtleU5hbWUsIHRoaXMuX3BhcmVudFBhdGhWYWx1ZXNba2V5TmFtZV0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbn1cblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKEdyaWRUZW1wbGF0aXplci5pcywgR3JpZFRlbXBsYXRpemVyKTtcblxuZXhwb3J0IHsgR3JpZFRlbXBsYXRpemVyIGFzIFRlbXBsYXRpemVyIH07XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVmFhZGluIEx0ZC5cblRoaXMgcHJvZ3JhbSBpcyBhdmFpbGFibGUgdW5kZXIgQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIGF2YWlsYWJsZSBhdCBodHRwczovL3ZhYWRpbi5jb20vbGljZW5zZS9cbiovXG5pbXBvcnQgeyBUZW1wbGF0aXplciB9IGZyb20gJy4vdmFhZGluLWdyaWQtdGVtcGxhdGl6ZXIuanMnO1xuXG5pbXBvcnQgeyBmbHVzaCB9IGZyb20gJ0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL2ZsdXNoLmpzJztcblxuLyoqXG4gKiBAcG9seW1lck1peGluXG4gKi9cbmV4cG9ydCBjb25zdCBSb3dEZXRhaWxzTWl4aW4gPSBzdXBlckNsYXNzID0+IGNsYXNzIFJvd0RldGFpbHNNaXhpbiBleHRlbmRzIHN1cGVyQ2xhc3Mge1xuICBzdGF0aWMgZ2V0IHByb3BlcnRpZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogQW4gYXJyYXkgY29udGFpbmluZyByZWZlcmVuY2VzIHRvIGl0ZW1zIHdpdGggb3BlbiByb3cgZGV0YWlscy5cbiAgICAgICAqL1xuICAgICAgZGV0YWlsc09wZW5lZEl0ZW1zOiB7XG4gICAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBfcm93RGV0YWlsc1RlbXBsYXRlOiBPYmplY3QsXG5cbiAgICAgIC8qKlxuICAgICAgICogQ3VzdG9tIGZ1bmN0aW9uIGZvciByZW5kZXJpbmcgdGhlIGNvbnRlbnQgb2YgdGhlIHJvdyBkZXRhaWxzLlxuICAgICAgICogUmVjZWl2ZXMgdGhyZWUgYXJndW1lbnRzOlxuICAgICAgICpcbiAgICAgICAqIC0gYHJvb3RgIFRoZSByb3cgZGV0YWlscyBjb250ZW50IERPTSBlbGVtZW50LiBBcHBlbmQgeW91ciBjb250ZW50IHRvIGl0LlxuICAgICAgICogLSBgZ3JpZGAgVGhlIGA8dmFhZGluLWdyaWQ+YCBlbGVtZW50LlxuICAgICAgICogLSBgcm93RGF0YWAgVGhlIG9iamVjdCB3aXRoIHRoZSBwcm9wZXJ0aWVzIHJlbGF0ZWQgd2l0aFxuICAgICAgICogICB0aGUgcmVuZGVyZWQgaXRlbSwgY29udGFpbnM6XG4gICAgICAgKiAgIC0gYHJvd0RhdGEuaW5kZXhgIFRoZSBpbmRleCBvZiB0aGUgaXRlbS5cbiAgICAgICAqICAgLSBgcm93RGF0YS5pdGVtYCBUaGUgaXRlbS5cbiAgICAgICAqL1xuICAgICAgcm93RGV0YWlsc1JlbmRlcmVyOiBGdW5jdGlvbixcblxuICAgICAgX2RldGFpbHNDZWxsczoge1xuICAgICAgICB0eXBlOiBBcnJheSxcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGdldCBvYnNlcnZlcnMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICdfZGV0YWlsc09wZW5lZEl0ZW1zQ2hhbmdlZChkZXRhaWxzT3BlbmVkSXRlbXMuKiwgX3Jvd0RldGFpbHNUZW1wbGF0ZSwgcm93RGV0YWlsc1JlbmRlcmVyKScsXG4gICAgICAnX3Jvd0RldGFpbHNUZW1wbGF0ZU9yUmVuZGVyZXJDaGFuZ2VkKF9yb3dEZXRhaWxzVGVtcGxhdGUsIHJvd0RldGFpbHNSZW5kZXJlciknXG4gICAgXTtcbiAgfVxuXG4gIF9yb3dEZXRhaWxzVGVtcGxhdGVPclJlbmRlcmVyQ2hhbmdlZChyb3dEZXRhaWxzVGVtcGxhdGUsIHJvd0RldGFpbHNSZW5kZXJlcikge1xuICAgIGlmIChyb3dEZXRhaWxzVGVtcGxhdGUgJiYgcm93RGV0YWlsc1JlbmRlcmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBzaG91bGQgb25seSB1c2UgZWl0aGVyIGEgcmVuZGVyZXIgb3IgYSB0ZW1wbGF0ZSBmb3Igcm93IGRldGFpbHMnKTtcbiAgICB9XG4gICAgaWYgKHJvd0RldGFpbHNUZW1wbGF0ZSB8fCByb3dEZXRhaWxzUmVuZGVyZXIpIHtcbiAgICAgIGlmIChyb3dEZXRhaWxzVGVtcGxhdGUgJiYgIXJvd0RldGFpbHNUZW1wbGF0ZS50ZW1wbGF0aXplcikge1xuICAgICAgICB2YXIgdGVtcGxhdGl6ZXIgPSBuZXcgVGVtcGxhdGl6ZXIoKTtcbiAgICAgICAgdGVtcGxhdGl6ZXIuX2dyaWQgPSB0aGlzO1xuICAgICAgICB0ZW1wbGF0aXplci5kYXRhSG9zdCA9IHRoaXMuZGF0YUhvc3Q7XG4gICAgICAgIHRlbXBsYXRpemVyLnRlbXBsYXRlID0gcm93RGV0YWlsc1RlbXBsYXRlO1xuICAgICAgICByb3dEZXRhaWxzVGVtcGxhdGUudGVtcGxhdGl6ZXIgPSB0ZW1wbGF0aXplcjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2NvbHVtblRyZWUpIHtcbiAgICAgICAgLy8gT25seSB1cGRhdGUgdGhlIHJvd3MgaWYgdGhlIGNvbHVtbiB0cmVlIGhhcyBhbHJlYWR5IGJlZW4gaW5pdGlhbGl6ZWRcbiAgICAgICAgQXJyYXkuZnJvbSh0aGlzLiQuaXRlbXMuY2hpbGRyZW4pLmZvckVhY2gocm93ID0+IHtcbiAgICAgICAgICBpZiAoIXJvdy5xdWVyeVNlbGVjdG9yKCdbcGFydH49ZGV0YWlscy1jZWxsXScpKSB7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVSb3cocm93LCB0aGlzLl9jb2x1bW5UcmVlW3RoaXMuX2NvbHVtblRyZWUubGVuZ3RoIC0gMV0pO1xuICAgICAgICAgICAgdGhpcy5fYTExeVVwZGF0ZVJvd0RldGFpbHNPcGVuZWQocm93LCBmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIENsZWFyIGFueSBvbGQgdGVtcGxhdGUgaW5zdGFuY2VzXG4gICAgICAgICAgZGVsZXRlIHJvdy5xdWVyeVNlbGVjdG9yKCdbcGFydH49ZGV0YWlscy1jZWxsXScpLl9pbnN0YW5jZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmRldGFpbHNPcGVuZWRJdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgQXJyYXkuZnJvbSh0aGlzLiQuaXRlbXMuY2hpbGRyZW4pLmZvckVhY2godGhpcy5fdG9nZ2xlRGV0YWlsc0NlbGwsIHRoaXMpO1xuICAgICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfZGV0YWlsc09wZW5lZEl0ZW1zQ2hhbmdlZChjaGFuZ2VSZWNvcmQsIHJvd0RldGFpbHNUZW1wbGF0ZSwgcm93RGV0YWlsc1JlbmRlcmVyKSB7XG4gICAgaWYgKGNoYW5nZVJlY29yZC5wYXRoID09PSAnZGV0YWlsc09wZW5lZEl0ZW1zLmxlbmd0aCcgfHwgIWNoYW5nZVJlY29yZC52YWx1ZSkge1xuICAgICAgLy8gTGV04oCZcyBhdm9pZCBkdXBsaWNhdGUgd29yayBvZiBib3RoIOKAnC5zcGxpY2Vz4oCdIGFuZCDigJwubGVuZ3Ro4oCdIHVwZGF0ZXMuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIEFycmF5LmZyb20odGhpcy4kLml0ZW1zLmNoaWxkcmVuKS5mb3JFYWNoKHJvdyA9PiB7XG4gICAgICB0aGlzLl90b2dnbGVEZXRhaWxzQ2VsbChyb3csIHJvdy5faXRlbSk7XG4gICAgICB0aGlzLl9hMTF5VXBkYXRlUm93RGV0YWlsc09wZW5lZChyb3csIHRoaXMuX2lzRGV0YWlsc09wZW5lZChyb3cuX2l0ZW0pKTtcbiAgICAgIHRoaXMuX3RvZ2dsZUF0dHJpYnV0ZSgnZGV0YWlscy1vcGVuZWQnLCB0aGlzLl9pc0RldGFpbHNPcGVuZWQocm93Ll9pdGVtKSwgcm93KTtcbiAgICB9KTtcbiAgfVxuXG4gIF9jb25maWd1cmVEZXRhaWxzQ2VsbChjZWxsKSB7XG4gICAgY2VsbC5zZXRBdHRyaWJ1dGUoJ3BhcnQnLCAnY2VsbCBkZXRhaWxzLWNlbGwnKTtcbiAgICAvLyBGcmVlemUgdGhlIGRldGFpbHMgY2VsbCwgc28gdGhhdCBpdCBkb2VzIG5vdCBzY3JvbGwgaG9yaXpvbnRhbGx5XG4gICAgLy8gd2l0aCB0aGUgbm9ybWFsIGNlbGxzLiBUaGlzIHdheSBpdCBsb29rcyBsZXNzIHdlaXJkLlxuICAgIHRoaXMuX3RvZ2dsZUF0dHJpYnV0ZSgnZnJvemVuJywgdHJ1ZSwgY2VsbCk7XG4gIH1cblxuICBfdG9nZ2xlRGV0YWlsc0NlbGwocm93LCBpdGVtKSB7XG4gICAgY29uc3QgY2VsbCA9IHJvdy5xdWVyeVNlbGVjdG9yKCdbcGFydH49XCJkZXRhaWxzLWNlbGxcIl0nKTtcbiAgICBpZiAoIWNlbGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZGV0YWlsc0hpZGRlbiA9ICF0aGlzLl9pc0RldGFpbHNPcGVuZWQoaXRlbSk7XG4gICAgY29uc3QgaGlkZGVuQ2hhbmdlZCA9ICEhY2VsbC5oaWRkZW4gIT09IGRldGFpbHNIaWRkZW47XG5cbiAgICBpZiAoIWNlbGwuX2luc3RhbmNlICYmICFjZWxsLl9yZW5kZXJlciB8fCBjZWxsLmhpZGRlbiAhPT0gZGV0YWlsc0hpZGRlbikge1xuICAgICAgY2VsbC5oaWRkZW4gPSBkZXRhaWxzSGlkZGVuO1xuICAgICAgaWYgKGRldGFpbHNIaWRkZW4pIHtcbiAgICAgICAgcm93LnN0eWxlLnJlbW92ZVByb3BlcnR5KCdwYWRkaW5nLWJvdHRvbScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMucm93RGV0YWlsc1JlbmRlcmVyKSB7XG4gICAgICAgICAgY2VsbC5fcmVuZGVyZXIgPSB0aGlzLnJvd0RldGFpbHNSZW5kZXJlcjtcbiAgICAgICAgICBjZWxsLl9yZW5kZXJlci5jYWxsKHRoaXMsIGNlbGwuX2NvbnRlbnQsIHRoaXMsIHtpbmRleDogcm93LmluZGV4LCBpdGVtOiBpdGVtfSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fcm93RGV0YWlsc1RlbXBsYXRlICYmICFjZWxsLl9pbnN0YW5jZSkge1xuICAgICAgICAgIC8vIFN0YW1wIHRoZSB0ZW1wbGF0ZVxuICAgICAgICAgIGNlbGwuX2luc3RhbmNlID0gdGhpcy5fcm93RGV0YWlsc1RlbXBsYXRlLnRlbXBsYXRpemVyLmNyZWF0ZUluc3RhbmNlKCk7XG4gICAgICAgICAgY2VsbC5fY29udGVudC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICBjZWxsLl9jb250ZW50LmFwcGVuZENoaWxkKGNlbGwuX2luc3RhbmNlLnJvb3QpO1xuICAgICAgICAgIHRoaXMuX3VwZGF0ZUl0ZW0ocm93LCBpdGVtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZsdXNoKCk7XG4gICAgICAgIHJvdy5zdHlsZS5zZXRQcm9wZXJ0eSgncGFkZGluZy1ib3R0b20nLCBgJHtjZWxsLm9mZnNldEhlaWdodH1weGApO1xuXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLm5vdGlmeVJlc2l6ZSgpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGhpZGRlbkNoYW5nZWQpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZU1ldHJpY3MoKTtcbiAgICAgIHRoaXMuX3Bvc2l0aW9uSXRlbXMoKTtcbiAgICB9XG4gIH1cblxuICBfdXBkYXRlRGV0YWlsc0NlbGxIZWlnaHRzKCkge1xuICAgIEFycmF5LmZyb20odGhpcy4kLml0ZW1zLnF1ZXJ5U2VsZWN0b3JBbGwoJ1twYXJ0fj1cImRldGFpbHMtY2VsbFwiXTpub3QoW2hpZGRlbl0pJykpLmZvckVhY2goY2VsbCA9PiB7XG4gICAgICBjZWxsLnBhcmVudEVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoJ3BhZGRpbmctYm90dG9tJywgYCR7Y2VsbC5vZmZzZXRIZWlnaHR9cHhgKTtcbiAgICB9KTtcbiAgfVxuXG4gIF9pc0RldGFpbHNPcGVuZWQoaXRlbSkge1xuICAgIHJldHVybiB0aGlzLmRldGFpbHNPcGVuZWRJdGVtcyAmJiB0aGlzLl9nZXRJdGVtSW5kZXhJbkFycmF5KGl0ZW0sIHRoaXMuZGV0YWlsc09wZW5lZEl0ZW1zKSAhPT0gLTE7XG4gIH1cblxuICAvKipcbiAgICogT3BlbiB0aGUgZGV0YWlscyByb3cgb2YgYSBnaXZlbiBpdGVtLlxuICAgKi9cbiAgb3Blbkl0ZW1EZXRhaWxzKGl0ZW0pIHtcbiAgICBpZiAoIXRoaXMuX2lzRGV0YWlsc09wZW5lZChpdGVtKSkge1xuICAgICAgdGhpcy5wdXNoKCdkZXRhaWxzT3BlbmVkSXRlbXMnLCBpdGVtKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2UgdGhlIGRldGFpbHMgcm93IG9mIGEgZ2l2ZW4gaXRlbS5cbiAgICovXG4gIGNsb3NlSXRlbURldGFpbHMoaXRlbSkge1xuICAgIGlmICh0aGlzLl9pc0RldGFpbHNPcGVuZWQoaXRlbSkpIHtcbiAgICAgIHRoaXMuc3BsaWNlKCdkZXRhaWxzT3BlbmVkSXRlbXMnLCB0aGlzLl9nZXRJdGVtSW5kZXhJbkFycmF5KGl0ZW0sIHRoaXMuZGV0YWlsc09wZW5lZEl0ZW1zKSwgMSk7XG4gICAgfVxuICB9XG5cbiAgX2RldGFpbHNPcGVuZWRJbnN0YW5jZUNoYW5nZWRDYWxsYmFjayhpbnN0YW5jZSwgdmFsdWUpIHtcbiAgICBpZiAoc3VwZXIuX2RldGFpbHNPcGVuZWRJbnN0YW5jZUNoYW5nZWRDYWxsYmFjaykge1xuICAgICAgc3VwZXIuX2RldGFpbHNPcGVuZWRJbnN0YW5jZUNoYW5nZWRDYWxsYmFjayhpbnN0YW5jZSwgdmFsdWUpO1xuICAgIH1cbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMub3Blbkl0ZW1EZXRhaWxzKGluc3RhbmNlLml0ZW0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNsb3NlSXRlbURldGFpbHMoaW5zdGFuY2UuaXRlbSk7XG4gICAgfVxuICB9XG59O1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFZhYWRpbiBMdGQuXG5UaGlzIHByb2dyYW0gaXMgYXZhaWxhYmxlIHVuZGVyIEFwYWNoZSBMaWNlbnNlIFZlcnNpb24gMi4wLCBhdmFpbGFibGUgYXQgaHR0cHM6Ly92YWFkaW4uY29tL2xpY2Vuc2UvXG4qL1xuaW1wb3J0IHsgRGVib3VuY2VyIH0gZnJvbSAnQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvZGVib3VuY2UuanMnO1xuXG5pbXBvcnQgeyB0aW1lT3V0LCBhbmltYXRpb25GcmFtZSwgbWljcm9UYXNrIH0gZnJvbSAnQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvYXN5bmMuanMnO1xuXG4vKipcbiAqIEBwb2x5bWVyTWl4aW5cbiAqL1xuZXhwb3J0IGNvbnN0IFNjcm9sbE1peGluID0gc3VwZXJDbGFzcyA9PiBjbGFzcyBTY3JvbGxNaXhpbiBleHRlbmRzIHN1cGVyQ2xhc3Mge1xuXG4gIGdldCBfdGltZW91dHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFNDUk9MTF9QRVJJT0Q6IDEwMDAsXG4gICAgICBXSEVFTF9TQ1JPTExJTkc6IDIwMCxcbiAgICAgIFNDUk9MTElORzogMTAwLFxuICAgICAgSUdOT1JFX1dIRUVMOiA1MDBcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGdldCBwcm9wZXJ0aWVzKCkge1xuICAgIHJldHVybiB7XG5cbiAgICAgIC8vIENhY2hlZCBhcnJheSBvZiBmcm96ZW4gY2VsbHNcbiAgICAgIF9mcm96ZW5DZWxsczoge1xuICAgICAgICB0eXBlOiBBcnJheSxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG5cbiAgICAgIF9zY3JvbGxiYXJXaWR0aDoge1xuICAgICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAvLyBDcmVhdGUgdGhlIG1lYXN1cmVtZW50IG5vZGVcbiAgICAgICAgICB2YXIgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgc2Nyb2xsRGl2LnN0eWxlLndpZHRoID0gJzEwMHB4JztcbiAgICAgICAgICBzY3JvbGxEaXYuc3R5bGUuaGVpZ2h0ID0gJzEwMHB4JztcbiAgICAgICAgICBzY3JvbGxEaXYuc3R5bGUub3ZlcmZsb3cgPSAnc2Nyb2xsJztcbiAgICAgICAgICBzY3JvbGxEaXYuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICAgIHNjcm9sbERpdi5zdHlsZS50b3AgPSAnLTk5OTlweCc7XG4gICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JvbGxEaXYpO1xuICAgICAgICAgIC8vIEdldCB0aGUgc2Nyb2xsYmFyIHdpZHRoXG4gICAgICAgICAgdmFyIHNjcm9sbGJhcldpZHRoID0gc2Nyb2xsRGl2Lm9mZnNldFdpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoO1xuICAgICAgICAgIC8vIERlbGV0ZSB0aGUgRElWXG4gICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpO1xuICAgICAgICAgIHJldHVybiBzY3JvbGxiYXJXaWR0aDtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgX3Jvd1dpdGhGb2N1c2VkRWxlbWVudDogRWxlbWVudCxcblxuICAgICAgX2RlbHRhWUFjYzoge1xuICAgICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICAgIHZhbHVlOiAwXG4gICAgICB9XG5cbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGdldCBvYnNlcnZlcnMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICdfc2Nyb2xsSGVpZ2h0VXBkYXRlZChfZXN0U2Nyb2xsSGVpZ2h0KScsXG4gICAgICAnX3Njcm9sbFZpZXdwb3J0SGVpZ2h0VXBkYXRlZChfdmlld3BvcnRIZWlnaHQpJ1xuICAgIF07XG4gIH1cblxuICAvLyBPdmVycmlkZSAoZnJvbSBpcm9uLXNjcm9sbC10YXJnZXQtYmVoYXZpb3IpIHRvIGF2b2lkIGRvY3VtZW50IHNjcm9sbFxuICBzZXQgX3Njcm9sbFRvcCh0b3ApIHtcbiAgICB0aGlzLiQudGFibGUuc2Nyb2xsVG9wID0gdG9wO1xuICB9XG5cbiAgZ2V0IF9zY3JvbGxUb3AoKSB7XG4gICAgcmV0dXJuIHRoaXMuJC50YWJsZS5zY3JvbGxUb3A7XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3Njcm9sbExpbmVIZWlnaHQgPSB0aGlzLl9nZXRTY3JvbGxMaW5lSGVpZ2h0KCk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge051bWJlcnx1bmRlZmluZWR9IC0gVGhlIGJyb3dzZXIncyBkZWZhdWx0IGZvbnQtc2l6ZSBpbiBwaXhlbHNcbiAgICovXG4gIF9nZXRTY3JvbGxMaW5lSGVpZ2h0KCkge1xuICAgIGNvbnN0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZWwuc3R5bGUuZm9udFNpemUgPSAnaW5pdGlhbCc7XG4gICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsKTtcbiAgICBjb25zdCBmb250U2l6ZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKS5mb250U2l6ZTtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGVsKTtcbiAgICByZXR1cm4gZm9udFNpemUgPyB3aW5kb3cucGFyc2VJbnQoZm9udFNpemUpIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgX3Njcm9sbFZpZXdwb3J0SGVpZ2h0VXBkYXRlZChfdmlld3BvcnRIZWlnaHQpIHtcbiAgICB0aGlzLl9zY3JvbGxQYWdlSGVpZ2h0ID0gX3ZpZXdwb3J0SGVpZ2h0IC0gdGhpcy4kLmhlYWRlci5jbGllbnRIZWlnaHQgLSB0aGlzLiQuZm9vdGVyLmNsaWVudEhlaWdodCAtIHRoaXMuX3Njcm9sbExpbmVIZWlnaHQ7XG4gIH1cblxuICByZWFkeSgpIHtcbiAgICBzdXBlci5yZWFkeSgpO1xuICAgIHRoaXMuc2Nyb2xsVGFyZ2V0ID0gdGhpcy4kLnRhYmxlO1xuXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCd3aGVlbCcsIGUgPT4ge1xuICAgICAgdGhpcy5fd2hlZWxTY3JvbGxpbmcgPSB0cnVlO1xuICAgICAgdGhpcy5fZGVib3VuY2VyV2hlZWxTY3JvbGxpbmcgPSBEZWJvdW5jZXIuZGVib3VuY2UoXG4gICAgICAgIHRoaXMuX2RlYm91bmNlcldoZWVsU2Nyb2xsaW5nLFxuICAgICAgICB0aW1lT3V0LmFmdGVyKHRoaXMuX3RpbWVvdXRzLldIRUVMX1NDUk9MTElORyksXG4gICAgICAgICgpID0+IHRoaXMuX3doZWVsU2Nyb2xsaW5nID0gZmFsc2VcbiAgICAgICk7XG4gICAgICB0aGlzLl9vbldoZWVsKGUpO1xuICAgIH0pO1xuXG4gICAgdGhpcy4kLnRhYmxlLmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGUgPT4ge1xuICAgICAgaWYgKHRoaXMuJC5vdXRlcnNjcm9sbGVyLm91dGVyU2Nyb2xsaW5nKSB7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICB9XG4gICAgfSwgdHJ1ZSk7XG5cbiAgICB0aGlzLiQuaXRlbXMuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXNpbicsIChlKSA9PiB7XG4gICAgICBjb25zdCBpdGVtc0luZGV4ID0gZS5jb21wb3NlZFBhdGgoKS5pbmRleE9mKHRoaXMuJC5pdGVtcyk7XG4gICAgICB0aGlzLl9yb3dXaXRoRm9jdXNlZEVsZW1lbnQgPSBlLmNvbXBvc2VkUGF0aCgpW2l0ZW1zSW5kZXggLSAxXTtcbiAgICB9KTtcbiAgICB0aGlzLiQuaXRlbXMuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXNvdXQnLCAoKSA9PiB0aGlzLl9yb3dXaXRoRm9jdXNlZEVsZW1lbnQgPSB1bmRlZmluZWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNjcm9sbCB0byBhIHNwZWNpZmljIHJvdyBpbmRleCBpbiB0aGUgdmlydHVhbCBsaXN0LiBOb3RlIHRoYXQgdGhlIHJvdyBpbmRleCBpc1xuICAgKiBub3QgYWx3YXlzIHRoZSBzYW1lIGZvciBhbnkgcGFydGljdWxhciBpdGVtLiBGb3IgZXhhbXBsZSwgc29ydGluZy9maWx0ZXJpbmcvZXhwYW5kaW5nXG4gICAqIG9yIGNvbGxhcHNpbmcgaGllcmFyY2hpY2FsIGl0ZW1zIGNhbiBhZmZlY3QgdGhlIHJvdyBpbmRleCByZWxhdGVkIHRvIGFuIGl0ZW0uXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBSb3cgaW5kZXggdG8gc2Nyb2xsIHRvXG4gICAqL1xuICBzY3JvbGxUb0luZGV4KGluZGV4KSB7XG4gICAgdGhpcy5fYWNjZXNzSXJvbkxpc3RBUEkoKCkgPT4gc3VwZXIuc2Nyb2xsVG9JbmRleChpbmRleCkpO1xuICB9XG5cbiAgX29uV2hlZWwoZSkge1xuICAgIGlmIChlLmN0cmxLZXkgfHwgdGhpcy5faGFzU2Nyb2xsZWRBbmNlc3RvcihlLnRhcmdldCwgZS5kZWx0YVgsIGUuZGVsdGFZKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHRhYmxlID0gdGhpcy4kLnRhYmxlO1xuXG4gICAgbGV0IGRlbHRhWSA9IGUuZGVsdGFZO1xuICAgIGlmIChlLmRlbHRhTW9kZSA9PT0gV2hlZWxFdmVudC5ET01fREVMVEFfTElORSkge1xuICAgICAgLy8gU2Nyb2xsaW5nIGJ5IFwibGluZXMgb2YgdGV4dFwiIGluc3RlYWQgb2YgcGl4ZWxzXG4gICAgICBkZWx0YVkgKj0gdGhpcy5fc2Nyb2xsTGluZUhlaWdodDtcbiAgICB9IGVsc2UgaWYgKGUuZGVsdGFNb2RlID09PSBXaGVlbEV2ZW50LkRPTV9ERUxUQV9QQUdFKSB7XG4gICAgICAvLyBTY3JvbGxpbmcgYnkgXCJwYWdlc1wiIGluc3RlYWQgb2YgcGl4ZWxzXG4gICAgICBkZWx0YVkgKj0gdGhpcy5fc2Nyb2xsUGFnZUhlaWdodDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fd2hlZWxBbmltYXRpb25GcmFtZSkge1xuICAgICAgLy8gU2tpcCBuZXcgd2hlZWwgZXZlbnRzIHdoaWxlIG9uZSBpcyBiZWluZyBwcm9jZXNzZWRcbiAgICAgIHRoaXMuX2RlbHRhWUFjYyArPSBkZWx0YVk7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZGVsdGFZICs9IHRoaXMuX2RlbHRhWUFjYztcbiAgICB0aGlzLl9kZWx0YVlBY2MgPSAwO1xuXG4gICAgdGhpcy5fd2hlZWxBbmltYXRpb25GcmFtZSA9IHRydWU7XG4gICAgdGhpcy5fZGVib3VuY2VyV2hlZWxBbmltYXRpb25GcmFtZSA9IERlYm91bmNlci5kZWJvdW5jZShcbiAgICAgIHRoaXMuX2RlYm91bmNlcldoZWVsQW5pbWF0aW9uRnJhbWUsXG4gICAgICBhbmltYXRpb25GcmFtZSxcbiAgICAgICgpID0+IHRoaXMuX3doZWVsQW5pbWF0aW9uRnJhbWUgPSBmYWxzZVxuICAgICk7XG5cbiAgICB2YXIgbW9tZW50dW0gPSBNYXRoLmFicyhlLmRlbHRhWCkgKyBNYXRoLmFicyhkZWx0YVkpO1xuXG4gICAgaWYgKHRoaXMuX2NhblNjcm9sbCh0YWJsZSwgZS5kZWx0YVgsIGRlbHRhWSkpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRhYmxlLnNjcm9sbFRvcCArPSBkZWx0YVk7XG4gICAgICB0YWJsZS5zY3JvbGxMZWZ0ICs9IGUuZGVsdGFYO1xuICAgICAgdGhpcy5fc2Nyb2xsSGFuZGxlcigpO1xuICAgICAgdGhpcy5faGFzUmVzaWR1YWxNb21lbnR1bSA9IHRydWU7XG5cbiAgICAgIHRoaXMuX2lnbm9yZU5ld1doZWVsID0gdHJ1ZTtcbiAgICAgIHRoaXMuX2RlYm91bmNlcklnbm9yZU5ld1doZWVsID0gRGVib3VuY2VyLmRlYm91bmNlKFxuICAgICAgICB0aGlzLl9kZWJvdW5jZXJJZ25vcmVOZXdXaGVlbCxcbiAgICAgICAgdGltZU91dC5hZnRlcih0aGlzLl90aW1lb3V0cy5JR05PUkVfV0hFRUwpLFxuICAgICAgICAoKSA9PiB0aGlzLl9pZ25vcmVOZXdXaGVlbCA9IGZhbHNlXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAodGhpcy5faGFzUmVzaWR1YWxNb21lbnR1bSAmJiBtb21lbnR1bSA8PSB0aGlzLl9wcmV2aW91c01vbWVudHVtIHx8IHRoaXMuX2lnbm9yZU5ld1doZWVsKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSBlbHNlIGlmIChtb21lbnR1bSA+IHRoaXMuX3ByZXZpb3VzTW9tZW50dW0pIHtcbiAgICAgIHRoaXMuX2hhc1Jlc2lkdWFsTW9tZW50dW0gPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5fcHJldmlvdXNNb21lbnR1bSA9IG1vbWVudHVtO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgdGhlIGVsZW1lbnQgaGFzIGFuIGFuY2VzdG9yIHByaW9yIHRvIHRoaXNcbiAgICogY2VsbCBjb250ZW50IHRoYXQgaGFuZGxlcyB0aGUgc2Nyb2xsIGRlbHRhXG4gICAqL1xuICBfaGFzU2Nyb2xsZWRBbmNlc3RvcihlbCwgZGVsdGFYLCBkZWx0YVkpIHtcbiAgICBpZiAoZWwubG9jYWxOYW1lID09PSAndmFhZGluLWdyaWQtY2VsbC1jb250ZW50Jykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fY2FuU2Nyb2xsKGVsLCBkZWx0YVgsIGRlbHRhWSlcbiAgICAgICYmIFsnYXV0bycsICdzY3JvbGwnXS5pbmRleE9mKGdldENvbXB1dGVkU3R5bGUoZWwpLm92ZXJmbG93KSAhPT0gLTEpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAoZWwgIT09IHRoaXMgJiYgZWwucGFyZW50RWxlbWVudCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2hhc1Njcm9sbGVkQW5jZXN0b3IoZWwucGFyZW50RWxlbWVudCwgZGVsdGFYLCBkZWx0YVkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIHRoZSB0aGUgZ2l2ZW4gc2Nyb2xsIGRlbHRhcyBjYW4gYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICAgKiAoZnVsbHkgb3IgcGFydGlhbGx5KVxuICAgKi9cbiAgX2NhblNjcm9sbChlbCwgZGVsdGFYLCBkZWx0YVkpIHtcbiAgICByZXR1cm4gKGRlbHRhWSA+IDAgJiYgZWwuc2Nyb2xsVG9wIDwgZWwuc2Nyb2xsSGVpZ2h0IC0gZWwub2Zmc2V0SGVpZ2h0KSB8fFxuICAgIChkZWx0YVkgPCAwICYmIGVsLnNjcm9sbFRvcCA+IDApIHx8XG4gICAgKGRlbHRhWCA+IDAgJiYgZWwuc2Nyb2xsTGVmdCA8IGVsLnNjcm9sbFdpZHRoIC0gZWwub2Zmc2V0V2lkdGgpIHx8XG4gICAgKGRlbHRhWCA8IDAgJiYgZWwuc2Nyb2xsTGVmdCA+IDApO1xuICB9XG5cbiAgX3NjaGVkdWxlU2Nyb2xsaW5nKCkge1xuICAgIGlmICghdGhpcy5fc2Nyb2xsaW5nRnJhbWUpIHtcbiAgICAgIC8vIERlZmVyIHNldHRpbmcgc3RhdGUgYXR0cmlidXRlcyB0byBhdm9pZCBFZGdlIGhpY2N1cHNcbiAgICAgIHRoaXMuX3Njcm9sbGluZ0ZyYW1lID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMuX3RvZ2dsZUF0dHJpYnV0ZSgnc2Nyb2xsaW5nJywgdHJ1ZSwgdGhpcy4kLnNjcm9sbGVyKSk7XG4gICAgfVxuICAgIHRoaXMuX2RlYm91bmNlU2Nyb2xsaW5nID0gRGVib3VuY2VyLmRlYm91bmNlKFxuICAgICAgdGhpcy5fZGVib3VuY2VTY3JvbGxpbmcsXG4gICAgICB0aW1lT3V0LmFmdGVyKHRoaXMuX3RpbWVvdXRzLlNDUk9MTElORyksXG4gICAgICAoKSA9PiB7XG4gICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuX3Njcm9sbGluZ0ZyYW1lKTtcbiAgICAgICAgZGVsZXRlIHRoaXMuX3Njcm9sbGluZ0ZyYW1lO1xuICAgICAgICB0aGlzLl90b2dnbGVBdHRyaWJ1dGUoJ3Njcm9sbGluZycsIGZhbHNlLCB0aGlzLiQuc2Nyb2xsZXIpO1xuICAgICAgICBpZiAoIXRoaXMuJC5vdXRlcnNjcm9sbGVyLm91dGVyU2Nyb2xsaW5nKSB7XG4gICAgICAgICAgdGhpcy5fcmVvcmRlclJvd3MoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG5cbiAgICBpZiAoIXRoaXMuX3Njcm9sbFBlcmlvZEZyYW1lKSB7XG4gICAgICB0aGlzLl9zY3JvbGxQZXJpb2RGcmFtZSA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLl90b2dnbGVBdHRyaWJ1dGUoJ3Njcm9sbC1wZXJpb2QnLCB0cnVlLCB0aGlzLiQuc2Nyb2xsZXIpKTtcbiAgICB9XG4gICAgdGhpcy5fZGVib3VuY2VTY3JvbGxQZXJpb2QgPSBEZWJvdW5jZXIuZGVib3VuY2UoXG4gICAgICB0aGlzLl9kZWJvdW5jZVNjcm9sbFBlcmlvZCxcbiAgICAgIHRpbWVPdXQuYWZ0ZXIodGhpcy5fdGltZW91dHMuU0NST0xMX1BFUklPRCksXG4gICAgICAoKSA9PiB7XG4gICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuX3Njcm9sbFBlcmlvZEZyYW1lKTtcbiAgICAgICAgZGVsZXRlIHRoaXMuX3Njcm9sbFBlcmlvZEZyYW1lO1xuICAgICAgICB0aGlzLl90b2dnbGVBdHRyaWJ1dGUoJ3Njcm9sbC1wZXJpb2QnLCBmYWxzZSwgdGhpcy4kLnNjcm9sbGVyKTtcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgX2FmdGVyU2Nyb2xsKCkge1xuICAgIHRoaXMuX3RyYW5zbGF0ZVN0YXRpb25hcnlFbGVtZW50cygpO1xuXG4gICAgaWYgKCF0aGlzLmhhc0F0dHJpYnV0ZSgncmVvcmRlcmluZycpKSB7XG4gICAgICB0aGlzLl9zY2hlZHVsZVNjcm9sbGluZygpO1xuICAgIH1cblxuICAgIGNvbnN0IG9zID0gdGhpcy4kLm91dGVyc2Nyb2xsZXI7XG4gICAgaWYgKCF0aGlzLl9pb3MgJiYgKHRoaXMuX3doZWVsU2Nyb2xsaW5nIHx8IG9zLnBhc3N0aHJvdWdoKSkge1xuICAgICAgb3Muc3luY091dGVyU2Nyb2xsZXIoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5faW9zKSB7XG4gICAgICAvLyBFbmFibGUgdmVydGljYWwgcnViYmVyYmFuZCBmZWVkYmFja1xuICAgICAgY29uc3Qgb3ZlclNjcm9sbCA9IE1hdGgubWF4KC1vcy5zY3JvbGxUb3AsIDApIHx8XG4gICAgICAgIE1hdGgubWluKDAsIG9zLnNjcm9sbEhlaWdodCAtIG9zLnNjcm9sbFRvcCAtIG9zLm9mZnNldEhlaWdodCk7XG4gICAgICB0aGlzLiQuaXRlbXMuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVkoJHtvdmVyU2Nyb2xsfXB4KWA7XG4gICAgfVxuXG4gICAgdGhpcy5fdXBkYXRlT3ZlcmZsb3coKTtcbiAgfVxuXG4gIF91cGRhdGVPdmVyZmxvdygpIHtcbiAgICAvLyBTZXQgb3ZlcmZsb3cgc3R5bGluZyBhdHRyaWJ1dGVzXG4gICAgbGV0IG92ZXJmbG93ID0gJyc7XG4gICAgY29uc3QgdGFibGUgPSB0aGlzLiQudGFibGU7XG4gICAgaWYgKHRhYmxlLnNjcm9sbFRvcCA8IHRhYmxlLnNjcm9sbEhlaWdodCAtIHRhYmxlLmNsaWVudEhlaWdodCkge1xuICAgICAgb3ZlcmZsb3cgKz0gJyBib3R0b20nO1xuICAgIH1cblxuICAgIGlmICh0YWJsZS5zY3JvbGxUb3AgPiAwKSB7XG4gICAgICBvdmVyZmxvdyArPSAnIHRvcCc7XG4gICAgfVxuXG4gICAgaWYgKHRhYmxlLnNjcm9sbExlZnQgPCB0YWJsZS5zY3JvbGxXaWR0aCAtIHRhYmxlLmNsaWVudFdpZHRoKSB7XG4gICAgICBvdmVyZmxvdyArPSAnIHJpZ2h0JztcbiAgICB9XG5cbiAgICBpZiAodGFibGUuc2Nyb2xsTGVmdCA+IDApIHtcbiAgICAgIG92ZXJmbG93ICs9ICcgbGVmdCc7XG4gICAgfVxuXG4gICAgdGhpcy5fZGVib3VuY2VPdmVyZmxvdyA9IERlYm91bmNlci5kZWJvdW5jZShcbiAgICAgIHRoaXMuX2RlYm91bmNlT3ZlcmZsb3csXG4gICAgICBhbmltYXRpb25GcmFtZSxcbiAgICAgICgpID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBvdmVyZmxvdy50cmltKCk7XG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAwICYmIHRoaXMuZ2V0QXR0cmlidXRlKCdvdmVyZmxvdycpICE9PSB2YWx1ZSkge1xuICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdvdmVyZmxvdycsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZS5sZW5ndGggPT0gMCAmJiB0aGlzLmhhc0F0dHJpYnV0ZSgnb3ZlcmZsb3cnKSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKCdvdmVyZmxvdycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIC8vIGNvcnJlY3Qgb3JkZXIgbmVlZGVkIGZvciBwcmVzZXJ2aW5nIGNvcnJlY3QgdGFiIG9yZGVyIGJldHdlZW4gY2VsbCBjb250ZW50cy5cbiAgX3Jlb3JkZXJSb3dzKCkge1xuICAgIGNvbnN0IGJvZHkgPSB0aGlzLiQuaXRlbXM7XG4gICAgY29uc3QgaXRlbXMgPSBib2R5LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RyJyk7XG4gICAgaWYgKCFpdGVtcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBhZGp1c3RlZFZpcnR1YWxTdGFydCA9IHRoaXMuX3ZpcnR1YWxTdGFydCArIHRoaXMuX3ZpZHhPZmZzZXQ7XG5cbiAgICAvLyBXaGljaCByb3cgdG8gdXNlIGFzIGEgdGFyZ2V0P1xuICAgIGNvbnN0IHRhcmdldFJvdyA9IHRoaXMuX3Jvd1dpdGhGb2N1c2VkRWxlbWVudCB8fCBBcnJheS5mcm9tKGl0ZW1zKS5maWx0ZXIocm93ID0+ICFyb3cuaGlkZGVuKVswXTtcbiAgICBpZiAoIXRhcmdldFJvdykge1xuICAgICAgLy8gQWxsIHJvd3MgYXJlIGhpZGRlbiwgZG9uJ3QgcmVvcmRlclxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFdoZXJlIHRoZSB0YXJnZXQgcm93IHNob3VsZCBiZT9cbiAgICBjb25zdCB0YXJnZXRQaHlzaWNhbEluZGV4ID0gdGFyZ2V0Um93LmluZGV4IC0gYWRqdXN0ZWRWaXJ0dWFsU3RhcnQ7XG5cbiAgICAvLyBSZW9kcmVyIHRoZSBET00gZWxlbWVudHMgdG8ga2VlcCB0aGUgdGFyZ2V0IHJvdyBhdCB0aGUgdGFyZ2V0IHBoeXNpY2FsIGluZGV4XG4gICAgY29uc3QgZGVsdGEgPSBBcnJheS5mcm9tKGl0ZW1zKS5pbmRleE9mKHRhcmdldFJvdykgLSB0YXJnZXRQaHlzaWNhbEluZGV4O1xuICAgIGlmIChkZWx0YSA+IDApIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVsdGE7IGkrKykge1xuICAgICAgICBib2R5LmFwcGVuZENoaWxkKGl0ZW1zW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGRlbHRhIDwgMCkge1xuICAgICAgZm9yIChsZXQgaSA9IGl0ZW1zLmxlbmd0aCArIGRlbHRhOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYm9keS5pbnNlcnRCZWZvcmUoaXRlbXNbaV0sIGl0ZW1zWzBdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfZnJvemVuQ2VsbHNDaGFuZ2VkKCkge1xuICAgIHRoaXMuX2RlYm91bmNlckNhY2hlRWxlbWVudHMgPSBEZWJvdW5jZXIuZGVib3VuY2UoXG4gICAgICB0aGlzLl9kZWJvdW5jZXJDYWNoZUVsZW1lbnRzLFxuICAgICAgbWljcm9UYXNrLFxuICAgICAgKCkgPT4ge1xuICAgICAgICBBcnJheS5mcm9tKHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yQWxsKCdbcGFydH49XCJjZWxsXCJdJykpLmZvckVhY2goZnVuY3Rpb24oY2VsbCkge1xuICAgICAgICAgIGNlbGwuc3R5bGUudHJhbnNmb3JtID0gJyc7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9mcm96ZW5DZWxscyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuJC50YWJsZS5xdWVyeVNlbGVjdG9yQWxsKCdbZnJvemVuXScpKTtcbiAgICAgICAgdGhpcy5fdHJhbnNsYXRlU3RhdGlvbmFyeUVsZW1lbnRzKCk7XG4gICAgICB9XG4gICAgKTtcbiAgICB0aGlzLl91cGRhdGVMYXN0RnJvemVuKCk7XG4gIH1cblxuICBfdXBkYXRlTGFzdEZyb3plbigpIHtcbiAgICBpZiAoIXRoaXMuX2NvbHVtblRyZWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBjb2x1bW5zUm93ID0gdGhpcy5fY29sdW1uVHJlZVt0aGlzLl9jb2x1bW5UcmVlLmxlbmd0aCAtIDFdLnNsaWNlKDApO1xuICAgIGNvbHVtbnNSb3cuc29ydCgoYSwgYikgPT4ge1xuICAgICAgcmV0dXJuIGEuX29yZGVyIC0gYi5fb3JkZXI7XG4gICAgfSk7XG4gICAgY29uc3QgbGFzdEZyb3plbiA9IGNvbHVtbnNSb3cucmVkdWNlKChwcmV2LCBjb2wsIGluZGV4KSA9PiB7XG4gICAgICBjb2wuX2xhc3RGcm96ZW4gPSBmYWxzZTtcbiAgICAgIHJldHVybiBjb2wuZnJvemVuICYmICFjb2wuaGlkZGVuID8gaW5kZXggOiBwcmV2O1xuICAgIH0sIHVuZGVmaW5lZCk7XG4gICAgaWYgKGxhc3RGcm96ZW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29sdW1uc1Jvd1tsYXN0RnJvemVuXS5fbGFzdEZyb3plbiA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgX3RyYW5zbGF0ZVN0YXRpb25hcnlFbGVtZW50cygpIHtcbiAgICBpZiAodGhpcy5fZWRnZSAmJiAhdGhpcy5fc2Nyb2xsYmFyV2lkdGgpIHtcbiAgICAgIC8vIEZpeGVkIG1vZGUgKFRhYmxldCBFZGdlKVxuICAgICAgdGhpcy4kLml0ZW1zLnN0eWxlLnRyYW5zZm9ybSA9XG4gICAgICB0aGlzLl9nZXRUcmFuc2xhdGUoLXRoaXMuX3Njcm9sbExlZnQgfHwgMCwgLXRoaXMuX3Njcm9sbFRvcCB8fCAwKTtcblxuICAgICAgdGhpcy4kLmZvb3Rlci5zdHlsZS50cmFuc2Zvcm0gPSB0aGlzLiQuaGVhZGVyLnN0eWxlLnRyYW5zZm9ybSA9XG4gICAgICB0aGlzLl9nZXRUcmFuc2xhdGUoLXRoaXMuX3Njcm9sbExlZnQgfHwgMCwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuJC5mb290ZXIuc3R5bGUudHJhbnNmb3JtID0gdGhpcy4kLmhlYWRlci5zdHlsZS50cmFuc2Zvcm0gPSB0aGlzLl9nZXRUcmFuc2xhdGUoMCwgdGhpcy5fc2Nyb2xsVG9wKTtcbiAgICB9XG5cbiAgICB2YXIgZnJvemVuQ2VsbFRyYW5zZm9ybSA9IHRoaXMuX2dldFRyYW5zbGF0ZSh0aGlzLl9zY3JvbGxMZWZ0LCAwKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX2Zyb3plbkNlbGxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLl9mcm96ZW5DZWxsc1tpXS5zdHlsZS50cmFuc2Zvcm0gPSBmcm96ZW5DZWxsVHJhbnNmb3JtO1xuICAgIH1cbiAgfVxuXG4gIF9nZXRUcmFuc2xhdGUoeCwgeSkge1xuICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyB4ICsgJ3B4LCcgKyB5ICsgJ3B4KSc7XG4gIH1cblxuICBfc2Nyb2xsSGVpZ2h0VXBkYXRlZChfZXN0U2Nyb2xsSGVpZ2h0KSB7XG4gICAgdGhpcy4kLm91dGVyc2l6ZXIuc3R5bGUudG9wID0gdGhpcy4kLmZpeGVkc2l6ZXIuc3R5bGUudG9wID0gX2VzdFNjcm9sbEhlaWdodCArICdweCc7XG4gIH1cblxufTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBWYWFkaW4gTHRkLlxuVGhpcyBwcm9ncmFtIGlzIGF2YWlsYWJsZSB1bmRlciBBcGFjaGUgTGljZW5zZSBWZXJzaW9uIDIuMCwgYXZhaWxhYmxlIGF0IGh0dHBzOi8vdmFhZGluLmNvbS9saWNlbnNlL1xuKi9cbi8qKlxuICogQHBvbHltZXJNaXhpblxuICovXG5leHBvcnQgY29uc3QgU2VsZWN0aW9uTWl4aW4gPSBzdXBlckNsYXNzID0+IGNsYXNzIFNlbGVjdGlvbk1peGluIGV4dGVuZHMgc3VwZXJDbGFzcyB7XG5cbiAgc3RhdGljIGdldCBwcm9wZXJ0aWVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvKipcbiAgICAgICAqIEFuIGFycmF5IHRoYXQgY29udGFpbnMgdGhlIHNlbGVjdGVkIGl0ZW1zLlxuICAgICAgICovXG4gICAgICBzZWxlY3RlZEl0ZW1zOiB7XG4gICAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgICAgbm90aWZ5OiB0cnVlLFxuICAgICAgICB2YWx1ZTogKCkgPT4gW11cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGdldCBvYnNlcnZlcnMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICdfc2VsZWN0ZWRJdGVtc0NoYW5nZWQoc2VsZWN0ZWRJdGVtcy4qKSdcbiAgICBdO1xuICB9XG5cbiAgX2lzU2VsZWN0ZWQoaXRlbSkge1xuICAgIHJldHVybiB0aGlzLnNlbGVjdGVkSXRlbXMgJiYgdGhpcy5fZ2V0SXRlbUluZGV4SW5BcnJheShpdGVtLCB0aGlzLnNlbGVjdGVkSXRlbXMpID4gLTE7XG4gIH1cblxuICAvKipcbiAgICogU2VsZWN0cyB0aGUgZ2l2ZW4gaXRlbS5cbiAgICpcbiAgICogQG1ldGhvZCBzZWxlY3RJdGVtXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBpdGVtIFRoZSBpdGVtIG9iamVjdFxuICAgKi9cbiAgc2VsZWN0SXRlbShpdGVtKSB7XG4gICAgaWYgKCF0aGlzLl9pc1NlbGVjdGVkKGl0ZW0pKSB7XG4gICAgICB0aGlzLnB1c2goJ3NlbGVjdGVkSXRlbXMnLCBpdGVtKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGVzZWxlY3RzIHRoZSBnaXZlbiBpdGVtIGlmIGl0IGlzIGFscmVhZHkgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBtZXRob2QgZGVzZWxlY3RcbiAgICogQHBhcmFtIHtPYmplY3R9IGl0ZW0gVGhlIGl0ZW0gb2JqZWN0XG4gICAqL1xuICBkZXNlbGVjdEl0ZW0oaXRlbSkge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4SW5BcnJheShpdGVtLCB0aGlzLnNlbGVjdGVkSXRlbXMpO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICB0aGlzLnNwbGljZSgnc2VsZWN0ZWRJdGVtcycsIGluZGV4LCAxKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xlcyB0aGUgc2VsZWN0ZWQgc3RhdGUgb2YgdGhlIGdpdmVuIGl0ZW0uXG4gICAqXG4gICAqIEBtZXRob2QgdG9nZ2xlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBpdGVtIFRoZSBpdGVtIG9iamVjdFxuICAgKi9cbiAgX3RvZ2dsZUl0ZW0oaXRlbSkge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4SW5BcnJheShpdGVtLCB0aGlzLnNlbGVjdGVkSXRlbXMpO1xuICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgIHRoaXMuc2VsZWN0SXRlbShpdGVtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kZXNlbGVjdEl0ZW0oaXRlbSk7XG4gICAgfVxuICB9XG5cbiAgX3NlbGVjdGVkSXRlbXNDaGFuZ2VkKGUpIHtcbiAgICBpZiAodGhpcy4kLml0ZW1zLmNoaWxkcmVuLmxlbmd0aCAmJiAoZS5wYXRoID09PSAnc2VsZWN0ZWRJdGVtcycgfHwgZS5wYXRoID09PSAnc2VsZWN0ZWRJdGVtcy5zcGxpY2VzJykpIHtcbiAgICAgIEFycmF5LmZyb20odGhpcy4kLml0ZW1zLmNoaWxkcmVuKS5mb3JFYWNoKHJvdyA9PiB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUl0ZW0ocm93LCByb3cuX2l0ZW0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgX3NlbGVjdGVkSW5zdGFuY2VDaGFuZ2VkQ2FsbGJhY2soaW5zdGFuY2UsIHZhbHVlKSB7XG4gICAgaWYgKHN1cGVyLl9zZWxlY3RlZEluc3RhbmNlQ2hhbmdlZENhbGxiYWNrKSB7XG4gICAgICBzdXBlci5fc2VsZWN0ZWRJbnN0YW5jZUNoYW5nZWRDYWxsYmFjayhpbnN0YW5jZSwgdmFsdWUpO1xuICAgIH1cbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMuc2VsZWN0SXRlbShpbnN0YW5jZS5pdGVtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kZXNlbGVjdEl0ZW0oaW5zdGFuY2UuaXRlbSk7XG4gICAgfVxuICB9XG59O1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFZhYWRpbiBMdGQuXG5UaGlzIHByb2dyYW0gaXMgYXZhaWxhYmxlIHVuZGVyIEFwYWNoZSBMaWNlbnNlIFZlcnNpb24gMi4wLCBhdmFpbGFibGUgYXQgaHR0cHM6Ly92YWFkaW4uY29tL2xpY2Vuc2UvXG4qL1xuaW1wb3J0IHsgbWljcm9UYXNrIH0gZnJvbSAnQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvYXN5bmMuanMnO1xuXG5pbXBvcnQgeyBQb2x5bWVyRWxlbWVudCB9IGZyb20gJ0Bwb2x5bWVyL3BvbHltZXIvcG9seW1lci1lbGVtZW50LmpzJztcblxuLyoqXG4gKiBAcG9seW1lck1peGluXG4gKi9cbmV4cG9ydCBjb25zdCBTb3J0TWl4aW4gPSBzdXBlckNsYXNzID0+IGNsYXNzIFNvcnRNaXhpbiBleHRlbmRzIHN1cGVyQ2xhc3Mge1xuICBzdGF0aWMgZ2V0IHByb3BlcnRpZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogV2hlbiBgdHJ1ZWAsIGFsbCBgPHZhYWRpbi1ncmlkLXNvcnRlcj5gIGFyZSBhcHBsaWVkIGZvciBzb3J0aW5nLlxuICAgICAgICovXG4gICAgICBtdWx0aVNvcnQ6IHtcbiAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICB9LFxuXG4gICAgICBfc29ydGVyczoge1xuICAgICAgICB0eXBlOiBBcnJheSxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgX3ByZXZpb3VzU29ydGVyczoge1xuICAgICAgICB0eXBlOiBBcnJheSxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICByZWFkeSgpIHtcbiAgICBzdXBlci5yZWFkeSgpO1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignc29ydGVyLWNoYW5nZWQnLCB0aGlzLl9vblNvcnRlckNoYW5nZWQpO1xuXG4gICAgLy8gV2l0aCBQb2x5bWVyIDIgJiBzaGFkeSB0aGUgJ3NvcnRlci1jaGFuZ2VkJyBsaXN0ZW5lciBpc24ndCBndWFyYW50ZWVkIHRvIGJlIHJlZ2lzdGVyZWRcbiAgICAvLyBiZWZvcmUgY2hpbGQgPHZhYWRpbi1ncmlkLXNvcnRlcj4ncyB1cGdyYWRlIGFuZCBmaXJlIHRoZSBldmVudHMuIFRoZSBmb2xsb3dpbmdcbiAgICAvLyBtYWtlcyBzdXJlIHRoYXQgJ3NvcnRlci1jaGFuZ2VkJyBpcyBmaXJlZCBmb3IgYWxsIDx2YWFkaW4tZ3JpZC1zb3J0ZXI+IGVsZW1lbnRzXG4gICAgLy8gYWZ0ZXIgdGhpcyAoPHZhYWRpbi1ncmlkPikgaXMgcmVhZHkgKGFuZCB0aGUgbGlzdGVuZXJzIGFyZSBhY3RpdmUpLlxuICAgIGlmICh3aW5kb3cuU2hhZHlET00pIHtcbiAgICAgIG1pY3JvVGFzay5ydW4oKCkgPT4ge1xuICAgICAgICBjb25zdCBzb3J0ZXJzID0gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKCd2YWFkaW4tZ3JpZC1zb3J0ZXInKTtcbiAgICAgICAgQXJyYXkuZnJvbShzb3J0ZXJzKS5mb3JFYWNoKChzb3J0ZXIpID0+IHtcbiAgICAgICAgICAvLyBEb24ndCB0cnkgdG8gZmlyZSBpZiB0aGUgc29ydGVyIGhhc24ndCBiZWVuIHVwZ3JhZGVkIHlldFxuICAgICAgICAgIGlmIChzb3J0ZXIgaW5zdGFuY2VvZiBQb2x5bWVyRWxlbWVudCkge1xuICAgICAgICAgICAgc29ydGVyLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdzb3J0ZXItY2hhbmdlZCcsIHtidWJibGVzOiB0cnVlLCBjb21wb3NlZDogdHJ1ZX0pKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgX29uU29ydGVyQ2hhbmdlZChlKSB7XG4gICAgY29uc3Qgc29ydGVyID0gZS50YXJnZXQ7XG5cbiAgICB0aGlzLl9yZW1vdmVBcnJheUl0ZW0odGhpcy5fc29ydGVycywgc29ydGVyKTtcbiAgICBzb3J0ZXIuX29yZGVyID0gbnVsbDtcblxuICAgIGlmICh0aGlzLm11bHRpU29ydCkge1xuICAgICAgaWYgKHNvcnRlci5kaXJlY3Rpb24pIHtcbiAgICAgICAgdGhpcy5fc29ydGVycy51bnNoaWZ0KHNvcnRlcik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3NvcnRlcnMuZm9yRWFjaCgoc29ydGVyLCBpbmRleCkgPT4gc29ydGVyLl9vcmRlciA9IHRoaXMuX3NvcnRlcnMubGVuZ3RoID4gMSA/IGluZGV4IDogbnVsbCwgdGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzb3J0ZXIuZGlyZWN0aW9uKSB7XG4gICAgICAgIHRoaXMuX3NvcnRlcnMuZm9yRWFjaChzb3J0ZXIgPT4ge1xuICAgICAgICAgIHNvcnRlci5fb3JkZXIgPSBudWxsO1xuICAgICAgICAgIHNvcnRlci5kaXJlY3Rpb24gPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fc29ydGVycyA9IFtzb3J0ZXJdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICBpZiAodGhpcy5kYXRhUHJvdmlkZXIgJiZcbiAgICAgIC8vIE5vIG5lZWQgdG8gY2xlYXIgY2FjaGUgaWYgc29ydGVycyBkaWRuJ3QgY2hhbmdlXG4gICAgICBKU09OLnN0cmluZ2lmeSh0aGlzLl9wcmV2aW91c1NvcnRlcnMpICE9PSBKU09OLnN0cmluZ2lmeSh0aGlzLl9tYXBTb3J0ZXJzKCkpKSB7XG4gICAgICB0aGlzLmNsZWFyQ2FjaGUoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9hMTF5VXBkYXRlU29ydGVycygpO1xuXG4gICAgdGhpcy5fcHJldmlvdXNTb3J0ZXJzID0gdGhpcy5fbWFwU29ydGVycygpO1xuICB9XG5cbiAgX21hcFNvcnRlcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NvcnRlcnMubWFwKHNvcnRlciA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXRoOiBzb3J0ZXIucGF0aCxcbiAgICAgICAgZGlyZWN0aW9uOiBzb3J0ZXIuZGlyZWN0aW9uXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgX3JlbW92ZUFycmF5SXRlbShhcnJheSwgaXRlbSkge1xuICAgIGNvbnN0IGluZGV4ID0gYXJyYXkuaW5kZXhPZihpdGVtKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH1cbn07XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTggVmFhZGluIEx0ZC5cblRoaXMgcHJvZ3JhbSBpcyBhdmFpbGFibGUgdW5kZXIgQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIGF2YWlsYWJsZSBhdCBodHRwczovL3ZhYWRpbi5jb20vbGljZW5zZS9cbiovXG4vKipcbiAqIEBwb2x5bWVyTWl4aW5cbiAqL1xuZXhwb3J0IGNvbnN0IFN0eWxpbmdNaXhpbiA9IHN1cGVyQ2xhc3MgPT4gY2xhc3MgU3R5bGluZ01peGluIGV4dGVuZHMgc3VwZXJDbGFzcyB7XG5cbiAgc3RhdGljIGdldCBwcm9wZXJ0aWVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvKipcbiAgICAgICAqIEEgZnVuY3Rpb24gdGhhdCBhbGxvd3MgZ2VuZXJhdGluZyBDU1MgY2xhc3MgbmFtZXMgZm9yIGdyaWQgY2VsbHNcbiAgICAgICAqIGJhc2VkIG9uIHRoZWlyIHJvdyBhbmQgY29sdW1uLiBUaGUgcmV0dXJuIHZhbHVlIHNob3VsZCBiZSB0aGUgZ2VuZXJhdGVkXG4gICAgICAgKiBjbGFzcyBuYW1lIGFzIGEgc3RyaW5nLCBvciBtdWx0aXBsZSBjbGFzcyBuYW1lcyBzZXBhcmF0ZWQgYnkgd2hpdGVzcGFjZVxuICAgICAgICogY2hhcmFjdGVycy5cbiAgICAgICAqXG4gICAgICAgKiBSZWNlaXZlcyB0d28gYXJndW1lbnRzOlxuICAgICAgICogLSBgY29sdW1uYCBUaGUgYDx2YWFkaW4tZ3JpZC1jb2x1bW4+YCBlbGVtZW50IChgdW5kZWZpbmVkYCBmb3IgZGV0YWlscy1jZWxsKS5cbiAgICAgICAqIC0gYHJvd0RhdGFgIFRoZSBvYmplY3Qgd2l0aCB0aGUgcHJvcGVydGllcyByZWxhdGVkIHdpdGhcbiAgICAgICAqICAgdGhlIHJlbmRlcmVkIGl0ZW0sIGNvbnRhaW5zOlxuICAgICAgICogICAtIGByb3dEYXRhLmluZGV4YCBUaGUgaW5kZXggb2YgdGhlIGl0ZW0uXG4gICAgICAgKiAgIC0gYHJvd0RhdGEuaXRlbWAgVGhlIGl0ZW0uXG4gICAgICAgKiAgIC0gYHJvd0RhdGEuZXhwYW5kZWRgIFN1YmxldmVsIHRvZ2dsZSBzdGF0ZS5cbiAgICAgICAqICAgLSBgcm93RGF0YS5sZXZlbGAgTGV2ZWwgb2YgdGhlIHRyZWUgcmVwcmVzZW50ZWQgd2l0aCBhIGhvcml6b250YWwgb2Zmc2V0IG9mIHRoZSB0b2dnbGUgYnV0dG9uLlxuICAgICAgICogICAtIGByb3dEYXRhLnNlbGVjdGVkYCBTZWxlY3RlZCBzdGF0ZS5cbiAgICAgICAqL1xuICAgICAgY2VsbENsYXNzTmFtZUdlbmVyYXRvcjogRnVuY3Rpb25cbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGdldCBvYnNlcnZlcnMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICdfX2NlbGxDbGFzc05hbWVHZW5lcmF0b3JDaGFuZ2VkKGNlbGxDbGFzc05hbWVHZW5lcmF0b3IpJ1xuICAgIF07XG4gIH1cblxuICBfX2NlbGxDbGFzc05hbWVHZW5lcmF0b3JDaGFuZ2VkKGNlbGxDbGFzc0dlbmVyYXRvcikge1xuICAgIHRoaXMuZ2VuZXJhdGVDZWxsQ2xhc3NOYW1lcygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJ1bnMgdGhlIGBjZWxsQ2xhc3NOYW1lR2VuZXJhdG9yYCBmb3IgdGhlIHZpc2libGUgY2VsbHMuXG4gICAqIElmIHRoZSBnZW5lcmF0b3IgZGVwZW5kcyBvbiB2YXJ5aW5nIGNvbmRpdGlvbnMsIHlvdSBuZWVkIHRvXG4gICAqIGNhbGwgdGhpcyBmdW5jdGlvbiBtYW51YWxseSBpbiBvcmRlciB0byB1cGRhdGUgdGhlIHN0eWxlcyB3aGVuXG4gICAqIHRoZSBjb25kaXRpb25zIGNoYW5nZS5cbiAgICovXG4gIGdlbmVyYXRlQ2VsbENsYXNzTmFtZXMoKSB7XG4gICAgQXJyYXkuZnJvbSh0aGlzLiQuaXRlbXMuY2hpbGRyZW4pLmZpbHRlcihyb3cgPT4gIXJvdy5oaWRkZW4pLmZvckVhY2goXG4gICAgICByb3cgPT4gdGhpcy5fZ2VuZXJhdGVDZWxsQ2xhc3NOYW1lcyhyb3csIHRoaXMuX19nZXRSb3dNb2RlbChyb3cpKSk7XG4gIH1cblxuICBfZ2VuZXJhdGVDZWxsQ2xhc3NOYW1lcyhyb3csIHJvd0RhdGEpIHtcbiAgICBBcnJheS5mcm9tKHJvdy5jaGlsZHJlbikuZm9yRWFjaChjZWxsID0+IHtcbiAgICAgIGlmIChjZWxsLl9fZ2VuZXJhdGVkQ2xhc3Nlcykge1xuICAgICAgICBjZWxsLl9fZ2VuZXJhdGVkQ2xhc3Nlcy5mb3JFYWNoKGNsYXNzTmFtZSA9PiBjZWxsLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5jZWxsQ2xhc3NOYW1lR2VuZXJhdG9yKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuY2VsbENsYXNzTmFtZUdlbmVyYXRvcihjZWxsLl9jb2x1bW4sIHJvd0RhdGEpO1xuICAgICAgICBjZWxsLl9fZ2VuZXJhdGVkQ2xhc3NlcyA9IHJlc3VsdCAmJiByZXN1bHQuc3BsaXQoJyAnKS5maWx0ZXIoY2xhc3NOYW1lID0+IGNsYXNzTmFtZS5sZW5ndGggPiAwKTtcbiAgICAgICAgaWYgKGNlbGwuX19nZW5lcmF0ZWRDbGFzc2VzKSB7XG4gICAgICAgICAgY2VsbC5fX2dlbmVyYXRlZENsYXNzZXMuZm9yRWFjaChjbGFzc05hbWUgPT4gY2VsbC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTkgVmFhZGluIEx0ZC5cblRoaXMgcHJvZ3JhbSBpcyBhdmFpbGFibGUgdW5kZXIgQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIGF2YWlsYWJsZSBhdCBodHRwczovL3ZhYWRpbi5jb20vbGljZW5zZS9cbiovXG5jb25zdCBEcm9wTW9kZSA9IHtcbiAgQkVUV0VFTjogJ2JldHdlZW4nLFxuICBPTl9UT1A6ICdvbi10b3AnLFxuICBPTl9UT1BfT1JfQkVUV0VFTjogJ29uLXRvcC1vci1iZXR3ZWVuJyxcbiAgT05fR1JJRDogJ29uLWdyaWQnXG59O1xuXG5jb25zdCBEcm9wTG9jYXRpb24gPSB7XG4gIE9OX1RPUDogJ29uLXRvcCcsXG4gIEFCT1ZFOiAnYWJvdmUnLFxuICBCRUxPVzogJ2JlbG93JyxcbiAgRU1QVFk6ICdlbXB0eSdcbn07XG5cbi8qKlxuICogQHBvbHltZXJNaXhpblxuICovXG5leHBvcnQgY29uc3QgRHJhZ0FuZERyb3BNaXhpbiA9IHN1cGVyQ2xhc3MgPT4gY2xhc3MgRHJhZ0FuZERyb3BNaXhpbiBleHRlbmRzIHN1cGVyQ2xhc3Mge1xuXG4gIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLyoqXG4gICAgICAgKiBEZWZpbmVzIHRoZSBsb2NhdGlvbnMgd2l0aGluIHRoZSBHcmlkIHJvdyB3aGVyZSBhbiBlbGVtZW50IGNhbiBiZSBkcm9wcGVkLlxuICAgICAgICpcbiAgICAgICAqIFBvc3NpYmxlIHZhbHVlcyBhcmU6XG4gICAgICAgKiAtIGBiZXR3ZWVuYDogVGhlIGRyb3AgZXZlbnQgY2FuIGhhcHBlbiBiZXR3ZWVuIEdyaWQgcm93cy5cbiAgICAgICAqIC0gYG9uLXRvcGA6IFRoZSBkcm9wIGV2ZW50IGNhbiBoYXBwZW4gb24gdG9wIG9mIEdyaWQgcm93cy5cbiAgICAgICAqIC0gYG9uLXRvcC1vci1iZXR3ZWVuYDogVGhlIGRyb3AgZXZlbnQgY2FuIGhhcHBlbiBlaXRoZXIgb24gdG9wIG9mIG9yIGJldHdlZW4gR3JpZCByb3dzLlxuICAgICAgICogLSBgb24tZ3JpZGA6IFRoZSBkcm9wIGV2ZW50IHdpbGwgbm90IGhhcHBlbiBvbiBhbnkgc3BlY2lmaWMgcm93LCBpdCB3aWxsIHNob3cgdGhlIGRyb3AgdGFyZ2V0IG91dGxpbmUgYXJvdW5kIHRoZSB3aG9sZSBncmlkLlxuICAgICAgICovXG4gICAgICBkcm9wTW9kZTogU3RyaW5nLFxuXG4gICAgICAvKipcbiAgICAgICAqIE1hcmtzIHRoZSBncmlkJ3Mgcm93cyB0byBiZSBhdmFpbGFibGUgZm9yIGRyYWdnaW5nLlxuICAgICAgICovXG4gICAgICByb3dzRHJhZ2dhYmxlOiBCb29sZWFuLFxuXG4gICAgICAvKipcbiAgICAgICAqIEEgZnVuY3Rpb24gdGhhdCBmaWx0ZXJzIGRyYWdnaW5nIG9mIHNwZWNpZmljIGdyaWQgcm93cy4gVGhlIHJldHVybiB2YWx1ZSBzaG91bGQgYmUgZmFsc2VcbiAgICAgICAqIGlmIGRyYWdnaW5nIG9mIHRoZSByb3cgc2hvdWxkIGJlIGRpc2FibGVkLlxuICAgICAgICpcbiAgICAgICAqIFJlY2VpdmVzIG9uZSBhcmd1bWVudDpcbiAgICAgICAqIC0gYHJvd0RhdGFgIFRoZSBvYmplY3Qgd2l0aCB0aGUgcHJvcGVydGllcyByZWxhdGVkIHdpdGhcbiAgICAgICAqICAgdGhlIHJlbmRlcmVkIGl0ZW0sIGNvbnRhaW5zOlxuICAgICAgICogICAtIGByb3dEYXRhLmluZGV4YCBUaGUgaW5kZXggb2YgdGhlIGl0ZW0uXG4gICAgICAgKiAgIC0gYHJvd0RhdGEuaXRlbWAgVGhlIGl0ZW0uXG4gICAgICAgKiAgIC0gYHJvd0RhdGEuZXhwYW5kZWRgIFN1YmxldmVsIHRvZ2dsZSBzdGF0ZS5cbiAgICAgICAqICAgLSBgcm93RGF0YS5sZXZlbGAgTGV2ZWwgb2YgdGhlIHRyZWUgcmVwcmVzZW50ZWQgd2l0aCBhIGhvcml6b250YWwgb2Zmc2V0IG9mIHRoZSB0b2dnbGUgYnV0dG9uLlxuICAgICAgICogICAtIGByb3dEYXRhLnNlbGVjdGVkYCBTZWxlY3RlZCBzdGF0ZS5cbiAgICAgICAqL1xuICAgICAgZHJhZ0ZpbHRlcjogRnVuY3Rpb24sXG5cbiAgICAgIC8qKlxuICAgICAgICogQSBmdW5jdGlvbiB0aGF0IGZpbHRlcnMgZHJvcHBpbmcgb24gc3BlY2lmaWMgZ3JpZCByb3dzLiBUaGUgcmV0dXJuIHZhbHVlIHNob3VsZCBiZSBmYWxzZVxuICAgICAgICogaWYgZHJvcHBpbmcgb24gdGhlIHJvdyBzaG91bGQgYmUgZGlzYWJsZWQuXG4gICAgICAgKlxuICAgICAgICogUmVjZWl2ZXMgb25lIGFyZ3VtZW50OlxuICAgICAgICogLSBgcm93RGF0YWAgVGhlIG9iamVjdCB3aXRoIHRoZSBwcm9wZXJ0aWVzIHJlbGF0ZWQgd2l0aFxuICAgICAgICogICB0aGUgcmVuZGVyZWQgaXRlbSwgY29udGFpbnM6XG4gICAgICAgKiAgIC0gYHJvd0RhdGEuaW5kZXhgIFRoZSBpbmRleCBvZiB0aGUgaXRlbS5cbiAgICAgICAqICAgLSBgcm93RGF0YS5pdGVtYCBUaGUgaXRlbS5cbiAgICAgICAqICAgLSBgcm93RGF0YS5leHBhbmRlZGAgU3VibGV2ZWwgdG9nZ2xlIHN0YXRlLlxuICAgICAgICogICAtIGByb3dEYXRhLmxldmVsYCBMZXZlbCBvZiB0aGUgdHJlZSByZXByZXNlbnRlZCB3aXRoIGEgaG9yaXpvbnRhbCBvZmZzZXQgb2YgdGhlIHRvZ2dsZSBidXR0b24uXG4gICAgICAgKiAgIC0gYHJvd0RhdGEuc2VsZWN0ZWRgIFNlbGVjdGVkIHN0YXRlLlxuICAgICAgICovXG4gICAgICBkcm9wRmlsdGVyOiBGdW5jdGlvbixcblxuICAgICAgX19kbmRBdXRvU2Nyb2xsVGhyZXNob2xkOiB7XG4gICAgICAgIHZhbHVlOiA1MFxuICAgICAgfVxuXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZXJzKCkge1xuICAgIHJldHVybiBbXG4gICAgICAnX2RyYWdEcm9wQWNjZXNzQ2hhbmdlZChyb3dzRHJhZ2dhYmxlLCBkcm9wTW9kZSwgZHJhZ0ZpbHRlciwgZHJvcEZpbHRlciknXG4gICAgXTtcbiAgfVxuXG4gIHJlYWR5KCkge1xuICAgIHN1cGVyLnJlYWR5KCk7XG4gICAgdGhpcy4kLnRhYmxlLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdzdGFydCcsIHRoaXMuX29uRHJhZ1N0YXJ0LmJpbmQodGhpcykpO1xuICAgIHRoaXMuJC50YWJsZS5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW5kJywgdGhpcy5fb25EcmFnRW5kLmJpbmQodGhpcykpO1xuICAgIHRoaXMuJC50YWJsZS5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIHRoaXMuX29uRHJhZ092ZXIuYmluZCh0aGlzKSk7XG4gICAgdGhpcy4kLnRhYmxlLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdsZWF2ZScsIHRoaXMuX29uRHJhZ0xlYXZlLmJpbmQodGhpcykpO1xuICAgIHRoaXMuJC50YWJsZS5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgdGhpcy5fb25Ecm9wLmJpbmQodGhpcykpO1xuICAgIHRoaXMuJC50YWJsZS5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW50ZXInLCBlID0+IHtcbiAgICAgIGlmICh0aGlzLmRyb3BNb2RlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICB9XG5cbiAgX29uRHJhZ1N0YXJ0KGUpIHtcbiAgICBpZiAodGhpcy5yb3dzRHJhZ2dhYmxlKSB7XG4gICAgICBsZXQgcm93ID0gZS50YXJnZXQ7XG4gICAgICBpZiAocm93LmxvY2FsTmFtZSA9PT0gJ3ZhYWRpbi1ncmlkLWNlbGwtY29udGVudCcpIHtcbiAgICAgICAgLy8gVGhlIGRyYWdnYWJsZSBub2RlIGlzIHRoZSBjZWxsIGNvbnRlbnQgZWxlbWVudCBvbiBicm93c2VycyB0aGF0IHN1cHBvcnQgbmF0aXZlIHNoYWRvd1xuICAgICAgICByb3cgPSByb3cuYXNzaWduZWRTbG90LnBhcmVudE5vZGUucGFyZW50Tm9kZTtcbiAgICAgIH1cbiAgICAgIGlmIChyb3cucGFyZW50Tm9kZSAhPT0gdGhpcy4kLml0ZW1zKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHRoaXMuX3RvZ2dsZUF0dHJpYnV0ZSgnZHJhZ2dpbmctcm93cycsIHRydWUsIHRoaXMpO1xuXG4gICAgICBpZiAodGhpcy5fc2FmYXJpKSB7XG4gICAgICAgIC8vIFNhZmFyaSBkb2Vzbid0IGdldCBwcm9wZXIgZHJhZyBpbWFnZXMgZnJvbSB0cmFuc2Zvcm1lZFxuICAgICAgICAvLyBlbGVtZW50cyBzbyB3ZSBuZWVkIHRvIHN3aXRjaCB0byB0b3AgdGVtcG9yYXJpbHlcbiAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gcm93LnN0eWxlLnRyYW5zZm9ybTtcbiAgICAgICAgcm93LnN0eWxlLnRvcCA9IC90cmFuc2xhdGVZXFwoKC4qKVxcKS8uZXhlYyh0cmFuc2Zvcm0pWzFdO1xuICAgICAgICByb3cuc3R5bGUudHJhbnNmb3JtID0gJ25vbmUnO1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIHJvdy5zdHlsZS50b3AgPSAnJztcbiAgICAgICAgICByb3cuc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgcm93UmVjdCA9IHJvdy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGlmICghd2luZG93LlNoYWR5RE9NKSB7XG4gICAgICAgIGlmICh0aGlzLl9pb3MpIHtcbiAgICAgICAgICBlLmRhdGFUcmFuc2Zlci5zZXREcmFnSW1hZ2Uocm93KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlLmRhdGFUcmFuc2Zlci5zZXREcmFnSW1hZ2Uocm93LCBlLmNsaWVudFggLSByb3dSZWN0LmxlZnQsIGUuY2xpZW50WSAtIHJvd1JlY3QudG9wKTtcbiAgICAgICAgfVxuXG4gICAgICB9XG5cbiAgICAgIGxldCByb3dzID0gW3Jvd107XG4gICAgICBpZiAodGhpcy5faXNTZWxlY3RlZChyb3cuX2l0ZW0pKSB7XG4gICAgICAgIHJvd3MgPSB0aGlzLl9fZ2V0Vmlld3BvcnRSb3dzKClcbiAgICAgICAgICAuZmlsdGVyKHJvdyA9PiB0aGlzLl9pc1NlbGVjdGVkKHJvdy5faXRlbSkpXG4gICAgICAgICAgLmZpbHRlcihyb3cgPT4gIXRoaXMuZHJhZ0ZpbHRlciB8fCB0aGlzLmRyYWdGaWx0ZXIodGhpcy5fX2dldFJvd01vZGVsKHJvdykpKTtcbiAgICAgIH1cblxuICAgICAgLy8gU2V0IHRoZSBkZWZhdWx0IHRyYW5zZmVyIGRhdGFcbiAgICAgIGUuZGF0YVRyYW5zZmVyLnNldERhdGEoJ3RleHQnLCB0aGlzLl9fZm9ybWF0RGVmYXVsdFRyYW5zZmVyRGF0YShyb3dzKSk7XG5cbiAgICAgIHJvdy5zZXRBdHRyaWJ1dGUoJ2RyYWdzdGFydCcsIHJvd3MubGVuZ3RoID4gMSA/IHJvd3MubGVuZ3RoIDogJycpO1xuICAgICAgdGhpcy51cGRhdGVTdHlsZXMoe1xuICAgICAgICAnLS1fZ3JpZC1kcmFnLXN0YXJ0LXgnOiBgJHtlLmNsaWVudFggLSByb3dSZWN0LmxlZnQgKyAyMH1weGAsXG4gICAgICAgICctLV9ncmlkLWRyYWctc3RhcnQteSc6IGAke2UuY2xpZW50WSAtIHJvd1JlY3QudG9wICsgMTB9cHhgXG4gICAgICB9KTtcblxuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgcm93LnJlbW92ZUF0dHJpYnV0ZSgnZHJhZ3N0YXJ0Jyk7XG4gICAgICAgIHRoaXMudXBkYXRlU3R5bGVzKHsnLS1fZ3JpZC1kcmFnLXN0YXJ0LXgnOiAnJywgJy0tX2dyaWQtZHJhZy1zdGFydC15JzogJyd9KTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBldmVudCA9IG5ldyBDdXN0b21FdmVudCgnZ3JpZC1kcmFnc3RhcnQnLCB7XG4gICAgICAgIGRldGFpbDoge1xuICAgICAgICAgIGRyYWdnZWRJdGVtczogcm93cy5tYXAocm93ID0+IHJvdy5faXRlbSksXG4gICAgICAgICAgc2V0RHJhZ0RhdGE6ICh0eXBlLCBkYXRhKSA9PiBlLmRhdGFUcmFuc2Zlci5zZXREYXRhKHR5cGUsIGRhdGEpLFxuICAgICAgICAgIHNldERyYWdnZWRJdGVtc0NvdW50OiBjb3VudCA9PiByb3cuc2V0QXR0cmlidXRlKCdkcmFnc3RhcnQnLCBjb3VudClcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBldmVudC5vcmlnaW5hbEV2ZW50ID0gZTtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgfVxuICB9XG5cbiAgX29uRHJhZ0VuZChlKSB7XG4gICAgdGhpcy5fdG9nZ2xlQXR0cmlidXRlKCdkcmFnZ2luZy1yb3dzJywgZmFsc2UsIHRoaXMpO1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgY29uc3QgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ2dyaWQtZHJhZ2VuZCcpO1xuICAgIGV2ZW50Lm9yaWdpbmFsRXZlbnQgPSBlO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gIH1cblxuICBfb25EcmFnTGVhdmUoZSkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdGhpcy5fY2xlYXJEcmFnU3R5bGVzKCk7XG4gIH1cblxuICBfb25EcmFnT3ZlcihlKSB7XG5cbiAgICBpZiAodGhpcy5kcm9wTW9kZSkge1xuICAgICAgdGhpcy5fZHJvcExvY2F0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fZHJhZ092ZXJJdGVtID0gdW5kZWZpbmVkO1xuXG4gICAgICBpZiAodGhpcy5fX2RuZEF1dG9TY3JvbGwoZS5jbGllbnRZKSkge1xuICAgICAgICB0aGlzLl9jbGVhckRyYWdTdHlsZXMoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBsZXQgcm93ID0gZS5jb21wb3NlZFBhdGgoKS5maWx0ZXIobm9kZSA9PiBub2RlLmxvY2FsTmFtZSA9PT0gJ3RyJylbMF07XG5cbiAgICAgIGlmICghdGhpcy5fZWZmZWN0aXZlU2l6ZSB8fCB0aGlzLmRyb3BNb2RlID09PSBEcm9wTW9kZS5PTl9HUklEKSB7XG4gICAgICAgIC8vIFRoZSBncmlkIGlzIGVtcHR5IG9yIFwib24tZ3JpZFwiIGRyb3AgbW9kZSB3YXMgdXNlZCwgYWx3YXlzIGRlZmF1bHQgdG8gXCJlbXB0eVwiXG4gICAgICAgIHRoaXMuX2Ryb3BMb2NhdGlvbiA9IERyb3BMb2NhdGlvbi5FTVBUWTtcbiAgICAgIH0gZWxzZSBpZiAoIXJvdyB8fCByb3cucGFyZW50Tm9kZSAhPT0gdGhpcy4kLml0ZW1zKSB7XG4gICAgICAgIC8vIFRoZSBkcmFnb3ZlciBkaWRuJ3Qgb2NjdXIgb24gYSBib2R5IHJvdyBidXQgdGhlIGdyaWQgaGFzIGl0ZW1zXG4gICAgICAgIGlmIChyb3cpIHtcbiAgICAgICAgICAvLyBUaGUgZHJhZ292ZXIgb2NjdXJyZWQgb3ZlciBhIGhlYWRlci9mb290ZXIgcm93XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZHJvcE1vZGUgPT09IERyb3BNb2RlLkJFVFdFRU4gfHwgdGhpcy5kcm9wTW9kZSA9PT0gRHJvcE1vZGUuT05fVE9QX09SX0JFVFdFRU4pIHtcbiAgICAgICAgICAvLyBUaGUgZHJvcCBtb2RlIGFsbG93cyBzZXR0aW5nIHRoZSBsYXN0IHJvdyBhcyB0aGUgZHJhZyBvdmVyIGl0ZW1cbiAgICAgICAgICByb3cgPSBBcnJheS5mcm9tKHRoaXMuJC5pdGVtcy5jaGlsZHJlbikuZmlsdGVyKHJvdyA9PiAhcm93LmhpZGRlbikucG9wKCk7XG4gICAgICAgICAgdGhpcy5fZHJvcExvY2F0aW9uID0gRHJvcExvY2F0aW9uLkJFTE9XO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIERyb3AgbW9kZSBvbi10b3AgdXNlZCBidXQgdGhlIGRyYWdvdmVyIGRpZG4ndCBvY2N1ciBvdmVyIG9uZSBvZiB0aGUgZXhpc3Rpbmcgcm93c1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVGhlIGRyYWdvdmVyIG9jY3VycmVkIG9uIGEgYm9keSByb3csIGRldGVybWluZSB0aGUgZHJvcCBsb2NhdGlvbiBmcm9tIGNvb3JkaW5hdGVzXG4gICAgICAgIGNvbnN0IHJvd1JlY3QgPSByb3cuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgdGhpcy5fZHJvcExvY2F0aW9uID0gRHJvcExvY2F0aW9uLk9OX1RPUDtcblxuICAgICAgICBpZiAodGhpcy5kcm9wTW9kZSA9PT0gRHJvcE1vZGUuQkVUV0VFTikge1xuICAgICAgICAgIGNvbnN0IGRyb3BBYm92ZSA9IGUuY2xpZW50WSAtIHJvd1JlY3QudG9wIDwgcm93UmVjdC5ib3R0b20gLSBlLmNsaWVudFk7XG4gICAgICAgICAgdGhpcy5fZHJvcExvY2F0aW9uID0gZHJvcEFib3ZlID8gRHJvcExvY2F0aW9uLkFCT1ZFIDogRHJvcExvY2F0aW9uLkJFTE9XO1xuXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5kcm9wTW9kZSA9PT0gRHJvcE1vZGUuT05fVE9QX09SX0JFVFdFRU4pIHtcbiAgICAgICAgICBpZiAoZS5jbGllbnRZIC0gcm93UmVjdC50b3AgPCByb3dSZWN0LmhlaWdodCAvIDMpIHtcbiAgICAgICAgICAgIHRoaXMuX2Ryb3BMb2NhdGlvbiA9IERyb3BMb2NhdGlvbi5BQk9WRTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGUuY2xpZW50WSAtIHJvd1JlY3QudG9wID4gKHJvd1JlY3QuaGVpZ2h0IC8gMykgKiAyKSB7XG4gICAgICAgICAgICB0aGlzLl9kcm9wTG9jYXRpb24gPSBEcm9wTG9jYXRpb24uQkVMT1c7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChyb3cgJiYgcm93Lmhhc0F0dHJpYnV0ZSgnZHJvcC1kaXNhYmxlZCcpKSB7XG4gICAgICAgIHRoaXMuX2Ryb3BMb2NhdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBpZiAodGhpcy5fZHJvcExvY2F0aW9uID09PSBEcm9wTG9jYXRpb24uRU1QVFkpIHtcbiAgICAgICAgdGhpcy5fdG9nZ2xlQXR0cmlidXRlKCdkcmFnb3ZlcicsIHRydWUsIHRoaXMpO1xuICAgICAgfSBlbHNlIGlmIChyb3cpIHtcbiAgICAgICAgdGhpcy5fZHJhZ092ZXJJdGVtID0gcm93Ll9pdGVtO1xuICAgICAgICBpZiAocm93LmdldEF0dHJpYnV0ZSgnZHJhZ292ZXInKSAhPT0gdGhpcy5fZHJvcExvY2F0aW9uKSB7XG4gICAgICAgICAgcm93LnNldEF0dHJpYnV0ZSgnZHJhZ292ZXInLCB0aGlzLl9kcm9wTG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9jbGVhckRyYWdTdHlsZXMoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfX2RuZEF1dG9TY3JvbGwoY2xpZW50WSkge1xuICAgIGlmICh0aGlzLl9fZG5kQXV0b1Njcm9sbGluZykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgY29uc3QgaGVhZGVyQm90dG9tID0gdGhpcy4kLmhlYWRlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b207XG4gICAgY29uc3QgZm9vdGVyVG9wID0gdGhpcy4kLmZvb3Rlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gICAgY29uc3QgdG9wRGlmZiA9IGhlYWRlckJvdHRvbSAtIGNsaWVudFkgKyB0aGlzLl9fZG5kQXV0b1Njcm9sbFRocmVzaG9sZDtcbiAgICBjb25zdCBib3R0b21EaWZmID0gY2xpZW50WSAtIGZvb3RlclRvcCArIHRoaXMuX19kbmRBdXRvU2Nyb2xsVGhyZXNob2xkO1xuICAgIGxldCBzY3JvbGxUb3BEZWx0YSA9IDA7XG5cbiAgICBpZiAoYm90dG9tRGlmZiA+IDApIHtcbiAgICAgIHNjcm9sbFRvcERlbHRhID0gYm90dG9tRGlmZiAqIDI7XG4gICAgfSBlbHNlIGlmICh0b3BEaWZmID4gMCkge1xuICAgICAgc2Nyb2xsVG9wRGVsdGEgPSAtdG9wRGlmZiAqIDI7XG4gICAgfVxuXG4gICAgaWYgKHNjcm9sbFRvcERlbHRhKSB7XG4gICAgICBjb25zdCBzY3JvbGxUb3AgPSB0aGlzLiQudGFibGUuc2Nyb2xsVG9wO1xuICAgICAgdGhpcy4kLnRhYmxlLnNjcm9sbFRvcCArPSBzY3JvbGxUb3BEZWx0YTtcbiAgICAgIGNvbnN0IHNjcm9sbFRvcENoYW5nZWQgPSBzY3JvbGxUb3AgIT09IHRoaXMuJC50YWJsZS5zY3JvbGxUb3A7XG4gICAgICBpZiAoc2Nyb2xsVG9wQ2hhbmdlZCkge1xuICAgICAgICB0aGlzLl9fZG5kQXV0b1Njcm9sbGluZyA9IHRydWU7XG4gICAgICAgIC8vIERpc2FsbG93IG1vcmUgYXV0by1zY3JvbGxzIHdpdGhpbiAyMG1zXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5fX2RuZEF1dG9TY3JvbGxpbmcgPSBmYWxzZSwgMjApO1xuICAgICAgICB0aGlzLl9zY3JvbGxIYW5kbGVyKCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9fZ2V0Vmlld3BvcnRSb3dzKCkge1xuICAgIGNvbnN0IGhlYWRlckJvdHRvbSA9IHRoaXMuJC5oZWFkZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tO1xuICAgIGNvbnN0IGZvb3RlclRvcCA9IHRoaXMuJC5mb290ZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuJC5pdGVtcy5jaGlsZHJlbilcbiAgICAgIC5maWx0ZXIocm93ID0+IHtcbiAgICAgICAgY29uc3Qgcm93UmVjdCA9IHJvdy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgcmV0dXJuIHJvd1JlY3QuYm90dG9tID4gaGVhZGVyQm90dG9tICYmIHJvd1JlY3QudG9wIDwgZm9vdGVyVG9wO1xuICAgICAgfSk7XG4gIH1cblxuICBfY2xlYXJEcmFnU3R5bGVzKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKCdkcmFnb3ZlcicpO1xuICAgIEFycmF5LmZyb20odGhpcy4kLml0ZW1zLmNoaWxkcmVuKS5mb3JFYWNoKHJvdyA9PiByb3cucmVtb3ZlQXR0cmlidXRlKCdkcmFnb3ZlcicpKTtcbiAgfVxuXG4gIF9vbkRyb3AoZSkge1xuICAgIGlmICh0aGlzLmRyb3BNb2RlKSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBjb25zdCBkcmFnRGF0YSA9IGUuZGF0YVRyYW5zZmVyLnR5cGVzICYmIEFycmF5LmZyb20oZS5kYXRhVHJhbnNmZXIudHlwZXMpLm1hcCh0eXBlID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIGRhdGE6IGUuZGF0YVRyYW5zZmVyLmdldERhdGEodHlwZSlcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLl9jbGVhckRyYWdTdHlsZXMoKTtcblxuICAgICAgY29uc3QgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ2dyaWQtZHJvcCcsIHtcbiAgICAgICAgYnViYmxlczogZS5idWJibGVzLFxuICAgICAgICBjYW5jZWxhYmxlOiBlLmNhbmNlbGFibGUsXG4gICAgICAgIGRldGFpbDoge1xuICAgICAgICAgIGRyb3BUYXJnZXRJdGVtOiB0aGlzLl9kcmFnT3Zlckl0ZW0sXG4gICAgICAgICAgZHJvcExvY2F0aW9uOiB0aGlzLl9kcm9wTG9jYXRpb24sXG4gICAgICAgICAgZHJhZ0RhdGFcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBldmVudC5vcmlnaW5hbEV2ZW50ID0gZTtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgfVxuICB9XG5cbiAgX19mb3JtYXREZWZhdWx0VHJhbnNmZXJEYXRhKHJvd3MpIHtcbiAgICByZXR1cm4gcm93c1xuICAgICAgLm1hcChyb3cgPT4ge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShyb3cuY2hpbGRyZW4pXG4gICAgICAgICAgLmZpbHRlcihjZWxsID0+ICFjZWxsLmhpZGRlbiAmJiBjZWxsLmdldEF0dHJpYnV0ZSgncGFydCcpLmluZGV4T2YoJ2RldGFpbHMtY2VsbCcpID09PSAtMSlcbiAgICAgICAgICAuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGEuX2NvbHVtbi5fb3JkZXIgPiBiLl9jb2x1bW4uX29yZGVyID8gMSA6IC0xO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLm1hcChjZWxsID0+IGNlbGwuX2NvbnRlbnQudGV4dENvbnRlbnQudHJpbSgpKVxuICAgICAgICAgIC5maWx0ZXIoY29udGVudCA9PiBjb250ZW50KVxuICAgICAgICAgIC5qb2luKCdcXHQnKTtcbiAgICAgIH0pXG4gICAgICAuam9pbignXFxuJyk7XG4gIH1cblxuICBfZHJhZ0Ryb3BBY2Nlc3NDaGFuZ2VkKHJvd3NEcmFnZ2FibGUsIGRyb3BNb2RlLCBkcmFnRmlsdGVyLCBkcm9wRmlsdGVyKSB7XG4gICAgdGhpcy5maWx0ZXJEcmFnQW5kRHJvcCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJ1bnMgdGhlIGBkcmFnRmlsdGVyYCBhbmQgYGRyb3BGaWx0ZXJgIGhvb2tzIGZvciB0aGUgdmlzaWJsZSBjZWxscy5cbiAgICogSWYgdGhlIGZpbHRlciBkZXBlbmRzIG9uIHZhcnlpbmcgY29uZGl0aW9ucywgeW91IG1heSBuZWVkIHRvXG4gICAqIGNhbGwgdGhpcyBmdW5jdGlvbiBtYW51YWxseSBpbiBvcmRlciB0byB1cGRhdGUgdGhlIGRyYWdnYWJpbGl0eSB3aGVuXG4gICAqIHRoZSBjb25kaXRpb25zIGNoYW5nZS5cbiAgICovXG4gIGZpbHRlckRyYWdBbmREcm9wKCkge1xuICAgIEFycmF5LmZyb20odGhpcy4kLml0ZW1zLmNoaWxkcmVuKS5maWx0ZXIocm93ID0+ICFyb3cuaGlkZGVuKS5mb3JFYWNoKFxuICAgICAgcm93ID0+IHtcbiAgICAgICAgdGhpcy5fZmlsdGVyRHJhZ0FuZERyb3Aocm93LCB0aGlzLl9fZ2V0Um93TW9kZWwocm93KSk7XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIF9maWx0ZXJEcmFnQW5kRHJvcChyb3csIHJvd0RhdGEpIHtcbiAgICBjb25zdCBkcmFnRGlzYWJsZWQgPSAhdGhpcy5yb3dzRHJhZ2dhYmxlIHx8ICh0aGlzLmRyYWdGaWx0ZXIgJiYgIXRoaXMuZHJhZ0ZpbHRlcihyb3dEYXRhKSk7XG4gICAgY29uc3QgZHJvcERpc2FibGVkID0gIXRoaXMuZHJvcE1vZGUgfHwgKHRoaXMuZHJvcEZpbHRlciAmJiAhdGhpcy5kcm9wRmlsdGVyKHJvd0RhdGEpKTtcblxuICAgIGNvbnN0IGRyYWdnYWJsZUVsZW1lbnRzID0gd2luZG93LlNoYWR5RE9NXG4gICAgICA/IFtyb3ddXG4gICAgICA6IEFycmF5LmZyb20ocm93LmNoaWxkcmVuKS5tYXAoY2VsbCA9PiBjZWxsLl9jb250ZW50KTtcblxuICAgIGRyYWdnYWJsZUVsZW1lbnRzLmZvckVhY2goZSA9PiB7XG4gICAgICBpZiAoZHJhZ0Rpc2FibGVkKSB7XG4gICAgICAgIGUucmVtb3ZlQXR0cmlidXRlKCdkcmFnZ2FibGUnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGUuc2V0QXR0cmlidXRlKCdkcmFnZ2FibGUnLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMuX3RvZ2dsZUF0dHJpYnV0ZSgnZHJhZy1kaXNhYmxlZCcsIGRyYWdEaXNhYmxlZCwgcm93KTtcbiAgICB0aGlzLl90b2dnbGVBdHRyaWJ1dGUoJ2Ryb3AtZGlzYWJsZWQnLCBkcm9wRGlzYWJsZWQsIHJvdyk7XG4gIH1cblxuICAvKipcbiAgICogRmlyZWQgd2hlbiBzdGFydGluZyB0byBkcmFnIGdyaWQgcm93cy5cbiAgICpcbiAgICogQGV2ZW50IGdyaWQtZHJhZ3N0YXJ0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcmlnaW5hbEV2ZW50IFRoZSBuYXRpdmUgZHJhZ3N0YXJ0IGV2ZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkZXRhaWxcbiAgICogQHBhcmFtIHtPYmplY3R9IGRldGFpbC5kcmFnZ2VkSXRlbXMgdGhlIGl0ZW1zIGluIHRoZSB2aXNpYmxlIHZpZXdwb3J0IHRoYXQgYXJlIGRyYWdnZWRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZGV0YWlsLnNldERyYWdnZWRJdGVtc0NvdW50IE92ZXJyaWRlcyB0aGUgZGVmYXVsdCBudW1iZXIgc2hvd24gaW4gdGhlIGRyYWcgaW1hZ2Ugb24gbXVsdGkgcm93IGRyYWcuXG4gICAqIFBhcmFtZXRlciBpcyBvZiB0eXBlIG51bWJlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZGV0YWlsLnNldERyYWdEYXRhIFNldHMgZGF0YVRyYW5zZmVyIGRhdGEgZm9yIHRoZSBkcmFnIG9wZXJhdGlvbi5cbiAgICogTm90ZSB0aGF0IFwidGV4dFwiIGlzIHRoZSBvbmx5IGRhdGEgdHlwZSBzdXBwb3J0ZWQgYnkgYWxsIHRoZSBicm93c2VycyB0aGUgZ3JpZCBjdXJyZW50bHkgc3VwcG9ydHMgKGluY2x1ZGluZyBJRTExKS5cbiAgICogVGhlIGZ1bmN0aW9uIHRha2VzIHR3byBwYXJhbWV0ZXJzOlxuICAgKiAtIHR5cGU6c3RyaW5nIFRoZSB0eXBlIG9mIHRoZSBkYXRhXG4gICAqIC0gZGF0YTpzdHJpbmcgVGhlIGRhdGFcbiAgICovXG5cbiAgLyoqXG4gICAqIEZpcmVkIHdoZW4gdGhlIGRyYWdnaW5nIG9mIHRoZSByb3dzIGVuZHMuXG4gICAqXG4gICAqIEBldmVudCBncmlkLWRyYWdlbmRcbiAgICogQHBhcmFtIHtPYmplY3R9IG9yaWdpbmFsRXZlbnQgVGhlIG5hdGl2ZSBkcmFnZW5kIGV2ZW50XG4gICAqL1xuXG4gIC8qKlxuICAgKiBGaXJlZCB3aGVuIGEgZHJvcCBvY2N1cnMgb24gdG9wIG9mIHRoZSBncmlkLlxuICAgKlxuICAgKiBAZXZlbnQgZ3JpZC1kcm9wXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcmlnaW5hbEV2ZW50IFRoZSBuYXRpdmUgZHJvcCBldmVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gZGV0YWlsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkZXRhaWwuZHJvcFRhcmdldEl0ZW0gVGhlIGl0ZW0gb2YgdGhlIGdyaWQgcm93IG9uIHdoaWNoIHRoZSBkcm9wIG9jY3VycmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGV0YWlsLmRyb3BMb2NhdGlvbiBUaGUgcG9zaXRpb24gYXQgd2hpY2ggdGhlIGRyb3AgZXZlbnQgdG9vayBwbGFjZSByZWxhdGl2ZSB0byBhIHJvdy5cbiAgICogRGVwZW5kaW5nIG9uIHRoZSBkcm9wTW9kZSB2YWx1ZSwgdGhlIGRyb3AgbG9jYXRpb24gY2FuIGJlIG9uZSBvZiB0aGUgZm9sbG93aW5nXG4gICAqIC0gYG9uLXRvcGA6IHdoZW4gdGhlIGRyb3Agb2NjdXJyZWQgb24gdG9wIG9mIHRoZSByb3dcbiAgICogLSBgYWJvdmVgOiB3aGVuIHRoZSBkcm9wIG9jY3VycmVkIGFib3ZlIHRoZSByb3dcbiAgICogLSBgYmVsb3dgOiB3aGVuIHRoZSBkcm9wIG9jY3VycmVkIGJlbG93IHRoZSByb3dcbiAgICogLSBgZW1wdHlgOiB3aGVuIHRoZSBkcm9wIG9jY3VycmVkIG92ZXIgdGhlIGdyaWQsIG5vdCByZWxhdGl2ZSB0byBhbnkgc3BlY2lmaWMgcm93XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkZXRhaWwuZHJhZ0RhdGEgQW4gYXJyYXkgb2YgaXRlbXMgd2l0aCB0aGUgcGF5bG9hZCBhcyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBhcyB0aGVcbiAgICogYGRhdGFgIHByb3BlcnR5IGFuZCB0aGUgdHlwZSBvZiB0aGUgZGF0YSBhcyBgdHlwZWAgcHJvcGVydHkuXG4gICAqL1xufTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBWYWFkaW4gTHRkLlxuVGhpcyBwcm9ncmFtIGlzIGF2YWlsYWJsZSB1bmRlciBBcGFjaGUgTGljZW5zZSBWZXJzaW9uIDIuMCwgYXZhaWxhYmxlIGF0IGh0dHBzOi8vdmFhZGluLmNvbS9saWNlbnNlL1xuKi9cbi8qKlxuICogQHBvbHltZXJNaXhpblxuICovXG5leHBvcnQgY29uc3QgS2V5Ym9hcmROYXZpZ2F0aW9uTWl4aW4gPSBzdXBlckNsYXNzID0+IGNsYXNzIEtleWJvYXJkTmF2aWdhdGlvbk1peGluIGV4dGVuZHMgc3VwZXJDbGFzcyB7XG4gIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgX2hlYWRlckZvY3VzYWJsZToge1xuICAgICAgICB0eXBlOiBPYmplY3QsXG4gICAgICAgIG9ic2VydmVyOiAnX2ZvY3VzYWJsZUNoYW5nZWQnXG4gICAgICB9LFxuICAgICAgX2l0ZW1zRm9jdXNhYmxlOiB7XG4gICAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgICAgb2JzZXJ2ZXI6ICdfZm9jdXNhYmxlQ2hhbmdlZCdcbiAgICAgIH0sXG4gICAgICBfZm9vdGVyRm9jdXNhYmxlOiB7XG4gICAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgICAgb2JzZXJ2ZXI6ICdfZm9jdXNhYmxlQ2hhbmdlZCdcbiAgICAgIH0sXG4gICAgICBfbmF2aWdhdGluZ0lzSGlkZGVuOiBCb29sZWFuLFxuICAgICAgX2ZvY3VzZWRJdGVtSW5kZXg6IHtcbiAgICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgICB2YWx1ZTogMFxuICAgICAgfSxcbiAgICAgIF9mb2N1c2VkQ29sdW1uT3JkZXI6IE51bWJlclxuICAgIH07XG4gIH1cblxuICByZWFkeSgpIHtcbiAgICBzdXBlci5yZWFkeSgpO1xuXG4gICAgaWYgKHRoaXMuX2lvcyB8fCB0aGlzLl9hbmRyb2lkKSB7XG4gICAgICAvLyBEaXNhYmxlIGtleWJvYXJkIG5hdmlnYXRpb24gb24gbW9iaWxlIGRldmljZXNcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9vbktleURvd24pO1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXNpbicsIHRoaXMuX29uRm9jdXNJbik7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdmb2N1c291dCcsIHRoaXMuX29uRm9jdXNPdXQpO1xuXG4gICAgLy8gV2hlbiBmb2N1cyBnb2VzIGZyb20gY2VsbCB0byBhbm90aGVyIGNlbGwsIGZvY3VzaW4vZm9jdXNvdXQgZXZlbnRzIGRvXG4gICAgLy8gbm90IGVzY2FwZSB0aGUgZ3JpZOKAmXMgc2hhZG93Um9vdCwgdGh1cyBsaXN0ZW5pbmcgaW5zaWRlIHRoZSBzaGFkb3dSb290LlxuICAgIHRoaXMuJC50YWJsZS5hZGRFdmVudExpc3RlbmVyKCdmb2N1c2luJywgdGhpcy5fb25DZWxsRm9jdXNJbi5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLiQudGFibGUuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXNvdXQnLCB0aGlzLl9vbkNlbGxGb2N1c091dC5iaW5kKHRoaXMpKTtcblxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKCkgPT4ge1xuICAgICAgdGhpcy5fdG9nZ2xlQXR0cmlidXRlKCduYXZpZ2F0aW5nJywgZmFsc2UsIHRoaXMpO1xuICAgICAgdGhpcy5faXNNb3VzZWRvd24gPSB0cnVlO1xuICAgIH0pO1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsICgpID0+IHRoaXMuX2lzTW91c2Vkb3duID0gZmFsc2UpO1xuICB9XG5cbiAgX2ZvY3VzYWJsZUNoYW5nZWQoZm9jdXNhYmxlLCBvbGRGb2N1c2FibGUpIHtcbiAgICBpZiAob2xkRm9jdXNhYmxlKSB7XG4gICAgICBvbGRGb2N1c2FibGUuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICctMScpO1xuICAgIH1cbiAgICBpZiAoZm9jdXNhYmxlKSB7XG4gICAgICBmb2N1c2FibGUuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICcwJyk7XG4gICAgfVxuICB9XG5cbiAgX29uS2V5RG93bihlKSB7XG4gICAgLy8gRW5zdXJlIHN0YW5kYXJkIGtleSB2YWx1ZSwgdW5pZmllZCBhY3Jvc3MgYnJvd3NlcnNcbiAgICBsZXQga2V5ID0gZS5rZXk7XG4gICAgaWYgKGtleSA9PT0gJ1VwJyB8fCBrZXkgPT09ICdEb3duJyB8fCBrZXkgPT09ICdMZWZ0JyB8fCBrZXkgPT09ICdSaWdodCcpIHtcbiAgICAgIC8vIE1TSUUgJiBFZGdlXG4gICAgICBrZXkgPSAnQXJyb3cnICsga2V5O1xuICAgIH1cbiAgICBpZiAoa2V5ID09PSAnRXNjJykge1xuICAgICAgLy8gTVNJRSAmIEVkZ2VcbiAgICAgIGtleSA9ICdFc2NhcGUnO1xuICAgIH1cbiAgICBpZiAoa2V5ID09PSAnU3BhY2ViYXInKSB7XG4gICAgICAvLyBNU0lFXG4gICAgICBrZXkgPSAnICc7XG4gICAgfVxuXG4gICAgbGV0IGtleUdyb3VwO1xuICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICBjYXNlICdBcnJvd1VwJzpcbiAgICAgIGNhc2UgJ0Fycm93RG93bic6XG4gICAgICBjYXNlICdBcnJvd0xlZnQnOlxuICAgICAgY2FzZSAnQXJyb3dSaWdodCc6XG4gICAgICBjYXNlICdQYWdlVXAnOlxuICAgICAgY2FzZSAnUGFnZURvd24nOlxuICAgICAgY2FzZSAnSG9tZSc6XG4gICAgICBjYXNlICdFbmQnOlxuICAgICAgICBrZXlHcm91cCA9ICdOYXZpZ2F0aW9uJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdFbnRlcic6XG4gICAgICBjYXNlICdFc2NhcGUnOlxuICAgICAgY2FzZSAnRjInOlxuICAgICAgICBrZXlHcm91cCA9ICdJbnRlcmFjdGlvbic7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnVGFiJzpcbiAgICAgICAga2V5R3JvdXAgPSAnVGFiJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICcgJzpcbiAgICAgICAga2V5R3JvdXAgPSAnU3BhY2UnO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLl9kZXRlY3RJbnRlcmFjdGluZyhlKTtcbiAgICBpZiAodGhpcy5oYXNBdHRyaWJ1dGUoJ2ludGVyYWN0aW5nJykgJiYga2V5R3JvdXAgIT09ICdJbnRlcmFjdGlvbicpIHtcbiAgICAgIC8vIFdoZW4gaW4gdGhlIGludGVyYWN0aW5nIG1vZGUsIG9ubHkgdGhlIOKAnEludGVyYWN0aW9u4oCdIGtleXMgYXJlIGhhbmRsZWQuXG4gICAgICBrZXlHcm91cCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAoa2V5R3JvdXApIHtcbiAgICAgIHRoaXNbYF9vbiR7a2V5R3JvdXB9S2V5RG93bmBdKGUsIGtleSk7XG4gICAgfVxuICB9XG5cbiAgX2Vuc3VyZVNjcm9sbGVkVG9JbmRleChpbmRleCkge1xuICAgIGNvbnN0IHRhcmdldFJvd0luRG9tID0gQXJyYXkuZnJvbSh0aGlzLiQuaXRlbXMuY2hpbGRyZW4pLmZpbHRlcihjaGlsZCA9PiBjaGlsZC5pbmRleCA9PT0gaW5kZXgpWzBdO1xuICAgIGlmICghdGFyZ2V0Um93SW5Eb20pIHtcbiAgICAgIHRoaXMuX3Njcm9sbFRvSW5kZXgoaW5kZXgpO1xuICAgIH1cbiAgfVxuXG4gIF9vbk5hdmlnYXRpb25LZXlEb3duKGUsIGtleSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGZ1bmN0aW9uIGluZGV4T2ZDaGlsZEVsZW1lbnQoZWwpIHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGVsLnBhcmVudE5vZGUuY2hpbGRyZW4sIGVsKTtcbiAgICB9XG5cbiAgICBjb25zdCB2aXNpYmxlSXRlbXNDb3VudCA9IHRoaXMuX2xhc3RWaXNpYmxlSW5kZXggLSB0aGlzLl9maXJzdFZpc2libGVJbmRleCAtIDE7XG5cbiAgICBsZXQgZHggPSAwLCBkeSA9IDA7XG4gICAgc3dpdGNoIChrZXkpIHtcbiAgICAgIGNhc2UgJ0Fycm93UmlnaHQnOlxuICAgICAgICBkeCA9IDE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnQXJyb3dMZWZ0JzpcbiAgICAgICAgZHggPSAtMTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdIb21lJzpcbiAgICAgICAgZHggPSAtSW5maW5pdHk7XG4gICAgICAgIGUuY3RybEtleSAmJiAoZHkgPSAtSW5maW5pdHkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ0VuZCc6XG4gICAgICAgIGR4ID0gSW5maW5pdHk7XG4gICAgICAgIGUuY3RybEtleSAmJiAoZHkgPSBJbmZpbml0eSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnQXJyb3dEb3duJzpcbiAgICAgICAgZHkgPSAxO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ0Fycm93VXAnOlxuICAgICAgICBkeSA9IC0xO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ1BhZ2VEb3duJzpcbiAgICAgICAgZHkgPSB2aXNpYmxlSXRlbXNDb3VudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdQYWdlVXAnOlxuICAgICAgICBkeSA9IC12aXNpYmxlSXRlbXNDb3VudDtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgY29uc3QgYWN0aXZlQ2VsbCA9IGUuY29tcG9zZWRQYXRoKClbMF07XG4gICAgY29uc3QgY29sdW1uSW5kZXggPSBpbmRleE9mQ2hpbGRFbGVtZW50KGFjdGl2ZUNlbGwpO1xuICAgIGNvbnN0IGlzUm93RGV0YWlscyA9IHRoaXMuX2VsZW1lbnRNYXRjaGVzKGFjdGl2ZUNlbGwsICdbcGFydH49XCJkZXRhaWxzLWNlbGxcIl0nKTtcblxuICAgIGNvbnN0IGFjdGl2ZVJvdyA9IGFjdGl2ZUNlbGwucGFyZW50Tm9kZTtcblxuICAgIGNvbnN0IGFjdGl2ZVJvd0dyb3VwID0gYWN0aXZlUm93LnBhcmVudE5vZGU7XG4gICAgY29uc3QgbWF4Um93SW5kZXggPSAoYWN0aXZlUm93R3JvdXAgPT09IHRoaXMuJC5pdGVtcyA/IHRoaXMuX2VmZmVjdGl2ZVNpemUgOiBhY3RpdmVSb3dHcm91cC5jaGlsZHJlbi5sZW5ndGgpIC0gMTtcblxuICAgIC8vIEJvZHkgcm93cyBoYXZlIGluZGV4IHByb3BlcnR5LCBvdGhlcndpc2UgRE9NIGNoaWxkIGluZGV4IG9mIHRoZSByb3cgaXMgdXNlZC5cbiAgICBjb25zdCByb3dJbmRleCA9IChhY3RpdmVSb3dHcm91cCA9PT0gdGhpcy4kLml0ZW1zKSA/XG4gICAgICAodGhpcy5fZm9jdXNlZEl0ZW1JbmRleCAhPT0gdW5kZWZpbmVkID8gdGhpcy5fZm9jdXNlZEl0ZW1JbmRleCA6IGFjdGl2ZVJvdy5pbmRleCkgOlxuICAgICAgaW5kZXhPZkNoaWxkRWxlbWVudChhY3RpdmVSb3cpO1xuXG4gICAgLy8gSW5kZXggb2YgdGhlIGRlc3RpbmF0aW9uIHJvd1xuICAgIGxldCBkc3RSb3dJbmRleCA9IE1hdGgubWF4KDAsIE1hdGgubWluKHJvd0luZGV4ICsgZHksIG1heFJvd0luZGV4KSk7XG5cbiAgICAvLyBSb3cgZGV0YWlscyBuYXZpZ2F0aW9uIGxvZ2ljXG4gICAgbGV0IGRzdElzUm93RGV0YWlscyA9IGZhbHNlO1xuICAgIGlmIChhY3RpdmVSb3dHcm91cCA9PT0gdGhpcy4kLml0ZW1zKSB7XG4gICAgICBjb25zdCBpdGVtID0gYWN0aXZlUm93Ll9pdGVtO1xuICAgICAgY29uc3QgZHN0SXRlbSA9IHRoaXMuX2NhY2hlLmdldEl0ZW1Gb3JJbmRleChkc3RSb3dJbmRleCk7XG4gICAgICAvLyBTaG91bGQgd2UgbmF2aWdhdGUgdG8gcm93IGRldGFpbHM/XG4gICAgICBpZiAoaXNSb3dEZXRhaWxzKSB7XG4gICAgICAgIGRzdElzUm93RGV0YWlscyA9IGR5ID09PSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHN0SXNSb3dEZXRhaWxzID0gZHkgPT09IDEgJiYgdGhpcy5faXNEZXRhaWxzT3BlbmVkKGl0ZW0pIHx8XG4gICAgICAgICAgZHkgPT09IC0xICYmIGRzdFJvd0luZGV4ICE9PSByb3dJbmRleCAmJiB0aGlzLl9pc0RldGFpbHNPcGVuZWQoZHN0SXRlbSk7XG4gICAgICB9XG4gICAgICAvLyBTaG91bGQgd2UgbmF2aWdhdGUgYmV0d2VlbiBkZXRhaWxzIGFuZCByZWd1bGFyIGNlbGxzIG9mIHRoZSBzYW1lIHJvdz9cbiAgICAgIGlmIChkc3RJc1Jvd0RldGFpbHMgIT09IGlzUm93RGV0YWlscyAmJlxuICAgICAgICAgIChkeSA9PT0gMSAmJiBkc3RJc1Jvd0RldGFpbHMgfHwgZHkgPT09IC0xICYmICFkc3RJc1Jvd0RldGFpbHMpKSB7XG4gICAgICAgIGRzdFJvd0luZGV4ID0gcm93SW5kZXg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSGVhZGVyIGFuZCBmb290ZXIgY291bGQgaGF2ZSBoaWRkZW4gcm93cywgZS4gZy4sIGlmIG5vbmUgb2YgdGhlIGNvbHVtbnNcbiAgICAvLyBvciBncm91cHMgb24gdGhlIGdpdmVuIGNvbHVtbiB0cmVlIGxldmVsIGRlZmluZSB0ZW1wbGF0ZS4gU2tpcCB0aGVtXG4gICAgLy8gaW4gdmVydGljYWwga2V5Ym9hcmQgbmF2aWdhdGlvbi5cbiAgICBpZiAoYWN0aXZlUm93R3JvdXAgIT09IHRoaXMuJC5pdGVtcykge1xuICAgICAgaWYgKGRzdFJvd0luZGV4ID4gcm93SW5kZXgpIHtcbiAgICAgICAgd2hpbGUgKFxuICAgICAgICAgIGRzdFJvd0luZGV4IDwgbWF4Um93SW5kZXggJiZcbiAgICAgICAgICBhY3RpdmVSb3dHcm91cC5jaGlsZHJlbltkc3RSb3dJbmRleF0uaGlkZGVuXG4gICAgICAgICkge1xuICAgICAgICAgIGRzdFJvd0luZGV4Kys7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZHN0Um93SW5kZXggPCByb3dJbmRleCkge1xuICAgICAgICB3aGlsZSAoXG4gICAgICAgICAgZHN0Um93SW5kZXggPiAwICYmXG4gICAgICAgICAgYWN0aXZlUm93R3JvdXAuY2hpbGRyZW5bZHN0Um93SW5kZXhdLmhpZGRlblxuICAgICAgICApIHtcbiAgICAgICAgICBkc3RSb3dJbmRleC0tO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gX2ZvY3VzZWRDb2x1bW5PcmRlciBpcyBtZW1vaXplZCDigJQgdGhpcyBpcyB0byBlbnN1cmUgcHJlZGljdGFibGVcbiAgICAvLyBuYXZpZ2F0aW9uIHdoZW4gZW50ZXJpbmcgYW5kIGxlYXZpbmcgZGV0YWlsIGFuZCBjb2x1bW4gZ3JvdXAgY2VsbHMuXG4gICAgaWYgKHRoaXMuX2ZvY3VzZWRDb2x1bW5PcmRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoaXNSb3dEZXRhaWxzKSB7XG4gICAgICAgIHRoaXMuX2ZvY3VzZWRDb2x1bW5PcmRlciA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9mb2N1c2VkQ29sdW1uT3JkZXIgPSB0aGlzLl9nZXRDb2x1bW5zKGFjdGl2ZVJvd0dyb3VwLCByb3dJbmRleClbY29sdW1uSW5kZXhdLl9vcmRlcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGaW5kIG9yZGVyZWRDb2x1bW5JbmRleCDigJQgdGhlIGluZGV4IG9mIG9yZGVyIGNsb3Nlc3QgbWF0Y2hpbmcgdGhlXG4gICAgLy8gb3JpZ2luYWwgX2ZvY3VzZWRDb2x1bW5PcmRlciBpbiB0aGUgc29ydGVkIGFycmF5IG9mIG9yZGVyc1xuICAgIC8vIG9mIHRoZSB2aXNpYmxlIGNvbHVtbnMgb24gdGhlIGRlc3RpbmF0aW9uIHJvdy5cbiAgICBjb25zdCBkc3RDb2x1bW5zID0gdGhpcy5fZ2V0Q29sdW1ucyhhY3RpdmVSb3dHcm91cCwgZHN0Um93SW5kZXgpO1xuICAgIGNvbnN0IGRzdFNvcnRlZENvbHVtbk9yZGVycyA9IGRzdENvbHVtbnMuZmlsdGVyKGMgPT4gIWMuaGlkZGVuKS5tYXAoYyA9PiBjLl9vcmRlcilcbiAgICAgIC5zb3J0KChiLCBhKSA9PiAoYiAtIGEpKTtcbiAgICBjb25zdCBtYXhPcmRlcmVkQ29sdW1uSW5kZXggPSBkc3RTb3J0ZWRDb2x1bW5PcmRlcnMubGVuZ3RoIC0gMTtcbiAgICBjb25zdCBvcmRlcmVkQ29sdW1uSW5kZXggPSBkc3RTb3J0ZWRDb2x1bW5PcmRlcnMuaW5kZXhPZihcbiAgICAgIGRzdFNvcnRlZENvbHVtbk9yZGVycy5zbGljZSgwKS5zb3J0KChiLCBhKSA9PlxuICAgICAgICBNYXRoLmFicyhiIC0gdGhpcy5fZm9jdXNlZENvbHVtbk9yZGVyKSAtIE1hdGguYWJzKGEgLSB0aGlzLl9mb2N1c2VkQ29sdW1uT3JkZXIpXG4gICAgICApWzBdXG4gICAgKTtcblxuICAgIC8vIEluZGV4IG9mIHRoZSBkZXN0aW5hdGlvbiBjb2x1bW4gb3JkZXJcbiAgICBjb25zdCBkc3RPcmRlcmVkQ29sdW1uSW5kZXggPSAoZHkgPT09IDAgJiYgaXNSb3dEZXRhaWxzKSA/IG9yZGVyZWRDb2x1bW5JbmRleCA6XG4gICAgICBNYXRoLm1heCgwLCBNYXRoLm1pbihvcmRlcmVkQ29sdW1uSW5kZXggKyBkeCwgbWF4T3JkZXJlZENvbHVtbkluZGV4KSk7XG5cbiAgICBpZiAoZHN0T3JkZXJlZENvbHVtbkluZGV4ICE9PSBvcmRlcmVkQ29sdW1uSW5kZXgpIHtcbiAgICAgIC8vIEhvcml6b250YWwgbW92ZW1lbnQgaW52YWxpZGF0ZXMgc3RvcmVkIF9mb2N1c2VkQ29sdW1uT3JkZXJcbiAgICAgIHRoaXMuX2ZvY3VzZWRDb2x1bW5PcmRlciA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvLyBFbnN1cmUgY29ycmVjdCB2ZXJ0aWNhbCBzY3JvbGwgcG9zaXRpb24sIGRlc3RpbmF0aW9uIHJvdyBpcyB2aXNpYmxlXG4gICAgaWYgKGFjdGl2ZVJvd0dyb3VwID09PSB0aGlzLiQuaXRlbXMpIHtcbiAgICAgIHRoaXMuX2Vuc3VyZVNjcm9sbGVkVG9JbmRleChkc3RSb3dJbmRleCk7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBoYXMgdG8gYmUgc2V0IGFmdGVyIHNjcm9sbGluZywgb3RoZXJ3aXNlIGl0IGNhbiBiZSByZW1vdmVkIGJ5XG4gICAgLy8gYF9wcmV2ZW50U2Nyb2xsZXJSb3RhdGluZ0NlbGxGb2N1cyhpdGVtLCBpbmRleClgIGR1cmluZyBzY3JvbGxpbmcuXG4gICAgdGhpcy5fdG9nZ2xlQXR0cmlidXRlKCduYXZpZ2F0aW5nJywgdHJ1ZSwgdGhpcyk7XG5cbiAgICBjb25zdCBjb2x1bW5JbmRleEJ5T3JkZXIgPSBkc3RDb2x1bW5zLnJlZHVjZSgoYWNjLCBjb2wsIGkpID0+IChhY2NbY29sLl9vcmRlcl0gPSBpLCBhY2MpLCB7fSk7XG4gICAgY29uc3QgZHN0Q29sdW1uSW5kZXggPSBjb2x1bW5JbmRleEJ5T3JkZXJbZHN0U29ydGVkQ29sdW1uT3JkZXJzW2RzdE9yZGVyZWRDb2x1bW5JbmRleF1dO1xuXG4gICAgLy8gRm9yIGJvZHkgcm93cywgdXNlIGluZGV4IHByb3BlcnR5IHRvIGZpbmQgZGVzdGluYXRpb24gcm93LCBvdGhlcndpc2UgdXNlIERPTSBjaGlsZCBpbmRleFxuICAgIGNvbnN0IGRzdFJvdyA9IGFjdGl2ZVJvd0dyb3VwID09PSB0aGlzLiQuaXRlbXMgP1xuICAgICAgQXJyYXkuZnJvbShhY3RpdmVSb3dHcm91cC5jaGlsZHJlbikuZmlsdGVyKGVsID0+IGVsLmluZGV4ID09PSBkc3RSb3dJbmRleClbMF0gOlxuICAgICAgYWN0aXZlUm93R3JvdXAuY2hpbGRyZW5bZHN0Um93SW5kZXhdO1xuICAgIGlmICghZHN0Um93KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSGVyZSB3ZSBnbyFcbiAgICBjb25zdCBkc3RDZWxsID0gZHN0SXNSb3dEZXRhaWxzID9cbiAgICAgIEFycmF5LmZyb20oZHN0Um93LmNoaWxkcmVuKVxuICAgICAgICAuZmlsdGVyKGVsID0+IHRoaXMuX2VsZW1lbnRNYXRjaGVzKGVsLCAnW3BhcnR+PVwiZGV0YWlscy1jZWxsXCJdJykpWzBdIDpcbiAgICAgIGRzdFJvdy5jaGlsZHJlbltkc3RDb2x1bW5JbmRleF07XG4gICAgdGhpcy5fc2Nyb2xsSG9yaXpvbnRhbGx5VG9DZWxsKGRzdENlbGwpO1xuICAgIGlmIChhY3RpdmVSb3dHcm91cCA9PT0gdGhpcy4kLml0ZW1zKSB7XG4gICAgICAvLyBXaGVuIHNjcm9sbGluZyB3aXRoIHJlcGVhdGVkIGtleWRvd24sIHNvbWV0aW1lcyBGb2N1c0V2ZW50IGxpc3RlbmVyc1xuICAgICAgLy8gYXJlIHRvbyBsYXRlIHRvIHVwZGF0ZSBfZm9jdXNlZEl0ZW1JbmRleC4gRW5zdXJlIG5leHQga2V5ZG93blxuICAgICAgLy8gbGlzdGVuZXIgaW52b2NhdGlvbiBnZXRzIHVwZGF0ZWQgX2ZvY3VzZWRJdGVtSW5kZXggdmFsdWUuXG4gICAgICB0aGlzLl9mb2N1c2VkSXRlbUluZGV4ID0gZHN0Um93SW5kZXg7XG4gICAgfVxuXG4gICAgaWYgKGFjdGl2ZVJvd0dyb3VwID09PSB0aGlzLiQuaXRlbXMpIHtcbiAgICAgIGNvbnN0IGRzdFJlY3QgPSBkc3RDZWxsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgY29uc3QgZm9vdGVyVG9wID0gdGhpcy4kLmZvb3Rlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gICAgICBjb25zdCBoZWFkZXJCb3R0b20gPSB0aGlzLiQuaGVhZGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbTtcbiAgICAgIGlmIChkc3RSZWN0LmJvdHRvbSA+IGZvb3RlclRvcCkge1xuICAgICAgICB0aGlzLiQudGFibGUuc2Nyb2xsVG9wICs9IGRzdFJlY3QuYm90dG9tIC0gZm9vdGVyVG9wO1xuICAgICAgICB0aGlzLl9zY3JvbGxIYW5kbGVyKCk7XG4gICAgICB9IGVsc2UgaWYgKGRzdFJlY3QudG9wIDwgaGVhZGVyQm90dG9tKSB7XG4gICAgICAgIHRoaXMuJC50YWJsZS5zY3JvbGxUb3AgLT0gaGVhZGVyQm90dG9tIC0gZHN0UmVjdC50b3A7XG4gICAgICAgIHRoaXMuX3Njcm9sbEhhbmRsZXIoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkc3RDZWxsLmZvY3VzKCk7XG4gIH1cblxuICBfcGFyc2VFdmVudFBhdGgocGF0aCkge1xuICAgIGNvbnN0IHRhYmxlSW5kZXggPSBwYXRoLmluZGV4T2YodGhpcy4kLnRhYmxlKTtcbiAgICByZXR1cm4ge1xuICAgICAgcm93R3JvdXA6IHBhdGhbdGFibGVJbmRleCAtIDFdLFxuICAgICAgcm93OiBwYXRoW3RhYmxlSW5kZXggLSAyXSxcbiAgICAgIGNlbGw6IHBhdGhbdGFibGVJbmRleCAtIDNdXG4gICAgfTtcbiAgfVxuXG4gIF9vbkludGVyYWN0aW9uS2V5RG93bihlLCBrZXkpIHtcbiAgICBjb25zdCBsb2NhbFRhcmdldCA9IGUuY29tcG9zZWRQYXRoKClbMF07XG4gICAgY29uc3QgbG9jYWxUYXJnZXRJc1RleHRJbnB1dCA9IGxvY2FsVGFyZ2V0LmxvY2FsTmFtZSA9PT0gJ2lucHV0JyAmJlxuICAgICAgIS9eKGJ1dHRvbnxjaGVja2JveHxjb2xvcnxmaWxlfGltYWdlfHJhZGlvfHJhbmdlfHJlc2V0fHN1Ym1pdCkkL2kudGVzdChsb2NhbFRhcmdldC50eXBlKTtcblxuICAgIGxldCB3YW50SW50ZXJhY3Rpbmc7XG4gICAgc3dpdGNoIChrZXkpIHtcbiAgICAgIGNhc2UgJ0VudGVyJzpcbiAgICAgICAgd2FudEludGVyYWN0aW5nID0gdGhpcy5oYXNBdHRyaWJ1dGUoJ2ludGVyYWN0aW5nJykgPyAhbG9jYWxUYXJnZXRJc1RleHRJbnB1dCA6IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnRXNjYXBlJzpcbiAgICAgICAgd2FudEludGVyYWN0aW5nID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnRjInOlxuICAgICAgICB3YW50SW50ZXJhY3RpbmcgPSAhdGhpcy5oYXNBdHRyaWJ1dGUoJ2ludGVyYWN0aW5nJyk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGNvbnN0IHtjZWxsfSA9IHRoaXMuX3BhcnNlRXZlbnRQYXRoKGUuY29tcG9zZWRQYXRoKCkpO1xuXG4gICAgaWYgKHRoaXMuaGFzQXR0cmlidXRlKCdpbnRlcmFjdGluZycpICE9PSB3YW50SW50ZXJhY3RpbmcpIHtcbiAgICAgIGlmICh3YW50SW50ZXJhY3RpbmcpIHtcbiAgICAgICAgY29uc3QgZm9jdXNUYXJnZXQgPSBjZWxsLl9jb250ZW50LnF1ZXJ5U2VsZWN0b3IoJ1tmb2N1cy10YXJnZXRdJykgfHxcbiAgICAgICAgICBjZWxsLl9jb250ZW50LmZpcnN0RWxlbWVudENoaWxkO1xuICAgICAgICBpZiAoZm9jdXNUYXJnZXQpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgZm9jdXNUYXJnZXQuZm9jdXMoKTtcbiAgICAgICAgICB0aGlzLl90b2dnbGVBdHRyaWJ1dGUoJ2ludGVyYWN0aW5nJywgdHJ1ZSwgdGhpcyk7XG4gICAgICAgICAgdGhpcy5fdG9nZ2xlQXR0cmlidXRlKCduYXZpZ2F0aW5nJywgZmFsc2UsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuX2ZvY3VzZWRDb2x1bW5PcmRlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgY2VsbC5mb2N1cygpO1xuICAgICAgICB0aGlzLl90b2dnbGVBdHRyaWJ1dGUoJ2ludGVyYWN0aW5nJywgZmFsc2UsIHRoaXMpO1xuICAgICAgICB0aGlzLl90b2dnbGVBdHRyaWJ1dGUoJ25hdmlnYXRpbmcnLCB0cnVlLCB0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfcHJlZGljdEZvY3VzU3RlcFRhcmdldChzcmNFbGVtZW50LCBzdGVwKSB7XG4gICAgY29uc3QgdGFiT3JkZXIgPSBbXG4gICAgICB0aGlzLiQudGFibGUsXG4gICAgICB0aGlzLl9oZWFkZXJGb2N1c2FibGUsXG4gICAgICB0aGlzLl9pdGVtc0ZvY3VzYWJsZSxcbiAgICAgIHRoaXMuX2Zvb3RlckZvY3VzYWJsZSxcbiAgICAgIHRoaXMuJC5mb2N1c2V4aXRcbiAgICBdO1xuXG4gICAgbGV0IGluZGV4ID0gdGFiT3JkZXIuaW5kZXhPZihzcmNFbGVtZW50KTtcblxuICAgIGluZGV4ICs9IHN0ZXA7XG4gICAgd2hpbGUgKGluZGV4ID49IDAgJiYgaW5kZXggPD0gdGFiT3JkZXIubGVuZ3RoIC0gMSAmJlxuICAgICAgICAoIXRhYk9yZGVyW2luZGV4XSB8fCB0YWJPcmRlcltpbmRleF0ucGFyZW50Tm9kZS5oaWRkZW4pKSB7XG4gICAgICBpbmRleCArPSBzdGVwO1xuICAgIH1cblxuICAgIHJldHVybiB0YWJPcmRlcltpbmRleF07XG4gIH1cblxuICBfb25UYWJLZXlEb3duKGUpIHtcbiAgICBjb25zdCBmb2N1c1RhcmdldCA9IHRoaXMuX3ByZWRpY3RGb2N1c1N0ZXBUYXJnZXQoZS5jb21wb3NlZFBhdGgoKVswXSwgZS5zaGlmdEtleSA/IC0xIDogMSk7XG5cbiAgICBpZiAoZm9jdXNUYXJnZXQgPT09IHRoaXMuJC50YWJsZSkge1xuICAgICAgLy8gVGhlIGZvY3VzIGlzIGFib3V0IHRvIGV4aXQgdGhlIGdyaWQgdG8gdGhlIHRvcC5cbiAgICAgIHRoaXMuJC50YWJsZS5mb2N1cygpO1xuICAgIH0gZWxzZSBpZiAoZm9jdXNUYXJnZXQgPT09IHRoaXMuJC5mb2N1c2V4aXQpIHtcbiAgICAgIC8vIFRoZSBmb2N1cyBpcyBhYm91dCB0byBleGl0IHRoZSBncmlkIHRvIHRoZSBib3R0b20uXG4gICAgICB0aGlzLiQuZm9jdXNleGl0LmZvY3VzKCk7XG4gICAgfSBlbHNlIGlmIChmb2N1c1RhcmdldCA9PT0gdGhpcy5faXRlbXNGb2N1c2FibGUpIHtcbiAgICAgIGxldCBpdGVtc0ZvY3VzVGFyZ2V0ID0gZm9jdXNUYXJnZXQ7XG4gICAgICBjb25zdCB0YXJnZXRSb3cgPSB0aGlzLl9pdGVtc0ZvY3VzYWJsZS5wYXJlbnROb2RlO1xuICAgICAgdGhpcy5fZW5zdXJlU2Nyb2xsZWRUb0luZGV4KHRoaXMuX2ZvY3VzZWRJdGVtSW5kZXgpO1xuICAgICAgaWYgKHRhcmdldFJvdy5pbmRleCAhPT0gdGhpcy5fZm9jdXNlZEl0ZW1JbmRleCkge1xuICAgICAgICAvLyBUaGUgdGFyZ2V0IHJvdywgd2hpY2ggaXMgYWJvdXQgdG8gYmUgZm9jdXNlZCBuZXh0LCBoYXMgYmVlblxuICAgICAgICAvLyBhc3NpZ25lZCB3aXRoIGEgbmV3IGluZGV4IHNpbmNlIGxhc3QgZm9jdXMsIHByb2JhYmx5IGJlY2F1c2Ugb2ZcbiAgICAgICAgLy8gc2Nyb2xsaW5nLiBGb2N1cyB0aGUgcm93IGZvciB0aGUgc3RvcmVkIGZvY3VzZWQgaXRlbSBpbmRleCBpbnN0ZWFkLlxuICAgICAgICBjb25zdCBjb2x1bW5JbmRleCA9IEFycmF5LmZyb20odGFyZ2V0Um93LmNoaWxkcmVuKS5pbmRleE9mKHRoaXMuX2l0ZW1zRm9jdXNhYmxlKTtcbiAgICAgICAgY29uc3QgZm9jdXNlZEl0ZW1Sb3cgPSBBcnJheS5mcm9tKHRoaXMuJC5pdGVtcy5jaGlsZHJlbilcbiAgICAgICAgICAuZmlsdGVyKHJvdyA9PiByb3cuaW5kZXggPT09IHRoaXMuX2ZvY3VzZWRJdGVtSW5kZXgpWzBdO1xuICAgICAgICBpZiAoZm9jdXNlZEl0ZW1Sb3cpIHtcbiAgICAgICAgICBpdGVtc0ZvY3VzVGFyZ2V0ID0gZm9jdXNlZEl0ZW1Sb3cuY2hpbGRyZW5bY29sdW1uSW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpdGVtc0ZvY3VzVGFyZ2V0LmZvY3VzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGZvY3VzVGFyZ2V0LmZvY3VzKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fdG9nZ2xlQXR0cmlidXRlKCduYXZpZ2F0aW5nJywgdHJ1ZSwgdGhpcyk7XG4gIH1cblxuICBfb25TcGFjZUtleURvd24oZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGNvbnN0IGNlbGwgPSBlLmNvbXBvc2VkUGF0aCgpWzBdO1xuICAgIGlmIChjZWxsLl9jb250ZW50ICYmIGNlbGwuX2NvbnRlbnQuZmlyc3RFbGVtZW50Q2hpbGQpIHtcbiAgICAgIGNvbnN0IHdhc05hdmlnYXRpbmcgPSB0aGlzLmhhc0F0dHJpYnV0ZSgnbmF2aWdhdGluZycpO1xuICAgICAgY2VsbC5fY29udGVudC5maXJzdEVsZW1lbnRDaGlsZC5jbGljaygpO1xuICAgICAgdGhpcy5fdG9nZ2xlQXR0cmlidXRlKCduYXZpZ2F0aW5nJywgd2FzTmF2aWdhdGluZywgdGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2NlbGwtYWN0aXZhdGUnLCB7ZGV0YWlsOiB7XG4gICAgICAgIG1vZGVsOiB0aGlzLl9fZ2V0Um93TW9kZWwoY2VsbC5wYXJlbnRFbGVtZW50KVxuICAgICAgfX0pKTtcbiAgICB9XG4gIH1cblxuICBfb25Gb2N1c0luKGUpIHtcbiAgICBpZiAoIXRoaXMuX2lzTW91c2Vkb3duKSB7XG4gICAgICB0aGlzLl90b2dnbGVBdHRyaWJ1dGUoJ25hdmlnYXRpbmcnLCB0cnVlLCB0aGlzKTtcbiAgICB9XG5cbiAgICBjb25zdCByb290VGFyZ2V0ID0gZS5jb21wb3NlZFBhdGgoKVswXTtcblxuICAgIGlmIChyb290VGFyZ2V0ID09PSB0aGlzLiQudGFibGUgfHxcbiAgICAgICAgcm9vdFRhcmdldCA9PT0gdGhpcy4kLmZvY3VzZXhpdCkge1xuICAgICAgLy8gVGhlIGZvY3VzIGVudGVycyB0aGUgdG9wIChib3R0b20pIG9mIHRoZSBncmlkLCBtZWFuaW5nIHRoYXQgdXNlciBoYXNcbiAgICAgIC8vIHRhYmJlZCAoc2hpZnQtdGFiYmVkKSBpbnRvIHRoZSBncmlkLiBNb3ZlIHRoZSBmb2N1cyB0b1xuICAgICAgLy8gdGhlIGZpcnN0ICh0aGUgbGFzdCkgZm9jdXNhYmxlLlxuICAgICAgdGhpcy5fcHJlZGljdEZvY3VzU3RlcFRhcmdldChcbiAgICAgICAgcm9vdFRhcmdldCxcbiAgICAgICAgcm9vdFRhcmdldCA9PT0gdGhpcy4kLnRhYmxlID8gMSA6IC0xXG4gICAgICApLmZvY3VzKCk7XG4gICAgICB0aGlzLl90b2dnbGVBdHRyaWJ1dGUoJ2ludGVyYWN0aW5nJywgZmFsc2UsIHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9kZXRlY3RJbnRlcmFjdGluZyhlKTtcbiAgICB9XG4gIH1cblxuICBfb25Gb2N1c091dChlKSB7XG4gICAgdGhpcy5fdG9nZ2xlQXR0cmlidXRlKCduYXZpZ2F0aW5nJywgZmFsc2UsIHRoaXMpO1xuICAgIHRoaXMuX2RldGVjdEludGVyYWN0aW5nKGUpO1xuICB9XG5cbiAgX29uQ2VsbEZvY3VzSW4oZSkge1xuICAgIHRoaXMuX2RldGVjdEludGVyYWN0aW5nKGUpO1xuXG4gICAgaWYgKGUuY29tcG9zZWRQYXRoKCkuaW5kZXhPZih0aGlzLiQudGFibGUpID09PSAzKSB7XG4gICAgICBjb25zdCBjZWxsID0gZS5jb21wb3NlZFBhdGgoKVswXTtcbiAgICAgIHRoaXMuX2FjdGl2ZVJvd0dyb3VwID0gY2VsbC5wYXJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgICBpZiAodGhpcy5fYWN0aXZlUm93R3JvdXAgPT09IHRoaXMuJC5oZWFkZXIpIHtcbiAgICAgICAgdGhpcy5faGVhZGVyRm9jdXNhYmxlID0gY2VsbDtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYWN0aXZlUm93R3JvdXAgPT09IHRoaXMuJC5pdGVtcykge1xuICAgICAgICB0aGlzLl9pdGVtc0ZvY3VzYWJsZSA9IGNlbGw7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2FjdGl2ZVJvd0dyb3VwID09PSB0aGlzLiQuZm9vdGVyKSB7XG4gICAgICAgIHRoaXMuX2Zvb3RlckZvY3VzYWJsZSA9IGNlbGw7XG4gICAgICB9XG4gICAgICAvLyBJbmZvcm0gY2VsbCBjb250ZW50IG9mIHRoZSBmb2N1cyAodXNlZCBpbiA8dmFhZGluLWdyaWQtc29ydGVyPilcbiAgICAgIGNlbGwuX2NvbnRlbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2NlbGwtZm9jdXNpbicsIHtidWJibGVzOiBmYWxzZX0pKTtcbiAgICB9XG5cbiAgICB0aGlzLl9kZXRlY3RGb2N1c2VkSXRlbUluZGV4KGUpO1xuICB9XG5cbiAgX29uQ2VsbEZvY3VzT3V0KGUpIHtcbiAgICBpZiAoZS5jb21wb3NlZFBhdGgoKS5pbmRleE9mKHRoaXMuJC50YWJsZSkgPT09IDMpIHtcbiAgICAgIGNvbnN0IGNlbGwgPSBlLmNvbXBvc2VkUGF0aCgpWzBdO1xuICAgICAgLy8gSW5mb3JtIGNlbGwgY29udGVudCBvZiB0aGUgZm9jdXMgKHVzZWQgaW4gPHZhYWRpbi1ncmlkLXNvcnRlcj4pXG4gICAgICBjZWxsLl9jb250ZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdjZWxsLWZvY3Vzb3V0Jywge2J1YmJsZXM6IGZhbHNlfSkpO1xuICAgIH1cbiAgfVxuXG4gIF9kZXRlY3RJbnRlcmFjdGluZyhlKSB7XG4gICAgdGhpcy5fdG9nZ2xlQXR0cmlidXRlKCdpbnRlcmFjdGluZycsXG4gICAgICBlLmNvbXBvc2VkUGF0aCgpLnNvbWUoZWwgPT4gZWwubG9jYWxOYW1lID09PSAndmFhZGluLWdyaWQtY2VsbC1jb250ZW50JyksXG4gICAgICB0aGlzKTtcbiAgfVxuXG4gIF9kZXRlY3RGb2N1c2VkSXRlbUluZGV4KGUpIHtcbiAgICBjb25zdCB7cm93R3JvdXAsIHJvd30gPSB0aGlzLl9wYXJzZUV2ZW50UGF0aChlLmNvbXBvc2VkUGF0aCgpKTtcbiAgICBpZiAocm93R3JvdXAgPT09IHRoaXMuJC5pdGVtcykge1xuICAgICAgdGhpcy5fZm9jdXNlZEl0ZW1JbmRleCA9IHJvdy5pbmRleDtcbiAgICB9XG4gIH1cblxuICBfcHJldmVudFNjcm9sbGVyUm90YXRpbmdDZWxsRm9jdXMoaXRlbSwgaW5kZXgpIHtcbiAgICBpZiAoaXRlbS5pbmRleCA9PT0gdGhpcy5fZm9jdXNlZEl0ZW1JbmRleCAmJiB0aGlzLmhhc0F0dHJpYnV0ZSgnbmF2aWdhdGluZycpICYmIHRoaXMuX2FjdGl2ZVJvd0dyb3VwID09PSB0aGlzLiQuaXRlbXMpIHtcbiAgICAgIC8vIEZvY3VzZWQgaXRlbSBoYXMgd2VudCwgaGlkZSBuYXZpZ2F0aW9uIG1vZGVcbiAgICAgIHRoaXMuX25hdmlnYXRpbmdJc0hpZGRlbiA9IHRydWU7XG4gICAgICB0aGlzLl90b2dnbGVBdHRyaWJ1dGUoJ25hdmlnYXRpbmcnLCBmYWxzZSwgdGhpcyk7XG4gICAgfVxuICAgIGlmIChpbmRleCA9PT0gdGhpcy5fZm9jdXNlZEl0ZW1JbmRleCAmJiB0aGlzLl9uYXZpZ2F0aW5nSXNIaWRkZW4pIHtcbiAgICAgIC8vIEZvY3VzZWQgaXRlbSBpcyBiYWNrLCByZXN0b3JlIG5hdmlnYXRpb24gbW9kZVxuICAgICAgdGhpcy5fbmF2aWdhdGluZ0lzSGlkZGVuID0gZmFsc2U7XG4gICAgICB0aGlzLl90b2dnbGVBdHRyaWJ1dGUoJ25hdmlnYXRpbmcnLCB0cnVlLCB0aGlzKTtcbiAgICB9XG4gIH1cblxuICBfZ2V0Q29sdW1ucyhyb3dHcm91cCwgcm93SW5kZXgpIHtcbiAgICBsZXQgY29sdW1uVHJlZUxldmVsID0gdGhpcy5fY29sdW1uVHJlZS5sZW5ndGggLSAxO1xuICAgIGlmIChyb3dHcm91cCA9PT0gdGhpcy4kLmhlYWRlcikge1xuICAgICAgY29sdW1uVHJlZUxldmVsID0gcm93SW5kZXg7XG4gICAgfSBlbHNlIGlmIChyb3dHcm91cCA9PT0gdGhpcy4kLmZvb3Rlcikge1xuICAgICAgY29sdW1uVHJlZUxldmVsID0gdGhpcy5fY29sdW1uVHJlZS5sZW5ndGggLSAxIC0gcm93SW5kZXg7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jb2x1bW5UcmVlW2NvbHVtblRyZWVMZXZlbF07XG4gIH1cblxuICBfcmVzZXRLZXlib2FyZE5hdmlnYXRpb24oKSB7XG4gICAgaWYgKHRoaXMuJC5oZWFkZXIuZmlyc3RFbGVtZW50Q2hpbGQpIHtcbiAgICAgIHRoaXMuX2hlYWRlckZvY3VzYWJsZSA9IEFycmF5LmZyb20odGhpcy4kLmhlYWRlci5maXJzdEVsZW1lbnRDaGlsZC5jaGlsZHJlbikuZmlsdGVyKGVsID0+ICFlbC5oaWRkZW4pWzBdO1xuICAgIH1cblxuICAgIGlmICh0aGlzLiQuaXRlbXMuZmlyc3RFbGVtZW50Q2hpbGQpIHtcbiAgICAgIGNvbnN0IGZpcnN0VmlzaWJsZUluZGV4Um93ID0gdGhpcy5faXRlcmF0ZUl0ZW1zKChwaWR4LCB2aWR4KSA9PiB7XG4gICAgICAgIGlmICh0aGlzLl9maXJzdFZpc2libGVJbmRleCA9PT0gdmlkeCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLiQuaXRlbXMuY2hpbGRyZW5bcGlkeF07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKGZpcnN0VmlzaWJsZUluZGV4Um93KSB7XG4gICAgICAgIHRoaXMuX2l0ZW1zRm9jdXNhYmxlID0gQXJyYXkuZnJvbShmaXJzdFZpc2libGVJbmRleFJvdy5jaGlsZHJlbikuZmlsdGVyKGVsID0+ICFlbC5oaWRkZW4pWzBdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLiQuZm9vdGVyLmZpcnN0RWxlbWVudENoaWxkKSB7XG4gICAgICB0aGlzLl9mb290ZXJGb2N1c2FibGUgPSBBcnJheS5mcm9tKHRoaXMuJC5mb290ZXIuZmlyc3RFbGVtZW50Q2hpbGQuY2hpbGRyZW4pLmZpbHRlcihlbCA9PiAhZWwuaGlkZGVuKVswXTtcbiAgICB9XG4gIH1cblxuICBfc2Nyb2xsSG9yaXpvbnRhbGx5VG9DZWxsKGRzdENlbGwpIHtcbiAgICBpZiAoZHN0Q2VsbC5oYXNBdHRyaWJ1dGUoJ2Zyb3plbicpIHx8IHRoaXMuX2VsZW1lbnRNYXRjaGVzKGRzdENlbGwsICdbcGFydH49XCJkZXRhaWxzLWNlbGxcIl0nKSkge1xuICAgICAgLy8gVGhlc2UgY2VsbHMgYXJlLCBieSBkZXNpZ24sIGFsd2F5cyB2aXNpYmxlLCBubyBuZWVkIHRvIHNjcm9sbC5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBkc3RDZWxsUmVjdCA9IGRzdENlbGwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3QgZHN0Um93ID0gZHN0Q2VsbC5wYXJlbnROb2RlO1xuICAgIGNvbnN0IGRzdENlbGxJbmRleCA9IEFycmF5LmZyb20oZHN0Um93LmNoaWxkcmVuKS5pbmRleE9mKGRzdENlbGwpO1xuICAgIGNvbnN0IHRhYmxlUmVjdCA9IHRoaXMuJC50YWJsZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBsZXQgbGVmdEJvdW5kYXJ5ID0gdGFibGVSZWN0LmxlZnQsIHJpZ2h0Qm91bmRhcnkgPSB0YWJsZVJlY3QucmlnaHQ7XG4gICAgZm9yIChsZXQgaSA9IGRzdENlbGxJbmRleCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBjb25zdCBjZWxsID0gZHN0Um93LmNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGNlbGwuaGFzQXR0cmlidXRlKCdoaWRkZW4nKSB8fFxuICAgICAgICAgIHRoaXMuX2VsZW1lbnRNYXRjaGVzKGNlbGwsICdbcGFydH49XCJkZXRhaWxzLWNlbGxcIl0nKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChjZWxsLmhhc0F0dHJpYnV0ZSgnZnJvemVuJykpIHtcbiAgICAgICAgbGVmdEJvdW5kYXJ5ID0gY2VsbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5yaWdodDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSBkc3RDZWxsSW5kZXggKyAxOyBpIDwgZHN0Um93LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjZWxsID0gZHN0Um93LmNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGNlbGwuaGFzQXR0cmlidXRlKCdoaWRkZW4nKSB8fFxuICAgICAgICAgIHRoaXMuX2VsZW1lbnRNYXRjaGVzKGNlbGwsICdbcGFydH49XCJkZXRhaWxzLWNlbGxcIl0nKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChjZWxsLmhhc0F0dHJpYnV0ZSgnZnJvemVuJykpIHtcbiAgICAgICAgcmlnaHRCb3VuZGFyeSA9IGNlbGwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRzdENlbGxSZWN0LmxlZnQgPCBsZWZ0Qm91bmRhcnkpIHtcbiAgICAgIHRoaXMuJC50YWJsZS5zY3JvbGxMZWZ0ICs9IE1hdGgucm91bmQoZHN0Q2VsbFJlY3QubGVmdCAtIGxlZnRCb3VuZGFyeSk7XG4gICAgfVxuICAgIGlmIChkc3RDZWxsUmVjdC5yaWdodCA+IHJpZ2h0Qm91bmRhcnkpIHtcbiAgICAgIHRoaXMuJC50YWJsZS5zY3JvbGxMZWZ0ICs9IE1hdGgucm91bmQoZHN0Q2VsbFJlY3QucmlnaHQgLSByaWdodEJvdW5kYXJ5KTtcbiAgICB9XG4gIH1cblxuICBfZWxlbWVudE1hdGNoZXMoZWwsIHF1ZXJ5KSB7XG4gICAgcmV0dXJuIGVsLm1hdGNoZXMgPyBlbC5tYXRjaGVzKHF1ZXJ5KSA6XG4gICAgICBBcnJheS5mcm9tKGVsLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbChxdWVyeSkpLmluZGV4T2YoZWwpICE9PSAtMTtcbiAgfVxufTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBWYWFkaW4gTHRkLlxuVGhpcyBwcm9ncmFtIGlzIGF2YWlsYWJsZSB1bmRlciBBcGFjaGUgTGljZW5zZSBWZXJzaW9uIDIuMCwgYXZhaWxhYmxlIGF0IGh0dHBzOi8vdmFhZGluLmNvbS9saWNlbnNlL1xuKi9cbmltcG9ydCB7IEdlc3R1cmVFdmVudExpc3RlbmVycyB9IGZyb20gJ0Bwb2x5bWVyL3BvbHltZXIvbGliL21peGlucy9nZXN0dXJlLWV2ZW50LWxpc3RlbmVycy5qcyc7XG5cbmltcG9ydCB7IGFkZExpc3RlbmVyIH0gZnJvbSAnQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvZ2VzdHVyZXMuanMnO1xuaW1wb3J0IHsgZG9tIH0gZnJvbSAnQHBvbHltZXIvcG9seW1lci9saWIvbGVnYWN5L3BvbHltZXIuZG9tLmpzJztcbmltcG9ydCB7IHVzZVNoYWRvdyB9IGZyb20gJ0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL3NldHRpbmdzLmpzJztcblxuLyoqXG4gKiBAcG9seW1lck1peGluXG4gKi9cbmV4cG9ydCBjb25zdCBDb2x1bW5SZW9yZGVyaW5nTWl4aW4gPSBzdXBlckNsYXNzID0+IGNsYXNzIENvbHVtblJlb3JkZXJpbmdNaXhpbiBleHRlbmRzIEdlc3R1cmVFdmVudExpc3RlbmVycyhzdXBlckNsYXNzKSB7XG5cbiAgc3RhdGljIGdldCBwcm9wZXJ0aWVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvKipcbiAgICAgICAqIFNldCB0byB0cnVlIHRvIGFsbG93IGNvbHVtbiByZW9yZGVyaW5nLlxuICAgICAgICovXG4gICAgICBjb2x1bW5SZW9yZGVyaW5nQWxsb3dlZDoge1xuICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICB2YWx1ZTogZmFsc2VcbiAgICAgIH0sXG5cbiAgICAgIF9vcmRlckJhc2VTY29wZToge1xuICAgICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICAgIHZhbHVlOiAxMDAwMDAwMFxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0IG9ic2VydmVycygpIHtcbiAgICByZXR1cm4gW1xuICAgICAgJ191cGRhdGVPcmRlcnMoX2NvbHVtblRyZWUsIF9jb2x1bW5UcmVlLiopJ1xuICAgIF07XG4gIH1cblxuICByZWFkeSgpIHtcbiAgICBzdXBlci5yZWFkeSgpO1xuICAgIGFkZExpc3RlbmVyKHRoaXMsICd0cmFjaycsIHRoaXMuX29uVHJhY2tFdmVudCk7XG4gICAgdGhpcy5fcmVvcmRlckdob3N0ID0gdGhpcy5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoJ1twYXJ0PVwicmVvcmRlci1naG9zdFwiXScpO1xuXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5fb25Ub3VjaFN0YXJ0LmJpbmQodGhpcykpO1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5fb25Ub3VjaE1vdmUuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMuX29uVG91Y2hFbmQuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIHRoaXMuX29uQ29udGV4dE1lbnUuYmluZCh0aGlzKSk7XG4gIH1cblxuICBfb25Db250ZXh0TWVudShlKSB7XG4gICAgaWYgKHRoaXMuaGFzQXR0cmlidXRlKCdyZW9yZGVyaW5nJykpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH1cblxuICBfb25Ub3VjaFN0YXJ0KGUpIHtcbiAgICAvLyBUb3VjaCBldmVudCwgZGVsYXkgYWN0aXZhdGlvbiBieSAxMDBtc1xuICAgIHRoaXMuX3N0YXJ0VG91Y2hSZW9yZGVyVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5fb25UcmFja1N0YXJ0KHtcbiAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgeDogZS50b3VjaGVzWzBdLmNsaWVudFgsXG4gICAgICAgICAgeTogZS50b3VjaGVzWzBdLmNsaWVudFlcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwgMTAwKTtcbiAgfVxuXG4gIF9vblRvdWNoTW92ZShlKSB7XG4gICAgaWYgKHRoaXMuX2RyYWdnZWRDb2x1bW4pIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuX3N0YXJ0VG91Y2hSZW9yZGVyVGltZW91dCk7XG4gIH1cblxuICBfb25Ub3VjaEVuZCgpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5fc3RhcnRUb3VjaFJlb3JkZXJUaW1lb3V0KTtcbiAgICB0aGlzLl9vblRyYWNrRW5kKCk7XG4gIH1cblxuICBfb25UcmFja0V2ZW50KGUpIHtcbiAgICBpZiAoZS5kZXRhaWwuc3RhdGUgPT09ICdzdGFydCcpIHtcbiAgICAgIGNvbnN0IHBhdGggPSBlLmNvbXBvc2VkUGF0aCgpO1xuICAgICAgY29uc3QgaGVhZGVyQ2VsbCA9IHBhdGhbcGF0aC5pbmRleE9mKHRoaXMuJC5oZWFkZXIpIC0gMl07XG4gICAgICBpZiAoIWhlYWRlckNlbGwgfHwgIWhlYWRlckNlbGwuX2NvbnRlbnQpIHtcbiAgICAgICAgLy8gTm90IGEgaGVhZGVyIGNvbHVtblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGFjdGl2ZUVsZW1lbnQgPSB0aGlzLmdldFJvb3ROb2RlKCkuYWN0aXZlRWxlbWVudDtcbiAgICAgIGlmIChoZWFkZXJDZWxsLl9jb250ZW50LmNvbnRhaW5zKHRoaXMuZ2V0Um9vdE5vZGUoKS5hY3RpdmVFbGVtZW50KVxuICAgICAgICAgICYmICghdGhpcy5faWUgfHwgIXRoaXMuX2lzRm9jdXNhYmxlKGFjdGl2ZUVsZW1lbnQpKSkge1xuICAgICAgICAvLyBTb21ldGhpbmcgd2FzIGZvY3VzZWQgaW5zaWRlIHRoZSBjZWxsXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuJC5zY3JvbGxlci5oYXNBdHRyaWJ1dGUoJ2NvbHVtbi1yZXNpemluZycpKSB7XG4gICAgICAgIC8vIFJlc2l6aW5nIGlzIGluIHByb2dyZXNzXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLl90b3VjaERldmljZSkge1xuICAgICAgICAvLyBOb3QgYSB0b3VjaCBkZXZpY2VcbiAgICAgICAgdGhpcy5fb25UcmFja1N0YXJ0KGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZS5kZXRhaWwuc3RhdGUgPT09ICd0cmFjaycpIHtcbiAgICAgIHRoaXMuX29uVHJhY2soZSk7XG4gICAgfSBlbHNlIGlmIChlLmRldGFpbC5zdGF0ZSA9PT0gJ2VuZCcpIHtcbiAgICAgIHRoaXMuX29uVHJhY2tFbmQoZSk7XG4gICAgfVxuICB9XG5cbiAgX29uVHJhY2tTdGFydChlKSB7XG4gICAgaWYgKCF0aGlzLmNvbHVtblJlb3JkZXJpbmdBbGxvd2VkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQ2FuY2VsIHJlb3JkZXJpbmcgaWYgdGhlcmUgYXJlIGRyYWdnYWJsZSBub2RlcyBvbiB0aGUgZXZlbnQgcGF0aFxuICAgIGNvbnN0IHBhdGggPSBlLnBhdGggfHwgZG9tKGUpLnBhdGg7XG4gICAgaWYgKHBhdGggJiYgcGF0aC5maWx0ZXIobm9kZSA9PiBub2RlLmhhc0F0dHJpYnV0ZSAmJiBub2RlLmhhc0F0dHJpYnV0ZSgnZHJhZ2dhYmxlJykpWzBdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgaGVhZGVyQ2VsbCA9IHRoaXMuX2NlbGxGcm9tUG9pbnQoZS5kZXRhaWwueCwgZS5kZXRhaWwueSk7XG4gICAgaWYgKCFoZWFkZXJDZWxsIHx8IGhlYWRlckNlbGwuZ2V0QXR0cmlidXRlKCdwYXJ0JykuaW5kZXhPZignaGVhZGVyLWNlbGwnKSA9PT0gLTEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl90b2dnbGVBdHRyaWJ1dGUoJ3Jlb3JkZXJpbmcnLCB0cnVlLCB0aGlzKTtcbiAgICB0aGlzLl9kcmFnZ2VkQ29sdW1uID0gaGVhZGVyQ2VsbC5fY29sdW1uO1xuICAgIHdoaWxlICh0aGlzLl9kcmFnZ2VkQ29sdW1uLnBhcmVudEVsZW1lbnQuY2hpbGRFbGVtZW50Q291bnQgPT09IDEpIHtcbiAgICAgIC8vIFRoaXMgaXMgdGhlIG9ubHkgY29sdW1uIGluIHRoZSBncm91cCwgZHJhZyB0aGUgd2hvbGUgZ3JvdXAgaW5zdGVhZFxuICAgICAgdGhpcy5fZHJhZ2dlZENvbHVtbiA9IHRoaXMuX2RyYWdnZWRDb2x1bW4ucGFyZW50RWxlbWVudDtcbiAgICB9XG4gICAgdGhpcy5fc2V0U2libGluZ3NSZW9yZGVyU3RhdHVzKHRoaXMuX2RyYWdnZWRDb2x1bW4sICdhbGxvd2VkJyk7XG4gICAgdGhpcy5fZHJhZ2dlZENvbHVtbi5fcmVvcmRlclN0YXR1cyA9ICdkcmFnZ2luZyc7XG5cbiAgICB0aGlzLl91cGRhdGVHaG9zdChoZWFkZXJDZWxsKTtcbiAgICB0aGlzLl9yZW9yZGVyR2hvc3Quc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcbiAgICB0aGlzLl91cGRhdGVHaG9zdFBvc2l0aW9uKGUuZGV0YWlsLngsIHRoaXMuX3RvdWNoRGV2aWNlID8gZS5kZXRhaWwueSAtIDUwIDogZS5kZXRhaWwueSk7XG4gICAgdGhpcy5fYXV0b1Njcm9sbGVyKCk7XG4gIH1cblxuICBfb25UcmFjayhlKSB7XG4gICAgaWYgKCF0aGlzLl9kcmFnZ2VkQ29sdW1uKSB7XG4gICAgICAvLyBSZW9yZGVyaW5nIGRpZG7igJl0IHN0YXJ0LiBTa2lwIHRoaXMgZXZlbnQuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdGFyZ2V0Q2VsbCA9IHRoaXMuX2NlbGxGcm9tUG9pbnQoZS5kZXRhaWwueCwgZS5kZXRhaWwueSk7XG4gICAgaWYgKCF0YXJnZXRDZWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdGFyZ2V0Q29sdW1uID0gdGhpcy5fZ2V0VGFyZ2V0Q29sdW1uKHRhcmdldENlbGwsIHRoaXMuX2RyYWdnZWRDb2x1bW4pO1xuICAgIGlmICh0aGlzLl9pc1N3YXBBbGxvd2VkKHRoaXMuX2RyYWdnZWRDb2x1bW4sIHRhcmdldENvbHVtbikgJiZcbiAgICAgIHRoaXMuX2lzU3dhcHBhYmxlQnlQb3NpdGlvbih0YXJnZXRDb2x1bW4sIGUuZGV0YWlsLngpKSB7XG4gICAgICB0aGlzLl9zd2FwQ29sdW1uT3JkZXJzKHRoaXMuX2RyYWdnZWRDb2x1bW4sIHRhcmdldENvbHVtbik7XG4gICAgfVxuXG4gICAgdGhpcy5fdXBkYXRlR2hvc3RQb3NpdGlvbihlLmRldGFpbC54LCB0aGlzLl90b3VjaERldmljZSA/IGUuZGV0YWlsLnkgLSA1MCA6IGUuZGV0YWlsLnkpO1xuICAgIHRoaXMuX2xhc3REcmFnQ2xpZW50WCA9IGUuZGV0YWlsLng7XG4gIH1cblxuICBfb25UcmFja0VuZCgpIHtcbiAgICBpZiAoIXRoaXMuX2RyYWdnZWRDb2x1bW4pIHtcbiAgICAgIC8vIFJlb3JkZXJpbmcgZGlkbuKAmXQgc3RhcnQuIFNraXAgdGhpcyBldmVudC5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl90b2dnbGVBdHRyaWJ1dGUoJ3Jlb3JkZXJpbmcnLCBmYWxzZSwgdGhpcyk7XG4gICAgdGhpcy5fZHJhZ2dlZENvbHVtbi5fcmVvcmRlclN0YXR1cyA9ICcnO1xuICAgIHRoaXMuX3NldFNpYmxpbmdzUmVvcmRlclN0YXR1cyh0aGlzLl9kcmFnZ2VkQ29sdW1uLCAnJyk7XG4gICAgdGhpcy5fZHJhZ2dlZENvbHVtbiA9IG51bGw7XG4gICAgdGhpcy5fbGFzdERyYWdDbGllbnRYID0gbnVsbDtcbiAgICB0aGlzLl9yZW9yZGVyR2hvc3Quc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuXG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnY29sdW1uLXJlb3JkZXInLCB7ZGV0YWlsOiB7XG4gICAgICBjb2x1bW5zOiB0aGlzLl9nZXRDb2x1bW5zSW5PcmRlcigpXG4gICAgfX0pKTtcbiAgfVxuXG4gIF9nZXRDb2x1bW5zSW5PcmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5fY29sdW1uVHJlZS5zbGljZSgwKS5wb3AoKVxuICAgICAgLmZpbHRlcihjID0+ICFjLmhpZGRlbilcbiAgICAgIC5zb3J0KChiLCBhKSA9PiAoYi5fb3JkZXIgLSBhLl9vcmRlcikpO1xuICB9XG5cbiAgX2NlbGxGcm9tUG9pbnQoeCwgeSkge1xuICAgIHggPSB4IHx8IDA7XG4gICAgeSA9IHkgfHwgMDtcbiAgICBpZiAoIXRoaXMuX2RyYWdnZWRDb2x1bW4pIHtcbiAgICAgIHRoaXMuX3RvZ2dsZUF0dHJpYnV0ZSgnbm8tY29udGVudC1wb2ludGVyLWV2ZW50cycsIHRydWUsIHRoaXMuJC5zY3JvbGxlcik7XG4gICAgfVxuICAgIGxldCBjZWxsO1xuICAgIGlmICh1c2VTaGFkb3cpIHtcbiAgICAgIGNlbGwgPSB0aGlzLnNoYWRvd1Jvb3QuZWxlbWVudEZyb21Qb2ludCh4LCB5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2VsbCA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoeCwgeSk7XG5cbiAgICAgIC8vIFdvcmthcm91bmQgYSBGRjU4IGJ1Z1xuICAgICAgaWYgKGNlbGwubG9jYWxOYW1lID09PSAndmFhZGluLWdyaWQtY2VsbC1jb250ZW50Jykge1xuICAgICAgICBjZWxsID0gY2VsbC5hc3NpZ25lZFNsb3QucGFyZW50Tm9kZTtcbiAgICAgIH1cblxuICAgIH1cbiAgICB0aGlzLl90b2dnbGVBdHRyaWJ1dGUoJ25vLWNvbnRlbnQtcG9pbnRlci1ldmVudHMnLCBmYWxzZSwgdGhpcy4kLnNjcm9sbGVyKTtcblxuICAgIC8vIE1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyBhY3R1YWxseSBhIGNlbGxcbiAgICBpZiAoY2VsbCAmJiBjZWxsLl9jb2x1bW4pIHtcbiAgICAgIHJldHVybiBjZWxsO1xuICAgIH1cbiAgfVxuXG4gIF91cGRhdGVHaG9zdFBvc2l0aW9uKGV2ZW50Q2xpZW50WCwgZXZlbnRDbGllbnRZKSB7XG4gICAgY29uc3QgZ2hvc3RSZWN0ID0gdGhpcy5fcmVvcmRlckdob3N0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIC8vIC8vIFRoaXMgaXMgd2hlcmUgd2Ugd2FudCB0byBwb3NpdGlvbiB0aGUgZ2hvc3RcbiAgICBjb25zdCB0YXJnZXRMZWZ0ID0gZXZlbnRDbGllbnRYIC0gZ2hvc3RSZWN0LndpZHRoIC8gMjtcbiAgICBjb25zdCB0YXJnZXRUb3AgPSBldmVudENsaWVudFkgLSBnaG9zdFJlY3QuaGVpZ2h0IC8gMjtcbiAgICAvLyBDdXJyZW50IHBvc2l0aW9uXG4gICAgY29uc3QgX2xlZnQgPSBwYXJzZUludCh0aGlzLl9yZW9yZGVyR2hvc3QuX2xlZnQgfHwgMCk7XG4gICAgY29uc3QgX3RvcCA9IHBhcnNlSW50KHRoaXMuX3Jlb3JkZXJHaG9zdC5fdG9wIHx8IDApO1xuICAgIC8vIFJlcG9zaXRpb24gdGhlIGdob3N0XG4gICAgdGhpcy5fcmVvcmRlckdob3N0Ll9sZWZ0ID0gX2xlZnQgLSAoZ2hvc3RSZWN0LmxlZnQgLSB0YXJnZXRMZWZ0KTtcbiAgICB0aGlzLl9yZW9yZGVyR2hvc3QuX3RvcCA9IF90b3AgLSAoZ2hvc3RSZWN0LnRvcCAtIHRhcmdldFRvcCk7XG4gICAgdGhpcy5fcmVvcmRlckdob3N0LnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUoJHt0aGlzLl9yZW9yZGVyR2hvc3QuX2xlZnR9cHgsICR7dGhpcy5fcmVvcmRlckdob3N0Ll90b3B9cHgpYDtcbiAgfVxuXG4gIF9nZXRJbm5lclRleHQoZSkge1xuICAgIGlmIChlLmxvY2FsTmFtZSkge1xuICAgICAgLy8gQ3VzdG9tIGltcGxlbWVudGF0aW9uIG5lZWRlZCBzaW5jZSBJRTExIGRvZXNuJ3QgcmVzcGVjdCB0aGUgc3BlYyBpbiBjYXNlIG9mIGhpZGRlbiBlbGVtZW50c1xuICAgICAgaWYgKGdldENvbXB1dGVkU3R5bGUoZSkuZGlzcGxheSA9PT0gJ25vbmUnKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKGUuY2hpbGROb2RlcykubWFwKG4gPT4gdGhpcy5fZ2V0SW5uZXJUZXh0KG4pKS5qb2luKCcnKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGUudGV4dENvbnRlbnQ7XG4gICAgfVxuICB9XG5cbiAgX3VwZGF0ZUdob3N0KGNlbGwpIHtcbiAgICBjb25zdCBnaG9zdCA9IHRoaXMuX3Jlb3JkZXJHaG9zdDtcbiAgICBnaG9zdC50ZXh0Q29udGVudCA9IHRoaXMuX2dldElubmVyVGV4dChjZWxsLl9jb250ZW50KTtcbiAgICBjb25zdCBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGNlbGwpO1xuICAgIFsnYm94U2l6aW5nJywgJ2Rpc3BsYXknLCAnd2lkdGgnLCAnaGVpZ2h0JywgJ2JhY2tncm91bmQnLCAnYWxpZ25JdGVtcycsICdwYWRkaW5nJywgJ2JvcmRlcicsICdmbGV4LWRpcmVjdGlvbicsICdvdmVyZmxvdyddXG4gICAgICAuZm9yRWFjaChwcm9wZXJ0eU5hbWUgPT4gZ2hvc3Quc3R5bGVbcHJvcGVydHlOYW1lXSA9IHN0eWxlW3Byb3BlcnR5TmFtZV0pO1xuICAgIHJldHVybiBnaG9zdDtcbiAgfVxuXG4gIF91cGRhdGVPcmRlcnMoY29sdW1uVHJlZSwgc3BsaWNlcykge1xuICAgIGlmIChjb2x1bW5UcmVlID09PSB1bmRlZmluZWQgfHwgc3BsaWNlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gUmVzZXQgYWxsIGNvbHVtbiBvcmRlcnNcbiAgICBjb2x1bW5UcmVlWzBdLmZvckVhY2goKGNvbHVtbiwgaW5kZXgpID0+IGNvbHVtbi5fb3JkZXIgPSAwKTtcbiAgICAvLyBTZXQgb3JkZXIgbnVtYmVycyB0byB0b3AtbGV2ZWwgY29sdW1uc1xuICAgIGNvbHVtblRyZWVbMF0uZm9yRWFjaCgoY29sdW1uLCBpbmRleCkgPT4gY29sdW1uLl9vcmRlciA9IChpbmRleCArIDEpICogdGhpcy5fb3JkZXJCYXNlU2NvcGUpO1xuICB9XG5cbiAgX3NldFNpYmxpbmdzUmVvcmRlclN0YXR1cyhjb2x1bW4sIHN0YXR1cykge1xuICAgIEFycmF5LmZyb20oY29sdW1uLnBhcmVudE5vZGUuY2hpbGRyZW4pXG4gICAgICAuZmlsdGVyKGNoaWxkID0+IC9jb2x1bW4vLnRlc3QoY2hpbGQubG9jYWxOYW1lKSAmJiB0aGlzLl9pc1N3YXBBbGxvd2VkKGNoaWxkLCBjb2x1bW4pKVxuICAgICAgLmZvckVhY2goc2libGluZyA9PiBzaWJsaW5nLl9yZW9yZGVyU3RhdHVzID0gc3RhdHVzKTtcbiAgfVxuXG4gIF9hdXRvU2Nyb2xsZXIoKSB7XG4gICAgaWYgKHRoaXMuX2xhc3REcmFnQ2xpZW50WCkge1xuICAgICAgY29uc3QgcmlnaHREaWZmID0gdGhpcy5fbGFzdERyYWdDbGllbnRYIC0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5yaWdodCArIDUwO1xuICAgICAgY29uc3QgbGVmdERpZmYgPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLSB0aGlzLl9sYXN0RHJhZ0NsaWVudFggKyA1MDtcblxuICAgICAgaWYgKHJpZ2h0RGlmZiA+IDApIHtcbiAgICAgICAgdGhpcy4kLnRhYmxlLnNjcm9sbExlZnQgKz0gcmlnaHREaWZmIC8gMTA7XG4gICAgICB9IGVsc2UgaWYgKGxlZnREaWZmID4gMCkge1xuICAgICAgICB0aGlzLiQudGFibGUuc2Nyb2xsTGVmdCAtPSBsZWZ0RGlmZiAvIDEwO1xuICAgICAgfVxuICAgICAgdGhpcy5fc2Nyb2xsSGFuZGxlcigpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9kcmFnZ2VkQ29sdW1uKSB7XG4gICAgICB0aGlzLmFzeW5jKHRoaXMuX2F1dG9TY3JvbGxlciwgMTApO1xuICAgIH1cbiAgfVxuXG4gIF9pc1N3YXBBbGxvd2VkKGNvbHVtbjEsIGNvbHVtbjIpIHtcbiAgICBpZiAoY29sdW1uMSAmJiBjb2x1bW4yKSB7XG4gICAgICBjb25zdCBkaWZmZXJlbnRDb2x1bW5zID0gY29sdW1uMSAhPT0gY29sdW1uMjtcbiAgICAgIGNvbnN0IHNhbWVQYXJlbnQgPSBjb2x1bW4xLnBhcmVudEVsZW1lbnQgPT09IGNvbHVtbjIucGFyZW50RWxlbWVudDtcbiAgICAgIGNvbnN0IHNhbWVGcm96ZW4gPSBjb2x1bW4xLmZyb3plbiA9PT0gY29sdW1uMi5mcm96ZW47XG4gICAgICByZXR1cm4gZGlmZmVyZW50Q29sdW1ucyAmJiBzYW1lUGFyZW50ICYmIHNhbWVGcm96ZW47XG4gICAgfVxuICB9XG5cbiAgX2lzU3dhcHBhYmxlQnlQb3NpdGlvbih0YXJnZXRDb2x1bW4sIGNsaWVudFgpIHtcbiAgICBjb25zdCB0YXJnZXRDZWxsID1cbiAgICAgIEFycmF5LmZyb20odGhpcy4kLmhlYWRlci5xdWVyeVNlbGVjdG9yQWxsKCd0cjpub3QoW2hpZGRlbl0pIFtwYXJ0fj1cImNlbGxcIl0nKSkuZmlsdGVyKGNlbGwgPT4gdGFyZ2V0Q29sdW1uLmNvbnRhaW5zKGNlbGwuX2NvbHVtbikpWzBdO1xuICAgIGNvbnN0IHNvdXJjZUNlbGxSZWN0ID0gdGhpcy4kLmhlYWRlci5xdWVyeVNlbGVjdG9yKCd0cjpub3QoW2hpZGRlbl0pIFtyZW9yZGVyLXN0YXR1cz1kcmFnZ2luZ10nKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCB0YXJnZXRSZWN0ID0gdGFyZ2V0Q2VsbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBpZiAodGFyZ2V0UmVjdC5sZWZ0ID4gc291cmNlQ2VsbFJlY3QubGVmdCkge1xuICAgICAgcmV0dXJuIGNsaWVudFggPiB0YXJnZXRSZWN0LnJpZ2h0IC0gc291cmNlQ2VsbFJlY3Qud2lkdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjbGllbnRYIDwgdGFyZ2V0UmVjdC5sZWZ0ICsgc291cmNlQ2VsbFJlY3Qud2lkdGg7XG4gICAgfVxuICB9XG5cbiAgX3N3YXBDb2x1bW5PcmRlcnMoY29sdW1uMSwgY29sdW1uMikge1xuICAgIGNvbnN0IF9vcmRlciA9IGNvbHVtbjEuX29yZGVyO1xuICAgIGNvbHVtbjEuX29yZGVyID0gY29sdW1uMi5fb3JkZXI7XG4gICAgY29sdW1uMi5fb3JkZXIgPSBfb3JkZXI7XG4gICAgdGhpcy5fdXBkYXRlTGFzdEZyb3plbigpO1xuICAgIHRoaXMuX3VwZGF0ZUZpcnN0QW5kTGFzdENvbHVtbigpO1xuICB9XG5cbiAgX2dldFRhcmdldENvbHVtbih0YXJnZXRDZWxsLCBkcmFnZ2VkQ29sdW1uKSB7XG4gICAgaWYgKHRhcmdldENlbGwgJiYgZHJhZ2dlZENvbHVtbikge1xuICAgICAgbGV0IGNhbmRpZGF0ZSA9IHRhcmdldENlbGwuX2NvbHVtbjtcbiAgICAgIHdoaWxlIChjYW5kaWRhdGUucGFyZW50RWxlbWVudCAhPT0gZHJhZ2dlZENvbHVtbi5wYXJlbnRFbGVtZW50ICYmIGNhbmRpZGF0ZSAhPT0gdGhpcykge1xuICAgICAgICBjYW5kaWRhdGUgPSBjYW5kaWRhdGUucGFyZW50RWxlbWVudDtcbiAgICAgIH1cbiAgICAgIGlmIChjYW5kaWRhdGUucGFyZW50RWxlbWVudCA9PT0gZHJhZ2dlZENvbHVtbi5wYXJlbnRFbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGFyZ2V0Q2VsbC5fY29sdW1uO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlZCB3aGVuIHRoZSBjb2x1bW5zIGluIHRoZSBncmlkIGFyZSByZW9yZGVyZWQuXG4gICAqXG4gICAqIEBldmVudCBjb2x1bW4tcmVvcmRlclxuICAgKiBAcGFyYW0ge09iamVjdH0gZGV0YWlsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkZXRhaWwuY29sdW1ucyB0aGUgY29sdW1ucyBpbiB0aGUgbmV3IG9yZGVyXG4gICAqL1xufTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxOCBWYWFkaW4gTHRkLlxuVGhpcyBwcm9ncmFtIGlzIGF2YWlsYWJsZSB1bmRlciBBcGFjaGUgTGljZW5zZSBWZXJzaW9uIDIuMCwgYXZhaWxhYmxlIGF0IGh0dHBzOi8vdmFhZGluLmNvbS9saWNlbnNlL1xuKi9cbmltcG9ydCB7IFBvbHltZXJFbGVtZW50IH0gZnJvbSAnQHBvbHltZXIvcG9seW1lci9wb2x5bWVyLWVsZW1lbnQuanMnO1xuXG5pbXBvcnQgeyBGbGF0dGVuZWROb2Rlc09ic2VydmVyIH0gZnJvbSAnQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvZmxhdHRlbmVkLW5vZGVzLW9ic2VydmVyLmpzJztcbmltcG9ydCB7IFRlbXBsYXRpemVyIH0gZnJvbSAnLi92YWFkaW4tZ3JpZC10ZW1wbGF0aXplci5qcyc7XG5cbi8qKlxuICogQHBvbHltZXJNaXhpblxuICovXG5leHBvcnQgY29uc3QgQ29sdW1uQmFzZU1peGluID0gc3VwZXJDbGFzcyA9PiBjbGFzcyBDb2x1bW5CYXNlTWl4aW4gZXh0ZW5kcyBzdXBlckNsYXNzIHtcbiAgc3RhdGljIGdldCBwcm9wZXJ0aWVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvKipcbiAgICAgICAqIFdoZW4gc2V0IHRvIHRydWUsIHRoZSBjb2x1bW4gaXMgdXNlci1yZXNpemFibGUuXG4gICAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAgICovXG4gICAgICByZXNpemFibGU6IHtcbiAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICh0aGlzLmxvY2FsTmFtZSA9PT0gJ3ZhYWRpbi1ncmlkLWNvbHVtbi1ncm91cCcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gICAgICAgICAgaWYgKHBhcmVudCAmJiBwYXJlbnQubG9jYWxOYW1lID09PSAndmFhZGluLWdyaWQtY29sdW1uLWdyb3VwJykge1xuICAgICAgICAgICAgcmV0dXJuIHBhcmVudC5yZXNpemFibGUgfHwgZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIF9oZWFkZXJUZW1wbGF0ZToge1xuICAgICAgICB0eXBlOiBPYmplY3RcbiAgICAgIH0sXG5cbiAgICAgIF9mb290ZXJUZW1wbGF0ZToge1xuICAgICAgICB0eXBlOiBPYmplY3RcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogV2hlbiB0cnVlLCB0aGUgY29sdW1uIGlzIGZyb3plbi4gV2hlbiBhIGNvbHVtbiBpbnNpZGUgb2YgYSBjb2x1bW4gZ3JvdXAgaXMgZnJvemVuLFxuICAgICAgICogYWxsIG9mIHRoZSBzaWJsaW5nIGNvbHVtbnMgaW5zaWRlIHRoZSBncm91cCB3aWxsIGdldCBmcm96ZW4gYWxzby5cbiAgICAgICAqL1xuICAgICAgZnJvemVuOiB7XG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgIHZhbHVlOiBmYWxzZVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBXaGVuIHNldCB0byB0cnVlLCB0aGUgY2VsbHMgZm9yIHRoaXMgY29sdW1uIGFyZSBoaWRkZW4uXG4gICAgICAgKi9cbiAgICAgIGhpZGRlbjoge1xuICAgICAgICB0eXBlOiBCb29sZWFuXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFRleHQgY29udGVudCB0byBkaXNwbGF5IGluIHRoZSBoZWFkZXIgY2VsbCBvZiB0aGUgY29sdW1uLlxuICAgICAgICovXG4gICAgICBoZWFkZXI6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEFsaWducyB0aGUgY29sdW1ucyBjZWxsIGNvbnRlbnQgaG9yaXpvbnRhbGx5LlxuICAgICAgICogU3VwcG9ydGVkIHZhbHVlczogXCJzdGFydFwiLCBcImNlbnRlclwiIGFuZCBcImVuZFwiLlxuICAgICAgICovXG4gICAgICB0ZXh0QWxpZ246IHtcbiAgICAgICAgdHlwZTogU3RyaW5nXG4gICAgICB9LFxuXG4gICAgICBfbGFzdEZyb3plbjoge1xuICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICB2YWx1ZTogZmFsc2VcbiAgICAgIH0sXG5cbiAgICAgIF9vcmRlcjogTnVtYmVyLFxuXG4gICAgICBfcmVvcmRlclN0YXR1czogQm9vbGVhbixcblxuICAgICAgX2VtcHR5Q2VsbHM6IEFycmF5LFxuXG4gICAgICBfaGVhZGVyQ2VsbDogT2JqZWN0LFxuXG4gICAgICBfZm9vdGVyQ2VsbDogT2JqZWN0LFxuXG4gICAgICBfZ3JpZDogT2JqZWN0LFxuXG4gICAgICAvKipcbiAgICAgICAqIEN1c3RvbSBmdW5jdGlvbiBmb3IgcmVuZGVyaW5nIHRoZSBoZWFkZXIgY29udGVudC5cbiAgICAgICAqIFJlY2VpdmVzIHR3byBhcmd1bWVudHM6XG4gICAgICAgKlxuICAgICAgICogLSBgcm9vdGAgVGhlIGhlYWRlciBjZWxsIGNvbnRlbnQgRE9NIGVsZW1lbnQuIEFwcGVuZCB5b3VyIGNvbnRlbnQgdG8gaXQuXG4gICAgICAgKiAtIGBjb2x1bW5gIFRoZSBgPHZhYWRpbi1ncmlkLWNvbHVtbj5gIGVsZW1lbnQuXG4gICAgICAgKi9cbiAgICAgIGhlYWRlclJlbmRlcmVyOiBGdW5jdGlvbixcblxuICAgICAgLyoqXG4gICAgICAgKiBDdXN0b20gZnVuY3Rpb24gZm9yIHJlbmRlcmluZyB0aGUgZm9vdGVyIGNvbnRlbnQuXG4gICAgICAgKiBSZWNlaXZlcyB0d28gYXJndW1lbnRzOlxuICAgICAgICpcbiAgICAgICAqIC0gYHJvb3RgIFRoZSBmb290ZXIgY2VsbCBjb250ZW50IERPTSBlbGVtZW50LiBBcHBlbmQgeW91ciBjb250ZW50IHRvIGl0LlxuICAgICAgICogLSBgY29sdW1uYCBUaGUgYDx2YWFkaW4tZ3JpZC1jb2x1bW4+YCBlbGVtZW50LlxuICAgICAgICovXG4gICAgICBmb290ZXJSZW5kZXJlcjogRnVuY3Rpb25cbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGdldCBvYnNlcnZlcnMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICdfd2lkdGhDaGFuZ2VkKHdpZHRoLCBfaGVhZGVyQ2VsbCwgX2Zvb3RlckNlbGwsIF9jZWxscy4qKScsXG4gICAgICAnX2Zyb3plbkNoYW5nZWQoZnJvemVuLCBfaGVhZGVyQ2VsbCwgX2Zvb3RlckNlbGwsIF9jZWxscy4qKScsXG4gICAgICAnX2ZsZXhHcm93Q2hhbmdlZChmbGV4R3JvdywgX2hlYWRlckNlbGwsIF9mb290ZXJDZWxsLCBfY2VsbHMuKiknLFxuICAgICAgJ19wYXRoT3JIZWFkZXJDaGFuZ2VkKHBhdGgsIGhlYWRlciwgX2hlYWRlckNlbGwsIF9mb290ZXJDZWxsLCBfY2VsbHMuKiwgcmVuZGVyZXIsIGhlYWRlclJlbmRlcmVyLCBfYm9keVRlbXBsYXRlLCBfaGVhZGVyVGVtcGxhdGUpJyxcbiAgICAgICdfdGV4dEFsaWduQ2hhbmdlZCh0ZXh0QWxpZ24sIF9jZWxscy4qLCBfaGVhZGVyQ2VsbCwgX2Zvb3RlckNlbGwpJyxcbiAgICAgICdfb3JkZXJDaGFuZ2VkKF9vcmRlciwgX2hlYWRlckNlbGwsIF9mb290ZXJDZWxsLCBfY2VsbHMuKiknLFxuICAgICAgJ19sYXN0RnJvemVuQ2hhbmdlZChfbGFzdEZyb3plbiknLFxuICAgICAgJ19zZXRCb2R5VGVtcGxhdGVPclJlbmRlcmVyKF9ib2R5VGVtcGxhdGUsIHJlbmRlcmVyLCBfY2VsbHMsIF9jZWxscy4qKScsXG4gICAgICAnX3NldEhlYWRlclRlbXBsYXRlT3JSZW5kZXJlcihfaGVhZGVyVGVtcGxhdGUsIGhlYWRlclJlbmRlcmVyLCBfaGVhZGVyQ2VsbCknLFxuICAgICAgJ19zZXRGb290ZXJUZW1wbGF0ZU9yUmVuZGVyZXIoX2Zvb3RlclRlbXBsYXRlLCBmb290ZXJSZW5kZXJlciwgX2Zvb3RlckNlbGwpJyxcbiAgICAgICdfcmVzaXphYmxlQ2hhbmdlZChyZXNpemFibGUsIF9oZWFkZXJDZWxsKScsXG4gICAgICAnX3Jlb3JkZXJTdGF0dXNDaGFuZ2VkKF9yZW9yZGVyU3RhdHVzLCBfaGVhZGVyQ2VsbCwgX2Zvb3RlckNlbGwsIF9jZWxscy4qKScsXG4gICAgICAnX2hpZGRlbkNoYW5nZWQoaGlkZGVuLCBfaGVhZGVyQ2VsbCwgX2Zvb3RlckNlbGwsIF9jZWxscy4qKSdcbiAgICBdO1xuICB9XG5cbiAgLyoqIEBwcm90ZWN0ZWQgKi9cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcblxuICAgIHRoaXMuX2JvZHlUZW1wbGF0ZSAmJiAodGhpcy5fYm9keVRlbXBsYXRlLnRlbXBsYXRpemVyLl9ncmlkID0gdGhpcy5fZ3JpZCk7XG4gICAgdGhpcy5faGVhZGVyVGVtcGxhdGUgJiYgKHRoaXMuX2hlYWRlclRlbXBsYXRlLnRlbXBsYXRpemVyLl9ncmlkID0gdGhpcy5fZ3JpZCk7XG4gICAgdGhpcy5fZm9vdGVyVGVtcGxhdGUgJiYgKHRoaXMuX2Zvb3RlclRlbXBsYXRlLnRlbXBsYXRpemVyLl9ncmlkID0gdGhpcy5fZ3JpZCk7XG5cbiAgICB0aGlzLl90ZW1wbGF0ZU9ic2VydmVyLmZsdXNoKCk7XG4gICAgaWYgKCF0aGlzLl9ib2R5VGVtcGxhdGUpIHtcbiAgICAgIC8vIFRoZSBvYnNlcnZlciBtaWdodCBub3QgaGF2ZSB0cmlnZ2VyZWQgaWYgdGhlIHRhZyBpcyBlbXB0eS4gUnVuIG1hbnVhbGx5LlxuICAgICAgdGhpcy5fdGVtcGxhdGVPYnNlcnZlci5jYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICB0aGlzLl9hbGxDZWxscy5mb3JFYWNoKGNlbGwgPT4ge1xuICAgICAgICBpZiAoIWNlbGwuX2NvbnRlbnQucGFyZW50Tm9kZSkge1xuICAgICAgICAgIHRoaXMuX2dyaWQgJiYgdGhpcy5fZ3JpZC5hcHBlbmRDaGlsZChjZWxsLl9jb250ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKiogQHByb3RlY3RlZCAqL1xuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpO1xuXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIGlmICghdGhpcy5fZmluZEhvc3RHcmlkKCkpIHtcbiAgICAgICAgdGhpcy5fYWxsQ2VsbHMuZm9yRWFjaChjZWxsID0+IHtcbiAgICAgICAgICBpZiAoY2VsbC5fY29udGVudC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICBjZWxsLl9jb250ZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2VsbC5fY29udGVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMuX2dyaWRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIF9maW5kSG9zdEdyaWQoKSB7XG4gICAgbGV0IGVsID0gdGhpcztcbiAgICAvLyBDdXN0b20gZWxlbWVudHMgZXh0ZW5kaW5nIGdyaWQgbXVzdCBoYXZlIGEgc3BlY2lmaWMgbG9jYWxOYW1lXG4gICAgd2hpbGUgKGVsICYmICEvXnZhYWRpbi4qZ3JpZCgtcHJvKT8kLy50ZXN0KGVsLmxvY2FsTmFtZSkpIHtcbiAgICAgIGVsID0gZWwuYXNzaWduZWRTbG90ID8gZWwuYXNzaWduZWRTbG90LnBhcmVudE5vZGUgOiBlbC5wYXJlbnROb2RlO1xuICAgIH1cbiAgICByZXR1cm4gZWwgfHwgdW5kZWZpbmVkO1xuICB9XG5cbiAgZ2V0IF9ncmlkKCkge1xuICAgIGlmICghdGhpcy5fZ3JpZFZhbHVlKSB7XG4gICAgICB0aGlzLl9ncmlkVmFsdWUgPSB0aGlzLl9maW5kSG9zdEdyaWQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2dyaWRWYWx1ZTtcbiAgfVxuXG4gIGdldCBfYWxsQ2VsbHMoKSB7XG4gICAgcmV0dXJuIFtdXG4gICAgICAuY29uY2F0KHRoaXMuX2NlbGxzIHx8IFtdKVxuICAgICAgLmNvbmNhdCh0aGlzLl9lbXB0eUNlbGxzIHx8IFtdKVxuICAgICAgLmNvbmNhdCh0aGlzLl9oZWFkZXJDZWxsKVxuICAgICAgLmNvbmNhdCh0aGlzLl9mb290ZXJDZWxsKVxuICAgICAgLmZpbHRlcihjZWxsID0+IGNlbGwpO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuX3RlbXBsYXRlT2JzZXJ2ZXIgPSBuZXcgRmxhdHRlbmVkTm9kZXNPYnNlcnZlcih0aGlzLCBpbmZvID0+IHtcbiAgICAgIHRoaXMuX2hlYWRlclRlbXBsYXRlID0gdGhpcy5fcHJlcGFyZUhlYWRlclRlbXBsYXRlKCk7XG4gICAgICB0aGlzLl9mb290ZXJUZW1wbGF0ZSA9IHRoaXMuX3ByZXBhcmVGb290ZXJUZW1wbGF0ZSgpO1xuICAgICAgdGhpcy5fYm9keVRlbXBsYXRlID0gdGhpcy5fcHJlcGFyZUJvZHlUZW1wbGF0ZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgX3ByZXBhcmVIZWFkZXJUZW1wbGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJlcGFyZVRlbXBsYXRpemVyKHRoaXMuX2ZpbmRUZW1wbGF0ZSh0cnVlKSB8fCBudWxsLCB7fSk7XG4gIH1cblxuICBfcHJlcGFyZUZvb3RlclRlbXBsYXRlKCkge1xuICAgIHJldHVybiB0aGlzLl9wcmVwYXJlVGVtcGxhdGl6ZXIodGhpcy5fZmluZFRlbXBsYXRlKGZhbHNlLCB0cnVlKSB8fCBudWxsLCB7fSk7XG4gIH1cblxuICBfcHJlcGFyZUJvZHlUZW1wbGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJlcGFyZVRlbXBsYXRpemVyKHRoaXMuX2ZpbmRUZW1wbGF0ZSgpIHx8IG51bGwpO1xuICB9XG5cbiAgX3ByZXBhcmVUZW1wbGF0aXplcih0ZW1wbGF0ZSwgaW5zdGFuY2VQcm9wcykge1xuICAgIGlmICh0ZW1wbGF0ZSAmJiAhdGVtcGxhdGUudGVtcGxhdGl6ZXIpIHtcbiAgICAgIGNvbnN0IHRlbXBsYXRpemVyID0gbmV3IFRlbXBsYXRpemVyKCk7XG4gICAgICB0ZW1wbGF0aXplci5fZ3JpZCA9IHRoaXMuX2dyaWQ7XG4gICAgICB0ZW1wbGF0aXplci5kYXRhSG9zdCA9IHRoaXMuZGF0YUhvc3Q7XG4gICAgICB0ZW1wbGF0aXplci5faW5zdGFuY2VQcm9wcyA9IGluc3RhbmNlUHJvcHMgfHwgdGVtcGxhdGl6ZXIuX2luc3RhbmNlUHJvcHM7XG4gICAgICB0ZW1wbGF0aXplci50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgICAgdGVtcGxhdGUudGVtcGxhdGl6ZXIgPSB0ZW1wbGF0aXplcjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGVtcGxhdGU7XG4gIH1cblxuICBfcmVuZGVySGVhZGVyQW5kRm9vdGVyKCkge1xuICAgIGlmICh0aGlzLmhlYWRlclJlbmRlcmVyKSB7XG4gICAgICB0aGlzLl9fcnVuUmVuZGVyZXIodGhpcy5oZWFkZXJSZW5kZXJlciwgdGhpcy5faGVhZGVyQ2VsbCk7XG4gICAgfVxuICAgIGlmICh0aGlzLmZvb3RlclJlbmRlcmVyKSB7XG4gICAgICB0aGlzLl9fcnVuUmVuZGVyZXIodGhpcy5mb290ZXJSZW5kZXJlciwgdGhpcy5fZm9vdGVyQ2VsbCk7XG4gICAgfVxuICB9XG5cbiAgX19ydW5SZW5kZXJlcihyZW5kZXJlciwgY2VsbCwgcm93RGF0YSkge1xuICAgIGNvbnN0IGFyZ3MgPSBbY2VsbC5fY29udGVudCwgdGhpc107XG4gICAgaWYgKHJvd0RhdGEgJiYgcm93RGF0YS5pdGVtKSB7XG4gICAgICBhcmdzLnB1c2gocm93RGF0YSk7XG4gICAgfVxuICAgIHJlbmRlcmVyLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgX19zZXRDb2x1bW5UZW1wbGF0ZU9yUmVuZGVyZXIodGVtcGxhdGUsIHJlbmRlcmVyLCBjZWxscykge1xuICAgIGlmICh0ZW1wbGF0ZSAmJiByZW5kZXJlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3Ugc2hvdWxkIG9ubHkgdXNlIGVpdGhlciBhIHJlbmRlcmVyIG9yIGEgdGVtcGxhdGUnKTtcbiAgICB9XG5cbiAgICBjZWxscy5mb3JFYWNoKGNlbGwgPT4ge1xuICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLl9ncmlkLl9fZ2V0Um93TW9kZWwoY2VsbC5wYXJlbnRFbGVtZW50KTtcblxuICAgICAgaWYgKHJlbmRlcmVyKSB7XG4gICAgICAgIGNlbGwuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG5cbiAgICAgICAgaWYgKG1vZGVsLml0ZW0gfHwgcmVuZGVyZXIgPT09IHRoaXMuaGVhZGVyUmVuZGVyZXIgfHwgcmVuZGVyZXIgPT09IHRoaXMuZm9vdGVyUmVuZGVyZXIpIHtcbiAgICAgICAgICB0aGlzLl9fcnVuUmVuZGVyZXIocmVuZGVyZXIsIGNlbGwsIG1vZGVsKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjZWxsLl90ZW1wbGF0ZSAhPT0gdGVtcGxhdGUpIHtcbiAgICAgICAgY2VsbC5fdGVtcGxhdGUgPSB0ZW1wbGF0ZTtcblxuICAgICAgICBjZWxsLl9jb250ZW50LmlubmVySFRNTCA9ICcnO1xuICAgICAgICB0ZW1wbGF0ZS50ZW1wbGF0aXplci5fZ3JpZCA9IHRlbXBsYXRlLnRlbXBsYXRpemVyLl9ncmlkIHx8IHRoaXMuX2dyaWQ7XG4gICAgICAgIGNvbnN0IGluc3QgPSB0ZW1wbGF0ZS50ZW1wbGF0aXplci5jcmVhdGVJbnN0YW5jZSgpO1xuICAgICAgICBjZWxsLl9jb250ZW50LmFwcGVuZENoaWxkKGluc3Qucm9vdCk7XG4gICAgICAgIGNlbGwuX2luc3RhbmNlID0gaW5zdDtcbiAgICAgICAgaWYgKG1vZGVsLml0ZW0pIHtcbiAgICAgICAgICBjZWxsLl9pbnN0YW5jZS5zZXRQcm9wZXJ0aWVzKG1vZGVsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgX3NldEJvZHlUZW1wbGF0ZU9yUmVuZGVyZXIodGVtcGxhdGUsIHJlbmRlcmVyLCBjZWxscywgc3BsaWNlcykge1xuICAgIGlmICgodGVtcGxhdGUgfHwgcmVuZGVyZXIpICYmIGNlbGxzKSB7XG4gICAgICB0aGlzLl9fc2V0Q29sdW1uVGVtcGxhdGVPclJlbmRlcmVyKHRlbXBsYXRlLCByZW5kZXJlciwgY2VsbHMpO1xuICAgIH1cbiAgfVxuXG4gIF9zZXRIZWFkZXJUZW1wbGF0ZU9yUmVuZGVyZXIoaGVhZGVyVGVtcGxhdGUsIGhlYWRlclJlbmRlcmVyLCBoZWFkZXJDZWxsKSB7XG4gICAgaWYgKChoZWFkZXJUZW1wbGF0ZSB8fCBoZWFkZXJSZW5kZXJlcikgJiYgaGVhZGVyQ2VsbCkge1xuICAgICAgdGhpcy5fX3NldENvbHVtblRlbXBsYXRlT3JSZW5kZXJlcihoZWFkZXJUZW1wbGF0ZSwgaGVhZGVyUmVuZGVyZXIsIFtoZWFkZXJDZWxsXSk7XG4gICAgfVxuICB9XG5cbiAgX3NldEZvb3RlclRlbXBsYXRlT3JSZW5kZXJlcihmb290ZXJUZW1wbGF0ZSwgZm9vdGVyUmVuZGVyZXIsIGZvb3RlckNlbGwpIHtcbiAgICBpZiAoKGZvb3RlclRlbXBsYXRlIHx8IGZvb3RlclJlbmRlcmVyKSAmJiBmb290ZXJDZWxsKSB7XG4gICAgICB0aGlzLl9fc2V0Q29sdW1uVGVtcGxhdGVPclJlbmRlcmVyKGZvb3RlclRlbXBsYXRlLCBmb290ZXJSZW5kZXJlciwgW2Zvb3RlckNlbGxdKTtcbiAgICAgIHRoaXMuX2dyaWQuX191cGRhdGVIZWFkZXJGb290ZXJSb3dWaXNpYmlsaXR5KGZvb3RlckNlbGwucGFyZW50RWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgX3NlbGVjdEZpcnN0VGVtcGxhdGUoaGVhZGVyID0gZmFsc2UsIGZvb3RlciA9IGZhbHNlKSB7XG4gICAgcmV0dXJuIEZsYXR0ZW5lZE5vZGVzT2JzZXJ2ZXIuZ2V0RmxhdHRlbmVkTm9kZXModGhpcylcbiAgICAgIC5maWx0ZXIobm9kZSA9PlxuICAgICAgICBub2RlLmxvY2FsTmFtZSA9PT0gJ3RlbXBsYXRlJ1xuICAgICAgICAmJiBub2RlLmNsYXNzTGlzdC5jb250YWlucygnaGVhZGVyJykgPT09IGhlYWRlclxuICAgICAgICAmJiBub2RlLmNsYXNzTGlzdC5jb250YWlucygnZm9vdGVyJykgPT09IGZvb3RlclxuICAgICAgKVswXTtcbiAgfVxuXG4gIF9maW5kVGVtcGxhdGUoaGVhZGVyLCBmb290ZXIpIHtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IHRoaXMuX3NlbGVjdEZpcnN0VGVtcGxhdGUoaGVhZGVyLCBmb290ZXIpO1xuICAgIGlmICh0ZW1wbGF0ZSkge1xuICAgICAgaWYgKHRoaXMuZGF0YUhvc3QpIHtcbiAgICAgICAgLy8gc2V0IGRhdGFIb3N0IHRvIHRoZSBjb250ZXh0IHdoZXJlIHRlbXBsYXRlIGhhcyBiZWVuIGRlZmluZWRcbiAgICAgICAgdGVtcGxhdGUuX3Jvb3REYXRhSG9zdCA9IHRoaXMuZGF0YUhvc3QuX3Jvb3REYXRhSG9zdCB8fCB0aGlzLmRhdGFIb3N0O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGVtcGxhdGU7XG4gIH1cblxuICBfZmxleEdyb3dDaGFuZ2VkKGZsZXhHcm93LCBoZWFkZXJDZWxsLCBmb290ZXJDZWxsLCBjZWxscykge1xuICAgIGlmICh0aGlzLnBhcmVudEVsZW1lbnQgJiYgdGhpcy5wYXJlbnRFbGVtZW50Ll9jb2x1bW5Qcm9wQ2hhbmdlZCkge1xuICAgICAgdGhpcy5wYXJlbnRFbGVtZW50Ll9jb2x1bW5Qcm9wQ2hhbmdlZCgnZmxleEdyb3cnKTtcbiAgICB9XG5cbiAgICB0aGlzLl9hbGxDZWxscy5mb3JFYWNoKGNlbGwgPT4gY2VsbC5zdHlsZS5mbGV4R3JvdyA9IGZsZXhHcm93KTtcbiAgfVxuXG4gIF9vcmRlckNoYW5nZWQob3JkZXIsIGhlYWRlckNlbGwsIGZvb3RlckNlbGwsIGNlbGxzKSB7XG4gICAgdGhpcy5fYWxsQ2VsbHMuZm9yRWFjaChjZWxsID0+IGNlbGwuc3R5bGUub3JkZXIgPSBvcmRlcik7XG4gIH1cblxuICBfd2lkdGhDaGFuZ2VkKHdpZHRoLCBoZWFkZXJDZWxsLCBmb290ZXJDZWxsLCBjZWxscykge1xuICAgIGlmICh0aGlzLnBhcmVudEVsZW1lbnQgJiYgdGhpcy5wYXJlbnRFbGVtZW50Ll9jb2x1bW5Qcm9wQ2hhbmdlZCkge1xuICAgICAgdGhpcy5wYXJlbnRFbGVtZW50Ll9jb2x1bW5Qcm9wQ2hhbmdlZCgnd2lkdGgnKTtcbiAgICB9XG5cbiAgICB0aGlzLl9hbGxDZWxscy5mb3JFYWNoKGNlbGwgPT4gY2VsbC5zdHlsZS53aWR0aCA9IHdpZHRoKTtcblxuICAgIC8vIEZvcmNlIGEgcmVmbG93IHRvIHdvcmthcm91bmQgYnJvd3NlciBpc3N1ZXMgY2F1c2luZyBkb3VibGUgc2Nyb2xsYmFycyB0byBncmlkXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3ZhYWRpbi92YWFkaW4tZ3JpZC9pc3N1ZXMvMTU4NlxuICAgIGlmICh0aGlzLl9ncmlkICYmIHRoaXMuX2dyaWQuX19mb3JjZVJlZmxvdykge1xuICAgICAgdGhpcy5fZ3JpZC5fX2ZvcmNlUmVmbG93KCk7XG4gICAgfVxuICB9XG5cbiAgX2Zyb3plbkNoYW5nZWQoZnJvemVuLCBoZWFkZXJDZWxsLCBmb290ZXJDZWxsLCBjZWxscykge1xuICAgIGlmICh0aGlzLnBhcmVudEVsZW1lbnQgJiYgdGhpcy5wYXJlbnRFbGVtZW50Ll9jb2x1bW5Qcm9wQ2hhbmdlZCkge1xuICAgICAgdGhpcy5wYXJlbnRFbGVtZW50Ll9jb2x1bW5Qcm9wQ2hhbmdlZCgnZnJvemVuJywgZnJvemVuKTtcbiAgICB9XG5cbiAgICB0aGlzLl9hbGxDZWxscy5mb3JFYWNoKGNlbGwgPT4gdGhpcy5fdG9nZ2xlQXR0cmlidXRlKCdmcm96ZW4nLCBmcm96ZW4sIGNlbGwpKTtcblxuICAgIHRoaXMuX2dyaWQgJiYgdGhpcy5fZ3JpZC5fZnJvemVuQ2VsbHNDaGFuZ2VkICYmIHRoaXMuX2dyaWQuX2Zyb3plbkNlbGxzQ2hhbmdlZCgpO1xuICB9XG5cbiAgX2xhc3RGcm96ZW5DaGFuZ2VkKGxhc3RGcm96ZW4pIHtcbiAgICB0aGlzLl9hbGxDZWxscy5mb3JFYWNoKGNlbGwgPT4gdGhpcy5fdG9nZ2xlQXR0cmlidXRlKCdsYXN0LWZyb3plbicsIGxhc3RGcm96ZW4sIGNlbGwpKTtcblxuICAgIGlmICh0aGlzLnBhcmVudEVsZW1lbnQgJiYgdGhpcy5wYXJlbnRFbGVtZW50Ll9jb2x1bW5Qcm9wQ2hhbmdlZCkge1xuICAgICAgdGhpcy5wYXJlbnRFbGVtZW50Ll9sYXN0RnJvemVuID0gbGFzdEZyb3plbjtcbiAgICB9XG4gIH1cblxuICBfcGF0aE9ySGVhZGVyQ2hhbmdlZChwYXRoLCBoZWFkZXIsIGhlYWRlckNlbGwsIGZvb3RlckNlbGwsIGNlbGxzLCByZW5kZXJlciwgaGVhZGVyUmVuZGVyZXIsIGJvZHlUZW1wbGF0ZSwgaGVhZGVyVGVtcGxhdGUpIHtcbiAgICBjb25zdCBoYXNIZWFkZXJUZXh0ID0gaGVhZGVyICE9PSB1bmRlZmluZWQ7XG4gICAgaWYgKCFoZWFkZXJSZW5kZXJlciAmJiAhaGVhZGVyVGVtcGxhdGUgJiYgaGFzSGVhZGVyVGV4dCAmJiBoZWFkZXJDZWxsKSB7XG4gICAgICB0aGlzLl9fc2V0VGV4dENvbnRlbnQoaGVhZGVyQ2VsbC5fY29udGVudCwgaGVhZGVyKTtcbiAgICB9XG5cbiAgICBpZiAocGF0aCAmJiBjZWxscy52YWx1ZSkge1xuICAgICAgaWYgKCFyZW5kZXJlciAmJiAhYm9keVRlbXBsYXRlKSB7XG4gICAgICAgIGNvbnN0IHBhdGhSZW5kZXJlciA9IChyb290LCBvd25lciwge2l0ZW19KSA9PiB0aGlzLl9fc2V0VGV4dENvbnRlbnQocm9vdCwgdGhpcy5nZXQocGF0aCwgaXRlbSkpO1xuICAgICAgICB0aGlzLl9fc2V0Q29sdW1uVGVtcGxhdGVPclJlbmRlcmVyKHVuZGVmaW5lZCwgcGF0aFJlbmRlcmVyLCBjZWxscy52YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaGVhZGVyUmVuZGVyZXIgJiYgIWhlYWRlclRlbXBsYXRlICYmICFoYXNIZWFkZXJUZXh0ICYmIGhlYWRlckNlbGwgJiYgaGVhZGVyICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX19zZXRUZXh0Q29udGVudChoZWFkZXJDZWxsLl9jb250ZW50LCB0aGlzLl9nZW5lcmF0ZUhlYWRlcihwYXRoKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGhlYWRlckNlbGwpIHtcbiAgICAgIHRoaXMuX2dyaWQuX191cGRhdGVIZWFkZXJGb290ZXJSb3dWaXNpYmlsaXR5KGhlYWRlckNlbGwucGFyZW50RWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgX19zZXRUZXh0Q29udGVudChub2RlLCB0ZXh0Q29udGVudCkge1xuICAgIG5vZGUudGV4dENvbnRlbnQgIT09IHRleHRDb250ZW50ICYmIChub2RlLnRleHRDb250ZW50ID0gdGV4dENvbnRlbnQpO1xuICB9XG5cbiAgX2dlbmVyYXRlSGVhZGVyKHBhdGgpIHtcbiAgICByZXR1cm4gcGF0aFxuICAgICAgLnN1YnN0cihwYXRoLmxhc3RJbmRleE9mKCcuJykgKyAxKVxuICAgICAgLnJlcGxhY2UoLyhbQS1aXSkvZywgJy0kMScpLnRvTG93ZXJDYXNlKClcbiAgICAgIC5yZXBsYWNlKC8tL2csICcgJylcbiAgICAgIC5yZXBsYWNlKC9eLi8sIG1hdGNoID0+IG1hdGNoLnRvVXBwZXJDYXNlKCkpO1xuICB9XG5cbiAgX3RvZ2dsZUF0dHJpYnV0ZShuYW1lLCBib29sLCBub2RlKSB7XG4gICAgaWYgKG5vZGUuaGFzQXR0cmlidXRlKG5hbWUpID09PSAhYm9vbCkge1xuICAgICAgaWYgKGJvb2wpIHtcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgJycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX3Jlb3JkZXJTdGF0dXNDaGFuZ2VkKHJlb3JkZXJTdGF0dXMsIGhlYWRlckNlbGwsIGZvb3RlckNlbGwsIGNlbGxzKSB7XG4gICAgdGhpcy5fYWxsQ2VsbHMuZm9yRWFjaChjZWxsID0+IGNlbGwuc2V0QXR0cmlidXRlKCdyZW9yZGVyLXN0YXR1cycsIHJlb3JkZXJTdGF0dXMpKTtcbiAgfVxuXG4gIF9yZXNpemFibGVDaGFuZ2VkKHJlc2l6YWJsZSwgaGVhZGVyQ2VsbCkge1xuICAgIGlmIChyZXNpemFibGUgPT09IHVuZGVmaW5lZCB8fCBoZWFkZXJDZWxsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaGVhZGVyQ2VsbCkge1xuICAgICAgW2hlYWRlckNlbGxdLmNvbmNhdCh0aGlzLl9lbXB0eUNlbGxzKS5mb3JFYWNoKGNlbGwgPT4ge1xuICAgICAgICBpZiAoY2VsbCkge1xuICAgICAgICAgIGNvbnN0IGV4aXN0aW5nSGFuZGxlID0gY2VsbC5xdWVyeVNlbGVjdG9yKCdbcGFydH49XCJyZXNpemUtaGFuZGxlXCJdJyk7XG4gICAgICAgICAgaWYgKGV4aXN0aW5nSGFuZGxlKSB7XG4gICAgICAgICAgICBjZWxsLnJlbW92ZUNoaWxkKGV4aXN0aW5nSGFuZGxlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocmVzaXphYmxlKSB7XG4gICAgICAgICAgICBjb25zdCBoYW5kbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGhhbmRsZS5zZXRBdHRyaWJ1dGUoJ3BhcnQnLCAncmVzaXplLWhhbmRsZScpO1xuICAgICAgICAgICAgY2VsbC5hcHBlbmRDaGlsZChoYW5kbGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgX3RleHRBbGlnbkNoYW5nZWQodGV4dEFsaWduLCBfY2VsbHMsIF9oZWFkZXJDZWxsLCBfZm9vdGVyQ2VsbCkge1xuICAgIGlmICh0ZXh0QWxpZ24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoWydzdGFydCcsICdlbmQnLCAnY2VudGVyJ10uaW5kZXhPZih0ZXh0QWxpZ24pID09PSAtMSkge1xuICAgICAgY29uc29sZS53YXJuKCd0ZXh0QWxpZ24gY2FuIG9ubHkgYmUgc2V0IGFzIFwic3RhcnRcIiwgXCJlbmRcIiBvciBcImNlbnRlclwiJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHRleHRBbGlnbkZhbGxiYWNrO1xuICAgIGlmIChnZXRDb21wdXRlZFN0eWxlKHRoaXMuX2dyaWQpLmRpcmVjdGlvbiA9PT0gJ2x0cicpIHtcbiAgICAgIGlmICh0ZXh0QWxpZ24gPT09ICdzdGFydCcpIHtcbiAgICAgICAgdGV4dEFsaWduRmFsbGJhY2sgPSAnbGVmdCc7XG4gICAgICB9IGVsc2UgaWYgKHRleHRBbGlnbiA9PT0gJ2VuZCcpIHtcbiAgICAgICAgdGV4dEFsaWduRmFsbGJhY2sgPSAncmlnaHQnO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGV4dEFsaWduID09PSAnc3RhcnQnKSB7XG4gICAgICAgIHRleHRBbGlnbkZhbGxiYWNrID0gJ3JpZ2h0JztcbiAgICAgIH0gZWxzZSBpZiAodGV4dEFsaWduID09PSAnZW5kJykge1xuICAgICAgICB0ZXh0QWxpZ25GYWxsYmFjayA9ICdsZWZ0JztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9hbGxDZWxscy5mb3JFYWNoKGNlbGwgPT4ge1xuICAgICAgY2VsbC5fY29udGVudC5zdHlsZS50ZXh0QWxpZ24gPSB0ZXh0QWxpZ247XG4gICAgICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZShjZWxsLl9jb250ZW50KS50ZXh0QWxpZ24gIT09IHRleHRBbGlnbikge1xuICAgICAgICBjZWxsLl9jb250ZW50LnN0eWxlLnRleHRBbGlnbiA9IHRleHRBbGlnbkZhbGxiYWNrO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgX2hpZGRlbkNoYW5nZWQoaGlkZGVuLCBoZWFkZXJDZWxsLCBmb290ZXJDZWxsLCBjZWxscykge1xuICAgIGlmICh0aGlzLnBhcmVudEVsZW1lbnQgJiYgdGhpcy5wYXJlbnRFbGVtZW50Ll9jb2x1bW5Qcm9wQ2hhbmdlZCkge1xuICAgICAgdGhpcy5wYXJlbnRFbGVtZW50Ll9jb2x1bW5Qcm9wQ2hhbmdlZCgnaGlkZGVuJywgaGlkZGVuKTtcbiAgICB9XG5cbiAgICB0aGlzLl9hbGxDZWxscy5mb3JFYWNoKGNlbGwgPT4gdGhpcy5fdG9nZ2xlQXR0cmlidXRlKCdoaWRkZW4nLCBoaWRkZW4sIGNlbGwpKTtcblxuICAgIGlmICghIWhpZGRlbiAhPT0gISF0aGlzLl9wcmV2aW91c0hpZGRlbiAmJiB0aGlzLl9ncmlkKSB7XG4gICAgICB0aGlzLl9ncmlkLl91cGRhdGVMYXN0RnJvemVuICYmIHRoaXMuX2dyaWQuX3VwZGF0ZUxhc3RGcm96ZW4oKTtcbiAgICAgIHRoaXMuX2dyaWQubm90aWZ5UmVzaXplICYmIHRoaXMuX2dyaWQubm90aWZ5UmVzaXplKCk7XG4gICAgICB0aGlzLl9ncmlkLl9yZXNldEtleWJvYXJkTmF2aWdhdGlvbiAmJiB0aGlzLl9ncmlkLl9yZXNldEtleWJvYXJkTmF2aWdhdGlvbigpO1xuICAgIH1cbiAgICB0aGlzLl9wcmV2aW91c0hpZGRlbiA9IGhpZGRlbjtcbiAgfVxuXG59O1xuXG4vKipcbiAqIEEgYDx2YWFkaW4tZ3JpZC1jb2x1bW4+YCBpcyB1c2VkIHRvIGNvbmZpZ3VyZSBob3cgYSBjb2x1bW4gaW4gYDx2YWFkaW4tZ3JpZD5gXG4gKiBzaG91bGQgbG9vayBsaWtlLlxuICpcbiAqIFNlZSBgPHZhYWRpbi1ncmlkPmAgZG9jdW1lbnRhdGlvbiBhbmQgZGVtb3MgZm9yIGluc3RydWN0aW9ucyBhbmQgZXhhbXBsZXMgb24gaG93XG4gKiB0byBjb25maWd1cmUgdGhlIGA8dmFhZGluLWdyaWQtY29sdW1uPmAuXG4gKiBgYGBcbiAqXG4gKiBAbWVtYmVyb2YgVmFhZGluXG4gKiBAbWl4ZXMgVmFhZGluLkdyaWQuQ29sdW1uQmFzZU1peGluXG4gKi9cbmNsYXNzIEdyaWRDb2x1bW5FbGVtZW50IGV4dGVuZHMgQ29sdW1uQmFzZU1peGluKFBvbHltZXJFbGVtZW50KSB7XG4gIHN0YXRpYyBnZXQgaXMoKSB7XG4gICAgcmV0dXJuICd2YWFkaW4tZ3JpZC1jb2x1bW4nO1xuICB9XG5cbiAgc3RhdGljIGdldCBwcm9wZXJ0aWVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvKipcbiAgICAgICAqIFdpZHRoIG9mIHRoZSBjZWxscyBmb3IgdGhpcyBjb2x1bW4uXG4gICAgICAgKi9cbiAgICAgIHdpZHRoOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgdmFsdWU6ICcxMDBweCdcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogRmxleCBncm93IHJhdGlvIGZvciB0aGUgY2VsbCB3aWR0aHMuIFdoZW4gc2V0IHRvIDAsIGNlbGwgd2lkdGggaXMgZml4ZWQuXG4gICAgICAgKi9cbiAgICAgIGZsZXhHcm93OiB7XG4gICAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgICAgdmFsdWU6IDFcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQ3VzdG9tIGZ1bmN0aW9uIGZvciByZW5kZXJpbmcgdGhlIGNlbGwgY29udGVudC5cbiAgICAgICAqIFJlY2VpdmVzIHRocmVlIGFyZ3VtZW50czpcbiAgICAgICAqXG4gICAgICAgKiAtIGByb290YCBUaGUgY2VsbCBjb250ZW50IERPTSBlbGVtZW50LiBBcHBlbmQgeW91ciBjb250ZW50IHRvIGl0LlxuICAgICAgICogLSBgY29sdW1uYCBUaGUgYDx2YWFkaW4tZ3JpZC1jb2x1bW4+YCBlbGVtZW50LlxuICAgICAgICogLSBgcm93RGF0YWAgVGhlIG9iamVjdCB3aXRoIHRoZSBwcm9wZXJ0aWVzIHJlbGF0ZWQgd2l0aFxuICAgICAgICogICB0aGUgcmVuZGVyZWQgaXRlbSwgY29udGFpbnM6XG4gICAgICAgKiAgIC0gYHJvd0RhdGEuaW5kZXhgIFRoZSBpbmRleCBvZiB0aGUgaXRlbS5cbiAgICAgICAqICAgLSBgcm93RGF0YS5pdGVtYCBUaGUgaXRlbS5cbiAgICAgICAqICAgLSBgcm93RGF0YS5leHBhbmRlZGAgU3VibGV2ZWwgdG9nZ2xlIHN0YXRlLlxuICAgICAgICogICAtIGByb3dEYXRhLmxldmVsYCBMZXZlbCBvZiB0aGUgdHJlZSByZXByZXNlbnRlZCB3aXRoIGEgaG9yaXpvbnRhbCBvZmZzZXQgb2YgdGhlIHRvZ2dsZSBidXR0b24uXG4gICAgICAgKiAgIC0gYHJvd0RhdGEuc2VsZWN0ZWRgIFNlbGVjdGVkIHN0YXRlLlxuICAgICAgICovXG4gICAgICByZW5kZXJlcjogRnVuY3Rpb24sXG5cbiAgICAgIC8qKlxuICAgICAgICogUGF0aCB0byBhbiBpdGVtIHN1Yi1wcm9wZXJ0eSB3aG9zZSB2YWx1ZSBnZXRzIGRpc3BsYXllZCBpbiB0aGUgY29sdW1uIGJvZHkgY2VsbHMuXG4gICAgICAgKiBUaGUgcHJvcGVydHkgbmFtZSBpcyBhbHNvIHNob3duIGluIHRoZSBjb2x1bW4gaGVhZGVyIGlmIGFuIGV4cGxpY2l0IGhlYWRlciBvciByZW5kZXJlciBpc24ndCBkZWZpbmVkLlxuICAgICAgICovXG4gICAgICBwYXRoOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZ1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBBdXRvbWF0aWNhbGx5IHNldHMgdGhlIHdpZHRoIG9mIHRoZSBjb2x1bW4gYmFzZWQgb24gdGhlIGNvbHVtbiBjb250ZW50cyB3aGVuIHRoaXMgaXMgc2V0IHRvIGB0cnVlYC5cbiAgICAgICAqXG4gICAgICAgKiBGb3IgcGVyZm9ybWFuY2UgcmVhc29ucyB0aGUgY29sdW1uIHdpZHRoIGlzIGNhbGN1bGF0ZWQgYXV0b21hdGljYWxseSBvbmx5IG9uY2Ugd2hlbiB0aGUgZ3JpZCBpdGVtc1xuICAgICAgICogYXJlIHJlbmRlcmVkIGZvciB0aGUgZmlyc3QgdGltZSBhbmQgdGhlIGNhbGN1bGF0aW9uIG9ubHkgY29uc2lkZXJzIHRoZSByb3dzIHdoaWNoIGFyZSBjdXJyZW50bHlcbiAgICAgICAqIHJlbmRlcmVkIGluIERPTSAoYSBiaXQgbW9yZSB0aGFuIHdoYXQgaXMgY3VycmVudGx5IHZpc2libGUpLiBJZiB0aGUgZ3JpZCBpcyBzY3JvbGxlZCwgb3IgdGhlIGNlbGxcbiAgICAgICAqIGNvbnRlbnQgY2hhbmdlcywgdGhlIGNvbHVtbiB3aWR0aCBtaWdodCBub3QgbWF0Y2ggdGhlIGNvbnRlbnRzIGFueW1vcmUuXG4gICAgICAgKlxuICAgICAgICogSGlkZGVuIGNvbHVtbnMgYXJlIGlnbm9yZWQgaW4gdGhlIGNhbGN1bGF0aW9uIGFuZCB0aGVpciB3aWR0aHMgYXJlIG5vdCBhdXRvbWF0aWNhbGx5IHVwZGF0ZWQgd2hlblxuICAgICAgICogeW91IHNob3cgYSBjb2x1bW4gdGhhdCB3YXMgaW5pdGlhbGx5IGhpZGRlbi5cbiAgICAgICAqXG4gICAgICAgKiBZb3UgY2FuIG1hbnVhbGx5IHRyaWdnZXIgdGhlIGF1dG8gc2l6aW5nIGJlaGF2aW9yIGFnYWluIGJ5IGNhbGxpbmcgYGdyaWQucmVjYWxjdWxhdGVDb2x1bW5XaWR0aHMoKWAuXG4gICAgICAgKlxuICAgICAgICogVGhlIGNvbHVtbiB3aWR0aCBtYXkgc3RpbGwgZ3JvdyBsYXJnZXIgd2hlbiBgZmxleEdyb3dgIGlzIG5vdCAwLlxuICAgICAgICovXG4gICAgICBhdXRvV2lkdGg6IHtcbiAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICB9LFxuXG4gICAgICBfYm9keVRlbXBsYXRlOiB7XG4gICAgICAgIHR5cGU6IE9iamVjdFxuICAgICAgfSxcblxuICAgICAgX2NlbGxzOiBBcnJheVxuXG4gICAgfTtcbiAgfVxuXG59XG5cbmN1c3RvbUVsZW1lbnRzLmRlZmluZShHcmlkQ29sdW1uRWxlbWVudC5pcywgR3JpZENvbHVtbkVsZW1lbnQpO1xuZXhwb3J0IHsgR3JpZENvbHVtbkVsZW1lbnQgfTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBWYWFkaW4gTHRkLlxuVGhpcyBwcm9ncmFtIGlzIGF2YWlsYWJsZSB1bmRlciBBcGFjaGUgTGljZW5zZSBWZXJzaW9uIDIuMCwgYXZhaWxhYmxlIGF0IGh0dHBzOi8vdmFhZGluLmNvbS9saWNlbnNlL1xuKi9cbmltcG9ydCB7IFBvbHltZXJFbGVtZW50IH0gZnJvbSAnQHBvbHltZXIvcG9seW1lci9wb2x5bWVyLWVsZW1lbnQuanMnO1xuXG5pbXBvcnQgeyBodG1sIH0gZnJvbSAnQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvaHRtbC10YWcuanMnO1xuLyoqXG4gKiBUaGlzIEVsZW1lbnQgaXMgdXNlZCBpbnRlcm5hbGx5IGJ5IHZhYWRpbi1ncmlkLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIEdyaWRPdXRlclNjcm9sbGVyRWxlbWVudCBleHRlbmRzIChjbGFzcyBleHRlbmRzIFBvbHltZXJFbGVtZW50IHt9KSB7XG4gIHN0YXRpYyBnZXQgdGVtcGxhdGUoKSB7XG4gICAgcmV0dXJuIGh0bWxgXG4gICAgPHN0eWxlPlxuICAgICAgOmhvc3Qge1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0b3A6IDA7XG4gICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgIG92ZXJmbG93OiBhdXRvO1xuICAgICAgfVxuXG4gICAgICA6aG9zdChbcGFzc3Rocm91Z2hdKSB7XG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAgfVxuICAgIDwvc3R5bGU+XG5cbiAgICA8c2xvdD48L3Nsb3Q+XG5gO1xuICB9XG5cbiAgc3RhdGljIGdldCBpcygpIHtcbiAgICByZXR1cm4gJ3ZhYWRpbi1ncmlkLW91dGVyLXNjcm9sbGVyJztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcbiAgICByZXR1cm4ge1xuXG4gICAgICBzY3JvbGxUYXJnZXQ6IHtcbiAgICAgICAgdHlwZTogT2JqZWN0XG4gICAgICB9LFxuXG4gICAgICBzY3JvbGxIYW5kbGVyOiB7XG4gICAgICAgIHR5cGU6IE9iamVjdFxuICAgICAgfSxcblxuICAgICAgcGFzc3Rocm91Z2g6IHtcbiAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgcmVmbGVjdFRvQXR0cmlidXRlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgfSxcblxuICAgICAgb3V0ZXJTY3JvbGxpbmc6IEJvb2xlYW4sXG5cbiAgICAgIG5vU2Nyb2xsYmFyczogQm9vbGVhbixcblxuICAgICAgX3RvdWNoRGV2aWNlOiBCb29sZWFuXG4gICAgfTtcbiAgfVxuXG4gIHJlYWR5KCkge1xuICAgIHN1cGVyLnJlYWR5KCk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCAoKSA9PiB0aGlzLl9zeW5jU2Nyb2xsVGFyZ2V0KCkpO1xuICAgIHRoaXMucGFyZW50RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLl9vbk1vdXNlTW92ZS5iaW5kKHRoaXMpKTtcblxuICAgIC8vIGZvciBzb21lIHJlYXNvbiBzY3JvbGwgYmFycyBhcmUgaGlkZGVuIGluIGlPUyBpZiB0aGlzIHN0eWxlIGlzXG4gICAgLy8gYWRkZWQgaW4gc3R5bGVzaGVldHMgb3IgYmVmb3JlIGF0dGFjaGluZy5cbiAgICB0aGlzLnN0eWxlLndlYmtpdE92ZXJmbG93U2Nyb2xsaW5nID0gJ3RvdWNoJztcblxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgXyA9PiB0aGlzLm91dGVyU2Nyb2xsaW5nID0gdHJ1ZSk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgXyA9PiB7XG4gICAgICB0aGlzLm91dGVyU2Nyb2xsaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLnNjcm9sbEhhbmRsZXIuX3Njcm9sbEhhbmRsZXIoKTtcbiAgICB9KTtcbiAgfVxuXG4gIF9vbk1vdXNlTW92ZShlKSB7XG4gICAgLy8gSWdub3JlIG1vdXNlbW92ZSBldmVudHMgb24gdG91Y2ggZGV2aWNlc1xuICAgIGlmICghdGhpcy5fdG91Y2hEZXZpY2UpIHtcbiAgICAgIGlmICh0aGlzLm5vU2Nyb2xsYmFycyAmJiB0aGlzLnBhcmVudEVsZW1lbnQuaGFzQXR0cmlidXRlKCdzY3JvbGwtcGVyaW9kJykpIHtcbiAgICAgICAgdGhpcy5wYXNzdGhyb3VnaCA9IGUub2Zmc2V0WSA8PSB0aGlzLmNsaWVudEhlaWdodCAtIDIwICYmIGUub2Zmc2V0WCA8PSB0aGlzLmNsaWVudFdpZHRoIC0gMjA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBhc3N0aHJvdWdoID0gZS5vZmZzZXRZIDw9IHRoaXMuY2xpZW50SGVpZ2h0ICYmIGUub2Zmc2V0WCA8PSB0aGlzLmNsaWVudFdpZHRoO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN5bmNPdXRlclNjcm9sbGVyKCkge1xuICAgIHRoaXMuc2Nyb2xsVG9wID0gdGhpcy5zY3JvbGxUYXJnZXQuc2Nyb2xsVG9wO1xuICAgIHRoaXMuc2Nyb2xsTGVmdCA9IHRoaXMuc2Nyb2xsVGFyZ2V0LnNjcm9sbExlZnQ7XG4gIH1cblxuICBfc3luY1Njcm9sbFRhcmdldCgpIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgdGhpcy5zY3JvbGxUYXJnZXQuc2Nyb2xsVG9wID0gdGhpcy5zY3JvbGxUb3A7XG4gICAgICB0aGlzLnNjcm9sbFRhcmdldC5zY3JvbGxMZWZ0ID0gdGhpcy5zY3JvbGxMZWZ0O1xuICAgICAgdGhpcy5zY3JvbGxIYW5kbGVyLl9zY3JvbGxIYW5kbGVyKCk7XG4gICAgfSk7XG5cbiAgfVxufVxuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoR3JpZE91dGVyU2Nyb2xsZXJFbGVtZW50LmlzLCBHcmlkT3V0ZXJTY3JvbGxlckVsZW1lbnQpO1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFZhYWRpbiBMdGQuXG5UaGlzIHByb2dyYW0gaXMgYXZhaWxhYmxlIHVuZGVyIEFwYWNoZSBMaWNlbnNlIFZlcnNpb24gMi4wLCBhdmFpbGFibGUgYXQgaHR0cHM6Ly92YWFkaW4uY29tL2xpY2Vuc2UvXG4qL1xuaW1wb3J0ICdAcG9seW1lci9wb2x5bWVyL2xpYi9lbGVtZW50cy9kb20tbW9kdWxlLmpzJztcblxuaW1wb3J0IHsgaHRtbCB9IGZyb20gJ0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL2h0bWwtdGFnLmpzJztcbmNvbnN0IFZhYWRpbkdyaWRTdHlsZXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkb20tbW9kdWxlJyk7XG5cbi8vIE5PVEUod2ViLXBhZGF3YW4pOiBodHRwczovL2dpdGh1Yi5jb20vdmFhZGluL3ZhYWRpbi1ncmlkL2lzc3Vlcy8xNTE0XG5WYWFkaW5HcmlkU3R5bGVzLmFwcGVuZENoaWxkKFxuICBodG1sYFxuICA8c3R5bGU+XG4gICAgQGtleWZyYW1lcyB2YWFkaW4tZ3JpZC1hcHBlYXIge1xuICAgICAgdG8ge1xuICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIDpob3N0IHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgYW5pbWF0aW9uOiAxbXMgdmFhZGluLWdyaWQtYXBwZWFyO1xuICAgICAgaGVpZ2h0OiA0MDBweDtcbiAgICAgIGZsZXg6IDEgMSBhdXRvO1xuICAgICAgYWxpZ24tc2VsZjogc3RyZXRjaDtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB9XG5cbiAgICA6aG9zdChbaGlkZGVuXSkge1xuICAgICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xuICAgIH1cblxuICAgICNzY3JvbGxlciB7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTtcbiAgICAgIHdpZHRoOiBhdXRvO1xuICAgICAgaGVpZ2h0OiBhdXRvO1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgdG9wOiAwO1xuICAgICAgcmlnaHQ6IDA7XG4gICAgICBib3R0b206IDA7XG4gICAgICBsZWZ0OiAwO1xuICAgIH1cblxuICAgIDpob3N0KFtoZWlnaHQtYnktcm93c10pIHtcbiAgICAgIGhlaWdodDogYXV0bztcbiAgICAgIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XG4gICAgICBmbGV4LWdyb3c6IDA7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICB9XG5cbiAgICA6aG9zdChbaGVpZ2h0LWJ5LXJvd3NdKSAjc2Nyb2xsZXIge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgfVxuXG4gICAgI3RhYmxlIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICBvdmVyZmxvdzogYXV0bztcbiAgICAgIHotaW5kZXg6IC0yO1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgb3V0bGluZTogbm9uZTtcbiAgICB9XG5cbiAgICAjaGVhZGVyIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgdG9wOiAwO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgfVxuXG4gICAgdGgge1xuICAgICAgdGV4dC1hbGlnbjogaW5oZXJpdDtcbiAgICB9XG5cbiAgICAvKiBTYWZhcmkgZG9lc24ndCB3b3JrIHdpdGggXCJpbmhlcml0XCIgKi9cbiAgICBbc2FmYXJpXSB0aCB7XG4gICAgICB0ZXh0LWFsaWduOiBpbml0aWFsO1xuICAgIH1cblxuICAgICNmb290ZXIge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICBib3R0b206IDA7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICB9XG5cbiAgICAjaXRlbXMge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIHotaW5kZXg6IC0xO1xuICAgIH1cblxuICAgICNpdGVtcyxcbiAgICAjb3V0ZXJzaXplcixcbiAgICAjZml4ZWRzaXplciB7XG4gICAgICBib3JkZXItdG9wOiAwIHNvbGlkIHRyYW5zcGFyZW50O1xuICAgICAgYm9yZGVyLWJvdHRvbTogMCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgICB9XG5cbiAgICBbcGFydH49XCJyb3dcIl0ge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgIG1hcmdpbjogMDtcbiAgICB9XG5cbiAgICBbcGFydH49XCJyb3dcIl1bbG9hZGluZ10gW3BhcnR+PVwiYm9keS1jZWxsXCJdIDo6c2xvdHRlZCh2YWFkaW4tZ3JpZC1jZWxsLWNvbnRlbnQpIHtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgfVxuXG4gICAgI2l0ZW1zIFtwYXJ0fj1cInJvd1wiXSB7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgfVxuXG4gICAgI2l0ZW1zIFtwYXJ0fj1cInJvd1wiXTplbXB0eSB7XG4gICAgICBoZWlnaHQ6IDFlbTtcbiAgICB9XG5cbiAgICBbcGFydH49XCJjZWxsXCJdOm5vdChbcGFydH49XCJkZXRhaWxzLWNlbGxcIl0pIHtcbiAgICAgIGZsZXgtc2hyaW5rOiAwO1xuICAgICAgZmxleC1ncm93OiAxO1xuICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBwYWRkaW5nOiAwO1xuICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICB9XG5cbiAgICBbcGFydH49XCJkZXRhaWxzLWNlbGxcIl0ge1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgYm90dG9tOiAwO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgcGFkZGluZzogMDtcbiAgICB9XG5cbiAgICBbcGFydH49XCJjZWxsXCJdIDo6c2xvdHRlZCh2YWFkaW4tZ3JpZC1jZWxsLWNvbnRlbnQpIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICAgIH1cblxuICAgIFtoaWRkZW5dIHtcbiAgICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcbiAgICB9XG5cbiAgICBbZnJvemVuXSB7XG4gICAgICB6LWluZGV4OiAyO1xuICAgICAgd2lsbC1jaGFuZ2U6IHRyYW5zZm9ybTtcbiAgICB9XG5cbiAgICAjb3V0ZXJzY3JvbGxlciB7XG4gICAgICAvKiBOZWVkZWQgKGF0IGxlYXN0KSBmb3IgQW5kcm9pZCBDaHJvbWUgKi9cbiAgICAgIHotaW5kZXg6IDA7XG4gICAgfVxuXG4gICAgI3Njcm9sbGVyOm5vdChbc2FmYXJpXSkgI291dGVyc2Nyb2xsZXIge1xuICAgICAgLyogTmVlZGVkIGZvciBBbmRyb2lkIENocm9tZSAoIzEwMjApLiBDYW4ndCBiZSBhcHBsaWVkIHRvIFNhZmFyaVxuICAgICAgc2luY2UgaXQgd291bGQgcmUtaW50cm9kdWNlIHRoZSBzdWItcGl4ZWwgb3ZlcmZsb3cgYnVnICgjODUzKSAqL1xuICAgICAgd2lsbC1jaGFuZ2U6IHRyYW5zZm9ybTtcbiAgICB9XG5cbiAgICBbbm8tc2Nyb2xsYmFyc106bm90KFtzYWZhcmldKTpub3QoW2ZpcmVmb3hdKSAjb3V0ZXJzY3JvbGxlcixcbiAgICBbbm8tc2Nyb2xsYmFyc11bc2FmYXJpXSAjdGFibGUsXG4gICAgW25vLXNjcm9sbGJhcnNdW2ZpcmVmb3hdICN0YWJsZSB7XG4gICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIH1cblxuICAgIFtuby1zY3JvbGxiYXJzXTpub3QoW3NhZmFyaV0pOm5vdChbZmlyZWZveF0pICNvdXRlcnNjcm9sbGVyIHtcbiAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgIH1cblxuICAgIC8qIFJlb3JkZXJpbmcgc3R5bGVzICovXG4gICAgOmhvc3QoW3Jlb3JkZXJpbmddKSBbcGFydH49XCJjZWxsXCJdIDo6c2xvdHRlZCh2YWFkaW4tZ3JpZC1jZWxsLWNvbnRlbnQpLFxuICAgIDpob3N0KFtyZW9yZGVyaW5nXSkgW3BhcnR+PVwicmVzaXplLWhhbmRsZVwiXSxcbiAgICAjc2Nyb2xsZXJbbm8tY29udGVudC1wb2ludGVyLWV2ZW50c10gW3BhcnR+PVwiY2VsbFwiXSA6OnNsb3R0ZWQodmFhZGluLWdyaWQtY2VsbC1jb250ZW50KSB7XG4gICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICB9XG5cbiAgICBbcGFydH49XCJyZW9yZGVyLWdob3N0XCJdIHtcbiAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAgb3BhY2l0eTogMC41O1xuXG4gICAgICAvKiBQcmV2ZW50IG92ZXJmbG93aW5nIHRoZSBncmlkIGluIEZpcmVmb3ggKi9cbiAgICAgIHRvcDogMDtcbiAgICAgIGxlZnQ6IDA7XG4gICAgfVxuXG4gICAgOmhvc3QoW3Jlb3JkZXJpbmddKSB7XG4gICAgICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xuICAgICAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcbiAgICAgIHVzZXItc2VsZWN0OiBub25lO1xuICAgIH1cblxuICAgICNzY3JvbGxlcltpZV1bY29sdW1uLXJlb3JkZXJpbmctYWxsb3dlZF0gW3BhcnR+PVwiaGVhZGVyLWNlbGxcIl0ge1xuICAgICAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xuICAgIH1cblxuICAgIDpob3N0KFtyZW9yZGVyaW5nXSkgI291dGVyc2Nyb2xsZXIge1xuICAgICAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IGF1dG8gIWltcG9ydGFudDtcbiAgICB9XG5cbiAgICAvKiBSZXNpemluZyBzdHlsZXMgKi9cbiAgICBbcGFydH49XCJyZXNpemUtaGFuZGxlXCJdIHtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIHRvcDogMDtcbiAgICAgIHJpZ2h0OiAwO1xuICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgY3Vyc29yOiBjb2wtcmVzaXplO1xuICAgICAgei1pbmRleDogMTtcbiAgICB9XG5cbiAgICBbcGFydH49XCJyZXNpemUtaGFuZGxlXCJdOjpiZWZvcmUge1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgY29udGVudDogXCJcIjtcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgIHdpZHRoOiAzNXB4O1xuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xuICAgIH1cblxuICAgIFtsYXN0LWNvbHVtbl0gW3BhcnR+PVwicmVzaXplLWhhbmRsZVwiXTo6YmVmb3JlLFxuICAgIFtsYXN0LWZyb3plbl0gW3BhcnR+PVwicmVzaXplLWhhbmRsZVwiXTo6YmVmb3JlIHtcbiAgICAgIHdpZHRoOiAxOHB4O1xuICAgICAgdHJhbnNmb3JtOiBub25lO1xuICAgICAgcmlnaHQ6IDA7XG4gICAgfVxuXG4gICAgI3Njcm9sbGVyW2NvbHVtbi1yZXNpemluZ10ge1xuICAgICAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xuICAgICAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcbiAgICAgIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XG4gICAgICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgICB9XG5cbiAgICAvKiBTaXplciBzdHlsZXMgKi9cbiAgICAuc2l6ZXIge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICAgIH1cblxuICAgIC5zaXplciBbcGFydH49XCJkZXRhaWxzLWNlbGxcIl0ge1xuICAgICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xuICAgIH1cblxuICAgIC5zaXplciBbcGFydH49XCJjZWxsXCJdW2hpZGRlbl0ge1xuICAgICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xuICAgIH1cblxuICAgIC5zaXplciBbcGFydH49XCJjZWxsXCJdIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgZmxleC1zaHJpbms6IDA7XG4gICAgICBsaW5lLWhlaWdodDogMDtcbiAgICAgIG1hcmdpbi10b3A6IC0xZW07XG4gICAgICBoZWlnaHQ6IDAgIWltcG9ydGFudDtcbiAgICAgIG1pbi1oZWlnaHQ6IDAgIWltcG9ydGFudDtcbiAgICAgIG1heC1oZWlnaHQ6IDAgIWltcG9ydGFudDtcbiAgICAgIHBhZGRpbmc6IDAgIWltcG9ydGFudDtcbiAgICB9XG5cbiAgICAuc2l6ZXIgW3BhcnR+PVwiY2VsbFwiXTo6YmVmb3JlIHtcbiAgICAgIGNvbnRlbnQ6IFwiLVwiO1xuICAgIH1cblxuICAgIC5zaXplciBbcGFydH49XCJjZWxsXCJdIDo6c2xvdHRlZCh2YWFkaW4tZ3JpZC1jZWxsLWNvbnRlbnQpIHtcbiAgICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcbiAgICB9XG5cbiAgICAvKiBGaXhlZCBtb2RlIChUYWJsZXQgRWRnZSkgKi9cbiAgICAjZml4ZWRzaXplciB7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgfVxuXG4gICAgOm5vdChbZWRnZV1bbm8tc2Nyb2xsYmFyc10pICNmaXhlZHNpemVyIHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgfVxuXG4gICAgW2VkZ2VdW25vLXNjcm9sbGJhcnNdIHtcbiAgICAgIC8qIEFueSB2YWx1ZSBvdGhlciB0aGFuIOKAmG5vbmXigJkgZm9yIHRoZSB0cmFuc2Zvcm0gcmVzdWx0cyBpbiB0aGUgY3JlYXRpb24gb2YgYm90aCBhIHN0YWNraW5nIGNvbnRleHQgYW5kXG4gICAgICBhIGNvbnRhaW5pbmcgYmxvY2suIFRoZSBvYmplY3QgYWN0cyBhcyBhIGNvbnRhaW5pbmcgYmxvY2sgZm9yIGZpeGVkIHBvc2l0aW9uZWQgZGVzY2VuZGFudHMuICovXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XG4gICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIH1cblxuICAgIFtlZGdlXVtuby1zY3JvbGxiYXJzXSAjaGVhZGVyLFxuICAgIFtlZGdlXVtuby1zY3JvbGxiYXJzXSAjZm9vdGVyIHtcbiAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICB9XG5cbiAgICBbZWRnZV1bbm8tc2Nyb2xsYmFyc10gI2l0ZW1zIHtcbiAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgd2lsbC1jaGFuZ2U6IHRyYW5zZm9ybTtcbiAgICB9XG4gIDwvc3R5bGU+XG5gKTtcblxuY29uc3Qgc2FmYXJpID0gL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbmNvbnN0IGZpcmVmb3ggPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZignZmlyZWZveCcpID4gLTE7XG5cbmlmIChzYWZhcmkgfHwgZmlyZWZveCkge1xuICBjb25zdCBzY3JvbGxpbmdTdHlsZXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICBzY3JvbGxpbmdTdHlsZXMudGV4dENvbnRlbnQgPSBgXG4gICAgW3Njcm9sbGluZ11bc2FmYXJpXSAjb3V0ZXJzY3JvbGxlcixcbiAgICBbc2Nyb2xsaW5nXVtmaXJlZm94XSAjb3V0ZXJzY3JvbGxlciB7XG4gICAgICBwb2ludGVyLWV2ZW50czogYXV0bztcbiAgICB9XG5cbiAgICBbaW9zXSAjb3V0ZXJzY3JvbGxlciB7XG4gICAgICBwb2ludGVyLWV2ZW50czogYXV0bztcbiAgICAgIHotaW5kZXg6IC0zO1xuICAgIH1cblxuICAgIFtpb3NdW3Njcm9sbGluZ10gI291dGVyc2Nyb2xsZXIge1xuICAgICAgei1pbmRleDogMDtcbiAgICB9XG5cbiAgICBbaW9zXSBbZnJvemVuXSB7XG4gICAgICB3aWxsLWNoYW5nZTogYXV0bztcbiAgICB9XG4gIGA7XG4gIFZhYWRpbkdyaWRTdHlsZXMucXVlcnlTZWxlY3RvcigndGVtcGxhdGUnKS5jb250ZW50LmFwcGVuZENoaWxkKHNjcm9sbGluZ1N0eWxlcyk7XG59XG5cblZhYWRpbkdyaWRTdHlsZXMucmVnaXN0ZXIoJ3ZhYWRpbi1ncmlkLXN0eWxlcycpO1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFZhYWRpbiBMdGQuXG5UaGlzIHByb2dyYW0gaXMgYXZhaWxhYmxlIHVuZGVyIEFwYWNoZSBMaWNlbnNlIFZlcnNpb24gMi4wLCBhdmFpbGFibGUgYXQgaHR0cHM6Ly92YWFkaW4uY29tL2xpY2Vuc2UvXG4qL1xuaW1wb3J0ICdAcG9seW1lci9wb2x5bWVyL3BvbHltZXItbGVnYWN5LmpzJztcblxuaW1wb3J0IHsgVGhlbWFibGVNaXhpbiB9IGZyb20gJ0B2YWFkaW4vdmFhZGluLXRoZW1hYmxlLW1peGluL3ZhYWRpbi10aGVtYWJsZS1taXhpbi5qcyc7XG5pbXBvcnQgeyBTY3JvbGxlckVsZW1lbnQgfSBmcm9tICcuL3ZhYWRpbi1ncmlkLXNjcm9sbGVyLmpzJztcbmltcG9ydCB7IEExMXlNaXhpbiB9IGZyb20gJy4vdmFhZGluLWdyaWQtYTExeS1taXhpbi5qcyc7XG5pbXBvcnQgeyBBY3RpdmVJdGVtTWl4aW4gfSBmcm9tICcuL3ZhYWRpbi1ncmlkLWFjdGl2ZS1pdGVtLW1peGluLmpzJztcbmltcG9ydCB7IEFycmF5RGF0YVByb3ZpZGVyTWl4aW4gfSBmcm9tICcuL3ZhYWRpbi1ncmlkLWFycmF5LWRhdGEtcHJvdmlkZXItbWl4aW4uanMnO1xuaW1wb3J0IHsgQ29sdW1uUmVzaXppbmdNaXhpbiB9IGZyb20gJy4vdmFhZGluLWdyaWQtY29sdW1uLXJlc2l6aW5nLW1peGluLmpzJztcbmltcG9ydCB7IERhdGFQcm92aWRlck1peGluIH0gZnJvbSAnLi92YWFkaW4tZ3JpZC1kYXRhLXByb3ZpZGVyLW1peGluLmpzJztcbmltcG9ydCB7IER5bmFtaWNDb2x1bW5zTWl4aW4gfSBmcm9tICcuL3ZhYWRpbi1ncmlkLWR5bmFtaWMtY29sdW1ucy1taXhpbi5qcyc7XG5pbXBvcnQgeyBFdmVudENvbnRleHRNaXhpbiB9IGZyb20gJy4vdmFhZGluLWdyaWQtZXZlbnQtY29udGV4dC1taXhpbi5qcyc7XG5pbXBvcnQgeyBGaWx0ZXJNaXhpbiB9IGZyb20gJy4vdmFhZGluLWdyaWQtZmlsdGVyLW1peGluLmpzJztcbmltcG9ydCB7IFJvd0RldGFpbHNNaXhpbiB9IGZyb20gJy4vdmFhZGluLWdyaWQtcm93LWRldGFpbHMtbWl4aW4uanMnO1xuaW1wb3J0IHsgU2Nyb2xsTWl4aW4gfSBmcm9tICcuL3ZhYWRpbi1ncmlkLXNjcm9sbC1taXhpbi5qcyc7XG5pbXBvcnQgeyBTZWxlY3Rpb25NaXhpbiB9IGZyb20gJy4vdmFhZGluLWdyaWQtc2VsZWN0aW9uLW1peGluLmpzJztcbmltcG9ydCB7IFNvcnRNaXhpbiB9IGZyb20gJy4vdmFhZGluLWdyaWQtc29ydC1taXhpbi5qcyc7XG5pbXBvcnQgeyBTdHlsaW5nTWl4aW4gfSBmcm9tICcuL3ZhYWRpbi1ncmlkLXN0eWxpbmctbWl4aW4uanMnO1xuaW1wb3J0IHsgRHJhZ0FuZERyb3BNaXhpbiB9IGZyb20gJy4vdmFhZGluLWdyaWQtZHJhZy1hbmQtZHJvcC1taXhpbi5qcyc7XG5pbXBvcnQgeyBLZXlib2FyZE5hdmlnYXRpb25NaXhpbiB9IGZyb20gJy4vdmFhZGluLWdyaWQta2V5Ym9hcmQtbmF2aWdhdGlvbi1taXhpbi5qcyc7XG5pbXBvcnQgeyBDb2x1bW5SZW9yZGVyaW5nTWl4aW4gfSBmcm9tICcuL3ZhYWRpbi1ncmlkLWNvbHVtbi1yZW9yZGVyaW5nLW1peGluLmpzJztcbmltcG9ydCAnLi92YWFkaW4tZ3JpZC1jb2x1bW4uanMnO1xuaW1wb3J0ICcuL3ZhYWRpbi1ncmlkLW91dGVyLXNjcm9sbGVyLmpzJztcbmltcG9ydCAnLi92YWFkaW4tZ3JpZC1zdHlsZXMuanMnO1xuaW1wb3J0IHsgRWxlbWVudE1peGluIH0gZnJvbSAnQHZhYWRpbi92YWFkaW4tZWxlbWVudC1taXhpbi92YWFkaW4tZWxlbWVudC1taXhpbi5qcyc7XG5pbXBvcnQgeyBodG1sIH0gZnJvbSAnQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvaHRtbC10YWcuanMnO1xuaW1wb3J0IHsgYmVmb3JlTmV4dFJlbmRlciwgYWZ0ZXJOZXh0UmVuZGVyIH0gZnJvbSAnQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvcmVuZGVyLXN0YXR1cy5qcyc7XG5pbXBvcnQgeyBEZWJvdW5jZXIgfSBmcm9tICdAcG9seW1lci9wb2x5bWVyL2xpYi91dGlscy9kZWJvdW5jZS5qcyc7XG5pbXBvcnQgeyB0aW1lT3V0LCBhbmltYXRpb25GcmFtZSB9IGZyb20gJ0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL2FzeW5jLmpzJztcblxuY29uc3QgVE9VQ0hfREVWSUNFID0gKCgpID0+IHtcbiAgdHJ5IHtcbiAgICBkb2N1bWVudC5jcmVhdGVFdmVudCgnVG91Y2hFdmVudCcpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59KSgpO1xuXG4vKipcbiAqXG4gKiBgPHZhYWRpbi1ncmlkPmAgaXMgYSBmcmVlLCBoaWdoIHF1YWxpdHkgZGF0YSBncmlkIC8gZGF0YSB0YWJsZSBXZWIgQ29tcG9uZW50LiBUaGUgY29udGVudCBvZiB0aGVcbiAqIHRoZSBncmlkIGNhbiBiZSBwb3B1bGF0ZWQgaW4gdHdvIHdheXM6IGltcGVyYXRpdmVseSBieSB1c2luZyByZW5kZXJlciBjYWxsYmFjayBmdW5jdGlvbiBhbmRcbiAqIGRlY2xhcmF0aXZlbHkgYnkgdXNpbmcgUG9seW1lcidzIFRlbXBsYXRlcy5cbiAqXG4gKiAjIyMgUXVpY2sgU3RhcnRcbiAqXG4gKiBTdGFydCB3aXRoIGFuIGFzc2lnbmluZyBhbiBhcnJheSB0byB0aGUgW2BpdGVtc2BdKCMvZWxlbWVudHMvdmFhZGluLWdyaWQjcHJvcGVydHktaXRlbXMpIHByb3BlcnR5IHRvIHZpc3VhbGl6ZSB5b3VyIGRhdGEuXG4gKlxuICogVXNlIHRoZSBbYDx2YWFkaW4tZ3JpZC1jb2x1bW4+YF0oIy9lbGVtZW50cy92YWFkaW4tZ3JpZC1jb2x1bW4pIGVsZW1lbnQgdG8gY29uZmlndXJlIHRoZSBncmlkIGNvbHVtbnMuIFNldCBgcGF0aGAgYW5kIGBoZWFkZXJgXG4gKiBzaG9ydGhhbmQgcHJvcGVydGllcyBmb3IgdGhlIGNvbHVtbnMgdG8gZGVmaW5lIHdoYXQgZ2V0cyByZW5kZXJlZCBpbiB0aGUgY2VsbHMgb2YgdGhlIGNvbHVtbi5cbiAqXG4gKiAjIyMjIEV4YW1wbGU6XG4gKiBgYGBodG1sXG4gKiA8dmFhZGluLWdyaWQ+XG4gKiAgIDx2YWFkaW4tZ3JpZC1jb2x1bW4gcGF0aD1cIm5hbWUuZmlyc3RcIiBoZWFkZXI9XCJGaXJzdCBuYW1lXCI+PC92YWFkaW4tZ3JpZC1jb2x1bW4+XG4gKiAgIDx2YWFkaW4tZ3JpZC1jb2x1bW4gcGF0aD1cIm5hbWUubGFzdFwiIGhlYWRlcj1cIkxhc3QgbmFtZVwiPjwvdmFhZGluLWdyaWQtY29sdW1uPlxuICogICA8dmFhZGluLWdyaWQtY29sdW1uIHBhdGg9XCJlbWFpbFwiPjwvdmFhZGluLWdyaWQtY29sdW1uPlxuICogPC92YWFkaW4tZ3JpZD5cbiAqIGBgYFxuICpcbiAqIEZvciBjdXN0b20gY29udGVudCBgdmFhZGluLWdyaWQtY29sdW1uYCBlbGVtZW50IHByb3ZpZGVzIHlvdSB3aXRoIHRocmVlIHR5cGVzIG9mIGByZW5kZXJlcmAgY2FsbGJhY2sgZnVuY3Rpb25zOiBgaGVhZGVyUmVuZGVyZXJgLFxuICogYHJlbmRlcmVyYCBhbmQgYGZvb3RlclJlbmRlcmVyYC5cbiAqXG4gKiBFYWNoIG9mIHRob3NlIHJlbmRlcmVyIGZ1bmN0aW9ucyBwcm92aWRlcyBgcm9vdGAsIGBjb2x1bW5gLCBgcm93RGF0YWAgYXJndW1lbnRzIHdoZW4gYXBwbGljYWJsZS5cbiAqIEdlbmVyYXRlIERPTSBjb250ZW50LCBhcHBlbmQgaXQgdG8gdGhlIGByb290YCBlbGVtZW50IGFuZCBjb250cm9sIHRoZSBzdGF0ZVxuICogb2YgdGhlIGhvc3QgZWxlbWVudCBieSBhY2Nlc3NpbmcgYGNvbHVtbmAuIEJlZm9yZSBnZW5lcmF0aW5nIG5ldyBjb250ZW50LFxuICogdXNlcnMgYXJlIGFibGUgdG8gY2hlY2sgaWYgdGhlcmUgaXMgYWxyZWFkeSBjb250ZW50IGluIGByb290YCBmb3IgcmV1c2luZyBpdC5cbiAqXG4gKiBSZW5kZXJlcnMgYXJlIGNhbGxlZCBvbiBpbml0aWFsaXphdGlvbiBvZiBuZXcgY29sdW1uIGNlbGxzIGFuZCBlYWNoIHRpbWUgdGhlXG4gKiByZWxhdGVkIHJvdyBkYXRhIGlzIHVwZGF0ZWQuIERPTSBnZW5lcmF0ZWQgZHVyaW5nIHRoZSByZW5kZXJlciBjYWxsIGNhbiBiZSByZXVzZWRcbiAqIGluIHRoZSBuZXh0IHJlbmRlcmVyIGNhbGwgYW5kIHdpbGwgYmUgcHJvdmlkZWQgd2l0aCB0aGUgYHJvb3RgIGFyZ3VtZW50LlxuICogT24gZmlyc3QgY2FsbCBpdCB3aWxsIGJlIGVtcHR5LlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqIGBgYGh0bWxcbiAqIDx2YWFkaW4tZ3JpZD5cbiAqICAgPHZhYWRpbi1ncmlkLWNvbHVtbj48L3ZhYWRpbi1ncmlkLWNvbHVtbj5cbiAqICAgPHZhYWRpbi1ncmlkLWNvbHVtbj48L3ZhYWRpbi1ncmlkLWNvbHVtbj5cbiAqICAgPHZhYWRpbi1ncmlkLWNvbHVtbj48L3ZhYWRpbi1ncmlkLWNvbHVtbj5cbiAqIDwvdmFhZGluLWdyaWQ+XG4gKiBgYGBcbiAqIGBgYGpzXG4gKiBjb25zdCBncmlkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigndmFhZGluLWdyaWQnKTtcbiAqIGdyaWQuaXRlbXMgPSBbeyduYW1lJzogJ0pvaG4nLCAnc3VybmFtZSc6ICdMZW5ub24nLCAncm9sZSc6ICdzaW5nZXInfSxcbiAqICAgICAgICAgICAgICAgeyduYW1lJzogJ1JpbmdvJywgJ3N1cm5hbWUnOiAnU3RhcnInLCAncm9sZSc6ICdkcnVtcyd9XTtcbiAqXG4gKiBjb25zdCBjb2x1bW5zID0gZ3JpZC5xdWVyeVNlbGVjdG9yQWxsKCd2YWFkaW4tZ3JpZC1jb2x1bW4nKTtcbiAqXG4gKiBjb2x1bW5zWzBdLmhlYWRlclJlbmRlcmVyID0gZnVuY3Rpb24ocm9vdCkge1xuICogICByb290LnRleHRDb250ZW50ID0gJ05hbWUnO1xuICogfTtcbiAqIGNvbHVtbnNbMF0ucmVuZGVyZXIgPSBmdW5jdGlvbihyb290LCBjb2x1bW4sIHJvd0RhdGEpIHtcbiAqICAgcm9vdC50ZXh0Q29udGVudCA9IHJvd0RhdGEuaXRlbS5uYW1lO1xuICogfTtcbiAqXG4gKiBjb2x1bW5zWzFdLmhlYWRlclJlbmRlcmVyID0gZnVuY3Rpb24ocm9vdCkge1xuICogICByb290LnRleHRDb250ZW50ID0gJ1N1cm5hbWUnO1xuICogfTtcbiAqIGNvbHVtbnNbMV0ucmVuZGVyZXIgPSBmdW5jdGlvbihyb290LCBjb2x1bW4sIHJvd0RhdGEpIHtcbiAqICAgcm9vdC50ZXh0Q29udGVudCA9IHJvd0RhdGEuaXRlbS5zdXJuYW1lO1xuICogfTtcbiAqXG4gKiBjb2x1bW5zWzJdLmhlYWRlclJlbmRlcmVyID0gZnVuY3Rpb24ocm9vdCkge1xuICogICByb290LnRleHRDb250ZW50ID0gJ1JvbGUnO1xuICogfTtcbiAqIGNvbHVtbnNbMl0ucmVuZGVyZXIgPSBmdW5jdGlvbihyb290LCBjb2x1bW4sIHJvd0RhdGEpIHtcbiAqICAgcm9vdC50ZXh0Q29udGVudCA9IHJvd0RhdGEuaXRlbS5yb2xlO1xuICogfTtcbiAqIGBgYFxuICpcbiAqIEFsdGVybmF0aXZlbHksIHRoZSBjb250ZW50IGNhbiBiZSBwcm92aWRlZCB3aXRoIFBvbHltZXIncyBUZW1wbGF0ZXM6XG4gKlxuICogIyMjIyBFeGFtcGxlOlxuICogYGBgaHRtbFxuICogPHZhYWRpbi1ncmlkIGl0ZW1zPSdbe1wibmFtZVwiOiBcIkpvaG5cIiwgXCJzdXJuYW1lXCI6IFwiTGVubm9uXCIsIFwicm9sZVwiOiBcInNpbmdlclwifSxcbiAqIHtcIm5hbWVcIjogXCJSaW5nb1wiLCBcInN1cm5hbWVcIjogXCJTdGFyclwiLCBcInJvbGVcIjogXCJkcnVtc1wifV0nPlxuICogICA8dmFhZGluLWdyaWQtY29sdW1uPlxuICogICAgIDx0ZW1wbGF0ZSBjbGFzcz1cImhlYWRlclwiPk5hbWU8L3RlbXBsYXRlPlxuICogICAgIDx0ZW1wbGF0ZT5bW2l0ZW0ubmFtZV1dPC90ZW1wbGF0ZT5cbiAqICAgPC92YWFkaW4tZ3JpZC1jb2x1bW4+XG4gKiAgIDx2YWFkaW4tZ3JpZC1jb2x1bW4+XG4gKiAgICAgPHRlbXBsYXRlIGNsYXNzPVwiaGVhZGVyXCI+U3VybmFtZTwvdGVtcGxhdGU+XG4gKiAgICAgPHRlbXBsYXRlPltbaXRlbS5zdXJuYW1lXV08L3RlbXBsYXRlPlxuICogICA8L3ZhYWRpbi1ncmlkLWNvbHVtbj5cbiAqICAgPHZhYWRpbi1ncmlkLWNvbHVtbj5cbiAqICAgICA8dGVtcGxhdGUgY2xhc3M9XCJoZWFkZXJcIj5Sb2xlPC90ZW1wbGF0ZT5cbiAqICAgICA8dGVtcGxhdGU+W1tpdGVtLnJvbGVdXTwvdGVtcGxhdGU+XG4gKiAgIDwvdmFhZGluLWdyaWQtY29sdW1uPlxuICogPC92YWFkaW4tZ3JpZD5cbiAqIGBgYFxuICpcbiAqIFRoZSBmb2xsb3dpbmcgaGVscGVyIGVsZW1lbnRzIGNhbiBiZSB1c2VkIGZvciBmdXJ0aGVyIGN1c3RvbWl6YXRpb246XG4gKiAtIFtgPHZhYWRpbi1ncmlkLWNvbHVtbi1ncm91cD5gXSgjL2VsZW1lbnRzL3ZhYWRpbi1ncmlkLWNvbHVtbi1ncm91cClcbiAqIC0gW2A8dmFhZGluLWdyaWQtZmlsdGVyPmBdKCMvZWxlbWVudHMvdmFhZGluLWdyaWQtZmlsdGVyKVxuICogLSBbYDx2YWFkaW4tZ3JpZC1zb3J0ZXI+YF0oIy9lbGVtZW50cy92YWFkaW4tZ3JpZC1zb3J0ZXIpXG4gKiAtIFtgPHZhYWRpbi1ncmlkLXNlbGVjdGlvbi1jb2x1bW4+YF0oIy9lbGVtZW50cy92YWFkaW4tZ3JpZC1zZWxlY3Rpb24tY29sdW1uKVxuICogLSBbYDx2YWFkaW4tZ3JpZC10cmVlLXRvZ2dsZT5gXSgjL2VsZW1lbnRzL3ZhYWRpbi1ncmlkLXRyZWUtdG9nZ2xlKVxuICpcbiAqIF9fTm90ZSB0aGF0IHRoZSBoZWxwZXIgZWxlbWVudHMgbXVzdCBiZSBleHBsaWNpdGx5IGltcG9ydGVkLl9fXG4gKiBJZiB5b3Ugd2FudCB0byBpbXBvcnQgZXZlcnl0aGluZyBhdCBvbmNlIHlvdSBjYW4gdXNlIHRoZSBgYWxsLWltcG9ydHMuaHRtbGAgYnVuZGxlLlxuICpcbiAqIEEgY29sdW1uIHRlbXBsYXRlIGNhbiBiZSBkZWNvcmF0ZWQgd2l0aCBvbmUgdGhlIGZvbGxvd2luZyBjbGFzcyBuYW1lcyB0byBzcGVjaWZ5IGl0cyBwdXJwb3NlXG4gKiAtIGBoZWFkZXJgOiBNYXJrcyBhIGhlYWRlciB0ZW1wbGF0ZVxuICogLSBgZm9vdGVyYDogTWFya3MgYSBmb290ZXIgdGVtcGxhdGVcbiAqIC0gYHJvdy1kZXRhaWxzYDogTWFya3MgYSByb3cgZGV0YWlscyB0ZW1wbGF0ZVxuICpcbiAqIFRoZSBmb2xsb3dpbmcgYnVpbHQtaW4gdGVtcGxhdGUgdmFyaWFibGVzIGNhbiBiZSBib3VuZCB0byBpbnNpZGUgdGhlIGNvbHVtbiB0ZW1wbGF0ZXM6XG4gKiAtIGBbW2luZGV4XV1gOiBOdW1iZXIgcmVwcmVzZW50aW5nIHRoZSByb3cgaW5kZXhcbiAqIC0gYFtbaXRlbV1dYCBhbmQgaXQncyBzdWItcHJvcGVydGllczogRGF0YSBvYmplY3QgKHByb3ZpZGVkIGJ5IGEgZGF0YSBwcm92aWRlciAvIGl0ZW1zIGFycmF5KVxuICogLSBge3tzZWxlY3RlZH19YDogVHJ1ZSBpZiB0aGUgaXRlbSBpcyBzZWxlY3RlZCAoY2FuIGJlIHR3by13YXkgYm91bmQpXG4gKiAtIGB7e2RldGFpbHNPcGVuZWR9fWA6IFRydWUgaWYgdGhlIGl0ZW0gaGFzIHJvdyBkZXRhaWxzIG9wZW5lZCAoY2FuIGJlIHR3by13YXkgYm91bmQpXG4gKiAtIGB7e2V4cGFuZGVkfX1gOiBUcnVlIGlmIHRoZSBpdGVtIGhhcyB0cmVlIHN1YmxldmVsIGV4cGFuZGVkIChjYW4gYmUgdHdvLXdheSBib3VuZClcbiAqIC0gYFtbbGV2ZWxdXWA6IE51bWJlciBvZiB0aGUgdHJlZSBzdWJsZXZlbCBvZiB0aGUgaXRlbSwgZmlyc3QgbGV2ZWwtaXRlbXMgaGF2ZSAwXG4gKlxuICogIyMjIExhenkgTG9hZGluZyB3aXRoIEZ1bmN0aW9uIERhdGEgUHJvdmlkZXJcbiAqXG4gKiBJbiBhZGRpdGlvbiB0byBhc3NpZ25pbmcgYW4gYXJyYXkgdG8gdGhlIGl0ZW1zIHByb3BlcnR5LCB5b3UgY2FuIGFsdGVybmF0aXZlbHlcbiAqIHByb3ZpZGUgdGhlIGA8dmFhZGluLWdyaWQ+YCBkYXRhIHRocm91Z2ggdGhlXG4gKiBbYGRhdGFQcm92aWRlcmBdKCMvZWxlbWVudHMvdmFhZGluLWdyaWQjcHJvcGVydHktZGF0YVByb3ZpZGVyKSBmdW5jdGlvbiBwcm9wZXJ0eS5cbiAqIFRoZSBgPHZhYWRpbi1ncmlkPmAgY2FsbHMgdGhpcyBmdW5jdGlvbiBsYXppbHksIG9ubHkgd2hlbiBpdCBuZWVkcyBtb3JlIGRhdGFcbiAqIHRvIGJlIGRpc3BsYXllZC5cbiAqXG4gKiBTZWUgdGhlIFtgZGF0YVByb3ZpZGVyYF0oIy9lbGVtZW50cy92YWFkaW4tZ3JpZCNwcm9wZXJ0eS1kYXRhUHJvdmlkZXIpIGluXG4gKiB0aGUgQVBJIHJlZmVyZW5jZSBiZWxvdyBmb3IgdGhlIGRldGFpbGVkIGRhdGEgcHJvdmlkZXIgYXJndW1lbnRzIGRlc2NyaXB0aW9uLFxuICogYW5kIHRoZSDigJxBc3NpZ25pbmcgRGF0YeKAnSBwYWdlIGluIHRoZSBkZW1vcy5cbiAqXG4gKiBfX05vdGUgdGhhdCBleHBhbmRpbmcgdGhlIHRyZWUgZ3JpZCdzIGl0ZW0gd2lsbCB0cmlnZ2VyIGEgY2FsbCB0byB0aGUgYGRhdGFQcm92aWRlcmAuX19cbiAqXG4gKiBfX0Fsc28sIG5vdGUgdGhhdCB3aGVuIHVzaW5nIGZ1bmN0aW9uIGRhdGEgcHJvdmlkZXJzLCB0aGUgdG90YWwgbnVtYmVyIG9mIGl0ZW1zXG4gKiBuZWVkcyB0byBiZSBzZXQgbWFudWFsbHkuIFRoZSB0b3RhbCBudW1iZXIgb2YgaXRlbXMgY2FuIGJlIHJldHVybmVkXG4gKiBpbiB0aGUgc2Vjb25kIGFyZ3VtZW50IG9mIHRoZSBkYXRhIHByb3ZpZGVyIGNhbGxiYWNrOl9fXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogZ3JpZC5kYXRhUHJvdmlkZXIgPSBmdW5jdGlvbihwYXJhbXMsIGNhbGxiYWNrKSB7XG4gKiAgIHZhciB1cmwgPSAnaHR0cHM6Ly9hcGkuZXhhbXBsZS9kYXRhJyArXG4gKiAgICAgICAnP3BhZ2U9JyArIHBhcmFtcy5wYWdlICsgICAgICAgIC8vIHRoZSByZXF1ZXN0ZWQgcGFnZSBpbmRleFxuICogICAgICAgJyZwZXJfcGFnZT0nICsgcGFyYW1zLnBhZ2VTaXplOyAvLyBudW1iZXIgb2YgaXRlbXMgb24gdGhlIHBhZ2VcbiAqICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICogICB4aHIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgdmFyIHJlc3BvbnNlID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcbiAqICAgICBjYWxsYmFjayhcbiAqICAgICAgIHJlc3BvbnNlLmVtcGxveWVlcywgLy8gcmVxdWVzdGVkIHBhZ2Ugb2YgaXRlbXNcbiAqICAgICAgIHJlc3BvbnNlLnRvdGFsU2l6ZSAgLy8gdG90YWwgbnVtYmVyIG9mIGl0ZW1zXG4gKiAgICAgKTtcbiAqICAgfTtcbiAqICAgeGhyLm9wZW4oJ0dFVCcsIHVybCwgdHJ1ZSk7XG4gKiAgIHhoci5zZW5kKCk7XG4gKiB9O1xuICogYGBgXG4gKlxuICogX19BbHRlcm5hdGl2ZWx5LCB5b3UgY2FuIHVzZSB0aGUgYHNpemVgIHByb3BlcnR5IHRvIHNldCB0aGUgdG90YWwgbnVtYmVyIG9mIGl0ZW1zOl9fXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogZ3JpZC5zaXplID0gMjAwOyAvLyBUaGUgdG90YWwgbnVtYmVyIG9mIGl0ZW1zXG4gKiBncmlkLmRhdGFQcm92aWRlciA9IGZ1bmN0aW9uKHBhcmFtcywgY2FsbGJhY2spIHtcbiAqICAgdmFyIHVybCA9ICdodHRwczovL2FwaS5leGFtcGxlL2RhdGEnICtcbiAqICAgICAgICc/cGFnZT0nICsgcGFyYW1zLnBhZ2UgKyAgICAgICAgLy8gdGhlIHJlcXVlc3RlZCBwYWdlIGluZGV4XG4gKiAgICAgICAnJnBlcl9wYWdlPScgKyBwYXJhbXMucGFnZVNpemU7IC8vIG51bWJlciBvZiBpdGVtcyBvbiB0aGUgcGFnZVxuICogICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gKiAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAqICAgICB2YXIgcmVzcG9uc2UgPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpO1xuICogICAgIGNhbGxiYWNrKHJlc3BvbnNlLmVtcGxveWVlcyk7XG4gKiAgIH07XG4gKiAgIHhoci5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xuICogICB4aHIuc2VuZCgpO1xuICogfTtcbiAqIGBgYFxuICpcbiAqICMjIyBTdHlsaW5nXG4gKlxuICogVGhlIGZvbGxvd2luZyBzaGFkb3cgRE9NIHBhcnRzIGFyZSBhdmFpbGFibGUgZm9yIHN0eWxpbmc6XG4gKlxuICogUGFydCBuYW1lIHwgRGVzY3JpcHRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLVxuICogYHJvd2AgfCBSb3cgaW4gdGhlIGludGVybmFsIHRhYmxlXG4gKiBgY2VsbGAgfCBDZWxsIGluIHRoZSBpbnRlcm5hbCB0YWJsZVxuICogYGhlYWRlci1jZWxsYCB8IEhlYWRlciBjZWxsIGluIHRoZSBpbnRlcm5hbCB0YWJsZVxuICogYGJvZHktY2VsbGAgfCBCb2R5IGNlbGwgaW4gdGhlIGludGVybmFsIHRhYmxlXG4gKiBgZm9vdGVyLWNlbGxgIHwgRm9vdGVyIGNlbGwgaW4gdGhlIGludGVybmFsIHRhYmxlXG4gKiBgZGV0YWlscy1jZWxsYCB8IFJvdyBkZXRhaWxzIGNlbGwgaW4gdGhlIGludGVybmFsIHRhYmxlXG4gKiBgcmVzaXplLWhhbmRsZWAgfCBIYW5kbGUgZm9yIHJlc2l6aW5nIHRoZSBjb2x1bW5zXG4gKiBgcmVvcmRlci1naG9zdGAgfCBHaG9zdCBlbGVtZW50IG9mIHRoZSBoZWFkZXIgY2VsbCBiZWluZyBkcmFnZ2VkXG4gKlxuICogVGhlIGZvbGxvd2luZyBzdGF0ZSBhdHRyaWJ1dGVzIGFyZSBhdmFpbGFibGUgZm9yIHN0eWxpbmc6XG4gKlxuICogQXR0cmlidXRlICAgIHwgRGVzY3JpcHRpb24gfCBQYXJ0IG5hbWVcbiAqIC0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS1cbiAqIGBsb2FkaW5nYCB8IFNldCB3aGVuIHRoZSBncmlkIGlzIGxvYWRpbmcgZGF0YSBmcm9tIGRhdGEgcHJvdmlkZXIgfCA6aG9zdFxuICogYGludGVyYWN0aW5nYCB8IEtleWJvYXJkIG5hdmlnYXRpb24gaW4gaW50ZXJhY3Rpb24gbW9kZSB8IDpob3N0XG4gKiBgbmF2aWdhdGluZ2AgfCBLZXlib2FyZCBuYXZpZ2F0aW9uIGluIG5hdmlnYXRpb24gbW9kZSB8IDpob3N0XG4gKiBgb3ZlcmZsb3dgIHwgU2V0IHdoZW4gcm93cyBhcmUgb3ZlcmZsb3dpbmcgdGhlIGdyaWQgdmlld3BvcnQuIFBvc3NpYmxlIHZhbHVlczogYHRvcGAsIGBib3R0b21gLCBgbGVmdGAsIGByaWdodGAgfCA6aG9zdFxuICogYHJlb3JkZXJpbmdgIHwgU2V0IHdoZW4gdGhlIGdyaWQncyBjb2x1bW5zIGFyZSBiZWluZyByZW9yZGVyZWQgfCA6aG9zdFxuICogYGRyYWdvdmVyYCB8IFNldCB3aGVuIHRoZSBncmlkIChub3QgYSBzcGVjaWZpYyByb3cpIGlzIGRyYWdnZWQgb3ZlciB8IDpob3N0XG4gKiBgZHJhZ2dpbmctcm93c2AgOiBTZXQgd2hlbiBncmlkIHJvd3MgYXJlIGRyYWdnZWQgIHwgOmhvc3RcbiAqIGByZW9yZGVyLXN0YXR1c2AgfCBSZWZsZWN0cyB0aGUgc3RhdHVzIG9mIGEgY2VsbCB3aGlsZSBjb2x1bW5zIGFyZSBiZWluZyByZW9yZGVyZWQgfCBjZWxsXG4gKiBgZnJvemVuYCB8IEZyb3plbiBjZWxsIHwgY2VsbFxuICogYGxhc3QtZnJvemVuYCB8IExhc3QgZnJvemVuIGNlbGwgfCBjZWxsXG4qICogYGZpcnN0LWNvbHVtbmAgfCBGaXJzdCB2aXNpYmxlIGNlbGwgb24gYSByb3cgfCBjZWxsXG4gKiBgbGFzdC1jb2x1bW5gIHwgTGFzdCB2aXNpYmxlIGNlbGwgb24gYSByb3cgfCBjZWxsXG4gKiBgc2VsZWN0ZWRgIHwgU2VsZWN0ZWQgcm93IHwgcm93XG4gKiBgZXhwYW5kZWRgIHwgRXhwYW5kZWQgcm93IHwgcm93XG4gKiBgZGV0YWlscy1vcGVuZWRgIHwgUm93IHdpdGggZGV0YWlscyBvcGVuIHwgcm93XG4gKiBgbG9hZGluZ2AgfCBSb3cgdGhhdCBpcyB3YWl0aW5nIGZvciBkYXRhIGZyb20gZGF0YSBwcm92aWRlciB8IHJvd1xuICogYG9kZGAgfCBPZGQgcm93IHwgcm93XG4gKiBgZmlyc3RgIHwgVGhlIGZpcnN0IGJvZHkgcm93IHwgcm93XG4gKiBgZHJhZ3N0YXJ0YCB8IFNldCBmb3Igb25lIGZyYW1lIHdoZW4gZHJhZyBvZiBhIHJvdyBpcyBzdGFydGluZy4gVGhlIHZhbHVlIGlzIGEgbnVtYmVyIHdoZW4gbXVsdGlwbGUgcm93cyBhcmUgZHJhZ2dlZCB8IHJvd1xuICogYGRyYWdvdmVyYCB8IFNldCB3aGVuIHRoZSByb3cgaXMgZHJhZ2dlZCBvdmVyIHwgcm93XG4gKiBgZHJhZy1kaXNhYmxlZGAgfCBTZXQgdG8gYSByb3cgdGhhdCBpc24ndCBhdmFpbGFibGUgZm9yIGRyYWdnaW5nIHwgcm93XG4gKiBgZHJvcC1kaXNhYmxlZGAgfCBTZXQgdG8gYSByb3cgdGhhdCBjYW4ndCBiZSBkcm9wcGVkIG9uIHRvcCBvZiB8IHJvd1xuICpcbiAqIFNlZSBbVGhlbWFibGVNaXhpbiDigJMgaG93IHRvIGFwcGx5IHN0eWxlcyBmb3Igc2hhZG93IHBhcnRzXShodHRwczovL2dpdGh1Yi5jb20vdmFhZGluL3ZhYWRpbi10aGVtYWJsZS1taXhpbi93aWtpKVxuICpcbiAqIEBtZW1iZXJvZiBWYWFkaW5cbiAqIEBtaXhlcyBWYWFkaW4uVGhlbWFibGVNaXhpblxuICogQG1peGVzIFZhYWRpbi5HcmlkLkExMXlNaXhpblxuICogQG1peGVzIFZhYWRpbi5HcmlkLkFjdGl2ZUl0ZW1NaXhpblxuICogQG1peGVzIFZhYWRpbi5HcmlkLkFycmF5RGF0YVByb3ZpZGVyTWl4aW5cbiAqIEBtaXhlcyBWYWFkaW4uR3JpZC5Db2x1bW5SZXNpemluZ01peGluXG4gKiBAbWl4ZXMgVmFhZGluLkdyaWQuRGF0YVByb3ZpZGVyTWl4aW5cbiAqIEBtaXhlcyBWYWFkaW4uR3JpZC5EeW5hbWljQ29sdW1uc01peGluXG4gKiBAbWl4ZXMgVmFhZGluLkdyaWQuRmlsdGVyTWl4aW5cbiAqIEBtaXhlcyBWYWFkaW4uR3JpZC5Sb3dEZXRhaWxzTWl4aW5cbiAqIEBtaXhlcyBWYWFkaW4uR3JpZC5TY3JvbGxNaXhpblxuICogQG1peGVzIFZhYWRpbi5HcmlkLlNlbGVjdGlvbk1peGluXG4gKiBAbWl4ZXMgVmFhZGluLkdyaWQuU29ydE1peGluXG4gKiBAbWl4ZXMgVmFhZGluLkdyaWQuS2V5Ym9hcmROYXZpZ2F0aW9uTWl4aW5cbiAqIEBtaXhlcyBWYWFkaW4uR3JpZC5Db2x1bW5SZW9yZGVyaW5nTWl4aW5cbiAqIEBtaXhlcyBWYWFkaW4uR3JpZC5FdmVudENvbnRleHRNaXhpblxuICogQG1peGVzIFZhYWRpbi5HcmlkLlN0eWxpbmdNaXhpblxuICogQG1peGVzIFZhYWRpbi5HcmlkLkRyYWdBbmREcm9wTWl4aW5cbiAqIEBkZW1vIGRlbW8vaW5kZXguaHRtbFxuICovXG5jbGFzcyBHcmlkRWxlbWVudCBleHRlbmRzXG4gIEVsZW1lbnRNaXhpbihcbiAgICBUaGVtYWJsZU1peGluKFxuICAgICAgRGF0YVByb3ZpZGVyTWl4aW4oXG4gICAgICAgIEFycmF5RGF0YVByb3ZpZGVyTWl4aW4oXG4gICAgICAgICAgRHluYW1pY0NvbHVtbnNNaXhpbihcbiAgICAgICAgICAgIEFjdGl2ZUl0ZW1NaXhpbihcbiAgICAgICAgICAgICAgU2Nyb2xsTWl4aW4oXG4gICAgICAgICAgICAgICAgU2VsZWN0aW9uTWl4aW4oXG4gICAgICAgICAgICAgICAgICBTb3J0TWl4aW4oXG4gICAgICAgICAgICAgICAgICAgIFJvd0RldGFpbHNNaXhpbihcbiAgICAgICAgICAgICAgICAgICAgICBLZXlib2FyZE5hdmlnYXRpb25NaXhpbihcbiAgICAgICAgICAgICAgICAgICAgICAgIEExMXlNaXhpbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsdGVyTWl4aW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29sdW1uUmVvcmRlcmluZ01peGluKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29sdW1uUmVzaXppbmdNaXhpbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnRDb250ZXh0TWl4aW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRHJhZ0FuZERyb3BNaXhpbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0eWxpbmdNaXhpbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2Nyb2xsZXJFbGVtZW50KSkpKSkpKSkpKSkpKSkpKSkpIHtcbiAgc3RhdGljIGdldCB0ZW1wbGF0ZSgpIHtcbiAgICByZXR1cm4gaHRtbGBcbiAgICA8c3R5bGUgaW5jbHVkZT1cInZhYWRpbi1ncmlkLXN0eWxlc1wiPjwvc3R5bGU+XG5cbiAgICA8ZGl2IGlkPVwic2Nyb2xsZXJcIiBuby1zY3JvbGxiYXJzXFwkPVwiW1shX3Njcm9sbGJhcldpZHRoXV1cIiB3aGVlbC1zY3JvbGxpbmdcXCQ9XCJbW193aGVlbFNjcm9sbGluZ11dXCIgc2FmYXJpXFwkPVwiW1tfc2FmYXJpXV1cIiBpb3NcXCQ9XCJbW19pb3NdXVwiIGxvYWRpbmdcXCQ9XCJbW2xvYWRpbmddXVwiIGVkZ2VcXCQ9XCJbW19lZGdlXV1cIiBmaXJlZm94XFwkPVwiW1tfZmlyZWZveF1dXCIgaWVcXCQ9XCJbW19pZV1dXCIgY29sdW1uLXJlb3JkZXJpbmctYWxsb3dlZFxcJD1cIltbY29sdW1uUmVvcmRlcmluZ0FsbG93ZWRdXVwiPlxuXG4gICAgICA8dGFibGUgaWQ9XCJ0YWJsZVwiIHJvbGU9XCJncmlkXCIgYXJpYS1tdWx0aXNlbGVjdGFibGU9XCJ0cnVlXCIgdGFiaW5kZXg9XCIwXCI+XG4gICAgICAgIDxjYXB0aW9uIGlkPVwiZml4ZWRzaXplclwiIGNsYXNzPVwic2l6ZXJcIiBwYXJ0PVwicm93XCI+PC9jYXB0aW9uPlxuICAgICAgICA8dGhlYWQgaWQ9XCJoZWFkZXJcIiByb2xlPVwicm93Z3JvdXBcIj48L3RoZWFkPlxuICAgICAgICA8dGJvZHkgaWQ9XCJpdGVtc1wiIHJvbGU9XCJyb3dncm91cFwiPjwvdGJvZHk+XG4gICAgICAgIDx0Zm9vdCBpZD1cImZvb3RlclwiIHJvbGU9XCJyb3dncm91cFwiPjwvdGZvb3Q+XG4gICAgICA8L3RhYmxlPlxuXG4gICAgICA8ZGl2IHBhcnQ9XCJyZW9yZGVyLWdob3N0XCI+PC9kaXY+XG4gICAgICA8dmFhZGluLWdyaWQtb3V0ZXItc2Nyb2xsZXIgaWQ9XCJvdXRlcnNjcm9sbGVyXCIgX3RvdWNoLWRldmljZT1cIltbX3RvdWNoRGV2aWNlXV1cIiBzY3JvbGwtdGFyZ2V0PVwiW1tzY3JvbGxUYXJnZXRdXVwiIHNjcm9sbC1oYW5kbGVyPVwiW1tfdGhpc11dXCIgbm8tc2Nyb2xsYmFycz1cIltbIV9zY3JvbGxiYXJXaWR0aF1dXCI+XG4gICAgICAgIDxkaXYgaWQ9XCJvdXRlcnNpemVyXCIgY2xhc3M9XCJzaXplclwiIHBhcnQ9XCJyb3dcIj48L2Rpdj5cbiAgICAgIDwvdmFhZGluLWdyaWQtb3V0ZXItc2Nyb2xsZXI+XG4gICAgPC9kaXY+XG5cbiAgICA8IS0tIFRoZSB0ZW1wbGF0ZSBuZWVkcyBhdCBsZWFzdCBvbmUgc2xvdCBvciBlbHNlIHNoYWR5IGRvZXNuJ3QgZGlzdHJpYnV0ZSAtLT5cbiAgICA8c2xvdCBuYW1lPVwibm9kaXN0cmlidXRlXCI+PC9zbG90PlxuXG4gICAgPGRpdiBpZD1cImZvY3VzZXhpdFwiIHRhYmluZGV4PVwiMFwiPjwvZGl2PlxuYDtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgaXMoKSB7XG4gICAgcmV0dXJuICd2YWFkaW4tZ3JpZCc7XG4gIH1cblxuICBzdGF0aWMgZ2V0IHZlcnNpb24oKSB7XG4gICAgcmV0dXJuICc1LjUuMyc7XG4gIH1cblxuICBzdGF0aWMgZ2V0IG9ic2VydmVycygpIHtcbiAgICByZXR1cm4gW1xuICAgICAgJ19jb2x1bW5UcmVlQ2hhbmdlZChfY29sdW1uVHJlZSwgX2NvbHVtblRyZWUuKiknXG4gICAgXTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcbiAgICByZXR1cm4ge1xuXG4gICAgICBfdGhpczoge1xuICAgICAgICB0eXBlOiBPYmplY3QsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgX3NhZmFyaToge1xuICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICB2YWx1ZTogL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KVxuICAgICAgfSxcblxuICAgICAgX2lvczoge1xuICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICB2YWx1ZTogKC9pUGFkfGlQaG9uZXxpUG9kLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpICYmICF3aW5kb3cuTVNTdHJlYW0pXG4gICAgICAgICAgfHwgKG5hdmlnYXRvci5wbGF0Zm9ybSA9PT0gJ01hY0ludGVsJyAmJiBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAxKVxuICAgICAgfSxcblxuICAgICAgX2VkZ2U6IHtcbiAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgdmFsdWU6IHR5cGVvZiBDU1MgIT09ICd1bmRlZmluZWQnICYmIENTUy5zdXBwb3J0cygnKC1tcy1pbWUtYWxpZ246YXV0byknKVxuICAgICAgfSxcblxuICAgICAgX2llOiB7XG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgIHZhbHVlOiAhIShuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9UcmlkZW50LykgJiYgIW5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL01TSUUvKSlcbiAgICAgIH0sXG5cbiAgICAgIF9maXJlZm94OiB7XG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgIHZhbHVlOiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZignZmlyZWZveCcpID4gLTFcbiAgICAgIH0sXG5cbiAgICAgIF9hbmRyb2lkOiB7XG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgIHZhbHVlOiAvYW5kcm9pZC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudClcbiAgICAgIH0sXG5cbiAgICAgIF90b3VjaERldmljZToge1xuICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICB2YWx1ZTogVE9VQ0hfREVWSUNFXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIElmIHRydWUsIHRoZSBncmlkJ3MgaGVpZ2h0IGlzIGRlZmluZWQgYnkgdGhlIG51bWJlciBvZiBpdHMgcm93cy5cbiAgICAgICAqL1xuICAgICAgaGVpZ2h0QnlSb3dzOiB7XG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgIHZhbHVlOiBmYWxzZSxcbiAgICAgICAgcmVmbGVjdFRvQXR0cmlidXRlOiB0cnVlLFxuICAgICAgICBvYnNlcnZlcjogJ19oZWlnaHRCeVJvd3NDaGFuZ2VkJ1xuICAgICAgfSxcbiAgICAgIF9yZWNhbGN1bGF0ZUNvbHVtbldpZHRoT25jZUxvYWRpbmdGaW5pc2hlZDoge1xuICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgdGhpcy5fb25BbmltYXRpb25FbmQpO1xuICB9XG5cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB0aGlzLnJlY2FsY3VsYXRlQ29sdW1uV2lkdGhzKCk7XG4gIH1cblxuICBfX2hhc1Jvd3NXaXRoQ2xpZW50SGVpZ2h0KCkge1xuICAgIHJldHVybiAhIUFycmF5LmZyb20odGhpcy4kLml0ZW1zLmNoaWxkcmVuKS5maWx0ZXIocm93ID0+IHJvdy5jbGllbnRIZWlnaHQpLmxlbmd0aDtcbiAgfVxuXG4gIF9faXRlbXNSZWNlaXZlZCgpIHtcbiAgICBpZiAodGhpcy5fcmVjYWxjdWxhdGVDb2x1bW5XaWR0aE9uY2VMb2FkaW5nRmluaXNoZWRcbiAgICAgICYmICF0aGlzLl9jYWNoZS5pc0xvYWRpbmcoKVxuICAgICAgJiYgdGhpcy5fX2hhc1Jvd3NXaXRoQ2xpZW50SGVpZ2h0KCkpIHtcbiAgICAgIHRoaXMuX3JlY2FsY3VsYXRlQ29sdW1uV2lkdGhPbmNlTG9hZGluZ0ZpbmlzaGVkID0gZmFsc2U7XG4gICAgICB0aGlzLnJlY2FsY3VsYXRlQ29sdW1uV2lkdGhzKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7QXJyYXk8VmFhZGluLkdyaWRDb2x1bW5FbGVtZW50Pn0gY29scyB0aGUgY29sdW1ucyB0byBhdXRvIHNpemUgYmFzZWQgb24gdGhlaXIgY29udGVudCB3aWR0aFxuICAgKi9cbiAgX3JlY2FsY3VsYXRlQ29sdW1uV2lkdGhzKGNvbHMpIHtcbiAgICAvLyBOb3RlOiBUaGUgYGNvbHMuZm9yRWFjaCgpYCBsb29wcyBiZWxvdyBjb3VsZCBiZSBpbXBsZW1lbnRlZCBhcyBhIHNpbmdsZSBsb29wIGJ1dCB0aGlzIGhhcyBiZWVuXG4gICAgLy8gc3BsaXQgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMgdG8gYmF0Y2ggdGhlc2Ugc2ltaWxhciBhY3Rpb25zIFt3cml0ZS9yZWFkXSB0b2dldGhlciB0byBhdm9pZFxuICAgIC8vIHVubmVjZXNzYXJ5IGxheW91dCB0cmFzaGluZy5cblxuICAgIC8vIFt3cml0ZV0gU2V0IGF1dG9tYXRpYyB3aWR0aCBmb3IgYWxsIGNlbGxzIChicmVha3MgY29sdW1uIGFsaWdubWVudClcbiAgICBjb2xzLmZvckVhY2goY29sID0+IHtcbiAgICAgIGNvbC53aWR0aCA9ICdhdXRvJztcbiAgICAgIGNvbC5fb3JpZ0ZsZXhHcm93ID0gY29sLmZsZXhHcm93O1xuICAgICAgY29sLmZsZXhHcm93ID0gMDtcbiAgICB9KTtcbiAgICAvLyBbcmVhZF0gTWVhc3VyZSBtYXggY2VsbCB3aWR0aCBpbiBlYWNoIGNvbHVtblxuICAgIGNvbHMuZm9yRWFjaChjb2wgPT4ge1xuICAgICAgY29sLl9jdXJyZW50V2lkdGggPSAwO1xuICAgICAgLy8gTm90ZTogX2FsbENlbGxzIG9ubHkgY29udGFpbnMgY2VsbHMgd2hpY2ggYXJlIGN1cnJlbnRseSByZW5kZXJlZCBpbiBET01cbiAgICAgIGNvbC5fYWxsQ2VsbHMuZm9yRWFjaChjID0+IHtcbiAgICAgICAgY29uc3QgY2VsbFdpZHRoID0gTWF0aC5jZWlsKGMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgpO1xuICAgICAgICBjb2wuX2N1cnJlbnRXaWR0aCA9IE1hdGgubWF4KGNvbC5fY3VycmVudFdpZHRoLCBjZWxsV2lkdGgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgLy8gW3dyaXRlXSBTZXQgY29sdW1uIHdpZHRocyB0byBmaXQgd2lkZXN0IG1lYXN1cmVkIGNvbnRlbnRcbiAgICBjb2xzLmZvckVhY2goY29sID0+IHtcbiAgICAgIGNvbC53aWR0aCA9IGAke2NvbC5fY3VycmVudFdpZHRofXB4YDtcbiAgICAgIGNvbC5mbGV4R3JvdyA9IGNvbC5fb3JpZ0ZsZXhHcm93O1xuICAgICAgY29sLl9jdXJyZW50V2lkdGggPSB1bmRlZmluZWQ7XG4gICAgICBjb2wuX29yaWdGbGV4R3JvdyA9IHVuZGVmaW5lZDtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBgd2lkdGhgIG9mIGFsbCBjb2x1bW5zIHdoaWNoIGhhdmUgYGF1dG9XaWR0aGAgc2V0IHRvIGB0cnVlYC5cbiAgICovXG4gIHJlY2FsY3VsYXRlQ29sdW1uV2lkdGhzKCkge1xuICAgIGlmICghdGhpcy5fY29sdW1uVHJlZSkge1xuICAgICAgcmV0dXJuOyAvLyBObyBjb2x1bW5zXG4gICAgfVxuICAgIGlmICh0aGlzLl9jYWNoZS5pc0xvYWRpbmcoKSkge1xuICAgICAgdGhpcy5fcmVjYWxjdWxhdGVDb2x1bW5XaWR0aE9uY2VMb2FkaW5nRmluaXNoZWQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjb2xzID0gdGhpcy5fZ2V0Q29sdW1ucygpLmZpbHRlcihjb2wgPT4gIWNvbC5oaWRkZW4gJiYgY29sLmF1dG9XaWR0aCk7XG4gICAgICB0aGlzLl9yZWNhbGN1bGF0ZUNvbHVtbldpZHRocyhjb2xzKTtcblxuICAgIH1cbiAgfVxuXG4gIF9jcmVhdGVTY3JvbGxlclJvd3MoY291bnQpIHtcbiAgICBjb25zdCByb3dzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICBjb25zdCByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuICAgICAgcm93LnNldEF0dHJpYnV0ZSgncGFydCcsICdyb3cnKTtcbiAgICAgIHJvdy5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAncm93Jyk7XG4gICAgICBpZiAodGhpcy5fY29sdW1uVHJlZSkge1xuICAgICAgICB0aGlzLl91cGRhdGVSb3cocm93LCB0aGlzLl9jb2x1bW5UcmVlW3RoaXMuX2NvbHVtblRyZWUubGVuZ3RoIC0gMV0sICdib2R5JywgZmFsc2UsIHRydWUpO1xuICAgICAgfVxuICAgICAgcm93cy5wdXNoKHJvdyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NvbHVtblRyZWUpIHtcbiAgICAgIHRoaXMuX2NvbHVtblRyZWVbdGhpcy5fY29sdW1uVHJlZS5sZW5ndGggLSAxXS5mb3JFYWNoKGMgPT4gYy5ub3RpZnlQYXRoICYmIGMubm90aWZ5UGF0aCgnX2NlbGxzLionLCBjLl9jZWxscykpO1xuICAgIH1cblxuICAgIGJlZm9yZU5leHRSZW5kZXIodGhpcywgKCkgPT4ge1xuICAgICAgdGhpcy5fdXBkYXRlRmlyc3RBbmRMYXN0Q29sdW1uKCk7XG4gICAgICB0aGlzLl9yZXNldEtleWJvYXJkTmF2aWdhdGlvbigpO1xuICAgIH0pO1xuICAgIHJldHVybiByb3dzO1xuICB9XG5cbiAgX2dldFJvd1RhcmdldCgpIHtcbiAgICByZXR1cm4gdGhpcy4kLml0ZW1zO1xuICB9XG5cbiAgX2NyZWF0ZUNlbGwodGFnTmFtZSkge1xuICAgIGNvbnN0IGNvbnRlbnRJZCA9IHRoaXMuX2NvbnRlbnRJbmRleCA9IHRoaXMuX2NvbnRlbnRJbmRleCArIDEgfHwgMDtcbiAgICBjb25zdCBzbG90TmFtZSA9ICd2YWFkaW4tZ3JpZC1jZWxsLWNvbnRlbnQtJyArIGNvbnRlbnRJZDtcblxuICAgIGNvbnN0IGNlbGxDb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmFhZGluLWdyaWQtY2VsbC1jb250ZW50Jyk7XG4gICAgY2VsbENvbnRlbnQuc2V0QXR0cmlidXRlKCdzbG90Jywgc2xvdE5hbWUpO1xuXG4gICAgY29uc3QgY2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gICAgY2VsbC5pZCA9IHNsb3ROYW1lLnJlcGxhY2UoJy1jb250ZW50LScsICctJyk7XG4gICAgY2VsbC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgY2VsbC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCB0YWdOYW1lID09PSAndGQnID8gJ2dyaWRjZWxsJyA6ICdjb2x1bW5oZWFkZXInKTtcblxuICAgIGNvbnN0IHNsb3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzbG90Jyk7XG4gICAgc2xvdC5zZXRBdHRyaWJ1dGUoJ25hbWUnLCBzbG90TmFtZSk7XG5cbiAgICBjZWxsLmFwcGVuZENoaWxkKHNsb3QpO1xuXG4gICAgY2VsbC5fY29udGVudCA9IGNlbGxDb250ZW50O1xuXG4gICAgLy8gV2l0aCBuYXRpdmUgU2hhZG93IERPTSwgbW91c2Vkb3duIG9uIHNsb3R0ZWQgZWxlbWVudCBkb2VzIG5vdCBmb2N1c1xuICAgIC8vIGZvY3VzYWJsZSBzbG90IHdyYXBwZXIsIHRoYXQgaXMgd2h5IGNlbGxzIGFyZSBub3QgZm9jdXNlZCB3aXRoXG4gICAgLy8gbW91c2Vkb3duLiBXb3JrYXJvdW5kOiBsaXN0ZW4gZm9yIG1vdXNlZG93biBhbmQgZm9jdXMgbWFudWFsbHkuXG4gICAgY2VsbENvbnRlbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKCkgPT4ge1xuICAgICAgaWYgKHdpbmRvdy5jaHJvbWUpIHtcbiAgICAgICAgLy8gQ2hyb21lIGJ1ZzogZm9jdXNpbmcgYmVmb3JlIG1vdXNldXAgcHJldmVudHMgdGV4dCBzZWxlY3Rpb24sIHNlZSBodHRwOi8vY3JidWcuY29tLzc3MTkwM1xuICAgICAgICBjb25zdCBtb3VzZVVwTGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICAgICAgaWYgKCFjZWxsQ29udGVudC5jb250YWlucyh0aGlzLmdldFJvb3ROb2RlKCkuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgICAgIGNlbGwuZm9jdXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gSWYgZm9jdXMgaXMgaW4gdGhlIGNlbGwgY29udGVudCDigJQgcmVzcGVjdCBpdCwgZG8gbm90IGNoYW5nZS5cbiAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgbW91c2VVcExpc3RlbmVyLCB0cnVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG1vdXNlVXBMaXN0ZW5lciwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGb2N1cyBvbiBtb3VzZXVwLCBvbiB0aGUgb3RoZXIgaGFuZCwgcmVtb3ZlcyBzZWxlY3Rpb24gb24gU2FmYXJpLlxuICAgICAgICAvLyBXYXRjaCBvdXQgc3luYyBmb2N1cyByZW1vdmFsIGlzc3VlLCBvbmx5IGFzeW5jIGZvY3VzIHdvcmtzIGhlcmUuXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGlmICghY2VsbENvbnRlbnQuY29udGFpbnModGhpcy5nZXRSb290Tm9kZSgpLmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgICAgICBjZWxsLmZvY3VzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBjZWxsO1xuICB9XG5cbiAgX3VwZGF0ZVJvdyhyb3csIGNvbHVtbnMsIHNlY3Rpb24sIGlzQ29sdW1uUm93LCBub05vdGlmeSkge1xuICAgIHNlY3Rpb24gPSBzZWN0aW9uIHx8ICdib2R5JztcblxuICAgIGNvbnN0IGNvbnRlbnRzRnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG5cbiAgICBBcnJheS5mcm9tKHJvdy5jaGlsZHJlbikuZm9yRWFjaChjZWxsID0+IGNlbGwuX3ZhY2FudCA9IHRydWUpO1xuICAgIHJvdy5pbm5lckhUTUwgPSAnJztcbiAgICBpZiAocm93LmlkICE9PSAnb3V0ZXJzaXplcicgJiYgcm93LmlkICE9PSAnZml4ZWRzaXplcicpIHtcbiAgICAgIHJvdy5oaWRkZW4gPSB0cnVlO1xuICAgIH1cbiAgICBjb2x1bW5zLmZvckVhY2goKGNvbHVtbiwgaW5kZXgpID0+IHtcbiAgICAgIGxldCBjZWxsO1xuXG4gICAgICBpZiAoc2VjdGlvbiA9PT0gJ2JvZHknKSB7XG4gICAgICAgIC8vIEJvZHlcbiAgICAgICAgY29sdW1uLl9jZWxscyA9IGNvbHVtbi5fY2VsbHMgfHwgW107XG4gICAgICAgIGNlbGwgPSBjb2x1bW4uX2NlbGxzLmZpbHRlcihjZWxsID0+IGNlbGwuX3ZhY2FudClbMF07XG4gICAgICAgIGlmICghY2VsbCkge1xuICAgICAgICAgIGNlbGwgPSB0aGlzLl9jcmVhdGVDZWxsKCd0ZCcpO1xuICAgICAgICAgIGNvbHVtbi5fY2VsbHMucHVzaChjZWxsKTtcbiAgICAgICAgfVxuICAgICAgICBjZWxsLnNldEF0dHJpYnV0ZSgncGFydCcsICdjZWxsIGJvZHktY2VsbCcpO1xuICAgICAgICByb3cuYXBwZW5kQ2hpbGQoY2VsbCk7XG5cbiAgICAgICAgaWYgKGluZGV4ID09PSBjb2x1bW5zLmxlbmd0aCAtIDEgJiYgKHRoaXMuX3Jvd0RldGFpbHNUZW1wbGF0ZSB8fCB0aGlzLnJvd0RldGFpbHNSZW5kZXJlcikpIHtcbiAgICAgICAgICAvLyBBZGQgZGV0YWlscyBjZWxsIGFzIGxhc3QgY2VsbCB0byBib2R5IHJvd3NcbiAgICAgICAgICB0aGlzLl9kZXRhaWxzQ2VsbHMgPSB0aGlzLl9kZXRhaWxzQ2VsbHMgfHwgW107XG4gICAgICAgICAgY29uc3QgZGV0YWlsc0NlbGwgPSB0aGlzLl9kZXRhaWxzQ2VsbHMuZmlsdGVyKGNlbGwgPT4gY2VsbC5fdmFjYW50KVswXSB8fCB0aGlzLl9jcmVhdGVDZWxsKCd0ZCcpO1xuICAgICAgICAgIGlmICh0aGlzLl9kZXRhaWxzQ2VsbHMuaW5kZXhPZihkZXRhaWxzQ2VsbCkgPT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLl9kZXRhaWxzQ2VsbHMucHVzaChkZXRhaWxzQ2VsbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghZGV0YWlsc0NlbGwuX2NvbnRlbnQucGFyZW50RWxlbWVudCkge1xuICAgICAgICAgICAgY29udGVudHNGcmFnbWVudC5hcHBlbmRDaGlsZChkZXRhaWxzQ2VsbC5fY29udGVudCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX2NvbmZpZ3VyZURldGFpbHNDZWxsKGRldGFpbHNDZWxsKTtcbiAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQoZGV0YWlsc0NlbGwpO1xuICAgICAgICAgIHRoaXMuX2ExMXlTZXRSb3dEZXRhaWxzQ2VsbChyb3csIGRldGFpbHNDZWxsKTtcbiAgICAgICAgICBkZXRhaWxzQ2VsbC5fdmFjYW50ID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29sdW1uLm5vdGlmeVBhdGggJiYgIW5vTm90aWZ5KSB7XG4gICAgICAgICAgY29sdW1uLm5vdGlmeVBhdGgoJ19jZWxscy4qJywgY29sdW1uLl9jZWxscyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEhlYWRlciAmIGZvb3RlclxuICAgICAgICBjb25zdCB0YWdOYW1lID0gc2VjdGlvbiA9PT0gJ2hlYWRlcicgPyAndGgnIDogJ3RkJztcbiAgICAgICAgaWYgKGlzQ29sdW1uUm93IHx8IGNvbHVtbi5sb2NhbE5hbWUgPT09ICd2YWFkaW4tZ3JpZC1jb2x1bW4tZ3JvdXAnKSB7XG4gICAgICAgICAgY2VsbCA9IGNvbHVtbltgXyR7c2VjdGlvbn1DZWxsYF0gfHwgdGhpcy5fY3JlYXRlQ2VsbCh0YWdOYW1lKTtcbiAgICAgICAgICBjZWxsLl9jb2x1bW4gPSBjb2x1bW47XG4gICAgICAgICAgcm93LmFwcGVuZENoaWxkKGNlbGwpO1xuICAgICAgICAgIGNvbHVtbltgXyR7c2VjdGlvbn1DZWxsYF0gPSBjZWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbHVtbi5fZW1wdHlDZWxscyA9IGNvbHVtbi5fZW1wdHlDZWxscyB8fCBbXTtcbiAgICAgICAgICBjZWxsID0gY29sdW1uLl9lbXB0eUNlbGxzLmZpbHRlcihjZWxsID0+IGNlbGwuX3ZhY2FudClbMF0gfHwgdGhpcy5fY3JlYXRlQ2VsbCh0YWdOYW1lKTtcbiAgICAgICAgICBjZWxsLl9jb2x1bW4gPSBjb2x1bW47XG4gICAgICAgICAgcm93LmFwcGVuZENoaWxkKGNlbGwpO1xuICAgICAgICAgIGlmIChjb2x1bW4uX2VtcHR5Q2VsbHMuaW5kZXhPZihjZWxsKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIGNvbHVtbi5fZW1wdHlDZWxscy5wdXNoKGNlbGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjZWxsLnNldEF0dHJpYnV0ZSgncGFydCcsIGBjZWxsICR7c2VjdGlvbn0tY2VsbGApO1xuICAgICAgICB0aGlzLl9fdXBkYXRlSGVhZGVyRm9vdGVyUm93VmlzaWJpbGl0eShyb3cpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWNlbGwuX2NvbnRlbnQucGFyZW50RWxlbWVudCkge1xuICAgICAgICBjb250ZW50c0ZyYWdtZW50LmFwcGVuZENoaWxkKGNlbGwuX2NvbnRlbnQpO1xuICAgICAgfVxuICAgICAgY2VsbC5fdmFjYW50ID0gZmFsc2U7XG4gICAgICBjZWxsLl9jb2x1bW4gPSBjb2x1bW47XG4gICAgfSk7XG5cbiAgICAvLyBNaWdodCBiZSBlbXB0eSBpZiBvbmx5IGNhY2hlIHdhcyB1c2VkXG4gICAgdGhpcy5hcHBlbmRDaGlsZChjb250ZW50c0ZyYWdtZW50KTtcblxuICAgIHRoaXMuX2Zyb3plbkNlbGxzQ2hhbmdlZCgpO1xuICAgIHRoaXMuX3VwZGF0ZUZpcnN0QW5kTGFzdENvbHVtbkZvclJvdyhyb3cpO1xuICB9XG5cbiAgX191cGRhdGVIZWFkZXJGb290ZXJSb3dWaXNpYmlsaXR5KHJvdykge1xuICAgIGlmICghcm93KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdmlzaWJsZVJvd0NlbGxzID0gQXJyYXkuZnJvbShyb3cuY2hpbGRyZW4pLmZpbHRlcihjZWxsID0+IHtcbiAgICAgIGNvbnN0IGNvbHVtbiA9IGNlbGwuX2NvbHVtbjtcbiAgICAgIGlmIChjb2x1bW4uX2VtcHR5Q2VsbHMgJiYgY29sdW1uLl9lbXB0eUNlbGxzLmluZGV4T2YoY2VsbCkgPiAtMSkge1xuICAgICAgICAvLyBUaGUgY2VsbCBpcyBhbiBcImVtcHR5IGNlbGxcIiAgLT4gZG9lc24ndCBibG9jayBoaWRpbmcgdGhlIHJvd1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAocm93LnBhcmVudEVsZW1lbnQgPT09IHRoaXMuJC5oZWFkZXIpIHtcbiAgICAgICAgaWYgKGNvbHVtbi5oZWFkZXJSZW5kZXJlciB8fCBjb2x1bW4uX2hlYWRlclRlbXBsYXRlKSB7XG4gICAgICAgICAgLy8gVGhlIGNlbGwgaXMgdGhlIGhlYWRlciBjZWxsIG9mIGEgY29sdW1uIHRoYXQgaGFzIGEgaGVhZGVyIHJlbmRlcmVyXG4gICAgICAgICAgLy8gb3IgYSBoZWFkZXIgdGVtcGxhdGUgLT4gcm93IHNob3VsZCBiZSB2aXNpYmxlXG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbHVtbi5oZWFkZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAvLyBUaGUgY29sdW1uIGhlYWRlciBpcyBleHBsaWNpbHR5IHNldCB0byBudWxsIC0+IGRvZXNuJ3QgYmxvY2sgaGlkaW5nIHRoZSByb3dcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbHVtbi5wYXRoIHx8IGNvbHVtbi5oZWFkZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIC8vIFRoZSBjb2x1bW4gaGFzIGFuIGV4cGxpY2l0IG5vbi1udWxsIGhlYWRlciBvciBhIHBhdGggdGhhdCBnZW5lcmF0ZXMgYSBoZWFkZXJcbiAgICAgICAgICAvLyAtPiByb3cgc2hvdWxkIGJlIHZpc2libGVcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGNvbHVtbi5mb290ZXJSZW5kZXJlciB8fCBjb2x1bW4uX2Zvb3RlclRlbXBsYXRlKSB7XG4gICAgICAgICAgLy8gVGhlIGNlbGwgaXMgdGhlIGZvb3RlciBjZWxsIG9mIGEgY29sdW1uIHRoYXQgaGFzIGEgZm9vdGVyIHJlbmRlcmVyXG4gICAgICAgICAgLy8gb3IgYSBmb290ZXIgdGVtcGxhdGUgLT4gcm93IHNob3VsZCBiZSB2aXNpYmxlXG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChyb3cuaGlkZGVuICE9PSAhdmlzaWJsZVJvd0NlbGxzLmxlbmd0aCkge1xuICAgICAgcm93LmhpZGRlbiA9ICF2aXNpYmxlUm93Q2VsbHMubGVuZ3RoO1xuICAgICAgdGhpcy5ub3RpZnlSZXNpemUoKTtcbiAgICB9XG4gIH1cblxuICBfdXBkYXRlU2Nyb2xsZXJJdGVtKHJvdywgaW5kZXgpIHtcbiAgICB0aGlzLl9wcmV2ZW50U2Nyb2xsZXJSb3RhdGluZ0NlbGxGb2N1cyhyb3csIGluZGV4KTtcblxuICAgIGlmICghdGhpcy5fY29sdW1uVHJlZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX3RvZ2dsZUF0dHJpYnV0ZSgnZmlyc3QnLCBpbmRleCA9PT0gMCwgcm93KTtcbiAgICB0aGlzLl90b2dnbGVBdHRyaWJ1dGUoJ29kZCcsIGluZGV4ICUgMiwgcm93KTtcbiAgICB0aGlzLl9hMTF5VXBkYXRlUm93Um93aW5kZXgocm93LCBpbmRleCk7XG4gICAgdGhpcy5fZ2V0SXRlbShpbmRleCwgcm93KTtcbiAgfVxuXG4gIF9jb2x1bW5UcmVlQ2hhbmdlZChjb2x1bW5UcmVlLCBzcGxpY2VzKSB7XG4gICAgQXJyYXkuZnJvbSh0aGlzLiQuaXRlbXMuY2hpbGRyZW4pLmZvckVhY2gocm93ID0+IHRoaXMuX3VwZGF0ZVJvdyhyb3csIGNvbHVtblRyZWVbY29sdW1uVHJlZS5sZW5ndGggLSAxXSkpO1xuXG4gICAgd2hpbGUgKHRoaXMuJC5oZWFkZXIuY2hpbGRyZW4ubGVuZ3RoIDwgY29sdW1uVHJlZS5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGhlYWRlclJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XG4gICAgICBoZWFkZXJSb3cuc2V0QXR0cmlidXRlKCdwYXJ0JywgJ3JvdycpO1xuICAgICAgaGVhZGVyUm93LnNldEF0dHJpYnV0ZSgncm9sZScsICdyb3cnKTtcbiAgICAgIHRoaXMuJC5oZWFkZXIuYXBwZW5kQ2hpbGQoaGVhZGVyUm93KTtcblxuICAgICAgY29uc3QgZm9vdGVyUm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcbiAgICAgIGZvb3RlclJvdy5zZXRBdHRyaWJ1dGUoJ3BhcnQnLCAncm93Jyk7XG4gICAgICBmb290ZXJSb3cuc2V0QXR0cmlidXRlKCdyb2xlJywgJ3JvdycpO1xuICAgICAgdGhpcy4kLmZvb3Rlci5hcHBlbmRDaGlsZChmb290ZXJSb3cpO1xuICAgIH1cbiAgICB3aGlsZSAodGhpcy4kLmhlYWRlci5jaGlsZHJlbi5sZW5ndGggPiBjb2x1bW5UcmVlLmxlbmd0aCkge1xuICAgICAgdGhpcy4kLmhlYWRlci5yZW1vdmVDaGlsZCh0aGlzLiQuaGVhZGVyLmZpcnN0RWxlbWVudENoaWxkKTtcbiAgICAgIHRoaXMuJC5mb290ZXIucmVtb3ZlQ2hpbGQodGhpcy4kLmZvb3Rlci5maXJzdEVsZW1lbnRDaGlsZCk7XG4gICAgfVxuXG4gICAgQXJyYXkuZnJvbSh0aGlzLiQuaGVhZGVyLmNoaWxkcmVuKVxuICAgICAgLmZvckVhY2goKGhlYWRlclJvdywgaW5kZXgpID0+IHRoaXMuX3VwZGF0ZVJvdyhoZWFkZXJSb3csIGNvbHVtblRyZWVbaW5kZXhdLCAnaGVhZGVyJywgaW5kZXggPT09IGNvbHVtblRyZWUubGVuZ3RoIC0gMSkpO1xuXG4gICAgQXJyYXkuZnJvbSh0aGlzLiQuZm9vdGVyLmNoaWxkcmVuKVxuICAgICAgLmZvckVhY2goKGZvb3RlclJvdywgaW5kZXgpID0+IHRoaXMuX3VwZGF0ZVJvdyhmb290ZXJSb3csIGNvbHVtblRyZWVbY29sdW1uVHJlZS5sZW5ndGggLSAxIC0gaW5kZXhdLCAnZm9vdGVyJywgaW5kZXggPT09IDApKTtcblxuICAgIC8vIFNpemVyIHJvd3NcbiAgICB0aGlzLl91cGRhdGVSb3codGhpcy4kLm91dGVyc2l6ZXIsIGNvbHVtblRyZWVbY29sdW1uVHJlZS5sZW5ndGggLSAxXSk7XG4gICAgdGhpcy5fdXBkYXRlUm93KHRoaXMuJC5maXhlZHNpemVyLCBjb2x1bW5UcmVlW2NvbHVtblRyZWUubGVuZ3RoIC0gMV0pO1xuXG4gICAgdGhpcy5fcmVzaXplSGFuZGxlcigpO1xuICAgIHRoaXMuX2Zyb3plbkNlbGxzQ2hhbmdlZCgpO1xuICAgIHRoaXMuX3VwZGF0ZUZpcnN0QW5kTGFzdENvbHVtbigpO1xuICAgIHRoaXMuX3Jlc2V0S2V5Ym9hcmROYXZpZ2F0aW9uKCk7XG4gICAgdGhpcy5fYTExeVVwZGF0ZUhlYWRlclJvd3MoKTtcbiAgICB0aGlzLl9hMTF5VXBkYXRlRm9vdGVyUm93cygpO1xuXG4gICAgdGhpcy5yZWNhbGN1bGF0ZUNvbHVtbldpZHRocygpO1xuICB9XG5cbiAgX3VwZGF0ZUl0ZW0ocm93LCBpdGVtKSB7XG4gICAgcm93Ll9pdGVtID0gaXRlbTtcbiAgICBjb25zdCBtb2RlbCA9IHRoaXMuX19nZXRSb3dNb2RlbChyb3cpO1xuXG4gICAgdGhpcy5fdG9nZ2xlQXR0cmlidXRlKCdzZWxlY3RlZCcsIG1vZGVsLnNlbGVjdGVkLCByb3cpO1xuICAgIHRoaXMuX2ExMXlVcGRhdGVSb3dTZWxlY3RlZChyb3csIG1vZGVsLnNlbGVjdGVkKTtcbiAgICB0aGlzLl9hMTF5VXBkYXRlUm93TGV2ZWwocm93LCBtb2RlbC5sZXZlbCk7XG4gICAgdGhpcy5fdG9nZ2xlQXR0cmlidXRlKCdleHBhbmRlZCcsIG1vZGVsLmV4cGFuZGVkLCByb3cpO1xuICAgIGlmICh0aGlzLl9yb3dEZXRhaWxzVGVtcGxhdGUgfHwgdGhpcy5yb3dEZXRhaWxzUmVuZGVyZXIpIHtcbiAgICAgIHRoaXMuX3RvZ2dsZURldGFpbHNDZWxsKHJvdywgaXRlbSk7XG4gICAgfVxuICAgIHRoaXMuX2dlbmVyYXRlQ2VsbENsYXNzTmFtZXMocm93LCBtb2RlbCk7XG4gICAgdGhpcy5fZmlsdGVyRHJhZ0FuZERyb3Aocm93LCBtb2RlbCk7XG5cbiAgICBBcnJheS5mcm9tKHJvdy5jaGlsZHJlbikuZm9yRWFjaChjZWxsID0+IHtcbiAgICAgIGlmIChjZWxsLl9yZW5kZXJlcikge1xuICAgICAgICBjb25zdCBvd25lciA9IGNlbGwuX2NvbHVtbiB8fCB0aGlzO1xuICAgICAgICBjZWxsLl9yZW5kZXJlci5jYWxsKG93bmVyLCBjZWxsLl9jb250ZW50LCBvd25lciwgbW9kZWwpO1xuICAgICAgfSBlbHNlIGlmIChjZWxsLl9pbnN0YW5jZSkge1xuICAgICAgICBjZWxsLl9pbnN0YW5jZS5fX2RldGFpbHNPcGVuZWRfXyA9IG1vZGVsLmRldGFpbHNPcGVuZWQ7XG4gICAgICAgIGNlbGwuX2luc3RhbmNlLl9fc2VsZWN0ZWRfXyA9IG1vZGVsLnNlbGVjdGVkO1xuICAgICAgICBjZWxsLl9pbnN0YW5jZS5fX2xldmVsX18gPSBtb2RlbC5sZXZlbDtcbiAgICAgICAgY2VsbC5faW5zdGFuY2UuX19leHBhbmRlZF9fID0gbW9kZWwuZXhwYW5kZWQ7XG4gICAgICAgIGNlbGwuX2luc3RhbmNlLnNldFByb3BlcnRpZXMobW9kZWwpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5fZGVib3VuY2VyVXBkYXRlSGVpZ2h0cyA9IERlYm91bmNlci5kZWJvdW5jZSh0aGlzLl9kZWJvdW5jZXJVcGRhdGVIZWlnaHRzLFxuICAgICAgdGltZU91dC5hZnRlcigxKSwgKCkgPT4ge1xuICAgICAgICB0aGlzLl91cGRhdGVNZXRyaWNzKCk7XG4gICAgICAgIHRoaXMuX3Bvc2l0aW9uSXRlbXMoKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlU2Nyb2xsZXJTaXplKCk7XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIF9yZXNpemVIYW5kbGVyKCkge1xuICAgIHRoaXMuX3VwZGF0ZURldGFpbHNDZWxsSGVpZ2h0cygpO1xuICAgIHRoaXMuX2FjY2Vzc0lyb25MaXN0QVBJKHN1cGVyLl9yZXNpemVIYW5kbGVyLCB0cnVlKTtcbiAgICB0aGlzLl91cGRhdGVIZWFkZXJGb290ZXJNZXRyaWNzKCk7XG4gIH1cblxuICBfdXBkYXRlSGVhZGVyRm9vdGVyTWV0cmljcygpIHtcbiAgICBjb25zdCBoZWFkZXJIZWlnaHQgPSB0aGlzLiQuaGVhZGVyLmNsaWVudEhlaWdodCArICdweCc7XG4gICAgY29uc3QgZm9vdGVySGVpZ2h0ID0gdGhpcy4kLmZvb3Rlci5jbGllbnRIZWlnaHQgKyAncHgnO1xuICAgIFt0aGlzLiQub3V0ZXJzaXplciwgdGhpcy4kLmZpeGVkc2l6ZXIsIHRoaXMuJC5pdGVtc10uZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgIGVsZW1lbnQuc3R5bGUuYm9yZGVyVG9wV2lkdGggPSBoZWFkZXJIZWlnaHQ7XG4gICAgICBlbGVtZW50LnN0eWxlLmJvcmRlckJvdHRvbVdpZHRoID0gZm9vdGVySGVpZ2h0O1xuICAgIH0pO1xuXG4gICAgYWZ0ZXJOZXh0UmVuZGVyKHRoaXMuJC5oZWFkZXIsICgpID0+IHtcbiAgICAgIGlmICh0aGlzLl9wZW5kaW5nU2Nyb2xsVG9JbmRleCkge1xuICAgICAgICB0aGlzLl9zY3JvbGxUb0luZGV4KHRoaXMuX3BlbmRpbmdTY3JvbGxUb0luZGV4KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIF9vbkFuaW1hdGlvbkVuZChlKSB7XG4gICAgLy8gU2hhZHlDU1MgYXBwbGllcyBzY29waW5nIHN1ZmZpeGVzIHRvIGFuaW1hdGlvbiBuYW1lc1xuICAgIGlmIChlLmFuaW1hdGlvbk5hbWUuaW5kZXhPZigndmFhZGluLWdyaWQtYXBwZWFyJykgPT09IDApIHtcbiAgICAgIHRoaXMuX3JlbmRlcigpO1xuICAgICAgdGhpcy5fdXBkYXRlSGVhZGVyRm9vdGVyTWV0cmljcygpO1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHRoaXMubm90aWZ5UmVzaXplKCk7XG4gICAgICB0aGlzLl9faXRlbXNSZWNlaXZlZCgpO1xuICAgIH1cbiAgfVxuXG4gIF90b2dnbGVBdHRyaWJ1dGUobmFtZSwgYm9vbCwgbm9kZSkge1xuICAgIGlmIChub2RlLmhhc0F0dHJpYnV0ZShuYW1lKSA9PT0gIWJvb2wpIHtcbiAgICAgIGlmIChib29sKSB7XG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKG5hbWUsICcnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9fZ2V0Um93TW9kZWwocm93KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluZGV4OiByb3cuaW5kZXgsXG4gICAgICBpdGVtOiByb3cuX2l0ZW0sXG4gICAgICBsZXZlbDogdGhpcy5fZ2V0SW5kZXhMZXZlbChyb3cuaW5kZXgpLFxuICAgICAgZXhwYW5kZWQ6IHRoaXMuX2lzRXhwYW5kZWQocm93Ll9pdGVtKSxcbiAgICAgIHNlbGVjdGVkOiB0aGlzLl9pc1NlbGVjdGVkKHJvdy5faXRlbSksXG4gICAgICBkZXRhaWxzT3BlbmVkOlxuICAgICAgICAhISh0aGlzLl9yb3dEZXRhaWxzVGVtcGxhdGUgfHwgdGhpcy5yb3dEZXRhaWxzUmVuZGVyZXIpICYmIHRoaXMuX2lzRGV0YWlsc09wZW5lZChyb3cuX2l0ZW0pXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYW51YWxseSBpbnZva2UgZXhpc3RpbmcgcmVuZGVyZXJzIGZvciBhbGwgdGhlIGNvbHVtbnNcbiAgICogKGhlYWRlciwgZm9vdGVyIGFuZCBib2R5IGNlbGxzKSBhbmQgb3BlbmVkIHJvdyBkZXRhaWxzLlxuICAgKi9cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLl9jb2x1bW5UcmVlKSB7XG4gICAgICAvLyBoZWFkZXIgYW5kIGZvb3RlciByZW5kZXJlcnNcbiAgICAgIHRoaXMuX2NvbHVtblRyZWUuZm9yRWFjaChsZXZlbCA9PiB7XG4gICAgICAgIGxldmVsLmZvckVhY2goY29sdW1uID0+IGNvbHVtbi5fcmVuZGVySGVhZGVyQW5kRm9vdGVyKCkpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIGJvZHkgYW5kIHJvdyBkZXRhaWxzIHJlbmRlcmVyc1xuICAgICAgdGhpcy5fdXBkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIGNvbXB1dGVkIG1ldHJpY3MgYW5kIHBvc2l0aW9uaW5nIG9mIGludGVybmFsIGdyaWQgcGFydHNcbiAgICogKHJvdy9kZXRhaWxzIGNlbGwgcG9zaXRpb25pbmcgZXRjKS4gTmVlZHMgdG8gYmUgaW52b2tlZCB3aGVuZXZlciB0aGUgc2l6aW5nIG9mIGdyaWRcbiAgICogY29udGVudCBjaGFuZ2VzIGFzeW5jaHJvbm91c2x5IHRvIGVuc3VyZSBjb25zaXN0ZW50IGFwcGVhcmFuY2UgKGUuZy4gd2hlbiBhXG4gICAqIGNvbnRhaW5lZCBpbWFnZSB3aG9zZSBib3VuZHMgYXJlbid0IGtub3duIGJlZm9yZWhhbmQgZmluaXNoZXMgbG9hZGluZykuXG4gICAqL1xuICBub3RpZnlSZXNpemUoKSB7XG4gICAgc3VwZXIubm90aWZ5UmVzaXplKCk7XG4gIH1cblxuICBfaGVpZ2h0QnlSb3dzQ2hhbmdlZCh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICBpZiAodmFsdWUgfHwgb2xkVmFsdWUpIHtcbiAgICAgIHRoaXMubm90aWZ5UmVzaXplKCk7XG4gICAgfVxuICB9XG5cbiAgX19mb3JjZVJlZmxvdygpIHtcbiAgICB0aGlzLl9kZWJvdW5jZXJGb3JjZVJlZmxvdyA9IERlYm91bmNlci5kZWJvdW5jZSh0aGlzLl9kZWJvdW5jZXJGb3JjZVJlZmxvdyxcbiAgICAgIGFuaW1hdGlvbkZyYW1lLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuJC5zY3JvbGxlci5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuJC5zY3JvbGxlci5zdHlsZS5vdmVyZmxvdyA9ICcnKTtcbiAgICAgIH1cbiAgICApO1xuICB9XG59XG5cbmN1c3RvbUVsZW1lbnRzLmRlZmluZShHcmlkRWxlbWVudC5pcywgR3JpZEVsZW1lbnQpO1xuZXhwb3J0IHsgR3JpZEVsZW1lbnQgfTtcbiIsIi8qICAtLS0tLS0tLS0tLS1zdGFydCBvZiB0aGUgYXBwbGljYXRpb24gLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbi8qICAtLS0tLS0tLSAgYWxsIHRoZSBtYWluIGNvZGUgZ29lcyBoZXJlICAtLS0tLS0tLS0tLS0tLS0tLSovXHJcbmltcG9ydCB7VGV4dEpzb259IGZyb20gJy4vZXhhbXBsZURhdGFTb3VyY2UnXHJcblxyXG52YXIganNvbkFycmF5RGF0YVNvdXJjZSA9IFRleHRKc29uOyAgXHJcblxyXG5qc29uQXJyYXlEYXRhU291cmNlLlVzZXJEYXRhLmFnZVxyXG5cclxuZnVuY3Rpb24gYmluZERhdGFUb0VsZW1lbnRzKClcclxue1xyXG5cclxuT2JqZWN0LmtleXMoanNvbkFycmF5RGF0YVNvdXJjZS5Vc2VyRGF0YSkuZm9yRWFjaChmdW5jdGlvbihrZXksIGtleUluZGV4KSB7XHJcbiAgICBjb25zb2xlLmxvZyhcInRlc3RcIik7XHJcblxyXG4gICAgXHJcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJIM1wiKTsgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxoMz4gbm9kZVxyXG4gICAgbm9kZS5pbm5lclRleHQgPSBrZXkgKyBcIiA6IFwiO1xyXG4gICAgbm9kZS5zdHlsZS5jc3NUZXh0ID0gXCJkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XCI7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhdGllbnRJbmZvXCIpLmFwcGVuZENoaWxkKG5vZGUpOyBcclxuXHJcbiAgICB2YXIgbm9kZTIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiSDRcIik7ICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSA8aDM+IG5vZGVcclxuICAgIC8vQHRzLWlnbm9yZVxyXG4gICAgbm9kZTIuaW5uZXJUZXh0ID0gXCIgXCIgKyBqc29uQXJyYXlEYXRhU291cmNlLlVzZXJEYXRhW2tleV07XHJcbiAgICBub2RlMi5zdHlsZS5jc3NUZXh0ID0gXCJkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XCI7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhdGllbnRJbmZvXCIpLmFwcGVuZENoaWxkKG5vZGUyKTsgXHJcblxyXG4gICAgdmFyIG5vZGUzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkJSXCIpOyAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGEgPGgzPiBub2RlXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhdGllbnRJbmZvXCIpLmFwcGVuZENoaWxkKG5vZGUzKTsgXHJcbiBcclxuXHJcbiAgICAvL2NvbnNvbGUubG9nKFwiaW5kZXg6XCIsa2V5SW5kZXgsXCJrZXk6XCIsa2V5LFwidmFsdWU6XCIsPGFueT4gKGpzb25BcnJheURhdGFTb3VyY2UuVXNlckRhdGFba2V5XSkpO1xyXG4gIH0pO1xyXG5cclxufVxyXG5iaW5kRGF0YVRvRWxlbWVudHMoKTsiLCJcdFx0XHRcclxuXHRcdFx0XHJcblx0XHRcdHZhciBUZXh0SnNvbiA9IFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0XCJVc2VyRGF0YVwiIDpcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcImVtYWlsXCI6IFwicmlhLnZlcmhvb2ZAY2hlbGxvLm5sXCIsXHJcblx0XHRcdFx0XHRcIm5hbWVcIiA6IFwiUmlhXCIsXHJcblx0XHRcdFx0XHRcInN1cm5hbWVcIjogXCJWZXJob29mXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJjb3VudHJ5XCI6IFwiTkxcIixcclxuICAgICAgICAgICAgICAgICAgICBcImFnZVwiOiA2OSxcclxuICAgICAgICAgICAgICAgICAgICBcIndlaWdodFwiOiA5OSxcclxuICAgICAgICAgICAgICAgICAgICBcImxlbmd0aFwiOiAxODAsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJjaGlsZHJlblwiOiAyLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidXJpbmVfbG9zc19wZXJpb2RcIjogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICBcImxpZmVfaW1wYWN0XCI6IDMsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0YXJnZXRGaWJlcnNcIjogNFxyXG5cdFx0XHQgICAgfSxcclxuXHRcdFx0XHRcIlN5c3RlbURhdGFcIjogXHJcblx0XHRcdFx0eyAgXCJhcHBfdmVyc2lvbl9jb2RlXCI6IDgwLFxyXG4gICAgICAgICAgICAgICAgICAgXCJhcHBfdmVyc2lvbl9uYW1lXCI6IFwiVjc3XCIsXHJcbiAgICAgICAgICAgICAgICAgICBcInNlbnNvcl9md192ZXJzaW9uXCI6IDI3MixcclxuICAgICAgICAgICAgICAgICAgIFwic2Vuc29yX21hY19hZGRyZXNzXCI6IFwiOTg6YTM6OGY6NmQ6ZWU6NjZcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0XCJMb2dzRGF0YVwiOlxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdFsge1xyXG5cdFx0XHRcdCAgIFwidHlwZVwiOiBcImxlYWtcIixcclxuICAgICAgICAgICAgICAgICAgICBcInZhbHVlXCI6IDEwLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiZGF0ZVwiOiBcIjEwIEphbnVhcnkgMjAyMCAxMjowMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiZXh0cmFfaW5mb1wiIDogXCI0MDBcIlxyXG5cdFx0XHRcdCAgfSxcclxuXHRcdFx0XHQgIHtcclxuXHRcdFx0XHRcdFwidHlwZVwiOiBcImRyeVwiLFxyXG5cdFx0XHRcdFx0IFwidmFsdWVcIjogMCxcclxuXHRcdFx0XHRcdCBcImRhdGVcIjogXCIxMCBKYW51YXJ5IDIwMjAgMTQ6MDBcIixcclxuXHRcdFx0XHRcdCBcImV4dHJhX2luZm9cIiA6IFwiXCJcclxuXHRcdFx0XHQgICB9LFxyXG5cdFx0XHRcdCAgIHtcclxuXHRcdFx0XHRcdFwidHlwZVwiOiBcImRyaW5rXCIsXHJcblx0XHRcdFx0XHQgXCJ2YWx1ZVwiOiAyMDAsXHJcblx0XHRcdFx0XHQgXCJkYXRlXCI6IFwiMTAgSmFudWFyeSAyMDIwIDE0OjAwXCIsXHJcblx0XHRcdFx0XHQgXCJleHRyYV9pbmZvXCIgOiBcImNvZmZlZVwiXHJcblx0XHRcdFx0ICAgfSxcclxuXHJcblx0XHRcdFx0XVxyXG5cdFx0XHQgICAgXHJcblx0XHRcdH0gXHJcblxyXG5cdFx0XHRleHBvcnQge1RleHRKc29ufTtcclxuXHRcdFx0XHJcblx0IiwiLyogIC0tLS0tLS0tLSAgIHB1dCBhbGwgdGhlIGltcG9ydHMgb2YgbG9jYWwgZmlsZXMgKGpzLHRzLGNzcyBldGMpIGhlcmUgLS0tLS0tLS0tLS0tKi9cclxuXHJcbmltcG9ydCAnLi9zdHlsZXMuY3NzJztcclxuaW1wb3J0ICcuL2V4YW1wbGVEYXRhU291cmNlLnRzJ1xyXG5pbXBvcnQgJ0B2YWFkaW4vdmFhZGluLWdyaWQvdmFhZGluLWdyaWQuanMnO1xyXG5pbXBvcnQgJy4vYXBwLnRzJztcclxuaW1wb3J0ICcuL3BhdGllbnRzTGlzdC5qcydcclxuaW1wb3J0ICcuL2NoYXQvY2hhdFdpbmRvdy5qcydcclxuXHJcblxyXG5cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XHJcbiAgICByZWdpc3RlclNXKCk7XHJcbn0pO1xyXG5cclxuYXN5bmMgZnVuY3Rpb24gcmVnaXN0ZXJTVygpIHtcclxuICAgIGlmICgnc2VydmljZVdvcmtlcicgaW4gbmF2aWdhdG9yKSB7IFxyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGF3YWl0IG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKCcuL3N3LmpzJyk7IFxyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1NlcnZpY2VXb3JrZXIgcmVnaXN0cmF0aW9uIGZhaWxlZC4gU29ycnkgYWJvdXQgdGhhdC4nLCBlKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5sb2coJ1lvdXIgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IFNlcnZpY2VXb3JrZXIuJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBcclxuXHJcbiAgIl0sInNvdXJjZVJvb3QiOiIifQ==