!function(t){var e={};function s(i){if(e[i])return e[i].exports;var a=e[i]={i:i,l:!1,exports:{}};return t[i].call(a.exports,a,a.exports,s),a.l=!0,a.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)s.d(i,a,function(e){return t[e]}.bind(null,a));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){"use strict";s.r(e);s(1);window.addEventListener("load",()=>{!async function(){if("serviceWorker"in navigator)try{await navigator.serviceWorker.register("./sw.js")}catch(t){console.log("ServiceWorker registration failed. Sorry about that.",t)}else console.log("Your browser does not support ServiceWorker.")}()})},function(t,e,s){const i=s(2);document.getElementById("myBtn").addEventListener("click",function(){var t=new AudioContext;console.log("audio is starting up ..."),console.log(t.sampleRate);var e=16384,s=null,l=null,S=null,P=null,_=null;navigator.getUserMedia||(navigator.getUserMedia=navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia||navigator.msGetUserMedia);navigator.getUserMedia?navigator.getUserMedia(o,function(o){!function(o){(l=t.createGain()).connect(t.destination),(s=t.createMediaStreamSource(o)).connect(l),(S=t.createScriptProcessor(e,1,1)).onaudioprocess=M,s.connect(S),document.getElementById("volume").addEventListener("change",function(){var t=this.value;l.gain.value=t,console.log("curr_volume ",t)}),(P=t.createScriptProcessor(2048,1,1)).connect(l),(_=t.createAnalyser()).smoothingTimeConstant=0,_.fftSize=4096,s.connect(_),_.connect(P);var F,T,w=_.frequencyBinCount;!0===g?(F=new Float32Array(w),T=new Float32Array(w)):(F=new Uint8Array(w),T=new Uint8Array(w));console.log("buffer_length "+w),P.onaudioprocess=function(){if(!0===g?(_.getFloatFrequencyData(F),_.getFloatTimeDomainData(T)):_.getByteFrequencyData(F),s.playbackState==s.PLAYING_STATE){h.fillStyle="rgb(0, 0, 0)",h.fillRect(0,0,b,v);var t;if(1,!0===g){let t=0;for(let e=0;e<w;e++){const s=2*(F[e]+140);h.fillStyle="rgb("+Math.floor(s+100)+", 50, 50)",h.fillRect(t,a.height-s/2,1,s/2),t+=1}}else for(var e=0,l=0;l<w;l++)t=F[l],h.fillStyle="rgb("+(t+100)+", 50, 50)",h.fillRect(e,v-t/2,1,t/2),e+=2;var o=T;if(1==c&&(o=function(t,e){for(var s=t.length,i=0;i<s;i++)t[i]*=e(s,i);return t}(o,A)),null!=o){var S=new i.FFT(2048,48e3);S.forward(o);var P=S.spectrum;if(f>1&&(P=function(t){if(f>1){if(0==d)y=[...t];else for(bin=0;bin<t.length;bin++)t[bin]<y[bin]&&(y[bin]=t[bin]);y[d]=[...t],d++}return d===f?(d=0,y):null}(P)),null!=P){n.fillStyle="rgb(0, 0, 0)",n.fillRect(0,0,b,v);let t=0,e=23.4375;var M=2e3/e,I=5e3/e,L=function(t,e,s){var i=0,a=Math.floor(e);for(t.length;a<Math.floor(s);a++)i+=t[a];return i/(s-e)}(P,M,I);!function(t,e,s,i){var a=Math.floor(e);for(t.length;a<Math.floor(s);a++)t[a]>i*p?m[a]=m[a]+1:m[a]=0;m[0]=m[0]+1}(P,M,I,L);for(let e=0;e<1024;e++){const s=P[e]*(r.height*u);var E=m[e],O=200,R=0;E>0&&(O=0,R=100),n.fillStyle=`rgb(\n                                ${Math.floor(O)},\n                                ${Math.floor(R)},\n                                ${Math.floor(E)})`,n.fillRect(t,r.height-s/2,1,s/2),t+=1}L=r.height-L*(r.height*u),n.strokeStyle="white",n.lineWidth=1,n.fillStyle="#9ea7b8",n.lineWidth=2,n.beginPath(),n.moveTo(0,L),n.lineTo(r.width,L),n.stroke(),n.lineWidth=1,n.beginPath(),n.moveTo(M,0),n.lineTo(M,r.height),n.stroke(),n.beginPath(),n.moveTo(I,0),n.lineTo(I,r.height),n.stroke()}}}}}(o)},function(t){alert("Error capturing audio.")}):alert("getUserMedia not supported in this browser.");function M(t){}function A(t,e){return.54-.46*Math.cos(i.DSP.TWO_PI*e/(t-1))}},!1);var a=document.querySelector(".visualizer1"),r=document.querySelector(".visualizer2"),h=a.getContext("2d"),n=r.getContext("2d"),l=document.querySelector(".wrapper").clientWidth,o={audio:{echoCancellation:!1,noiseSuppression:!1,autoGainControl:!1}},u=3600,c=!0,f=4,p=3,d=0,y=[],m=[];for(let t=0;t<1024;t++)m[t]=0;document.getElementById("useWindow").addEventListener("click",function(){c=1==document.getElementById("useWindow").checked;console.log("clicked !!!")}),a.setAttribute("width",l),r.setAttribute("width",l);var b=a.width,v=a.height;h.clearRect(0,0,b,v),n.clearRect(0,0,b,v);var g=!0},function(t,e,s){(function(t){var e={LEFT:0,RIGHT:1,MIX:2,SINE:1,TRIANGLE:2,SAW:3,SQUARE:4,LOWPASS:0,HIGHPASS:1,BANDPASS:2,NOTCH:3,BARTLETT:1,BARTLETTHANN:2,BLACKMAN:3,COSINE:4,GAUSS:5,HAMMING:6,HANN:7,LANCZOS:8,RECTANGULAR:9,TRIANGULAR:10,OFF:0,FW:1,BW:2,FWBW:3,TWO_PI:2*Math.PI};function s(t,e){"function"!=typeof this[t]&&"object"!=typeof this[t]&&("function"==typeof this[e]&&"object"!=typeof this[e]?this[t]=this[e]:this[t]=function(t){return t instanceof Array?t:"number"==typeof t?new Array(t):void 0})}function i(t,e){this.bufferSize=t,this.sampleRate=e,this.bandwidth=2/t*e/2,this.spectrum=new Float64Array(t/2),this.real=new Float64Array(t),this.imag=new Float64Array(t),this.peakBand=0,this.peak=0,this.getBandFrequency=function(t){return this.bandwidth*t+this.bandwidth/2},this.calculateSpectrum=function(){for(var e,s,i,a=this.spectrum,r=this.real,h=this.imag,n=2/this.bufferSize,l=Math.sqrt,o=0,u=t/2;o<u;o++)(i=n*l((e=r[o])*e+(s=h[o])*s))>this.peak&&(this.peakBand=o,this.peak=i),a[o]=i}}function a(t,e){i.call(this,t,e);var s=t/2*t,a=2*Math.PI;this.sinTable=new Float64Array(s),this.cosTable=new Float64Array(s);for(var r=0;r<s;r++)this.sinTable[r]=Math.sin(r*a/t),this.cosTable[r]=Math.cos(r*a/t)}function r(t,e){i.call(this,t,e),this.reverseTable=new Uint32Array(t);for(var s,a=1,r=t>>1;a<t;){for(s=0;s<a;s++)this.reverseTable[s+a]=this.reverseTable[s]+r;a<<=1,r>>=1}for(this.sinTable=new Float64Array(t),this.cosTable=new Float64Array(t),s=0;s<t;s++)this.sinTable[s]=Math.sin(-Math.PI/s),this.cosTable[s]=Math.cos(-Math.PI/s)}function h(t,e){i.call(this,t,e),this.trans=new Float64Array(t),this.reverseTable=new Uint32Array(t),this.reverseBinPermute=function(t,e){var s,i=this.bufferSize,a=i>>>1,r=i-1,h=1,n=0;t[0]=e[0];do{for(n+=a,t[h]=e[n],t[n]=e[h],h++,s=a<<1;!((n^=s>>=1)&s););n>=h&&(t[h]=e[n],t[n]=e[h],t[r-h]=e[r-n],t[r-n]=e[r-h]),h++}while(h<a);t[r]=e[r]},this.generateReverseTable=function(){var t,e=this.bufferSize,s=e>>>1,i=e-1,a=1,r=0;this.reverseTable[0]=0;do{for(r+=s,this.reverseTable[a]=r,this.reverseTable[r]=a,a++,t=s<<1;!((r^=t>>=1)&t););r>=a&&(this.reverseTable[a]=r,this.reverseTable[r]=a,this.reverseTable[i-a]=i-r,this.reverseTable[i-r]=i-a),a++}while(a<s);this.reverseTable[i]=i},this.generateReverseTable()}function n(t,s,i,a,r,h,n,l){this.file=t,this.bufferSize=s,this.sampleRate=i,this.playStart=a||0,this.playEnd=r||1,this.loopStart=h||0,this.loopEnd=n||1,this.loopMode=l||e.OFF,this.loaded=!1,this.samples=[],this.signal=new Float64Array(s),this.frameCount=0,this.envelope=null,this.amplitude=1,this.rootFrequency=110,this.frequency=550,this.step=this.frequency/this.rootFrequency,this.duration=0,this.samplesProcessed=0,this.playhead=0;var o=document.createElement("AUDIO"),u=this;this.loadSamples=function(t){for(var s=e.getChannel(e.MIX,t.frameBuffer),i=0;i<s.length;i++)u.samples.push(s[i])},this.loadComplete=function(){u.samples=new Float64Array(u.samples),u.loaded=!0},this.loadMetaData=function(){u.duration=o.duration},o.addEventListener("MozAudioAvailable",this.loadSamples,!1),o.addEventListener("loadedmetadata",this.loadMetaData,!1),o.addEventListener("ended",this.loadComplete,!1),o.muted=!0,o.src=t,o.play()}function l(t,s,i,a,r){switch(this.frequency=s,this.amplitude=i,this.bufferSize=a,this.sampleRate=r,this.frameCount=0,this.waveTableLength=2048,this.cyclesPerSample=s/r,this.signal=new Float64Array(a),this.envelope=null,parseInt(t,10)){case e.TRIANGLE:this.func=l.Triangle;break;case e.SAW:this.func=l.Saw;break;case e.SQUARE:this.func=l.Square;break;default:case e.SINE:this.func=l.Sine}this.generateWaveTable=function(){l.waveTable[this.func]=new Float64Array(2048);for(var t=1/(this.waveTableLength/this.sampleRate),e=0;e<this.waveTableLength;e++)l.waveTable[this.func][e]=this.func(e*t/this.sampleRate)},void 0===l.waveTable&&(l.waveTable={}),void 0===l.waveTable[this.func]&&this.generateWaveTable(),this.waveTable=l.waveTable[this.func]}function o(t,e,s,i,a,r){this.sampleRate=r,this.attackLength=t,this.decayLength=e,this.sustainLevel=s,this.sustainLength=i,this.releaseLength=a,this.sampleRate=r,this.attackSamples=t*r,this.decaySamples=e*r,this.sustainSamples=i*r,this.releaseSamples=a*r,this.update=function(){this.attack=this.attackSamples,this.decay=this.attack+this.decaySamples,this.sustain=this.decay+this.sustainSamples,this.release=this.sustain+this.releaseSamples},this.update(),this.samplesProcessed=0}function u(t,s,i,a){switch(this.sampleRate=a,t){case e.LOWPASS:case e.LP12:this.func=new u.LP12(s,i,a)}}function c(t,e,s,i){this.type=t,this.cutoff=e,this.resonance=s,this.sampleRate=i,this.f=Float64Array(4),this.f[0]=0,this.f[1]=0,this.f[2]=0,this.f[3]=0,this.calcCoeff=function(t,e){this.freq=2*Math.sin(Math.PI*Math.min(.25,t/(2*this.sampleRate))),this.damp=Math.min(2*(1-Math.pow(e,.25)),Math.min(2,2/this.freq-.5*this.freq))},this.calcCoeff(e,s)}function f(t,s){switch(this.alpha=s,t){case e.BARTLETT:this.func=f.Bartlett;break;case e.BARTLETTHANN:this.func=f.BartlettHann;break;case e.BLACKMAN:this.func=f.Blackman,this.alpha=this.alpha||.16;break;case e.COSINE:this.func=f.Cosine;break;case e.GAUSS:this.func=f.Gauss,this.alpha=this.alpha||.25;break;case e.HAMMING:this.func=f.Hamming;break;case e.HANN:this.func=f.Hann;break;case e.LANCZOS:this.func=f.Lanczoz;break;case e.RECTANGULAR:this.func=f.Rectangular;break;case e.TRIANGULAR:this.func=f.Triangular}}function p(t){return(Math.exp(t)-Math.exp(-t))/2}function d(t,s){this.Fs=s,this.type=t,this.parameterType=e.Q,this.x_1_l=0,this.x_2_l=0,this.y_1_l=0,this.y_2_l=0,this.x_1_r=0,this.x_2_r=0,this.y_1_r=0,this.y_2_r=0,this.b0=1,this.a0=1,this.b1=0,this.a1=0,this.b2=0,this.a2=0,this.b0a0=this.b0/this.a0,this.b1a0=this.b1/this.a0,this.b2a0=this.b2/this.a0,this.a1a0=this.a1/this.a0,this.a2a0=this.a2/this.a0,this.f0=3e3,this.dBgain=12,this.Q=1,this.BW=-3,this.S=1,this.coefficients=function(){return{b:[this.b0,this.b1,this.b2],a:[this.a0,this.a1,this.a2]}},this.setFilterType=function(t){this.type=t,this.recalculateCoefficients()},this.setSampleRate=function(t){this.Fs=t,this.recalculateCoefficients()},this.setQ=function(t){this.parameterType=e.Q,this.Q=Math.max(Math.min(t,115),.001),this.recalculateCoefficients()},this.setBW=function(t){this.parameterType=e.BW,this.BW=t,this.recalculateCoefficients()},this.setS=function(t){this.parameterType=e.S,this.S=Math.max(Math.min(t,5),1e-4),this.recalculateCoefficients()},this.setF0=function(t){this.f0=t,this.recalculateCoefficients()},this.setDbGain=function(t){this.dBgain=t,this.recalculateCoefficients()},this.recalculateCoefficients=function(){var s;s=t===e.PEAKING_EQ||t===e.LOW_SHELF||t===e.HIGH_SHELF?Math.pow(10,this.dBgain/40):Math.sqrt(Math.pow(10,this.dBgain/20));var i,a=e.TWO_PI*this.f0/this.Fs,r=Math.cos(a),h=Math.sin(a),n=0;switch(this.parameterType){case e.Q:n=h/(2*this.Q);break;case e.BW:n=h*p(Math.LN2/2*this.BW*a/h);break;case e.S:n=h/2*Math.sqrt((s+1/s)*(1/this.S-1)+2)}switch(this.type){case e.LPF:this.b0=(1-r)/2,this.b1=1-r,this.b2=(1-r)/2,this.a0=1+n,this.a1=-2*r,this.a2=1-n;break;case e.HPF:this.b0=(1+r)/2,this.b1=-(1+r),this.b2=(1+r)/2,this.a0=1+n,this.a1=-2*r,this.a2=1-n;break;case e.BPF_CONSTANT_SKIRT:this.b0=h/2,this.b1=0,this.b2=-h/2,this.a0=1+n,this.a1=-2*r,this.a2=1-n;break;case e.BPF_CONSTANT_PEAK:this.b0=n,this.b1=0,this.b2=-n,this.a0=1+n,this.a1=-2*r,this.a2=1-n;break;case e.NOTCH:this.b0=1,this.b1=-2*r,this.b2=1,this.a0=1+n,this.a1=-2*r,this.a2=1-n;break;case e.APF:this.b0=1-n,this.b1=-2*r,this.b2=1+n,this.a0=1+n,this.a1=-2*r,this.a2=1-n;break;case e.PEAKING_EQ:this.b0=1+n*s,this.b1=-2*r,this.b2=1-n*s,this.a0=1+n/s,this.a1=-2*r,this.a2=1-n/s;break;case e.LOW_SHELF:i=h*Math.sqrt((3^s)*(1/this.S-1)+2*s),this.b0=s*(s+1-(s-1)*r+i),this.b1=2*s*(s-1-(s+1)*r),this.b2=s*(s+1-(s-1)*r-i),this.a0=s+1+(s-1)*r+i,this.a1=-2*(s-1+(s+1)*r),this.a2=s+1+(s-1)*r-i;break;case e.HIGH_SHELF:i=h*Math.sqrt((3^s)*(1/this.S-1)+2*s),this.b0=s*(s+1+(s-1)*r+i),this.b1=-2*s*(s-1+(s+1)*r),this.b2=s*(s+1+(s-1)*r-i),this.a0=s+1-(s-1)*r+i,this.a1=2*(s-1-(s+1)*r),this.a2=s+1-(s-1)*r-i}this.b0a0=this.b0/this.a0,this.b1a0=this.b1/this.a0,this.b2a0=this.b2/this.a0,this.a1a0=this.a1/this.a0,this.a2a0=this.a2/this.a0},this.process=function(t){for(var e=t.length,s=new Float64Array(e),i=0;i<t.length;i++)s[i]=this.b0a0*t[i]+this.b1a0*this.x_1_l+this.b2a0*this.x_2_l-this.a1a0*this.y_1_l-this.a2a0*this.y_2_l,this.y_2_l=this.y_1_l,this.y_1_l=s[i],this.x_2_l=this.x_1_l,this.x_1_l=t[i];return s},this.processStereo=function(t){for(var e=t.length,s=new Float64Array(e),i=0;i<e/2;i++)s[2*i]=this.b0a0*t[2*i]+this.b1a0*this.x_1_l+this.b2a0*this.x_2_l-this.a1a0*this.y_1_l-this.a2a0*this.y_2_l,this.y_2_l=this.y_1_l,this.y_1_l=s[2*i],this.x_2_l=this.x_1_l,this.x_1_l=t[2*i],s[2*i+1]=this.b0a0*t[2*i+1]+this.b1a0*this.x_1_r+this.b2a0*this.x_2_r-this.a1a0*this.y_1_r-this.a2a0*this.y_2_r,this.y_2_r=this.y_1_r,this.y_1_r=s[2*i+1],this.x_2_r=this.x_1_r,this.x_1_r=t[2*i+1];return s}}function y(t,e,s,i){this.delayBufferSamples=new Float64Array(t),this.delayInputPointer=e,this.delayOutputPointer=0,this.delayInSamples=e,this.masterVolume=s,this.delayVolume=i}function m(t,e,s){this.delayBufferSamples=new Float64Array(t),this.delayInputPointer=e,this.delayOutputPointer=0,this.delayInSamples=e,this.delayVolume=s}function b(t,s,i,a,r,h){var n,l;for(this.delayInSamples=s,this.masterVolume=i,this.mixVolume=a,this.delayVolume=r,this.dampFrequency=h,this.NR_OF_MULTIDELAYS=6,this.NR_OF_SINGLEDELAYS=6,this.LOWPASSL=new c(e.LOWPASS,h,0,44100),this.LOWPASSR=new c(e.LOWPASS,h,0,44100),this.singleDelays=[],n=0;n<this.NR_OF_SINGLEDELAYS;n++)l=1+n/7,this.singleDelays[n]=new m(t,Math.round(this.delayInSamples*l),this.delayVolume);for(this.multiDelays=[],n=0;n<this.NR_OF_MULTIDELAYS;n++)l=1+n/10,this.multiDelays[n]=new y(t,Math.round(this.delayInSamples*l),this.masterVolume,this.delayVolume)}s("Float64Array","WebGLFloatArray"),s("Int32Array","WebGLIntArray"),s("Uint16Array","WebGLUnsignedShortArray"),s("Uint8Array","WebGLUnsignedByteArray"),e.invert=function(t){for(var e=0,s=t.length;e<s;e++)t[e]*=-1;return t},e.interleave=function(t,e){if(t.length!==e.length)throw"Can not interleave. Channel lengths differ.";for(var s=new Float64Array(2*t.length),i=0,a=t.length;i<a;i++)s[2*i]=t[i],s[2*i+1]=e[i];return s},e.deinterleave=function(){var t,s,i,a=[];return a[e.MIX]=function(t){for(var e=0,s=t.length/2;e<s;e++)i[e]=(t[2*e]+t[2*e+1])/2;return i},a[e.LEFT]=function(e){for(var s=0,i=e.length/2;s<i;s++)t[s]=e[2*s];return t},a[e.RIGHT]=function(t){for(var e=0,i=t.length/2;e<i;e++)s[e]=t[2*e+1];return s},function(e,r){return t=t||new Float64Array(r.length/2),s=s||new Float64Array(r.length/2),i=i||new Float64Array(r.length/2),r.length/2!==t.length&&(t=new Float64Array(r.length/2),s=new Float64Array(r.length/2),i=new Float64Array(r.length/2)),a[e](r)}}(),e.getChannel=e.deinterleave,e.mixSampleBuffers=function(t,e,s,i){for(var a=new Float64Array(t),r=0;r<t.length;r++)a[r]+=(s?-e[r]:e[r])/i;return a},e.LPF=0,e.HPF=1,e.BPF_CONSTANT_SKIRT=2,e.BPF_CONSTANT_PEAK=3,e.NOTCH=4,e.APF=5,e.PEAKING_EQ=6,e.LOW_SHELF=7,e.HIGH_SHELF=8,e.Q=1,e.BW=2,e.S=3,e.RMS=function(t){for(var e=0,s=0,i=t.length;s<i;s++)e+=t[s]*t[s];return Math.sqrt(e/i)},e.Peak=function(t){for(var e=0,s=0,i=t.length;s<i;s++)e=Math.abs(t[s])>e?Math.abs(t[s]):e;return e},a.prototype.forward=function(t){for(var e,s,i=this.real,a=this.imag,r=0;r<this.bufferSize/2;r++){e=0,s=0;for(var h=0;h<t.length;h++)e+=this.cosTable[r*h]*t[h],s+=this.sinTable[r*h]*t[h];i[r]=e,a[r]=s}return this.calculateSpectrum()},r.prototype.forward=function(t){var e=this.bufferSize,s=this.cosTable,i=this.sinTable,a=this.reverseTable,r=this.real,h=this.imag,n=(this.spectrum,Math.floor(Math.log(e)/Math.LN2));if(Math.pow(2,n)!==e)throw"Invalid buffer size, must be a power of 2.";if(e!==t.length)throw"Supplied buffer is not the same size as defined FFT. FFT Size: "+e+" Buffer Size: "+t.length;var l,o,u,c,f,p,d,y,m,b=1;for(m=0;m<e;m++)r[m]=t[a[m]],h[m]=0;for(;b<e;){l=s[b],o=i[b],u=1,c=0;for(var v=0;v<b;v++){for(m=v;m<e;)p=u*r[f=m+b]-c*h[f],d=u*h[f]+c*r[f],r[f]=r[m]-p,h[f]=h[m]-d,r[m]+=p,h[m]+=d,m+=b<<1;u=(y=u)*l-c*o,c=y*o+c*l}b<<=1}return this.calculateSpectrum()},r.prototype.inverse=function(t,e){var s=this.bufferSize,i=this.cosTable,a=this.sinTable,r=this.reverseTable;this.spectrum;t=t||this.real,e=e||this.imag;var h,n,l,o,u,c,f,p,d,y=1;for(d=0;d<s;d++)e[d]*=-1;var m=new Float64Array(s),b=new Float64Array(s);for(d=0;d<t.length;d++)m[d]=t[r[d]],b[d]=e[r[d]];for(t=m,e=b;y<s;){h=i[y],n=a[y],l=1,o=0;for(var v=0;v<y;v++){for(d=v;d<s;)c=l*t[u=d+y]-o*e[u],f=l*e[u]+o*t[u],t[u]=t[d]-c,e[u]=e[d]-f,t[d]+=c,e[d]+=f,d+=y<<1;l=(p=l)*h-o*n,o=p*n+o*h}y<<=1}var g=new Float64Array(s);for(d=0;d<s;d++)g[d]=t[d]/s;return g},h.prototype.forward=function(t){var e,s,i,a,r,h,n,l,o,u,c,f,p,d,y,m,b,v,g,S,P,_,M,A,F,T,w=this.bufferSize,I=this.spectrum,L=this.trans,E=2*Math.PI,O=Math.sqrt,R=w>>>1,B=2/w;this.reverseBinPermute(L,t);for(var k=0,q=4;k<w;q*=4){for(var N=k;N<w;N+=q)b=L[N]-L[N+1],L[N]+=L[N+1],L[N+1]=b;k=2*(q-1)}for(e=2,a=w>>>1;a>>>=1;){k=0,q=(e<<=1)<<1,s=e>>>2,i=e>>>3;do{if(1!==s)for(N=k;N<w;N+=q)f=(c=(u=(o=N)+s)+s)+s,r=L[c]+L[f],L[f]-=L[c],L[c]=L[o]-r,L[o]+=r,o+=i,u+=i,f+=i,r=L[c+=i]+L[f],h=L[c]-L[f],r=-r*Math.SQRT1_2,h*=Math.SQRT1_2,b=L[u],L[f]=r+b,L[c]=r-b,L[u]=L[o]-h,L[o]+=h;else for(N=k;N<w;N+=q)f=(c=(u=(o=N)+s)+s)+s,r=L[c]+L[f],L[f]-=L[c],L[c]=L[o]-r,L[o]+=r;k=(q<<1)-e,q<<=2}while(k<w);_=E/e;for(var W=1;W<i;W++){M=W*_,g=Math.sin(M),S=4*(v=Math.cos(M))*(v*v-.75),P=4*g*(.75-g*g),k=0,q=e<<1;do{for(N=k;N<w;N+=q)f=(c=(u=(o=N+W)+s)+s)+s,m=(y=(d=(p=N+s-W)+s)+s)+s,h=L[y]*v-L[c]*g,r=L[y]*g+L[c]*v,l=L[m]*S-L[f]*P,n=L[m]*P+L[f]*S,b=h-l,h+=l,l=b,L[m]=h+L[d],L[c]=h-L[d],b=n-r,r+=n,n=b,L[f]=n+L[u],L[y]=n-L[u],L[d]=L[o]-r,L[o]+=r,L[u]=l+L[p],L[p]-=l;k=(q<<1)-e,q<<=2}while(k<w)}}for(;--R;)(T=B*O((A=L[R])*A+(F=L[w-R-1])*F))>this.peak&&(this.peakBand=R,this.peak=T),I[R]=T;return I[0]=B*L[0],I},n.prototype.applyEnvelope=function(){return this.envelope.process(this.signal),this.signal},n.prototype.generate=function(){this.frameCount,this.bufferSize;for(var t=this.playEnd*this.samples.length-this.playStart*this.samples.length,s=this.playStart*this.samples.length,i=this.playEnd*this.samples.length,a=0;a<this.bufferSize;a++){switch(this.loopMode){case e.OFF:this.playhead=Math.round(this.samplesProcessed*this.step+s),this.playhead<this.playEnd*this.samples.length?this.signal[a]=this.samples[this.playhead]*this.amplitude:this.signal[a]=0;break;case e.FW:this.playhead=Math.round(this.samplesProcessed*this.step%t+s),this.playhead<this.playEnd*this.samples.length&&(this.signal[a]=this.samples[this.playhead]*this.amplitude);break;case e.BW:this.playhead=i-Math.round(this.samplesProcessed*this.step%t),this.playhead<this.playEnd*this.samples.length&&(this.signal[a]=this.samples[this.playhead]*this.amplitude);break;case e.FWBW:Math.floor(this.samplesProcessed*this.step/t)%2==0?this.playhead=Math.round(this.samplesProcessed*this.step%t+s):this.playhead=i-Math.round(this.samplesProcessed*this.step%t),this.playhead<this.playEnd*this.samples.length&&(this.signal[a]=this.samples[this.playhead]*this.amplitude)}this.samplesProcessed++}return this.frameCount++,this.signal},n.prototype.setFreq=function(t){var e=this.samplesProcessed*this.step;this.frequency=t,this.step=this.frequency/this.rootFrequency,this.samplesProcessed=Math.round(e/this.step)},n.prototype.reset=function(){this.samplesProcessed=0,this.playhead=0},l.prototype.setAmp=function(t){if(!(t>=0&&t<=1))throw"Amplitude out of range (0..1).";this.amplitude=t},l.prototype.setFreq=function(t){this.frequency=t,this.cyclesPerSample=t/this.sampleRate},l.prototype.add=function(t){for(var e=0;e<this.bufferSize;e++)this.signal[e]+=t.signal[e];return this.signal},l.prototype.addSignal=function(t){for(var e=0;e<t.length&&!(e>=this.bufferSize);e++)this.signal[e]+=t[e];return this.signal},l.prototype.addEnvelope=function(t){this.envelope=t},l.prototype.applyEnvelope=function(){this.envelope.process(this.signal)},l.prototype.valueAt=function(t){return this.waveTable[t%this.waveTableLength]},l.prototype.generate=function(){for(var t,e=this.frameCount*this.bufferSize,s=this.waveTableLength*this.frequency/this.sampleRate,i=0;i<this.bufferSize;i++)t=Math.round((e+i)*s),this.signal[i]=this.waveTable[t%this.waveTableLength]*this.amplitude;return this.frameCount++,this.signal},l.Sine=function(t){return Math.sin(e.TWO_PI*t)},l.Square=function(t){return t<.5?1:-1},l.Saw=function(t){return 2*(t-Math.round(t))},l.Triangle=function(t){return 1-4*Math.abs(Math.round(t)-t)},l.Pulse=function(t){},o.prototype.noteOn=function(){this.samplesProcessed=0,this.sustainSamples=this.sustainLength*this.sampleRate,this.update()},o.prototype.noteOff=function(){this.sustainSamples=this.samplesProcessed-this.decaySamples,this.update()},o.prototype.processSample=function(t){var e=0;return this.samplesProcessed<=this.attack?e=0+(this.samplesProcessed-0)/(this.attack-0)*1:this.samplesProcessed>this.attack&&this.samplesProcessed<=this.decay?e=1+(this.sustainLevel-1)*((this.samplesProcessed-this.attack)/(this.decay-this.attack)):this.samplesProcessed>this.decay&&this.samplesProcessed<=this.sustain?e=this.sustainLevel:this.samplesProcessed>this.sustain&&this.samplesProcessed<=this.release&&(e=this.sustainLevel+(0-this.sustainLevel)*((this.samplesProcessed-this.sustain)/(this.release-this.sustain))),t*e},o.prototype.value=function(){var t=0;return this.samplesProcessed<=this.attack?t=0+(this.samplesProcessed-0)/(this.attack-0)*1:this.samplesProcessed>this.attack&&this.samplesProcessed<=this.decay?t=1+(this.sustainLevel-1)*((this.samplesProcessed-this.attack)/(this.decay-this.attack)):this.samplesProcessed>this.decay&&this.samplesProcessed<=this.sustain?t=this.sustainLevel:this.samplesProcessed>this.sustain&&this.samplesProcessed<=this.release&&(t=this.sustainLevel+(0-this.sustainLevel)*((this.samplesProcessed-this.sustain)/(this.release-this.sustain))),t},o.prototype.process=function(t){for(var e=0;e<t.length;e++)t[e]*=this.value(),this.samplesProcessed++;return t},o.prototype.isActive=function(){return!(this.samplesProcessed>this.release||-1===this.samplesProcessed)},o.prototype.disable=function(){this.samplesProcessed=-1},u.prototype.__defineGetter__("cutoff",function(){return this.func.cutoff}),u.prototype.__defineGetter__("resonance",function(){return this.func.resonance}),u.prototype.set=function(t,e){this.func.calcCoeff(t,e)},u.prototype.process=function(t){this.func.process(t)},u.prototype.addEnvelope=function(t){if(!(t instanceof o))throw"Not an envelope.";this.func.addEnvelope(t)},u.LP12=function(t,e,s){this.sampleRate=s,this.vibraPos=0,this.vibraSpeed=0,this.envelope=!1,this.calcCoeff=function(t,e){this.w=2*Math.PI*t/this.sampleRate,this.q=1-this.w/(2*(e+.5/(1+this.w))+this.w-2),this.r=this.q*this.q,this.c=this.r+1-2*Math.cos(this.w)*this.q,this.cutoff=t,this.resonance=e},this.calcCoeff(t,e),this.process=function(t){for(var e=0;e<t.length;e++)this.vibraSpeed+=(t[e]-this.vibraPos)*this.c,this.vibraPos+=this.vibraSpeed,this.vibraSpeed*=this.r,this.envelope?(t[e]=t[e]*(1-this.envelope.value())+this.vibraPos*this.envelope.value(),this.envelope.samplesProcessed++):t[e]=this.vibraPos}},u.LP12.prototype.addEnvelope=function(t){this.envelope=t},c.prototype.process=function(t){for(var e,s,i=this.f,a=0;a<t.length;a++)e=t[a],i[3]=e-this.damp*i[2],i[0]=i[0]+this.freq*i[2],i[1]=i[3]-i[0],i[2]=this.freq*i[1]+i[2],s=.5*i[this.type],i[3]=e-this.damp*i[2],i[0]=i[0]+this.freq*i[2],i[1]=i[3]-i[0],i[2]=this.freq*i[1]+i[2],s+=.5*i[this.type],this.envelope?(t[a]=t[a]*(1-this.envelope.value())+s*this.envelope.value(),this.envelope.samplesProcessed++):t[a]=s},c.prototype.addEnvelope=function(t){if(!(t instanceof o))throw"This is not an envelope.";this.envelope=t},c.prototype.set=function(t,e){this.calcCoeff(t,e)},f.prototype.process=function(t){for(var e=t.length,s=0;s<e;s++)t[s]*=this.func(e,s,this.alpha);return t},f.Bartlett=function(t,e){return 2/(t-1)*((t-1)/2-Math.abs(e-(t-1)/2))},f.BartlettHann=function(t,s){return.62-.48*Math.abs(s/(t-1)-.5)-.38*Math.cos(e.TWO_PI*s/(t-1))},f.Blackman=function(t,s,i){var a=i/2;return(1-i)/2-.5*Math.cos(e.TWO_PI*s/(t-1))+a*Math.cos(4*Math.PI*s/(t-1))},f.Cosine=function(t,e){return Math.cos(Math.PI*e/(t-1)-Math.PI/2)},f.Gauss=function(t,e,s){return Math.pow(Math.E,-.5*Math.pow((e-(t-1)/2)/(s*(t-1)/2),2))},f.Hamming=function(t,s){return.54-.46*Math.cos(e.TWO_PI*s/(t-1))},f.Hann=function(t,s){return.5*(1-Math.cos(e.TWO_PI*s/(t-1)))},f.Lanczos=function(t,e){var s=2*e/(t-1)-1;return Math.sin(Math.PI*s)/(Math.PI*s)},f.Rectangular=function(t,e){return 1},f.Triangular=function(t,e){return 2/t*(t/2-Math.abs(e-(t-1)/2))},e.mag2db=function(t){for(var e=Math.pow(10,-6),s=Math.log,i=Math.max,a=Float64Array(t.length),r=0;r<t.length;r++)a[r]=20*s(i(t[r],e));return a},e.freqz=function(t,s,i){var a,r;if(!i)for(i=Float64Array(200),a=0;a<i.length;a++)i[a]=e.TWO_PI/i.length*a-Math.PI;var h=Float64Array(i.length),n=Math.sqrt,l=Math.cos,o=Math.sin;for(a=0;a<i.length;a++){var u={real:0,imag:0};for(r=0;r<t.length;r++)u.real+=t[r]*l(-r*i[a]),u.imag+=t[r]*o(-r*i[a]);var c={real:0,imag:0};for(r=0;r<s.length;r++)c.real+=s[r]*l(-r*i[a]),c.imag+=s[r]*o(-r*i[a]);h[a]=n(u.real*u.real+u.imag*u.imag)/n(c.real*c.real+c.imag*c.imag)}return h},y.prototype.setDelayInSamples=function(t){this.delayInSamples=t,this.delayInputPointer=this.delayOutputPointer+t,this.delayInputPointer>=this.delayBufferSamples.length-1&&(this.delayInputPointer=this.delayInputPointer-this.delayBufferSamples.length)},y.prototype.setMasterVolume=function(t){this.masterVolume=t},y.prototype.setDelayVolume=function(t){this.delayVolume=t},y.prototype.process=function(t){for(var e=new Float64Array(t.length),s=0;s<t.length;s++){var i=(null===this.delayBufferSamples[this.delayOutputPointer]?0:this.delayBufferSamples[this.delayOutputPointer])*this.delayVolume+t[s];this.delayBufferSamples[this.delayInputPointer]=i,e[s]=i*this.masterVolume,this.delayInputPointer++,this.delayInputPointer>=this.delayBufferSamples.length-1&&(this.delayInputPointer=0),this.delayOutputPointer++,this.delayOutputPointer>=this.delayBufferSamples.length-1&&(this.delayOutputPointer=0)}return e},m.prototype.setDelayInSamples=function(t){this.delayInSamples=t,this.delayInputPointer=this.delayOutputPointer+t,this.delayInputPointer>=this.delayBufferSamples.length-1&&(this.delayInputPointer=this.delayInputPointer-this.delayBufferSamples.length)},m.prototype.setDelayVolume=function(t){this.delayVolume=t},m.prototype.process=function(t){for(var e=new Float64Array(t.length),s=0;s<t.length;s++){this.delayBufferSamples[this.delayInputPointer]=t[s];var i=this.delayBufferSamples[this.delayOutputPointer];e[s]=i*this.delayVolume,this.delayInputPointer++,this.delayInputPointer>=this.delayBufferSamples.length-1&&(this.delayInputPointer=0),this.delayOutputPointer++,this.delayOutputPointer>=this.delayBufferSamples.length-1&&(this.delayOutputPointer=0)}return e},b.prototype.setDelayInSamples=function(t){var e,s;for(this.delayInSamples=t,e=0;e<this.NR_OF_SINGLEDELAYS;e++)s=1+e/7,this.singleDelays[e].setDelayInSamples(Math.round(this.delayInSamples*s));for(e=0;e<this.NR_OF_MULTIDELAYS;e++)s=1+e/10,this.multiDelays[e].setDelayInSamples(Math.round(this.delayInSamples*s))},b.prototype.setMasterVolume=function(t){this.masterVolume=t},b.prototype.setMixVolume=function(t){this.mixVolume=t},b.prototype.setDelayVolume=function(t){var e;for(this.delayVolume=t,e=0;e<this.NR_OF_SINGLEDELAYS;e++)this.singleDelays[e].setDelayVolume(this.delayVolume);for(e=0;e<this.NR_OF_MULTIDELAYS;e++)this.multiDelays[e].setDelayVolume(this.delayVolume)},b.prototype.setDampFrequency=function(t){this.dampFrequency=t,this.LOWPASSL.set(t,0),this.LOWPASSR.set(t,0)},b.prototype.process=function(t){var s=new Float64Array(t.length),i=e.deinterleave(t);this.LOWPASSL.process(i[e.LEFT]),this.LOWPASSR.process(i[e.RIGHT]);var a,r=e.interleave(i[e.LEFT],i[e.RIGHT]);for(a=0;a<this.NR_OF_MULTIDELAYS;a++)s=e.mixSampleBuffers(s,this.multiDelays[a].process(r),2%a==0,this.NR_OF_MULTIDELAYS);var h=new Float64Array(s.length);for(a=0;a<this.NR_OF_SINGLEDELAYS;a++)h=e.mixSampleBuffers(h,this.singleDelays[a].process(s),2%a==0,1);for(a=0;a<h.length;a++)h[a]*=this.mixVolume;for(s=e.mixSampleBuffers(h,t,0,1),a=0;a<s.length;a++)s[a]*=this.masterVolume;return s},t&&t.exports&&(t.exports={DSP:e,DFT:a,FFT:r,RFFT:h,Sampler:n,Oscillator:l,ADSR:o,IIRFilter:u,IIRFilter2:c,WindowFunction:f,sinh:p,Biquad:d,GraphicalEq:function(t){this.FS=t,this.minFreq=40,this.maxFreq=16e3,this.bandsPerOctave=1,this.filters=[],this.freqzs=[],this.calculateFreqzs=!0,this.recalculateFilters=function(){var t=Math.round(Math.log(this.maxFreq/this.minFreq)*this.bandsPerOctave/Math.LN2);this.filters=[];for(var s=0;s<t;s++){var i=this.minFreq*Math.pow(2,s/this.bandsPerOctave),a=new d(e.PEAKING_EQ,this.FS);a.setDbGain(0),a.setBW(1/this.bandsPerOctave),a.setF0(i),this.filters[s]=a,this.recalculateFreqz(s)}},this.setMinimumFrequency=function(t){this.minFreq=t,this.recalculateFilters()},this.setMaximumFrequency=function(t){this.maxFreq=t,this.recalculateFilters()},this.setBandsPerOctave=function(t){this.bandsPerOctave=t,this.recalculateFilters()},this.setBandGain=function(t,e){if(t<0||t>this.filters.length-1)throw"The band index of the graphical equalizer is out of bounds.";if(!e)throw"A gain must be passed.";this.filters[t].setDbGain(e),this.recalculateFreqz(t)},this.recalculateFreqz=function(t){if(this.calculateFreqzs){if(t<0||t>this.filters.length-1)throw"The band index of the graphical equalizer is out of bounds. "+t+" is out of [0, "+this.filters.length-1+"]";if(!this.w){this.w=Float64Array(400);for(var s=0;s<this.w.length;s++)this.w[s]=Math.PI/this.w.length*s}var i=[this.filters[t].b0,this.filters[t].b1,this.filters[t].b2],a=[this.filters[t].a0,this.filters[t].a1,this.filters[t].a2];this.freqzs[t]=e.mag2db(e.freqz(i,a,this.w))}},this.process=function(t){for(var e=t,s=0;s<this.filters.length;s++)e=this.filters[s].process(e);return e},this.processStereo=function(t){for(var e=t,s=0;s<this.filters.length;s++)e=this.filters[s].processStereo(e);return e}},MultiDelay:y,SingleDelay:m,Reverb:b})}).call(this,s(3)(t))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9hcHAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RzcC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJhc3luYyIsIm5hdmlnYXRvciIsInNlcnZpY2VXb3JrZXIiLCJyZWdpc3RlciIsImUiLCJjb25zb2xlIiwibG9nIiwicmVnaXN0ZXJTVyIsImxpYiIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJhdWRpb0NvbnRleHQiLCJBdWRpb0NvbnRleHQiLCJzYW1wbGVSYXRlIiwiQlVGRl9TSVpFX1JFTkRFUkVSIiwibWljcm9waG9uZV9zdHJlYW0iLCJnYWluX25vZGUiLCJzY3JpcHRfcHJvY2Vzc29yX25vZGUiLCJzY3JpcHRfcHJvY2Vzc29yX2FuYWx5c2lzX25vZGUiLCJhbmFseXNlcl9ub2RlIiwiZ2V0VXNlck1lZGlhIiwid2Via2l0R2V0VXNlck1lZGlhIiwibW96R2V0VXNlck1lZGlhIiwibXNHZXRVc2VyTWVkaWEiLCJjb25zdHJhaW50cyIsInN0cmVhbSIsImNyZWF0ZUdhaW4iLCJjb25uZWN0IiwiZGVzdGluYXRpb24iLCJjcmVhdGVNZWRpYVN0cmVhbVNvdXJjZSIsImNyZWF0ZVNjcmlwdFByb2Nlc3NvciIsIm9uYXVkaW9wcm9jZXNzIiwicHJvY2Vzc19taWNyb3Bob25lX2J1ZmZlciIsImN1cnJfdm9sdW1lIiwidGhpcyIsImdhaW4iLCJjcmVhdGVBbmFseXNlciIsInNtb290aGluZ1RpbWVDb25zdGFudCIsImZmdFNpemUiLCJhcnJheV9mcmVxX2RvbWFpbiIsImFycmF5X3RpbWVfZG9tYWluIiwiYnVmZmVyX2xlbmd0aCIsImZyZXF1ZW5jeUJpbkNvdW50IiwiVVNFRkxPQVQiLCJGbG9hdDMyQXJyYXkiLCJVaW50OEFycmF5IiwiZ2V0RmxvYXRGcmVxdWVuY3lEYXRhIiwiZ2V0RmxvYXRUaW1lRG9tYWluRGF0YSIsImdldEJ5dGVGcmVxdWVuY3lEYXRhIiwicGxheWJhY2tTdGF0ZSIsIlBMQVlJTkdfU1RBVEUiLCJjYW52YXNDdHgxIiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJXSURUSCIsIkhFSUdIVCIsImJhckhlaWdodCIsInBvc1giLCJNYXRoIiwiZmxvb3IiLCJjYW52YXMxIiwiaGVpZ2h0IiwieCIsImJhcldpZHRoIiwiaW5wdXQiLCJ1c2VXaW5kb3dpbmciLCJidWZmZXIiLCJmdW5jIiwibGVuZ3RoIiwiYXBwbHlfd2luZG93IiwiZG9faGFtbWluZ193aW5kb3ciLCJmZnQiLCJGRlQiLCJmb3J3YXJkIiwic3BlY3RydW0iLCJmcmVxZG9tYWluTm9pc2VDYW5jZWwiLCJjdXJyZW50ZnJlcWRvbWFpbk5vaXNlQ2FuY2VsIiwiTkNidWYiLCJiaW4iLCJOb2lzZUNhbmNlbEZyZXFEb21haW4iLCJjYW52YXNDdHgyIiwiYmluU2l6ZSIsInN0YXJ0RnJlcSIsInN0b3BGcmVxIiwiYXZnIiwic3RhcnQiLCJzdG9wIiwidG90YWwiLCJhdmVyYWdlIiwicGVha3RocmVzaG9sZEFnYWluc3RBdmVyYWdlIiwicGVha0J1ZmZlciIsImZpbmRfcGVha3MiLCJjYW52YXMyIiwiZGlzcGxheUdhaW4iLCJwZWFrIiwicmVkVmFsIiwiZ3JlZW5WYWwiLCJzdHJva2VTdHlsZSIsImxpbmVXaWR0aCIsImJlZ2luUGF0aCIsIm1vdmVUbyIsImxpbmVUbyIsIndpZHRoIiwic3Ryb2tlIiwic3RhcnRfbWljcm9waG9uZSIsImFsZXJ0IiwiZXZlbnQiLCJpbmRleCIsImNvcyIsIkRTUCIsIlRXT19QSSIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRDb250ZXh0IiwiaW50ZW5kZWRXaWR0aDEiLCJjbGllbnRXaWR0aCIsImF1ZGlvIiwiZWNob0NhbmNlbGxhdGlvbiIsIm5vaXNlU3VwcHJlc3Npb24iLCJhdXRvR2FpbkNvbnRyb2wiLCJjaGVja2VkIiwic2V0QXR0cmlidXRlIiwiY2xlYXJSZWN0IiwiTEVGVCIsIlJJR0hUIiwiTUlYIiwiU0lORSIsIlRSSUFOR0xFIiwiU0FXIiwiU1FVQVJFIiwiTE9XUEFTUyIsIkhJR0hQQVNTIiwiQkFORFBBU1MiLCJOT1RDSCIsIkJBUlRMRVRUIiwiQkFSVExFVFRIQU5OIiwiQkxBQ0tNQU4iLCJDT1NJTkUiLCJHQVVTUyIsIkhBTU1JTkciLCJIQU5OIiwiTEFOQ1pPUyIsIlJFQ1RBTkdVTEFSIiwiVFJJQU5HVUxBUiIsIk9GRiIsIkZXIiwiQlciLCJGV0JXIiwiUEkiLCJzZXR1cFR5cGVkQXJyYXkiLCJmYWxsYmFjayIsIm9iaiIsIkFycmF5IiwiRm91cmllclRyYW5zZm9ybSIsImJ1ZmZlclNpemUiLCJiYW5kd2lkdGgiLCJGbG9hdDY0QXJyYXkiLCJyZWFsIiwiaW1hZyIsInBlYWtCYW5kIiwiZ2V0QmFuZEZyZXF1ZW5jeSIsImNhbGN1bGF0ZVNwZWN0cnVtIiwicnZhbCIsIml2YWwiLCJtYWciLCJiU2kiLCJzcXJ0IiwiTiIsIkRGVCIsInNpblRhYmxlIiwiY29zVGFibGUiLCJzaW4iLCJyZXZlcnNlVGFibGUiLCJVaW50MzJBcnJheSIsImxpbWl0IiwiYml0IiwiUkZGVCIsInRyYW5zIiwicmV2ZXJzZUJpblBlcm11dGUiLCJkZXN0Iiwic291cmNlIiwiaCIsImhhbGZTaXplIiwibm0xIiwiZ2VuZXJhdGVSZXZlcnNlVGFibGUiLCJTYW1wbGVyIiwiZmlsZSIsInBsYXlTdGFydCIsInBsYXlFbmQiLCJsb29wU3RhcnQiLCJsb29wRW5kIiwibG9vcE1vZGUiLCJsb2FkZWQiLCJzYW1wbGVzIiwic2lnbmFsIiwiZnJhbWVDb3VudCIsImVudmVsb3BlIiwiYW1wbGl0dWRlIiwicm9vdEZyZXF1ZW5jeSIsImZyZXF1ZW5jeSIsInN0ZXAiLCJkdXJhdGlvbiIsInNhbXBsZXNQcm9jZXNzZWQiLCJwbGF5aGVhZCIsImNyZWF0ZUVsZW1lbnQiLCJzZWxmIiwibG9hZFNhbXBsZXMiLCJnZXRDaGFubmVsIiwiZnJhbWVCdWZmZXIiLCJwdXNoIiwibG9hZENvbXBsZXRlIiwibG9hZE1ldGFEYXRhIiwibXV0ZWQiLCJzcmMiLCJwbGF5IiwiT3NjaWxsYXRvciIsInR5cGUiLCJ3YXZlVGFibGVMZW5ndGgiLCJjeWNsZXNQZXJTYW1wbGUiLCJwYXJzZUludCIsIlRyaWFuZ2xlIiwiU2F3IiwiU3F1YXJlIiwiU2luZSIsImdlbmVyYXRlV2F2ZVRhYmxlIiwid2F2ZVRhYmxlIiwid2F2ZVRhYmxlSHoiLCJBRFNSIiwiYXR0YWNrTGVuZ3RoIiwiZGVjYXlMZW5ndGgiLCJzdXN0YWluTGV2ZWwiLCJzdXN0YWluTGVuZ3RoIiwicmVsZWFzZUxlbmd0aCIsImF0dGFja1NhbXBsZXMiLCJkZWNheVNhbXBsZXMiLCJzdXN0YWluU2FtcGxlcyIsInJlbGVhc2VTYW1wbGVzIiwidXBkYXRlIiwiYXR0YWNrIiwiZGVjYXkiLCJzdXN0YWluIiwicmVsZWFzZSIsIklJUkZpbHRlciIsImN1dG9mZiIsInJlc29uYW5jZSIsIkxQMTIiLCJJSVJGaWx0ZXIyIiwiZiIsImNhbGNDb2VmZiIsImZyZXEiLCJtaW4iLCJkYW1wIiwicG93IiwiV2luZG93RnVuY3Rpb24iLCJhbHBoYSIsIkJhcnRsZXR0IiwiQmFydGxldHRIYW5uIiwiQmxhY2ttYW4iLCJDb3NpbmUiLCJHYXVzcyIsIkhhbW1pbmciLCJIYW5uIiwiTGFuY3pveiIsIlJlY3Rhbmd1bGFyIiwiVHJpYW5ndWxhciIsInNpbmgiLCJhcmciLCJleHAiLCJCaXF1YWQiLCJGcyIsInBhcmFtZXRlclR5cGUiLCJRIiwieF8xX2wiLCJ4XzJfbCIsInlfMV9sIiwieV8yX2wiLCJ4XzFfciIsInhfMl9yIiwieV8xX3IiLCJ5XzJfciIsImIwIiwiYTAiLCJiMSIsImExIiwiYjIiLCJhMiIsImIwYTAiLCJiMWEwIiwiYjJhMCIsImExYTAiLCJhMmEwIiwiZjAiLCJkQmdhaW4iLCJTIiwiY29lZmZpY2llbnRzIiwiYiIsImEiLCJzZXRGaWx0ZXJUeXBlIiwicmVjYWxjdWxhdGVDb2VmZmljaWVudHMiLCJzZXRTYW1wbGVSYXRlIiwicmF0ZSIsInNldFEiLCJxIiwibWF4Iiwic2V0QlciLCJidyIsInNldFMiLCJzZXRGMCIsInNldERiR2FpbiIsImciLCJBIiwiUEVBS0lOR19FUSIsIkxPV19TSEVMRiIsIkhJR0hfU0hFTEYiLCJjb2VmZiIsIncwIiwiY29zdzAiLCJzaW53MCIsIkxOMiIsIkxQRiIsIkhQRiIsIkJQRl9DT05TVEFOVF9TS0lSVCIsIkJQRl9DT05TVEFOVF9QRUFLIiwiQVBGIiwicHJvY2VzcyIsImxlbiIsIm91dHB1dCIsInByb2Nlc3NTdGVyZW8iLCJNdWx0aURlbGF5IiwibWF4RGVsYXlJblNhbXBsZXNTaXplIiwiZGVsYXlJblNhbXBsZXMiLCJtYXN0ZXJWb2x1bWUiLCJkZWxheVZvbHVtZSIsImRlbGF5QnVmZmVyU2FtcGxlcyIsImRlbGF5SW5wdXRQb2ludGVyIiwiZGVsYXlPdXRwdXRQb2ludGVyIiwiU2luZ2xlRGVsYXkiLCJSZXZlcmIiLCJtaXhWb2x1bWUiLCJkYW1wRnJlcXVlbmN5IiwiZGVsYXlNdWx0aXBseSIsIk5SX09GX01VTFRJREVMQVlTIiwiTlJfT0ZfU0lOR0xFREVMQVlTIiwiTE9XUEFTU0wiLCJMT1dQQVNTUiIsInNpbmdsZURlbGF5cyIsInJvdW5kIiwibXVsdGlEZWxheXMiLCJpbnZlcnQiLCJpbnRlcmxlYXZlIiwibGVmdCIsInJpZ2h0Iiwic3RlcmVvSW50ZXJsZWF2ZWQiLCJkZWludGVybGVhdmUiLCJtaXgiLCJkZWludGVybGVhdmVDaGFubmVsIiwiY2hhbm5lbCIsIm1peFNhbXBsZUJ1ZmZlcnMiLCJzYW1wbGVCdWZmZXIxIiwic2FtcGxlQnVmZmVyMiIsIm5lZ2F0ZSIsInZvbHVtZUNvcnJlY3Rpb24iLCJvdXRwdXRTYW1wbGVzIiwiUk1TIiwiUGVhayIsImFicyIsImsiLCJwaGFzZVNoaWZ0U3RlcFJlYWwiLCJwaGFzZVNoaWZ0U3RlcEltYWciLCJjdXJyZW50UGhhc2VTaGlmdFJlYWwiLCJjdXJyZW50UGhhc2VTaGlmdEltYWciLCJvZmYiLCJ0ciIsInRpIiwidG1wUmVhbCIsImZmdFN0ZXAiLCJpbnZlcnNlIiwicmV2UmVhbCIsInJldkltYWciLCJuMiIsIm40IiwibjgiLCJubiIsInQxIiwidDIiLCJ0MyIsInQ0IiwiaTEiLCJpMiIsImkzIiwiaTQiLCJpNSIsImk2IiwiaTciLCJpOCIsInN0MSIsImNjMSIsInNzMSIsImNjMyIsInNzMyIsIml4IiwiaWQiLCJpMCIsIlNRUlQxXzIiLCJqIiwiYXBwbHlFbnZlbG9wZSIsImdlbmVyYXRlIiwibG9vcFdpZHRoIiwicGxheVN0YXJ0U2FtcGxlcyIsInBsYXlFbmRTYW1wbGVzIiwic2V0RnJlcSIsInRvdGFsUHJvY2Vzc2VkIiwicmVzZXQiLCJzZXRBbXAiLCJhZGQiLCJvc2NpbGxhdG9yIiwiYWRkU2lnbmFsIiwiYWRkRW52ZWxvcGUiLCJ2YWx1ZUF0Iiwib2Zmc2V0IiwiZnJhbWVPZmZzZXQiLCJQdWxzZSIsIm5vdGVPbiIsIm5vdGVPZmYiLCJwcm9jZXNzU2FtcGxlIiwic2FtcGxlIiwiaXNBY3RpdmUiLCJkaXNhYmxlIiwiX19kZWZpbmVHZXR0ZXJfXyIsInNldCIsInZpYnJhUG9zIiwidmlicmFTcGVlZCIsInciLCJFIiwiTGFuY3pvcyIsIm1hZzJkYiIsIm1pbk1hZyIsIm1pbkRiIiwicmVzdWx0IiwiZnJlcXoiLCJudW1lcmF0b3IiLCJkZW5vbWluYXRvciIsInNldERlbGF5SW5TYW1wbGVzIiwic2V0TWFzdGVyVm9sdW1lIiwic2V0RGVsYXlWb2x1bWUiLCJkZWxheVNhbXBsZSIsInNldE1peFZvbHVtZSIsInNldERhbXBGcmVxdWVuY3kiLCJpbnRlcmxlYXZlZFNhbXBsZXMiLCJsZWZ0UmlnaHRNaXgiLCJmaWx0ZXJlZFNhbXBsZXMiLCJzaW5nbGVEZWxheVNhbXBsZXMiLCJHcmFwaGljYWxFcSIsIkZTIiwibWluRnJlcSIsIm1heEZyZXEiLCJiYW5kc1Blck9jdGF2ZSIsImZpbHRlcnMiLCJmcmVxenMiLCJjYWxjdWxhdGVGcmVxenMiLCJyZWNhbGN1bGF0ZUZpbHRlcnMiLCJiYW5kQ291bnQiLCJuZXdGaWx0ZXIiLCJyZWNhbGN1bGF0ZUZyZXF6Iiwic2V0TWluaW11bUZyZXF1ZW5jeSIsInNldE1heGltdW1GcmVxdWVuY3kiLCJzZXRCYW5kc1Blck9jdGF2ZSIsImJhbmRzIiwic2V0QmFuZEdhaW4iLCJiYW5kSW5kZXgiLCJ3ZWJwYWNrUG9seWZpbGwiLCJkZXByZWNhdGUiLCJwYXRocyIsImNoaWxkcmVuIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxLQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLElBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsWUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsR0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FL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ZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiaW1wb3J0ICcuL2FwcC5qcyc7XHJcblxyXG5cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XHJcbiAgICByZWdpc3RlclNXKCk7XHJcbn0pO1xyXG5cclxuYXN5bmMgZnVuY3Rpb24gcmVnaXN0ZXJTVygpIHtcclxuICAgIGlmICgnc2VydmljZVdvcmtlcicgaW4gbmF2aWdhdG9yKSB7IFxyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGF3YWl0IG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKCcuL3N3LmpzJyk7IFxyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1NlcnZpY2VXb3JrZXIgcmVnaXN0cmF0aW9uIGZhaWxlZC4gU29ycnkgYWJvdXQgdGhhdC4nLCBlKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5sb2coJ1lvdXIgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IFNlcnZpY2VXb3JrZXIuJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBmdW5jdGlvbiBzdHJpbmdGcm9tQXJyYXkoZGF0YSlcclxuICAvLyB7XHJcbiAgLy8gICAgIHZhciBjb3VudCA9IGRhdGEuYnl0ZUxlbmd0aDtcclxuICAvLyAgICAgdmFyIHN0ciA9IFwiXCI7XHJcbiAgLy8gICAgIHZhciB2YWwgPSAwO1xyXG5cclxuICAvLyAgICAgZm9yKHZhciBpbmRleCA9IDA7IGluZGV4IDwgY291bnQ7IGluZGV4ICs9IDEpXHJcbiAgLy8gICAgIHtcclxuICAvLyAgICAgICB2YWwgPSAgZGF0YS5nZXRVaW50OChpbmRleCk7XHJcbiAgLy8gICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodmFsKTtcclxuICAvLyAgICAgfVxyXG5cclxuICAvLyAgICAgcmV0dXJuIHN0cjtcclxuICAvLyB9XHJcblxyXG4gIFxyXG5cclxuICAiLCIvL2ltcG9ydCAnLi9mZnQuanMnXHJcbi8vY29uc3QgbGliID0gcmVxdWlyZSgnLi9mZnQnKSBcclxuY29uc3QgbGliID0gcmVxdWlyZSgnLi9kc3AnKVxyXG5cclxuY29uc3QgYnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ215QnRuJyk7XHJcbmJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRlc3QsIGZhbHNlKTtcclxuXHJcbnZhciBjYW52YXMxID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnZpc3VhbGl6ZXIxJyk7XHJcbnZhciBjYW52YXMyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnZpc3VhbGl6ZXIyJyk7XHJcblxyXG52YXIgY2FudmFzQ3R4MSA9IGNhbnZhczEuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG52YXIgY2FudmFzQ3R4MiA9IGNhbnZhczIuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG5cclxudmFyIGludGVuZGVkV2lkdGgxID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndyYXBwZXInKS5jbGllbnRXaWR0aDtcclxuXHJcbnZhciBjb25zdHJhaW50cyA9IHtcclxuICAgIGF1ZGlvOiB7XHJcbiAgICAgICAgZWNob0NhbmNlbGxhdGlvbjogZmFsc2UsXHJcbiAgICAgICAgbm9pc2VTdXBwcmVzc2lvbjogZmFsc2UsXHJcbiAgICAgICAgYXV0b0dhaW5Db250cm9sOiBmYWxzZSxcclxuICAgIH1cclxufTtcclxuXHJcblxyXG52YXIgZGlzcGxheUdhaW4gPSAzNjAwO1xyXG52YXIgdXNlV2luZG93aW5nID0gdHJ1ZTtcclxudmFyIHRpbWVkb21haW5BdmVyYWdpbmcgPSAzO1xyXG52YXIgZnJlcWRvbWFpbk5vaXNlQ2FuY2VsID0gNDtcclxudmFyIHBlYWt0aHJlc2hvbGRBZ2FpbnN0QXZlcmFnZSA9IDM7XHJcblxyXG5cclxudmFyIGN1cnJlbnRUaW1lZG9tYWluQXZlcmFnaW5nID0gMDtcclxudmFyIGN1cnJlbnRmcmVxZG9tYWluTm9pc2VDYW5jZWwgPSAwO1xyXG52YXIgTkNidWYgPSBbXTtcclxudmFyIHBlYWtCdWZmZXIgPSBbXTtcclxuZm9yIChsZXQgaSA9IDA7IGkgPCAxMDI0OyBpKyspXHJcbntcclxuICAgIHBlYWtCdWZmZXJbaV0gPSAwO1xyXG59XHJcblxyXG5cclxuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ1c2VXaW5kb3dcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHNldFdpbmRvd2luZyk7XHJcblxyXG5mdW5jdGlvbiBzZXRXaW5kb3dpbmcoKSB7XHJcbiAgICB2YXIgY2hlY2tCb3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInVzZVdpbmRvd1wiKTtcclxuICAgIGlmIChjaGVja0JveC5jaGVja2VkID09IHRydWUpIHtcclxuICAgICAgICB1c2VXaW5kb3dpbmcgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdXNlV2luZG93aW5nID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBjb25zb2xlLmxvZyhcImNsaWNrZWQgISEhXCIpO1xyXG59XHJcblxyXG5jYW52YXMxLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCBpbnRlbmRlZFdpZHRoMSk7XHJcbmNhbnZhczIuc2V0QXR0cmlidXRlKCd3aWR0aCcsIGludGVuZGVkV2lkdGgxKTtcclxudmFyIFdJRFRIID0gY2FudmFzMS53aWR0aDtcclxudmFyIEhFSUdIVCA9IGNhbnZhczEuaGVpZ2h0O1xyXG5jYW52YXNDdHgxLmNsZWFyUmVjdCgwLCAwLCBXSURUSCwgSEVJR0hUKTtcclxuY2FudmFzQ3R4Mi5jbGVhclJlY3QoMCwgMCwgV0lEVEgsIEhFSUdIVCk7XHJcblxyXG52YXIgVVNFRkxPQVQgPSB0cnVlO1xyXG5cclxuZnVuY3Rpb24gc2luZVdhdmVBdChzYW1wbGVOdW1iZXIsIHRvbmUsIHNhbXBsZXJhdGUpIHtcclxuICAgIHZhciBzYW1wbGVGcmVxID0gc2FtcGxlcmF0ZSAvIHRvbmVcclxuICAgIHJldHVybiBNYXRoLnNpbihzYW1wbGVOdW1iZXIgLyAoc2FtcGxlRnJlcSAvIChNYXRoLlBJICogMikpKVxyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVJbnB1dChzaXplKSB7XHJcbiAgICBjb25zdCByZXMgPSBuZXcgQXJyYXkoc2l6ZSk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlcy5sZW5ndGg7IGkrKylcclxuICAgICAgICByZXNbaV0gPSBzaW5lV2F2ZUF0KGksIDQxMDAsIDQ4MDAwKTsgLy9NYXRoLnJhbmRvbSgpICogMiAtIDE7XHJcbiAgICByZXR1cm4gcmVzO1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gdGVzdCgpIHtcclxuICAgIC8vdmFyIHdlYmF1ZGlvX3Rvb2xpbmdfb2JqID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgIHZhciBhdWRpb0NvbnRleHQgPSBuZXcgQXVkaW9Db250ZXh0KCk7XHJcblxyXG4gICAgY29uc29sZS5sb2coXCJhdWRpbyBpcyBzdGFydGluZyB1cCAuLi5cIik7XHJcbiAgICBjb25zb2xlLmxvZyhhdWRpb0NvbnRleHQuc2FtcGxlUmF0ZSk7XHJcblxyXG4gICAgdmFyIEJVRkZfU0laRV9SRU5ERVJFUiA9IDE2Mzg0O1xyXG4gICAgdmFyIFNJWkVfU0hPVyA9IDM7IC8vIG51bWJlciBvZiBhcnJheSBlbGVtZW50cyB0byBzaG93IGluIGNvbnNvbGUgb3V0cHV0XHJcblxyXG4gICAgdmFyIGF1ZGlvSW5wdXQgPSBudWxsLFxyXG4gICAgICAgIG1pY3JvcGhvbmVfc3RyZWFtID0gbnVsbCxcclxuICAgICAgICBnYWluX25vZGUgPSBudWxsLFxyXG4gICAgICAgIHNjcmlwdF9wcm9jZXNzb3Jfbm9kZSA9IG51bGwsXHJcbiAgICAgICAgc2NyaXB0X3Byb2Nlc3Nvcl9hbmFseXNpc19ub2RlID0gbnVsbCxcclxuICAgICAgICBhbmFseXNlcl9ub2RlID0gbnVsbDtcclxuXHJcblxyXG4gICAgaWYgKCFuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhKVxyXG4gICAgICAgIG5hdmlnYXRvci5nZXRVc2VyTWVkaWEgPSBuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhIHx8IG5hdmlnYXRvci53ZWJraXRHZXRVc2VyTWVkaWEgfHxcclxuICAgICAgICAgICAgbmF2aWdhdG9yLm1vekdldFVzZXJNZWRpYSB8fCBuYXZpZ2F0b3IubXNHZXRVc2VyTWVkaWE7XHJcblxyXG4gICAgaWYgKG5hdmlnYXRvci5nZXRVc2VyTWVkaWEpIHtcclxuXHJcbiAgICAgICAgbmF2aWdhdG9yLmdldFVzZXJNZWRpYShjb25zdHJhaW50cyxcclxuICAgICAgICAgICAgZnVuY3Rpb24gKHN0cmVhbSkge1xyXG4gICAgICAgICAgICAgICAgc3RhcnRfbWljcm9waG9uZShzdHJlYW0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgYWxlcnQoJ0Vycm9yIGNhcHR1cmluZyBhdWRpby4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgfSBlbHNlIHsgYWxlcnQoJ2dldFVzZXJNZWRpYSBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3Nlci4nKTsgfVxyXG5cclxuICAgIC8vIC0tLVxyXG5cclxuICAgIGZ1bmN0aW9uIHNob3dfc29tZV9kYXRhKGdpdmVuX3R5cGVkX2FycmF5LCBudW1fcm93X3RvX2Rpc3BsYXksIGxhYmVsKSB7XHJcblxyXG4gICAgICAgIHZhciBzaXplX2J1ZmZlciA9IGdpdmVuX3R5cGVkX2FycmF5Lmxlbmd0aDtcclxuICAgICAgICB2YXIgaW5kZXggPSAwO1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyhcIl9fX19fX19fX18gXCIgKyBsYWJlbCk7XHJcblxyXG4gICAgICAgIGlmIChsYWJlbCA9PT0gXCJ0aW1lXCIpIHtcclxuXHJcbiAgICAgICAgICAgIGZvciAoOyBpbmRleCA8IG51bV9yb3dfdG9fZGlzcGxheSAmJiBpbmRleCA8IHNpemVfYnVmZmVyOyBpbmRleCArPSAxKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJfdmFsdWVfdGltZSA9IChnaXZlbl90eXBlZF9hcnJheVtpbmRleF0gLyAxMjgpIC0gMS4wO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGN1cnJfdmFsdWVfdGltZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIGlmIChsYWJlbCA9PT0gXCJmcmVxdWVuY3lcIikge1xyXG5cclxuICAgICAgICAgICAgZm9yICg7IGluZGV4IDwgbnVtX3Jvd190b19kaXNwbGF5ICYmIGluZGV4IDwgc2l6ZV9idWZmZXI7IGluZGV4ICs9IDEpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhnaXZlbl90eXBlZF9hcnJheVtpbmRleF0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFUlJPUiAtIG11c3QgcGFzcyB0aW1lIG9yIGZyZXF1ZW5jeVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcHJvY2Vzc19taWNyb3Bob25lX2J1ZmZlcihldmVudCkge1xyXG5cclxuICAgICAgICB2YXIgaSwgTiwgaW5wLCBtaWNyb3Bob25lX291dHB1dF9idWZmZXI7XHJcblxyXG4gICAgICAgIC8vIG5vdCBuZWVkZWQgZm9yIGJhc2ljIGZlYXR1cmUgc2V0XHJcbiAgICAgICAgLy8gbWljcm9waG9uZV9vdXRwdXRfYnVmZmVyID0gZXZlbnQuaW5wdXRCdWZmZXIuZ2V0Q2hhbm5lbERhdGEoMCk7IC8vIGp1c3QgbW9ubyAtIDEgY2hhbm5lbCBmb3Igbm93XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZG9faGFtbWluZ193aW5kb3cobGVuZ3RoLCBpbmRleCkge1xyXG4gICAgICAgIHJldHVybiAwLjU0IC0gMC40NiAqIE1hdGguY29zKGxpYi5EU1AuVFdPX1BJICogaW5kZXggLyAobGVuZ3RoIC0gMSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRvX2ZsYXRUb3AobGVuZ3RoLCBpbmRleCkge1xyXG4gICAgICAgIHZhciBhMCA9IDEsXHJcbiAgICAgICAgICAgIGExID0gMS45MyxcclxuICAgICAgICAgICAgYTIgPSAxLjI5LFxyXG4gICAgICAgICAgICBhMyA9IDAuMzg4LFxyXG4gICAgICAgICAgICBhNCA9IDAuMDI4LFxyXG4gICAgICAgICAgICBmID0gNi4yODMxODUzMDcxNzk1ODYgKiBpbmRleCAvIChsZW5ndGggLSAxKVxyXG5cclxuICAgICAgICByZXR1cm4gYTAgLSBhMSAqIE1hdGguY29zKGYpICsgYTIgKiBNYXRoLmNvcygyICogZikgLSBhMyAqIE1hdGguY29zKDMgKiBmKSArIGE0ICogTWF0aC5jb3MoNCAqIGYpXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYXBwbHlfd2luZG93KGJ1ZmZlciwgZnVuYykge1xyXG4gICAgICAgIHZhciBsZW5ndGggPSBidWZmZXIubGVuZ3RoO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgYnVmZmVyW2ldICo9IGZ1bmMobGVuZ3RoLCBpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBmaW5kX3BlYWtzKGJ1ZmZlciwgc3RhcnQsIHN0b3AsIGF2ZylcclxuICAgIHtcclxuICAgICAgICBcclxuICAgICAgICBmb3IgKHZhciBpID0gTWF0aC5mbG9vcihzdGFydCksIG4gPSBidWZmZXIubGVuZ3RoOyBpIDwgTWF0aC5mbG9vcihzdG9wKTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChidWZmZXJbaV0gPiBhdmcqcGVha3RocmVzaG9sZEFnYWluc3RBdmVyYWdlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwZWFrQnVmZmVyW2ldID0gcGVha0J1ZmZlcltpXSArIDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwZWFrQnVmZmVyW2ldID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBwZWFrQnVmZmVyWzBdID0gcGVha0J1ZmZlclswXSAgKyAxOyAgLy8ganVzdCB0byBzZWUgaG93IG1hbnkgY3ljbGUgd2UgaGF2ZSBpbiB0b3RhbFxyXG4gICAgICAgIC8vcmV0dXJuIHBlYWtCdWZmZXI7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYXZlcmFnZShidWZmZXIsIHN0YXJ0LCBzdG9wKSB7XHJcbiAgICAgICAgdmFyIHRvdGFsID0gMDtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IE1hdGguZmxvb3Ioc3RhcnQpLCBuID0gYnVmZmVyLmxlbmd0aDsgaSA8IE1hdGguZmxvb3Ioc3RvcCk7IGkrKykge1xyXG4gICAgICAgICAgICB0b3RhbCArPSBidWZmZXJbaV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKHRvdGFsIC8gKHN0b3AgLSBzdGFydCkpO1xyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBOb2lzZUNhbmNlbEZyZXFEb21haW4oYnVmZmVyKSB7XHJcbiAgICAgICAgaWYgKGZyZXFkb21haW5Ob2lzZUNhbmNlbCA+IDEpIHtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRmcmVxZG9tYWluTm9pc2VDYW5jZWwgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgTkNidWYgPSBbLi4uYnVmZmVyXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZvciAoYmluID0gMDsgYmluIDwgYnVmZmVyLmxlbmd0aDsgYmluKyspIHsgLy8gdGFrZSB0aGUgbG93ZXN0IHZhbHVlc1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChidWZmZXJbYmluXSA8IE5DYnVmW2Jpbl0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTkNidWZbYmluXSA9IGJ1ZmZlcltiaW5dO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBOQ2J1ZltjdXJyZW50ZnJlcWRvbWFpbk5vaXNlQ2FuY2VsXSA9IFsuLi5idWZmZXJdO1xyXG4gICAgICAgICAgICBjdXJyZW50ZnJlcWRvbWFpbk5vaXNlQ2FuY2VsKys7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY3VycmVudGZyZXFkb21haW5Ob2lzZUNhbmNlbCA9PT0gZnJlcWRvbWFpbk5vaXNlQ2FuY2VsKSB7XHJcblxyXG4gICAgICAgICAgICBjdXJyZW50ZnJlcWRvbWFpbk5vaXNlQ2FuY2VsID0gMDtcclxuICAgICAgICAgICAgcmV0dXJuIE5DYnVmO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBzdGFydF9taWNyb3Bob25lKHN0cmVhbSkge1xyXG5cclxuICAgICAgICBnYWluX25vZGUgPSBhdWRpb0NvbnRleHQuY3JlYXRlR2FpbigpO1xyXG4gICAgICAgIGdhaW5fbm9kZS5jb25uZWN0KGF1ZGlvQ29udGV4dC5kZXN0aW5hdGlvbik7XHJcblxyXG4gICAgICAgIG1pY3JvcGhvbmVfc3RyZWFtID0gYXVkaW9Db250ZXh0LmNyZWF0ZU1lZGlhU3RyZWFtU291cmNlKHN0cmVhbSk7XHJcbiAgICAgICAgbWljcm9waG9uZV9zdHJlYW0uY29ubmVjdChnYWluX25vZGUpO1xyXG5cclxuICAgICAgICBzY3JpcHRfcHJvY2Vzc29yX25vZGUgPSBhdWRpb0NvbnRleHQuY3JlYXRlU2NyaXB0UHJvY2Vzc29yKEJVRkZfU0laRV9SRU5ERVJFUiwgMSwgMSk7XHJcbiAgICAgICAgc2NyaXB0X3Byb2Nlc3Nvcl9ub2RlLm9uYXVkaW9wcm9jZXNzID0gcHJvY2Vzc19taWNyb3Bob25lX2J1ZmZlcjtcclxuXHJcbiAgICAgICAgbWljcm9waG9uZV9zdHJlYW0uY29ubmVjdChzY3JpcHRfcHJvY2Vzc29yX25vZGUpO1xyXG5cclxuICAgICAgICAvLyAtLS0gZW5hYmxlIHZvbHVtZSBjb250cm9sIGZvciBvdXRwdXQgc3BlYWtlcnNcclxuXHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZvbHVtZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBjdXJyX3ZvbHVtZSA9IHRoaXMudmFsdWU7XHJcbiAgICAgICAgICAgIGdhaW5fbm9kZS5nYWluLnZhbHVlID0gY3Vycl92b2x1bWU7XHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImN1cnJfdm9sdW1lIFwiLCBjdXJyX3ZvbHVtZSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIC0tLSBzZXR1cCBGRlRcclxuXHJcbiAgICAgICAgc2NyaXB0X3Byb2Nlc3Nvcl9hbmFseXNpc19ub2RlID0gYXVkaW9Db250ZXh0LmNyZWF0ZVNjcmlwdFByb2Nlc3NvcigyMDQ4LCAxLCAxKTtcclxuICAgICAgICBzY3JpcHRfcHJvY2Vzc29yX2FuYWx5c2lzX25vZGUuY29ubmVjdChnYWluX25vZGUpO1xyXG5cclxuICAgICAgICBhbmFseXNlcl9ub2RlID0gYXVkaW9Db250ZXh0LmNyZWF0ZUFuYWx5c2VyKCk7XHJcbiAgICAgICAgYW5hbHlzZXJfbm9kZS5zbW9vdGhpbmdUaW1lQ29uc3RhbnQgPSAwO1xyXG4gICAgICAgIGFuYWx5c2VyX25vZGUuZmZ0U2l6ZSA9IDQwOTY7XHJcblxyXG4gICAgICAgIG1pY3JvcGhvbmVfc3RyZWFtLmNvbm5lY3QoYW5hbHlzZXJfbm9kZSk7XHJcblxyXG4gICAgICAgIGFuYWx5c2VyX25vZGUuY29ubmVjdChzY3JpcHRfcHJvY2Vzc29yX2FuYWx5c2lzX25vZGUpO1xyXG5cclxuICAgICAgICB2YXIgYnVmZmVyX2xlbmd0aCA9IGFuYWx5c2VyX25vZGUuZnJlcXVlbmN5QmluQ291bnQ7XHJcblxyXG4gICAgICAgIHZhciBhcnJheV9mcmVxX2RvbWFpbjtcclxuICAgICAgICB2YXIgYXJyYXlfdGltZV9kb21haW47XHJcblxyXG4gICAgICAgIGlmIChVU0VGTE9BVCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBhcnJheV9mcmVxX2RvbWFpbiA9IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyX2xlbmd0aCk7XHJcbiAgICAgICAgICAgIGFycmF5X3RpbWVfZG9tYWluID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXJfbGVuZ3RoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGFycmF5X2ZyZXFfZG9tYWluID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyX2xlbmd0aCk7XHJcbiAgICAgICAgICAgIGFycmF5X3RpbWVfZG9tYWluID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyX2xlbmd0aCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyhcImJ1ZmZlcl9sZW5ndGggXCIgKyBidWZmZXJfbGVuZ3RoKTtcclxuXHJcbiAgICAgICAgc2NyaXB0X3Byb2Nlc3Nvcl9hbmFseXNpc19ub2RlLm9uYXVkaW9wcm9jZXNzID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgLy8gZ2V0IHRoZSBhdmVyYWdlIGZvciB0aGUgZmlyc3QgY2hhbm5lbFxyXG4gICAgICAgICAgICBpZiAoVVNFRkxPQVQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIGFuYWx5c2VyX25vZGUuZ2V0RmxvYXRGcmVxdWVuY3lEYXRhKGFycmF5X2ZyZXFfZG9tYWluKTtcclxuICAgICAgICAgICAgICAgIGFuYWx5c2VyX25vZGUuZ2V0RmxvYXRUaW1lRG9tYWluRGF0YShhcnJheV90aW1lX2RvbWFpbik7XHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAvL2NvbnN0IGYgPSBuZXcgbGliKGFuYWx5c2VyX25vZGUuZmZ0U2l6ZSk7XHJcbiAgICAgICAgICAgICAgICAvL2NvbnN0IGlucHV0ID0gY3JlYXRlSW5wdXQoZi5zaXplKTtcclxuICAgICAgICAgICAgICAgIC8vLy8gIGNvbnN0IGRhdGEgPSBmLnRvQ29tcGxleEFycmF5KGlucHV0KTtcclxuICAgICAgICAgICAgICAgIC8vY29uc3QgZGF0YSA9IGlucHV0O1xyXG4gICAgICAgICAgICAgICAgLy9jb25zdCBvdXQgPSBmLmNyZWF0ZUNvbXBsZXhBcnJheSgpO1xyXG4gICAgICAgICAgICAgICAgLy9mLnJlYWxUcmFuc2Zvcm0ob3V0LCBkYXRhKTtcclxuICAgICAgICAgICAgICAgIC8vb3V0UmVhbCA9IG5ldyBBcnJheShhbmFseXNlcl9ub2RlLmZmdFNpemUpO1xyXG4gICAgICAgICAgICAgICAgLy9vdXRSZWFsID0gZi5mcm9tQ29tcGxleEFycmF5KG91dCwgLyogb3B0aW9uYWwgKi8gb3V0UmVhbCk7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYW5hbHlzZXJfbm9kZS5nZXRCeXRlRnJlcXVlbmN5RGF0YShhcnJheV9mcmVxX2RvbWFpbik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgIC8vIGRyYXcgdGhlIHNwZWN0cm9ncmFtXHJcbiAgICAgICAgICAgIGlmIChtaWNyb3Bob25lX3N0cmVhbS5wbGF5YmFja1N0YXRlID09IG1pY3JvcGhvbmVfc3RyZWFtLlBMQVlJTkdfU1RBVEUpIHtcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgICAgIGNhbnZhc0N0eDEuZmlsbFN0eWxlID0gJ3JnYigwLCAwLCAwKSc7XHJcbiAgICAgICAgICAgICAgICBjYW52YXNDdHgxLmZpbGxSZWN0KDAsIDAsIFdJRFRILCBIRUlHSFQpO1xyXG5cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGJhcldpZHRoID0gKFdJRFRIIC8gYnVmZmVyX2xlbmd0aCkgKiAyLjU7XHJcbiAgICAgICAgICAgICAgICBiYXJXaWR0aCA9IDE7XHJcbiAgICAgICAgICAgICAgICB2YXIgYmFySGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHNwZWN0cnVtIGZyb20gd2ViYXVkaW9cclxuICAgICAgICAgICAgICAgIGlmIChVU0VGTE9BVCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwb3NYID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1ZmZlcl9sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiYXJIZWlnaHQgPSAoYXJyYXlfZnJlcV9kb21haW5baV0gKyAxNDApICogMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzQ3R4MS5maWxsU3R5bGUgPSAncmdiKCcgKyBNYXRoLmZsb29yKGJhckhlaWdodCArIDEwMCkgKyAnLCA1MCwgNTApJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzQ3R4MS5maWxsUmVjdChwb3NYLCBjYW52YXMxLmhlaWdodCAtIGJhckhlaWdodCAvIDIsIGJhcldpZHRoLCBiYXJIZWlnaHQgLyAyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zWCArPSBiYXJXaWR0aDsgLy8rIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciB4ID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBidWZmZXJfbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFySGVpZ2h0ID0gYXJyYXlfZnJlcV9kb21haW5baV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhc0N0eDEuZmlsbFN0eWxlID0gJ3JnYignICsgKGJhckhlaWdodCArIDEwMCkgKyAnLCA1MCwgNTApJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzQ3R4MS5maWxsUmVjdCh4LCBIRUlHSFQgLSBiYXJIZWlnaHQgLyAyLCBiYXJXaWR0aCwgYmFySGVpZ2h0IC8gMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHggKz0gYmFyV2lkdGggKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBvdXRwdXQgZnJvbSBkc3BcclxuXHJcbiAgICAgICAgICAgICAgICAvLyByZXF1ZXN0cmVuZGVyZnJhbWVcclxuXHJcbiAgICAgICAgICAgICAgICAvLyAgdmFyIGZpbHRlciA9IGxpYi5XaW5kb3dGdW5jdGlvbihidWZmZXJfbGVuZ3RoLDApO1xyXG4gICAgICAgICAgICAgICAgLy8gIGZpbHRlci5wcm9jZXNzKHNpZ25hbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gYXJyYXlfdGltZV9kb21haW47IC8vIHRoaXMgYXJyYXkgaXMgbm93IDIwNDggbG9uZ1xyXG4gICAgICAgICAgICAgICAgLy92YXIgaW5wdXQgPSBjcmVhdGVJbnB1dCgyMDQ4KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodXNlV2luZG93aW5nID09IHRydWUpXHJcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQgPSBhcHBseV93aW5kb3coaW5wdXQsIGRvX2hhbW1pbmdfd2luZG93KTsvL2RvX2ZsYXRUb3ApO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGlmICh0aW1lZG9tYWluQXZlcmFnaW5nID4gMSlcclxuICAgICAgICAgICAgICAgIC8vICAgICBpbnB1dCA9IGF2ZXJhZ2VUaW1lRG9tYWluKGlucHV0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmZnQgPSBuZXcgbGliLkZGVCgyMDQ4LCA0ODAwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZmZ0LmZvcndhcmQoaW5wdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzcGVjdHJ1bSA9IGZmdC5zcGVjdHJ1bTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2hvdWxkIGJlIGRvbmUgb24gdGhlIHRpbWUgZG9tYWluIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmcmVxZG9tYWluTm9pc2VDYW5jZWwgPiAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzcGVjdHJ1bSA9IE5vaXNlQ2FuY2VsRnJlcURvbWFpbihzcGVjdHJ1bSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNwZWN0cnVtICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzQ3R4Mi5maWxsU3R5bGUgPSAncmdiKDAsIDAsIDApJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzQ3R4Mi5maWxsUmVjdCgwLCAwLCBXSURUSCwgSEVJR0hUKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBvc1ggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYmluU2l6ZSA9IDQ4MDAwIC8gMjA0ODtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGFydEZyZXEgPSAyMDAwIC8gYmluU2l6ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0b3BGcmVxID0gNTAwMCAvIGJpblNpemU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXZnID0gYXZlcmFnZShzcGVjdHJ1bSwgc3RhcnRGcmVxLCBzdG9wRnJlcSk7IC8vIGZvciBkaXNwbGF5aW5nIHRoZSBhdmVyYWdlIFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZmluZF9wZWFrcyhzcGVjdHJ1bSwgc3RhcnRGcmVxLCBzdG9wRnJlcSwgYXZnKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDI0OyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYmFySGVpZ2h0ID0gc3BlY3RydW1baV0gKiAoY2FudmFzMi5oZWlnaHQgKiBkaXNwbGF5R2Fpbik7Ly8oYXJyYXlfZnJlcV9kb21haW5baV0gKyAxNDApICogMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FudmFzQ3R4Mi5maWxsU3R5bGUgPSAncmdiKDIwMCwgNTAsICR7cGVha0J1ZmZlcltpXX0pJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwZWFrID0gcGVha0J1ZmZlcltpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWRWYWwgPSAyMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ3JlZW5WYWwgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlYWsgPiAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZFZhbCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JlZW5WYWwgPSAxMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW52YXNDdHgyLmZpbGxTdHlsZSA9IGByZ2IoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHtNYXRoLmZsb29yKHJlZFZhbCl9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR7TWF0aC5mbG9vcihncmVlblZhbCl9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR7TWF0aC5mbG9vcihwZWFrKX0pYDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhc0N0eDIuZmlsbFJlY3QocG9zWCwgY2FudmFzMi5oZWlnaHQgLSBiYXJIZWlnaHQgLyAyLCBiYXJXaWR0aCwgYmFySGVpZ2h0IC8gMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NYICs9IGJhcldpZHRoOyAvLysgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdmcgPSAoY2FudmFzMi5oZWlnaHQgLSAoYXZnICogKGNhbnZhczIuaGVpZ2h0ICogZGlzcGxheUdhaW4pKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhc0N0eDIuc3Ryb2tlU3R5bGUgPSAnd2hpdGUnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW52YXNDdHgyLmxpbmVXaWR0aCA9IDE7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGaWxsIHRoZSBwYXRoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhc0N0eDIuZmlsbFN0eWxlID0gXCIjOWVhN2I4XCI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYW52YXNfY3R4LnN0cm9rZVN0eWxlID0gXCJ3aGl0ZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW52YXNDdHgyLmxpbmVXaWR0aCA9IDI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW52YXNDdHgyLmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW52YXNDdHgyLm1vdmVUbygwLCBhdmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW52YXNDdHgyLmxpbmVUbyhjYW52YXMyLndpZHRoLCBhdmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW52YXNDdHgyLnN0cm9rZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZHJhdyBiZWdpbiBmcmVxIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW52YXNDdHgyLmxpbmVXaWR0aCA9IDE7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW52YXNDdHgyLmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW52YXNDdHgyLm1vdmVUbyhzdGFydEZyZXEsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW52YXNDdHgyLmxpbmVUbyhzdGFydEZyZXEsIGNhbnZhczIuaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzQ3R4Mi5zdHJva2UoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhc0N0eDIuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhc0N0eDIubW92ZVRvKHN0b3BGcmVxLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzQ3R4Mi5saW5lVG8oc3RvcEZyZXEsIGNhbnZhczIuaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzQ3R4Mi5zdHJva2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gTWFrZSB0aGUgbGluZSB2aXNpYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgLy9jYW52YXNDdHgyLmZpbGwoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvL3Nob3dfc29tZV9kYXRhKGFycmF5X2ZyZXFfZG9tYWluLCBTSVpFX1NIT1csIFwiZnJlcXVlbmN5XCIpOyAvLyBvbmx5IGhlcmUgZm9yIHRpbWVkZWxheSBpbiBjYW52YXMgZGlzcGxheVxyXG4gICAgICAgICAgICAvLyBzaG93X3NvbWVfZGF0YShhcnJheV90aW1lX2RvbWFpbiwgU0laRV9TSE9XLCBcInRpbWVcIik7IC8vIHN0b3JlIHRoaXMgdG8gcmVjb3JkIHRvIGFnZ3JlZ2F0ZSBidWZmZXIvZmlsZVxyXG5cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxufTsgLy8gIHdlYmF1ZGlvX3Rvb2xpbmdfb2JqID0gZnVuY3Rpb24oKSIsIi8qIFxuICogIERTUC5qcyAtIGEgY29tcHJlaGVuc2l2ZSBkaWdpdGFsIHNpZ25hbCBwcm9jZXNzaW5nICBsaWJyYXJ5IGZvciBqYXZhc2NyaXB0XG4gKiBcbiAqICBDcmVhdGVkIGJ5IENvcmJhbiBCcm9vayA8Y29yYmFuYnJvb2tAZ21haWwuY29tPiBvbiAyMDEwLTAxLTAxLlxuICogIENvcHlyaWdodCAyMDEwIENvcmJhbiBCcm9vay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKi9cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENPTlNUQU5UUyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIERTUCBpcyBhbiBvYmplY3Qgd2hpY2ggY29udGFpbnMgZ2VuZXJhbCBwdXJwb3NlIHV0aWxpdHkgZnVuY3Rpb25zIGFuZCBjb25zdGFudHNcbiAqL1xudmFyIERTUCA9IHtcbiAgLy8gQ2hhbm5lbHNcbiAgTEVGVDogICAgICAgICAgIDAsXG4gIFJJR0hUOiAgICAgICAgICAxLFxuICBNSVg6ICAgICAgICAgICAgMixcblxuICAvLyBXYXZlZm9ybXNcbiAgU0lORTogICAgICAgICAgIDEsXG4gIFRSSUFOR0xFOiAgICAgICAyLFxuICBTQVc6ICAgICAgICAgICAgMyxcbiAgU1FVQVJFOiAgICAgICAgIDQsXG5cbiAgLy8gRmlsdGVyc1xuICBMT1dQQVNTOiAgICAgICAgMCxcbiAgSElHSFBBU1M6ICAgICAgIDEsXG4gIEJBTkRQQVNTOiAgICAgICAyLFxuICBOT1RDSDogICAgICAgICAgMyxcblxuICAvLyBXaW5kb3cgZnVuY3Rpb25zXG4gIEJBUlRMRVRUOiAgICAgICAxLFxuICBCQVJUTEVUVEhBTk46ICAgMixcbiAgQkxBQ0tNQU46ICAgICAgIDMsXG4gIENPU0lORTogICAgICAgICA0LFxuICBHQVVTUzogICAgICAgICAgNSxcbiAgSEFNTUlORzogICAgICAgIDYsXG4gIEhBTk46ICAgICAgICAgICA3LFxuICBMQU5DWk9TOiAgICAgICAgOCxcbiAgUkVDVEFOR1VMQVI6ICAgIDksXG4gIFRSSUFOR1VMQVI6ICAgICAxMCxcblxuICAvLyBMb29wIG1vZGVzXG4gIE9GRjogICAgICAgICAgICAwLFxuICBGVzogICAgICAgICAgICAgMSxcbiAgQlc6ICAgICAgICAgICAgIDIsXG4gIEZXQlc6ICAgICAgICAgICAzLFxuXG4gIC8vIE1hdGhcbiAgVFdPX1BJOiAgICAgICAgIDIqTWF0aC5QSVxufTtcblxuLy8gU2V0dXAgYXJyYXlzIGZvciBwbGF0Zm9ybXMgd2hpY2ggZG8gbm90IHN1cHBvcnQgYnl0ZSBhcnJheXNcbmZ1bmN0aW9uIHNldHVwVHlwZWRBcnJheShuYW1lLCBmYWxsYmFjaykge1xuICAvLyBjaGVjayBpZiBUeXBlZEFycmF5IGV4aXN0c1xuICAvLyB0eXBlb2Ygb24gTWluZWZpZWxkIGFuZCBDaHJvbWUgcmV0dXJuIGZ1bmN0aW9uLCB0eXBlb2Ygb24gV2Via2l0IHJldHVybnMgb2JqZWN0LlxuICBpZiAodHlwZW9mIHRoaXNbbmFtZV0gIT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgdGhpc1tuYW1lXSAhPT0gXCJvYmplY3RcIikge1xuICAgIC8vIG5vcGUuLiBjaGVjayBpZiBXZWJHTEFycmF5IGV4aXN0c1xuICAgIGlmICh0eXBlb2YgdGhpc1tmYWxsYmFja10gPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgdGhpc1tmYWxsYmFja10gIT09IFwib2JqZWN0XCIpIHtcbiAgICAgIHRoaXNbbmFtZV0gPSB0aGlzW2ZhbGxiYWNrXTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbm9wZS4uIHNldCBhcyBOYXRpdmUgSlMgYXJyYXlcbiAgICAgIHRoaXNbbmFtZV0gPSBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBBcnJheShvYmopO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfVxufVxuXG5zZXR1cFR5cGVkQXJyYXkoXCJGbG9hdDY0QXJyYXlcIiwgXCJXZWJHTEZsb2F0QXJyYXlcIik7XG5zZXR1cFR5cGVkQXJyYXkoXCJJbnQzMkFycmF5XCIsICAgXCJXZWJHTEludEFycmF5XCIpO1xuc2V0dXBUeXBlZEFycmF5KFwiVWludDE2QXJyYXlcIiwgIFwiV2ViR0xVbnNpZ25lZFNob3J0QXJyYXlcIik7XG5zZXR1cFR5cGVkQXJyYXkoXCJVaW50OEFycmF5XCIsICAgXCJXZWJHTFVuc2lnbmVkQnl0ZUFycmF5XCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICBEU1AgVVRJTElUWSBGVU5DVElPTlMgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBJbnZlcnRzIHRoZSBwaGFzZSBvZiBhIHNpZ25hbFxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGJ1ZmZlciBBIHNhbXBsZSBidWZmZXJcbiAqXG4gKiBAcmV0dXJucyBUaGUgaW52ZXJ0ZWQgc2FtcGxlIGJ1ZmZlclxuICovXG5EU1AuaW52ZXJ0ID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBidWZmZXIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBidWZmZXJbaV0gKj0gLTE7XG4gIH1cblxuICByZXR1cm4gYnVmZmVyO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBzcGxpdC1zdGVyZW8gKGR1YWwgbW9ubykgc2FtcGxlIGJ1ZmZlcnMgaW50byBhIHN0ZXJlbyBpbnRlcmxlYXZlZCBzYW1wbGUgYnVmZmVyXG4gKlxuICogQHBhcmFtIHtBcnJheX0gbGVmdCAgQSBzYW1wbGUgYnVmZmVyXG4gKiBAcGFyYW0ge0FycmF5fSByaWdodCBBIHNhbXBsZSBidWZmZXJcbiAqXG4gKiBAcmV0dXJucyBUaGUgc3RlcmVvIGludGVybGVhdmVkIGJ1ZmZlclxuICovXG5EU1AuaW50ZXJsZWF2ZSA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7XG4gIGlmIChsZWZ0Lmxlbmd0aCAhPT0gcmlnaHQubGVuZ3RoKSB7XG4gICAgdGhyb3cgXCJDYW4gbm90IGludGVybGVhdmUuIENoYW5uZWwgbGVuZ3RocyBkaWZmZXIuXCI7XG4gIH1cbiBcbiAgdmFyIHN0ZXJlb0ludGVybGVhdmVkID0gbmV3IEZsb2F0NjRBcnJheShsZWZ0Lmxlbmd0aCAqIDIpO1xuIFxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gbGVmdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIHN0ZXJlb0ludGVybGVhdmVkWzIqaV0gICA9IGxlZnRbaV07XG4gICAgc3RlcmVvSW50ZXJsZWF2ZWRbMippKzFdID0gcmlnaHRbaV07XG4gIH1cbiBcbiAgcmV0dXJuIHN0ZXJlb0ludGVybGVhdmVkO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0ZXJlby1pbnRlcmxlYXZlZCBzYW1wbGUgYnVmZmVyIGludG8gc3BsaXQtc3RlcmVvIChkdWFsIG1vbm8pIHNhbXBsZSBidWZmZXJzXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYnVmZmVyIEEgc3RlcmVvLWludGVybGVhdmVkIHNhbXBsZSBidWZmZXJcbiAqXG4gKiBAcmV0dXJucyBhbiBBcnJheSBjb250YWluaW5nIGxlZnQgYW5kIHJpZ2h0IGNoYW5uZWxzXG4gKi9cbkRTUC5kZWludGVybGVhdmUgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciBsZWZ0LCByaWdodCwgbWl4LCBkZWludGVybGVhdmVDaGFubmVsID0gW107IFxuXG4gIGRlaW50ZXJsZWF2ZUNoYW5uZWxbRFNQLk1JWF0gPSBmdW5jdGlvbihidWZmZXIpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYnVmZmVyLmxlbmd0aC8yOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIG1peFtpXSA9IChidWZmZXJbMippXSArIGJ1ZmZlclsyKmkrMV0pIC8gMjtcbiAgICB9XG4gICAgcmV0dXJuIG1peDtcbiAgfTtcblxuICBkZWludGVybGVhdmVDaGFubmVsW0RTUC5MRUZUXSA9IGZ1bmN0aW9uKGJ1ZmZlcikge1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBidWZmZXIubGVuZ3RoLzI7IGkgPCBsZW47IGkrKykge1xuICAgICAgbGVmdFtpXSAgPSBidWZmZXJbMippXTtcbiAgICB9XG4gICAgcmV0dXJuIGxlZnQ7XG4gIH07XG5cbiAgZGVpbnRlcmxlYXZlQ2hhbm5lbFtEU1AuUklHSFRdID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGJ1ZmZlci5sZW5ndGgvMjsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICByaWdodFtpXSAgPSBidWZmZXJbMippKzFdO1xuICAgIH1cbiAgICByZXR1cm4gcmlnaHQ7XG4gIH07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGNoYW5uZWwsIGJ1ZmZlcikgeyBcbiAgICBsZWZ0ICA9IGxlZnQgIHx8IG5ldyBGbG9hdDY0QXJyYXkoYnVmZmVyLmxlbmd0aC8yKTtcbiAgICByaWdodCA9IHJpZ2h0IHx8IG5ldyBGbG9hdDY0QXJyYXkoYnVmZmVyLmxlbmd0aC8yKTtcbiAgICBtaXggICA9IG1peCAgIHx8IG5ldyBGbG9hdDY0QXJyYXkoYnVmZmVyLmxlbmd0aC8yKTtcblxuICAgIGlmIChidWZmZXIubGVuZ3RoLzIgIT09IGxlZnQubGVuZ3RoKSB7XG4gICAgICBsZWZ0ICA9IG5ldyBGbG9hdDY0QXJyYXkoYnVmZmVyLmxlbmd0aC8yKTtcbiAgICAgIHJpZ2h0ID0gbmV3IEZsb2F0NjRBcnJheShidWZmZXIubGVuZ3RoLzIpO1xuICAgICAgbWl4ICAgPSBuZXcgRmxvYXQ2NEFycmF5KGJ1ZmZlci5sZW5ndGgvMik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlaW50ZXJsZWF2ZUNoYW5uZWxbY2hhbm5lbF0oYnVmZmVyKTtcbiAgfTtcbn0oKSk7XG5cbi8qKlxuICogU2VwYXJhdGVzIGEgY2hhbm5lbCBmcm9tIGEgc3RlcmVvLWludGVybGVhdmVkIHNhbXBsZSBidWZmZXJcbiAqXG4gKiBAcGFyYW0ge0FycmF5fSAgYnVmZmVyIEEgc3RlcmVvLWludGVybGVhdmVkIHNhbXBsZSBidWZmZXJcbiAqIEBwYXJhbSB7TnVtYmVyfSBjaGFubmVsIEEgY2hhbm5lbCBjb25zdGFudCAoTEVGVCwgUklHSFQsIE1JWClcbiAqXG4gKiBAcmV0dXJucyBhbiBBcnJheSBjb250YWluaW5nIGEgc2lnbmFsIG1vbm8gc2FtcGxlIGJ1ZmZlclxuICovXG5EU1AuZ2V0Q2hhbm5lbCA9IERTUC5kZWludGVybGVhdmU7XG5cbi8qKlxuICogSGVscGVyIG1ldGhvZCAoZm9yIFJldmVyYikgdG8gbWl4IHR3byAoaW50ZXJsZWF2ZWQpIHNhbXBsZWJ1ZmZlcnMuIEl0J3MgcG9zc2libGVcbiAqIHRvIG5lZ2F0ZSB0aGUgc2Vjb25kIGJ1ZmZlciB3aGlsZSBtaXhpbmcgYW5kIHRvIHBlcmZvcm0gYSB2b2x1bWUgY29ycmVjdGlvblxuICogb24gdGhlIGZpbmFsIHNpZ25hbC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBzYW1wbGVCdWZmZXIxIEFycmF5IGNvbnRhaW5pbmcgRmxvYXQgdmFsdWVzIG9yIGEgRmxvYXQ2NEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBzYW1wbGVCdWZmZXIyIEFycmF5IGNvbnRhaW5pbmcgRmxvYXQgdmFsdWVzIG9yIGEgRmxvYXQ2NEFycmF5XG4gKiBAcGFyYW0ge0Jvb2xlYW59IG5lZ2F0ZSBXaGVuIHRydWUgaW52ZXJ0cy9mbGlwcyB0aGUgYXVkaW8gc2lnbmFsXG4gKiBAcGFyYW0ge051bWJlcn0gdm9sdW1lQ29ycmVjdGlvbiBXaGVuIHlvdSBhZGQgbXVsdGlwbGUgc2FtcGxlIGJ1ZmZlcnMsIHVzZSB0aGlzIHRvIHRhbWUgeW91ciBzaWduYWwgOylcbiAqXG4gKiBAcmV0dXJucyBBIG5ldyBGbG9hdDY0QXJyYXkgaW50ZXJsZWF2ZWQgYnVmZmVyLlxuICovXG5EU1AubWl4U2FtcGxlQnVmZmVycyA9IGZ1bmN0aW9uKHNhbXBsZUJ1ZmZlcjEsIHNhbXBsZUJ1ZmZlcjIsIG5lZ2F0ZSwgdm9sdW1lQ29ycmVjdGlvbil7XG4gIHZhciBvdXRwdXRTYW1wbGVzID0gbmV3IEZsb2F0NjRBcnJheShzYW1wbGVCdWZmZXIxKTtcblxuICBmb3IodmFyIGkgPSAwOyBpPHNhbXBsZUJ1ZmZlcjEubGVuZ3RoOyBpKyspe1xuICAgIG91dHB1dFNhbXBsZXNbaV0gKz0gKG5lZ2F0ZSA/IC1zYW1wbGVCdWZmZXIyW2ldIDogc2FtcGxlQnVmZmVyMltpXSkgLyB2b2x1bWVDb3JyZWN0aW9uO1xuICB9XG4gXG4gIHJldHVybiBvdXRwdXRTYW1wbGVzO1xufTsgXG5cbi8vIEJpcXVhZCBmaWx0ZXIgdHlwZXNcbkRTUC5MUEYgPSAwOyAgICAgICAgICAgICAgICAvLyBIKHMpID0gMSAvIChzXjIgKyBzL1EgKyAxKVxuRFNQLkhQRiA9IDE7ICAgICAgICAgICAgICAgIC8vIEgocykgPSBzXjIgLyAoc14yICsgcy9RICsgMSlcbkRTUC5CUEZfQ09OU1RBTlRfU0tJUlQgPSAyOyAvLyBIKHMpID0gcyAvIChzXjIgKyBzL1EgKyAxKSAgKGNvbnN0YW50IHNraXJ0IGdhaW4sIHBlYWsgZ2FpbiA9IFEpXG5EU1AuQlBGX0NPTlNUQU5UX1BFQUsgPSAzOyAgLy8gSChzKSA9IChzL1EpIC8gKHNeMiArIHMvUSArIDEpICAgICAgKGNvbnN0YW50IDAgZEIgcGVhayBnYWluKVxuRFNQLk5PVENIID0gNDsgICAgICAgICAgICAgIC8vIEgocykgPSAoc14yICsgMSkgLyAoc14yICsgcy9RICsgMSlcbkRTUC5BUEYgPSA1OyAgICAgICAgICAgICAgICAvLyBIKHMpID0gKHNeMiAtIHMvUSArIDEpIC8gKHNeMiArIHMvUSArIDEpXG5EU1AuUEVBS0lOR19FUSA9IDY7ICAgICAgICAgLy8gSChzKSA9IChzXjIgKyBzKihBL1EpICsgMSkgLyAoc14yICsgcy8oQSpRKSArIDEpXG5EU1AuTE9XX1NIRUxGID0gNzsgICAgICAgICAgLy8gSChzKSA9IEEgKiAoc14yICsgKHNxcnQoQSkvUSkqcyArIEEpLyhBKnNeMiArIChzcXJ0KEEpL1EpKnMgKyAxKVxuRFNQLkhJR0hfU0hFTEYgPSA4OyAgICAgICAgIC8vIEgocykgPSBBICogKEEqc14yICsgKHNxcnQoQSkvUSkqcyArIDEpLyhzXjIgKyAoc3FydChBKS9RKSpzICsgQSlcblxuLy8gQmlxdWFkIGZpbHRlciBwYXJhbWV0ZXIgdHlwZXNcbkRTUC5RID0gMTtcbkRTUC5CVyA9IDI7IC8vIFNIQVJFRCB3aXRoIEJBQ0tXQVJEUyBMT09QIE1PREVcbkRTUC5TID0gMztcblxuLy8gRmluZCBSTVMgb2Ygc2lnbmFsXG5EU1AuUk1TID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gIHZhciB0b3RhbCA9IDA7XG4gIFxuICBmb3IgKHZhciBpID0gMCwgbiA9IGJ1ZmZlci5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICB0b3RhbCArPSBidWZmZXJbaV0gKiBidWZmZXJbaV07XG4gIH1cbiAgXG4gIHJldHVybiBNYXRoLnNxcnQodG90YWwgLyBuKTtcbn07XG5cbi8vIEZpbmQgUGVhayBvZiBzaWduYWxcbkRTUC5QZWFrID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gIHZhciBwZWFrID0gMDtcbiAgXG4gIGZvciAodmFyIGkgPSAwLCBuID0gYnVmZmVyLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgIHBlYWsgPSAoTWF0aC5hYnMoYnVmZmVyW2ldKSA+IHBlYWspID8gTWF0aC5hYnMoYnVmZmVyW2ldKSA6IHBlYWs7IFxuICB9XG4gIFxuICByZXR1cm4gcGVhaztcbn07XG5cbi8vIEZvdXJpZXIgVHJhbnNmb3JtIE1vZHVsZSB1c2VkIGJ5IERGVCwgRkZULCBSRkZUXG5mdW5jdGlvbiBGb3VyaWVyVHJhbnNmb3JtKGJ1ZmZlclNpemUsIHNhbXBsZVJhdGUpIHtcbiAgdGhpcy5idWZmZXJTaXplID0gYnVmZmVyU2l6ZTtcbiAgdGhpcy5zYW1wbGVSYXRlID0gc2FtcGxlUmF0ZTtcbiAgdGhpcy5iYW5kd2lkdGggID0gMiAvIGJ1ZmZlclNpemUgKiBzYW1wbGVSYXRlIC8gMjtcblxuICB0aGlzLnNwZWN0cnVtICAgPSBuZXcgRmxvYXQ2NEFycmF5KGJ1ZmZlclNpemUvMik7XG4gIHRoaXMucmVhbCAgICAgICA9IG5ldyBGbG9hdDY0QXJyYXkoYnVmZmVyU2l6ZSk7XG4gIHRoaXMuaW1hZyAgICAgICA9IG5ldyBGbG9hdDY0QXJyYXkoYnVmZmVyU2l6ZSk7XG5cbiAgdGhpcy5wZWFrQmFuZCAgID0gMDtcbiAgdGhpcy5wZWFrICAgICAgID0gMDtcblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgKm1pZGRsZSogZnJlcXVlbmN5IG9mIGFuIEZGVCBiYW5kLlxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gaW5kZXggVGhlIGluZGV4IG9mIHRoZSBGRlQgYmFuZC5cbiAgICpcbiAgICogQHJldHVybnMgVGhlIG1pZGRsZSBmcmVxdWVuY3kgaW4gSHouXG4gICAqL1xuICB0aGlzLmdldEJhbmRGcmVxdWVuY3kgPSBmdW5jdGlvbihpbmRleCkge1xuICAgIHJldHVybiB0aGlzLmJhbmR3aWR0aCAqIGluZGV4ICsgdGhpcy5iYW5kd2lkdGggLyAyO1xuICB9O1xuXG4gIHRoaXMuY2FsY3VsYXRlU3BlY3RydW0gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3BlY3RydW0gID0gdGhpcy5zcGVjdHJ1bSxcbiAgICAgICAgcmVhbCAgICAgID0gdGhpcy5yZWFsLFxuICAgICAgICBpbWFnICAgICAgPSB0aGlzLmltYWcsXG4gICAgICAgIGJTaSAgICAgICA9IDIgLyB0aGlzLmJ1ZmZlclNpemUsXG4gICAgICAgIHNxcnQgICAgICA9IE1hdGguc3FydCxcbiAgICAgICAgcnZhbCwgXG4gICAgICAgIGl2YWwsXG4gICAgICAgIG1hZztcblxuICAgIGZvciAodmFyIGkgPSAwLCBOID0gYnVmZmVyU2l6ZS8yOyBpIDwgTjsgaSsrKSB7XG4gICAgICBydmFsID0gcmVhbFtpXTtcbiAgICAgIGl2YWwgPSBpbWFnW2ldO1xuICAgICAgbWFnID0gYlNpICogc3FydChydmFsICogcnZhbCArIGl2YWwgKiBpdmFsKTtcblxuICAgICAgaWYgKG1hZyA+IHRoaXMucGVhaykge1xuICAgICAgICB0aGlzLnBlYWtCYW5kID0gaTtcbiAgICAgICAgdGhpcy5wZWFrID0gbWFnO1xuICAgICAgfVxuXG4gICAgICBzcGVjdHJ1bVtpXSA9IG1hZztcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogREZUIGlzIGEgY2xhc3MgZm9yIGNhbGN1bGF0aW5nIHRoZSBEaXNjcmV0ZSBGb3VyaWVyIFRyYW5zZm9ybSBvZiBhIHNpZ25hbC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gYnVmZmVyU2l6ZSBUaGUgc2l6ZSBvZiB0aGUgc2FtcGxlIGJ1ZmZlciB0byBiZSBjb21wdXRlZFxuICogQHBhcmFtIHtOdW1iZXJ9IHNhbXBsZVJhdGUgVGhlIHNhbXBsZVJhdGUgb2YgdGhlIGJ1ZmZlciAoZWcuIDQ0MTAwKVxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBERlQoYnVmZmVyU2l6ZSwgc2FtcGxlUmF0ZSkge1xuICBGb3VyaWVyVHJhbnNmb3JtLmNhbGwodGhpcywgYnVmZmVyU2l6ZSwgc2FtcGxlUmF0ZSk7XG5cbiAgdmFyIE4gPSBidWZmZXJTaXplLzIgKiBidWZmZXJTaXplO1xuICB2YXIgVFdPX1BJID0gMiAqIE1hdGguUEk7XG5cbiAgdGhpcy5zaW5UYWJsZSA9IG5ldyBGbG9hdDY0QXJyYXkoTik7XG4gIHRoaXMuY29zVGFibGUgPSBuZXcgRmxvYXQ2NEFycmF5KE4pO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgdGhpcy5zaW5UYWJsZVtpXSA9IE1hdGguc2luKGkgKiBUV09fUEkgLyBidWZmZXJTaXplKTtcbiAgICB0aGlzLmNvc1RhYmxlW2ldID0gTWF0aC5jb3MoaSAqIFRXT19QSSAvIGJ1ZmZlclNpemUpO1xuICB9XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYSBmb3J3YXJkIHRyYW5zZm9ybSBvbiB0aGUgc2FtcGxlIGJ1ZmZlci5cbiAqIENvbnZlcnRzIGEgdGltZSBkb21haW4gc2lnbmFsIHRvIGZyZXF1ZW5jeSBkb21haW4gc3BlY3RyYS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBidWZmZXIgVGhlIHNhbXBsZSBidWZmZXJcbiAqXG4gKiBAcmV0dXJucyBUaGUgZnJlcXVlbmN5IHNwZWN0cnVtIGFycmF5XG4gKi9cbkRGVC5wcm90b3R5cGUuZm9yd2FyZCA9IGZ1bmN0aW9uKGJ1ZmZlcikge1xuICB2YXIgcmVhbCA9IHRoaXMucmVhbCwgXG4gICAgICBpbWFnID0gdGhpcy5pbWFnLFxuICAgICAgcnZhbCxcbiAgICAgIGl2YWw7XG5cbiAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmJ1ZmZlclNpemUvMjsgaysrKSB7XG4gICAgcnZhbCA9IDAuMDtcbiAgICBpdmFsID0gMC4wO1xuXG4gICAgZm9yICh2YXIgbiA9IDA7IG4gPCBidWZmZXIubGVuZ3RoOyBuKyspIHtcbiAgICAgIHJ2YWwgKz0gdGhpcy5jb3NUYWJsZVtrKm5dICogYnVmZmVyW25dO1xuICAgICAgaXZhbCArPSB0aGlzLnNpblRhYmxlW2sqbl0gKiBidWZmZXJbbl07XG4gICAgfVxuXG4gICAgcmVhbFtrXSA9IHJ2YWw7XG4gICAgaW1hZ1trXSA9IGl2YWw7XG4gIH1cblxuICByZXR1cm4gdGhpcy5jYWxjdWxhdGVTcGVjdHJ1bSgpO1xufTtcblxuXG4vKipcbiAqIEZGVCBpcyBhIGNsYXNzIGZvciBjYWxjdWxhdGluZyB0aGUgRGlzY3JldGUgRm91cmllciBUcmFuc2Zvcm0gb2YgYSBzaWduYWxcbiAqIHdpdGggdGhlIEZhc3QgRm91cmllciBUcmFuc2Zvcm0gYWxnb3JpdGhtLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBidWZmZXJTaXplIFRoZSBzaXplIG9mIHRoZSBzYW1wbGUgYnVmZmVyIHRvIGJlIGNvbXB1dGVkLiBNdXN0IGJlIHBvd2VyIG9mIDJcbiAqIEBwYXJhbSB7TnVtYmVyfSBzYW1wbGVSYXRlIFRoZSBzYW1wbGVSYXRlIG9mIHRoZSBidWZmZXIgKGVnLiA0NDEwMClcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gRkZUKGJ1ZmZlclNpemUsIHNhbXBsZVJhdGUpIHtcbiAgRm91cmllclRyYW5zZm9ybS5jYWxsKHRoaXMsIGJ1ZmZlclNpemUsIHNhbXBsZVJhdGUpO1xuICAgXG4gIHRoaXMucmV2ZXJzZVRhYmxlID0gbmV3IFVpbnQzMkFycmF5KGJ1ZmZlclNpemUpO1xuXG4gIHZhciBsaW1pdCA9IDE7XG4gIHZhciBiaXQgPSBidWZmZXJTaXplID4+IDE7XG5cbiAgdmFyIGk7XG5cbiAgd2hpbGUgKGxpbWl0IDwgYnVmZmVyU2l6ZSkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBsaW1pdDsgaSsrKSB7XG4gICAgICB0aGlzLnJldmVyc2VUYWJsZVtpICsgbGltaXRdID0gdGhpcy5yZXZlcnNlVGFibGVbaV0gKyBiaXQ7XG4gICAgfVxuXG4gICAgbGltaXQgPSBsaW1pdCA8PCAxO1xuICAgIGJpdCA9IGJpdCA+PiAxO1xuICB9XG5cbiAgdGhpcy5zaW5UYWJsZSA9IG5ldyBGbG9hdDY0QXJyYXkoYnVmZmVyU2l6ZSk7XG4gIHRoaXMuY29zVGFibGUgPSBuZXcgRmxvYXQ2NEFycmF5KGJ1ZmZlclNpemUpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBidWZmZXJTaXplOyBpKyspIHtcbiAgICB0aGlzLnNpblRhYmxlW2ldID0gTWF0aC5zaW4oLU1hdGguUEkvaSk7XG4gICAgdGhpcy5jb3NUYWJsZVtpXSA9IE1hdGguY29zKC1NYXRoLlBJL2kpO1xuICB9XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYSBmb3J3YXJkIHRyYW5zZm9ybSBvbiB0aGUgc2FtcGxlIGJ1ZmZlci5cbiAqIENvbnZlcnRzIGEgdGltZSBkb21haW4gc2lnbmFsIHRvIGZyZXF1ZW5jeSBkb21haW4gc3BlY3RyYS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBidWZmZXIgVGhlIHNhbXBsZSBidWZmZXIuIEJ1ZmZlciBMZW5ndGggbXVzdCBiZSBwb3dlciBvZiAyXG4gKlxuICogQHJldHVybnMgVGhlIGZyZXF1ZW5jeSBzcGVjdHJ1bSBhcnJheVxuICovXG5GRlQucHJvdG90eXBlLmZvcndhcmQgPSBmdW5jdGlvbihidWZmZXIpIHtcbiAgLy8gTG9jYWxseSBzY29wZSB2YXJpYWJsZXMgZm9yIHNwZWVkIHVwXG4gIHZhciBidWZmZXJTaXplICAgICAgPSB0aGlzLmJ1ZmZlclNpemUsXG4gICAgICBjb3NUYWJsZSAgICAgICAgPSB0aGlzLmNvc1RhYmxlLFxuICAgICAgc2luVGFibGUgICAgICAgID0gdGhpcy5zaW5UYWJsZSxcbiAgICAgIHJldmVyc2VUYWJsZSAgICA9IHRoaXMucmV2ZXJzZVRhYmxlLFxuICAgICAgcmVhbCAgICAgICAgICAgID0gdGhpcy5yZWFsLFxuICAgICAgaW1hZyAgICAgICAgICAgID0gdGhpcy5pbWFnLFxuICAgICAgc3BlY3RydW0gICAgICAgID0gdGhpcy5zcGVjdHJ1bTtcblxuICB2YXIgayA9IE1hdGguZmxvb3IoTWF0aC5sb2coYnVmZmVyU2l6ZSkgLyBNYXRoLkxOMik7XG5cbiAgaWYgKE1hdGgucG93KDIsIGspICE9PSBidWZmZXJTaXplKSB7IHRocm93IFwiSW52YWxpZCBidWZmZXIgc2l6ZSwgbXVzdCBiZSBhIHBvd2VyIG9mIDIuXCI7IH1cbiAgaWYgKGJ1ZmZlclNpemUgIT09IGJ1ZmZlci5sZW5ndGgpICB7IHRocm93IFwiU3VwcGxpZWQgYnVmZmVyIGlzIG5vdCB0aGUgc2FtZSBzaXplIGFzIGRlZmluZWQgRkZULiBGRlQgU2l6ZTogXCIgKyBidWZmZXJTaXplICsgXCIgQnVmZmVyIFNpemU6IFwiICsgYnVmZmVyLmxlbmd0aDsgfVxuXG4gIHZhciBoYWxmU2l6ZSA9IDEsXG4gICAgICBwaGFzZVNoaWZ0U3RlcFJlYWwsXG4gICAgICBwaGFzZVNoaWZ0U3RlcEltYWcsXG4gICAgICBjdXJyZW50UGhhc2VTaGlmdFJlYWwsXG4gICAgICBjdXJyZW50UGhhc2VTaGlmdEltYWcsXG4gICAgICBvZmYsXG4gICAgICB0cixcbiAgICAgIHRpLFxuICAgICAgdG1wUmVhbCxcbiAgICAgIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IGJ1ZmZlclNpemU7IGkrKykge1xuICAgIHJlYWxbaV0gPSBidWZmZXJbcmV2ZXJzZVRhYmxlW2ldXTtcbiAgICBpbWFnW2ldID0gMDtcbiAgfVxuXG4gIHdoaWxlIChoYWxmU2l6ZSA8IGJ1ZmZlclNpemUpIHtcbiAgICAvL3BoYXNlU2hpZnRTdGVwUmVhbCA9IE1hdGguY29zKC1NYXRoLlBJL2hhbGZTaXplKTtcbiAgICAvL3BoYXNlU2hpZnRTdGVwSW1hZyA9IE1hdGguc2luKC1NYXRoLlBJL2hhbGZTaXplKTtcbiAgICBwaGFzZVNoaWZ0U3RlcFJlYWwgPSBjb3NUYWJsZVtoYWxmU2l6ZV07XG4gICAgcGhhc2VTaGlmdFN0ZXBJbWFnID0gc2luVGFibGVbaGFsZlNpemVdO1xuICAgIFxuICAgIGN1cnJlbnRQaGFzZVNoaWZ0UmVhbCA9IDE7XG4gICAgY3VycmVudFBoYXNlU2hpZnRJbWFnID0gMDtcblxuICAgIGZvciAodmFyIGZmdFN0ZXAgPSAwOyBmZnRTdGVwIDwgaGFsZlNpemU7IGZmdFN0ZXArKykge1xuICAgICAgaSA9IGZmdFN0ZXA7XG5cbiAgICAgIHdoaWxlIChpIDwgYnVmZmVyU2l6ZSkge1xuICAgICAgICBvZmYgPSBpICsgaGFsZlNpemU7XG4gICAgICAgIHRyID0gKGN1cnJlbnRQaGFzZVNoaWZ0UmVhbCAqIHJlYWxbb2ZmXSkgLSAoY3VycmVudFBoYXNlU2hpZnRJbWFnICogaW1hZ1tvZmZdKTtcbiAgICAgICAgdGkgPSAoY3VycmVudFBoYXNlU2hpZnRSZWFsICogaW1hZ1tvZmZdKSArIChjdXJyZW50UGhhc2VTaGlmdEltYWcgKiByZWFsW29mZl0pO1xuXG4gICAgICAgIHJlYWxbb2ZmXSA9IHJlYWxbaV0gLSB0cjtcbiAgICAgICAgaW1hZ1tvZmZdID0gaW1hZ1tpXSAtIHRpO1xuICAgICAgICByZWFsW2ldICs9IHRyO1xuICAgICAgICBpbWFnW2ldICs9IHRpO1xuXG4gICAgICAgIGkgKz0gaGFsZlNpemUgPDwgMTtcbiAgICAgIH1cblxuICAgICAgdG1wUmVhbCA9IGN1cnJlbnRQaGFzZVNoaWZ0UmVhbDtcbiAgICAgIGN1cnJlbnRQaGFzZVNoaWZ0UmVhbCA9ICh0bXBSZWFsICogcGhhc2VTaGlmdFN0ZXBSZWFsKSAtIChjdXJyZW50UGhhc2VTaGlmdEltYWcgKiBwaGFzZVNoaWZ0U3RlcEltYWcpO1xuICAgICAgY3VycmVudFBoYXNlU2hpZnRJbWFnID0gKHRtcFJlYWwgKiBwaGFzZVNoaWZ0U3RlcEltYWcpICsgKGN1cnJlbnRQaGFzZVNoaWZ0SW1hZyAqIHBoYXNlU2hpZnRTdGVwUmVhbCk7XG4gICAgfVxuXG4gICAgaGFsZlNpemUgPSBoYWxmU2l6ZSA8PCAxO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuY2FsY3VsYXRlU3BlY3RydW0oKTtcbn07XG5cbkZGVC5wcm90b3R5cGUuaW52ZXJzZSA9IGZ1bmN0aW9uKHJlYWwsIGltYWcpIHtcbiAgLy8gTG9jYWxseSBzY29wZSB2YXJpYWJsZXMgZm9yIHNwZWVkIHVwXG4gIHZhciBidWZmZXJTaXplICAgICAgPSB0aGlzLmJ1ZmZlclNpemUsXG4gICAgICBjb3NUYWJsZSAgICAgICAgPSB0aGlzLmNvc1RhYmxlLFxuICAgICAgc2luVGFibGUgICAgICAgID0gdGhpcy5zaW5UYWJsZSxcbiAgICAgIHJldmVyc2VUYWJsZSAgICA9IHRoaXMucmV2ZXJzZVRhYmxlLFxuICAgICAgc3BlY3RydW0gICAgICAgID0gdGhpcy5zcGVjdHJ1bTtcbiAgICAgXG4gICAgICByZWFsID0gcmVhbCB8fCB0aGlzLnJlYWw7XG4gICAgICBpbWFnID0gaW1hZyB8fCB0aGlzLmltYWc7XG5cbiAgdmFyIGhhbGZTaXplID0gMSxcbiAgICAgIHBoYXNlU2hpZnRTdGVwUmVhbCxcbiAgICAgIHBoYXNlU2hpZnRTdGVwSW1hZyxcbiAgICAgIGN1cnJlbnRQaGFzZVNoaWZ0UmVhbCxcbiAgICAgIGN1cnJlbnRQaGFzZVNoaWZ0SW1hZyxcbiAgICAgIG9mZixcbiAgICAgIHRyLFxuICAgICAgdGksXG4gICAgICB0bXBSZWFsLFxuICAgICAgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgYnVmZmVyU2l6ZTsgaSsrKSB7XG4gICAgaW1hZ1tpXSAqPSAtMTtcbiAgfVxuXG4gIHZhciByZXZSZWFsID0gbmV3IEZsb2F0NjRBcnJheShidWZmZXJTaXplKTtcbiAgdmFyIHJldkltYWcgPSBuZXcgRmxvYXQ2NEFycmF5KGJ1ZmZlclNpemUpO1xuIFxuICBmb3IgKGkgPSAwOyBpIDwgcmVhbC5sZW5ndGg7IGkrKykge1xuICAgIHJldlJlYWxbaV0gPSByZWFsW3JldmVyc2VUYWJsZVtpXV07XG4gICAgcmV2SW1hZ1tpXSA9IGltYWdbcmV2ZXJzZVRhYmxlW2ldXTtcbiAgfVxuIFxuICByZWFsID0gcmV2UmVhbDtcbiAgaW1hZyA9IHJldkltYWc7XG5cbiAgd2hpbGUgKGhhbGZTaXplIDwgYnVmZmVyU2l6ZSkge1xuICAgIHBoYXNlU2hpZnRTdGVwUmVhbCA9IGNvc1RhYmxlW2hhbGZTaXplXTtcbiAgICBwaGFzZVNoaWZ0U3RlcEltYWcgPSBzaW5UYWJsZVtoYWxmU2l6ZV07XG4gICAgY3VycmVudFBoYXNlU2hpZnRSZWFsID0gMTtcbiAgICBjdXJyZW50UGhhc2VTaGlmdEltYWcgPSAwO1xuXG4gICAgZm9yICh2YXIgZmZ0U3RlcCA9IDA7IGZmdFN0ZXAgPCBoYWxmU2l6ZTsgZmZ0U3RlcCsrKSB7XG4gICAgICBpID0gZmZ0U3RlcDtcblxuICAgICAgd2hpbGUgKGkgPCBidWZmZXJTaXplKSB7XG4gICAgICAgIG9mZiA9IGkgKyBoYWxmU2l6ZTtcbiAgICAgICAgdHIgPSAoY3VycmVudFBoYXNlU2hpZnRSZWFsICogcmVhbFtvZmZdKSAtIChjdXJyZW50UGhhc2VTaGlmdEltYWcgKiBpbWFnW29mZl0pO1xuICAgICAgICB0aSA9IChjdXJyZW50UGhhc2VTaGlmdFJlYWwgKiBpbWFnW29mZl0pICsgKGN1cnJlbnRQaGFzZVNoaWZ0SW1hZyAqIHJlYWxbb2ZmXSk7XG5cbiAgICAgICAgcmVhbFtvZmZdID0gcmVhbFtpXSAtIHRyO1xuICAgICAgICBpbWFnW29mZl0gPSBpbWFnW2ldIC0gdGk7XG4gICAgICAgIHJlYWxbaV0gKz0gdHI7XG4gICAgICAgIGltYWdbaV0gKz0gdGk7XG5cbiAgICAgICAgaSArPSBoYWxmU2l6ZSA8PCAxO1xuICAgICAgfVxuXG4gICAgICB0bXBSZWFsID0gY3VycmVudFBoYXNlU2hpZnRSZWFsO1xuICAgICAgY3VycmVudFBoYXNlU2hpZnRSZWFsID0gKHRtcFJlYWwgKiBwaGFzZVNoaWZ0U3RlcFJlYWwpIC0gKGN1cnJlbnRQaGFzZVNoaWZ0SW1hZyAqIHBoYXNlU2hpZnRTdGVwSW1hZyk7XG4gICAgICBjdXJyZW50UGhhc2VTaGlmdEltYWcgPSAodG1wUmVhbCAqIHBoYXNlU2hpZnRTdGVwSW1hZykgKyAoY3VycmVudFBoYXNlU2hpZnRJbWFnICogcGhhc2VTaGlmdFN0ZXBSZWFsKTtcbiAgICB9XG5cbiAgICBoYWxmU2l6ZSA9IGhhbGZTaXplIDw8IDE7XG4gIH1cblxuICB2YXIgYnVmZmVyID0gbmV3IEZsb2F0NjRBcnJheShidWZmZXJTaXplKTsgLy8gdGhpcyBzaG91bGQgYmUgcmV1c2VkIGluc3RlYWRcbiAgZm9yIChpID0gMDsgaSA8IGJ1ZmZlclNpemU7IGkrKykge1xuICAgIGJ1ZmZlcltpXSA9IHJlYWxbaV0gLyBidWZmZXJTaXplO1xuICB9XG5cbiAgcmV0dXJuIGJ1ZmZlcjtcbn07XG5cbi8qKlxuICogUkZGVCBpcyBhIGNsYXNzIGZvciBjYWxjdWxhdGluZyB0aGUgRGlzY3JldGUgRm91cmllciBUcmFuc2Zvcm0gb2YgYSBzaWduYWxcbiAqIHdpdGggdGhlIEZhc3QgRm91cmllciBUcmFuc2Zvcm0gYWxnb3JpdGhtLlxuICpcbiAqIFRoaXMgbWV0aG9kIGN1cnJlbnRseSBvbmx5IGNvbnRhaW5zIGEgZm9yd2FyZCB0cmFuc2Zvcm0gYnV0IGlzIGhpZ2hseSBvcHRpbWl6ZWQuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGJ1ZmZlclNpemUgVGhlIHNpemUgb2YgdGhlIHNhbXBsZSBidWZmZXIgdG8gYmUgY29tcHV0ZWQuIE11c3QgYmUgcG93ZXIgb2YgMlxuICogQHBhcmFtIHtOdW1iZXJ9IHNhbXBsZVJhdGUgVGhlIHNhbXBsZVJhdGUgb2YgdGhlIGJ1ZmZlciAoZWcuIDQ0MTAwKVxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5cbi8vIGxvb2t1cCB0YWJsZXMgZG9uJ3QgcmVhbGx5IGdhaW4gdXMgYW55IHNwZWVkLCBidXQgdGhleSBkbyBpbmNyZWFzZVxuLy8gY2FjaGUgZm9vdHByaW50LCBzbyBkb24ndCB1c2UgdGhlbSBpbiBoZXJlXG5cbi8vIGFsc28gd2UgZG9uJ3QgdXNlIHNlcGVhcmF0ZSBhcnJheXMgZm9yIHJlYWwvaW1hZ2luYXJ5IHBhcnRzXG5cbi8vIHRoaXMgb25lIGEgbGl0dGxlIG1vcmUgdGhhbiB0d2ljZSBhcyBmYXN0IGFzIHRoZSBvbmUgaW4gRkZUXG4vLyBob3dldmVyIEkgb25seSBkaWQgdGhlIGZvcndhcmQgdHJhbnNmb3JtXG5cbi8vIHRoZSByZXN0IG9mIHRoaXMgd2FzIHRyYW5zbGF0ZWQgZnJvbSBDLCBzZWUgaHR0cDovL3d3dy5qamouZGUvZnh0L1xuLy8gdGhpcyBpcyB0aGUgcmVhbCBzcGxpdCByYWRpeCBGRlRcblxuZnVuY3Rpb24gUkZGVChidWZmZXJTaXplLCBzYW1wbGVSYXRlKSB7XG4gIEZvdXJpZXJUcmFuc2Zvcm0uY2FsbCh0aGlzLCBidWZmZXJTaXplLCBzYW1wbGVSYXRlKTtcblxuICB0aGlzLnRyYW5zID0gbmV3IEZsb2F0NjRBcnJheShidWZmZXJTaXplKTtcblxuICB0aGlzLnJldmVyc2VUYWJsZSA9IG5ldyBVaW50MzJBcnJheShidWZmZXJTaXplKTtcblxuICAvLyBkb24ndCB1c2UgYSBsb29rdXAgdGFibGUgdG8gZG8gdGhlIHBlcm11dGUsIHVzZSB0aGlzIGluc3RlYWRcbiAgdGhpcy5yZXZlcnNlQmluUGVybXV0ZSA9IGZ1bmN0aW9uIChkZXN0LCBzb3VyY2UpIHtcbiAgICB2YXIgYnVmZmVyU2l6ZSAgPSB0aGlzLmJ1ZmZlclNpemUsIFxuICAgICAgICBoYWxmU2l6ZSAgICA9IGJ1ZmZlclNpemUgPj4+IDEsIFxuICAgICAgICBubTEgICAgICAgICA9IGJ1ZmZlclNpemUgLSAxLCBcbiAgICAgICAgaSA9IDEsIHIgPSAwLCBoO1xuXG4gICAgZGVzdFswXSA9IHNvdXJjZVswXTtcblxuICAgIGRvIHtcbiAgICAgIHIgKz0gaGFsZlNpemU7XG4gICAgICBkZXN0W2ldID0gc291cmNlW3JdO1xuICAgICAgZGVzdFtyXSA9IHNvdXJjZVtpXTtcbiAgICAgIFxuICAgICAgaSsrO1xuXG4gICAgICBoID0gaGFsZlNpemUgPDwgMTtcbiAgICAgIHdoaWxlIChoID0gaCA+PiAxLCAhKChyIF49IGgpICYgaCkpO1xuXG4gICAgICBpZiAociA+PSBpKSB7IFxuICAgICAgICBkZXN0W2ldICAgICA9IHNvdXJjZVtyXTsgXG4gICAgICAgIGRlc3Rbcl0gICAgID0gc291cmNlW2ldO1xuXG4gICAgICAgIGRlc3Rbbm0xLWldID0gc291cmNlW25tMS1yXTsgXG4gICAgICAgIGRlc3Rbbm0xLXJdID0gc291cmNlW25tMS1pXTtcbiAgICAgIH1cbiAgICAgIGkrKztcbiAgICB9IHdoaWxlIChpIDwgaGFsZlNpemUpO1xuICAgIGRlc3Rbbm0xXSA9IHNvdXJjZVtubTFdO1xuICB9O1xuXG4gIHRoaXMuZ2VuZXJhdGVSZXZlcnNlVGFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGJ1ZmZlclNpemUgID0gdGhpcy5idWZmZXJTaXplLCBcbiAgICAgICAgaGFsZlNpemUgICAgPSBidWZmZXJTaXplID4+PiAxLCBcbiAgICAgICAgbm0xICAgICAgICAgPSBidWZmZXJTaXplIC0gMSwgXG4gICAgICAgIGkgPSAxLCByID0gMCwgaDtcblxuICAgIHRoaXMucmV2ZXJzZVRhYmxlWzBdID0gMDtcblxuICAgIGRvIHtcbiAgICAgIHIgKz0gaGFsZlNpemU7XG4gICAgICBcbiAgICAgIHRoaXMucmV2ZXJzZVRhYmxlW2ldID0gcjtcbiAgICAgIHRoaXMucmV2ZXJzZVRhYmxlW3JdID0gaTtcblxuICAgICAgaSsrO1xuXG4gICAgICBoID0gaGFsZlNpemUgPDwgMTtcbiAgICAgIHdoaWxlIChoID0gaCA+PiAxLCAhKChyIF49IGgpICYgaCkpO1xuXG4gICAgICBpZiAociA+PSBpKSB7IFxuICAgICAgICB0aGlzLnJldmVyc2VUYWJsZVtpXSA9IHI7XG4gICAgICAgIHRoaXMucmV2ZXJzZVRhYmxlW3JdID0gaTtcblxuICAgICAgICB0aGlzLnJldmVyc2VUYWJsZVtubTEtaV0gPSBubTEtcjtcbiAgICAgICAgdGhpcy5yZXZlcnNlVGFibGVbbm0xLXJdID0gbm0xLWk7XG4gICAgICB9XG4gICAgICBpKys7XG4gICAgfSB3aGlsZSAoaSA8IGhhbGZTaXplKTtcblxuICAgIHRoaXMucmV2ZXJzZVRhYmxlW25tMV0gPSBubTE7XG4gIH07XG5cbiAgdGhpcy5nZW5lcmF0ZVJldmVyc2VUYWJsZSgpO1xufVxuXG5cbi8vIE9yZGVyaW5nIG9mIG91dHB1dDpcbi8vXG4vLyB0cmFuc1swXSAgICAgPSByZVswXSAoPT16ZXJvIGZyZXF1ZW5jeSwgcHVyZWx5IHJlYWwpXG4vLyB0cmFuc1sxXSAgICAgPSByZVsxXVxuLy8gICAgICAgICAgICAgLi4uXG4vLyB0cmFuc1tuLzItMV0gPSByZVtuLzItMV1cbi8vIHRyYW5zW24vMl0gICA9IHJlW24vMl0gICAgKD09bnlxdWlzdCBmcmVxdWVuY3ksIHB1cmVseSByZWFsKVxuLy9cbi8vIHRyYW5zW24vMisxXSA9IGltW24vMi0xXVxuLy8gdHJhbnNbbi8yKzJdID0gaW1bbi8yLTJdXG4vLyAgICAgICAgICAgICAuLi5cbi8vIHRyYW5zW24tMV0gICA9IGltWzFdIFxuXG5SRkZULnByb3RvdHlwZS5mb3J3YXJkID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gIHZhciBuICAgICAgICAgPSB0aGlzLmJ1ZmZlclNpemUsIFxuICAgICAgc3BlY3RydW0gID0gdGhpcy5zcGVjdHJ1bSxcbiAgICAgIHggICAgICAgICA9IHRoaXMudHJhbnMsIFxuICAgICAgVFdPX1BJICAgID0gMipNYXRoLlBJLFxuICAgICAgc3FydCAgICAgID0gTWF0aC5zcXJ0LFxuICAgICAgaSAgICAgICAgID0gbiA+Pj4gMSxcbiAgICAgIGJTaSAgICAgICA9IDIgLyBuLFxuICAgICAgbjIsIG40LCBuOCwgbm4sIFxuICAgICAgdDEsIHQyLCB0MywgdDQsIFxuICAgICAgaTEsIGkyLCBpMywgaTQsIGk1LCBpNiwgaTcsIGk4LCBcbiAgICAgIHN0MSwgY2MxLCBzczEsIGNjMywgc3MzLFxuICAgICAgZSwgXG4gICAgICBhLFxuICAgICAgcnZhbCwgaXZhbCwgbWFnOyBcblxuICB0aGlzLnJldmVyc2VCaW5QZXJtdXRlKHgsIGJ1ZmZlcik7XG5cbiAgLypcbiAgdmFyIHJldmVyc2VUYWJsZSA9IHRoaXMucmV2ZXJzZVRhYmxlO1xuXG4gIGZvciAodmFyIGsgPSAwLCBsZW4gPSByZXZlcnNlVGFibGUubGVuZ3RoOyBrIDwgbGVuOyBrKyspIHtcbiAgICB4W2tdID0gYnVmZmVyW3JldmVyc2VUYWJsZVtrXV07XG4gIH1cbiAgKi9cblxuICBmb3IgKHZhciBpeCA9IDAsIGlkID0gNDsgaXggPCBuOyBpZCAqPSA0KSB7XG4gICAgZm9yICh2YXIgaTAgPSBpeDsgaTAgPCBuOyBpMCArPSBpZCkge1xuICAgICAgLy9zdW1kaWZmKHhbaTBdLCB4W2kwKzFdKTsgLy8ge2EsIGJ9ICA8LS18IHthK2IsIGEtYn1cbiAgICAgIHN0MSA9IHhbaTBdIC0geFtpMCsxXTtcbiAgICAgIHhbaTBdICs9IHhbaTArMV07XG4gICAgICB4W2kwKzFdID0gc3QxO1xuICAgIH0gXG4gICAgaXggPSAyKihpZC0xKTtcbiAgfVxuXG4gIG4yID0gMjtcbiAgbm4gPSBuID4+PiAxO1xuXG4gIHdoaWxlKChubiA9IG5uID4+PiAxKSkge1xuICAgIGl4ID0gMDtcbiAgICBuMiA9IG4yIDw8IDE7XG4gICAgaWQgPSBuMiA8PCAxO1xuICAgIG40ID0gbjIgPj4+IDI7XG4gICAgbjggPSBuMiA+Pj4gMztcbiAgICBkbyB7XG4gICAgICBpZihuNCAhPT0gMSkge1xuICAgICAgICBmb3IoaTAgPSBpeDsgaTAgPCBuOyBpMCArPSBpZCkge1xuICAgICAgICAgIGkxID0gaTA7XG4gICAgICAgICAgaTIgPSBpMSArIG40O1xuICAgICAgICAgIGkzID0gaTIgKyBuNDtcbiAgICAgICAgICBpNCA9IGkzICsgbjQ7XG4gICAgIFxuICAgICAgICAgIC8vZGlmZnN1bTNfcih4W2kzXSwgeFtpNF0sIHQxKTsgLy8ge2EsIGIsIHN9IDwtLXwge2EsIGItYSwgYStifVxuICAgICAgICAgIHQxID0geFtpM10gKyB4W2k0XTtcbiAgICAgICAgICB4W2k0XSAtPSB4W2kzXTtcbiAgICAgICAgICAvL3N1bWRpZmYzKHhbaTFdLCB0MSwgeFtpM10pOyAgIC8vIHthLCBiLCBkfSA8LS18IHthK2IsIGIsIGEtYn1cbiAgICAgICAgICB4W2kzXSA9IHhbaTFdIC0gdDE7IFxuICAgICAgICAgIHhbaTFdICs9IHQxO1xuICAgICBcbiAgICAgICAgICBpMSArPSBuODtcbiAgICAgICAgICBpMiArPSBuODtcbiAgICAgICAgICBpMyArPSBuODtcbiAgICAgICAgICBpNCArPSBuODtcbiAgICAgICAgIFxuICAgICAgICAgIC8vc3VtZGlmZih4W2kzXSwgeFtpNF0sIHQxLCB0Mik7IC8vIHtzLCBkfSAgPC0tfCB7YStiLCBhLWJ9XG4gICAgICAgICAgdDEgPSB4W2kzXSArIHhbaTRdO1xuICAgICAgICAgIHQyID0geFtpM10gLSB4W2k0XTtcbiAgICAgICAgIFxuICAgICAgICAgIHQxID0gLXQxICogTWF0aC5TUVJUMV8yO1xuICAgICAgICAgIHQyICo9IE1hdGguU1FSVDFfMjtcbiAgICAgXG4gICAgICAgICAgLy8gc3VtZGlmZih0MSwgeFtpMl0sIHhbaTRdLCB4W2kzXSk7IC8vIHtzLCBkfSAgPC0tfCB7YStiLCBhLWJ9XG4gICAgICAgICAgc3QxID0geFtpMl07XG4gICAgICAgICAgeFtpNF0gPSB0MSArIHN0MTsgXG4gICAgICAgICAgeFtpM10gPSB0MSAtIHN0MTtcbiAgICAgICAgICBcbiAgICAgICAgICAvL3N1bWRpZmYzKHhbaTFdLCB0MiwgeFtpMl0pOyAvLyB7YSwgYiwgZH0gPC0tfCB7YStiLCBiLCBhLWJ9XG4gICAgICAgICAgeFtpMl0gPSB4W2kxXSAtIHQyO1xuICAgICAgICAgIHhbaTFdICs9IHQyO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IoaTAgPSBpeDsgaTAgPCBuOyBpMCArPSBpZCkge1xuICAgICAgICAgIGkxID0gaTA7XG4gICAgICAgICAgaTIgPSBpMSArIG40O1xuICAgICAgICAgIGkzID0gaTIgKyBuNDtcbiAgICAgICAgICBpNCA9IGkzICsgbjQ7XG4gICAgIFxuICAgICAgICAgIC8vZGlmZnN1bTNfcih4W2kzXSwgeFtpNF0sIHQxKTsgLy8ge2EsIGIsIHN9IDwtLXwge2EsIGItYSwgYStifVxuICAgICAgICAgIHQxID0geFtpM10gKyB4W2k0XTsgXG4gICAgICAgICAgeFtpNF0gLT0geFtpM107XG4gICAgICAgICAgXG4gICAgICAgICAgLy9zdW1kaWZmMyh4W2kxXSwgdDEsIHhbaTNdKTsgICAvLyB7YSwgYiwgZH0gPC0tfCB7YStiLCBiLCBhLWJ9XG4gICAgICAgICAgeFtpM10gPSB4W2kxXSAtIHQxOyBcbiAgICAgICAgICB4W2kxXSArPSB0MTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgXG4gICAgICBpeCA9IChpZCA8PCAxKSAtIG4yO1xuICAgICAgaWQgPSBpZCA8PCAyO1xuICAgIH0gd2hpbGUgKGl4IDwgbik7XG4gXG4gICAgZSA9IFRXT19QSSAvIG4yO1xuXG4gICAgZm9yICh2YXIgaiA9IDE7IGogPCBuODsgaisrKSB7XG4gICAgICBhID0gaiAqIGU7XG4gICAgICBzczEgPSBNYXRoLnNpbihhKTtcbiAgICAgIGNjMSA9IE1hdGguY29zKGEpO1xuXG4gICAgICAvL3NzMyA9IHNpbigzKmEpOyBjYzMgPSBjb3MoMyphKTtcbiAgICAgIGNjMyA9IDQqY2MxKihjYzEqY2MxLTAuNzUpO1xuICAgICAgc3MzID0gNCpzczEqKDAuNzUtc3MxKnNzMSk7XG4gICBcbiAgICAgIGl4ID0gMDsgaWQgPSBuMiA8PCAxO1xuICAgICAgZG8ge1xuICAgICAgICBmb3IgKGkwID0gaXg7IGkwIDwgbjsgaTAgKz0gaWQpIHtcbiAgICAgICAgICBpMSA9IGkwICsgajtcbiAgICAgICAgICBpMiA9IGkxICsgbjQ7XG4gICAgICAgICAgaTMgPSBpMiArIG40O1xuICAgICAgICAgIGk0ID0gaTMgKyBuNDtcbiAgICAgICBcbiAgICAgICAgICBpNSA9IGkwICsgbjQgLSBqO1xuICAgICAgICAgIGk2ID0gaTUgKyBuNDtcbiAgICAgICAgICBpNyA9IGk2ICsgbjQ7XG4gICAgICAgICAgaTggPSBpNyArIG40O1xuICAgICAgIFxuICAgICAgICAgIC8vY211bHQoYywgcywgeCwgeSwgJnUsICZ2KVxuICAgICAgICAgIC8vY211bHQoY2MxLCBzczEsIHhbaTddLCB4W2kzXSwgdDIsIHQxKTsgLy8ge3Usdn0gPC0tfCB7eCpjLXkqcywgeCpzK3kqY31cbiAgICAgICAgICB0MiA9IHhbaTddKmNjMSAtIHhbaTNdKnNzMTsgXG4gICAgICAgICAgdDEgPSB4W2k3XSpzczEgKyB4W2kzXSpjYzE7XG4gICAgICAgICAgXG4gICAgICAgICAgLy9jbXVsdChjYzMsIHNzMywgeFtpOF0sIHhbaTRdLCB0NCwgdDMpO1xuICAgICAgICAgIHQ0ID0geFtpOF0qY2MzIC0geFtpNF0qc3MzOyBcbiAgICAgICAgICB0MyA9IHhbaThdKnNzMyArIHhbaTRdKmNjMztcbiAgICAgICBcbiAgICAgICAgICAvL3N1bWRpZmYodDIsIHQ0KTsgICAvLyB7YSwgYn0gPC0tfCB7YStiLCBhLWJ9XG4gICAgICAgICAgc3QxID0gdDIgLSB0NDtcbiAgICAgICAgICB0MiArPSB0NDtcbiAgICAgICAgICB0NCA9IHN0MTtcbiAgICAgICAgICBcbiAgICAgICAgICAvL3N1bWRpZmYodDIsIHhbaTZdLCB4W2k4XSwgeFtpM10pOyAvLyB7cywgZH0gIDwtLXwge2ErYiwgYS1ifVxuICAgICAgICAgIC8vc3QxID0geFtpNl07IHhbaThdID0gdDIgKyBzdDE7IHhbaTNdID0gdDIgLSBzdDE7XG4gICAgICAgICAgeFtpOF0gPSB0MiArIHhbaTZdOyBcbiAgICAgICAgICB4W2kzXSA9IHQyIC0geFtpNl07XG4gICAgICAgICBcbiAgICAgICAgICAvL3N1bWRpZmZfcih0MSwgdDMpOyAvLyB7YSwgYn0gPC0tfCB7YStiLCBiLWF9XG4gICAgICAgICAgc3QxID0gdDMgLSB0MTtcbiAgICAgICAgICB0MSArPSB0MztcbiAgICAgICAgICB0MyA9IHN0MTtcbiAgICAgICAgICBcbiAgICAgICAgICAvL3N1bWRpZmYodDMsIHhbaTJdLCB4W2k0XSwgeFtpN10pOyAvLyB7cywgZH0gIDwtLXwge2ErYiwgYS1ifVxuICAgICAgICAgIC8vc3QxID0geFtpMl07IHhbaTRdID0gdDMgKyBzdDE7IHhbaTddID0gdDMgLSBzdDE7XG4gICAgICAgICAgeFtpNF0gPSB0MyArIHhbaTJdOyBcbiAgICAgICAgICB4W2k3XSA9IHQzIC0geFtpMl07XG4gICAgICAgICBcbiAgICAgICAgICAvL3N1bWRpZmYzKHhbaTFdLCB0MSwgeFtpNl0pOyAgIC8vIHthLCBiLCBkfSA8LS18IHthK2IsIGIsIGEtYn1cbiAgICAgICAgICB4W2k2XSA9IHhbaTFdIC0gdDE7IFxuICAgICAgICAgIHhbaTFdICs9IHQxO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vZGlmZnN1bTNfcih0NCwgeFtpNV0sIHhbaTJdKTsgLy8ge2EsIGIsIHN9IDwtLXwge2EsIGItYSwgYStifVxuICAgICAgICAgIHhbaTJdID0gdDQgKyB4W2k1XTsgXG4gICAgICAgICAgeFtpNV0gLT0gdDQ7XG4gICAgICAgIH1cbiAgICAgXG4gICAgICAgIGl4ID0gKGlkIDw8IDEpIC0gbjI7XG4gICAgICAgIGlkID0gaWQgPDwgMjtcbiAgIFxuICAgICAgfSB3aGlsZSAoaXggPCBuKTtcbiAgICB9XG4gIH1cblxuICB3aGlsZSAoLS1pKSB7XG4gICAgcnZhbCA9IHhbaV07XG4gICAgaXZhbCA9IHhbbi1pLTFdO1xuICAgIG1hZyA9IGJTaSAqIHNxcnQocnZhbCAqIHJ2YWwgKyBpdmFsICogaXZhbCk7XG5cbiAgICBpZiAobWFnID4gdGhpcy5wZWFrKSB7XG4gICAgICB0aGlzLnBlYWtCYW5kID0gaTtcbiAgICAgIHRoaXMucGVhayA9IG1hZztcbiAgICB9XG5cbiAgICBzcGVjdHJ1bVtpXSA9IG1hZztcbiAgfVxuXG4gIHNwZWN0cnVtWzBdID0gYlNpICogeFswXTtcblxuICByZXR1cm4gc3BlY3RydW07XG59O1xuXG5mdW5jdGlvbiBTYW1wbGVyKGZpbGUsIGJ1ZmZlclNpemUsIHNhbXBsZVJhdGUsIHBsYXlTdGFydCwgcGxheUVuZCwgbG9vcFN0YXJ0LCBsb29wRW5kLCBsb29wTW9kZSkge1xuICB0aGlzLmZpbGUgPSBmaWxlO1xuICB0aGlzLmJ1ZmZlclNpemUgPSBidWZmZXJTaXplO1xuICB0aGlzLnNhbXBsZVJhdGUgPSBzYW1wbGVSYXRlO1xuICB0aGlzLnBsYXlTdGFydCAgPSBwbGF5U3RhcnQgfHwgMDsgLy8gMCVcbiAgdGhpcy5wbGF5RW5kICAgID0gcGxheUVuZCAgIHx8IDE7IC8vIDEwMCVcbiAgdGhpcy5sb29wU3RhcnQgID0gbG9vcFN0YXJ0IHx8IDA7XG4gIHRoaXMubG9vcEVuZCAgICA9IGxvb3BFbmQgICB8fCAxO1xuICB0aGlzLmxvb3BNb2RlICAgPSBsb29wTW9kZSAgfHwgRFNQLk9GRjtcbiAgdGhpcy5sb2FkZWQgICAgID0gZmFsc2U7XG4gIHRoaXMuc2FtcGxlcyAgICA9IFtdO1xuICB0aGlzLnNpZ25hbCAgICAgPSBuZXcgRmxvYXQ2NEFycmF5KGJ1ZmZlclNpemUpO1xuICB0aGlzLmZyYW1lQ291bnQgPSAwO1xuICB0aGlzLmVudmVsb3BlICAgPSBudWxsO1xuICB0aGlzLmFtcGxpdHVkZSAgPSAxO1xuICB0aGlzLnJvb3RGcmVxdWVuY3kgPSAxMTA7IC8vIEEyIDExMFxuICB0aGlzLmZyZXF1ZW5jeSAgPSA1NTA7XG4gIHRoaXMuc3RlcCAgICAgICA9IHRoaXMuZnJlcXVlbmN5IC8gdGhpcy5yb290RnJlcXVlbmN5O1xuICB0aGlzLmR1cmF0aW9uICAgPSAwO1xuICB0aGlzLnNhbXBsZXNQcm9jZXNzZWQgPSAwO1xuICB0aGlzLnBsYXloZWFkICAgPSAwO1xuIFxuICB2YXIgYXVkaW8gPSAvKiBuZXcgQXVkaW8oKTsqLyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiQVVESU9cIik7XG4gIHZhciBzZWxmID0gdGhpcztcbiBcbiAgdGhpcy5sb2FkU2FtcGxlcyA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIGJ1ZmZlciA9IERTUC5nZXRDaGFubmVsKERTUC5NSVgsIGV2ZW50LmZyYW1lQnVmZmVyKTtcbiAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBidWZmZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHNlbGYuc2FtcGxlcy5wdXNoKGJ1ZmZlcltpXSk7XG4gICAgfVxuICB9O1xuIFxuICB0aGlzLmxvYWRDb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIGNvbnZlcnQgZmxleGlibGUganMgYXJyYXkgaW50byBhIGZhc3QgdHlwZWQgYXJyYXlcbiAgICBzZWxmLnNhbXBsZXMgPSBuZXcgRmxvYXQ2NEFycmF5KHNlbGYuc2FtcGxlcyk7XG4gICAgc2VsZi5sb2FkZWQgPSB0cnVlO1xuICB9O1xuIFxuICB0aGlzLmxvYWRNZXRhRGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgIHNlbGYuZHVyYXRpb24gPSBhdWRpby5kdXJhdGlvbjtcbiAgfTtcbiBcbiAgYXVkaW8uYWRkRXZlbnRMaXN0ZW5lcihcIk1vekF1ZGlvQXZhaWxhYmxlXCIsIHRoaXMubG9hZFNhbXBsZXMsIGZhbHNlKTtcbiAgYXVkaW8uYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRlZG1ldGFkYXRhXCIsIHRoaXMubG9hZE1ldGFEYXRhLCBmYWxzZSk7XG4gIGF1ZGlvLmFkZEV2ZW50TGlzdGVuZXIoXCJlbmRlZFwiLCB0aGlzLmxvYWRDb21wbGV0ZSwgZmFsc2UpO1xuICBhdWRpby5tdXRlZCA9IHRydWU7XG4gIGF1ZGlvLnNyYyA9IGZpbGU7XG4gIGF1ZGlvLnBsYXkoKTtcbn1cblxuU2FtcGxlci5wcm90b3R5cGUuYXBwbHlFbnZlbG9wZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVudmVsb3BlLnByb2Nlc3ModGhpcy5zaWduYWwpO1xuICByZXR1cm4gdGhpcy5zaWduYWw7XG59O1xuXG5TYW1wbGVyLnByb3RvdHlwZS5nZW5lcmF0ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZnJhbWVPZmZzZXQgPSB0aGlzLmZyYW1lQ291bnQgKiB0aGlzLmJ1ZmZlclNpemU7XG4gXG4gIHZhciBsb29wV2lkdGggPSB0aGlzLnBsYXlFbmQgKiB0aGlzLnNhbXBsZXMubGVuZ3RoIC0gdGhpcy5wbGF5U3RhcnQgKiB0aGlzLnNhbXBsZXMubGVuZ3RoO1xuICB2YXIgcGxheVN0YXJ0U2FtcGxlcyA9IHRoaXMucGxheVN0YXJ0ICogdGhpcy5zYW1wbGVzLmxlbmd0aDsgLy8gaWUgMC41IC0+IDUwJSBvZiB0aGUgbGVuZ3RoXG4gIHZhciBwbGF5RW5kU2FtcGxlcyA9IHRoaXMucGxheUVuZCAqIHRoaXMuc2FtcGxlcy5sZW5ndGg7IC8vIGllIDAuNSAtPiA1MCUgb2YgdGhlIGxlbmd0aFxuICB2YXIgb2Zmc2V0O1xuXG4gIGZvciAoIHZhciBpID0gMDsgaSA8IHRoaXMuYnVmZmVyU2l6ZTsgaSsrICkge1xuICAgIHN3aXRjaCAodGhpcy5sb29wTW9kZSkge1xuICAgICAgY2FzZSBEU1AuT0ZGOlxuICAgICAgICB0aGlzLnBsYXloZWFkID0gTWF0aC5yb3VuZCh0aGlzLnNhbXBsZXNQcm9jZXNzZWQgKiB0aGlzLnN0ZXAgKyBwbGF5U3RhcnRTYW1wbGVzKTtcbiAgICAgICAgaWYgKHRoaXMucGxheWhlYWQgPCAodGhpcy5wbGF5RW5kICogdGhpcy5zYW1wbGVzLmxlbmd0aCkgKSB7XG4gICAgICAgICAgdGhpcy5zaWduYWxbaV0gPSB0aGlzLnNhbXBsZXNbdGhpcy5wbGF5aGVhZF0gKiB0aGlzLmFtcGxpdHVkZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNpZ25hbFtpXSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgIFxuICAgICAgY2FzZSBEU1AuRlc6XG4gICAgICAgIHRoaXMucGxheWhlYWQgPSBNYXRoLnJvdW5kKCh0aGlzLnNhbXBsZXNQcm9jZXNzZWQgKiB0aGlzLnN0ZXApICUgbG9vcFdpZHRoICsgcGxheVN0YXJ0U2FtcGxlcyk7XG4gICAgICAgIGlmICh0aGlzLnBsYXloZWFkIDwgKHRoaXMucGxheUVuZCAqIHRoaXMuc2FtcGxlcy5sZW5ndGgpICkge1xuICAgICAgICAgIHRoaXMuc2lnbmFsW2ldID0gdGhpcy5zYW1wbGVzW3RoaXMucGxheWhlYWRdICogdGhpcy5hbXBsaXR1ZGU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICAgXG4gICAgICBjYXNlIERTUC5CVzpcbiAgICAgICAgdGhpcy5wbGF5aGVhZCA9IHBsYXlFbmRTYW1wbGVzIC0gTWF0aC5yb3VuZCgodGhpcy5zYW1wbGVzUHJvY2Vzc2VkICogdGhpcy5zdGVwKSAlIGxvb3BXaWR0aCk7XG4gICAgICAgIGlmICh0aGlzLnBsYXloZWFkIDwgKHRoaXMucGxheUVuZCAqIHRoaXMuc2FtcGxlcy5sZW5ndGgpICkge1xuICAgICAgICAgIHRoaXMuc2lnbmFsW2ldID0gdGhpcy5zYW1wbGVzW3RoaXMucGxheWhlYWRdICogdGhpcy5hbXBsaXR1ZGU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICAgXG4gICAgICBjYXNlIERTUC5GV0JXOlxuICAgICAgICBpZiAoIE1hdGguZmxvb3IodGhpcy5zYW1wbGVzUHJvY2Vzc2VkICogdGhpcy5zdGVwIC8gbG9vcFdpZHRoKSAlIDIgPT09IDAgKSB7XG4gICAgICAgICAgdGhpcy5wbGF5aGVhZCA9IE1hdGgucm91bmQoKHRoaXMuc2FtcGxlc1Byb2Nlc3NlZCAqIHRoaXMuc3RlcCkgJSBsb29wV2lkdGggKyBwbGF5U3RhcnRTYW1wbGVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnBsYXloZWFkID0gcGxheUVuZFNhbXBsZXMgLSBNYXRoLnJvdW5kKCh0aGlzLnNhbXBsZXNQcm9jZXNzZWQgKiB0aGlzLnN0ZXApICUgbG9vcFdpZHRoKTtcbiAgICAgICAgfSAgXG4gICAgICAgIGlmICh0aGlzLnBsYXloZWFkIDwgKHRoaXMucGxheUVuZCAqIHRoaXMuc2FtcGxlcy5sZW5ndGgpICkge1xuICAgICAgICAgIHRoaXMuc2lnbmFsW2ldID0gdGhpcy5zYW1wbGVzW3RoaXMucGxheWhlYWRdICogdGhpcy5hbXBsaXR1ZGU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuc2FtcGxlc1Byb2Nlc3NlZCsrO1xuICB9XG5cbiAgdGhpcy5mcmFtZUNvdW50Kys7XG5cbiAgcmV0dXJuIHRoaXMuc2lnbmFsO1xufTtcblxuU2FtcGxlci5wcm90b3R5cGUuc2V0RnJlcSA9IGZ1bmN0aW9uKGZyZXF1ZW5jeSkge1xuICAgIHZhciB0b3RhbFByb2Nlc3NlZCA9IHRoaXMuc2FtcGxlc1Byb2Nlc3NlZCAqIHRoaXMuc3RlcDtcbiAgICB0aGlzLmZyZXF1ZW5jeSA9IGZyZXF1ZW5jeTtcbiAgICB0aGlzLnN0ZXAgPSB0aGlzLmZyZXF1ZW5jeSAvIHRoaXMucm9vdEZyZXF1ZW5jeTtcbiAgICB0aGlzLnNhbXBsZXNQcm9jZXNzZWQgPSBNYXRoLnJvdW5kKHRvdGFsUHJvY2Vzc2VkL3RoaXMuc3RlcCk7XG59O1xuXG5TYW1wbGVyLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNhbXBsZXNQcm9jZXNzZWQgPSAwO1xuICB0aGlzLnBsYXloZWFkID0gMDtcbn07XG5cbi8qKlxuICogT3NjaWxsYXRvciBjbGFzcyBmb3IgZ2VuZXJhdGluZyBhbmQgbW9kaWZ5aW5nIHNpZ25hbHNcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gdHlwZSAgICAgICBBIHdhdmVmb3JtIGNvbnN0YW50IChlZy4gRFNQLlNJTkUpXG4gKiBAcGFyYW0ge051bWJlcn0gZnJlcXVlbmN5ICBJbml0aWFsIGZyZXF1ZW5jeSBvZiB0aGUgc2lnbmFsXG4gKiBAcGFyYW0ge051bWJlcn0gYW1wbGl0dWRlICBJbml0aWFsIGFtcGxpdHVkZSBvZiB0aGUgc2lnbmFsXG4gKiBAcGFyYW0ge051bWJlcn0gYnVmZmVyU2l6ZSBTaXplIG9mIHRoZSBzYW1wbGUgYnVmZmVyIHRvIGdlbmVyYXRlXG4gKiBAcGFyYW0ge051bWJlcn0gc2FtcGxlUmF0ZSBUaGUgc2FtcGxlIHJhdGUgb2YgdGhlIHNpZ25hbFxuICpcbiAqIEBjb250cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIE9zY2lsbGF0b3IodHlwZSwgZnJlcXVlbmN5LCBhbXBsaXR1ZGUsIGJ1ZmZlclNpemUsIHNhbXBsZVJhdGUpIHtcbiAgdGhpcy5mcmVxdWVuY3kgID0gZnJlcXVlbmN5O1xuICB0aGlzLmFtcGxpdHVkZSAgPSBhbXBsaXR1ZGU7XG4gIHRoaXMuYnVmZmVyU2l6ZSA9IGJ1ZmZlclNpemU7XG4gIHRoaXMuc2FtcGxlUmF0ZSA9IHNhbXBsZVJhdGU7XG4gIC8vdGhpcy5wdWxzZVdpZHRoID0gcHVsc2VXaWR0aDtcbiAgdGhpcy5mcmFtZUNvdW50ID0gMDtcbiBcbiAgdGhpcy53YXZlVGFibGVMZW5ndGggPSAyMDQ4O1xuXG4gIHRoaXMuY3ljbGVzUGVyU2FtcGxlID0gZnJlcXVlbmN5IC8gc2FtcGxlUmF0ZTtcblxuICB0aGlzLnNpZ25hbCA9IG5ldyBGbG9hdDY0QXJyYXkoYnVmZmVyU2l6ZSk7XG4gIHRoaXMuZW52ZWxvcGUgPSBudWxsO1xuXG4gIHN3aXRjaChwYXJzZUludCh0eXBlLCAxMCkpIHtcbiAgICBjYXNlIERTUC5UUklBTkdMRTpcbiAgICAgIHRoaXMuZnVuYyA9IE9zY2lsbGF0b3IuVHJpYW5nbGU7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgRFNQLlNBVzpcbiAgICAgIHRoaXMuZnVuYyA9IE9zY2lsbGF0b3IuU2F3O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIERTUC5TUVVBUkU6XG4gICAgICB0aGlzLmZ1bmMgPSBPc2NpbGxhdG9yLlNxdWFyZTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICBjYXNlIERTUC5TSU5FOlxuICAgICAgdGhpcy5mdW5jID0gT3NjaWxsYXRvci5TaW5lO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICB0aGlzLmdlbmVyYXRlV2F2ZVRhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgT3NjaWxsYXRvci53YXZlVGFibGVbdGhpcy5mdW5jXSA9IG5ldyBGbG9hdDY0QXJyYXkoMjA0OCk7XG4gICAgdmFyIHdhdmVUYWJsZVRpbWUgPSB0aGlzLndhdmVUYWJsZUxlbmd0aCAvIHRoaXMuc2FtcGxlUmF0ZTtcbiAgICB2YXIgd2F2ZVRhYmxlSHogPSAxIC8gd2F2ZVRhYmxlVGltZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy53YXZlVGFibGVMZW5ndGg7IGkrKykge1xuICAgICAgT3NjaWxsYXRvci53YXZlVGFibGVbdGhpcy5mdW5jXVtpXSA9IHRoaXMuZnVuYyhpICogd2F2ZVRhYmxlSHovdGhpcy5zYW1wbGVSYXRlKTtcbiAgICB9XG4gIH07XG5cbiAgaWYgKCB0eXBlb2YgT3NjaWxsYXRvci53YXZlVGFibGUgPT09ICd1bmRlZmluZWQnICkge1xuICAgIE9zY2lsbGF0b3Iud2F2ZVRhYmxlID0ge307XG4gIH1cblxuICBpZiAoIHR5cGVvZiBPc2NpbGxhdG9yLndhdmVUYWJsZVt0aGlzLmZ1bmNdID09PSAndW5kZWZpbmVkJyApIHtcbiAgICB0aGlzLmdlbmVyYXRlV2F2ZVRhYmxlKCk7XG4gIH1cbiBcbiAgdGhpcy53YXZlVGFibGUgPSBPc2NpbGxhdG9yLndhdmVUYWJsZVt0aGlzLmZ1bmNdO1xufVxuXG4vKipcbiAqIFNldCB0aGUgYW1wbGl0dWRlIG9mIHRoZSBzaWduYWxcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gYW1wbGl0dWRlIFRoZSBhbXBsaXR1ZGUgb2YgdGhlIHNpZ25hbCAoYmV0d2VlbiAwIGFuZCAxKVxuICovXG5Pc2NpbGxhdG9yLnByb3RvdHlwZS5zZXRBbXAgPSBmdW5jdGlvbihhbXBsaXR1ZGUpIHtcbiAgaWYgKGFtcGxpdHVkZSA+PSAwICYmIGFtcGxpdHVkZSA8PSAxKSB7XG4gICAgdGhpcy5hbXBsaXR1ZGUgPSBhbXBsaXR1ZGU7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgXCJBbXBsaXR1ZGUgb3V0IG9mIHJhbmdlICgwLi4xKS5cIjtcbiAgfVxufTtcbiAgXG4vKipcbiAqIFNldCB0aGUgZnJlcXVlbmN5IG9mIHRoZSBzaWduYWxcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gZnJlcXVlbmN5IFRoZSBmcmVxdWVuY3kgb2YgdGhlIHNpZ25hbFxuICovICBcbk9zY2lsbGF0b3IucHJvdG90eXBlLnNldEZyZXEgPSBmdW5jdGlvbihmcmVxdWVuY3kpIHtcbiAgdGhpcy5mcmVxdWVuY3kgPSBmcmVxdWVuY3k7XG4gIHRoaXMuY3ljbGVzUGVyU2FtcGxlID0gZnJlcXVlbmN5IC8gdGhpcy5zYW1wbGVSYXRlO1xufTtcbiAgICAgXG4vLyBBZGQgYW4gb3NjaWxsYXRvclxuT3NjaWxsYXRvci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24ob3NjaWxsYXRvcikge1xuICBmb3IgKCB2YXIgaSA9IDA7IGkgPCB0aGlzLmJ1ZmZlclNpemU7IGkrKyApIHtcbiAgICAvL3RoaXMuc2lnbmFsW2ldICs9IG9zY2lsbGF0b3IudmFsdWVBdChpKTtcbiAgICB0aGlzLnNpZ25hbFtpXSArPSBvc2NpbGxhdG9yLnNpZ25hbFtpXTtcbiAgfVxuIFxuICByZXR1cm4gdGhpcy5zaWduYWw7XG59O1xuICAgICBcbi8vIEFkZCBhIHNpZ25hbCB0byB0aGUgY3VycmVudCBnZW5lcmF0ZWQgb3NjIHNpZ25hbFxuT3NjaWxsYXRvci5wcm90b3R5cGUuYWRkU2lnbmFsID0gZnVuY3Rpb24oc2lnbmFsKSB7XG4gIGZvciAoIHZhciBpID0gMDsgaSA8IHNpZ25hbC5sZW5ndGg7IGkrKyApIHtcbiAgICBpZiAoIGkgPj0gdGhpcy5idWZmZXJTaXplICkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuc2lnbmFsW2ldICs9IHNpZ25hbFtpXTtcbiAgIFxuICAgIC8qXG4gICAgLy8gQ29uc3RyYWluIGFtcGxpdHVkZVxuICAgIGlmICggdGhpcy5zaWduYWxbaV0gPiAxICkge1xuICAgICAgdGhpcy5zaWduYWxbaV0gPSAxO1xuICAgIH0gZWxzZSBpZiAoIHRoaXMuc2lnbmFsW2ldIDwgLTEgKSB7XG4gICAgICB0aGlzLnNpZ25hbFtpXSA9IC0xO1xuICAgIH1cbiAgICAqL1xuICB9XG4gIHJldHVybiB0aGlzLnNpZ25hbDtcbn07XG4gICAgIFxuLy8gQWRkIGFuIGVudmVsb3BlIHRvIHRoZSBvc2NpbGxhdG9yXG5Pc2NpbGxhdG9yLnByb3RvdHlwZS5hZGRFbnZlbG9wZSA9IGZ1bmN0aW9uKGVudmVsb3BlKSB7XG4gIHRoaXMuZW52ZWxvcGUgPSBlbnZlbG9wZTtcbn07XG5cbk9zY2lsbGF0b3IucHJvdG90eXBlLmFwcGx5RW52ZWxvcGUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5lbnZlbG9wZS5wcm9jZXNzKHRoaXMuc2lnbmFsKTtcbn07XG4gICAgIFxuT3NjaWxsYXRvci5wcm90b3R5cGUudmFsdWVBdCA9IGZ1bmN0aW9uKG9mZnNldCkge1xuICByZXR1cm4gdGhpcy53YXZlVGFibGVbb2Zmc2V0ICUgdGhpcy53YXZlVGFibGVMZW5ndGhdO1xufTtcbiAgICAgXG5Pc2NpbGxhdG9yLnByb3RvdHlwZS5nZW5lcmF0ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZnJhbWVPZmZzZXQgPSB0aGlzLmZyYW1lQ291bnQgKiB0aGlzLmJ1ZmZlclNpemU7XG4gIHZhciBzdGVwID0gdGhpcy53YXZlVGFibGVMZW5ndGggKiB0aGlzLmZyZXF1ZW5jeSAvIHRoaXMuc2FtcGxlUmF0ZTtcbiAgdmFyIG9mZnNldDtcblxuICBmb3IgKCB2YXIgaSA9IDA7IGkgPCB0aGlzLmJ1ZmZlclNpemU7IGkrKyApIHtcbiAgICAvL3ZhciBzdGVwID0gKGZyYW1lT2Zmc2V0ICsgaSkgKiB0aGlzLmN5Y2xlc1BlclNhbXBsZSAlIDE7XG4gICAgLy90aGlzLnNpZ25hbFtpXSA9IHRoaXMuZnVuYyhzdGVwKSAqIHRoaXMuYW1wbGl0dWRlO1xuICAgIC8vdGhpcy5zaWduYWxbaV0gPSB0aGlzLnZhbHVlQXQoTWF0aC5yb3VuZCgoZnJhbWVPZmZzZXQgKyBpKSAqIHN0ZXApKSAqIHRoaXMuYW1wbGl0dWRlO1xuICAgIG9mZnNldCA9IE1hdGgucm91bmQoKGZyYW1lT2Zmc2V0ICsgaSkgKiBzdGVwKTtcbiAgICB0aGlzLnNpZ25hbFtpXSA9IHRoaXMud2F2ZVRhYmxlW29mZnNldCAlIHRoaXMud2F2ZVRhYmxlTGVuZ3RoXSAqIHRoaXMuYW1wbGl0dWRlO1xuICB9XG5cbiAgdGhpcy5mcmFtZUNvdW50Kys7XG5cbiAgcmV0dXJuIHRoaXMuc2lnbmFsO1xufTtcblxuT3NjaWxsYXRvci5TaW5lID0gZnVuY3Rpb24oc3RlcCkge1xuICByZXR1cm4gTWF0aC5zaW4oRFNQLlRXT19QSSAqIHN0ZXApO1xufTtcblxuT3NjaWxsYXRvci5TcXVhcmUgPSBmdW5jdGlvbihzdGVwKSB7XG4gIHJldHVybiBzdGVwIDwgMC41ID8gMSA6IC0xO1xufTtcblxuT3NjaWxsYXRvci5TYXcgPSBmdW5jdGlvbihzdGVwKSB7XG4gIHJldHVybiAyICogKHN0ZXAgLSBNYXRoLnJvdW5kKHN0ZXApKTtcbn07XG5cbk9zY2lsbGF0b3IuVHJpYW5nbGUgPSBmdW5jdGlvbihzdGVwKSB7XG4gIHJldHVybiAxIC0gNCAqIE1hdGguYWJzKE1hdGgucm91bmQoc3RlcCkgLSBzdGVwKTtcbn07XG5cbk9zY2lsbGF0b3IuUHVsc2UgPSBmdW5jdGlvbihzdGVwKSB7XG4gIC8vIHN0dWJcbn07XG4gXG5mdW5jdGlvbiBBRFNSKGF0dGFja0xlbmd0aCwgZGVjYXlMZW5ndGgsIHN1c3RhaW5MZXZlbCwgc3VzdGFpbkxlbmd0aCwgcmVsZWFzZUxlbmd0aCwgc2FtcGxlUmF0ZSkge1xuICB0aGlzLnNhbXBsZVJhdGUgPSBzYW1wbGVSYXRlO1xuICAvLyBMZW5ndGggaW4gc2Vjb25kc1xuICB0aGlzLmF0dGFja0xlbmd0aCAgPSBhdHRhY2tMZW5ndGg7XG4gIHRoaXMuZGVjYXlMZW5ndGggICA9IGRlY2F5TGVuZ3RoO1xuICB0aGlzLnN1c3RhaW5MZXZlbCAgPSBzdXN0YWluTGV2ZWw7XG4gIHRoaXMuc3VzdGFpbkxlbmd0aCA9IHN1c3RhaW5MZW5ndGg7XG4gIHRoaXMucmVsZWFzZUxlbmd0aCA9IHJlbGVhc2VMZW5ndGg7XG4gIHRoaXMuc2FtcGxlUmF0ZSAgICA9IHNhbXBsZVJhdGU7XG4gXG4gIC8vIExlbmd0aCBpbiBzYW1wbGVzXG4gIHRoaXMuYXR0YWNrU2FtcGxlcyAgPSBhdHRhY2tMZW5ndGggICogc2FtcGxlUmF0ZTtcbiAgdGhpcy5kZWNheVNhbXBsZXMgICA9IGRlY2F5TGVuZ3RoICAgKiBzYW1wbGVSYXRlO1xuICB0aGlzLnN1c3RhaW5TYW1wbGVzID0gc3VzdGFpbkxlbmd0aCAqIHNhbXBsZVJhdGU7XG4gIHRoaXMucmVsZWFzZVNhbXBsZXMgPSByZWxlYXNlTGVuZ3RoICogc2FtcGxlUmF0ZTtcbiBcbiAgLy8gVXBkYXRlcyB0aGUgZW52ZWxvcGUgc2FtcGxlIHBvc2l0aW9uc1xuICB0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuYXR0YWNrICAgICAgICAgPSAgICAgICAgICAgICAgICB0aGlzLmF0dGFja1NhbXBsZXM7XG4gICAgdGhpcy5kZWNheSAgICAgICAgICA9IHRoaXMuYXR0YWNrICArIHRoaXMuZGVjYXlTYW1wbGVzO1xuICAgIHRoaXMuc3VzdGFpbiAgICAgICAgPSB0aGlzLmRlY2F5ICAgKyB0aGlzLnN1c3RhaW5TYW1wbGVzO1xuICAgIHRoaXMucmVsZWFzZSAgICAgICAgPSB0aGlzLnN1c3RhaW4gKyB0aGlzLnJlbGVhc2VTYW1wbGVzO1xuICB9O1xuIFxuICB0aGlzLnVwZGF0ZSgpO1xuIFxuICB0aGlzLnNhbXBsZXNQcm9jZXNzZWQgPSAwO1xufVxuXG5BRFNSLnByb3RvdHlwZS5ub3RlT24gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zYW1wbGVzUHJvY2Vzc2VkID0gMDtcbiAgdGhpcy5zdXN0YWluU2FtcGxlcyA9IHRoaXMuc3VzdGFpbkxlbmd0aCAqIHRoaXMuc2FtcGxlUmF0ZTtcbiAgdGhpcy51cGRhdGUoKTtcbn07XG5cbi8vIFNlbmQgYSBub3RlIG9mZiB3aGVuIHVzaW5nIGEgc3VzdGFpbiBvZiBpbmZpbml0eSB0byBsZXQgdGhlIGVudmVsb3BlIGVudGVyIHRoZSByZWxlYXNlIHBoYXNlXG5BRFNSLnByb3RvdHlwZS5ub3RlT2ZmID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc3VzdGFpblNhbXBsZXMgPSB0aGlzLnNhbXBsZXNQcm9jZXNzZWQgLSB0aGlzLmRlY2F5U2FtcGxlcztcbiAgdGhpcy51cGRhdGUoKTtcbn07XG5cbkFEU1IucHJvdG90eXBlLnByb2Nlc3NTYW1wbGUgPSBmdW5jdGlvbihzYW1wbGUpIHtcbiAgdmFyIGFtcGxpdHVkZSA9IDA7XG5cbiAgaWYgKCB0aGlzLnNhbXBsZXNQcm9jZXNzZWQgPD0gdGhpcy5hdHRhY2sgKSB7XG4gICAgYW1wbGl0dWRlID0gMCArICgxIC0gMCkgKiAoKHRoaXMuc2FtcGxlc1Byb2Nlc3NlZCAtIDApIC8gKHRoaXMuYXR0YWNrIC0gMCkpO1xuICB9IGVsc2UgaWYgKCB0aGlzLnNhbXBsZXNQcm9jZXNzZWQgPiB0aGlzLmF0dGFjayAmJiB0aGlzLnNhbXBsZXNQcm9jZXNzZWQgPD0gdGhpcy5kZWNheSApIHtcbiAgICBhbXBsaXR1ZGUgPSAxICsgKHRoaXMuc3VzdGFpbkxldmVsIC0gMSkgKiAoKHRoaXMuc2FtcGxlc1Byb2Nlc3NlZCAtIHRoaXMuYXR0YWNrKSAvICh0aGlzLmRlY2F5IC0gdGhpcy5hdHRhY2spKTtcbiAgfSBlbHNlIGlmICggdGhpcy5zYW1wbGVzUHJvY2Vzc2VkID4gdGhpcy5kZWNheSAmJiB0aGlzLnNhbXBsZXNQcm9jZXNzZWQgPD0gdGhpcy5zdXN0YWluICkge1xuICAgIGFtcGxpdHVkZSA9IHRoaXMuc3VzdGFpbkxldmVsO1xuICB9IGVsc2UgaWYgKCB0aGlzLnNhbXBsZXNQcm9jZXNzZWQgPiB0aGlzLnN1c3RhaW4gJiYgdGhpcy5zYW1wbGVzUHJvY2Vzc2VkIDw9IHRoaXMucmVsZWFzZSApIHtcbiAgICBhbXBsaXR1ZGUgPSB0aGlzLnN1c3RhaW5MZXZlbCArICgwIC0gdGhpcy5zdXN0YWluTGV2ZWwpICogKCh0aGlzLnNhbXBsZXNQcm9jZXNzZWQgLSB0aGlzLnN1c3RhaW4pIC8gKHRoaXMucmVsZWFzZSAtIHRoaXMuc3VzdGFpbikpO1xuICB9XG4gXG4gIHJldHVybiBzYW1wbGUgKiBhbXBsaXR1ZGU7XG59O1xuXG5BRFNSLnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgYW1wbGl0dWRlID0gMDtcblxuICBpZiAoIHRoaXMuc2FtcGxlc1Byb2Nlc3NlZCA8PSB0aGlzLmF0dGFjayApIHtcbiAgICBhbXBsaXR1ZGUgPSAwICsgKDEgLSAwKSAqICgodGhpcy5zYW1wbGVzUHJvY2Vzc2VkIC0gMCkgLyAodGhpcy5hdHRhY2sgLSAwKSk7XG4gIH0gZWxzZSBpZiAoIHRoaXMuc2FtcGxlc1Byb2Nlc3NlZCA+IHRoaXMuYXR0YWNrICYmIHRoaXMuc2FtcGxlc1Byb2Nlc3NlZCA8PSB0aGlzLmRlY2F5ICkge1xuICAgIGFtcGxpdHVkZSA9IDEgKyAodGhpcy5zdXN0YWluTGV2ZWwgLSAxKSAqICgodGhpcy5zYW1wbGVzUHJvY2Vzc2VkIC0gdGhpcy5hdHRhY2spIC8gKHRoaXMuZGVjYXkgLSB0aGlzLmF0dGFjaykpO1xuICB9IGVsc2UgaWYgKCB0aGlzLnNhbXBsZXNQcm9jZXNzZWQgPiB0aGlzLmRlY2F5ICYmIHRoaXMuc2FtcGxlc1Byb2Nlc3NlZCA8PSB0aGlzLnN1c3RhaW4gKSB7XG4gICAgYW1wbGl0dWRlID0gdGhpcy5zdXN0YWluTGV2ZWw7XG4gIH0gZWxzZSBpZiAoIHRoaXMuc2FtcGxlc1Byb2Nlc3NlZCA+IHRoaXMuc3VzdGFpbiAmJiB0aGlzLnNhbXBsZXNQcm9jZXNzZWQgPD0gdGhpcy5yZWxlYXNlICkge1xuICAgIGFtcGxpdHVkZSA9IHRoaXMuc3VzdGFpbkxldmVsICsgKDAgLSB0aGlzLnN1c3RhaW5MZXZlbCkgKiAoKHRoaXMuc2FtcGxlc1Byb2Nlc3NlZCAtIHRoaXMuc3VzdGFpbikgLyAodGhpcy5yZWxlYXNlIC0gdGhpcy5zdXN0YWluKSk7XG4gIH1cbiBcbiAgcmV0dXJuIGFtcGxpdHVkZTtcbn07XG4gICAgIFxuQURTUi5wcm90b3R5cGUucHJvY2VzcyA9IGZ1bmN0aW9uKGJ1ZmZlcikge1xuICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBidWZmZXIubGVuZ3RoOyBpKysgKSB7XG4gICAgYnVmZmVyW2ldICo9IHRoaXMudmFsdWUoKTtcblxuICAgIHRoaXMuc2FtcGxlc1Byb2Nlc3NlZCsrO1xuICB9XG4gXG4gIHJldHVybiBidWZmZXI7XG59O1xuICAgICBcbiAgICAgXG5BRFNSLnByb3RvdHlwZS5pc0FjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIHRoaXMuc2FtcGxlc1Byb2Nlc3NlZCA+IHRoaXMucmVsZWFzZSB8fCB0aGlzLnNhbXBsZXNQcm9jZXNzZWQgPT09IC0xICkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuQURTUi5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNhbXBsZXNQcm9jZXNzZWQgPSAtMTtcbn07XG4gXG5mdW5jdGlvbiBJSVJGaWx0ZXIodHlwZSwgY3V0b2ZmLCByZXNvbmFuY2UsIHNhbXBsZVJhdGUpIHtcbiAgdGhpcy5zYW1wbGVSYXRlID0gc2FtcGxlUmF0ZTtcblxuICBzd2l0Y2godHlwZSkge1xuICAgIGNhc2UgRFNQLkxPV1BBU1M6XG4gICAgY2FzZSBEU1AuTFAxMjpcbiAgICAgIHRoaXMuZnVuYyA9IG5ldyBJSVJGaWx0ZXIuTFAxMihjdXRvZmYsIHJlc29uYW5jZSwgc2FtcGxlUmF0ZSk7XG4gICAgICBicmVhaztcbiAgfVxufVxuXG5JSVJGaWx0ZXIucHJvdG90eXBlLl9fZGVmaW5lR2V0dGVyX18oJ2N1dG9mZicsXG4gIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmZ1bmMuY3V0b2ZmO1xuICB9XG4pO1xuXG5JSVJGaWx0ZXIucHJvdG90eXBlLl9fZGVmaW5lR2V0dGVyX18oJ3Jlc29uYW5jZScsXG4gIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmZ1bmMucmVzb25hbmNlO1xuICB9XG4pO1xuXG5JSVJGaWx0ZXIucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGN1dG9mZiwgcmVzb25hbmNlKSB7XG4gIHRoaXMuZnVuYy5jYWxjQ29lZmYoY3V0b2ZmLCByZXNvbmFuY2UpO1xufTtcblxuSUlSRmlsdGVyLnByb3RvdHlwZS5wcm9jZXNzID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gIHRoaXMuZnVuYy5wcm9jZXNzKGJ1ZmZlcik7XG59O1xuXG4vLyBBZGQgYW4gZW52ZWxvcGUgdG8gdGhlIGZpbHRlclxuSUlSRmlsdGVyLnByb3RvdHlwZS5hZGRFbnZlbG9wZSA9IGZ1bmN0aW9uKGVudmVsb3BlKSB7XG4gIGlmICggZW52ZWxvcGUgaW5zdGFuY2VvZiBBRFNSICkge1xuICAgIHRoaXMuZnVuYy5hZGRFbnZlbG9wZShlbnZlbG9wZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgXCJOb3QgYW4gZW52ZWxvcGUuXCI7XG4gIH1cbn07XG5cbklJUkZpbHRlci5MUDEyID0gZnVuY3Rpb24oY3V0b2ZmLCByZXNvbmFuY2UsIHNhbXBsZVJhdGUpIHtcbiAgdGhpcy5zYW1wbGVSYXRlID0gc2FtcGxlUmF0ZTtcbiAgdGhpcy52aWJyYVBvcyAgID0gMDtcbiAgdGhpcy52aWJyYVNwZWVkID0gMDtcbiAgdGhpcy5lbnZlbG9wZSA9IGZhbHNlO1xuIFxuICB0aGlzLmNhbGNDb2VmZiA9IGZ1bmN0aW9uKGN1dG9mZiwgcmVzb25hbmNlKSB7XG4gICAgdGhpcy53ID0gMi4wICogTWF0aC5QSSAqIGN1dG9mZiAvIHRoaXMuc2FtcGxlUmF0ZTtcbiAgICB0aGlzLnEgPSAxLjAgLSB0aGlzLncgLyAoMi4wICogKHJlc29uYW5jZSArIDAuNSAvICgxLjAgKyB0aGlzLncpKSArIHRoaXMudyAtIDIuMCk7XG4gICAgdGhpcy5yID0gdGhpcy5xICogdGhpcy5xO1xuICAgIHRoaXMuYyA9IHRoaXMuciArIDEuMCAtIDIuMCAqIE1hdGguY29zKHRoaXMudykgKiB0aGlzLnE7XG4gICBcbiAgICB0aGlzLmN1dG9mZiA9IGN1dG9mZjtcbiAgICB0aGlzLnJlc29uYW5jZSA9IHJlc29uYW5jZTtcbiAgfTtcblxuICB0aGlzLmNhbGNDb2VmZihjdXRvZmYsIHJlc29uYW5jZSk7XG5cbiAgdGhpcy5wcm9jZXNzID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gICAgZm9yICggdmFyIGkgPSAwOyBpIDwgYnVmZmVyLmxlbmd0aDsgaSsrICkge1xuICAgICAgdGhpcy52aWJyYVNwZWVkICs9IChidWZmZXJbaV0gLSB0aGlzLnZpYnJhUG9zKSAqIHRoaXMuYztcbiAgICAgIHRoaXMudmlicmFQb3MgICArPSB0aGlzLnZpYnJhU3BlZWQ7XG4gICAgICB0aGlzLnZpYnJhU3BlZWQgKj0gdGhpcy5yO1xuICAgXG4gICAgICAvKlxuICAgICAgdmFyIHRlbXAgPSB0aGlzLnZpYnJhUG9zO1xuICAgICBcbiAgICAgIGlmICggdGVtcCA+IDEuMCApIHtcbiAgICAgICAgdGVtcCA9IDEuMDtcbiAgICAgIH0gZWxzZSBpZiAoIHRlbXAgPCAtMS4wICkge1xuICAgICAgICB0ZW1wID0gLTEuMDtcbiAgICAgIH0gZWxzZSBpZiAoIHRlbXAgIT0gdGVtcCApIHtcbiAgICAgICAgdGVtcCA9IDE7XG4gICAgICB9XG4gICAgIFxuICAgICAgYnVmZmVyW2ldID0gdGVtcDtcbiAgICAgICovXG5cbiAgICAgIGlmICh0aGlzLmVudmVsb3BlKSB7XG4gICAgICAgIGJ1ZmZlcltpXSA9IChidWZmZXJbaV0gKiAoMSAtIHRoaXMuZW52ZWxvcGUudmFsdWUoKSkpICsgKHRoaXMudmlicmFQb3MgKiB0aGlzLmVudmVsb3BlLnZhbHVlKCkpO1xuICAgICAgICB0aGlzLmVudmVsb3BlLnNhbXBsZXNQcm9jZXNzZWQrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJ1ZmZlcltpXSA9IHRoaXMudmlicmFQb3M7XG4gICAgICB9XG4gICAgfVxuICB9O1xufTsgXG5cbklJUkZpbHRlci5MUDEyLnByb3RvdHlwZS5hZGRFbnZlbG9wZSA9IGZ1bmN0aW9uKGVudmVsb3BlKSB7XG4gIHRoaXMuZW52ZWxvcGUgPSBlbnZlbG9wZTtcbn07XG5cbmZ1bmN0aW9uIElJUkZpbHRlcjIodHlwZSwgY3V0b2ZmLCByZXNvbmFuY2UsIHNhbXBsZVJhdGUpIHtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy5jdXRvZmYgPSBjdXRvZmY7XG4gIHRoaXMucmVzb25hbmNlID0gcmVzb25hbmNlO1xuICB0aGlzLnNhbXBsZVJhdGUgPSBzYW1wbGVSYXRlO1xuXG4gIHRoaXMuZiA9IEZsb2F0NjRBcnJheSg0KTtcbiAgdGhpcy5mWzBdID0gMC4wOyAvLyBscFxuICB0aGlzLmZbMV0gPSAwLjA7IC8vIGhwXG4gIHRoaXMuZlsyXSA9IDAuMDsgLy8gYnBcbiAgdGhpcy5mWzNdID0gMC4wOyAvLyBiciBcbiBcbiAgdGhpcy5jYWxjQ29lZmYgPSBmdW5jdGlvbihjdXRvZmYsIHJlc29uYW5jZSkge1xuICAgIHRoaXMuZnJlcSA9IDIgKiBNYXRoLnNpbihNYXRoLlBJICogTWF0aC5taW4oMC4yNSwgY3V0b2ZmLyh0aGlzLnNhbXBsZVJhdGUqMikpKTsgIFxuICAgIHRoaXMuZGFtcCA9IE1hdGgubWluKDIgKiAoMSAtIE1hdGgucG93KHJlc29uYW5jZSwgMC4yNSkpLCBNYXRoLm1pbigyLCAyL3RoaXMuZnJlcSAtIHRoaXMuZnJlcSAqIDAuNSkpO1xuICB9O1xuXG4gIHRoaXMuY2FsY0NvZWZmKGN1dG9mZiwgcmVzb25hbmNlKTtcbn1cblxuSUlSRmlsdGVyMi5wcm90b3R5cGUucHJvY2VzcyA9IGZ1bmN0aW9uKGJ1ZmZlcikge1xuICB2YXIgaW5wdXQsIG91dHB1dDtcbiAgdmFyIGYgPSB0aGlzLmY7XG5cbiAgZm9yICggdmFyIGkgPSAwOyBpIDwgYnVmZmVyLmxlbmd0aDsgaSsrICkge1xuICAgIGlucHV0ID0gYnVmZmVyW2ldO1xuXG4gICAgLy8gZmlyc3QgcGFzc1xuICAgIGZbM10gPSBpbnB1dCAtIHRoaXMuZGFtcCAqIGZbMl07XG4gICAgZlswXSA9IGZbMF0gKyB0aGlzLmZyZXEgKiBmWzJdO1xuICAgIGZbMV0gPSBmWzNdIC0gZlswXTtcbiAgICBmWzJdID0gdGhpcy5mcmVxICogZlsxXSArIGZbMl07XG4gICAgb3V0cHV0ID0gMC41ICogZlt0aGlzLnR5cGVdO1xuXG4gICAgLy8gc2Vjb25kIHBhc3NcbiAgICBmWzNdID0gaW5wdXQgLSB0aGlzLmRhbXAgKiBmWzJdO1xuICAgIGZbMF0gPSBmWzBdICsgdGhpcy5mcmVxICogZlsyXTtcbiAgICBmWzFdID0gZlszXSAtIGZbMF07XG4gICAgZlsyXSA9IHRoaXMuZnJlcSAqIGZbMV0gKyBmWzJdO1xuICAgIG91dHB1dCArPSAwLjUgKiBmW3RoaXMudHlwZV07XG5cbiAgICBpZiAodGhpcy5lbnZlbG9wZSkge1xuICAgICAgYnVmZmVyW2ldID0gKGJ1ZmZlcltpXSAqICgxIC0gdGhpcy5lbnZlbG9wZS52YWx1ZSgpKSkgKyAob3V0cHV0ICogdGhpcy5lbnZlbG9wZS52YWx1ZSgpKTtcbiAgICAgIHRoaXMuZW52ZWxvcGUuc2FtcGxlc1Byb2Nlc3NlZCsrO1xuICAgIH0gZWxzZSB7XG4gICAgICBidWZmZXJbaV0gPSBvdXRwdXQ7XG4gICAgfVxuICB9XG59O1xuXG5JSVJGaWx0ZXIyLnByb3RvdHlwZS5hZGRFbnZlbG9wZSA9IGZ1bmN0aW9uKGVudmVsb3BlKSB7XG4gIGlmICggZW52ZWxvcGUgaW5zdGFuY2VvZiBBRFNSICkge1xuICAgIHRoaXMuZW52ZWxvcGUgPSBlbnZlbG9wZTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBcIlRoaXMgaXMgbm90IGFuIGVudmVsb3BlLlwiO1xuICB9XG59O1xuXG5JSVJGaWx0ZXIyLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihjdXRvZmYsIHJlc29uYW5jZSkge1xuICB0aGlzLmNhbGNDb2VmZihjdXRvZmYsIHJlc29uYW5jZSk7XG59O1xuXG5cblxuZnVuY3Rpb24gV2luZG93RnVuY3Rpb24odHlwZSwgYWxwaGEpIHtcbiAgdGhpcy5hbHBoYSA9IGFscGhhO1xuIFxuICBzd2l0Y2godHlwZSkge1xuICAgIGNhc2UgRFNQLkJBUlRMRVRUOlxuICAgICAgdGhpcy5mdW5jID0gV2luZG93RnVuY3Rpb24uQmFydGxldHQ7XG4gICAgICBicmVhaztcbiAgICAgXG4gICAgY2FzZSBEU1AuQkFSVExFVFRIQU5OOlxuICAgICAgdGhpcy5mdW5jID0gV2luZG93RnVuY3Rpb24uQmFydGxldHRIYW5uO1xuICAgICAgYnJlYWs7XG4gICAgIFxuICAgIGNhc2UgRFNQLkJMQUNLTUFOOlxuICAgICAgdGhpcy5mdW5jID0gV2luZG93RnVuY3Rpb24uQmxhY2ttYW47XG4gICAgICB0aGlzLmFscGhhID0gdGhpcy5hbHBoYSB8fCAwLjE2O1xuICAgICAgYnJlYWs7XG4gICBcbiAgICBjYXNlIERTUC5DT1NJTkU6XG4gICAgICB0aGlzLmZ1bmMgPSBXaW5kb3dGdW5jdGlvbi5Db3NpbmU7XG4gICAgICBicmVhaztcbiAgICAgXG4gICAgY2FzZSBEU1AuR0FVU1M6XG4gICAgICB0aGlzLmZ1bmMgPSBXaW5kb3dGdW5jdGlvbi5HYXVzcztcbiAgICAgIHRoaXMuYWxwaGEgPSB0aGlzLmFscGhhIHx8IDAuMjU7XG4gICAgICBicmVhaztcbiAgICAgXG4gICAgY2FzZSBEU1AuSEFNTUlORzpcbiAgICAgIHRoaXMuZnVuYyA9IFdpbmRvd0Z1bmN0aW9uLkhhbW1pbmc7XG4gICAgICBicmVhaztcbiAgICAgXG4gICAgY2FzZSBEU1AuSEFOTjpcbiAgICAgIHRoaXMuZnVuYyA9IFdpbmRvd0Z1bmN0aW9uLkhhbm47XG4gICAgICBicmVhaztcbiAgIFxuICAgIGNhc2UgRFNQLkxBTkNaT1M6XG4gICAgICB0aGlzLmZ1bmMgPSBXaW5kb3dGdW5jdGlvbi5MYW5jem96O1xuICAgICAgYnJlYWs7XG4gICAgIFxuICAgIGNhc2UgRFNQLlJFQ1RBTkdVTEFSOlxuICAgICAgdGhpcy5mdW5jID0gV2luZG93RnVuY3Rpb24uUmVjdGFuZ3VsYXI7XG4gICAgICBicmVhaztcbiAgICAgXG4gICAgY2FzZSBEU1AuVFJJQU5HVUxBUjpcbiAgICAgIHRoaXMuZnVuYyA9IFdpbmRvd0Z1bmN0aW9uLlRyaWFuZ3VsYXI7XG4gICAgICBicmVhaztcbiAgfVxufVxuXG5XaW5kb3dGdW5jdGlvbi5wcm90b3R5cGUucHJvY2VzcyA9IGZ1bmN0aW9uKGJ1ZmZlcikge1xuICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aDtcbiAgZm9yICggdmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG4gICAgYnVmZmVyW2ldICo9IHRoaXMuZnVuYyhsZW5ndGgsIGksIHRoaXMuYWxwaGEpO1xuICB9XG4gIHJldHVybiBidWZmZXI7XG59O1xuXG5XaW5kb3dGdW5jdGlvbi5CYXJ0bGV0dCA9IGZ1bmN0aW9uKGxlbmd0aCwgaW5kZXgpIHtcbiAgcmV0dXJuIDIgLyAobGVuZ3RoIC0gMSkgKiAoKGxlbmd0aCAtIDEpIC8gMiAtIE1hdGguYWJzKGluZGV4IC0gKGxlbmd0aCAtIDEpIC8gMikpO1xufTtcblxuV2luZG93RnVuY3Rpb24uQmFydGxldHRIYW5uID0gZnVuY3Rpb24obGVuZ3RoLCBpbmRleCkge1xuICByZXR1cm4gMC42MiAtIDAuNDggKiBNYXRoLmFicyhpbmRleCAvIChsZW5ndGggLSAxKSAtIDAuNSkgLSAwLjM4ICogTWF0aC5jb3MoRFNQLlRXT19QSSAqIGluZGV4IC8gKGxlbmd0aCAtIDEpKTtcbn07XG5cbldpbmRvd0Z1bmN0aW9uLkJsYWNrbWFuID0gZnVuY3Rpb24obGVuZ3RoLCBpbmRleCwgYWxwaGEpIHtcbiAgdmFyIGEwID0gKDEgLSBhbHBoYSkgLyAyO1xuICB2YXIgYTEgPSAwLjU7XG4gIHZhciBhMiA9IGFscGhhIC8gMjtcblxuICByZXR1cm4gYTAgLSBhMSAqIE1hdGguY29zKERTUC5UV09fUEkgKiBpbmRleCAvIChsZW5ndGggLSAxKSkgKyBhMiAqIE1hdGguY29zKDQgKiBNYXRoLlBJICogaW5kZXggLyAobGVuZ3RoIC0gMSkpO1xufTtcblxuV2luZG93RnVuY3Rpb24uQ29zaW5lID0gZnVuY3Rpb24obGVuZ3RoLCBpbmRleCkge1xuICByZXR1cm4gTWF0aC5jb3MoTWF0aC5QSSAqIGluZGV4IC8gKGxlbmd0aCAtIDEpIC0gTWF0aC5QSSAvIDIpO1xufTtcblxuV2luZG93RnVuY3Rpb24uR2F1c3MgPSBmdW5jdGlvbihsZW5ndGgsIGluZGV4LCBhbHBoYSkge1xuICByZXR1cm4gTWF0aC5wb3coTWF0aC5FLCAtMC41ICogTWF0aC5wb3coKGluZGV4IC0gKGxlbmd0aCAtIDEpIC8gMikgLyAoYWxwaGEgKiAobGVuZ3RoIC0gMSkgLyAyKSwgMikpO1xufTtcblxuV2luZG93RnVuY3Rpb24uSGFtbWluZyA9IGZ1bmN0aW9uKGxlbmd0aCwgaW5kZXgpIHtcbiAgcmV0dXJuIDAuNTQgLSAwLjQ2ICogTWF0aC5jb3MoRFNQLlRXT19QSSAqIGluZGV4IC8gKGxlbmd0aCAtIDEpKTtcbn07XG5cbldpbmRvd0Z1bmN0aW9uLkhhbm4gPSBmdW5jdGlvbihsZW5ndGgsIGluZGV4KSB7XG4gIHJldHVybiAwLjUgKiAoMSAtIE1hdGguY29zKERTUC5UV09fUEkgKiBpbmRleCAvIChsZW5ndGggLSAxKSkpO1xufTtcblxuV2luZG93RnVuY3Rpb24uTGFuY3pvcyA9IGZ1bmN0aW9uKGxlbmd0aCwgaW5kZXgpIHtcbiAgdmFyIHggPSAyICogaW5kZXggLyAobGVuZ3RoIC0gMSkgLSAxO1xuICByZXR1cm4gTWF0aC5zaW4oTWF0aC5QSSAqIHgpIC8gKE1hdGguUEkgKiB4KTtcbn07XG5cbldpbmRvd0Z1bmN0aW9uLlJlY3Rhbmd1bGFyID0gZnVuY3Rpb24obGVuZ3RoLCBpbmRleCkge1xuICByZXR1cm4gMTtcbn07XG5cbldpbmRvd0Z1bmN0aW9uLlRyaWFuZ3VsYXIgPSBmdW5jdGlvbihsZW5ndGgsIGluZGV4KSB7XG4gIHJldHVybiAyIC8gbGVuZ3RoICogKGxlbmd0aCAvIDIgLSBNYXRoLmFicyhpbmRleCAtIChsZW5ndGggLSAxKSAvIDIpKTtcbn07XG5cbmZ1bmN0aW9uIHNpbmggKGFyZykge1xuICAvLyBSZXR1cm5zIHRoZSBoeXBlcmJvbGljIHNpbmUgb2YgdGhlIG51bWJlciwgZGVmaW5lZCBhcyAoZXhwKG51bWJlcikgLSBleHAoLW51bWJlcikpLzIgXG4gIC8vXG4gIC8vIHZlcnNpb246IDEwMDQuMjMxNFxuICAvLyBkaXNjdXNzIGF0OiBodHRwOi8vcGhwanMub3JnL2Z1bmN0aW9ucy9zaW5oICAgIC8vICsgICBvcmlnaW5hbCBieTogT25ubyBNYXJzbWFuXG4gIC8vICogICAgIGV4YW1wbGUgMTogc2luaCgtMC45ODM0MzMwMzQ4ODI1OTA5KTtcbiAgLy8gKiAgICAgcmV0dXJucyAxOiAtMS4xNDk3OTcxNDAyNjM2NTAyXG4gIHJldHVybiAoTWF0aC5leHAoYXJnKSAtIE1hdGguZXhwKC1hcmcpKS8yO1xufVxuXG4vKiBcbiAqICBCaXF1YWQgZmlsdGVyXG4gKiBcbiAqICBDcmVhdGVkIGJ5IFJpY2FyZCBNYXJ4ZXIgPGVtYWlsQHJpY2FyZG1hcnhlci5jb20+IG9uIDIwMTAtMDUtMjMuXG4gKiAgQ29weXJpZ2h0IDIwMTAgUmljYXJkIE1hcnhlci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKi9cbi8vIEltcGxlbWVudGF0aW9uIGJhc2VkIG9uOlxuLy8gaHR0cDovL3d3dy5tdXNpY2RzcC5vcmcvZmlsZXMvQXVkaW8tRVEtQ29va2Jvb2sudHh0XG5mdW5jdGlvbiBCaXF1YWQodHlwZSwgc2FtcGxlUmF0ZSkge1xuICB0aGlzLkZzID0gc2FtcGxlUmF0ZTtcbiAgdGhpcy50eXBlID0gdHlwZTsgIC8vIHR5cGUgb2YgdGhlIGZpbHRlclxuICB0aGlzLnBhcmFtZXRlclR5cGUgPSBEU1AuUTsgLy8gdHlwZSBvZiB0aGUgcGFyYW1ldGVyXG5cbiAgdGhpcy54XzFfbCA9IDA7XG4gIHRoaXMueF8yX2wgPSAwO1xuICB0aGlzLnlfMV9sID0gMDtcbiAgdGhpcy55XzJfbCA9IDA7XG5cbiAgdGhpcy54XzFfciA9IDA7XG4gIHRoaXMueF8yX3IgPSAwO1xuICB0aGlzLnlfMV9yID0gMDtcbiAgdGhpcy55XzJfciA9IDA7XG5cbiAgdGhpcy5iMCA9IDE7XG4gIHRoaXMuYTAgPSAxO1xuXG4gIHRoaXMuYjEgPSAwO1xuICB0aGlzLmExID0gMDtcblxuICB0aGlzLmIyID0gMDtcbiAgdGhpcy5hMiA9IDA7XG5cbiAgdGhpcy5iMGEwID0gdGhpcy5iMCAvIHRoaXMuYTA7XG4gIHRoaXMuYjFhMCA9IHRoaXMuYjEgLyB0aGlzLmEwO1xuICB0aGlzLmIyYTAgPSB0aGlzLmIyIC8gdGhpcy5hMDtcbiAgdGhpcy5hMWEwID0gdGhpcy5hMSAvIHRoaXMuYTA7XG4gIHRoaXMuYTJhMCA9IHRoaXMuYTIgLyB0aGlzLmEwO1xuXG4gIHRoaXMuZjAgPSAzMDAwOyAgIC8vIFwid2hlcmV2ZXIgaXQncyBoYXBwZW5pbicsIG1hbi5cIiAgQ2VudGVyIEZyZXF1ZW5jeSBvclxuICAgICAgICAgICAgICAgICAgICAvLyBDb3JuZXIgRnJlcXVlbmN5LCBvciBzaGVsZiBtaWRwb2ludCBmcmVxdWVuY3ksIGRlcGVuZGluZ1xuICAgICAgICAgICAgICAgICAgICAvLyBvbiB3aGljaCBmaWx0ZXIgdHlwZS4gIFRoZSBcInNpZ25pZmljYW50IGZyZXF1ZW5jeVwiLlxuXG4gIHRoaXMuZEJnYWluID0gMTI7IC8vIHVzZWQgb25seSBmb3IgcGVha2luZyBhbmQgc2hlbHZpbmcgZmlsdGVyc1xuXG4gIHRoaXMuUSA9IDE7ICAgICAgIC8vIHRoZSBFRSBraW5kIG9mIGRlZmluaXRpb24sIGV4Y2VwdCBmb3IgcGVha2luZ0VRIGluIHdoaWNoIEEqUSBpc1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgY2xhc3NpYyBFRSBRLiAgVGhhdCBhZGp1c3RtZW50IGluIGRlZmluaXRpb24gd2FzIG1hZGUgc28gdGhhdFxuICAgICAgICAgICAgICAgICAgICAvLyBhIGJvb3N0IG9mIE4gZEIgZm9sbG93ZWQgYnkgYSBjdXQgb2YgTiBkQiBmb3IgaWRlbnRpY2FsIFEgYW5kXG4gICAgICAgICAgICAgICAgICAgIC8vIGYwL0ZzIHJlc3VsdHMgaW4gYSBwcmVjaXNlbHkgZmxhdCB1bml0eSBnYWluIGZpbHRlciBvciBcIndpcmVcIi5cblxuICB0aGlzLkJXID0gLTM7ICAgICAvLyB0aGUgYmFuZHdpZHRoIGluIG9jdGF2ZXMgKGJldHdlZW4gLTMgZEIgZnJlcXVlbmNpZXMgZm9yIEJQRlxuICAgICAgICAgICAgICAgICAgICAvLyBhbmQgbm90Y2ggb3IgYmV0d2VlbiBtaWRwb2ludCAoZEJnYWluLzIpIGdhaW4gZnJlcXVlbmNpZXMgZm9yXG4gICAgICAgICAgICAgICAgICAgIC8vIHBlYWtpbmcgRVFcblxuICB0aGlzLlMgPSAxOyAgICAgICAvLyBhIFwic2hlbGYgc2xvcGVcIiBwYXJhbWV0ZXIgKGZvciBzaGVsdmluZyBFUSBvbmx5KS4gIFdoZW4gUyA9IDEsXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBzaGVsZiBzbG9wZSBpcyBhcyBzdGVlcCBhcyBpdCBjYW4gYmUgYW5kIHJlbWFpbiBtb25vdG9uaWNhbGx5XG4gICAgICAgICAgICAgICAgICAgIC8vIGluY3JlYXNpbmcgb3IgZGVjcmVhc2luZyBnYWluIHdpdGggZnJlcXVlbmN5LiAgVGhlIHNoZWxmIHNsb3BlLCBpblxuICAgICAgICAgICAgICAgICAgICAvLyBkQi9vY3RhdmUsIHJlbWFpbnMgcHJvcG9ydGlvbmFsIHRvIFMgZm9yIGFsbCBvdGhlciB2YWx1ZXMgZm9yIGFcbiAgICAgICAgICAgICAgICAgICAgLy8gZml4ZWQgZjAvRnMgYW5kIGRCZ2Fpbi5cblxuICB0aGlzLmNvZWZmaWNpZW50cyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBiID0gW3RoaXMuYjAsIHRoaXMuYjEsIHRoaXMuYjJdO1xuICAgIHZhciBhID0gW3RoaXMuYTAsIHRoaXMuYTEsIHRoaXMuYTJdO1xuICAgIHJldHVybiB7YjogYiwgYTphfTtcbiAgfTtcblxuICB0aGlzLnNldEZpbHRlclR5cGUgPSBmdW5jdGlvbih0eXBlKSB7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLnJlY2FsY3VsYXRlQ29lZmZpY2llbnRzKCk7XG4gIH07XG5cbiAgdGhpcy5zZXRTYW1wbGVSYXRlID0gZnVuY3Rpb24ocmF0ZSkge1xuICAgIHRoaXMuRnMgPSByYXRlO1xuICAgIHRoaXMucmVjYWxjdWxhdGVDb2VmZmljaWVudHMoKTtcbiAgfTtcblxuICB0aGlzLnNldFEgPSBmdW5jdGlvbihxKSB7XG4gICAgdGhpcy5wYXJhbWV0ZXJUeXBlID0gRFNQLlE7XG4gICAgdGhpcy5RID0gTWF0aC5tYXgoTWF0aC5taW4ocSwgMTE1LjApLCAwLjAwMSk7XG4gICAgdGhpcy5yZWNhbGN1bGF0ZUNvZWZmaWNpZW50cygpO1xuICB9O1xuXG4gIHRoaXMuc2V0QlcgPSBmdW5jdGlvbihidykge1xuICAgIHRoaXMucGFyYW1ldGVyVHlwZSA9IERTUC5CVztcbiAgICB0aGlzLkJXID0gYnc7XG4gICAgdGhpcy5yZWNhbGN1bGF0ZUNvZWZmaWNpZW50cygpO1xuICB9O1xuXG4gIHRoaXMuc2V0UyA9IGZ1bmN0aW9uKHMpIHtcbiAgICB0aGlzLnBhcmFtZXRlclR5cGUgPSBEU1AuUztcbiAgICB0aGlzLlMgPSBNYXRoLm1heChNYXRoLm1pbihzLCA1LjApLCAwLjAwMDEpO1xuICAgIHRoaXMucmVjYWxjdWxhdGVDb2VmZmljaWVudHMoKTtcbiAgfTtcblxuICB0aGlzLnNldEYwID0gZnVuY3Rpb24oZnJlcSkge1xuICAgIHRoaXMuZjAgPSBmcmVxO1xuICAgIHRoaXMucmVjYWxjdWxhdGVDb2VmZmljaWVudHMoKTtcbiAgfTsgXG4gXG4gIHRoaXMuc2V0RGJHYWluID0gZnVuY3Rpb24oZykge1xuICAgIHRoaXMuZEJnYWluID0gZztcbiAgICB0aGlzLnJlY2FsY3VsYXRlQ29lZmZpY2llbnRzKCk7XG4gIH07XG5cbiAgdGhpcy5yZWNhbGN1bGF0ZUNvZWZmaWNpZW50cyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBBO1xuICAgIGlmICh0eXBlID09PSBEU1AuUEVBS0lOR19FUSB8fCB0eXBlID09PSBEU1AuTE9XX1NIRUxGIHx8IHR5cGUgPT09IERTUC5ISUdIX1NIRUxGICkge1xuICAgICAgQSA9IE1hdGgucG93KDEwLCAodGhpcy5kQmdhaW4vNDApKTsgIC8vIGZvciBwZWFraW5nIGFuZCBzaGVsdmluZyBFUSBmaWx0ZXJzIG9ubHlcbiAgICB9IGVsc2Uge1xuICAgICAgQSAgPSBNYXRoLnNxcnQoIE1hdGgucG93KDEwLCAodGhpcy5kQmdhaW4vMjApKSApOyAgIFxuICAgIH1cblxuICAgIHZhciB3MCA9IERTUC5UV09fUEkgKiB0aGlzLmYwIC8gdGhpcy5GcztcblxuICAgIHZhciBjb3N3MCA9IE1hdGguY29zKHcwKTtcbiAgICB2YXIgc2ludzAgPSBNYXRoLnNpbih3MCk7XG5cbiAgICB2YXIgYWxwaGEgPSAwO1xuICAgXG4gICAgc3dpdGNoICh0aGlzLnBhcmFtZXRlclR5cGUpIHtcbiAgICAgIGNhc2UgRFNQLlE6XG4gICAgICAgIGFscGhhID0gc2ludzAvKDIqdGhpcy5RKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICAgICAgIFxuICAgICAgY2FzZSBEU1AuQlc6XG4gICAgICAgIGFscGhhID0gc2ludzAgKiBzaW5oKCBNYXRoLkxOMi8yICogdGhpcy5CVyAqIHcwL3NpbncwICk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIERTUC5TOlxuICAgICAgICBhbHBoYSA9IHNpbncwLzIgKiBNYXRoLnNxcnQoIChBICsgMS9BKSooMS90aGlzLlMgLSAxKSArIDIgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICAgIEZZSTogVGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIGJhbmR3aWR0aCBhbmQgUSBpc1xuICAgICAgICAgICAgIDEvUSA9IDIqc2luaChsbigyKS8yKkJXKncwL3Npbih3MCkpICAgICAoZGlnaXRhbCBmaWx0ZXIgdyBCTFQpXG4gICAgICAgIG9yICAgMS9RID0gMipzaW5oKGxuKDIpLzIqQlcpICAgICAgICAgICAgIChhbmFsb2cgZmlsdGVyIHByb3RvdHlwZSlcblxuICAgICAgICBUaGUgcmVsYXRpb25zaGlwIGJldHdlZW4gc2hlbGYgc2xvcGUgYW5kIFEgaXNcbiAgICAgICAgICAgICAxL1EgPSBzcXJ0KChBICsgMS9BKSooMS9TIC0gMSkgKyAyKVxuICAgICovXG5cbiAgICB2YXIgY29lZmY7XG5cbiAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgY2FzZSBEU1AuTFBGOiAgICAgICAvLyBIKHMpID0gMSAvIChzXjIgKyBzL1EgKyAxKVxuICAgICAgICB0aGlzLmIwID0gICgxIC0gY29zdzApLzI7XG4gICAgICAgIHRoaXMuYjEgPSAgIDEgLSBjb3N3MDtcbiAgICAgICAgdGhpcy5iMiA9ICAoMSAtIGNvc3cwKS8yO1xuICAgICAgICB0aGlzLmEwID0gICAxICsgYWxwaGE7XG4gICAgICAgIHRoaXMuYTEgPSAgLTIgKiBjb3N3MDtcbiAgICAgICAgdGhpcy5hMiA9ICAgMSAtIGFscGhhO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBEU1AuSFBGOiAgICAgICAvLyBIKHMpID0gc14yIC8gKHNeMiArIHMvUSArIDEpXG4gICAgICAgIHRoaXMuYjAgPSAgKDEgKyBjb3N3MCkvMjtcbiAgICAgICAgdGhpcy5iMSA9IC0oMSArIGNvc3cwKTtcbiAgICAgICAgdGhpcy5iMiA9ICAoMSArIGNvc3cwKS8yO1xuICAgICAgICB0aGlzLmEwID0gICAxICsgYWxwaGE7XG4gICAgICAgIHRoaXMuYTEgPSAgLTIgKiBjb3N3MDtcbiAgICAgICAgdGhpcy5hMiA9ICAgMSAtIGFscGhhO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBEU1AuQlBGX0NPTlNUQU5UX1NLSVJUOiAgICAgICAvLyBIKHMpID0gcyAvIChzXjIgKyBzL1EgKyAxKSAgKGNvbnN0YW50IHNraXJ0IGdhaW4sIHBlYWsgZ2FpbiA9IFEpXG4gICAgICAgIHRoaXMuYjAgPSAgIHNpbncwLzI7XG4gICAgICAgIHRoaXMuYjEgPSAgIDA7XG4gICAgICAgIHRoaXMuYjIgPSAgLXNpbncwLzI7XG4gICAgICAgIHRoaXMuYTAgPSAgIDEgKyBhbHBoYTtcbiAgICAgICAgdGhpcy5hMSA9ICAtMipjb3N3MDtcbiAgICAgICAgdGhpcy5hMiA9ICAgMSAtIGFscGhhO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBEU1AuQlBGX0NPTlNUQU5UX1BFQUs6ICAgICAgIC8vIEgocykgPSAocy9RKSAvIChzXjIgKyBzL1EgKyAxKSAgICAgIChjb25zdGFudCAwIGRCIHBlYWsgZ2FpbilcbiAgICAgICAgdGhpcy5iMCA9ICAgYWxwaGE7XG4gICAgICAgIHRoaXMuYjEgPSAgIDA7XG4gICAgICAgIHRoaXMuYjIgPSAgLWFscGhhO1xuICAgICAgICB0aGlzLmEwID0gICAxICsgYWxwaGE7XG4gICAgICAgIHRoaXMuYTEgPSAgLTIqY29zdzA7XG4gICAgICAgIHRoaXMuYTIgPSAgIDEgLSBhbHBoYTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgRFNQLk5PVENIOiAgICAgLy8gSChzKSA9IChzXjIgKyAxKSAvIChzXjIgKyBzL1EgKyAxKVxuICAgICAgICB0aGlzLmIwID0gICAxO1xuICAgICAgICB0aGlzLmIxID0gIC0yKmNvc3cwO1xuICAgICAgICB0aGlzLmIyID0gICAxO1xuICAgICAgICB0aGlzLmEwID0gICAxICsgYWxwaGE7XG4gICAgICAgIHRoaXMuYTEgPSAgLTIqY29zdzA7XG4gICAgICAgIHRoaXMuYTIgPSAgIDEgLSBhbHBoYTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgRFNQLkFQRjogICAgICAgLy8gSChzKSA9IChzXjIgLSBzL1EgKyAxKSAvIChzXjIgKyBzL1EgKyAxKVxuICAgICAgICB0aGlzLmIwID0gICAxIC0gYWxwaGE7XG4gICAgICAgIHRoaXMuYjEgPSAgLTIqY29zdzA7XG4gICAgICAgIHRoaXMuYjIgPSAgIDEgKyBhbHBoYTtcbiAgICAgICAgdGhpcy5hMCA9ICAgMSArIGFscGhhO1xuICAgICAgICB0aGlzLmExID0gIC0yKmNvc3cwO1xuICAgICAgICB0aGlzLmEyID0gICAxIC0gYWxwaGE7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIERTUC5QRUFLSU5HX0VROiAgLy8gSChzKSA9IChzXjIgKyBzKihBL1EpICsgMSkgLyAoc14yICsgcy8oQSpRKSArIDEpXG4gICAgICAgIHRoaXMuYjAgPSAgIDEgKyBhbHBoYSpBO1xuICAgICAgICB0aGlzLmIxID0gIC0yKmNvc3cwO1xuICAgICAgICB0aGlzLmIyID0gICAxIC0gYWxwaGEqQTtcbiAgICAgICAgdGhpcy5hMCA9ICAgMSArIGFscGhhL0E7XG4gICAgICAgIHRoaXMuYTEgPSAgLTIqY29zdzA7XG4gICAgICAgIHRoaXMuYTIgPSAgIDEgLSBhbHBoYS9BO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBEU1AuTE9XX1NIRUxGOiAgIC8vIEgocykgPSBBICogKHNeMiArIChzcXJ0KEEpL1EpKnMgKyBBKS8oQSpzXjIgKyAoc3FydChBKS9RKSpzICsgMSlcbiAgICAgICAgY29lZmYgPSBzaW53MCAqIE1hdGguc3FydCggKEFeMiArIDEpKigxL3RoaXMuUyAtIDEpICsgMipBICk7XG4gICAgICAgIHRoaXMuYjAgPSAgICBBKigoQSsxKSAtIChBLTEpKmNvc3cwICsgY29lZmYpO1xuICAgICAgICB0aGlzLmIxID0gIDIqQSooKEEtMSkgLSAoQSsxKSpjb3N3MCk7XG4gICAgICAgIHRoaXMuYjIgPSAgICBBKigoQSsxKSAtIChBLTEpKmNvc3cwIC0gY29lZmYpO1xuICAgICAgICB0aGlzLmEwID0gICAgICAgKEErMSkgKyAoQS0xKSpjb3N3MCArIGNvZWZmO1xuICAgICAgICB0aGlzLmExID0gICAtMiooKEEtMSkgKyAoQSsxKSpjb3N3MCk7XG4gICAgICAgIHRoaXMuYTIgPSAgICAgICAoQSsxKSArIChBLTEpKmNvc3cwIC0gY29lZmY7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIERTUC5ISUdIX1NIRUxGOiAgIC8vIEgocykgPSBBICogKEEqc14yICsgKHNxcnQoQSkvUSkqcyArIDEpLyhzXjIgKyAoc3FydChBKS9RKSpzICsgQSlcbiAgICAgICAgY29lZmYgPSBzaW53MCAqIE1hdGguc3FydCggKEFeMiArIDEpKigxL3RoaXMuUyAtIDEpICsgMipBICk7XG4gICAgICAgIHRoaXMuYjAgPSAgICBBKigoQSsxKSArIChBLTEpKmNvc3cwICsgY29lZmYpO1xuICAgICAgICB0aGlzLmIxID0gLTIqQSooKEEtMSkgKyAoQSsxKSpjb3N3MCk7XG4gICAgICAgIHRoaXMuYjIgPSAgICBBKigoQSsxKSArIChBLTEpKmNvc3cwIC0gY29lZmYpO1xuICAgICAgICB0aGlzLmEwID0gICAgICAgKEErMSkgLSAoQS0xKSpjb3N3MCArIGNvZWZmO1xuICAgICAgICB0aGlzLmExID0gICAgMiooKEEtMSkgLSAoQSsxKSpjb3N3MCk7XG4gICAgICAgIHRoaXMuYTIgPSAgICAgICAoQSsxKSAtIChBLTEpKmNvc3cwIC0gY29lZmY7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgIFxuICAgIHRoaXMuYjBhMCA9IHRoaXMuYjAvdGhpcy5hMDtcbiAgICB0aGlzLmIxYTAgPSB0aGlzLmIxL3RoaXMuYTA7XG4gICAgdGhpcy5iMmEwID0gdGhpcy5iMi90aGlzLmEwO1xuICAgIHRoaXMuYTFhMCA9IHRoaXMuYTEvdGhpcy5hMDtcbiAgICB0aGlzLmEyYTAgPSB0aGlzLmEyL3RoaXMuYTA7XG4gIH07XG5cbiAgdGhpcy5wcm9jZXNzID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gICAgICAvL3lbbl0gPSAoYjAvYTApKnhbbl0gKyAoYjEvYTApKnhbbi0xXSArIChiMi9hMCkqeFtuLTJdXG4gICAgICAvLyAgICAgICAtIChhMS9hMCkqeVtuLTFdIC0gKGEyL2EwKSp5W24tMl1cblxuICAgICAgdmFyIGxlbiA9IGJ1ZmZlci5sZW5ndGg7XG4gICAgICB2YXIgb3V0cHV0ID0gbmV3IEZsb2F0NjRBcnJheShsZW4pO1xuXG4gICAgICBmb3IgKCB2YXIgaT0wOyBpPGJ1ZmZlci5sZW5ndGg7IGkrKyApIHtcbiAgICAgICAgb3V0cHV0W2ldID0gdGhpcy5iMGEwKmJ1ZmZlcltpXSArIHRoaXMuYjFhMCp0aGlzLnhfMV9sICsgdGhpcy5iMmEwKnRoaXMueF8yX2wgLSB0aGlzLmExYTAqdGhpcy55XzFfbCAtIHRoaXMuYTJhMCp0aGlzLnlfMl9sO1xuICAgICAgICB0aGlzLnlfMl9sID0gdGhpcy55XzFfbDtcbiAgICAgICAgdGhpcy55XzFfbCA9IG91dHB1dFtpXTtcbiAgICAgICAgdGhpcy54XzJfbCA9IHRoaXMueF8xX2w7XG4gICAgICAgIHRoaXMueF8xX2wgPSBidWZmZXJbaV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvdXRwdXQ7XG4gIH07XG5cbiAgdGhpcy5wcm9jZXNzU3RlcmVvID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gICAgICAvL3lbbl0gPSAoYjAvYTApKnhbbl0gKyAoYjEvYTApKnhbbi0xXSArIChiMi9hMCkqeFtuLTJdXG4gICAgICAvLyAgICAgICAtIChhMS9hMCkqeVtuLTFdIC0gKGEyL2EwKSp5W24tMl1cblxuICAgICAgdmFyIGxlbiA9IGJ1ZmZlci5sZW5ndGg7XG4gICAgICB2YXIgb3V0cHV0ID0gbmV3IEZsb2F0NjRBcnJheShsZW4pO1xuICAgICBcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuLzI7IGkrKykge1xuICAgICAgICBvdXRwdXRbMippXSA9IHRoaXMuYjBhMCpidWZmZXJbMippXSArIHRoaXMuYjFhMCp0aGlzLnhfMV9sICsgdGhpcy5iMmEwKnRoaXMueF8yX2wgLSB0aGlzLmExYTAqdGhpcy55XzFfbCAtIHRoaXMuYTJhMCp0aGlzLnlfMl9sO1xuICAgICAgICB0aGlzLnlfMl9sID0gdGhpcy55XzFfbDtcbiAgICAgICAgdGhpcy55XzFfbCA9IG91dHB1dFsyKmldO1xuICAgICAgICB0aGlzLnhfMl9sID0gdGhpcy54XzFfbDtcbiAgICAgICAgdGhpcy54XzFfbCA9IGJ1ZmZlclsyKmldO1xuXG4gICAgICAgIG91dHB1dFsyKmkrMV0gPSB0aGlzLmIwYTAqYnVmZmVyWzIqaSsxXSArIHRoaXMuYjFhMCp0aGlzLnhfMV9yICsgdGhpcy5iMmEwKnRoaXMueF8yX3IgLSB0aGlzLmExYTAqdGhpcy55XzFfciAtIHRoaXMuYTJhMCp0aGlzLnlfMl9yO1xuICAgICAgICB0aGlzLnlfMl9yID0gdGhpcy55XzFfcjtcbiAgICAgICAgdGhpcy55XzFfciA9IG91dHB1dFsyKmkrMV07XG4gICAgICAgIHRoaXMueF8yX3IgPSB0aGlzLnhfMV9yO1xuICAgICAgICB0aGlzLnhfMV9yID0gYnVmZmVyWzIqaSsxXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG91dHB1dDtcbiAgfTtcbn1cblxuLyogXG4gKiAgTWFnbml0dWRlIHRvIGRlY2liZWxzXG4gKiBcbiAqICBDcmVhdGVkIGJ5IFJpY2FyZCBNYXJ4ZXIgPGVtYWlsQHJpY2FyZG1hcnhlci5jb20+IG9uIDIwMTAtMDUtMjMuXG4gKiAgQ29weXJpZ2h0IDIwMTAgUmljYXJkIE1hcnhlci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiAgQGJ1ZmZlciBhcnJheSBvZiBtYWduaXR1ZGVzIHRvIGNvbnZlcnQgdG8gZGVjaWJlbHNcbiAqXG4gKiAgQHJldHVybnMgdGhlIGFycmF5IGluIGRlY2liZWxzXG4gKlxuICovXG5EU1AubWFnMmRiID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gIHZhciBtaW5EYiA9IC0xMjA7XG4gIHZhciBtaW5NYWcgPSBNYXRoLnBvdygxMC4wLCBtaW5EYiAvIDIwLjApO1xuXG4gIHZhciBsb2cgPSBNYXRoLmxvZztcbiAgdmFyIG1heCA9IE1hdGgubWF4O1xuIFxuICB2YXIgcmVzdWx0ID0gRmxvYXQ2NEFycmF5KGJ1ZmZlci5sZW5ndGgpO1xuICBmb3IgKHZhciBpPTA7IGk8YnVmZmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgcmVzdWx0W2ldID0gMjAuMCpsb2cobWF4KGJ1ZmZlcltpXSwgbWluTWFnKSk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyogXG4gKiAgRnJlcXVlbmN5IHJlc3BvbnNlXG4gKiBcbiAqICBDcmVhdGVkIGJ5IFJpY2FyZCBNYXJ4ZXIgPGVtYWlsQHJpY2FyZG1hcnhlci5jb20+IG9uIDIwMTAtMDUtMjMuXG4gKiAgQ29weXJpZ2h0IDIwMTAgUmljYXJkIE1hcnhlci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiAgQ2FsY3VsYXRlcyB0aGUgZnJlcXVlbmN5IHJlc3BvbnNlIGF0IHRoZSBnaXZlbiBwb2ludHMuXG4gKlxuICogIEBiIGIgY29lZmZpY2llbnRzIG9mIHRoZSBmaWx0ZXJcbiAqICBAYSBhIGNvZWZmaWNpZW50cyBvZiB0aGUgZmlsdGVyXG4gKiAgQHcgdyBwb2ludHMgKG5vcm1hbGx5IGJldHdlZW4gLVBJIGFuZCBQSSkgd2hlcmUgdG8gY2FsY3VsYXRlIHRoZSBmcmVxdWVuY3kgcmVzcG9uc2VcbiAqXG4gKiAgQHJldHVybnMgdGhlIGZyZXF1ZW5jeSByZXNwb25zZSBpbiBtYWduaXR1ZGVcbiAqXG4gKi9cbkRTUC5mcmVxeiA9IGZ1bmN0aW9uKGIsIGEsIHcpIHtcbiAgdmFyIGksIGo7XG5cbiAgaWYgKCF3KSB7XG4gICAgdyA9IEZsb2F0NjRBcnJheSgyMDApO1xuICAgIGZvciAoaT0wO2k8dy5sZW5ndGg7IGkrKykge1xuICAgICAgd1tpXSA9IERTUC5UV09fUEkvdy5sZW5ndGggKiBpIC0gTWF0aC5QSTtcbiAgICB9XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gRmxvYXQ2NEFycmF5KHcubGVuZ3RoKTtcbiBcbiAgdmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG4gIHZhciBjb3MgPSBNYXRoLmNvcztcbiAgdmFyIHNpbiA9IE1hdGguc2luO1xuIFxuICBmb3IgKGk9MDsgaTx3Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG51bWVyYXRvciA9IHtyZWFsOjAuMCwgaW1hZzowLjB9O1xuICAgIGZvciAoaj0wOyBqPGIubGVuZ3RoOyBqKyspIHtcbiAgICAgIG51bWVyYXRvci5yZWFsICs9IGJbal0gKiBjb3MoLWoqd1tpXSk7XG4gICAgICBudW1lcmF0b3IuaW1hZyArPSBiW2pdICogc2luKC1qKndbaV0pO1xuICAgIH1cblxuICAgIHZhciBkZW5vbWluYXRvciA9IHtyZWFsOjAuMCwgaW1hZzowLjB9O1xuICAgIGZvciAoaj0wOyBqPGEubGVuZ3RoOyBqKyspIHtcbiAgICAgIGRlbm9taW5hdG9yLnJlYWwgKz0gYVtqXSAqIGNvcygtaip3W2ldKTtcbiAgICAgIGRlbm9taW5hdG9yLmltYWcgKz0gYVtqXSAqIHNpbigtaip3W2ldKTtcbiAgICB9XG4gXG4gICAgcmVzdWx0W2ldID0gIHNxcnQobnVtZXJhdG9yLnJlYWwqbnVtZXJhdG9yLnJlYWwgKyBudW1lcmF0b3IuaW1hZypudW1lcmF0b3IuaW1hZykgLyBzcXJ0KGRlbm9taW5hdG9yLnJlYWwqZGVub21pbmF0b3IucmVhbCArIGRlbm9taW5hdG9yLmltYWcqZGVub21pbmF0b3IuaW1hZyk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyogXG4gKiAgR3JhcGhpY2FsIEVxdWFsaXplclxuICpcbiAqICBJbXBsZW1lbnRhdGlvbiBvZiBhIGdyYXBoaWMgZXF1YWxpemVyIHdpdGggYSBjb25maWd1cmFibGUgYmFuZHMtcGVyLW9jdGF2ZVxuICogIGFuZCBtaW5pbXVtIGFuZCBtYXhpbXVtIGZyZXF1ZW5jaWVzXG4gKiBcbiAqICBDcmVhdGVkIGJ5IFJpY2FyZCBNYXJ4ZXIgPGVtYWlsQHJpY2FyZG1hcnhlci5jb20+IG9uIDIwMTAtMDUtMjMuXG4gKiAgQ29weXJpZ2h0IDIwMTAgUmljYXJkIE1hcnhlci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKi9cbmZ1bmN0aW9uIEdyYXBoaWNhbEVxKHNhbXBsZVJhdGUpIHtcbiAgdGhpcy5GUyA9IHNhbXBsZVJhdGU7XG4gIHRoaXMubWluRnJlcSA9IDQwLjA7XG4gIHRoaXMubWF4RnJlcSA9IDE2MDAwLjA7XG5cbiAgdGhpcy5iYW5kc1Blck9jdGF2ZSA9IDEuMDtcblxuICB0aGlzLmZpbHRlcnMgPSBbXTtcbiAgdGhpcy5mcmVxenMgPSBbXTtcblxuICB0aGlzLmNhbGN1bGF0ZUZyZXF6cyA9IHRydWU7XG5cbiAgdGhpcy5yZWNhbGN1bGF0ZUZpbHRlcnMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYmFuZENvdW50ID0gTWF0aC5yb3VuZChNYXRoLmxvZyh0aGlzLm1heEZyZXEvdGhpcy5taW5GcmVxKSAqIHRoaXMuYmFuZHNQZXJPY3RhdmUvIE1hdGguTE4yKTtcblxuICAgIHRoaXMuZmlsdGVycyA9IFtdO1xuICAgIGZvciAodmFyIGk9MDsgaTxiYW5kQ291bnQ7IGkrKykge1xuICAgICAgdmFyIGZyZXEgPSB0aGlzLm1pbkZyZXEqKE1hdGgucG93KDIsIGkvdGhpcy5iYW5kc1Blck9jdGF2ZSkpO1xuICAgICAgdmFyIG5ld0ZpbHRlciA9IG5ldyBCaXF1YWQoRFNQLlBFQUtJTkdfRVEsIHRoaXMuRlMpO1xuICAgICAgbmV3RmlsdGVyLnNldERiR2FpbigwKTtcbiAgICAgIG5ld0ZpbHRlci5zZXRCVygxL3RoaXMuYmFuZHNQZXJPY3RhdmUpO1xuICAgICAgbmV3RmlsdGVyLnNldEYwKGZyZXEpO1xuICAgICAgdGhpcy5maWx0ZXJzW2ldID0gbmV3RmlsdGVyO1xuICAgICAgdGhpcy5yZWNhbGN1bGF0ZUZyZXF6KGkpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLnNldE1pbmltdW1GcmVxdWVuY3kgPSBmdW5jdGlvbihmcmVxKSB7XG4gICAgdGhpcy5taW5GcmVxID0gZnJlcTtcbiAgICB0aGlzLnJlY2FsY3VsYXRlRmlsdGVycygpO1xuICB9O1xuXG4gIHRoaXMuc2V0TWF4aW11bUZyZXF1ZW5jeSA9IGZ1bmN0aW9uKGZyZXEpIHtcbiAgICB0aGlzLm1heEZyZXEgPSBmcmVxO1xuICAgIHRoaXMucmVjYWxjdWxhdGVGaWx0ZXJzKCk7XG4gIH07XG5cbiAgdGhpcy5zZXRCYW5kc1Blck9jdGF2ZSA9IGZ1bmN0aW9uKGJhbmRzKSB7XG4gICAgdGhpcy5iYW5kc1Blck9jdGF2ZSA9IGJhbmRzO1xuICAgIHRoaXMucmVjYWxjdWxhdGVGaWx0ZXJzKCk7XG4gIH07XG5cbiAgdGhpcy5zZXRCYW5kR2FpbiA9IGZ1bmN0aW9uKGJhbmRJbmRleCwgZ2Fpbikge1xuICAgIGlmIChiYW5kSW5kZXggPCAwIHx8IGJhbmRJbmRleCA+ICh0aGlzLmZpbHRlcnMubGVuZ3RoLTEpKSB7XG4gICAgICB0aHJvdyBcIlRoZSBiYW5kIGluZGV4IG9mIHRoZSBncmFwaGljYWwgZXF1YWxpemVyIGlzIG91dCBvZiBib3VuZHMuXCI7XG4gICAgfVxuXG4gICAgaWYgKCFnYWluKSB7XG4gICAgICB0aHJvdyBcIkEgZ2FpbiBtdXN0IGJlIHBhc3NlZC5cIjtcbiAgICB9XG4gICBcbiAgICB0aGlzLmZpbHRlcnNbYmFuZEluZGV4XS5zZXREYkdhaW4oZ2Fpbik7XG4gICAgdGhpcy5yZWNhbGN1bGF0ZUZyZXF6KGJhbmRJbmRleCk7XG4gIH07XG4gXG4gIHRoaXMucmVjYWxjdWxhdGVGcmVxeiA9IGZ1bmN0aW9uKGJhbmRJbmRleCkge1xuICAgIGlmICghdGhpcy5jYWxjdWxhdGVGcmVxenMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoYmFuZEluZGV4IDwgMCB8fCBiYW5kSW5kZXggPiAodGhpcy5maWx0ZXJzLmxlbmd0aC0xKSkge1xuICAgICAgdGhyb3cgXCJUaGUgYmFuZCBpbmRleCBvZiB0aGUgZ3JhcGhpY2FsIGVxdWFsaXplciBpcyBvdXQgb2YgYm91bmRzLiBcIiArIGJhbmRJbmRleCArIFwiIGlzIG91dCBvZiBbXCIgKyAwICsgXCIsIFwiICsgdGhpcy5maWx0ZXJzLmxlbmd0aC0xICsgXCJdXCI7XG4gICAgfVxuICAgICAgIFxuICAgIGlmICghdGhpcy53KSB7XG4gICAgICB0aGlzLncgPSBGbG9hdDY0QXJyYXkoNDAwKTtcbiAgICAgIGZvciAodmFyIGk9MDsgaTx0aGlzLncubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgIHRoaXMud1tpXSA9IE1hdGguUEkvdGhpcy53Lmxlbmd0aCAqIGk7XG4gICAgICB9XG4gICAgfVxuICAgXG4gICAgdmFyIGIgPSBbdGhpcy5maWx0ZXJzW2JhbmRJbmRleF0uYjAsIHRoaXMuZmlsdGVyc1tiYW5kSW5kZXhdLmIxLCB0aGlzLmZpbHRlcnNbYmFuZEluZGV4XS5iMl07XG4gICAgdmFyIGEgPSBbdGhpcy5maWx0ZXJzW2JhbmRJbmRleF0uYTAsIHRoaXMuZmlsdGVyc1tiYW5kSW5kZXhdLmExLCB0aGlzLmZpbHRlcnNbYmFuZEluZGV4XS5hMl07XG5cbiAgICB0aGlzLmZyZXF6c1tiYW5kSW5kZXhdID0gRFNQLm1hZzJkYihEU1AuZnJlcXooYiwgYSwgdGhpcy53KSk7XG4gIH07XG5cbiAgdGhpcy5wcm9jZXNzID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gICAgdmFyIG91dHB1dCA9IGJ1ZmZlcjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5maWx0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBvdXRwdXQgPSB0aGlzLmZpbHRlcnNbaV0ucHJvY2VzcyhvdXRwdXQpO1xuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH07XG5cbiAgdGhpcy5wcm9jZXNzU3RlcmVvID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gICAgdmFyIG91dHB1dCA9IGJ1ZmZlcjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5maWx0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBvdXRwdXQgPSB0aGlzLmZpbHRlcnNbaV0ucHJvY2Vzc1N0ZXJlbyhvdXRwdXQpO1xuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH07XG59XG5cbi8qKlxuICogTXVsdGlEZWxheSBlZmZlY3QgYnkgQWxtZXIgVGhpZSAoaHR0cDovL2NvZGUuYWxtZXJvcy5jb20pLlxuICogQ29weXJpZ2h0IDIwMTAgQWxtZXIgVGhpZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEV4YW1wbGU6IGh0dHA6Ly9jb2RlLmFsbWVyb3MuY29tL2NvZGUtZXhhbXBsZXMvZGVsYXktZmlyZWZveC1hdWRpby1hcGkvXG4gKlxuICogVGhpcyBpcyBhIGRlbGF5IHRoYXQgZmVlZHMgaXQncyBvd24gZGVsYXllZCBzaWduYWwgYmFjayBpbnRvIGl0cyBjaXJjdWxhclxuICogYnVmZmVyLiBBbHNvIGtub3duIGFzIGEgQ29tYkZpbHRlci5cbiAqXG4gKiBDb21wYXRpYmxlIHdpdGggaW50ZXJsZWF2ZWQgc3RlcmVvIChvciBtb3JlIGNoYW5uZWwpIGJ1ZmZlcnMgYW5kXG4gKiBub24taW50ZXJsZWF2ZWQgbW9ubyBidWZmZXJzLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtYXhEZWxheUluU2FtcGxlc1NpemUgTWF4aW11bSBwb3NzaWJsZSBkZWxheSBpbiBzYW1wbGVzIChzaXplIG9mIGNpcmN1bGFyIGJ1ZmZlcilcbiAqIEBwYXJhbSB7TnVtYmVyfSBkZWxheUluU2FtcGxlcyBJbml0aWFsIGRlbGF5IGluIHNhbXBsZXNcbiAqIEBwYXJhbSB7TnVtYmVyfSBtYXN0ZXJWb2x1bWUgSW5pdGlhbCBtYXN0ZXIgdm9sdW1lLiBGbG9hdCB2YWx1ZTogMC4wIChzaWxlbmNlKSwgMS4wIChub3JtYWwpLCA+MS4wIChhbXBsaWZ5KVxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5Vm9sdW1lIEluaXRpYWwgZmVlZGJhY2sgZGVsYXkgdm9sdW1lLiBGbG9hdCB2YWx1ZTogMC4wIChzaWxlbmNlKSwgMS4wIChub3JtYWwpLCA+MS4wIChhbXBsaWZ5KVxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBNdWx0aURlbGF5KG1heERlbGF5SW5TYW1wbGVzU2l6ZSwgZGVsYXlJblNhbXBsZXMsIG1hc3RlclZvbHVtZSwgZGVsYXlWb2x1bWUpIHtcbiAgdGhpcy5kZWxheUJ1ZmZlclNhbXBsZXMgICA9IG5ldyBGbG9hdDY0QXJyYXkobWF4RGVsYXlJblNhbXBsZXNTaXplKTsgLy8gVGhlIG1heGltdW0gc2l6ZSBvZiBkZWxheVxuICB0aGlzLmRlbGF5SW5wdXRQb2ludGVyICAgICA9IGRlbGF5SW5TYW1wbGVzO1xuICB0aGlzLmRlbGF5T3V0cHV0UG9pbnRlciAgID0gMDtcbiBcbiAgdGhpcy5kZWxheUluU2FtcGxlcyAgID0gZGVsYXlJblNhbXBsZXM7XG4gIHRoaXMubWFzdGVyVm9sdW1lICAgICA9IG1hc3RlclZvbHVtZTtcbiAgdGhpcy5kZWxheVZvbHVtZSAgICAgPSBkZWxheVZvbHVtZTtcbn1cblxuLyoqXG4gKiBDaGFuZ2UgdGhlIGRlbGF5IHRpbWUgaW4gc2FtcGxlcy5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gZGVsYXlJblNhbXBsZXMgRGVsYXkgaW4gc2FtcGxlc1xuICovXG5NdWx0aURlbGF5LnByb3RvdHlwZS5zZXREZWxheUluU2FtcGxlcyA9IGZ1bmN0aW9uIChkZWxheUluU2FtcGxlcykge1xuICB0aGlzLmRlbGF5SW5TYW1wbGVzID0gZGVsYXlJblNhbXBsZXM7XG4gXG4gIHRoaXMuZGVsYXlJbnB1dFBvaW50ZXIgPSB0aGlzLmRlbGF5T3V0cHV0UG9pbnRlciArIGRlbGF5SW5TYW1wbGVzO1xuXG4gIGlmICh0aGlzLmRlbGF5SW5wdXRQb2ludGVyID49IHRoaXMuZGVsYXlCdWZmZXJTYW1wbGVzLmxlbmd0aC0xKSB7XG4gICAgdGhpcy5kZWxheUlucHV0UG9pbnRlciA9IHRoaXMuZGVsYXlJbnB1dFBvaW50ZXIgLSB0aGlzLmRlbGF5QnVmZmVyU2FtcGxlcy5sZW5ndGg7IFxuICB9XG59O1xuXG4vKipcbiAqIENoYW5nZSB0aGUgbWFzdGVyIHZvbHVtZS5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbWFzdGVyVm9sdW1lIEZsb2F0IHZhbHVlOiAwLjAgKHNpbGVuY2UpLCAxLjAgKG5vcm1hbCksID4xLjAgKGFtcGxpZnkpXG4gKi9cbk11bHRpRGVsYXkucHJvdG90eXBlLnNldE1hc3RlclZvbHVtZSA9IGZ1bmN0aW9uKG1hc3RlclZvbHVtZSkge1xuICB0aGlzLm1hc3RlclZvbHVtZSA9IG1hc3RlclZvbHVtZTtcbn07XG5cbi8qKlxuICogQ2hhbmdlIHRoZSBkZWxheSBmZWVkYmFjayB2b2x1bWUuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5Vm9sdW1lIEZsb2F0IHZhbHVlOiAwLjAgKHNpbGVuY2UpLCAxLjAgKG5vcm1hbCksID4xLjAgKGFtcGxpZnkpXG4gKi9cbk11bHRpRGVsYXkucHJvdG90eXBlLnNldERlbGF5Vm9sdW1lID0gZnVuY3Rpb24oZGVsYXlWb2x1bWUpIHtcbiAgdGhpcy5kZWxheVZvbHVtZSA9IGRlbGF5Vm9sdW1lO1xufTtcblxuLyoqXG4gKiBQcm9jZXNzIGEgZ2l2ZW4gaW50ZXJsZWF2ZWQgb3IgbW9ubyBub24taW50ZXJsZWF2ZWQgZmxvYXQgdmFsdWUgQXJyYXkgYW5kIGFkZHMgdGhlIGRlbGF5ZWQgYXVkaW8uXG4gKlxuICogQHBhcmFtIHtBcnJheX0gc2FtcGxlcyBBcnJheSBjb250YWluaW5nIEZsb2F0IHZhbHVlcyBvciBhIEZsb2F0NjRBcnJheVxuICpcbiAqIEByZXR1cm5zIEEgbmV3IEZsb2F0NjRBcnJheSBpbnRlcmxlYXZlZCBvciBtb25vIG5vbi1pbnRlcmxlYXZlZCBhcyB3YXMgZmVkIHRvIHRoaXMgZnVuY3Rpb24uXG4gKi9cbk11bHRpRGVsYXkucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbihzYW1wbGVzKSB7XG4gIC8vIE5CLiBNYWtlIGEgY29weSB0byBwdXQgaW4gdGhlIG91dHB1dCBzYW1wbGVzIHRvIHJldHVybi5cbiAgdmFyIG91dHB1dFNhbXBsZXMgPSBuZXcgRmxvYXQ2NEFycmF5KHNhbXBsZXMubGVuZ3RoKTtcblxuICBmb3IgKHZhciBpPTA7IGk8c2FtcGxlcy5sZW5ndGg7IGkrKykge1xuICAgIC8vIGRlbGF5QnVmZmVyU2FtcGxlcyBjb3VsZCBjb250YWluIGluaXRpYWwgTlVMTCdzLCByZXR1cm4gc2lsZW5jZSBpbiB0aGF0IGNhc2VcbiAgICB2YXIgZGVsYXlTYW1wbGUgPSAodGhpcy5kZWxheUJ1ZmZlclNhbXBsZXNbdGhpcy5kZWxheU91dHB1dFBvaW50ZXJdID09PSBudWxsID8gMC4wIDogdGhpcy5kZWxheUJ1ZmZlclNhbXBsZXNbdGhpcy5kZWxheU91dHB1dFBvaW50ZXJdKTtcbiAgIFxuICAgIC8vIE1peCBub3JtYWwgYXVkaW8gZGF0YSB3aXRoIGRlbGF5ZWQgYXVkaW9cbiAgICB2YXIgc2FtcGxlID0gKGRlbGF5U2FtcGxlICogdGhpcy5kZWxheVZvbHVtZSkgKyBzYW1wbGVzW2ldO1xuICAgXG4gICAgLy8gQWRkIGF1ZGlvIGRhdGEgd2l0aCB0aGUgZGVsYXkgaW4gdGhlIGRlbGF5IGJ1ZmZlclxuICAgIHRoaXMuZGVsYXlCdWZmZXJTYW1wbGVzW3RoaXMuZGVsYXlJbnB1dFBvaW50ZXJdID0gc2FtcGxlO1xuICAgXG4gICAgLy8gUmV0dXJuIHRoZSBhdWRpbyB3aXRoIGRlbGF5IG1peFxuICAgIG91dHB1dFNhbXBsZXNbaV0gPSBzYW1wbGUgKiB0aGlzLm1hc3RlclZvbHVtZTtcbiAgIFxuICAgIC8vIE1hbmFnZSBjaXJjdWxhaXIgZGVsYXkgYnVmZmVyIHBvaW50ZXJzXG4gICAgdGhpcy5kZWxheUlucHV0UG9pbnRlcisrO1xuICAgIGlmICh0aGlzLmRlbGF5SW5wdXRQb2ludGVyID49IHRoaXMuZGVsYXlCdWZmZXJTYW1wbGVzLmxlbmd0aC0xKSB7XG4gICAgICB0aGlzLmRlbGF5SW5wdXRQb2ludGVyID0gMDtcbiAgICB9XG4gICAgIFxuICAgIHRoaXMuZGVsYXlPdXRwdXRQb2ludGVyKys7XG4gICAgaWYgKHRoaXMuZGVsYXlPdXRwdXRQb2ludGVyID49IHRoaXMuZGVsYXlCdWZmZXJTYW1wbGVzLmxlbmd0aC0xKSB7XG4gICAgICB0aGlzLmRlbGF5T3V0cHV0UG9pbnRlciA9IDA7IFxuICAgIH0gXG4gIH1cbiBcbiAgcmV0dXJuIG91dHB1dFNhbXBsZXM7XG59O1xuXG4vKipcbiAqIFNpbmdsZURlbGF5IGVmZmVjdCBieSBBbG1lciBUaGllIChodHRwOi8vY29kZS5hbG1lcm9zLmNvbSkuXG4gKiBDb3B5cmlnaHQgMjAxMCBBbG1lciBUaGllLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogRXhhbXBsZTogU2VlIHVzYWdlIGluIFJldmVyYiBjbGFzc1xuICpcbiAqIFRoaXMgaXMgYSBkZWxheSB0aGF0IGRvZXMgTk9UIGZlZWRzIGl0J3Mgb3duIGRlbGF5ZWQgc2lnbmFsIGJhY2sgaW50byBpdHMgXG4gKiBjaXJjdWxhciBidWZmZXIsIG5laXRoZXIgZG9lcyBpdCByZXR1cm4gdGhlIG9yaWdpbmFsIHNpZ25hbC4gQWxzbyBrbm93biBhc1xuICogYW4gQWxsUGFzc0ZpbHRlcig/KS5cbiAqXG4gKiBDb21wYXRpYmxlIHdpdGggaW50ZXJsZWF2ZWQgc3RlcmVvIChvciBtb3JlIGNoYW5uZWwpIGJ1ZmZlcnMgYW5kXG4gKiBub24taW50ZXJsZWF2ZWQgbW9ubyBidWZmZXJzLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtYXhEZWxheUluU2FtcGxlc1NpemUgTWF4aW11bSBwb3NzaWJsZSBkZWxheSBpbiBzYW1wbGVzIChzaXplIG9mIGNpcmN1bGFyIGJ1ZmZlcilcbiAqIEBwYXJhbSB7TnVtYmVyfSBkZWxheUluU2FtcGxlcyBJbml0aWFsIGRlbGF5IGluIHNhbXBsZXNcbiAqIEBwYXJhbSB7TnVtYmVyfSBkZWxheVZvbHVtZSBJbml0aWFsIGZlZWRiYWNrIGRlbGF5IHZvbHVtZS4gRmxvYXQgdmFsdWU6IDAuMCAoc2lsZW5jZSksIDEuMCAobm9ybWFsKSwgPjEuMCAoYW1wbGlmeSlcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuXG5mdW5jdGlvbiBTaW5nbGVEZWxheShtYXhEZWxheUluU2FtcGxlc1NpemUsIGRlbGF5SW5TYW1wbGVzLCBkZWxheVZvbHVtZSkge1xuICB0aGlzLmRlbGF5QnVmZmVyU2FtcGxlcyA9IG5ldyBGbG9hdDY0QXJyYXkobWF4RGVsYXlJblNhbXBsZXNTaXplKTsgLy8gVGhlIG1heGltdW0gc2l6ZSBvZiBkZWxheVxuICB0aGlzLmRlbGF5SW5wdXRQb2ludGVyICA9IGRlbGF5SW5TYW1wbGVzO1xuICB0aGlzLmRlbGF5T3V0cHV0UG9pbnRlciA9IDA7XG4gXG4gIHRoaXMuZGVsYXlJblNhbXBsZXMgICAgID0gZGVsYXlJblNhbXBsZXM7XG4gIHRoaXMuZGVsYXlWb2x1bWUgICAgICAgID0gZGVsYXlWb2x1bWU7XG59XG5cbi8qKlxuICogQ2hhbmdlIHRoZSBkZWxheSB0aW1lIGluIHNhbXBsZXMuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5SW5TYW1wbGVzIERlbGF5IGluIHNhbXBsZXNcbiAqL1xuU2luZ2xlRGVsYXkucHJvdG90eXBlLnNldERlbGF5SW5TYW1wbGVzID0gZnVuY3Rpb24oZGVsYXlJblNhbXBsZXMpIHtcbiAgdGhpcy5kZWxheUluU2FtcGxlcyA9IGRlbGF5SW5TYW1wbGVzO1xuICB0aGlzLmRlbGF5SW5wdXRQb2ludGVyID0gdGhpcy5kZWxheU91dHB1dFBvaW50ZXIgKyBkZWxheUluU2FtcGxlcztcblxuICBpZiAodGhpcy5kZWxheUlucHV0UG9pbnRlciA+PSB0aGlzLmRlbGF5QnVmZmVyU2FtcGxlcy5sZW5ndGgtMSkge1xuICAgIHRoaXMuZGVsYXlJbnB1dFBvaW50ZXIgPSB0aGlzLmRlbGF5SW5wdXRQb2ludGVyIC0gdGhpcy5kZWxheUJ1ZmZlclNhbXBsZXMubGVuZ3RoOyBcbiAgfVxufTtcblxuLyoqXG4gKiBDaGFuZ2UgdGhlIHJldHVybiBzaWduYWwgdm9sdW1lLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBkZWxheVZvbHVtZSBGbG9hdCB2YWx1ZTogMC4wIChzaWxlbmNlKSwgMS4wIChub3JtYWwpLCA+MS4wIChhbXBsaWZ5KVxuICovXG5TaW5nbGVEZWxheS5wcm90b3R5cGUuc2V0RGVsYXlWb2x1bWUgPSBmdW5jdGlvbihkZWxheVZvbHVtZSkge1xuICB0aGlzLmRlbGF5Vm9sdW1lID0gZGVsYXlWb2x1bWU7XG59O1xuXG4vKipcbiAqIFByb2Nlc3MgYSBnaXZlbiBpbnRlcmxlYXZlZCBvciBtb25vIG5vbi1pbnRlcmxlYXZlZCBmbG9hdCB2YWx1ZSBBcnJheSBhbmRcbiAqIHJldHVybnMgdGhlIGRlbGF5ZWQgYXVkaW8uXG4gKlxuICogQHBhcmFtIHtBcnJheX0gc2FtcGxlcyBBcnJheSBjb250YWluaW5nIEZsb2F0IHZhbHVlcyBvciBhIEZsb2F0NjRBcnJheVxuICpcbiAqIEByZXR1cm5zIEEgbmV3IEZsb2F0NjRBcnJheSBpbnRlcmxlYXZlZCBvciBtb25vIG5vbi1pbnRlcmxlYXZlZCBhcyB3YXMgZmVkIHRvIHRoaXMgZnVuY3Rpb24uXG4gKi9cblNpbmdsZURlbGF5LnByb3RvdHlwZS5wcm9jZXNzID0gZnVuY3Rpb24oc2FtcGxlcykge1xuICAvLyBOQi4gTWFrZSBhIGNvcHkgdG8gcHV0IGluIHRoZSBvdXRwdXQgc2FtcGxlcyB0byByZXR1cm4uXG4gIHZhciBvdXRwdXRTYW1wbGVzID0gbmV3IEZsb2F0NjRBcnJheShzYW1wbGVzLmxlbmd0aCk7XG5cbiAgZm9yICh2YXIgaT0wOyBpPHNhbXBsZXMubGVuZ3RoOyBpKyspIHtcblxuICAgIC8vIEFkZCBhdWRpbyBkYXRhIHdpdGggdGhlIGRlbGF5IGluIHRoZSBkZWxheSBidWZmZXJcbiAgICB0aGlzLmRlbGF5QnVmZmVyU2FtcGxlc1t0aGlzLmRlbGF5SW5wdXRQb2ludGVyXSA9IHNhbXBsZXNbaV07XG4gICBcbiAgICAvLyBkZWxheUJ1ZmZlclNhbXBsZXMgY291bGQgY29udGFpbiBpbml0aWFsIE5VTEwncywgcmV0dXJuIHNpbGVuY2UgaW4gdGhhdCBjYXNlXG4gICAgdmFyIGRlbGF5U2FtcGxlID0gdGhpcy5kZWxheUJ1ZmZlclNhbXBsZXNbdGhpcy5kZWxheU91dHB1dFBvaW50ZXJdO1xuXG4gICAgLy8gUmV0dXJuIHRoZSBhdWRpbyB3aXRoIGRlbGF5IG1peFxuICAgIG91dHB1dFNhbXBsZXNbaV0gPSBkZWxheVNhbXBsZSAqIHRoaXMuZGVsYXlWb2x1bWU7XG5cbiAgICAvLyBNYW5hZ2UgY2lyY3VsYWlyIGRlbGF5IGJ1ZmZlciBwb2ludGVyc1xuICAgIHRoaXMuZGVsYXlJbnB1dFBvaW50ZXIrKztcblxuICAgIGlmICh0aGlzLmRlbGF5SW5wdXRQb2ludGVyID49IHRoaXMuZGVsYXlCdWZmZXJTYW1wbGVzLmxlbmd0aC0xKSB7XG4gICAgICB0aGlzLmRlbGF5SW5wdXRQb2ludGVyID0gMDtcbiAgICB9XG4gICAgIFxuICAgIHRoaXMuZGVsYXlPdXRwdXRQb2ludGVyKys7XG5cbiAgICBpZiAodGhpcy5kZWxheU91dHB1dFBvaW50ZXIgPj0gdGhpcy5kZWxheUJ1ZmZlclNhbXBsZXMubGVuZ3RoLTEpIHtcbiAgICAgIHRoaXMuZGVsYXlPdXRwdXRQb2ludGVyID0gMDsgXG4gICAgfSBcbiAgfVxuIFxuICByZXR1cm4gb3V0cHV0U2FtcGxlcztcbn07XG5cbi8qKlxuICogUmV2ZXJiIGVmZmVjdCBieSBBbG1lciBUaGllIChodHRwOi8vY29kZS5hbG1lcm9zLmNvbSkuXG4gKiBDb3B5cmlnaHQgMjAxMCBBbG1lciBUaGllLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogRXhhbXBsZTogaHR0cDovL2NvZGUuYWxtZXJvcy5jb20vY29kZS1leGFtcGxlcy9yZXZlcmItZmlyZWZveC1hdWRpby1hcGkvXG4gKlxuICogVGhpcyByZXZlcmIgY29uc2lzdHMgb2YgNiBTaW5nbGVEZWxheXMsIDYgTXVsdGlEZWxheXMgYW5kIGFuIElJUkZpbHRlcjJcbiAqIGZvciBlYWNoIG9mIHRoZSB0d28gc3RlcmVvIGNoYW5uZWxzLlxuICpcbiAqIENvbXBhdGlibGUgd2l0aCBpbnRlcmxlYXZlZCBzdGVyZW8gYnVmZmVycyBvbmx5IVxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtYXhEZWxheUluU2FtcGxlc1NpemUgTWF4aW11bSBwb3NzaWJsZSBkZWxheSBpbiBzYW1wbGVzIChzaXplIG9mIGNpcmN1bGFyIGJ1ZmZlcnMpXG4gKiBAcGFyYW0ge051bWJlcn0gZGVsYXlJblNhbXBsZXMgSW5pdGlhbCBkZWxheSBpbiBzYW1wbGVzIGZvciBpbnRlcm5hbCAoU2luZ2xlL011bHRpKWRlbGF5c1xuICogQHBhcmFtIHtOdW1iZXJ9IG1hc3RlclZvbHVtZSBJbml0aWFsIG1hc3RlciB2b2x1bWUuIEZsb2F0IHZhbHVlOiAwLjAgKHNpbGVuY2UpLCAxLjAgKG5vcm1hbCksID4xLjAgKGFtcGxpZnkpXG4gKiBAcGFyYW0ge051bWJlcn0gbWl4Vm9sdW1lIEluaXRpYWwgcmV2ZXJiIHNpZ25hbCBtaXggdm9sdW1lLiBGbG9hdCB2YWx1ZTogMC4wIChzaWxlbmNlKSwgMS4wIChub3JtYWwpLCA+MS4wIChhbXBsaWZ5KVxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5Vm9sdW1lIEluaXRpYWwgZmVlZGJhY2sgZGVsYXkgdm9sdW1lIGZvciBpbnRlcm5hbCAoU2luZ2xlL011bHRpKWRlbGF5cy4gRmxvYXQgdmFsdWU6IDAuMCAoc2lsZW5jZSksIDEuMCAobm9ybWFsKSwgPjEuMCAoYW1wbGlmeSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBkYW1wRnJlcXVlbmN5IEluaXRpYWwgbG93IHBhc3MgZmlsdGVyIGZyZXF1ZW5jeS4gMCB0byA0NDEwMCAoZGVwZW5kaW5nIG9uIHlvdXIgbWF4aW11bSBzYW1wbGluZyBmcmVxdWVuY3kpXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFJldmVyYihtYXhEZWxheUluU2FtcGxlc1NpemUsIGRlbGF5SW5TYW1wbGVzLCBtYXN0ZXJWb2x1bWUsIG1peFZvbHVtZSwgZGVsYXlWb2x1bWUsIGRhbXBGcmVxdWVuY3kpIHtcbiAgdGhpcy5kZWxheUluU2FtcGxlcyAgID0gZGVsYXlJblNhbXBsZXM7XG4gIHRoaXMubWFzdGVyVm9sdW1lICAgICA9IG1hc3RlclZvbHVtZTtcbiAgdGhpcy5taXhWb2x1bWUgICAgICAgPSBtaXhWb2x1bWU7XG4gIHRoaXMuZGVsYXlWb2x1bWUgICAgID0gZGVsYXlWb2x1bWU7XG4gIHRoaXMuZGFtcEZyZXF1ZW5jeSAgICAgPSBkYW1wRnJlcXVlbmN5O1xuIFxuICB0aGlzLk5SX09GX01VTFRJREVMQVlTID0gNjtcbiAgdGhpcy5OUl9PRl9TSU5HTEVERUxBWVMgPSA2O1xuIFxuICB0aGlzLkxPV1BBU1NMID0gbmV3IElJUkZpbHRlcjIoRFNQLkxPV1BBU1MsIGRhbXBGcmVxdWVuY3ksIDAsIDQ0MTAwKTtcbiAgdGhpcy5MT1dQQVNTUiA9IG5ldyBJSVJGaWx0ZXIyKERTUC5MT1dQQVNTLCBkYW1wRnJlcXVlbmN5LCAwLCA0NDEwMCk7XG4gXG4gIHRoaXMuc2luZ2xlRGVsYXlzID0gW107XG4gIFxuICB2YXIgaSwgZGVsYXlNdWx0aXBseTtcblxuICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5OUl9PRl9TSU5HTEVERUxBWVM7IGkrKykge1xuICAgIGRlbGF5TXVsdGlwbHkgPSAxLjAgKyAoaS83LjApOyAvLyAxLjAsIDEuMSwgMS4yLi4uXG4gICAgdGhpcy5zaW5nbGVEZWxheXNbaV0gPSBuZXcgU2luZ2xlRGVsYXkobWF4RGVsYXlJblNhbXBsZXNTaXplLCBNYXRoLnJvdW5kKHRoaXMuZGVsYXlJblNhbXBsZXMgKiBkZWxheU11bHRpcGx5KSwgdGhpcy5kZWxheVZvbHVtZSk7XG4gIH1cbiBcbiAgdGhpcy5tdWx0aURlbGF5cyA9IFtdO1xuXG4gIGZvciAoaSA9IDA7IGkgPCB0aGlzLk5SX09GX01VTFRJREVMQVlTOyBpKyspIHtcbiAgICBkZWxheU11bHRpcGx5ID0gMS4wICsgKGkvMTAuMCk7IC8vIDEuMCwgMS4xLCAxLjIuLi4gXG4gICAgdGhpcy5tdWx0aURlbGF5c1tpXSA9IG5ldyBNdWx0aURlbGF5KG1heERlbGF5SW5TYW1wbGVzU2l6ZSwgTWF0aC5yb3VuZCh0aGlzLmRlbGF5SW5TYW1wbGVzICogZGVsYXlNdWx0aXBseSksIHRoaXMubWFzdGVyVm9sdW1lLCB0aGlzLmRlbGF5Vm9sdW1lKTtcbiAgfVxufVxuXG4vKipcbiAqIENoYW5nZSB0aGUgZGVsYXkgdGltZSBpbiBzYW1wbGVzIGFzIGEgYmFzZSBmb3IgYWxsIGRlbGF5cy5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gZGVsYXlJblNhbXBsZXMgRGVsYXkgaW4gc2FtcGxlc1xuICovXG5SZXZlcmIucHJvdG90eXBlLnNldERlbGF5SW5TYW1wbGVzID0gZnVuY3Rpb24gKGRlbGF5SW5TYW1wbGVzKXtcbiAgdGhpcy5kZWxheUluU2FtcGxlcyA9IGRlbGF5SW5TYW1wbGVzO1xuXG4gIHZhciBpLCBkZWxheU11bHRpcGx5O1xuIFxuICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5OUl9PRl9TSU5HTEVERUxBWVM7IGkrKykge1xuICAgIGRlbGF5TXVsdGlwbHkgPSAxLjAgKyAoaS83LjApOyAvLyAxLjAsIDEuMSwgMS4yLi4uXG4gICAgdGhpcy5zaW5nbGVEZWxheXNbaV0uc2V0RGVsYXlJblNhbXBsZXMoIE1hdGgucm91bmQodGhpcy5kZWxheUluU2FtcGxlcyAqIGRlbGF5TXVsdGlwbHkpICk7XG4gIH1cbiAgIFxuICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5OUl9PRl9NVUxUSURFTEFZUzsgaSsrKSB7XG4gICAgZGVsYXlNdWx0aXBseSA9IDEuMCArIChpLzEwLjApOyAvLyAxLjAsIDEuMSwgMS4yLi4uXG4gICAgdGhpcy5tdWx0aURlbGF5c1tpXS5zZXREZWxheUluU2FtcGxlcyggTWF0aC5yb3VuZCh0aGlzLmRlbGF5SW5TYW1wbGVzICogZGVsYXlNdWx0aXBseSkgKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDaGFuZ2UgdGhlIG1hc3RlciB2b2x1bWUuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1hc3RlclZvbHVtZSBGbG9hdCB2YWx1ZTogMC4wIChzaWxlbmNlKSwgMS4wIChub3JtYWwpLCA+MS4wIChhbXBsaWZ5KVxuICovXG5SZXZlcmIucHJvdG90eXBlLnNldE1hc3RlclZvbHVtZSA9IGZ1bmN0aW9uIChtYXN0ZXJWb2x1bWUpe1xuICB0aGlzLm1hc3RlclZvbHVtZSA9IG1hc3RlclZvbHVtZTtcbn07XG5cbi8qKlxuICogQ2hhbmdlIHRoZSByZXZlcmIgc2lnbmFsIG1peCBsZXZlbC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbWl4Vm9sdW1lIEZsb2F0IHZhbHVlOiAwLjAgKHNpbGVuY2UpLCAxLjAgKG5vcm1hbCksID4xLjAgKGFtcGxpZnkpXG4gKi9cblJldmVyYi5wcm90b3R5cGUuc2V0TWl4Vm9sdW1lID0gZnVuY3Rpb24gKG1peFZvbHVtZSl7XG4gIHRoaXMubWl4Vm9sdW1lID0gbWl4Vm9sdW1lO1xufTtcblxuLyoqXG4gKiBDaGFuZ2UgYWxsIGRlbGF5cyBmZWVkYmFjayB2b2x1bWUuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5Vm9sdW1lIEZsb2F0IHZhbHVlOiAwLjAgKHNpbGVuY2UpLCAxLjAgKG5vcm1hbCksID4xLjAgKGFtcGxpZnkpXG4gKi9cblJldmVyYi5wcm90b3R5cGUuc2V0RGVsYXlWb2x1bWUgPSBmdW5jdGlvbiAoZGVsYXlWb2x1bWUpe1xuICB0aGlzLmRlbGF5Vm9sdW1lID0gZGVsYXlWb2x1bWU7XG4gXG4gIHZhciBpO1xuXG4gIGZvciAoaSA9IDA7IGk8dGhpcy5OUl9PRl9TSU5HTEVERUxBWVM7IGkrKykge1xuICAgIHRoaXMuc2luZ2xlRGVsYXlzW2ldLnNldERlbGF5Vm9sdW1lKHRoaXMuZGVsYXlWb2x1bWUpO1xuICB9IFxuIFxuICBmb3IgKGkgPSAwOyBpPHRoaXMuTlJfT0ZfTVVMVElERUxBWVM7IGkrKykge1xuICAgIHRoaXMubXVsdGlEZWxheXNbaV0uc2V0RGVsYXlWb2x1bWUodGhpcy5kZWxheVZvbHVtZSk7XG4gIH0gXG59O1xuXG4vKipcbiAqIENoYW5nZSB0aGUgTG93IFBhc3MgZmlsdGVyIGZyZXF1ZW5jeS5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gZGFtcEZyZXF1ZW5jeSBsb3cgcGFzcyBmaWx0ZXIgZnJlcXVlbmN5LiAwIHRvIDQ0MTAwIChkZXBlbmRpbmcgb24geW91ciBtYXhpbXVtIHNhbXBsaW5nIGZyZXF1ZW5jeSlcbiAqL1xuUmV2ZXJiLnByb3RvdHlwZS5zZXREYW1wRnJlcXVlbmN5ID0gZnVuY3Rpb24gKGRhbXBGcmVxdWVuY3kpe1xuICB0aGlzLmRhbXBGcmVxdWVuY3kgPSBkYW1wRnJlcXVlbmN5O1xuIFxuICB0aGlzLkxPV1BBU1NMLnNldChkYW1wRnJlcXVlbmN5LCAwKTtcbiAgdGhpcy5MT1dQQVNTUi5zZXQoZGFtcEZyZXF1ZW5jeSwgMCk7IFxufTtcblxuLyoqXG4gKiBQcm9jZXNzIGEgZ2l2ZW4gaW50ZXJsZWF2ZWQgZmxvYXQgdmFsdWUgQXJyYXkgYW5kIGNvcGllcyBhbmQgYWRkcyB0aGUgcmV2ZXJiIHNpZ25hbC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBzYW1wbGVzIEFycmF5IGNvbnRhaW5pbmcgRmxvYXQgdmFsdWVzIG9yIGEgRmxvYXQ2NEFycmF5XG4gKlxuICogQHJldHVybnMgQSBuZXcgRmxvYXQ2NEFycmF5IGludGVybGVhdmVkIGJ1ZmZlci5cbiAqL1xuUmV2ZXJiLnByb3RvdHlwZS5wcm9jZXNzID0gZnVuY3Rpb24gKGludGVybGVhdmVkU2FtcGxlcyl7IFxuICAvLyBOQi4gTWFrZSBhIGNvcHkgdG8gcHV0IGluIHRoZSBvdXRwdXQgc2FtcGxlcyB0byByZXR1cm4uXG4gIHZhciBvdXRwdXRTYW1wbGVzID0gbmV3IEZsb2F0NjRBcnJheShpbnRlcmxlYXZlZFNhbXBsZXMubGVuZ3RoKTtcbiBcbiAgLy8gUGVyZm9ybSBsb3cgcGFzcyBvbiB0aGUgaW5wdXQgc2FtcGxlcyB0byBtaW1pY2sgZGFtcFxuICB2YXIgbGVmdFJpZ2h0TWl4ID0gRFNQLmRlaW50ZXJsZWF2ZShpbnRlcmxlYXZlZFNhbXBsZXMpO1xuICB0aGlzLkxPV1BBU1NMLnByb2Nlc3MoIGxlZnRSaWdodE1peFtEU1AuTEVGVF0gKTtcbiAgdGhpcy5MT1dQQVNTUi5wcm9jZXNzKCBsZWZ0UmlnaHRNaXhbRFNQLlJJR0hUXSApOyBcbiAgdmFyIGZpbHRlcmVkU2FtcGxlcyA9IERTUC5pbnRlcmxlYXZlKGxlZnRSaWdodE1peFtEU1AuTEVGVF0sIGxlZnRSaWdodE1peFtEU1AuUklHSFRdKTtcblxuICB2YXIgaTtcblxuICAvLyBQcm9jZXNzIE11bHRpRGVsYXlzIGluIHBhcmFsbGVsXG4gIGZvciAoaSA9IDA7IGk8dGhpcy5OUl9PRl9NVUxUSURFTEFZUzsgaSsrKSB7XG4gICAgLy8gSW52ZXJ0IHRoZSBzaWduYWwgb2YgZXZlcnkgZXZlbiBtdWx0aURlbGF5XG4gICAgb3V0cHV0U2FtcGxlcyA9IERTUC5taXhTYW1wbGVCdWZmZXJzKG91dHB1dFNhbXBsZXMsIHRoaXMubXVsdGlEZWxheXNbaV0ucHJvY2VzcyhmaWx0ZXJlZFNhbXBsZXMpLCAyJWkgPT09IDAsIHRoaXMuTlJfT0ZfTVVMVElERUxBWVMpO1xuICB9XG4gXG4gIC8vIFByb2Nlc3MgU2luZ2xlRGVsYXlzIGluIHNlcmllc1xuICB2YXIgc2luZ2xlRGVsYXlTYW1wbGVzID0gbmV3IEZsb2F0NjRBcnJheShvdXRwdXRTYW1wbGVzLmxlbmd0aCk7XG4gIGZvciAoaSA9IDA7IGk8dGhpcy5OUl9PRl9TSU5HTEVERUxBWVM7IGkrKykge1xuICAgIC8vIEludmVydCB0aGUgc2lnbmFsIG9mIGV2ZXJ5IGV2ZW4gc2luZ2xlRGVsYXlcbiAgICBzaW5nbGVEZWxheVNhbXBsZXMgPSBEU1AubWl4U2FtcGxlQnVmZmVycyhzaW5nbGVEZWxheVNhbXBsZXMsIHRoaXMuc2luZ2xlRGVsYXlzW2ldLnByb2Nlc3Mob3V0cHV0U2FtcGxlcyksIDIlaSA9PT0gMCwgMSk7XG4gIH1cblxuICAvLyBBcHBseSB0aGUgdm9sdW1lIG9mIHRoZSByZXZlcmIgc2lnbmFsXG4gIGZvciAoaSA9IDA7IGk8c2luZ2xlRGVsYXlTYW1wbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgc2luZ2xlRGVsYXlTYW1wbGVzW2ldICo9IHRoaXMubWl4Vm9sdW1lO1xuICB9XG4gXG4gIC8vIE1peCB0aGUgb3JpZ2luYWwgc2lnbmFsIHdpdGggdGhlIHJldmVyYiBzaWduYWxcbiAgb3V0cHV0U2FtcGxlcyA9IERTUC5taXhTYW1wbGVCdWZmZXJzKHNpbmdsZURlbGF5U2FtcGxlcywgaW50ZXJsZWF2ZWRTYW1wbGVzLCAwLCAxKTtcblxuICAvLyBBcHBseSB0aGUgbWFzdGVyIHZvbHVtZSB0byB0aGUgY29tcGxldGUgc2lnbmFsXG4gIGZvciAoaSA9IDA7IGk8b3V0cHV0U2FtcGxlcy5sZW5ndGg7IGkrKykge1xuICAgIG91dHB1dFNhbXBsZXNbaV0gKj0gdGhpcy5tYXN0ZXJWb2x1bWU7XG4gIH1cbiAgIFxuICByZXR1cm4gb3V0cHV0U2FtcGxlcztcbn07XG5cbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgRFNQOiBEU1AsXG4gICAgREZUOiBERlQsXG4gICAgRkZUOiBGRlQsXG4gICAgUkZGVDogUkZGVCxcbiAgICBTYW1wbGVyOiBTYW1wbGVyLFxuICAgIE9zY2lsbGF0b3I6IE9zY2lsbGF0b3IsXG4gICAgQURTUjogQURTUixcbiAgICBJSVJGaWx0ZXI6IElJUkZpbHRlcixcbiAgICBJSVJGaWx0ZXIyOiBJSVJGaWx0ZXIyLFxuICAgIFdpbmRvd0Z1bmN0aW9uOiBXaW5kb3dGdW5jdGlvbixcbiAgICBzaW5oOiBzaW5oLFxuICAgIEJpcXVhZDogQmlxdWFkLFxuICAgIEdyYXBoaWNhbEVxOiBHcmFwaGljYWxFcSxcbiAgICBNdWx0aURlbGF5OiBNdWx0aURlbGF5LFxuICAgIFNpbmdsZURlbGF5OiBTaW5nbGVEZWxheSxcbiAgICBSZXZlcmI6IFJldmVyYlxuICB9O1xufSIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=